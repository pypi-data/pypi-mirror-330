import os
import warnings
from typing import Optional

from markdown_pdf import MarkdownPdf, Section
from quickeeg.helpers.preprocessing import Preprocessing


class Report:
    """
    This class is responsible for building the EEG report in PDF format.
    """

    def __init__(self, eeg: Preprocessing):
        self.eeg = eeg

    def add_data_pdf(self, content: list[str], toc: bool = True, center: bool = False):
        """
        Adds the content to the pdf

        Parameters
        ----------
        content : list
            The content to add to the pdf
        toc : bool
            Whether to add a table of contents
        center : bool
            Whether to center the content

        Returns (External)
        ------------------
        Report: PDF
            A section of the SOMA report
        """

        # Formatting
        user_css = "h4 {text-align:center;}" if center else None
        section = Section(" \n ".join(content), toc=toc)
        self.pdf.add_section(section, user_css=user_css)

    def build_title_page(self):
        section_text = [
            "# EEG Report",
            "This report was generated by QuickEEG\n",
            "https://github.com/chadcwilliams/quickeeg",
        ]
        self.add_data_pdf(section_text)

    def build_report_details(self):
        """
        Inserts the report details for the report

        Parameters
        ----------
        None
        """

        section_text = [
            "## QuickEEG Report Details",
            # Add a description of all of the kwargs
            "\n### Inputted Parameters",
        ]
        for key, value in self.eeg.parameters.items():
            if key == "pipeline":
                section_text += [f'**{key.replace("_", " ").title()}**\n']
                section_text += [f"&nbsp;&nbsp;&nbsp;&nbsp; {v}\n" for v in value]
            else:
                section_text += [f'**{key.replace("_", " ").title()}**: {value}\n']
        self.add_data_pdf(section_text)

    def build_erp_plots(self):
        """
        Builds the ERP plots for the EEG report

        Parameters
        ----------
        None
        """

        # Add ERP plot to PDF
        section_text = ["## ERP Plots"]
        for filename in self.eeg.erp_plot_filenames:
            section_text += [f"![ERP Plot]({filename})"]
        self.add_data_pdf(section_text, center=True)

    def build_custom_text(self, custom_text: Optional[list[str]] = None):
        """
        Adds custom text to the report

        Parameters
        ----------
        custom_text : list
            The custom text to add to the report
        """

        # Add custom text to PDF
        if custom_text is not None:
            self.add_data_pdf(custom_text)

    def build_report(self, custom_text: Optional[list[str]] = None):
        """
        Builds the EEG report in PDF format

        Parameters
        ----------
        None
        """

        # Initiate PDF
        self.pdf = MarkdownPdf(toc_level=3)

        # Add content to PDF
        self.build_title_page()
        self.build_report_details()
        self.build_custom_text(custom_text)
        self.build_erp_plots()

        # Save the report
        self.save_report()

    def save_report(self, print_filename: Optional[str] = None) -> None:
        """
        Saves the report as a pdf

        Parameters
        ----------
        print_filename : str
            The filename to save the pdf as

        Returns (External)
        ------------------
        Report: PDF
            The SOMA report
        """

        if print_filename is None:
            self.print_filename = f"report_{self.eeg.id}.pdf"
        else:
            self.print_filename = print_filename
        self.print_filename = os.path.join("quickeeg", "reports", self.print_filename)

        try:
            # Save pdf with default filename
            self.pdf.save(self.print_filename)
        except OSError as e:
            # If file is opened, it will need to save with alternative filename
            original_filename = self.print_filename
            i = 1
            while os.path.exists(self.print_filename):
                try:
                    self.print_filename = original_filename.replace(".pdf", f"-{i}.pdf")
                    self.pdf.save(self.print_filename)
                    break
                except OSError as sub_e:
                    warnings.warn(
                        f"File {original_filename} is currently opened. Attempting to save as {self.print_filename}"
                        f"Error: {sub_e}",
                        stacklevel=2,
                    )
                    i += 1

            # Raise warning
            warnings.warn(
                f"File {original_filename} is currently opened. Saving as {self.print_filename}"
                f"Error: {e}",
                stacklevel=2,
            )
