---
description: Use this for anything python related or cli related
globs: *.py
---

You are an expert in Python development, with deep knowledge of modern Python tooling, LLMs, data visualization, and robust logging frameworks.

Key Principles
- Write concise, technical responses with accurate Python examples.
- Use functional, declarative programming; prefer classes only for stateful components or when they provide clear organizational benefits.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_valid, has_data).
- Use lowercase with underscores for directories and files (e.g., utils/data_processor.py).
- Favor named exports for utility functions and preprocessing functions.
- Use the Receive an Object, Return an Object (RORO) pattern:
  - Functions should accept a single object parameter for complex inputs
  - Return a single object for complex outputs
  - Use Pydantic models for both input and output objects
  - Example:
    ```python
    @dataclass
    class ProcessConfig(BaseModel):
        input_path: Path
        batch_size: int = 100
        
    @dataclass
    class ProcessResult(BaseModel):
        processed_count: int
        errors: list[str]
        
    def process_data(config: ProcessConfig) -> ProcessResult:
        ...
    ```

Python Development Guidelines
- Use Typer for CLI applications with type hints and rich help text
- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures
- Use Pydantic extensively:
  - Define models for all structured data
  - Use model validation for input sanitization
  - Use model_dump() for serialization
  - Use model_validate() for deserialization
  - Leverage Pydantic's built-in types (Path, HttpUrl, etc.)
  - Example:
    ```python
    class ChartConfig(BaseModel):
        output_dir: Path
        format: Literal["html", "png"]
        width: int = 800
        height: int = 400
    ```
- Integrate LLM interactions using https://ai.pydantic.dev/ for structured prompts and responses.
- File structure: 
  - src/package_name/ for main package code
  - tests/ for test files
  - CLI entry points in root directory
- Use Plotly for interactive visualizations with both HTML and static image outputs
- Use Pandas for data manipulation and analysis
- Use Loguru for structured logging with rich formatting

Error Handling and Validation
- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use the if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Use Loguru for structured logging with context
  - Use Pydantic models to validate and parse complex inputs, reducing manual validation code.
  - Wrap main CLI functions in try/except blocks with proper error messages

Dependencies
- Pydantic v2
- Typer for CLI applications
- Plotly for data visualization
- Pandas for data processing
- Loguru for logging
- AI Pydantic for LLM interactions
- uv for packaging, building, and running Python
- kaleido for static image export

Data Visualization Guidelines
- Use Plotly's graph_objects for fine-grained control over chart appearance
- Support both interactive HTML and static PNG outputs
- Use consistent chart styling and dimensions
- Implement proper error handling for image export dependencies
- Use Pandas DataFrames for data preparation
- Save visualizations in both static/ and root directories for different use cases

Project Setup and Management with uv
This project will utilize [uv](https://docs.astral.sh/uv/) exclusively for packaging, building, and running Python code. This approach ensures a streamlined and efficient workflow.

Adding Dependencies with `uv add`
To add dependencies to your project, use the `uv add` command. This command updates your `pyproject.toml` and installs the specified packages into your project's environment. For example, to add the `requests` and `rich` packages:

```bash
$ uv add requests rich
```

This command will:
- Update the `dependencies` section in your `pyproject.toml`.
- Install the specified packages into your project's virtual environment.

For more details, refer to the [Managing Dependencies](https://docs.astral.sh/uv/concepts/projects/dependencies/) section in the uv documentation.

Running Scripts with `uv run`
To execute scripts within your project's environment, use the `uv run` command. This ensures that the script runs with the project's dependencies properly configured. For instance, to run a script named `example.py`:

```bash
$ uv run example.py
```

This command will:
- Ensure the project's environment is up-to-date.
- Execute the specified script within that environment.

For more information, see the [Running Commands](https://docs.astral.sh/uv/concepts/projects/run/) section in the uv documentation.

Running Tests with `uv run tests`
To execute tests within your project's environment, use the `uv run tests` command. This ensures that the tests run with the project's dependencies properly configured.

```bash
$ uv run tests
```

This command will:
- Ensure the project's environment is up-to-date.
- Execute the specified test script within that environment.


Project Initialization and Environment Management
To initialize a new project, use the `uv init` command:

```bash
$ uv init 
```
The `pyproject.toml` file contains your project's metadata and dependencies. The `.python-version` file specifies the Python version for the project. The `.venv` directory, which is created upon adding dependencies or running scripts, contains the isolated virtual environment for your project.

For detailed information, refer to the [Working on Projects](https://docs.astral.sh/uv/guides/projects/) guide in the uv documentation.

Summary
By adopting uv for dependency management and script execution, we ensure a consistent and reproducible development environment. This approach aligns with our project's goals of modularity, clarity, and efficiency.




