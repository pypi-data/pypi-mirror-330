# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ZW_QCS220_pb2 as ZW__QCS220__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ZW_QCS220_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GRPC_QCS220Stub(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.trigger_close = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/trigger_close',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.trigger_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/trigger_ctrl',
                request_serializer=ZW__QCS220__pb2.ParTrigger.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.get_trigger_par = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/get_trigger_par',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResTriggerPar.FromString,
                _registered_method=True)
        self.dac_ch_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/dac_ch_ctrl',
                request_serializer=ZW__QCS220__pb2.ParDacChCtrl.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.dac_open = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/dac_open',
                request_serializer=ZW__QCS220__pb2.ParDacOpen.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.dac_close = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/dac_close',
                request_serializer=ZW__QCS220__pb2.ParDacClose.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.dac_updata = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/dac_updata',
                request_serializer=ZW__QCS220__pb2.ParDacUpdata.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.rfdac_SetNyquistZone = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rfdac_SetNyquistZone',
                request_serializer=ZW__QCS220__pb2.ParDacSetNyquistZone.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.rfdac_GetNyquistZone = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rfdac_GetNyquistZone',
                request_serializer=ZW__QCS220__pb2.ParDacGetNyquistZone.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResDacGetNyquistZone.FromString,
                _registered_method=True)
        self.rfdac_sampling = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rfdac_sampling',
                request_serializer=ZW__QCS220__pb2.ParDacSampling.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.rd_adc_data_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rd_adc_data_ctrl',
                request_serializer=ZW__QCS220__pb2.ParRdAdcDataCtrl.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.rd_adc_data = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rd_adc_data',
                request_serializer=ZW__QCS220__pb2.ParAdcData.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResAdcData.FromString,
                _registered_method=True)
        self.rd_adc_mul_data_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rd_adc_mul_data_ctrl',
                request_serializer=ZW__QCS220__pb2.ParAdcMulDataCtrl.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.rd_adc_mul_data = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rd_adc_mul_data',
                request_serializer=ZW__QCS220__pb2.ParAdcMulData.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResAdcMulData.FromString,
                _registered_method=True)
        self.dac_feedback_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/dac_feedback_ctrl',
                request_serializer=ZW__QCS220__pb2.ParDadFeedBackCtrl.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.adc_mul_decision_ctrl = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/adc_mul_decision_ctrl',
                request_serializer=ZW__QCS220__pb2.ParAdcMulDecisionCtrl.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResString.FromString,
                _registered_method=True)
        self.rd_adc_mul_decision_cnt = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/rd_adc_mul_decision_cnt',
                request_serializer=ZW__QCS220__pb2.ParRdAdcMulDecisionCnt.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResInt32.FromString,
                _registered_method=True)
        self.setSequence = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/setSequence',
                request_serializer=ZW__QCS220__pb2.ParSetSequence.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSequencePar = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/GetSequencePar',
                request_serializer=ZW__QCS220__pb2.ParGetSequencePar.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResGetSequencePar.FromString,
                _registered_method=True)
        self.up_date_ch_id = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/up_date_ch_id',
                request_serializer=ZW__QCS220__pb2.ParUpDataChID.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Upload_Seq_tool = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/Upload_Seq_tool',
                request_serializer=ZW__QCS220__pb2.ParUploadSeqTool.SerializeToString,
                response_deserializer=ZW__QCS220__pb2.ResUploadSeqTool.FromString,
                _registered_method=True)
        self.Restart_Service = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/Restart_Service',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.set_ch_offset = channel.unary_unary(
                '/zw_qcs220.GRPC_QCS220/set_ch_offset',
                request_serializer=ZW__QCS220__pb2.ParSetChOffset.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class GRPC_QCS220Servicer(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    def trigger_close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def trigger_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_trigger_par(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dac_ch_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dac_open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dac_close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dac_updata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rfdac_SetNyquistZone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rfdac_GetNyquistZone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rfdac_sampling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rd_adc_data_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rd_adc_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rd_adc_mul_data_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rd_adc_mul_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dac_feedback_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def adc_mul_decision_ctrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rd_adc_mul_decision_cnt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSequencePar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def up_date_ch_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload_Seq_tool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart_Service(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_ch_offset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPC_QCS220Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'trigger_close': grpc.unary_unary_rpc_method_handler(
                    servicer.trigger_close,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'trigger_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.trigger_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParTrigger.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'get_trigger_par': grpc.unary_unary_rpc_method_handler(
                    servicer.get_trigger_par,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ZW__QCS220__pb2.ResTriggerPar.SerializeToString,
            ),
            'dac_ch_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.dac_ch_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParDacChCtrl.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'dac_open': grpc.unary_unary_rpc_method_handler(
                    servicer.dac_open,
                    request_deserializer=ZW__QCS220__pb2.ParDacOpen.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'dac_close': grpc.unary_unary_rpc_method_handler(
                    servicer.dac_close,
                    request_deserializer=ZW__QCS220__pb2.ParDacClose.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'dac_updata': grpc.unary_unary_rpc_method_handler(
                    servicer.dac_updata,
                    request_deserializer=ZW__QCS220__pb2.ParDacUpdata.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'rfdac_SetNyquistZone': grpc.unary_unary_rpc_method_handler(
                    servicer.rfdac_SetNyquistZone,
                    request_deserializer=ZW__QCS220__pb2.ParDacSetNyquistZone.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'rfdac_GetNyquistZone': grpc.unary_unary_rpc_method_handler(
                    servicer.rfdac_GetNyquistZone,
                    request_deserializer=ZW__QCS220__pb2.ParDacGetNyquistZone.FromString,
                    response_serializer=ZW__QCS220__pb2.ResDacGetNyquistZone.SerializeToString,
            ),
            'rfdac_sampling': grpc.unary_unary_rpc_method_handler(
                    servicer.rfdac_sampling,
                    request_deserializer=ZW__QCS220__pb2.ParDacSampling.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'rd_adc_data_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.rd_adc_data_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParRdAdcDataCtrl.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'rd_adc_data': grpc.unary_unary_rpc_method_handler(
                    servicer.rd_adc_data,
                    request_deserializer=ZW__QCS220__pb2.ParAdcData.FromString,
                    response_serializer=ZW__QCS220__pb2.ResAdcData.SerializeToString,
            ),
            'rd_adc_mul_data_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.rd_adc_mul_data_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParAdcMulDataCtrl.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'rd_adc_mul_data': grpc.unary_unary_rpc_method_handler(
                    servicer.rd_adc_mul_data,
                    request_deserializer=ZW__QCS220__pb2.ParAdcMulData.FromString,
                    response_serializer=ZW__QCS220__pb2.ResAdcMulData.SerializeToString,
            ),
            'dac_feedback_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.dac_feedback_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParDadFeedBackCtrl.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'adc_mul_decision_ctrl': grpc.unary_unary_rpc_method_handler(
                    servicer.adc_mul_decision_ctrl,
                    request_deserializer=ZW__QCS220__pb2.ParAdcMulDecisionCtrl.FromString,
                    response_serializer=ZW__QCS220__pb2.ResString.SerializeToString,
            ),
            'rd_adc_mul_decision_cnt': grpc.unary_unary_rpc_method_handler(
                    servicer.rd_adc_mul_decision_cnt,
                    request_deserializer=ZW__QCS220__pb2.ParRdAdcMulDecisionCnt.FromString,
                    response_serializer=ZW__QCS220__pb2.ResInt32.SerializeToString,
            ),
            'setSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.setSequence,
                    request_deserializer=ZW__QCS220__pb2.ParSetSequence.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSequencePar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSequencePar,
                    request_deserializer=ZW__QCS220__pb2.ParGetSequencePar.FromString,
                    response_serializer=ZW__QCS220__pb2.ResGetSequencePar.SerializeToString,
            ),
            'up_date_ch_id': grpc.unary_unary_rpc_method_handler(
                    servicer.up_date_ch_id,
                    request_deserializer=ZW__QCS220__pb2.ParUpDataChID.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Upload_Seq_tool': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload_Seq_tool,
                    request_deserializer=ZW__QCS220__pb2.ParUploadSeqTool.FromString,
                    response_serializer=ZW__QCS220__pb2.ResUploadSeqTool.SerializeToString,
            ),
            'Restart_Service': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart_Service,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'set_ch_offset': grpc.unary_unary_rpc_method_handler(
                    servicer.set_ch_offset,
                    request_deserializer=ZW__QCS220__pb2.ParSetChOffset.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zw_qcs220.GRPC_QCS220', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('zw_qcs220.GRPC_QCS220', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GRPC_QCS220(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    @staticmethod
    def trigger_close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/trigger_close',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def trigger_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/trigger_ctrl',
            ZW__QCS220__pb2.ParTrigger.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_trigger_par(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/get_trigger_par',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ZW__QCS220__pb2.ResTriggerPar.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dac_ch_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/dac_ch_ctrl',
            ZW__QCS220__pb2.ParDacChCtrl.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dac_open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/dac_open',
            ZW__QCS220__pb2.ParDacOpen.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dac_close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/dac_close',
            ZW__QCS220__pb2.ParDacClose.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dac_updata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/dac_updata',
            ZW__QCS220__pb2.ParDacUpdata.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rfdac_SetNyquistZone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rfdac_SetNyquistZone',
            ZW__QCS220__pb2.ParDacSetNyquistZone.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rfdac_GetNyquistZone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rfdac_GetNyquistZone',
            ZW__QCS220__pb2.ParDacGetNyquistZone.SerializeToString,
            ZW__QCS220__pb2.ResDacGetNyquistZone.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rfdac_sampling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rfdac_sampling',
            ZW__QCS220__pb2.ParDacSampling.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rd_adc_data_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rd_adc_data_ctrl',
            ZW__QCS220__pb2.ParRdAdcDataCtrl.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rd_adc_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rd_adc_data',
            ZW__QCS220__pb2.ParAdcData.SerializeToString,
            ZW__QCS220__pb2.ResAdcData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rd_adc_mul_data_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rd_adc_mul_data_ctrl',
            ZW__QCS220__pb2.ParAdcMulDataCtrl.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rd_adc_mul_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rd_adc_mul_data',
            ZW__QCS220__pb2.ParAdcMulData.SerializeToString,
            ZW__QCS220__pb2.ResAdcMulData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dac_feedback_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/dac_feedback_ctrl',
            ZW__QCS220__pb2.ParDadFeedBackCtrl.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def adc_mul_decision_ctrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/adc_mul_decision_ctrl',
            ZW__QCS220__pb2.ParAdcMulDecisionCtrl.SerializeToString,
            ZW__QCS220__pb2.ResString.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rd_adc_mul_decision_cnt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/rd_adc_mul_decision_cnt',
            ZW__QCS220__pb2.ParRdAdcMulDecisionCnt.SerializeToString,
            ZW__QCS220__pb2.ResInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/setSequence',
            ZW__QCS220__pb2.ParSetSequence.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSequencePar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/GetSequencePar',
            ZW__QCS220__pb2.ParGetSequencePar.SerializeToString,
            ZW__QCS220__pb2.ResGetSequencePar.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def up_date_ch_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/up_date_ch_id',
            ZW__QCS220__pb2.ParUpDataChID.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upload_Seq_tool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/Upload_Seq_tool',
            ZW__QCS220__pb2.ParUploadSeqTool.SerializeToString,
            ZW__QCS220__pb2.ResUploadSeqTool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Restart_Service(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/Restart_Service',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def set_ch_offset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zw_qcs220.GRPC_QCS220/set_ch_offset',
            ZW__QCS220__pb2.ParSetChOffset.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
