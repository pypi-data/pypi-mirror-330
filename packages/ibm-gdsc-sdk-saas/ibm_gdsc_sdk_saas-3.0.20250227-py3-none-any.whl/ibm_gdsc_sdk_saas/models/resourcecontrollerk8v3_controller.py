# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app import Resourcecontrollerk8v3App
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_controller_resources import Resourcecontrollerk8v3ControllerResources
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_key_pair import Resourcecontrollerk8v3KeyPair
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_text_content import Resourcecontrollerk8v3TextContent
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_version import Resourcecontrollerk8v3Version
from typing import Optional, Set
from typing_extensions import Self

class Resourcecontrollerk8v3Controller(BaseModel):
    """
    Controller contains the information about a controller.
    """ # noqa: E501
    app_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional: The list of internal IDs of the apps for the controller.")
    apps: Optional[List[Resourcecontrollerk8v3App]] = Field(default=None, description="Optional: The controller's apps.")
    capability: Optional[Dict[str, StrictBool]] = Field(default=None, description="Optional: The controller capability like protected secret. If absence, app manager assumes all capabilities are false.")
    created: Optional[StrictStr] = Field(default=None, description="Optional: The date this controller was created (ms since epoch).")
    description: Optional[Resourcecontrollerk8v3TextContent] = None
    id: Optional[StrictStr] = Field(default=None, description="Optional: The internal ID of the controller.")
    keypair: Optional[Resourcecontrollerk8v3KeyPair] = None
    last_heartbeat: Optional[StrictStr] = Field(default=None, description="Optional: The last date when a heartbeat was applied to this controller (ms since epoch).")
    local: Optional[StrictBool] = Field(default=None, description="Is the controller \\\"local\\\"? \\\"Local\\\" controllers may not be unpaired, removed, or renewed.")
    modified: Optional[StrictStr] = Field(default=None, description="Optional: The date this controller was modified (ms since epoch).")
    name: Optional[StrictStr] = Field(default=None, description="The name of the controller.")
    resources: Optional[Resourcecontrollerk8v3ControllerResources] = None
    since_last_heartbeat: Optional[StrictStr] = Field(default=None, description="Optional: The number of ms since the last heartbeat.")
    status: Optional[StrictStr] = Field(default=None, description="Optional: The status of the controller. Currently supported values are unpaired, paired, uninstalling.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Optional: The tenant id for the controller.")
    tenant_uuid: Optional[StrictStr] = Field(default=None, description="Optional: The internal ID of the tenant for the controller.")
    version: Optional[Resourcecontrollerk8v3Version] = None
    __properties: ClassVar[List[str]] = ["app_ids", "apps", "capability", "created", "description", "id", "keypair", "last_heartbeat", "local", "modified", "name", "resources", "since_last_heartbeat", "status", "tenant_id", "tenant_uuid", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3Controller from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apps (list)
        _items = []
        if self.apps:
            for _item in self.apps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['apps'] = _items
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keypair
        if self.keypair:
            _dict['keypair'] = self.keypair.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3Controller from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_ids": obj.get("app_ids"),
            "apps": [Resourcecontrollerk8v3App.from_dict(_item) for _item in obj["apps"]] if obj.get("apps") is not None else None,
            "capability": obj.get("capability"),
            "created": obj.get("created"),
            "description": Resourcecontrollerk8v3TextContent.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "id": obj.get("id"),
            "keypair": Resourcecontrollerk8v3KeyPair.from_dict(obj["keypair"]) if obj.get("keypair") is not None else None,
            "last_heartbeat": obj.get("last_heartbeat"),
            "local": obj.get("local"),
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "resources": Resourcecontrollerk8v3ControllerResources.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "since_last_heartbeat": obj.get("since_last_heartbeat"),
            "status": obj.get("status"),
            "tenant_id": obj.get("tenant_id"),
            "tenant_uuid": obj.get("tenant_uuid"),
            "version": Resourcecontrollerk8v3Version.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj


