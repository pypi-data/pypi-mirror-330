# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_container import Resourcecontrollerk8v3Container
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_cron import Resourcecontrollerk8v3Cron
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_file import Resourcecontrollerk8v3File
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_job_execution import Resourcecontrollerk8v3JobExecution
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_rule import Resourcecontrollerk8v3Rule
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_secret import Resourcecontrollerk8v3Secret
from typing import Optional, Set
from typing_extensions import Self

class Resourcecontrollerk8v3Job(BaseModel):
    """
    Job contains the information about a job.
    """ # noqa: E501
    cluster_role_rules: Optional[List[Resourcecontrollerk8v3Rule]] = None
    command: Optional[List[StrictStr]] = Field(default=None, description="Optional:  The optional command to execute as part of the job (if the container entrypoint is insufficient).")
    container: Optional[Resourcecontrollerk8v3Container] = None
    controller_id: Optional[StrictStr] = Field(default=None, description="The ID of the controller to execute the job on.")
    created: Optional[StrictStr] = Field(default=None, description="Optional:  The date this job was created (ms since epoch).")
    cron: Optional[Resourcecontrollerk8v3Cron] = None
    files: Optional[List[Resourcecontrollerk8v3File]] = Field(default=None, description="Optional:  The files for the job.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the job.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional:  The labels for the associated job, cron job, and pod.")
    last_execution: Optional[Resourcecontrollerk8v3JobExecution] = None
    modified: Optional[StrictStr] = Field(default=None, description="Optional:  The date this job was modified (ms since epoch).")
    name: Optional[StrictStr] = Field(default=None, description="The name of the job.")
    role_rules: Optional[List[Resourcecontrollerk8v3Rule]] = None
    secret_key: Optional[StrictStr] = None
    secrets: Optional[List[Resourcecontrollerk8v3Secret]] = Field(default=None, description="Optional:  The secrets for the job.")
    status: Optional[StrictStr] = Field(default=None, description="Optional:  The current job status.")
    __properties: ClassVar[List[str]] = ["cluster_role_rules", "command", "container", "controller_id", "created", "cron", "files", "id", "labels", "last_execution", "modified", "name", "role_rules", "secret_key", "secrets", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_role_rules (list)
        _items = []
        if self.cluster_role_rules:
            for _item in self.cluster_role_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cluster_role_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cron
        if self.cron:
            _dict['cron'] = self.cron.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_execution
        if self.last_execution:
            _dict['last_execution'] = self.last_execution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in role_rules (list)
        _items = []
        if self.role_rules:
            for _item in self.role_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['role_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item in self.secrets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secrets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster_role_rules": [Resourcecontrollerk8v3Rule.from_dict(_item) for _item in obj["cluster_role_rules"]] if obj.get("cluster_role_rules") is not None else None,
            "command": obj.get("command"),
            "container": Resourcecontrollerk8v3Container.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "controller_id": obj.get("controller_id"),
            "created": obj.get("created"),
            "cron": Resourcecontrollerk8v3Cron.from_dict(obj["cron"]) if obj.get("cron") is not None else None,
            "files": [Resourcecontrollerk8v3File.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "last_execution": Resourcecontrollerk8v3JobExecution.from_dict(obj["last_execution"]) if obj.get("last_execution") is not None else None,
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "role_rules": [Resourcecontrollerk8v3Rule.from_dict(_item) for _item in obj["role_rules"]] if obj.get("role_rules") is not None else None,
            "secret_key": obj.get("secret_key"),
            "secrets": [Resourcecontrollerk8v3Secret.from_dict(_item) for _item in obj["secrets"]] if obj.get("secrets") is not None else None,
            "status": obj.get("status")
        })
        return _obj


