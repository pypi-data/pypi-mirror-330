# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_deployment import Resourcecontrollerk8v3AppDeployment
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_file import Resourcecontrollerk8v3AppFile
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_hpa import Resourcecontrollerk8v3AppHpa
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_secret import Resourcecontrollerk8v3AppSecret
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_container import Resourcecontrollerk8v3Container
from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_init_container import Resourcecontrollerk8v3InitContainer
from typing import Optional, Set
from typing_extensions import Self

class Resourcecontrollerk8v3App(BaseModel):
    """
    App contains the information about an app.
    """ # noqa: E501
    container: Optional[Resourcecontrollerk8v3Container] = None
    created: Optional[StrictStr] = Field(default=None, description="Optional: The date this app was created (ms since epoch).")
    deployment: Optional[Resourcecontrollerk8v3AppDeployment] = None
    empty_dir: Optional[StrictStr] = Field(default=None, description="Optional: The path for mounted empty directory. All containers in pod have read/write permission to it.")
    file_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional: The internal IDs of the files for the app. This is deprecated in favor of the files field.")
    files: Optional[List[Resourcecontrollerk8v3AppFile]] = Field(default=None, description="Optional: The files for the app.")
    hpa: Optional[Resourcecontrollerk8v3AppHpa] = None
    id: Optional[StrictStr] = Field(default=None, description="The internal ID of the app.")
    init_containers: Optional[List[Resourcecontrollerk8v3InitContainer]] = None
    modified: Optional[StrictStr] = Field(default=None, description="Optional: The date this app was modified (ms since epoch).")
    name: Optional[StrictStr] = Field(default=None, description="The name of the app.")
    secrets: Optional[List[Resourcecontrollerk8v3AppSecret]] = Field(default=None, description="Optional: The secrets for the app.")
    status: Optional[StrictStr] = Field(default=None, description="Optional: The status of the app.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The tenant id for the app.")
    tenant_uuid: Optional[StrictStr] = Field(default=None, description="The internal ID of the tenant for the app.")
    __properties: ClassVar[List[str]] = ["container", "created", "deployment", "empty_dir", "file_ids", "files", "hpa", "id", "init_containers", "modified", "name", "secrets", "status", "tenant_id", "tenant_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of hpa
        if self.hpa:
            _dict['hpa'] = self.hpa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in init_containers (list)
        _items = []
        if self.init_containers:
            for _item in self.init_containers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['init_containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item in self.secrets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secrets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resourcecontrollerk8v3App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "container": Resourcecontrollerk8v3Container.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "created": obj.get("created"),
            "deployment": Resourcecontrollerk8v3AppDeployment.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "empty_dir": obj.get("empty_dir"),
            "file_ids": obj.get("file_ids"),
            "files": [Resourcecontrollerk8v3AppFile.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "hpa": Resourcecontrollerk8v3AppHpa.from_dict(obj["hpa"]) if obj.get("hpa") is not None else None,
            "id": obj.get("id"),
            "init_containers": [Resourcecontrollerk8v3InitContainer.from_dict(_item) for _item in obj["init_containers"]] if obj.get("init_containers") is not None else None,
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "secrets": [Resourcecontrollerk8v3AppSecret.from_dict(_item) for _item in obj["secrets"]] if obj.get("secrets") is not None else None,
            "status": obj.get("status"),
            "tenant_id": obj.get("tenant_id"),
            "tenant_uuid": obj.get("tenant_uuid")
        })
        return _obj


