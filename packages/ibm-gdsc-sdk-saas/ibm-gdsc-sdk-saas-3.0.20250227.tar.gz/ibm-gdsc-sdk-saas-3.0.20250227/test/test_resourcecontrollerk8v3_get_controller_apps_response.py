# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_get_controller_apps_response import Resourcecontrollerk8v3GetControllerAppsResponse

class TestResourcecontrollerk8v3GetControllerAppsResponse(unittest.TestCase):
    """Resourcecontrollerk8v3GetControllerAppsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Resourcecontrollerk8v3GetControllerAppsResponse:
        """Test Resourcecontrollerk8v3GetControllerAppsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Resourcecontrollerk8v3GetControllerAppsResponse`
        """
        model = Resourcecontrollerk8v3GetControllerAppsResponse()
        if include_optional:
            return Resourcecontrollerk8v3GetControllerAppsResponse(
                apps = [
                    ibm_gdsc_sdk_saas.models.controller_app___controller_app_struct.ControllerApp - controller app struct(
                        container = ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_container.resourcecontrollerk8v3Container(
                            image = '', 
                            image_fully_qualified = True, 
                            resources = ibm_gdsc_sdk_saas.models.container_resources_contains_the_resource_requirements_of_container.ContainerResources contains the resource requirements of container(
                                limits = ibm_gdsc_sdk_saas.models.container_resources_quantity_contains_the_resource_quantities_of_container.ContainerResourcesQuantity contains the resource quantities of container(
                                    cpu = '', 
                                    memory = '', ), 
                                requests = ibm_gdsc_sdk_saas.models.container_resources_quantity_contains_the_resource_quantities_of_container.ContainerResourcesQuantity contains the resource quantities of container(
                                    cpu = '', 
                                    memory = '', ), ), ), 
                        deployment = ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_deployment.resourcecontrollerk8v3AppDeployment(
                            controller_id = '', 
                            details = '', 
                            modified = '', 
                            replicas = 56, 
                            status = '', ), 
                        empty_dir = '', 
                        files = [
                            ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_controller_app_file.resourcecontrollerk8v3ControllerAppFile(
                                content = '', 
                                id = '', 
                                modified = '', 
                                name = '', 
                                path = '', )
                            ], 
                        hpa = ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_app_hpa.resourcecontrollerk8v3AppHpa(
                            max_replicas = '', 
                            min_replicas = '', 
                            target_cpu_utilization_percentage = '', ), 
                        id = '', 
                        init_containers = [
                            ibm_gdsc_sdk_saas.models.resourcecontrollerk8v3_init_container.resourcecontrollerk8v3InitContainer(
                                command = [
                                    ''
                                    ], 
                                image = '', 
                                name = '', )
                            ], 
                        modified = '', 
                        name = '', 
                        secret_key = '', 
                        secrets = [
                            ibm_gdsc_sdk_saas.models.controller_app_secret___controller_app_secret.ControllerAppSecret - controller app secret(
                                created = '', 
                                id = '', 
                                modified = '', 
                                name = '', 
                                protected = True, 
                                value = '', )
                            ], )
                    ],
                controller_id = '',
                modified = ''
            )
        else:
            return Resourcecontrollerk8v3GetControllerAppsResponse(
        )
        """

    def testResourcecontrollerk8v3GetControllerAppsResponse(self):
        """Test Resourcecontrollerk8v3GetControllerAppsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
