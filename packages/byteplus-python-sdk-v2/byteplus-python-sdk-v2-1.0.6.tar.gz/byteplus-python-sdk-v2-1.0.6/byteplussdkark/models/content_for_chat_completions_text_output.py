# coding: utf-8

"""
    ark

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class ContentForChatCompletionsTextOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes': 'list[int]',
        'logprob': 'float',
        'token': 'str',
        'top_logprobs': 'list[TopLogprobForChatCompletionsTextOutput]'
    }

    attribute_map = {
        'bytes': 'bytes',
        'logprob': 'logprob',
        'token': 'token',
        'top_logprobs': 'top_logprobs'
    }

    def __init__(self, bytes=None, logprob=None, token=None, top_logprobs=None, _configuration=None):  # noqa: E501
        """ContentForChatCompletionsTextOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bytes = None
        self._logprob = None
        self._token = None
        self._top_logprobs = None
        self.discriminator = None

        if bytes is not None:
            self.bytes = bytes
        if logprob is not None:
            self.logprob = logprob
        if token is not None:
            self.token = token
        if top_logprobs is not None:
            self.top_logprobs = top_logprobs

    @property
    def bytes(self):
        """Gets the bytes of this ContentForChatCompletionsTextOutput.  # noqa: E501


        :return: The bytes of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :rtype: list[int]
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this ContentForChatCompletionsTextOutput.


        :param bytes: The bytes of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :type: list[int]
        """

        self._bytes = bytes

    @property
    def logprob(self):
        """Gets the logprob of this ContentForChatCompletionsTextOutput.  # noqa: E501


        :return: The logprob of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :rtype: float
        """
        return self._logprob

    @logprob.setter
    def logprob(self, logprob):
        """Sets the logprob of this ContentForChatCompletionsTextOutput.


        :param logprob: The logprob of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :type: float
        """

        self._logprob = logprob

    @property
    def token(self):
        """Gets the token of this ContentForChatCompletionsTextOutput.  # noqa: E501


        :return: The token of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ContentForChatCompletionsTextOutput.


        :param token: The token of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def top_logprobs(self):
        """Gets the top_logprobs of this ContentForChatCompletionsTextOutput.  # noqa: E501


        :return: The top_logprobs of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :rtype: list[TopLogprobForChatCompletionsTextOutput]
        """
        return self._top_logprobs

    @top_logprobs.setter
    def top_logprobs(self, top_logprobs):
        """Sets the top_logprobs of this ContentForChatCompletionsTextOutput.


        :param top_logprobs: The top_logprobs of this ContentForChatCompletionsTextOutput.  # noqa: E501
        :type: list[TopLogprobForChatCompletionsTextOutput]
        """

        self._top_logprobs = top_logprobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentForChatCompletionsTextOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentForChatCompletionsTextOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentForChatCompletionsTextOutput):
            return True

        return self.to_dict() != other.to_dict()
