# coding: utf-8

"""
    ark

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class ChoiceForBatchChatCompletionsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delta': 'DeltaForBatchChatCompletionsOutput',
        'finish_reason': 'str',
        'index': 'int',
        'logprobs': 'LogprobsForBatchChatCompletionsOutput',
        'message': 'MessageForBatchChatCompletionsOutput'
    }

    attribute_map = {
        'delta': 'delta',
        'finish_reason': 'finish_reason',
        'index': 'index',
        'logprobs': 'logprobs',
        'message': 'message'
    }

    def __init__(self, delta=None, finish_reason=None, index=None, logprobs=None, message=None, _configuration=None):  # noqa: E501
        """ChoiceForBatchChatCompletionsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delta = None
        self._finish_reason = None
        self._index = None
        self._logprobs = None
        self._message = None
        self.discriminator = None

        if delta is not None:
            self.delta = delta
        if finish_reason is not None:
            self.finish_reason = finish_reason
        if index is not None:
            self.index = index
        if logprobs is not None:
            self.logprobs = logprobs
        if message is not None:
            self.message = message

    @property
    def delta(self):
        """Gets the delta of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501


        :return: The delta of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :rtype: DeltaForBatchChatCompletionsOutput
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this ChoiceForBatchChatCompletionsOutput.


        :param delta: The delta of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :type: DeltaForBatchChatCompletionsOutput
        """

        self._delta = delta

    @property
    def finish_reason(self):
        """Gets the finish_reason of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501


        :return: The finish_reason of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason):
        """Sets the finish_reason of this ChoiceForBatchChatCompletionsOutput.


        :param finish_reason: The finish_reason of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :type: str
        """

        self._finish_reason = finish_reason

    @property
    def index(self):
        """Gets the index of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501


        :return: The index of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ChoiceForBatchChatCompletionsOutput.


        :param index: The index of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def logprobs(self):
        """Gets the logprobs of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501


        :return: The logprobs of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :rtype: LogprobsForBatchChatCompletionsOutput
        """
        return self._logprobs

    @logprobs.setter
    def logprobs(self, logprobs):
        """Sets the logprobs of this ChoiceForBatchChatCompletionsOutput.


        :param logprobs: The logprobs of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :type: LogprobsForBatchChatCompletionsOutput
        """

        self._logprobs = logprobs

    @property
    def message(self):
        """Gets the message of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501


        :return: The message of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :rtype: MessageForBatchChatCompletionsOutput
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChoiceForBatchChatCompletionsOutput.


        :param message: The message of this ChoiceForBatchChatCompletionsOutput.  # noqa: E501
        :type: MessageForBatchChatCompletionsOutput
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChoiceForBatchChatCompletionsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChoiceForBatchChatCompletionsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChoiceForBatchChatCompletionsOutput):
            return True

        return self.to_dict() != other.to_dict()
