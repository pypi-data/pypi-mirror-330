# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .check_delivery_method import CheckDeliveryMethod
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class CheckPaymentDestinationOptions(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import CheckPaymentDestinationOptions

    CheckPaymentDestinationOptions(
        delivery="MAIL",
        print_description=True,
    )
    """

    delivery: typing.Optional[CheckDeliveryMethod] = pydantic.Field(default=None)
    """
    Delivery method for check disbursements. Defaults to MAIL.
    """

    print_description: typing.Optional[bool] = pydantic.Field(alias="printDescription", default=None)
    """
    If true, prints the invoice description (noteToSelf) on the check note. Defaults to false.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
