# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...invoice_types.types.bank_delivery_method import BankDeliveryMethod
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...invoice_types.types.check_delivery_method import CheckDeliveryMethod


class PaymentMethodCustomizationRequest_BankAccount(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["bankAccount"] = "bankAccount"
    default_delivery_method: typing.Optional[BankDeliveryMethod] = pydantic.Field(
        alias="defaultDeliveryMethod", default=None
    )
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Card(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["card"] = "card"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_VirtualCard(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["virtualCard"] = "virtualCard"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Check(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["check"] = "check"
    default_delivery_method: typing.Optional[CheckDeliveryMethod] = pydantic.Field(
        alias="defaultDeliveryMethod", default=None
    )
    print_description: typing.Optional[bool] = pydantic.Field(alias="printDescription", default=None)
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Custom(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["custom"] = "custom"
    schema_id: str = pydantic.Field(alias="schemaId")
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Bnpl(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["bnpl"] = "bnpl"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_OffPlatform(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["offPlatform"] = "offPlatform"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Utility(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["utility"] = "utility"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodCustomizationRequest_Na(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import (
        PaymentMethodCustomizationRequest_BankAccount,
    )

    PaymentMethodCustomizationRequest_BankAccount(
        disabled=True,
        default_delivery_method="ACH_SAME_DAY",
    )
    """

    type: typing.Literal["na"] = "na"
    disabled: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from mercoa.customization_types import (
    PaymentMethodCustomizationRequest_BankAccount,
)

PaymentMethodCustomizationRequest_BankAccount(
    disabled=True,
    default_delivery_method="ACH_SAME_DAY",
)
"""
PaymentMethodCustomizationRequest = typing.Union[
    PaymentMethodCustomizationRequest_BankAccount,
    PaymentMethodCustomizationRequest_Card,
    PaymentMethodCustomizationRequest_VirtualCard,
    PaymentMethodCustomizationRequest_Check,
    PaymentMethodCustomizationRequest_Custom,
    PaymentMethodCustomizationRequest_Bnpl,
    PaymentMethodCustomizationRequest_OffPlatform,
    PaymentMethodCustomizationRequest_Utility,
    PaymentMethodCustomizationRequest_Na,
]
