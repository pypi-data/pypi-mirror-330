# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.string_or_string_array import StringOrStringArray
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class MetadataFilter(UniversalBaseModel):
    key: str
    value: StringOrStringArray = pydantic.Field()
    """
    If multiple values are provided, the filter will match if any of the values match (OR filter). To filter for the absence of a key, use the value 'NULL'.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
