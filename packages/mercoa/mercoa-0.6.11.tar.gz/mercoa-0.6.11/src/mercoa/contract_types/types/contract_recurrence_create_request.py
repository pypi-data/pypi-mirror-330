# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
from .contract_invoice_schema import ContractInvoiceSchema
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ContractRecurrenceCreateRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.contract_types import (
        ContractInvoiceLineItemSchema,
        ContractInvoiceSchema,
        ContractRecurrenceCreateRequest,
    )

    ContractRecurrenceCreateRequest(
        rrule="DTSTART:20250201T000000ZRRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=1",
        justification="Monthly recurring fee billed in advance on the 1st of each month",
        filtered_contract_summary="Contract Start Date: January 29, 2025\nParties to the Agreement:\n- Provider (Vendor): [Vendor Name] - Client (Payer): [Client Name]\nFees and Payment Terms:\n- Monthly Recurring Fee: \\$20.00 - Payment Schedule: Fees are payable in advance on the 1st day of each month. - First Payment Date: February 1, 2025 - Payment Method: Via credit card to the account designated by Provider. - Payment Due Date: Payment is due 5 days after the invoice date.\n",
        invoice_schema=ContractInvoiceSchema(
            line_items=[
                ContractInvoiceLineItemSchema(
                    name="Monthly Subscription Service Fee",
                    unit_price=20.0,
                    currency="USD",
                    quantity=1.0,
                )
            ],
        ),
    )
    """

    rrule: str = pydantic.Field()
    """
    RFC 5545 RRULE string
    """

    justification: str = pydantic.Field()
    """
    Natural language justification for the recurrence
    """

    filtered_contract_summary: str = pydantic.Field(alias="filteredContractSummary")
    """
    Natural language summary of the contract, filtered to only include information relevant to the recurrence
    """

    invoice_schema: ContractInvoiceSchema = pydantic.Field(alias="invoiceSchema")
    """
    Schema of the invoices to be created by this recurrence
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
