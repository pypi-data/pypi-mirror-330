# pyproject.toml

[build-system]
requires = ["setuptools>=61.0.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pycolorbar"
description = "YAML-based colormap & colorbar settings for matplotlib and xarray"
readme = "README.md"
authors = [
	{ name = "Gionata Ghiggi", email = "gionata.ghiggi@epfl.ch" },
]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Operating System :: Unix",
    "Operating System :: Microsoft",
    "Operating System :: MacOS",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Image Processing",
]
keywords = ["colormap", "colorbar", "bivariate", "trivariate"]
dependencies = [
    "matplotlib",
    "numpy",
    "pydantic>=2.0.0",
    "PyYAML",
]
requires-python = ">=3.10"
dynamic = ["version"]

[project.optional-dependencies]
dev = ["pre-commit", "loghub",
       "deepdiff",
       "pytest", "pytest-cov", "pytest-mock", "pytest-sugar",
       "setuptools",
       "build", "twine",
]

[project.urls]
Homepage = "https://github.com/ghiggi/pycolorbar"
Source = "https://github.com/ghiggi/pycolorbar"
Tracker = "https://github.com/ghiggi/pycolorbar/issues"
Documentation = "https://pycolorbar.readthedocs.io"
changelog = "https://github.com/ghiggi/pycolorbar/CHANGELOG.md"

[tool.setuptools_scm]
write_to = "pycolorbar/_version.py"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
include = ["pycolorbar*"]

[tool.pytest.ini_options]
addopts = "--cov --cov-report term-missing --cov-report xml --cov-report lcov:lcov.info"

[tool.black]
line-length = 120
# skip-string-normalization = true
target-version = [
    "py39",
    "py310",
    "py311",
]

[tool.ruff]
line-length = 120
indent-width = 4

# Addional file to be formatted by ruff (in addition to *py)
extend-include = ["*.ipynb"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "docs",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]

select = [
    # pydocstyle
    "D",
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-quotes
    "Q",
    # flake8-bugbear
    "B",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-raise
    "RSE",
    # flake8-pytest-style
    "PT",
    # flake8-simplify
    "SIM",
    # Perflint
    "PERF",
    # pandas-vet
    "PD",
    # pylint
    "PL",
    # flake8-commas
    "COM",
    # flake8-slots
    "SLOT",
    # flake8-comprehensions
    "C4",
    # Ruff custom rules
    "RUF",
    # NumPy-specific rules  (for 2.0)
    # "NPY",
    #---------------------
    #### Future rules ####
    # flake8-use-pathlib
    # "PTH",
    # refurb
    # "FURB", # require preview
]

ignore = [
    "E722",
    "PT011", # pytest raised error must be checked if match the expected error msg
    "PERF203",
    "RET504",  # unecessary return
    "UP038",
    # Docstyle Rules
    "D404", # Docstring can't start with "This"
    "D401", # First sentence must be in imperative mood
    "D100",

    # Complexity rules
    "PLR0913",
    "PLR2004",
    "PLR0912",
    "PLR0915",
    "PLR1704",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]

# Ignore `E402` (import violations) in all Jupyter Notebooks.
"*.ipynb" = ["E402"]

# Rules to ignore in test files
"test_*.py" = [
    "ARG",  # avoid problems with fixtures
    "D101","D102", "D103", "D104", "D105",  # Missing docstrings
]
"*__init__.py" = ["D104"]

[tool.doc8]
ignore-path = [
    "docs/build",
    "docs/api/generated",
    "docs/_templates",
    "docs/tutorials",
    "docs/examples",
]
file-encoding = "utf8"
max-line-length = 120
ignore = ["D001"]

[tool.codespell]
ignore-words-list = 'nD'

[tool.coverage]
    [tool.coverage.run]
    source = ["pycolorbar"]
    omit = [
        "*dev*",
        "*docs*",
        "*tutorials*",
        "/pycolorbar/tests*",
        "/pycolorbar/_version.py"
    ]

    [tool.coverage.report]
    exclude_lines = [
        "pragma: no cover",
        "def __repr__",
        "def __str__",
    ]
