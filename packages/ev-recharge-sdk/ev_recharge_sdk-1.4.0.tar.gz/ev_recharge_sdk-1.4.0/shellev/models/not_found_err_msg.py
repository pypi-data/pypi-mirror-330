# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class NotFoundErrMsg(object):

    """Implementation of the 'NotFoundErrMsg' model.

    Attributes:
        code (str): Error code
        message (str): Error desctiption in English
        description (str): Technical details of the error message, the example
            which is given in the sample payload is one of the scenarios.
            actual response will vary based on the technical nature
        details (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "message": 'message',
        "description": 'description',
        "details": 'details'
    }

    _optionals = [
        'code',
        'message',
        'description',
        'details',
    ]

    def __init__(self,
                 code=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 details=APIHelper.SKIP):
        """Constructor for the NotFoundErrMsg class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        if message is not APIHelper.SKIP:
            self.message = message 
        if description is not APIHelper.SKIP:
            self.description = description 
        if details is not APIHelper.SKIP:
            self.details = details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        details = dictionary.get("details") if dictionary.get("details") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   message,
                   description,
                   details)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'message={(self.message if hasattr(self, "message") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'details={(self.details if hasattr(self, "details") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'message={(self.message if hasattr(self, "message") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'details={(self.details if hasattr(self, "details") else None)!s})')
