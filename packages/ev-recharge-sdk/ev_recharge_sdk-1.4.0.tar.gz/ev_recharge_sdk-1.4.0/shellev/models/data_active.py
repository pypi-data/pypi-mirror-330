# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper
from shellev.models.charge_retrieve_state import ChargeRetrieveState


class DataActive(object):

    """Implementation of the 'Data_Active' model.

    Attributes:
        id (uuid|str): Id of the session
        user_id (str): Id of the user that started the session
        ema_id (str): Id of the evse that the user is charging
        evse_id (str): Electric Vehicle Supply Equipment Identifier. An EVSEID
            identifies a Charging Point.
        started_at (datetime): When the session is started
        stopped_at (datetime): When the session is stopped
        session_state (ChargeRetrieveState): The model property of type
            ChargeRetrieveState.
        last_updated (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "user_id": 'userId',
        "ema_id": 'emaId',
        "evse_id": 'evseId',
        "started_at": 'startedAt',
        "stopped_at": 'stoppedAt',
        "session_state": 'SessionState',
        "last_updated": 'lastUpdated'
    }

    _optionals = [
        'id',
        'user_id',
        'ema_id',
        'evse_id',
        'started_at',
        'stopped_at',
        'session_state',
        'last_updated',
    ]

    _nullables = [
        'stopped_at',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 user_id=APIHelper.SKIP,
                 ema_id=APIHelper.SKIP,
                 evse_id=APIHelper.SKIP,
                 started_at=APIHelper.SKIP,
                 stopped_at=APIHelper.SKIP,
                 session_state=APIHelper.SKIP,
                 last_updated=APIHelper.SKIP):
        """Constructor for the DataActive class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if user_id is not APIHelper.SKIP:
            self.user_id = user_id 
        if ema_id is not APIHelper.SKIP:
            self.ema_id = ema_id 
        if evse_id is not APIHelper.SKIP:
            self.evse_id = evse_id 
        if started_at is not APIHelper.SKIP:
            self.started_at = APIHelper.apply_datetime_converter(started_at, APIHelper.RFC3339DateTime) if started_at else None 
        if stopped_at is not APIHelper.SKIP:
            self.stopped_at = APIHelper.apply_datetime_converter(stopped_at, APIHelper.RFC3339DateTime) if stopped_at else None 
        if session_state is not APIHelper.SKIP:
            self.session_state = session_state 
        if last_updated is not APIHelper.SKIP:
            self.last_updated = last_updated 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        user_id = dictionary.get("userId") if dictionary.get("userId") else APIHelper.SKIP
        ema_id = dictionary.get("emaId") if dictionary.get("emaId") else APIHelper.SKIP
        evse_id = dictionary.get("evseId") if dictionary.get("evseId") else APIHelper.SKIP
        started_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("startedAt")).datetime if dictionary.get("startedAt") else APIHelper.SKIP
        if 'stoppedAt' in dictionary.keys():
            stopped_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("stoppedAt")).datetime if dictionary.get("stoppedAt") else None
        else:
            stopped_at = APIHelper.SKIP
        session_state = ChargeRetrieveState.from_dictionary(dictionary.get('SessionState')) if 'SessionState' in dictionary.keys() else APIHelper.SKIP
        last_updated = dictionary.get("lastUpdated") if dictionary.get("lastUpdated") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   user_id,
                   ema_id,
                   evse_id,
                   started_at,
                   stopped_at,
                   session_state,
                   last_updated)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'user_id={(self.user_id if hasattr(self, "user_id") else None)!r}, '
                f'ema_id={(self.ema_id if hasattr(self, "ema_id") else None)!r}, '
                f'evse_id={(self.evse_id if hasattr(self, "evse_id") else None)!r}, '
                f'started_at={(self.started_at if hasattr(self, "started_at") else None)!r}, '
                f'stopped_at={(self.stopped_at if hasattr(self, "stopped_at") else None)!r}, '
                f'session_state={(self.session_state if hasattr(self, "session_state") else None)!r}, '
                f'last_updated={(self.last_updated if hasattr(self, "last_updated") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'user_id={(self.user_id if hasattr(self, "user_id") else None)!s}, '
                f'ema_id={(self.ema_id if hasattr(self, "ema_id") else None)!s}, '
                f'evse_id={(self.evse_id if hasattr(self, "evse_id") else None)!s}, '
                f'started_at={(self.started_at if hasattr(self, "started_at") else None)!s}, '
                f'stopped_at={(self.stopped_at if hasattr(self, "stopped_at") else None)!s}, '
                f'session_state={(self.session_state if hasattr(self, "session_state") else None)!s}, '
                f'last_updated={(self.last_updated if hasattr(self, "last_updated") else None)!s})')
