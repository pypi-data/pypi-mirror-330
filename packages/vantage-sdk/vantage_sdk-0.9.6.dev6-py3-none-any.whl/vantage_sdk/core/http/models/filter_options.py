# coding: utf-8

"""
Vantage API

This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

The version of the OpenAPI document: v1.1.2
Contact: devrel@vantagediscovery.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Annotated, Literal

from vantage_sdk.core.http.models.filter_range_value import FilterRangeValue


try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

FILTEROPTIONS_ONE_OF_SCHEMAS = [
    "Dict[str, FilterRangeValue]",
    "Dict[str, List[float]]",
    "Dict[str, List[str]]",
    "Dict[str, float]",
    "Dict[str, str]",
    "FilterAndGroup",
    "FilterNotGroup",
    "FilterOrGroup",
]


class FilterOptions(BaseModel):
    """
    FilterOptions
    """

    # data type: Dict[str, str]
    oneof_schema_1_validator: Optional[Dict[str, StrictStr]] = None
    # data type: Dict[str, List[str]]
    oneof_schema_2_validator: Optional[
        Dict[
            str, Annotated[List[StrictStr], Field(min_length=1, max_length=10)]
        ]
    ] = None
    # data type: Dict[str, float]
    oneof_schema_3_validator: Optional[
        Dict[str, Union[StrictFloat, StrictInt]]
    ] = None
    # data type: Dict[str, List[float]]
    oneof_schema_4_validator: Optional[
        Dict[
            str,
            Annotated[
                List[Union[StrictFloat, StrictInt]],
                Field(min_length=1, max_length=10),
            ],
        ]
    ] = None
    # data type: Dict[str, FilterRangeValue]
    oneof_schema_5_validator: Optional[Dict[str, FilterRangeValue]] = None
    # data type: FilterAndGroup
    oneof_schema_6_validator: Optional[FilterAndGroup] = None
    # data type: FilterOrGroup
    oneof_schema_7_validator: Optional[FilterOrGroup] = None
    # data type: FilterNotGroup
    oneof_schema_8_validator: Optional[FilterNotGroup] = None
    actual_instance: Optional[
        Union[
            Dict[str, FilterRangeValue],
            Dict[str, List[float]],
            Dict[str, List[str]],
            Dict[str, float],
            Dict[str, str],
            FilterAndGroup,
            FilterNotGroup,
            FilterOrGroup,
        ]
    ] = None
    one_of_schemas: List[str] = Literal[
        "Dict[str, FilterRangeValue]",
        "Dict[str, List[float]]",
        "Dict[str, List[str]]",
        "Dict[str, float]",
        "Dict[str, str]",
        "FilterAndGroup",
        "FilterNotGroup",
        "FilterOrGroup",
    ]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FilterOptions.model_construct()
        error_messages = []
        match = 0
        # validate data type: Dict[str, str]
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Dict[str, List[str]]
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Dict[str, float]
        try:
            instance.oneof_schema_3_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Dict[str, List[float]]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Dict[str, FilterRangeValue]
        try:
            instance.oneof_schema_5_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: FilterAndGroup
        if not isinstance(v, FilterAndGroup):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `FilterAndGroup`"
            )
        else:
            match += 1
        # validate data type: FilterOrGroup
        if not isinstance(v, FilterOrGroup):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `FilterOrGroup`"
            )
        else:
            match += 1
        # validate data type: FilterNotGroup
        if not isinstance(v, FilterNotGroup):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `FilterNotGroup`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in FilterOptions with oneOf schemas: Dict[str, FilterRangeValue], Dict[str, List[float]], Dict[str, List[str]], Dict[str, float], Dict[str, str], FilterAndGroup, FilterNotGroup, FilterOrGroup. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in FilterOptions with oneOf schemas: Dict[str, FilterRangeValue], Dict[str, List[float]], Dict[str, List[str]], Dict[str, float], Dict[str, str], FilterAndGroup, FilterNotGroup, FilterOrGroup. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Dict[str, str]
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, List[str]]
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, float]
        try:
            # validation
            instance.oneof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_3_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, List[float]]
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, FilterRangeValue]
        try:
            # validation
            instance.oneof_schema_5_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_5_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FilterAndGroup
        try:
            instance.actual_instance = FilterAndGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FilterOrGroup
        try:
            instance.actual_instance = FilterOrGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FilterNotGroup
        try:
            instance.actual_instance = FilterNotGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into FilterOptions with oneOf schemas: Dict[str, FilterRangeValue], Dict[str, List[float]], Dict[str, List[str]], Dict[str, float], Dict[str, str], FilterAndGroup, FilterNotGroup, FilterOrGroup. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into FilterOptions with oneOf schemas: Dict[str, FilterRangeValue], Dict[str, List[float]], Dict[str, List[str]], Dict[str, float], Dict[str, str], FilterAndGroup, FilterNotGroup, FilterOrGroup. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


from vantage_sdk.core.http.models.filter_and_group import FilterAndGroup
from vantage_sdk.core.http.models.filter_not_group import FilterNotGroup
from vantage_sdk.core.http.models.filter_or_group import FilterOrGroup


# TODO: Rewrite to not use raise_errors
FilterOptions.model_rebuild(raise_errors=False)
