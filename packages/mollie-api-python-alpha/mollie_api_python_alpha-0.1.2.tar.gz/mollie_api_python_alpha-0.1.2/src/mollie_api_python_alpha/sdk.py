"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from mollie_api_python_alpha import models, utils
from mollie_api_python_alpha._hooks import SDKHooks
from mollie_api_python_alpha.balances import Balances
from mollie_api_python_alpha.capabilities import Capabilities
from mollie_api_python_alpha.captures import Captures
from mollie_api_python_alpha.chargebacks import Chargebacks
from mollie_api_python_alpha.client_links import ClientLinks
from mollie_api_python_alpha.clients import Clients
from mollie_api_python_alpha.customers import Customers
from mollie_api_python_alpha.delayed_routing import DelayedRouting
from mollie_api_python_alpha.invoices import Invoices
from mollie_api_python_alpha.mandates import Mandates
from mollie_api_python_alpha.methods import Methods
from mollie_api_python_alpha.onboarding import Onboarding
from mollie_api_python_alpha.orders import Orders
from mollie_api_python_alpha.organizations import Organizations
from mollie_api_python_alpha.payment_links import PaymentLinks
from mollie_api_python_alpha.payments import Payments
from mollie_api_python_alpha.permissions import Permissions
from mollie_api_python_alpha.profiles import Profiles
from mollie_api_python_alpha.refunds import Refunds
from mollie_api_python_alpha.settlements import Settlements
from mollie_api_python_alpha.shipments import Shipments
from mollie_api_python_alpha.subscriptions import Subscriptions
from mollie_api_python_alpha.terminals import Terminals
from mollie_api_python_alpha.types import OptionalNullable, UNSET
from mollie_api_python_alpha.wallets import Wallets
from typing import Callable, Dict, Optional, Union, cast
import weakref


class Client(BaseSDK):
    balances: Balances
    settlements: Settlements
    invoices: Invoices
    permissions: Permissions
    organizations: Organizations
    profiles: Profiles
    onboarding: Onboarding
    capabilities: Capabilities
    clients: Clients
    client_links: ClientLinks
    orders: Orders
    shipments: Shipments
    payments: Payments
    methods: Methods
    refunds: Refunds
    chargebacks: Chargebacks
    captures: Captures
    wallets: Wallets
    payment_links: PaymentLinks
    terminals: Terminals
    delayed_routing: DelayedRouting
    customers: Customers
    mandates: Mandates
    subscriptions: Subscriptions

    def __init__(
        self,
        security: Optional[
            Union[models.Security, Callable[[], models.Security]]
        ] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.balances = Balances(self.sdk_configuration)
        self.settlements = Settlements(self.sdk_configuration)
        self.invoices = Invoices(self.sdk_configuration)
        self.permissions = Permissions(self.sdk_configuration)
        self.organizations = Organizations(self.sdk_configuration)
        self.profiles = Profiles(self.sdk_configuration)
        self.onboarding = Onboarding(self.sdk_configuration)
        self.capabilities = Capabilities(self.sdk_configuration)
        self.clients = Clients(self.sdk_configuration)
        self.client_links = ClientLinks(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.shipments = Shipments(self.sdk_configuration)
        self.payments = Payments(self.sdk_configuration)
        self.methods = Methods(self.sdk_configuration)
        self.refunds = Refunds(self.sdk_configuration)
        self.chargebacks = Chargebacks(self.sdk_configuration)
        self.captures = Captures(self.sdk_configuration)
        self.wallets = Wallets(self.sdk_configuration)
        self.payment_links = PaymentLinks(self.sdk_configuration)
        self.terminals = Terminals(self.sdk_configuration)
        self.delayed_routing = DelayedRouting(self.sdk_configuration)
        self.customers = Customers(self.sdk_configuration)
        self.mandates = Mandates(self.sdk_configuration)
        self.subscriptions = Subscriptions(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
