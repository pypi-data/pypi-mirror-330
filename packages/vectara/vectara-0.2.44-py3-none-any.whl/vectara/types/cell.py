# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Cell(UniversalBaseModel):
    """
    A cell in a table.
    """

    text_value: typing.Optional[str] = pydantic.Field(default=None)
    """
    A text value.
    """

    int_value: typing.Optional[int] = pydantic.Field(default=None)
    """
    A signed 64-bit integer value.
    """

    float_value: typing.Optional[float] = pydantic.Field(default=None)
    """
    A floating-point value with double precision.
    """

    bool_value: typing.Optional[bool] = pydantic.Field(default=None)
    """
    A boolean value.
    """

    colspan: typing.Optional[int] = pydantic.Field(default=None)
    """
    (Optional) The number of columns the cell spans. Default is 1. Must be greater than 0.
    """

    rowspan: typing.Optional[int] = pydantic.Field(default=None)
    """
    (Optional) The number of rows the cell spans. Default is 1. Must be greater than 0.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
