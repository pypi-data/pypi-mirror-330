# Generated by cloudcoil-model-codegen v0.5.6
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Any,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    Union,
    overload,
)

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource


class All(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["All"]:
            return All

        def build(self) -> "All":
            return All(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["All.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = All.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for All."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["All", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use All.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel"]:
            return AnyModel

        def build(self) -> "AnyModel":
            return AnyModel(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class Conditions(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Conditions"]:
            return Conditions

        def build(self) -> "Conditions":
            return Conditions(**self._attrs)

        @overload
        def all(self, value_or_callback: List[All], /) -> "Conditions.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[All, All.Builder]],
                GenericListBuilder[All, All.Builder] | List[All],
            ],
            /,
        ) -> "Conditions.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[All.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[All.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(All.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel], /) -> "Conditions.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel, AnyModel.Builder]],
                GenericListBuilder[AnyModel, AnyModel.Builder] | List[AnyModel],
            ],
            /,
        ) -> "Conditions.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["Conditions.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Conditions.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Conditions."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Conditions", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Conditions.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[All]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass.
    """
    any: Optional[List[AnyModel]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass.
    """


class Datum(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Datum"]:
            return Datum

        def build(self) -> "Datum":
            return Datum(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            Key is a unique identifier for the data value
            """
            return self._set("key", value)

        def value(self, value: Any, /) -> Self:
            """
            Value is the data value
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["Datum.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Datum.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Datum."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Datum", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Datum.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    Key is a unique identifier for the data value
    """
    value: Any
    """
    Value is the data value
    """


class Header(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Header"]:
            return Header

        def build(self) -> "Header":
            return Header(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            Key is the header key
            """
            return self._set("key", value)

        def value(self, value: str, /) -> Self:
            """
            Value is the header value
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["Header.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Header.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Header."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Header", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Header.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    Key is the header key
    """
    value: str
    """
    Value is the header value
    """


class Service(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Service"]:
            return Service

        def build(self) -> "Service":
            return Service(**self._attrs)

        def ca_bundle(self, value: Optional[str], /) -> Self:
            """
            CABundle is a PEM encoded CA bundle which will be used to validate
            the server certificate.
            """
            return self._set("ca_bundle", value)

        @overload
        def headers(self, value_or_callback: List[Header], /) -> "Service.Builder": ...

        @overload
        def headers(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Header, Header.Builder]],
                GenericListBuilder[Header, Header.Builder] | List[Header],
            ],
            /,
        ) -> "Service.Builder": ...

        @overload
        def headers(self, value_or_callback: Never = ...) -> ListBuilderContext[Header.Builder]: ...

        def headers(self, value_or_callback=None, /):
            """
            Headers is a list of optional HTTP headers to be included in the request.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Header.Builder]()
                context._parent_builder = self
                context._field_name = "headers"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Header.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("headers", value)

        def url(self, value: str, /) -> Self:
            """
            URL is the JSON web service URL. A typical form is
            `https://{service}.{namespace}:{port}/{path}`.
            """
            return self._set("url", value)

    class BuilderContext(BuilderContextBase["Service.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Service.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Service."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Service", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Service.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ca_bundle: Annotated[Optional[str], Field(alias="caBundle")] = None
    """
    CABundle is a PEM encoded CA bundle which will be used to validate
    the server certificate.
    """
    headers: Optional[List[Header]] = None
    """
    Headers is a list of optional HTTP headers to be included in the request.
    """
    url: str
    """
    URL is the JSON web service URL. A typical form is
    `https://{service}.{namespace}:{port}/{path}`.
    """


class ApiCall(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ApiCall"]:
            return ApiCall

        def build(self) -> "ApiCall":
            return ApiCall(**self._attrs)

        @overload
        def data(self, value_or_callback: List[Datum], /) -> "ApiCall.Builder": ...

        @overload
        def data(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Datum, Datum.Builder]],
                GenericListBuilder[Datum, Datum.Builder] | List[Datum],
            ],
            /,
        ) -> "ApiCall.Builder": ...

        @overload
        def data(self, value_or_callback: Never = ...) -> ListBuilderContext[Datum.Builder]: ...

        def data(self, value_or_callback=None, /):
            """
            The data object specifies the POST data sent to the server.
            Only applicable when the method field is set to POST.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Datum.Builder]()
                context._parent_builder = self
                context._field_name = "data"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Datum.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("data", value)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the context
            value is set to, if the apiCall returns error.
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JSON Match Expression that can be used to
            transform the JSON response returned from the server. For example
            a JMESPath of "items | length(@)" applied to the API server response
            for the URLPath "/apis/apps/v1/deployments" will return the total count
            of deployments across all namespaces.
            """
            return self._set("jmes_path", value)

        def method(self, value: Optional[Literal["GET", "POST"]], /) -> Self:
            """
            Method is the HTTP request type (GET or POST). Defaults to GET.
            """
            return self._set("method", value)

        @overload
        def service(self, value_or_callback: Optional[Service], /) -> "ApiCall.Builder": ...

        @overload
        def service(
            self,
            value_or_callback: Callable[[Service.Builder], Service.Builder | Service],
            /,
        ) -> "ApiCall.Builder": ...

        @overload
        def service(self, value_or_callback: Never = ...) -> "Service.BuilderContext": ...

        def service(self, value_or_callback=None, /):
            """
            Service is an API call to a JSON web service.
            This is used for non-Kubernetes API server calls.
            It's mutually exclusive with the URLPath field.
            """
            if self._in_context and value_or_callback is None:
                context = Service.BuilderContext()
                context._parent_builder = self
                context._field_name = "service"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Service.builder())
                if isinstance(output, Service.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("service", value)

        def url_path(self, value: Optional[str], /) -> Self:
            """
            URLPath is the URL path to be used in the HTTP GET or POST request to the
            Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
            The format required is the same format used by the `kubectl get --raw` command.
            See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
            for details.
            It's mutually exclusive with the Service field.
            """
            return self._set("url_path", value)

    class BuilderContext(BuilderContextBase["ApiCall.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ApiCall.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ApiCall."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ApiCall", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ApiCall.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    data: Optional[List[Datum]] = None
    """
    The data object specifies the POST data sent to the server.
    Only applicable when the method field is set to POST.
    """
    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the context
    value is set to, if the apiCall returns error.
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JSON Match Expression that can be used to
    transform the JSON response returned from the server. For example
    a JMESPath of "items | length(@)" applied to the API server response
    for the URLPath "/apis/apps/v1/deployments" will return the total count
    of deployments across all namespaces.
    """
    method: Optional[Literal["GET", "POST"]] = "GET"
    """
    Method is the HTTP request type (GET or POST). Defaults to GET.
    """
    service: Optional[Service] = None
    """
    Service is an API call to a JSON web service.
    This is used for non-Kubernetes API server calls.
    It's mutually exclusive with the URLPath field.
    """
    url_path: Annotated[Optional[str], Field(alias="urlPath")] = None
    """
    URLPath is the URL path to be used in the HTTP GET or POST request to the
    Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
    The format required is the same format used by the `kubectl get --raw` command.
    See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
    for details.
    It's mutually exclusive with the Service field.
    """


class ConfigMap(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConfigMap"]:
            return ConfigMap

        def build(self) -> "ConfigMap":
            return ConfigMap(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name is the ConfigMap name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace is the ConfigMap namespace.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["ConfigMap.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConfigMap.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConfigMap."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConfigMap", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConfigMap.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name is the ConfigMap name.
    """
    namespace: Optional[str] = None
    """
    Namespace is the ConfigMap namespace.
    """


class GlobalReference(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["GlobalReference"]:
            return GlobalReference

        def build(self) -> "GlobalReference":
            return GlobalReference(**self._attrs)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JSON Match Expression that can be used to
            transform the JSON response returned from the server. For example
            a JMESPath of "items | length(@)" applied to the API server response
            for the URLPath "/apis/apps/v1/deployments" will return the total count
            of deployments across all namespaces.
            """
            return self._set("jmes_path", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the global context entry
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["GlobalReference.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = GlobalReference.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for GlobalReference."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["GlobalReference", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use GlobalReference.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JSON Match Expression that can be used to
    transform the JSON response returned from the server. For example
    a JMESPath of "items | length(@)" applied to the API server response
    for the URLPath "/apis/apps/v1/deployments" will return the total count
    of deployments across all namespaces.
    """
    name: str
    """
    Name of the global context entry
    """


class ImageRegistryCredentials(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ImageRegistryCredentials"]:
            return ImageRegistryCredentials

        def build(self) -> "ImageRegistryCredentials":
            return ImageRegistryCredentials(**self._attrs)

        def allow_insecure_registry(self, value: Optional[bool], /) -> Self:
            """
            AllowInsecureRegistry allows insecure access to a registry.
            """
            return self._set("allow_insecure_registry", value)

        def providers(
            self,
            value: Optional[List[Literal["default", "amazon", "azure", "google", "github"]]],
            /,
        ) -> Self:
            """
            Providers specifies a list of OCI Registry names, whose authentication providers are provided.
            It can be of one of these values: default,google,azure,amazon,github.
            """
            return self._set("providers", value)

        def secrets(self, value: Optional[List[str]], /) -> Self:
            """
            Secrets specifies a list of secrets that are provided for credentials.
            Secrets must live in the Kyverno namespace.
            """
            return self._set("secrets", value)

    class BuilderContext(BuilderContextBase["ImageRegistryCredentials.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ImageRegistryCredentials.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ImageRegistryCredentials."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ImageRegistryCredentials", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ImageRegistryCredentials.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    allow_insecure_registry: Annotated[Optional[bool], Field(alias="allowInsecureRegistry")] = None
    """
    AllowInsecureRegistry allows insecure access to a registry.
    """
    providers: Optional[List[Literal["default", "amazon", "azure", "google", "github"]]] = None
    """
    Providers specifies a list of OCI Registry names, whose authentication providers are provided.
    It can be of one of these values: default,google,azure,amazon,github.
    """
    secrets: Optional[List[str]] = None
    """
    Secrets specifies a list of secrets that are provided for credentials.
    Secrets must live in the Kyverno namespace.
    """


class ImageRegistry(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ImageRegistry"]:
            return ImageRegistry

        def build(self) -> "ImageRegistry":
            return ImageRegistry(**self._attrs)

        @overload
        def image_registry_credentials(
            self, value_or_callback: Optional[ImageRegistryCredentials], /
        ) -> "ImageRegistry.Builder": ...

        @overload
        def image_registry_credentials(
            self,
            value_or_callback: Callable[
                [ImageRegistryCredentials.Builder],
                ImageRegistryCredentials.Builder | ImageRegistryCredentials,
            ],
            /,
        ) -> "ImageRegistry.Builder": ...

        @overload
        def image_registry_credentials(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistryCredentials.BuilderContext": ...

        def image_registry_credentials(self, value_or_callback=None, /):
            """
            ImageRegistryCredentials provides credentials that will be used for authentication with registry
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistryCredentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry_credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistryCredentials.builder())
                if isinstance(output, ImageRegistryCredentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry_credentials", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JSON Match Expression that can be used to
            transform the ImageData struct returned as a result of processing
            the image reference.
            """
            return self._set("jmes_path", value)

        def reference(self, value: str, /) -> Self:
            """
            Reference is image reference to a container image in the registry.
            Example: ghcr.io/kyverno/kyverno:latest
            """
            return self._set("reference", value)

    class BuilderContext(BuilderContextBase["ImageRegistry.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ImageRegistry.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ImageRegistry."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ImageRegistry", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ImageRegistry.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials], Field(alias="imageRegistryCredentials")
    ] = None
    """
    ImageRegistryCredentials provides credentials that will be used for authentication with registry
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JSON Match Expression that can be used to
    transform the ImageData struct returned as a result of processing
    the image reference.
    """
    reference: str
    """
    Reference is image reference to a container image in the registry.
    Example: ghcr.io/kyverno/kyverno:latest
    """


class Variable(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Variable"]:
            return Variable

        def build(self) -> "Variable":
            return Variable(**self._attrs)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the variable may take if the JMESPath
            expression evaluates to nil
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath Expression that can be used to
            transform the variable.
            """
            return self._set("jmes_path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is any arbitrary JSON object representable in YAML or JSON form.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["Variable.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Variable.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Variable."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Variable", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Variable.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the variable may take if the JMESPath
    expression evaluates to nil
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath Expression that can be used to
    transform the variable.
    """
    value: Optional[Any] = None
    """
    Value is any arbitrary JSON object representable in YAML or JSON form.
    """


class Context(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Context"]:
            return Context

        def build(self) -> "Context":
            return Context(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "Context.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "Context.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "Context.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "Context.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "Context.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "Context.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "Context.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "Context.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "Context.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "Context.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["Context.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Context.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Context."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Context", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Context.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel"]:
            return ContextModel

        def build(self) -> "ContextModel":
            return ContextModel(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel1"]:
            return ContextModel1

        def build(self) -> "ContextModel1":
            return ContextModel1(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel1.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel1.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel1.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel1.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel1.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel1.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel1.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel1.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel1.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel1.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel2"]:
            return ContextModel2

        def build(self) -> "ContextModel2":
            return ContextModel2(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel2.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel2.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel2.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel2.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel2.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel2.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel2.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel2.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel2.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel2.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel3"]:
            return ContextModel3

        def build(self) -> "ContextModel3":
            return ContextModel3(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel3.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel3.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel3.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel3.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel3.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel3.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel3.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel3.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel3.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel3.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class MatchExpression(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchExpression"]:
            return MatchExpression

        def build(self) -> "MatchExpression":
            return MatchExpression(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            key is the label key that the selector applies to.
            """
            return self._set("key", value)

        def operator(self, value: str, /) -> Self:
            """
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
            """
            return self._set("operator", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            values is an array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["MatchExpression.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchExpression.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchExpression."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchExpression", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchExpression.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    key is the label key that the selector applies to.
    """
    operator: str
    """
    operator represents a key's relationship to a set of values.
    Valid operators are In, NotIn, Exists and DoesNotExist.
    """
    values: Optional[List[str]] = None
    """
    values is an array of string values. If the operator is In or NotIn,
    the values array must be non-empty. If the operator is Exists or DoesNotExist,
    the values array must be empty. This array is replaced during a strategic
    merge patch.
    """


class NamespaceSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["NamespaceSelector"]:
            return NamespaceSelector

        def build(self) -> "NamespaceSelector":
            return NamespaceSelector(**self._attrs)

        @overload
        def match_expressions(
            self, value_or_callback: List[MatchExpression], /
        ) -> "NamespaceSelector.Builder": ...

        @overload
        def match_expressions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchExpression, MatchExpression.Builder]],
                GenericListBuilder[MatchExpression, MatchExpression.Builder]
                | List[MatchExpression],
            ],
            /,
        ) -> "NamespaceSelector.Builder": ...

        @overload
        def match_expressions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchExpression.Builder]: ...

        def match_expressions(self, value_or_callback=None, /):
            """
            matchExpressions is a list of label selector requirements. The requirements are ANDed.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchExpression.Builder]()
                context._parent_builder = self
                context._field_name = "match_expressions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchExpression.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_expressions", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
            """
            return self._set("match_labels", value)

    class BuilderContext(BuilderContextBase["NamespaceSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = NamespaceSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for NamespaceSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["NamespaceSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NamespaceSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_expressions: Annotated[
        Optional[List[MatchExpression]], Field(alias="matchExpressions")
    ] = None
    """
    matchExpressions is a list of label selector requirements. The requirements are ANDed.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    map is equivalent to an element of matchExpressions, whose key field is "key", the
    operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


class Selector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Selector"]:
            return Selector

        def build(self) -> "Selector":
            return Selector(**self._attrs)

        @overload
        def match_expressions(
            self, value_or_callback: List[MatchExpression], /
        ) -> "Selector.Builder": ...

        @overload
        def match_expressions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchExpression, MatchExpression.Builder]],
                GenericListBuilder[MatchExpression, MatchExpression.Builder]
                | List[MatchExpression],
            ],
            /,
        ) -> "Selector.Builder": ...

        @overload
        def match_expressions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchExpression.Builder]: ...

        def match_expressions(self, value_or_callback=None, /):
            """
            matchExpressions is a list of label selector requirements. The requirements are ANDed.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchExpression.Builder]()
                context._parent_builder = self
                context._field_name = "match_expressions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchExpression.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_expressions", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
            """
            return self._set("match_labels", value)

    class BuilderContext(BuilderContextBase["Selector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Selector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Selector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Selector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Selector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_expressions: Annotated[
        Optional[List[MatchExpression]], Field(alias="matchExpressions")
    ] = None
    """
    matchExpressions is a list of label selector requirements. The requirements are ANDed.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    map is equivalent to an element of matchExpressions, whose key field is "key", the
    operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


class Resources(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Resources"]:
            return Resources

        def build(self) -> "Resources":
            return Resources(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
            and values support the wildcard characters "*" (matches zero or many characters) and
            "?" (matches at least one character).
            """
            return self._set("annotations", value)

        def kinds(self, value: Optional[List[str]], /) -> Self:
            """
            Kinds is a list of resource kinds.
            """
            return self._set("kinds", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name is the name of the resource. The name supports wildcard characters
            "*" (matches zero or many characters) and "?" (at least one character).
            NOTE: "Name" is being deprecated in favor of "Names".
            """
            return self._set("name", value)

        def names(self, value: Optional[List[str]], /) -> Self:
            """
            Names are the names of the resources. Each name supports wildcard characters
            "*" (matches zero or many characters) and "?" (at least one character).
            """
            return self._set("names", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[NamespaceSelector], /
        ) -> "Resources.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [NamespaceSelector.Builder],
                NamespaceSelector.Builder | NamespaceSelector,
            ],
            /,
        ) -> "Resources.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "NamespaceSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            NamespaceSelector is a label selector for the resource namespace. Label keys and values
            in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
            and `?` (matches one character).Wildcards allows writing label selectors like
            ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
            does not match an empty label set.
            """
            if self._in_context and value_or_callback is None:
                context = NamespaceSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(NamespaceSelector.builder())
                if isinstance(output, NamespaceSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        def namespaces(self, value: Optional[List[str]], /) -> Self:
            """
            Namespaces is a list of namespaces names. Each name supports wildcard characters
            "*" (matches zero or many characters) and "?" (at least one character).
            """
            return self._set("namespaces", value)

        def operations(
            self,
            value: Optional[List[Literal["CREATE", "CONNECT", "UPDATE", "DELETE"]]],
            /,
        ) -> Self:
            """
            Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
            """
            return self._set("operations", value)

        @overload
        def selector(self, value_or_callback: Optional[Selector], /) -> "Resources.Builder": ...

        @overload
        def selector(
            self,
            value_or_callback: Callable[[Selector.Builder], Selector.Builder | Selector],
            /,
        ) -> "Resources.Builder": ...

        @overload
        def selector(self, value_or_callback: Never = ...) -> "Selector.BuilderContext": ...

        def selector(self, value_or_callback=None, /):
            """
            Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
            characters `*` (matches zero or many characters) and `?` (matches one character).
            Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
            using ["*" : "*"] matches any key and value but does not match an empty label set.
            """
            if self._in_context and value_or_callback is None:
                context = Selector.BuilderContext()
                context._parent_builder = self
                context._field_name = "selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Selector.builder())
                if isinstance(output, Selector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("selector", value)

    class BuilderContext(BuilderContextBase["Resources.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Resources.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Resources."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Resources", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Resources.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations is a  map of annotations (key-value pairs of type string). Annotation keys
    and values support the wildcard characters "*" (matches zero or many characters) and
    "?" (matches at least one character).
    """
    kinds: Optional[List[str]] = None
    """
    Kinds is a list of resource kinds.
    """
    name: Optional[str] = None
    """
    Name is the name of the resource. The name supports wildcard characters
    "*" (matches zero or many characters) and "?" (at least one character).
    NOTE: "Name" is being deprecated in favor of "Names".
    """
    names: Optional[List[str]] = None
    """
    Names are the names of the resources. Each name supports wildcard characters
    "*" (matches zero or many characters) and "?" (at least one character).
    """
    namespace_selector: Annotated[Optional[NamespaceSelector], Field(alias="namespaceSelector")] = (
        None
    )
    """
    NamespaceSelector is a label selector for the resource namespace. Label keys and values
    in `matchLabels` support the wildcard characters `*` (matches zero or many characters)
    and `?` (matches one character).Wildcards allows writing label selectors like
    ["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but
    does not match an empty label set.
    """
    namespaces: Optional[List[str]] = None
    """
    Namespaces is a list of namespaces names. Each name supports wildcard characters
    "*" (matches zero or many characters) and "?" (at least one character).
    """
    operations: Optional[List[Literal["CREATE", "CONNECT", "UPDATE", "DELETE"]]] = None
    """
    Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.
    """
    selector: Optional[Selector] = None
    """
    Selector is a label selector. Label keys and values in `matchLabels` support the wildcard
    characters `*` (matches zero or many characters) and `?` (matches one character).
    Wildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that
    using ["*" : "*"] matches any key and value but does not match an empty label set.
    """


class Subject(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Subject"]:
            return Subject

        def build(self) -> "Subject":
            return Subject(**self._attrs)

        def api_group(self, value: Optional[str], /) -> Self:
            """
            APIGroup holds the API group of the referenced subject.
            Defaults to "" for ServiceAccount subjects.
            Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
            """
            return self._set("api_group", value)

        def kind(self, value: str, /) -> Self:
            """
            Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
            If the Authorizer does not recognized the kind value, the Authorizer should report an error.
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the object being referenced.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
            the Authorizer should report an error.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["Subject.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Subject.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Subject."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Subject", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Subject.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_group: Annotated[Optional[str], Field(alias="apiGroup")] = None
    """
    APIGroup holds the API group of the referenced subject.
    Defaults to "" for ServiceAccount subjects.
    Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    """
    kind: str
    """
    Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
    If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    """
    name: str
    """
    Name of the object being referenced.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
    the Authorizer should report an error.
    """


class AllModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel"]:
            return AllModel

        def build(self) -> "AllModel":
            return AllModel(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel1"]:
            return AnyModel1

        def build(self) -> "AnyModel1":
            return AnyModel1(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel1.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel1.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel1.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel1.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class Exclude(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Exclude"]:
            return Exclude

        def build(self) -> "Exclude":
            return Exclude(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel], /) -> "Exclude.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel, AllModel.Builder]],
                GenericListBuilder[AllModel, AllModel.Builder] | List[AllModel],
            ],
            /,
        ) -> "Exclude.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel1], /) -> "Exclude.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel1, AnyModel1.Builder]],
                GenericListBuilder[AnyModel1, AnyModel1.Builder] | List[AnyModel1],
            ],
            /,
        ) -> "Exclude.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel1.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel1.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["Exclude.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Exclude.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Exclude."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Exclude", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Exclude.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel1]] = None
    """
    Any allows specifying resources which will be ORed
    """


class Match(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Match"]:
            return Match

        def build(self) -> "Match":
            return Match(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel], /) -> "Match.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel, AllModel.Builder]],
                GenericListBuilder[AllModel, AllModel.Builder] | List[AllModel],
            ],
            /,
        ) -> "Match.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel1], /) -> "Match.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel1, AnyModel1.Builder]],
                GenericListBuilder[AnyModel1, AnyModel1.Builder] | List[AnyModel1],
            ],
            /,
        ) -> "Match.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel1.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel1.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["Match.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Match.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Match."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Match", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Match.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel1]] = None
    """
    Any allows specifying resources which will be ORed
    """


class CleanupPolicySpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CleanupPolicySpec"]:
            return CleanupPolicySpec

        def build(self) -> "CleanupPolicySpec":
            return CleanupPolicySpec(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: Optional[Conditions], /
        ) -> "CleanupPolicySpec.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[[Conditions.Builder], Conditions.Builder | Conditions],
            /,
        ) -> "CleanupPolicySpec.Builder": ...

        @overload
        def conditions(self, value_or_callback: Never = ...) -> "Conditions.BuilderContext": ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions defines the conditions used to select the resources which will be cleaned up.
            """
            if self._in_context and value_or_callback is None:
                context = Conditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Conditions.builder())
                if isinstance(output, Conditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        Context,
                        ContextModel,
                        ContextModel1,
                        ContextModel2,
                        ContextModel3,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(
            self, value_or_callback: Optional[Exclude], /
        ) -> "CleanupPolicySpec.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[[Exclude.Builder], Exclude.Builder | Exclude],
            /,
        ) -> "CleanupPolicySpec.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "Exclude.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when cleanuppolicy should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = Exclude.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Exclude.builder())
                if isinstance(output, Exclude.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def match(self, value_or_callback: Match, /) -> "CleanupPolicySpec.Builder": ...

        @overload
        def match(
            self, value_or_callback: Callable[[Match.Builder], Match.Builder | Match], /
        ) -> "CleanupPolicySpec.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "Match.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when cleanuppolicy should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = Match.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Match.builder())
                if isinstance(output, Match.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        def schedule(self, value: str, /) -> Self:
            """
            The schedule in Cron format
            """
            return self._set("schedule", value)

    class BuilderContext(BuilderContextBase["CleanupPolicySpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CleanupPolicySpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CleanupPolicySpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CleanupPolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CleanupPolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Conditions] = None
    """
    Conditions defines the conditions used to select the resources which will be cleaned up.
    """
    context: Optional[
        List[Union[Context, ContextModel, ContextModel1, ContextModel2, ContextModel3]]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[Exclude] = None
    """
    ExcludeResources defines when cleanuppolicy should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    match: Match
    """
    MatchResources defines when cleanuppolicy should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    schedule: str
    """
    The schedule in Cron format
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: Literal["True", "False", "Unknown"], /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another.
    This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: Annotated[str, Field(max_length=32768)]
    """
    message is a human readable message indicating details about the transition.
    This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration", ge=0)] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition.
    Producers of specific condition types may define expected values and meanings for this field,
    and whether the values are considered a guaranteed API.
    The value should be a CamelCase string.
    This field may not be empty.
    """
    status: Literal["True", "False", "Unknown"]
    """
    status of the condition, one of True, False, Unknown.
    """
    type: Annotated[
        str,
        Field(
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class CleanupPolicyStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CleanupPolicyStatus"]:
            return CleanupPolicyStatus

        def build(self) -> "CleanupPolicyStatus":
            return CleanupPolicyStatus(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "CleanupPolicyStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "CleanupPolicyStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def last_execution_time(self, value: Optional[datetime], /) -> Self:
            return self._set("last_execution_time", value)

    class BuilderContext(BuilderContextBase["CleanupPolicyStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CleanupPolicyStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CleanupPolicyStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CleanupPolicyStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CleanupPolicyStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[List[Condition]] = None
    last_execution_time: Annotated[Optional[datetime], Field(alias="lastExecutionTime")] = None


class AllModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel1"]:
            return AllModel1

        def build(self) -> "AllModel1":
            return AllModel1(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel2"]:
            return AnyModel2

        def build(self) -> "AnyModel2":
            return AnyModel2(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ContextModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel4"]:
            return ContextModel4

        def build(self) -> "ContextModel4":
            return ContextModel4(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel4.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel4.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel4.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel4.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel4.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel4.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel4.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel4.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel4.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel4.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel5"]:
            return ContextModel5

        def build(self) -> "ContextModel5":
            return ContextModel5(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel5.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel5.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel5.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel5.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel5.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel5.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel5.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel5.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel5.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel5.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel6"]:
            return ContextModel6

        def build(self) -> "ContextModel6":
            return ContextModel6(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel6.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel6.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel6.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel6.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel6.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel6.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel6.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel6.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel6.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel6.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel7(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel7"]:
            return ContextModel7

        def build(self) -> "ContextModel7":
            return ContextModel7(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel7.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel7.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel7.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel7.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel7.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel7.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel7.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel7.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel7.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel7.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel7.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel7.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel7."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel7", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel7.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel8(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel8"]:
            return ContextModel8

        def build(self) -> "ContextModel8":
            return ContextModel8(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel8.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel8.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel8.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel8.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel8.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel8.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel8.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel8.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel8.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel8.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel8.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel8.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel8."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel8", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel8.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel2"]:
            return AllModel2

        def build(self) -> "AllModel2":
            return AllModel2(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel2.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel2.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel2.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel2.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel3"]:
            return AnyModel3

        def build(self) -> "AnyModel3":
            return AnyModel3(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel3.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel3.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel3.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel3.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ClusterCleanupPolicySpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterCleanupPolicySpec"]:
            return ClusterCleanupPolicySpec

        def build(self) -> "ClusterCleanupPolicySpec":
            return ClusterCleanupPolicySpec(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: Optional[Conditions], /
        ) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[[Conditions.Builder], Conditions.Builder | Conditions],
            /,
        ) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def conditions(self, value_or_callback: Never = ...) -> "Conditions.BuilderContext": ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions defines the conditions used to select the resources which will be cleaned up.
            """
            if self._in_context and value_or_callback is None:
                context = Conditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Conditions.builder())
                if isinstance(output, Conditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel4,
                        ContextModel5,
                        ContextModel6,
                        ContextModel7,
                        ContextModel8,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(
            self, value_or_callback: Optional[Exclude], /
        ) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[[Exclude.Builder], Exclude.Builder | Exclude],
            /,
        ) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "Exclude.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when cleanuppolicy should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = Exclude.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Exclude.builder())
                if isinstance(output, Exclude.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def match(self, value_or_callback: Match, /) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def match(
            self, value_or_callback: Callable[[Match.Builder], Match.Builder | Match], /
        ) -> "ClusterCleanupPolicySpec.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "Match.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when cleanuppolicy should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = Match.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Match.builder())
                if isinstance(output, Match.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        def schedule(self, value: str, /) -> Self:
            """
            The schedule in Cron format
            """
            return self._set("schedule", value)

    class BuilderContext(BuilderContextBase["ClusterCleanupPolicySpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterCleanupPolicySpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterCleanupPolicySpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterCleanupPolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterCleanupPolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Conditions] = None
    """
    Conditions defines the conditions used to select the resources which will be cleaned up.
    """
    context: Optional[
        List[
            Union[
                ContextModel4,
                ContextModel5,
                ContextModel6,
                ContextModel7,
                ContextModel8,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[Exclude] = None
    """
    ExcludeResources defines when cleanuppolicy should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    match: Match
    """
    MatchResources defines when cleanuppolicy should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    schedule: str
    """
    The schedule in Cron format
    """


class ClusterCleanupPolicyStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterCleanupPolicyStatus"]:
            return ClusterCleanupPolicyStatus

        def build(self) -> "ClusterCleanupPolicyStatus":
            return ClusterCleanupPolicyStatus(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "ClusterCleanupPolicyStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "ClusterCleanupPolicyStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def last_execution_time(self, value: Optional[datetime], /) -> Self:
            return self._set("last_execution_time", value)

    class BuilderContext(BuilderContextBase["ClusterCleanupPolicyStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterCleanupPolicyStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterCleanupPolicyStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterCleanupPolicyStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterCleanupPolicyStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[List[Condition]] = None
    last_execution_time: Annotated[Optional[datetime], Field(alias="lastExecutionTime")] = None


class CelPrecondition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CelPrecondition"]:
            return CelPrecondition

        def build(self) -> "CelPrecondition":
            return CelPrecondition(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.
            CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

            'object' - The object from the incoming request. The value is null for DELETE requests.
            'oldObject' - The existing object. The value is null for CREATE requests.
            'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).
            'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

            Required.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is an identifier for this match condition, used for strategic merging of MatchConditions,
            as well as providing an identifier for logging purposes. A good name should be descriptive of
            the associated expression.
            Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and
            must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or
            '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
            optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

            Required.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["CelPrecondition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CelPrecondition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CelPrecondition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CelPrecondition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CelPrecondition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.
    CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

    'object' - The object from the incoming request. The value is null for DELETE requests.
    'oldObject' - The existing object. The value is null for CREATE requests.
    'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).
    'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.
    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

    Required.
    """
    name: str
    """
    Name is an identifier for this match condition, used for strategic merging of MatchConditions,
    as well as providing an identifier for logging purposes. A good name should be descriptive of
    the associated expression.
    Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and
    must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or
    '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
    optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

    Required.
    """


class ContextModel9(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel9"]:
            return ContextModel9

        def build(self) -> "ContextModel9":
            return ContextModel9(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel9.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel9.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel9.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel9.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel9.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel9.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel9.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel9.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Optional[Variable], /) -> "ContextModel9.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel9.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel9.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel9.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel9."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel9", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel9.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel10(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel10"]:
            return ContextModel10

        def build(self) -> "ContextModel10":
            return ContextModel10(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel10.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel10.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel10.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel10.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel10.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel10.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel10.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel10.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel10.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel10.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel10.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel10.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel10."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel10", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel10.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel11(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel11"]:
            return ContextModel11

        def build(self) -> "ContextModel11":
            return ContextModel11(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel11.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel11.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel11.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel11.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel11.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel11.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel11.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel11.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel11.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel11.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel11.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel11.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel11."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel11", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel11.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel12(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel12"]:
            return ContextModel12

        def build(self) -> "ContextModel12":
            return ContextModel12(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel12.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel12.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel12.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel12.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel12.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel12.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel12.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel12.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel12.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel12.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel12.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel12.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel12."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel12", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel12.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel13(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel13"]:
            return ContextModel13

        def build(self) -> "ContextModel13":
            return ContextModel13(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel13.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel13.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel13.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel13.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel13.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel13.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel13.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel13.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel13.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel13.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel13.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel13.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel13."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel13", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel13.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class Clone(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Clone"]:
            return Clone

        def build(self) -> "Clone":
            return Clone(**self._attrs)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies name of the resource.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies source resource namespace.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["Clone.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Clone.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Clone."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Clone", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Clone.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Optional[str] = None
    """
    Name specifies name of the resource.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies source resource namespace.
    """


class CloneList(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CloneList"]:
            return CloneList

        def build(self) -> "CloneList":
            return CloneList(**self._attrs)

        def kinds(self, value: Optional[List[str]], /) -> Self:
            """
            Kinds is a list of resource kinds.
            """
            return self._set("kinds", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies source resource namespace.
            """
            return self._set("namespace", value)

        @overload
        def selector(self, value_or_callback: Optional[Selector], /) -> "CloneList.Builder": ...

        @overload
        def selector(
            self,
            value_or_callback: Callable[[Selector.Builder], Selector.Builder | Selector],
            /,
        ) -> "CloneList.Builder": ...

        @overload
        def selector(self, value_or_callback: Never = ...) -> "Selector.BuilderContext": ...

        def selector(self, value_or_callback=None, /):
            """
            Selector is a label selector. Label keys and values in `matchLabels`.
            wildcard characters are not supported.
            """
            if self._in_context and value_or_callback is None:
                context = Selector.BuilderContext()
                context._parent_builder = self
                context._field_name = "selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Selector.builder())
                if isinstance(output, Selector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("selector", value)

    class BuilderContext(BuilderContextBase["CloneList.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CloneList.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CloneList."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CloneList", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CloneList.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    kinds: Optional[List[str]] = None
    """
    Kinds is a list of resource kinds.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies source resource namespace.
    """
    selector: Optional[Selector] = None
    """
    Selector is a label selector. Label keys and values in `matchLabels`.
    wildcard characters are not supported.
    """


class ContextModel14(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel14"]:
            return ContextModel14

        def build(self) -> "ContextModel14":
            return ContextModel14(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel14.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel14.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel14.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel14.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel14.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel14.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel14.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel14.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel14.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel14.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel14.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel14.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel14."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel14", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel14.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel15(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel15"]:
            return ContextModel15

        def build(self) -> "ContextModel15":
            return ContextModel15(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel15.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel15.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel15.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel15.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel15.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel15.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel15.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel15.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel15.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel15.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel15.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel15.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel15."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel15", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel15.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel16(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel16"]:
            return ContextModel16

        def build(self) -> "ContextModel16":
            return ContextModel16(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel16.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel16.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel16.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel16.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel16.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel16.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel16.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel16.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel16.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel16.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel16.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel16.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel16."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel16", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel16.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel17(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel17"]:
            return ContextModel17

        def build(self) -> "ContextModel17":
            return ContextModel17(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel17.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel17.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel17.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel17.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel17.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel17.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel17.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel17.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel17.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel17.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel17.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel17.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel17."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel17", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel17.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel18(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel18"]:
            return ContextModel18

        def build(self) -> "ContextModel18":
            return ContextModel18(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel18.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel18.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel18.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel18.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel18.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel18.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel18.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel18.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel18.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel18.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel18.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel18.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel18."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel18", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel18.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel3"]:
            return AllModel3

        def build(self) -> "AllModel3":
            return AllModel3(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel4"]:
            return AnyModel4

        def build(self) -> "AnyModel4":
            return AnyModel4(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class Preconditions(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Preconditions"]:
            return Preconditions

        def build(self) -> "Preconditions":
            return Preconditions(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel3], /) -> "Preconditions.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel3, AllModel3.Builder]],
                GenericListBuilder[AllModel3, AllModel3.Builder] | List[AllModel3],
            ],
            /,
        ) -> "Preconditions.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel3.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel3.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel3.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel4], /) -> "Preconditions.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel4, AnyModel4.Builder]],
                GenericListBuilder[AnyModel4, AnyModel4.Builder] | List[AnyModel4],
            ],
            /,
        ) -> "Preconditions.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel4.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel4.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel4.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["Preconditions.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Preconditions.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Preconditions."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Preconditions", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Preconditions.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel3]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass
    """
    any: Optional[List[AnyModel4]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass
    """


class Foreach(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Foreach"]:
            return Foreach

        def build(self) -> "Foreach":
            return Foreach(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        @overload
        def clone(self, value_or_callback: Optional[Clone], /) -> "Foreach.Builder": ...

        @overload
        def clone(
            self, value_or_callback: Callable[[Clone.Builder], Clone.Builder | Clone], /
        ) -> "Foreach.Builder": ...

        @overload
        def clone(self, value_or_callback: Never = ...) -> "Clone.BuilderContext": ...

        def clone(self, value_or_callback=None, /):
            """
            Clone specifies the source resource used to populate each generated resource.
            At most one of Data or Clone can be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            if self._in_context and value_or_callback is None:
                context = Clone.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Clone.builder())
                if isinstance(output, Clone.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone", value)

        @overload
        def clone_list(self, value_or_callback: Optional[CloneList], /) -> "Foreach.Builder": ...

        @overload
        def clone_list(
            self,
            value_or_callback: Callable[[CloneList.Builder], CloneList.Builder | CloneList],
            /,
        ) -> "Foreach.Builder": ...

        @overload
        def clone_list(self, value_or_callback: Never = ...) -> "CloneList.BuilderContext": ...

        def clone_list(self, value_or_callback=None, /):
            """
            CloneList specifies the list of source resource used to populate each generated resource.
            """
            if self._in_context and value_or_callback is None:
                context = CloneList.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone_list"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CloneList.builder())
                if isinstance(output, CloneList.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone_list", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel14,
                        ContextModel15,
                        ContextModel16,
                        ContextModel17,
                        ContextModel18,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def data(self, value: Optional[Any], /) -> Self:
            """
            Data provides the resource declaration used to populate each generated resource.
            At most one of Data or Clone must be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            return self._set("data", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[Preconditions], /
        ) -> "Foreach.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [Preconditions.Builder], Preconditions.Builder | Preconditions
            ],
            /,
        ) -> "Foreach.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "Preconditions.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = Preconditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Preconditions.builder())
                if isinstance(output, Preconditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["Foreach.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Foreach.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Foreach."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Foreach", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Foreach.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    clone: Optional[Clone] = None
    """
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    clone_list: Annotated[Optional[CloneList], Field(alias="cloneList")] = None
    """
    CloneList specifies the list of source resource used to populate each generated resource.
    """
    context: Optional[
        List[
            Union[
                ContextModel14,
                ContextModel15,
                ContextModel16,
                ContextModel17,
                ContextModel18,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    data: Optional[Any] = None
    """
    Data provides the resource declaration used to populate each generated resource.
    At most one of Data or Clone must be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    preconditions: Optional[Preconditions] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class Generate(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Generate"]:
            return Generate

        def build(self) -> "Generate":
            return Generate(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        @overload
        def clone(self, value_or_callback: Optional[Clone], /) -> "Generate.Builder": ...

        @overload
        def clone(
            self, value_or_callback: Callable[[Clone.Builder], Clone.Builder | Clone], /
        ) -> "Generate.Builder": ...

        @overload
        def clone(self, value_or_callback: Never = ...) -> "Clone.BuilderContext": ...

        def clone(self, value_or_callback=None, /):
            """
            Clone specifies the source resource used to populate each generated resource.
            At most one of Data or Clone can be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            if self._in_context and value_or_callback is None:
                context = Clone.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Clone.builder())
                if isinstance(output, Clone.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone", value)

        @overload
        def clone_list(self, value_or_callback: Optional[CloneList], /) -> "Generate.Builder": ...

        @overload
        def clone_list(
            self,
            value_or_callback: Callable[[CloneList.Builder], CloneList.Builder | CloneList],
            /,
        ) -> "Generate.Builder": ...

        @overload
        def clone_list(self, value_or_callback: Never = ...) -> "CloneList.BuilderContext": ...

        def clone_list(self, value_or_callback=None, /):
            """
            CloneList specifies the list of source resource used to populate each generated resource.
            """
            if self._in_context and value_or_callback is None:
                context = CloneList.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone_list"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CloneList.builder())
                if isinstance(output, CloneList.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone_list", value)

        def data(self, value: Optional[Any], /) -> Self:
            """
            Data provides the resource declaration used to populate each generated resource.
            At most one of Data or Clone must be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            return self._set("data", value)

        @overload
        def foreach(self, value_or_callback: List[Foreach], /) -> "Generate.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Foreach, Foreach.Builder]],
                GenericListBuilder[Foreach, Foreach.Builder] | List[Foreach],
            ],
            /,
        ) -> "Generate.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Foreach.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies generate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Foreach.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Foreach.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        def generate_existing(self, value: Optional[bool], /) -> Self:
            """
            GenerateExisting controls whether to trigger the rule in existing resources
            If is set to "true" the rule will be triggered and applied to existing matched resources.
            """
            return self._set("generate_existing", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        def orphan_downstream_on_policy_delete(self, value: Optional[bool], /) -> Self:
            """
            OrphanDownstreamOnPolicyDelete controls whether generated resources should be deleted when the rule that generated
            them is deleted with synchronization enabled. This option is only applicable to generate rules of the data type.
            See https://kyverno.io/docs/writing-policies/generate/#data-examples.
            Defaults to "false" if not specified.
            """
            return self._set("orphan_downstream_on_policy_delete", value)

        def synchronize(self, value: Optional[bool], /) -> Self:
            """
            Synchronize controls if generated resources should be kept in-sync with their source resource.
            If Synchronize is set to "true" changes to generated resources will be overwritten with resource
            data from Data or the resource specified in the Clone declaration.
            Optional. Defaults to "false" if not specified.
            """
            return self._set("synchronize", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["Generate.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Generate.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Generate."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Generate", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Generate.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    clone: Optional[Clone] = None
    """
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    clone_list: Annotated[Optional[CloneList], Field(alias="cloneList")] = None
    """
    CloneList specifies the list of source resource used to populate each generated resource.
    """
    data: Optional[Any] = None
    """
    Data provides the resource declaration used to populate each generated resource.
    At most one of Data or Clone must be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    foreach: Optional[List[Foreach]] = None
    """
    ForEach applies generate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    generate_existing: Annotated[Optional[bool], Field(alias="generateExisting")] = None
    """
    GenerateExisting controls whether to trigger the rule in existing resources
    If is set to "true" the rule will be triggered and applied to existing matched resources.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    orphan_downstream_on_policy_delete: Annotated[
        Optional[bool], Field(alias="orphanDownstreamOnPolicyDelete")
    ] = None
    """
    OrphanDownstreamOnPolicyDelete controls whether generated resources should be deleted when the rule that generated
    them is deleted with synchronization enabled. This option is only applicable to generate rules of the data type.
    See https://kyverno.io/docs/writing-policies/generate/#data-examples.
    Defaults to "false" if not specified.
    """
    synchronize: Optional[bool] = None
    """
    Synchronize controls if generated resources should be kept in-sync with their source resource.
    If Synchronize is set to "true" changes to generated resources will be overwritten with resource
    data from Data or the resource specified in the Clone declaration.
    Optional. Defaults to "false" if not specified.
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class ImageExtractor(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ImageExtractor"]:
            return ImageExtractor

        def build(self) -> "ImageExtractor":
            return ImageExtractor(**self._attrs)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath expression to apply to the image value.
            This is useful when the extracted image begins with a prefix like 'docker://'.
            The 'trim_prefix' function may be used to trim the prefix: trim_prefix(@, 'docker://').
            Note - Image digest mutation may not be used when applying a JMESPAth to an image.
            """
            return self._set("jmes_path", value)

        def key(self, value: Optional[str], /) -> Self:
            """
            Key is an optional name of the field within 'path' that will be used to uniquely identify an image.
            Note - this field MUST be unique.
            """
            return self._set("key", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name is the entry the image will be available under 'images.<name>' in the context.
            If this field is not defined, image entries will appear under 'images.custom'.
            """
            return self._set("name", value)

        def path(self, value: str, /) -> Self:
            """
            Path is the path to the object containing the image field in a custom resource.
            It should be slash-separated. Each slash-separated key must be a valid YAML key or a wildcard '*'.
            Wildcard keys are expanded in case of arrays or objects.
            """
            return self._set("path", value)

        def value(self, value: Optional[str], /) -> Self:
            """
            Value is an optional name of the field within 'path' that points to the image URI.
            This is useful when a custom 'key' is also defined.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["ImageExtractor.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ImageExtractor.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ImageExtractor."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ImageExtractor", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ImageExtractor.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath expression to apply to the image value.
    This is useful when the extracted image begins with a prefix like 'docker://'.
    The 'trim_prefix' function may be used to trim the prefix: trim_prefix(@, 'docker://').
    Note - Image digest mutation may not be used when applying a JMESPAth to an image.
    """
    key: Optional[str] = None
    """
    Key is an optional name of the field within 'path' that will be used to uniquely identify an image.
    Note - this field MUST be unique.
    """
    name: Optional[str] = None
    """
    Name is the entry the image will be available under 'images.<name>' in the context.
    If this field is not defined, image entries will appear under 'images.custom'.
    """
    path: str
    """
    Path is the path to the object containing the image field in a custom resource.
    It should be slash-separated. Each slash-separated key must be a valid YAML key or a wildcard '*'.
    Wildcard keys are expanded in case of arrays or objects.
    """
    value: Optional[str] = None
    """
    Value is an optional name of the field within 'path' that points to the image URI.
    This is useful when a custom 'key' is also defined.
    """


class AllModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel4"]:
            return AllModel4

        def build(self) -> "AllModel4":
            return AllModel4(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel4.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel4.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel4.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel4.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel5"]:
            return AnyModel5

        def build(self) -> "AnyModel5":
            return AnyModel5(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel5.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel5.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel5.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel5.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ContextModel19(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel19"]:
            return ContextModel19

        def build(self) -> "ContextModel19":
            return ContextModel19(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel19.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel19.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel19.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel19.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel19.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel19.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel19.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel19.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel19.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel19.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel19.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel19.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel19."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel19", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel19.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel20(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel20"]:
            return ContextModel20

        def build(self) -> "ContextModel20":
            return ContextModel20(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel20.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel20.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel20.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel20.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel20.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel20.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel20.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel20.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel20.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel20.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel20.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel20.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel20."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel20", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel20.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel21(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel21"]:
            return ContextModel21

        def build(self) -> "ContextModel21":
            return ContextModel21(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel21.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel21.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel21.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel21.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel21.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel21.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel21.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel21.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel21.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel21.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel21.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel21.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel21."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel21", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel21.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel22(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel22"]:
            return ContextModel22

        def build(self) -> "ContextModel22":
            return ContextModel22(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel22.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel22.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel22.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel22.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel22.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel22.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel22.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel22.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel22.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel22.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel22.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel22.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel22."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel22", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel22.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel23(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel23"]:
            return ContextModel23

        def build(self) -> "ContextModel23":
            return ContextModel23(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel23.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel23.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel23.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel23.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel23.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel23.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel23.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel23.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel23.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel23.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel23.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel23.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel23."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel23", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel23.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel5"]:
            return AllModel5

        def build(self) -> "AllModel5":
            return AllModel5(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel6"]:
            return AnyModel6

        def build(self) -> "AnyModel6":
            return AnyModel6(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel"]:
            return ForeachModel

        def build(self) -> "ForeachModel":
            return ForeachModel(**self._attrs)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel19,
                        ContextModel20,
                        ContextModel21,
                        ContextModel22,
                        ContextModel23,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def order(self, value: Optional[Literal["Ascending", "Descending"]], /) -> Self:
            """
            Order defines the iteration order on the list.
            Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
            """
            return self._set("order", value)

        def patch_strategic_merge(self, value: Optional[Any], /) -> Self:
            """
            PatchStrategicMerge is a strategic merge patch used to modify resources.
            See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
            and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
            """
            return self._set("patch_strategic_merge", value)

        def patches_json6902(self, value: Optional[str], /) -> Self:
            """
            PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
            See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
            """
            return self._set("patches_json6902", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[Preconditions], /
        ) -> "ForeachModel.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [Preconditions.Builder], Preconditions.Builder | Preconditions
            ],
            /,
        ) -> "ForeachModel.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "Preconditions.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = Preconditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Preconditions.builder())
                if isinstance(output, Preconditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    context: Optional[
        List[
            Union[
                ContextModel19,
                ContextModel20,
                ContextModel21,
                ContextModel22,
                ContextModel23,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    order: Optional[Literal["Ascending", "Descending"]] = None
    """
    Order defines the iteration order on the list.
    Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
    """
    patch_strategic_merge: Annotated[Optional[Any], Field(alias="patchStrategicMerge")] = None
    """
    PatchStrategicMerge is a strategic merge patch used to modify resources.
    See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
    and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    """
    patches_json6902: Annotated[Optional[str], Field(alias="patchesJson6902")] = None
    """
    PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
    See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    """
    preconditions: Optional[Preconditions] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ContextModel24(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel24"]:
            return ContextModel24

        def build(self) -> "ContextModel24":
            return ContextModel24(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel24.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel24.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel24.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel24.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel24.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel24.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel24.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel24.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel24.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel24.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel24.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel24.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel24."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel24", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel24.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel25(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel25"]:
            return ContextModel25

        def build(self) -> "ContextModel25":
            return ContextModel25(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel25.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel25.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel25.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel25.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel25.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel25.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel25.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel25.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel25.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel25.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel25.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel25.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel25."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel25", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel25.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel26(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel26"]:
            return ContextModel26

        def build(self) -> "ContextModel26":
            return ContextModel26(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel26.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel26.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel26.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel26.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel26.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel26.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel26.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel26.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel26.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel26.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel26.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel26.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel26."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel26", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel26.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel27(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel27"]:
            return ContextModel27

        def build(self) -> "ContextModel27":
            return ContextModel27(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel27.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel27.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel27.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel27.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel27.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel27.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel27.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel27.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: Variable, /) -> "ContextModel27.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel27.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel27.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel27.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel27."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel27", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel27.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Variable
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel28(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel28"]:
            return ContextModel28

        def build(self) -> "ContextModel28":
            return ContextModel28(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel28.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel28.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel28.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel28.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel28.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel28.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel28.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel28.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[Variable], /
        ) -> "ContextModel28.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[[Variable.Builder], Variable.Builder | Variable],
            /,
        ) -> "ContextModel28.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "Variable.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = Variable.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Variable.builder())
                if isinstance(output, Variable.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel28.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel28.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel28."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel28", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel28.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[Variable] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class Target(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Target"]:
            return Target

        def build(self) -> "Target":
            return Target(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel24,
                        ContextModel25,
                        ContextModel26,
                        ContextModel27,
                        ContextModel28,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        def preconditions(self, value: Optional[Any], /) -> Self:
            """
            Preconditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
            of conditions (without `any` or `all` statements is supported for backwards compatibility but
            will be deprecated in the next major release.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            return self._set("preconditions", value)

        @overload
        def selector(self, value_or_callback: Optional[Selector], /) -> "Target.Builder": ...

        @overload
        def selector(
            self,
            value_or_callback: Callable[[Selector.Builder], Selector.Builder | Selector],
            /,
        ) -> "Target.Builder": ...

        @overload
        def selector(self, value_or_callback: Never = ...) -> "Selector.BuilderContext": ...

        def selector(self, value_or_callback=None, /):
            """
            Selector allows you to select target resources with their labels.
            """
            if self._in_context and value_or_callback is None:
                context = Selector.BuilderContext()
                context._parent_builder = self
                context._field_name = "selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Selector.builder())
                if isinstance(output, Selector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("selector", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["Target.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Target.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Target."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Target", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Target.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    context: Optional[
        List[
            Union[
                ContextModel24,
                ContextModel25,
                ContextModel26,
                ContextModel27,
                ContextModel28,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    preconditions: Optional[Any] = None
    """
    Preconditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
    of conditions (without `any` or `all` statements is supported for backwards compatibility but
    will be deprecated in the next major release.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    selector: Optional[Selector] = None
    """
    Selector allows you to select target resources with their labels.
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class Mutate(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Mutate"]:
            return Mutate

        def build(self) -> "Mutate":
            return Mutate(**self._attrs)

        @overload
        def foreach(self, value_or_callback: List[ForeachModel], /) -> "Mutate.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ForeachModel, ForeachModel.Builder]],
                GenericListBuilder[ForeachModel, ForeachModel.Builder] | List[ForeachModel],
            ],
            /,
        ) -> "Mutate.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ForeachModel.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ForeachModel.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForeachModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        def mutate_existing_on_policy_update(self, value: Optional[bool], /) -> Self:
            """
            MutateExistingOnPolicyUpdate controls if the mutateExisting rule will be applied on policy events.
            """
            return self._set("mutate_existing_on_policy_update", value)

        def patch_strategic_merge(self, value: Optional[Any], /) -> Self:
            """
            PatchStrategicMerge is a strategic merge patch used to modify resources.
            See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
            and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
            """
            return self._set("patch_strategic_merge", value)

        def patches_json6902(self, value: Optional[str], /) -> Self:
            """
            PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
            See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
            """
            return self._set("patches_json6902", value)

        @overload
        def targets(self, value_or_callback: List[Target], /) -> "Mutate.Builder": ...

        @overload
        def targets(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Target, Target.Builder]],
                GenericListBuilder[Target, Target.Builder] | List[Target],
            ],
            /,
        ) -> "Mutate.Builder": ...

        @overload
        def targets(self, value_or_callback: Never = ...) -> ListBuilderContext[Target.Builder]: ...

        def targets(self, value_or_callback=None, /):
            """
            Targets defines the target resources to be mutated.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Target.Builder]()
                context._parent_builder = self
                context._field_name = "targets"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Target.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("targets", value)

    class BuilderContext(BuilderContextBase["Mutate.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Mutate.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Mutate."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Mutate", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Mutate.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    foreach: Optional[List[ForeachModel]] = None
    """
    ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    mutate_existing_on_policy_update: Annotated[
        Optional[bool], Field(alias="mutateExistingOnPolicyUpdate")
    ] = None
    """
    MutateExistingOnPolicyUpdate controls if the mutateExisting rule will be applied on policy events.
    """
    patch_strategic_merge: Annotated[Optional[Any], Field(alias="patchStrategicMerge")] = None
    """
    PatchStrategicMerge is a strategic merge patch used to modify resources.
    See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
    and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    """
    patches_json6902: Annotated[Optional[str], Field(alias="patchesJson6902")] = None
    """
    PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
    See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    """
    targets: Optional[List[Target]] = None
    """
    Targets defines the target resources to be mutated.
    """


class AllModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel6"]:
            return AllModel6

        def build(self) -> "AllModel6":
            return AllModel6(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel7(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel7"]:
            return AnyModel7

        def build(self) -> "AnyModel7":
            return AnyModel7(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel7.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel7.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel7."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel7", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel7.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class PreconditionsModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PreconditionsModel"]:
            return PreconditionsModel

        def build(self) -> "PreconditionsModel":
            return PreconditionsModel(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel6], /) -> "PreconditionsModel.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel6, AllModel6.Builder]],
                GenericListBuilder[AllModel6, AllModel6.Builder] | List[AllModel6],
            ],
            /,
        ) -> "PreconditionsModel.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel6.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel6.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel6.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel7], /) -> "PreconditionsModel.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel7, AnyModel7.Builder]],
                GenericListBuilder[AnyModel7, AnyModel7.Builder] | List[AnyModel7],
            ],
            /,
        ) -> "PreconditionsModel.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel7.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel7.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel7.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["PreconditionsModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PreconditionsModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PreconditionsModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PreconditionsModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PreconditionsModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel6]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass.
    """
    any: Optional[List[AnyModel7]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass.
    """


class AuditAnnotation(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AuditAnnotation"]:
            return AuditAnnotation

        def build(self) -> "AuditAnnotation":
            return AuditAnnotation(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            key specifies the audit annotation key. The audit annotation keys of
            a ValidatingAdmissionPolicy must be unique. The key must be a qualified
            name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.

            The key is combined with the resource name of the
            ValidatingAdmissionPolicy to construct an audit annotation key:
            "{ValidatingAdmissionPolicy name}/{key}".

            If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy
            and the same audit annotation key, the annotation key will be identical.
            In this case, the first annotation written with the key will be included
            in the audit event and all subsequent annotations with the same key
            will be discarded.

            Required.
            """
            return self._set("key", value)

        def value_expression(self, value: str, /) -> Self:
            """
            valueExpression represents the expression which is evaluated by CEL to
            produce an audit annotation value. The expression must evaluate to either
            a string or null value. If the expression evaluates to a string, the
            audit annotation is included with the string value. If the expression
            evaluates to null or empty string the audit annotation will be omitted.
            The valueExpression may be no longer than 5kb in length.
            If the result of the valueExpression is more than 10kb in length, it
            will be truncated to 10kb.

            If multiple ValidatingAdmissionPolicyBinding resources match an
            API request, then the valueExpression will be evaluated for
            each binding. All unique values produced by the valueExpressions
            will be joined together in a comma-separated list.

            Required.
            """
            return self._set("value_expression", value)

    class BuilderContext(BuilderContextBase["AuditAnnotation.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AuditAnnotation.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AuditAnnotation."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AuditAnnotation", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AuditAnnotation.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    key specifies the audit annotation key. The audit annotation keys of
    a ValidatingAdmissionPolicy must be unique. The key must be a qualified
    name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.

    The key is combined with the resource name of the
    ValidatingAdmissionPolicy to construct an audit annotation key:
    "{ValidatingAdmissionPolicy name}/{key}".

    If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy
    and the same audit annotation key, the annotation key will be identical.
    In this case, the first annotation written with the key will be included
    in the audit event and all subsequent annotations with the same key
    will be discarded.

    Required.
    """
    value_expression: Annotated[str, Field(alias="valueExpression")]
    """
    valueExpression represents the expression which is evaluated by CEL to
    produce an audit annotation value. The expression must evaluate to either
    a string or null value. If the expression evaluates to a string, the
    audit annotation is included with the string value. If the expression
    evaluates to null or empty string the audit annotation will be omitted.
    The valueExpression may be no longer than 5kb in length.
    If the result of the valueExpression is more than 10kb in length, it
    will be truncated to 10kb.

    If multiple ValidatingAdmissionPolicyBinding resources match an
    API request, then the valueExpression will be evaluated for
    each binding. All unique values produced by the valueExpressions
    will be joined together in a comma-separated list.

    Required.
    """


class Expression(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Expression"]:
            return Expression

        def build(self) -> "Expression":
            return Expression(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression represents the expression which will be evaluated by CEL.
            ref: https://github.com/google/cel-spec
            CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:

            - 'object' - The object from the incoming request. The value is null for DELETE requests.
            - 'oldObject' - The existing object. The value is null for CREATE requests.
            - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
            - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
            - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources.
            - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
              For example, a variable named 'foo' can be accessed as 'variables.foo'.
            - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.

            The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the
            object. No other metadata properties are accessible.

            Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
            Accessible property names are escaped according to the following rules when accessed in the expression:
            - '__' escapes to '__underscores__'
            - '.' escapes to '__dot__'
            - '-' escapes to '__dash__'
            - '/' escapes to '__slash__'
            - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
                  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
                  "import", "let", "loop", "package", "namespace", "return".
            Examples:
              - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
              - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
              - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}

            Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1].
            Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
              - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
                non-intersecting elements in `Y` are appended, retaining their partial order.
              - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
                are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
                non-intersecting keys are appended, retaining their partial order.
            Required.
            """
            return self._set("expression", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message represents the message displayed when validation fails. The message is required if the Expression contains
            line breaks. The message must not contain line breaks.
            If unset, the message is "failed rule: {Rule}".
            e.g. "must be a URL with the host matching spec.host"
            If the Expression contains line breaks. Message is required.
            The message must not contain line breaks.
            If unset, the message is "failed Expression: {Expression}".
            """
            return self._set("message", value)

        def message_expression(self, value: Optional[str], /) -> Self:
            """
            messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
            Since messageExpression is used as a failure message, it must evaluate to a string.
            If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails.
            If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced
            as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string
            that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and
            the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged.
            messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
            Example:
            "object.x must be less than max ("+string(params.max)+")"
            """
            return self._set("message_expression", value)

        def reason(self, value: Optional[str], /) -> Self:
            """
            Reason represents a machine-readable description of why this validation failed.
            If this is the first validation in the list to fail, this reason, as well as the
            corresponding HTTP response code, are used in the
            HTTP response to the client.
            The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge".
            If not set, StatusReasonInvalid is used in the response to the client.
            """
            return self._set("reason", value)

    class BuilderContext(BuilderContextBase["Expression.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Expression.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Expression."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Expression", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Expression.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression represents the expression which will be evaluated by CEL.
    ref: https://github.com/google/cel-spec
    CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:

    - 'object' - The object from the incoming request. The value is null for DELETE requests.
    - 'oldObject' - The existing object. The value is null for CREATE requests.
    - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).
    - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.
    - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources.
    - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
      For example, a variable named 'foo' can be accessed as 'variables.foo'.
    - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.

    The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the
    object. No other metadata properties are accessible.

    Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
    Accessible property names are escaped according to the following rules when accessed in the expression:
    - '__' escapes to '__underscores__'
    - '.' escapes to '__dot__'
    - '-' escapes to '__dash__'
    - '/' escapes to '__slash__'
    - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
          "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
          "import", "let", "loop", "package", "namespace", "return".
    Examples:
      - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
      - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
      - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}

    Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1].
    Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
      - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
        non-intersecting elements in `Y` are appended, retaining their partial order.
      - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
        are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
        non-intersecting keys are appended, retaining their partial order.
    Required.
    """
    message: Optional[str] = None
    """
    Message represents the message displayed when validation fails. The message is required if the Expression contains
    line breaks. The message must not contain line breaks.
    If unset, the message is "failed rule: {Rule}".
    e.g. "must be a URL with the host matching spec.host"
    If the Expression contains line breaks. Message is required.
    The message must not contain line breaks.
    If unset, the message is "failed Expression: {Expression}".
    """
    message_expression: Annotated[Optional[str], Field(alias="messageExpression")] = None
    """
    messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
    Since messageExpression is used as a failure message, it must evaluate to a string.
    If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails.
    If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced
    as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string
    that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and
    the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged.
    messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'.
    Example:
    "object.x must be less than max ("+string(params.max)+")"
    """
    reason: Optional[str] = None
    """
    Reason represents a machine-readable description of why this validation failed.
    If this is the first validation in the list to fail, this reason, as well as the
    corresponding HTTP response code, are used in the
    HTTP response to the client.
    The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge".
    If not set, StatusReasonInvalid is used in the response to the client.
    """


class ParamKind(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ParamKind"]:
            return ParamKind

        def build(self) -> "ParamKind":
            return ParamKind(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion is the API group version the resources belong to.
            In format of "group/version".
            Required.
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind is the API kind the resources belong to.
            Required.
            """
            return self._set("kind", value)

    class BuilderContext(BuilderContextBase["ParamKind.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ParamKind.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ParamKind."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ParamKind", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ParamKind.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion is the API group version the resources belong to.
    In format of "group/version".
    Required.
    """
    kind: Optional[str] = None
    """
    Kind is the API kind the resources belong to.
    Required.
    """


class ParamRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ParamRef"]:
            return ParamRef

        def build(self) -> "ParamRef":
            return ParamRef(**self._attrs)

        def name(self, value: Optional[str], /) -> Self:
            """
            name is the name of the resource being referenced.

            One of `name` or `selector` must be set, but `name` and `selector` are
            mutually exclusive properties. If one is set, the other must be unset.

            A single parameter used for all admission requests can be configured
            by setting the `name` field, leaving `selector` blank, and setting namespace
            if `paramKind` is namespace-scoped.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            namespace is the namespace of the referenced resource. Allows limiting
            the search for params to a specific namespace. Applies to both `name` and
            `selector` fields.

            A per-namespace parameter may be used by specifying a namespace-scoped
            `paramKind` in the policy and leaving this field empty.

            - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this
            field results in a configuration error.

            - If `paramKind` is namespace-scoped, the namespace of the object being
            evaluated for admission will be used when this field is left unset. Take
            care that if this is left empty the binding must not match any cluster-scoped
            resources, which will result in an error.
            """
            return self._set("namespace", value)

        def parameter_not_found_action(self, value: Optional[str], /) -> Self:
            """
            `parameterNotFoundAction` controls the behavior of the binding when the resource
            exists, and name or selector is valid, but there are no parameters
            matched by the binding. If the value is set to `Allow`, then no
            matched parameters will be treated as successful validation by the binding.
            If set to `Deny`, then no matched parameters will be subject to the
            `failurePolicy` of the policy.

            Allowed values are `Allow` or `Deny`

            Required
            """
            return self._set("parameter_not_found_action", value)

        @overload
        def selector(self, value_or_callback: Optional[Selector], /) -> "ParamRef.Builder": ...

        @overload
        def selector(
            self,
            value_or_callback: Callable[[Selector.Builder], Selector.Builder | Selector],
            /,
        ) -> "ParamRef.Builder": ...

        @overload
        def selector(self, value_or_callback: Never = ...) -> "Selector.BuilderContext": ...

        def selector(self, value_or_callback=None, /):
            """
            selector can be used to match multiple param objects based on their labels.
            Supply selector: {} to match all resources of the ParamKind.

            If multiple params are found, they are all evaluated with the policy expressions
            and the results are ANDed together.

            One of `name` or `selector` must be set, but `name` and `selector` are
            mutually exclusive properties. If one is set, the other must be unset.
            """
            if self._in_context and value_or_callback is None:
                context = Selector.BuilderContext()
                context._parent_builder = self
                context._field_name = "selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Selector.builder())
                if isinstance(output, Selector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("selector", value)

    class BuilderContext(BuilderContextBase["ParamRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ParamRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ParamRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ParamRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ParamRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Optional[str] = None
    """
    name is the name of the resource being referenced.

    One of `name` or `selector` must be set, but `name` and `selector` are
    mutually exclusive properties. If one is set, the other must be unset.

    A single parameter used for all admission requests can be configured
    by setting the `name` field, leaving `selector` blank, and setting namespace
    if `paramKind` is namespace-scoped.
    """
    namespace: Optional[str] = None
    """
    namespace is the namespace of the referenced resource. Allows limiting
    the search for params to a specific namespace. Applies to both `name` and
    `selector` fields.

    A per-namespace parameter may be used by specifying a namespace-scoped
    `paramKind` in the policy and leaving this field empty.

    - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this
    field results in a configuration error.

    - If `paramKind` is namespace-scoped, the namespace of the object being
    evaluated for admission will be used when this field is left unset. Take
    care that if this is left empty the binding must not match any cluster-scoped
    resources, which will result in an error.
    """
    parameter_not_found_action: Annotated[Optional[str], Field(alias="parameterNotFoundAction")] = (
        None
    )
    """
    `parameterNotFoundAction` controls the behavior of the binding when the resource
    exists, and name or selector is valid, but there are no parameters
    matched by the binding. If the value is set to `Allow`, then no
    matched parameters will be treated as successful validation by the binding.
    If set to `Deny`, then no matched parameters will be subject to the
    `failurePolicy` of the policy.

    Allowed values are `Allow` or `Deny`

    Required
    """
    selector: Optional[Selector] = None
    """
    selector can be used to match multiple param objects based on their labels.
    Supply selector: {} to match all resources of the ParamKind.

    If multiple params are found, they are all evaluated with the policy expressions
    and the results are ANDed together.

    One of `name` or `selector` must be set, but `name` and `selector` are
    mutually exclusive properties. If one is set, the other must be unset.
    """


class VariableModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel"]:
            return VariableModel

        def build(self) -> "VariableModel":
            return VariableModel(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression is the expression that will be evaluated as the value of the variable.
            The CEL expression has access to the same identifiers as the CEL expressions in Validation.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
            The variable can be accessed in other expressions through `variables`
            For example, if name is "foo", the variable will be available as `variables.foo`
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["VariableModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression is the expression that will be evaluated as the value of the variable.
    The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    """
    name: str
    """
    Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
    The variable can be accessed in other expressions through `variables`
    For example, if name is "foo", the variable will be available as `variables.foo`
    """


class Cel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Cel"]:
            return Cel

        def build(self) -> "Cel":
            return Cel(**self._attrs)

        @overload
        def audit_annotations(
            self, value_or_callback: List[AuditAnnotation], /
        ) -> "Cel.Builder": ...

        @overload
        def audit_annotations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AuditAnnotation, AuditAnnotation.Builder]],
                GenericListBuilder[AuditAnnotation, AuditAnnotation.Builder]
                | List[AuditAnnotation],
            ],
            /,
        ) -> "Cel.Builder": ...

        @overload
        def audit_annotations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[AuditAnnotation.Builder]: ...

        def audit_annotations(self, value_or_callback=None, /):
            """
            AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AuditAnnotation.Builder]()
                context._parent_builder = self
                context._field_name = "audit_annotations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AuditAnnotation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("audit_annotations", value)

        @overload
        def expressions(self, value_or_callback: List[Expression], /) -> "Cel.Builder": ...

        @overload
        def expressions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Expression, Expression.Builder]],
                GenericListBuilder[Expression, Expression.Builder] | List[Expression],
            ],
            /,
        ) -> "Cel.Builder": ...

        @overload
        def expressions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Expression.Builder]: ...

        def expressions(self, value_or_callback=None, /):
            """
            Expressions is a list of CELExpression types.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Expression.Builder]()
                context._parent_builder = self
                context._field_name = "expressions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Expression.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("expressions", value)

        @overload
        def param_kind(self, value_or_callback: Optional[ParamKind], /) -> "Cel.Builder": ...

        @overload
        def param_kind(
            self,
            value_or_callback: Callable[[ParamKind.Builder], ParamKind.Builder | ParamKind],
            /,
        ) -> "Cel.Builder": ...

        @overload
        def param_kind(self, value_or_callback: Never = ...) -> "ParamKind.BuilderContext": ...

        def param_kind(self, value_or_callback=None, /):
            """
            ParamKind is a tuple of Group Kind and Version.
            """
            if self._in_context and value_or_callback is None:
                context = ParamKind.BuilderContext()
                context._parent_builder = self
                context._field_name = "param_kind"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ParamKind.builder())
                if isinstance(output, ParamKind.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("param_kind", value)

        @overload
        def param_ref(self, value_or_callback: Optional[ParamRef], /) -> "Cel.Builder": ...

        @overload
        def param_ref(
            self,
            value_or_callback: Callable[[ParamRef.Builder], ParamRef.Builder | ParamRef],
            /,
        ) -> "Cel.Builder": ...

        @overload
        def param_ref(self, value_or_callback: Never = ...) -> "ParamRef.BuilderContext": ...

        def param_ref(self, value_or_callback=None, /):
            """
            ParamRef references a parameter resource.
            """
            if self._in_context and value_or_callback is None:
                context = ParamRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "param_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ParamRef.builder())
                if isinstance(output, ParamRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("param_ref", value)

        @overload
        def variables(self, value_or_callback: List[VariableModel], /) -> "Cel.Builder": ...

        @overload
        def variables(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[VariableModel, VariableModel.Builder]],
                GenericListBuilder[VariableModel, VariableModel.Builder] | List[VariableModel],
            ],
            /,
        ) -> "Cel.Builder": ...

        @overload
        def variables(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[VariableModel.Builder]: ...

        def variables(self, value_or_callback=None, /):
            """
            Variables contain definitions of variables that can be used in composition of other expressions.
            Each variable is defined as a named CEL expression.
            The variables defined here will be available under `variables` in other expressions of the policy.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[VariableModel.Builder]()
                context._parent_builder = self
                context._field_name = "variables"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("variables", value)

    class BuilderContext(BuilderContextBase["Cel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Cel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Cel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Cel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Cel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    audit_annotations: Annotated[
        Optional[List[AuditAnnotation]], Field(alias="auditAnnotations")
    ] = None
    """
    AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.
    """
    expressions: Optional[List[Expression]] = None
    """
    Expressions is a list of CELExpression types.
    """
    param_kind: Annotated[Optional[ParamKind], Field(alias="paramKind")] = None
    """
    ParamKind is a tuple of Group Kind and Version.
    """
    param_ref: Annotated[Optional[ParamRef], Field(alias="paramRef")] = None
    """
    ParamRef references a parameter resource.
    """
    variables: Optional[List[VariableModel]] = None
    """
    Variables contain definitions of variables that can be used in composition of other expressions.
    Each variable is defined as a named CEL expression.
    The variables defined here will be available under `variables` in other expressions of the policy.
    """


class Deny(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Deny"]:
            return Deny

        def build(self) -> "Deny":
            return Deny(**self._attrs)

        @overload
        def conditions(self, value_or_callback: Optional[Conditions], /) -> "Deny.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[[Conditions.Builder], Conditions.Builder | Conditions],
            /,
        ) -> "Deny.Builder": ...

        @overload
        def conditions(self, value_or_callback: Never = ...) -> "Conditions.BuilderContext": ...

        def conditions(self, value_or_callback=None, /):
            """
            Multiple conditions can be declared under an `any` or `all` statement.
            See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
            """
            if self._in_context and value_or_callback is None:
                context = Conditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Conditions.builder())
                if isinstance(output, Conditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

    class BuilderContext(BuilderContextBase["Deny.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Deny.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Deny."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Deny", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Deny.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Conditions] = None
    """
    Multiple conditions can be declared under an `any` or `all` statement.
    See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


class FailureActionOverride(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["FailureActionOverride"]:
            return FailureActionOverride

        def build(self) -> "FailureActionOverride":
            return FailureActionOverride(**self._attrs)

        def action(
            self, value: Optional[Literal["audit", "enforce", "Audit", "Enforce"]], /
        ) -> Self:
            """
            ValidationFailureAction defines the policy validation failure action
            """
            return self._set("action", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[NamespaceSelector], /
        ) -> "FailureActionOverride.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [NamespaceSelector.Builder],
                NamespaceSelector.Builder | NamespaceSelector,
            ],
            /,
        ) -> "FailureActionOverride.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "NamespaceSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            A label selector is a label query over a set of resources. The result of matchLabels and
            matchExpressions are ANDed. An empty label selector matches all objects. A null
            label selector matches no objects.
            """
            if self._in_context and value_or_callback is None:
                context = NamespaceSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(NamespaceSelector.builder())
                if isinstance(output, NamespaceSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        def namespaces(self, value: Optional[List[str]], /) -> Self:
            return self._set("namespaces", value)

    class BuilderContext(BuilderContextBase["FailureActionOverride.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = FailureActionOverride.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for FailureActionOverride."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["FailureActionOverride", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use FailureActionOverride.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    action: Optional[Literal["audit", "enforce", "Audit", "Enforce"]] = None
    """
    ValidationFailureAction defines the policy validation failure action
    """
    namespace_selector: Annotated[Optional[NamespaceSelector], Field(alias="namespaceSelector")] = (
        None
    )
    """
    A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null
    label selector matches no objects.
    """
    namespaces: Optional[List[str]] = None


class VariableModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel1"]:
            return VariableModel1

        def build(self) -> "VariableModel1":
            return VariableModel1(**self._attrs)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the variable may take if the JMESPath
            expression evaluates to nil
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath Expression that can be used to
            transform the variable.
            """
            return self._set("jmes_path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is any arbitrary JSON object representable in YAML or JSON form.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["VariableModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the variable may take if the JMESPath
    expression evaluates to nil
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath Expression that can be used to
    transform the variable.
    """
    value: Optional[Any] = None
    """
    Value is any arbitrary JSON object representable in YAML or JSON form.
    """


class ContextModel29(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel29"]:
            return ContextModel29

        def build(self) -> "ContextModel29":
            return ContextModel29(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel29.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel29.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel29.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel29.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel29.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel29.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel29.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel29.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel29.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel29.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel29.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel29.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel29."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel29", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel29.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel30(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel30"]:
            return ContextModel30

        def build(self) -> "ContextModel30":
            return ContextModel30(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel30.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel30.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel30.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel30.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel30.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel30.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel30.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel30.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel30.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel30.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel30.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel30.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel30."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel30", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel30.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel31(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel31"]:
            return ContextModel31

        def build(self) -> "ContextModel31":
            return ContextModel31(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel31.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel31.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel31.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel31.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel31.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel31.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel31.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel31.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel31.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel31.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel31.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel31.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel31."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel31", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel31.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel32(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel32"]:
            return ContextModel32

        def build(self) -> "ContextModel32":
            return ContextModel32(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel32.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel32.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel32.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel32.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel32.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel32.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel32.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel32.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel1, /) -> "ContextModel32.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel32.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel32.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel32.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel32."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel32", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel32.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel1
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel33(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel33"]:
            return ContextModel33

        def build(self) -> "ContextModel33":
            return ContextModel33(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel33.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel33.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel33.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel33.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel33.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel33.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel33.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel33.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel33.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel33.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel33.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel33.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel33."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel33", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel33.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class DenyModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DenyModel"]:
            return DenyModel

        def build(self) -> "DenyModel":
            return DenyModel(**self._attrs)

        def conditions(self, value: Optional[Any], /) -> Self:
            """
            Multiple conditions can be declared under an `any` or `all` statement. A direct list
            of conditions (without `any` or `all` statements) is also supported for backwards compatibility
            but will be deprecated in the next major release.
            See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
            """
            return self._set("conditions", value)

    class BuilderContext(BuilderContextBase["DenyModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DenyModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DenyModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DenyModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DenyModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Any] = None
    """
    Multiple conditions can be declared under an `any` or `all` statement. A direct list
    of conditions (without `any` or `all` statements) is also supported for backwards compatibility
    but will be deprecated in the next major release.
    See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


class AllModel7(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel7"]:
            return AllModel7

        def build(self) -> "AllModel7":
            return AllModel7(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel7.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel7.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel7."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel7", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel7.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel8(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel8"]:
            return AnyModel8

        def build(self) -> "AnyModel8":
            return AnyModel8(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel8.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel8.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel8."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel8", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel8.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class PreconditionsModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PreconditionsModel1"]:
            return PreconditionsModel1

        def build(self) -> "PreconditionsModel1":
            return PreconditionsModel1(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel7], /) -> "PreconditionsModel1.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel7, AllModel7.Builder]],
                GenericListBuilder[AllModel7, AllModel7.Builder] | List[AllModel7],
            ],
            /,
        ) -> "PreconditionsModel1.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel7.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel7.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel7.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel8], /) -> "PreconditionsModel1.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel8, AnyModel8.Builder]],
                GenericListBuilder[AnyModel8, AnyModel8.Builder] | List[AnyModel8],
            ],
            /,
        ) -> "PreconditionsModel1.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel8.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel8.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel8.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["PreconditionsModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PreconditionsModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PreconditionsModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PreconditionsModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PreconditionsModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel7]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass
    """
    any: Optional[List[AnyModel8]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass
    """


class ForeachModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel1"]:
            return ForeachModel1

        def build(self) -> "ForeachModel1":
            return ForeachModel1(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel29,
                        ContextModel30,
                        ContextModel31,
                        ContextModel32,
                        ContextModel33,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel], /) -> "ForeachModel1.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel.Builder], DenyModel.Builder | DenyModel],
            /,
        ) -> "ForeachModel1.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel.builder())
                if isinstance(output, DenyModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def element_scope(self, value: Optional[bool], /) -> Self:
            """
            ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
            When set to "false", "request.object" is used as the validation scope within the foreach
            block to allow referencing other elements in the subtree.
            """
            return self._set("element_scope", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel1.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel1.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    context: Optional[
        List[
            Union[
                ContextModel29,
                ContextModel30,
                ContextModel31,
                ContextModel32,
                ContextModel33,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    deny: Optional[DenyModel] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    element_scope: Annotated[Optional[bool], Field(alias="elementScope")] = None
    """
    ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
    When set to "false", "request.object" is used as the validation scope within the foreach
    block to allow referencing other elements in the subtree.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class Ctlog(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Ctlog"]:
            return Ctlog

        def build(self) -> "Ctlog":
            return Ctlog(**self._attrs)

        def ignore_sct(self, value: Optional[bool], /) -> Self:
            """
            IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
            timestamp. Default is false. Set to true if this was opted out during signing.
            """
            return self._set("ignore_sct", value)

        def pubkey(self, value: Optional[str], /) -> Self:
            """
            PubKey, if set, is used to validate SCTs against a custom source.
            """
            return self._set("pubkey", value)

        def tsa_cert_chain(self, value: Optional[str], /) -> Self:
            """
            TSACertChain, if set, is the PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must
            contain the root CA certificate. Optionally may contain intermediate CA certificates, and
            may contain the leaf TSA certificate if not present in the timestamurce.
            """
            return self._set("tsa_cert_chain", value)

    class BuilderContext(BuilderContextBase["Ctlog.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Ctlog.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Ctlog."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Ctlog", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Ctlog.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ignore_sct: Annotated[Optional[bool], Field(alias="ignoreSCT")] = None
    """
    IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
    timestamp. Default is false. Set to true if this was opted out during signing.
    """
    pubkey: Optional[str] = None
    """
    PubKey, if set, is used to validate SCTs against a custom source.
    """
    tsa_cert_chain: Annotated[Optional[str], Field(alias="tsaCertChain")] = None
    """
    TSACertChain, if set, is the PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must
    contain the root CA certificate. Optionally may contain intermediate CA certificates, and
    may contain the leaf TSA certificate if not present in the timestamurce.
    """


class Rekor(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Rekor"]:
            return Rekor

        def build(self) -> "Rekor":
            return Rekor(**self._attrs)

        def ignore_tlog(self, value: Optional[bool], /) -> Self:
            """
            IgnoreTlog skips transparency log verification.
            """
            return self._set("ignore_tlog", value)

        def pubkey(self, value: Optional[str], /) -> Self:
            """
            RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
            If set, this will be used to validate transparency log signatures from a custom Rekor.
            """
            return self._set("pubkey", value)

        def url(self, value: Optional[str], /) -> Self:
            """
            URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
            """
            return self._set("url", value)

    class BuilderContext(BuilderContextBase["Rekor.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Rekor.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Rekor."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Rekor", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Rekor.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ignore_tlog: Annotated[Optional[bool], Field(alias="ignoreTlog")] = None
    """
    IgnoreTlog skips transparency log verification.
    """
    pubkey: Optional[str] = None
    """
    RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
    If set, this will be used to validate transparency log signatures from a custom Rekor.
    """
    url: Optional[str] = None
    """
    URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
    """


class Certificates(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Certificates"]:
            return Certificates

        def build(self) -> "Certificates":
            return Certificates(**self._attrs)

        def cert(self, value: Optional[str], /) -> Self:
            """
            Cert is an optional PEM-encoded public certificate.
            """
            return self._set("cert", value)

        def cert_chain(self, value: Optional[str], /) -> Self:
            """
            CertChain is an optional PEM encoded set of certificates used to verify.
            """
            return self._set("cert_chain", value)

        @overload
        def ctlog(self, value_or_callback: Optional[Ctlog], /) -> "Certificates.Builder": ...

        @overload
        def ctlog(
            self, value_or_callback: Callable[[Ctlog.Builder], Ctlog.Builder | Ctlog], /
        ) -> "Certificates.Builder": ...

        @overload
        def ctlog(self, value_or_callback: Never = ...) -> "Ctlog.BuilderContext": ...

        def ctlog(self, value_or_callback=None, /):
            """
            CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
            Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
            """
            if self._in_context and value_or_callback is None:
                context = Ctlog.BuilderContext()
                context._parent_builder = self
                context._field_name = "ctlog"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Ctlog.builder())
                if isinstance(output, Ctlog.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ctlog", value)

        @overload
        def rekor(self, value_or_callback: Optional[Rekor], /) -> "Certificates.Builder": ...

        @overload
        def rekor(
            self, value_or_callback: Callable[[Rekor.Builder], Rekor.Builder | Rekor], /
        ) -> "Certificates.Builder": ...

        @overload
        def rekor(self, value_or_callback: Never = ...) -> "Rekor.BuilderContext": ...

        def rekor(self, value_or_callback=None, /):
            """
            Rekor provides configuration for the Rekor transparency log service. If an empty object
            is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
            """
            if self._in_context and value_or_callback is None:
                context = Rekor.BuilderContext()
                context._parent_builder = self
                context._field_name = "rekor"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rekor.builder())
                if isinstance(output, Rekor.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("rekor", value)

    class BuilderContext(BuilderContextBase["Certificates.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Certificates.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Certificates."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Certificates", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Certificates.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cert: Optional[str] = None
    """
    Cert is an optional PEM-encoded public certificate.
    """
    cert_chain: Annotated[Optional[str], Field(alias="certChain")] = None
    """
    CertChain is an optional PEM encoded set of certificates used to verify.
    """
    ctlog: Optional[Ctlog] = None
    """
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
    """
    rekor: Optional[Rekor] = None
    """
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
    """


class Keyless(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Keyless"]:
            return Keyless

        def build(self) -> "Keyless":
            return Keyless(**self._attrs)

        def additional_extensions(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            AdditionalExtensions are certificate-extensions used for keyless signing.
            """
            return self._set("additional_extensions", value)

        @overload
        def ctlog(self, value_or_callback: Optional[Ctlog], /) -> "Keyless.Builder": ...

        @overload
        def ctlog(
            self, value_or_callback: Callable[[Ctlog.Builder], Ctlog.Builder | Ctlog], /
        ) -> "Keyless.Builder": ...

        @overload
        def ctlog(self, value_or_callback: Never = ...) -> "Ctlog.BuilderContext": ...

        def ctlog(self, value_or_callback=None, /):
            """
            CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
            Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
            """
            if self._in_context and value_or_callback is None:
                context = Ctlog.BuilderContext()
                context._parent_builder = self
                context._field_name = "ctlog"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Ctlog.builder())
                if isinstance(output, Ctlog.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ctlog", value)

        def issuer(self, value: Optional[str], /) -> Self:
            """
            Issuer is the certificate issuer used for keyless signing.
            """
            return self._set("issuer", value)

        def issuer_reg_exp(self, value: Optional[str], /) -> Self:
            """
            IssuerRegExp is the regular expression to match certificate issuer used for keyless signing.
            """
            return self._set("issuer_reg_exp", value)

        @overload
        def rekor(self, value_or_callback: Optional[Rekor], /) -> "Keyless.Builder": ...

        @overload
        def rekor(
            self, value_or_callback: Callable[[Rekor.Builder], Rekor.Builder | Rekor], /
        ) -> "Keyless.Builder": ...

        @overload
        def rekor(self, value_or_callback: Never = ...) -> "Rekor.BuilderContext": ...

        def rekor(self, value_or_callback=None, /):
            """
            Rekor provides configuration for the Rekor transparency log service. If an empty object
            is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
            """
            if self._in_context and value_or_callback is None:
                context = Rekor.BuilderContext()
                context._parent_builder = self
                context._field_name = "rekor"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rekor.builder())
                if isinstance(output, Rekor.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("rekor", value)

        def roots(self, value: Optional[str], /) -> Self:
            """
            Roots is an optional set of PEM encoded trusted root certificates.
            If not provided, the system roots are used.
            """
            return self._set("roots", value)

        def subject(self, value: Optional[str], /) -> Self:
            """
            Subject is the verified identity used for keyless signing, for example the email address.
            """
            return self._set("subject", value)

        def subject_reg_exp(self, value: Optional[str], /) -> Self:
            """
            SubjectRegExp is the regular expression to match identity used for keyless signing, for example the email address.
            """
            return self._set("subject_reg_exp", value)

    class BuilderContext(BuilderContextBase["Keyless.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Keyless.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Keyless."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Keyless", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Keyless.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    additional_extensions: Annotated[
        Optional[Dict[str, str]], Field(alias="additionalExtensions")
    ] = None
    """
    AdditionalExtensions are certificate-extensions used for keyless signing.
    """
    ctlog: Optional[Ctlog] = None
    """
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
    """
    issuer: Optional[str] = None
    """
    Issuer is the certificate issuer used for keyless signing.
    """
    issuer_reg_exp: Annotated[Optional[str], Field(alias="issuerRegExp")] = None
    """
    IssuerRegExp is the regular expression to match certificate issuer used for keyless signing.
    """
    rekor: Optional[Rekor] = None
    """
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
    """
    roots: Optional[str] = None
    """
    Roots is an optional set of PEM encoded trusted root certificates.
    If not provided, the system roots are used.
    """
    subject: Optional[str] = None
    """
    Subject is the verified identity used for keyless signing, for example the email address.
    """
    subject_reg_exp: Annotated[Optional[str], Field(alias="subjectRegExp")] = None
    """
    SubjectRegExp is the regular expression to match identity used for keyless signing, for example the email address.
    """


class Secret(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Secret"]:
            return Secret

        def build(self) -> "Secret":
            return Secret(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the secret. The provided secret must contain a key named cosign.pub.
            """
            return self._set("name", value)

        def namespace(self, value: str, /) -> Self:
            """
            Namespace name where the Secret exists.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["Secret.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Secret.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Secret."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Secret", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Secret.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the secret. The provided secret must contain a key named cosign.pub.
    """
    namespace: str
    """
    Namespace name where the Secret exists.
    """


class Keys(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Keys"]:
            return Keys

        def build(self) -> "Keys":
            return Keys(**self._attrs)

        @overload
        def ctlog(self, value_or_callback: Optional[Ctlog], /) -> "Keys.Builder": ...

        @overload
        def ctlog(
            self, value_or_callback: Callable[[Ctlog.Builder], Ctlog.Builder | Ctlog], /
        ) -> "Keys.Builder": ...

        @overload
        def ctlog(self, value_or_callback: Never = ...) -> "Ctlog.BuilderContext": ...

        def ctlog(self, value_or_callback=None, /):
            """
            CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
            Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
            """
            if self._in_context and value_or_callback is None:
                context = Ctlog.BuilderContext()
                context._parent_builder = self
                context._field_name = "ctlog"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Ctlog.builder())
                if isinstance(output, Ctlog.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ctlog", value)

        def kms(self, value: Optional[str], /) -> Self:
            """
            KMS provides the URI to the public key stored in a Key Management System. See:
            https://github.com/sigstore/cosign/blob/main/KMS.md
            """
            return self._set("kms", value)

        def public_keys(self, value: Optional[str], /) -> Self:
            """
            Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
            specified or can be a variable reference to a key specified in a ConfigMap (see
            https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
            elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
            The named Secret must specify a key `cosign.pub` containing the public key used for
            verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
            When multiple keys are specified each key is processed as a separate staticKey entry
            (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
            """
            return self._set("public_keys", value)

        @overload
        def rekor(self, value_or_callback: Optional[Rekor], /) -> "Keys.Builder": ...

        @overload
        def rekor(
            self, value_or_callback: Callable[[Rekor.Builder], Rekor.Builder | Rekor], /
        ) -> "Keys.Builder": ...

        @overload
        def rekor(self, value_or_callback: Never = ...) -> "Rekor.BuilderContext": ...

        def rekor(self, value_or_callback=None, /):
            """
            Rekor provides configuration for the Rekor transparency log service. If an empty object
            is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
            """
            if self._in_context and value_or_callback is None:
                context = Rekor.BuilderContext()
                context._parent_builder = self
                context._field_name = "rekor"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rekor.builder())
                if isinstance(output, Rekor.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("rekor", value)

        @overload
        def secret(self, value_or_callback: Optional[Secret], /) -> "Keys.Builder": ...

        @overload
        def secret(
            self,
            value_or_callback: Callable[[Secret.Builder], Secret.Builder | Secret],
            /,
        ) -> "Keys.Builder": ...

        @overload
        def secret(self, value_or_callback: Never = ...) -> "Secret.BuilderContext": ...

        def secret(self, value_or_callback=None, /):
            """
            Reference to a Secret resource that contains a public key
            """
            if self._in_context and value_or_callback is None:
                context = Secret.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Secret.builder())
                if isinstance(output, Secret.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret", value)

        def signature_algorithm(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use attestor.signatureAlgorithm instead.
            """
            return self._set("signature_algorithm", value)

    class BuilderContext(BuilderContextBase["Keys.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Keys.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Keys."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Keys", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Keys.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ctlog: Optional[Ctlog] = None
    """
    CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
    Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
    """
    kms: Optional[str] = None
    """
    KMS provides the URI to the public key stored in a Key Management System. See:
    https://github.com/sigstore/cosign/blob/main/KMS.md
    """
    public_keys: Annotated[Optional[str], Field(alias="publicKeys")] = None
    """
    Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
    specified or can be a variable reference to a key specified in a ConfigMap (see
    https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
    elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
    The named Secret must specify a key `cosign.pub` containing the public key used for
    verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
    When multiple keys are specified each key is processed as a separate staticKey entry
    (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
    """
    rekor: Optional[Rekor] = None
    """
    Rekor provides configuration for the Rekor transparency log service. If an empty object
    is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
    """
    secret: Optional[Secret] = None
    """
    Reference to a Secret resource that contains a public key
    """
    signature_algorithm: Annotated[Optional[str], Field(alias="signatureAlgorithm")] = "sha256"
    """
    Deprecated. Use attestor.signatureAlgorithm instead.
    """


class Entry(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Entry"]:
            return Entry

        def build(self) -> "Entry":
            return Entry(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations are used for image verification.
            Every specified key-value pair must exist and match in the verified payload.
            The payload may contain other key-value pairs.
            """
            return self._set("annotations", value)

        def attestor(self, value: Optional[Any], /) -> Self:
            """
            Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
            """
            return self._set("attestor", value)

        @overload
        def certificates(self, value_or_callback: Optional[Certificates], /) -> "Entry.Builder": ...

        @overload
        def certificates(
            self,
            value_or_callback: Callable[
                [Certificates.Builder], Certificates.Builder | Certificates
            ],
            /,
        ) -> "Entry.Builder": ...

        @overload
        def certificates(self, value_or_callback: Never = ...) -> "Certificates.BuilderContext": ...

        def certificates(self, value_or_callback=None, /):
            """
            Certificates specifies one or more certificates.
            """
            if self._in_context and value_or_callback is None:
                context = Certificates.BuilderContext()
                context._parent_builder = self
                context._field_name = "certificates"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Certificates.builder())
                if isinstance(output, Certificates.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("certificates", value)

        @overload
        def keyless(self, value_or_callback: Optional[Keyless], /) -> "Entry.Builder": ...

        @overload
        def keyless(
            self,
            value_or_callback: Callable[[Keyless.Builder], Keyless.Builder | Keyless],
            /,
        ) -> "Entry.Builder": ...

        @overload
        def keyless(self, value_or_callback: Never = ...) -> "Keyless.BuilderContext": ...

        def keyless(self, value_or_callback=None, /):
            """
            Keyless is a set of attribute used to verify a Sigstore keyless attestor.
            See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.
            """
            if self._in_context and value_or_callback is None:
                context = Keyless.BuilderContext()
                context._parent_builder = self
                context._field_name = "keyless"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Keyless.builder())
                if isinstance(output, Keyless.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("keyless", value)

        @overload
        def keys(self, value_or_callback: Optional[Keys], /) -> "Entry.Builder": ...

        @overload
        def keys(
            self, value_or_callback: Callable[[Keys.Builder], Keys.Builder | Keys], /
        ) -> "Entry.Builder": ...

        @overload
        def keys(self, value_or_callback: Never = ...) -> "Keys.BuilderContext": ...

        def keys(self, value_or_callback=None, /):
            """
            Keys specifies one or more public keys.
            """
            if self._in_context and value_or_callback is None:
                context = Keys.BuilderContext()
                context._parent_builder = self
                context._field_name = "keys"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Keys.builder())
                if isinstance(output, Keys.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("keys", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
            If specified Repository will override other OCI image repository locations for this Attestor.
            """
            return self._set("repository", value)

        def signature_algorithm(self, value: Optional[str], /) -> Self:
            """
            Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
            """
            return self._set("signature_algorithm", value)

    class BuilderContext(BuilderContextBase["Entry.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Entry.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Entry."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Entry", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Entry.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are used for image verification.
    Every specified key-value pair must exist and match in the verified payload.
    The payload may contain other key-value pairs.
    """
    attestor: Optional[Any] = None
    """
    Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
    """
    certificates: Optional[Certificates] = None
    """
    Certificates specifies one or more certificates.
    """
    keyless: Optional[Keyless] = None
    """
    Keyless is a set of attribute used to verify a Sigstore keyless attestor.
    See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.
    """
    keys: Optional[Keys] = None
    """
    Keys specifies one or more public keys.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
    If specified Repository will override other OCI image repository locations for this Attestor.
    """
    signature_algorithm: Annotated[Optional[str], Field(alias="signatureAlgorithm")] = "sha256"
    """
    Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
    """


class Attestor(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Attestor"]:
            return Attestor

        def build(self) -> "Attestor":
            return Attestor(**self._attrs)

        def count(self, value: Optional[int], /) -> Self:
            """
            Count specifies the required number of entries that must match. If the count is null, all entries must match
            (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
            value N, then N must be less than or equal to the size of entries, and at least N entries must match.
            """
            return self._set("count", value)

        @overload
        def entries(self, value_or_callback: List[Entry], /) -> "Attestor.Builder": ...

        @overload
        def entries(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Entry, Entry.Builder]],
                GenericListBuilder[Entry, Entry.Builder] | List[Entry],
            ],
            /,
        ) -> "Attestor.Builder": ...

        @overload
        def entries(self, value_or_callback: Never = ...) -> ListBuilderContext[Entry.Builder]: ...

        def entries(self, value_or_callback=None, /):
            """
            Entries contains the available attestors. An attestor can be a static key,
            attributes for keyless verification, or a nested attestor declaration.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Entry.Builder]()
                context._parent_builder = self
                context._field_name = "entries"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Entry.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("entries", value)

    class BuilderContext(BuilderContextBase["Attestor.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Attestor.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Attestor."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Attestor", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Attestor.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    count: Annotated[Optional[int], Field(ge=1)] = None
    """
    Count specifies the required number of entries that must match. If the count is null, all entries must match
    (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
    value N, then N must be less than or equal to the size of entries, and at least N entries must match.
    """
    entries: Optional[List[Entry]] = None
    """
    Entries contains the available attestors. An attestor can be a static key,
    attributes for keyless verification, or a nested attestor declaration.
    """


class DryRun(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DryRun"]:
            return DryRun

        def build(self) -> "DryRun":
            return DryRun(**self._attrs)

        def enable(self, value: Optional[bool], /) -> Self:
            return self._set("enable", value)

        def namespace(self, value: Optional[str], /) -> Self:
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["DryRun.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DryRun.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DryRun."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DryRun", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DryRun.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    enable: Optional[bool] = None
    namespace: Optional[str] = None


class Object(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Object"]:
            return Object

        def build(self) -> "Object":
            return Object(**self._attrs)

        def group(self, value: Optional[str], /) -> Self:
            return self._set("group", value)

        def kind(self, value: Optional[str], /) -> Self:
            return self._set("kind", value)

        def name(self, value: Optional[str], /) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            return self._set("namespace", value)

        def version(self, value: Optional[str], /) -> Self:
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["Object.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Object.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Object."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Object", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Object.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    version: Optional[str] = None


class IgnoreField(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IgnoreField"]:
            return IgnoreField

        def build(self) -> "IgnoreField":
            return IgnoreField(**self._attrs)

        def fields(self, value: Optional[List[str]], /) -> Self:
            return self._set("fields", value)

        @overload
        def objects(self, value_or_callback: List[Object], /) -> "IgnoreField.Builder": ...

        @overload
        def objects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Object, Object.Builder]],
                GenericListBuilder[Object, Object.Builder] | List[Object],
            ],
            /,
        ) -> "IgnoreField.Builder": ...

        @overload
        def objects(self, value_or_callback: Never = ...) -> ListBuilderContext[Object.Builder]: ...

        def objects(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Object.Builder]()
                context._parent_builder = self
                context._field_name = "objects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Object.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("objects", value)

    class BuilderContext(BuilderContextBase["IgnoreField.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IgnoreField.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IgnoreField."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IgnoreField", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IgnoreField.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    fields: Optional[List[str]] = None
    objects: Optional[List[Object]] = None


class Manifests(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Manifests"]:
            return Manifests

        def build(self) -> "Manifests":
            return Manifests(**self._attrs)

        def annotation_domain(self, value: Optional[str], /) -> Self:
            """
            AnnotationDomain is custom domain of annotation for message and signature. Default is "cosign.sigstore.dev".
            """
            return self._set("annotation_domain", value)

        @overload
        def attestors(self, value_or_callback: List[Attestor], /) -> "Manifests.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "Manifests.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specified the required attestors (i.e. authorities)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        @overload
        def dry_run(self, value_or_callback: Optional[DryRun], /) -> "Manifests.Builder": ...

        @overload
        def dry_run(
            self,
            value_or_callback: Callable[[DryRun.Builder], DryRun.Builder | DryRun],
            /,
        ) -> "Manifests.Builder": ...

        @overload
        def dry_run(self, value_or_callback: Never = ...) -> "DryRun.BuilderContext": ...

        def dry_run(self, value_or_callback=None, /):
            """
            DryRun configuration
            """
            if self._in_context and value_or_callback is None:
                context = DryRun.BuilderContext()
                context._parent_builder = self
                context._field_name = "dry_run"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DryRun.builder())
                if isinstance(output, DryRun.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("dry_run", value)

        @overload
        def ignore_fields(self, value_or_callback: List[IgnoreField], /) -> "Manifests.Builder": ...

        @overload
        def ignore_fields(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[IgnoreField, IgnoreField.Builder]],
                GenericListBuilder[IgnoreField, IgnoreField.Builder] | List[IgnoreField],
            ],
            /,
        ) -> "Manifests.Builder": ...

        @overload
        def ignore_fields(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[IgnoreField.Builder]: ...

        def ignore_fields(self, value_or_callback=None, /):
            """
            Fields which will be ignored while comparing manifests.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[IgnoreField.Builder]()
                context._parent_builder = self
                context._field_name = "ignore_fields"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IgnoreField.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("ignore_fields", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for resource bundle reference.
            The repository can be overridden per Attestor or Attestation.
            """
            return self._set("repository", value)

    class BuilderContext(BuilderContextBase["Manifests.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Manifests.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Manifests."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Manifests", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Manifests.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotation_domain: Annotated[Optional[str], Field(alias="annotationDomain")] = None
    """
    AnnotationDomain is custom domain of annotation for message and signature. Default is "cosign.sigstore.dev".
    """
    attestors: Optional[List[Attestor]] = None
    """
    Attestors specified the required attestors (i.e. authorities)
    """
    dry_run: Annotated[Optional[DryRun], Field(alias="dryRun")] = None
    """
    DryRun configuration
    """
    ignore_fields: Annotated[Optional[List[IgnoreField]], Field(alias="ignoreFields")] = None
    """
    Fields which will be ignored while comparing manifests.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for resource bundle reference.
    The repository can be overridden per Attestor or Attestation.
    """


class ExcludeModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel"]:
            return ExcludeModel

        def build(self) -> "ExcludeModel":
            return ExcludeModel(**self._attrs)

        def control_name(
            self,
            value: Literal[
                "HostProcess",
                "Host Namespaces",
                "Privileged Containers",
                "Capabilities",
                "HostPath Volumes",
                "Host Ports",
                "AppArmor",
                "SELinux",
                "/proc Mount Type",
                "Seccomp",
                "Sysctls",
                "Volume Types",
                "Privilege Escalation",
                "Running as Non-root",
                "Running as Non-root user",
            ],
            /,
        ) -> Self:
            """
            ControlName specifies the name of the Pod Security Standard control.
            See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
            """
            return self._set("control_name", value)

        def images(self, value: Optional[List[str]], /) -> Self:
            """
            Images selects matching containers and applies the container level PSS.
            Each image is the image name consisting of the registry address, repository, image, and tag.
            Empty list matches no containers, PSS checks are applied at the pod level only.
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("images", value)

        def restricted_field(self, value: Optional[str], /) -> Self:
            """
            RestrictedField selects the field for the given Pod Security Standard control.
            When not set, all restricted fields for the control are selected.
            """
            return self._set("restricted_field", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            Values defines the allowed values that can be excluded.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["ExcludeModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(alias="controlName"),
    ]
    """
    ControlName specifies the name of the Pod Security Standard control.
    See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    """
    images: Optional[List[str]] = None
    """
    Images selects matching containers and applies the container level PSS.
    Each image is the image name consisting of the registry address, repository, image, and tag.
    Empty list matches no containers, PSS checks are applied at the pod level only.
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    restricted_field: Annotated[Optional[str], Field(alias="restrictedField")] = None
    """
    RestrictedField selects the field for the given Pod Security Standard control.
    When not set, all restricted fields for the control are selected.
    """
    values: Optional[List[str]] = None
    """
    Values defines the allowed values that can be excluded.
    """


class PodSecurity(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PodSecurity"]:
            return PodSecurity

        def build(self) -> "PodSecurity":
            return PodSecurity(**self._attrs)

        @overload
        def exclude(self, value_or_callback: List[ExcludeModel], /) -> "PodSecurity.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ExcludeModel, ExcludeModel.Builder]],
                GenericListBuilder[ExcludeModel, ExcludeModel.Builder] | List[ExcludeModel],
            ],
            /,
        ) -> "PodSecurity.Builder": ...

        @overload
        def exclude(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ExcludeModel.Builder]: ...

        def exclude(self, value_or_callback=None, /):
            """
            Exclude specifies the Pod Security Standard controls to be excluded.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ExcludeModel.Builder]()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ExcludeModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        def level(
            self, value: Optional[Literal["privileged", "baseline", "restricted"]], /
        ) -> Self:
            """
            Level defines the Pod Security Standard level to be applied to workloads.
            Allowed values are privileged, baseline, and restricted.
            """
            return self._set("level", value)

        def version(
            self,
            value: Optional[
                Literal[
                    "v1.19",
                    "v1.20",
                    "v1.21",
                    "v1.22",
                    "v1.23",
                    "v1.24",
                    "v1.25",
                    "v1.26",
                    "v1.27",
                    "v1.28",
                    "v1.29",
                    "latest",
                ]
            ],
            /,
        ) -> Self:
            """
            Version defines the Pod Security Standard versions that Kubernetes supports.
            Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, v1.27, v1.28, v1.29, latest. Defaults to latest.
            """
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["PodSecurity.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PodSecurity.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PodSecurity."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PodSecurity", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PodSecurity.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    exclude: Optional[List[ExcludeModel]] = None
    """
    Exclude specifies the Pod Security Standard controls to be excluded.
    """
    level: Optional[Literal["privileged", "baseline", "restricted"]] = None
    """
    Level defines the Pod Security Standard level to be applied to workloads.
    Allowed values are privileged, baseline, and restricted.
    """
    version: Optional[
        Literal[
            "v1.19",
            "v1.20",
            "v1.21",
            "v1.22",
            "v1.23",
            "v1.24",
            "v1.25",
            "v1.26",
            "v1.27",
            "v1.28",
            "v1.29",
            "latest",
        ]
    ] = None
    """
    Version defines the Pod Security Standard versions that Kubernetes supports.
    Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, v1.27, v1.28, v1.29, latest. Defaults to latest.
    """


class Validate(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Validate"]:
            return Validate

        def build(self) -> "Validate":
            return Validate(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def assert_(self, value: Optional[Dict[str, Any]], /) -> Self:
            """
            Assert defines a kyverno-json assertion tree.
            """
            return self._set("assert_", value)

        @overload
        def cel(self, value_or_callback: Optional[Cel], /) -> "Validate.Builder": ...

        @overload
        def cel(
            self, value_or_callback: Callable[[Cel.Builder], Cel.Builder | Cel], /
        ) -> "Validate.Builder": ...

        @overload
        def cel(self, value_or_callback: Never = ...) -> "Cel.BuilderContext": ...

        def cel(self, value_or_callback=None, /):
            """
            CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
            """
            if self._in_context and value_or_callback is None:
                context = Cel.BuilderContext()
                context._parent_builder = self
                context._field_name = "cel"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Cel.builder())
                if isinstance(output, Cel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel", value)

        @overload
        def deny(self, value_or_callback: Optional[Deny], /) -> "Validate.Builder": ...

        @overload
        def deny(
            self, value_or_callback: Callable[[Deny.Builder], Deny.Builder | Deny], /
        ) -> "Validate.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "Deny.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = Deny.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Deny.builder())
                if isinstance(output, Deny.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            FailureAction defines if a validation policy rule violation should block
            the admission review request (Enforce), or allow (Audit) the admission review request
            and report an error in a policy report. Optional.
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        @overload
        def failure_action_overrides(
            self, value_or_callback: List[FailureActionOverride], /
        ) -> "Validate.Builder": ...

        @overload
        def failure_action_overrides(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]],
                GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]
                | List[FailureActionOverride],
            ],
            /,
        ) -> "Validate.Builder": ...

        @overload
        def failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[FailureActionOverride.Builder]: ...

        def failure_action_overrides(self, value_or_callback=None, /):
            """
            FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
            namespace-wise. It overrides FailureAction for the specified namespaces.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[FailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(FailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("failure_action_overrides", value)

        @overload
        def foreach(self, value_or_callback: List[ForeachModel1], /) -> "Validate.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ForeachModel1, ForeachModel1.Builder]],
                GenericListBuilder[ForeachModel1, ForeachModel1.Builder] | List[ForeachModel1],
            ],
            /,
        ) -> "Validate.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ForeachModel1.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ForeachModel1.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForeachModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        @overload
        def manifests(self, value_or_callback: Optional[Manifests], /) -> "Validate.Builder": ...

        @overload
        def manifests(
            self,
            value_or_callback: Callable[[Manifests.Builder], Manifests.Builder | Manifests],
            /,
        ) -> "Validate.Builder": ...

        @overload
        def manifests(self, value_or_callback: Never = ...) -> "Manifests.BuilderContext": ...

        def manifests(self, value_or_callback=None, /):
            """
            Manifest specifies conditions for manifest verification
            """
            if self._in_context and value_or_callback is None:
                context = Manifests.BuilderContext()
                context._parent_builder = self
                context._field_name = "manifests"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Manifests.builder())
                if isinstance(output, Manifests.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("manifests", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def pod_security(
            self, value_or_callback: Optional[PodSecurity], /
        ) -> "Validate.Builder": ...

        @overload
        def pod_security(
            self,
            value_or_callback: Callable[[PodSecurity.Builder], PodSecurity.Builder | PodSecurity],
            /,
        ) -> "Validate.Builder": ...

        @overload
        def pod_security(self, value_or_callback: Never = ...) -> "PodSecurity.BuilderContext": ...

        def pod_security(self, value_or_callback=None, /):
            """
            PodSecurity applies exemptions for Kubernetes Pod Security admission
            by specifying exclusions for Pod Security Standards controls.
            """
            if self._in_context and value_or_callback is None:
                context = PodSecurity.BuilderContext()
                context._parent_builder = self
                context._field_name = "pod_security"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PodSecurity.builder())
                if isinstance(output, PodSecurity.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("pod_security", value)

    class BuilderContext(BuilderContextBase["Validate.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Validate.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Validate."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Validate", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Validate.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    assert_: Annotated[Optional[Dict[str, Any]], Field(alias="assert")] = None
    """
    Assert defines a kyverno-json assertion tree.
    """
    cel: Optional[Cel] = None
    """
    CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
    """
    deny: Optional[Deny] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    FailureAction defines if a validation policy rule violation should block
    the admission review request (Enforce), or allow (Audit) the admission review request
    and report an error in a policy report. Optional.
    Allowed values are Audit or Enforce.
    """
    failure_action_overrides: Annotated[
        Optional[List[FailureActionOverride]], Field(alias="failureActionOverrides")
    ] = None
    """
    FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
    namespace-wise. It overrides FailureAction for the specified namespaces.
    """
    foreach: Optional[List[ForeachModel1]] = None
    """
    ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    manifests: Optional[Manifests] = None
    """
    Manifest specifies conditions for manifest verification
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    pod_security: Annotated[Optional[PodSecurity], Field(alias="podSecurity")] = None
    """
    PodSecurity applies exemptions for Kubernetes Pod Security admission
    by specifying exclusions for Pod Security Standards controls.
    """


class ConditionModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConditionModel"]:
            return ConditionModel

        def build(self) -> "ConditionModel":
            return ConditionModel(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel7], /) -> "ConditionModel.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel7, AllModel7.Builder]],
                GenericListBuilder[AllModel7, AllModel7.Builder] | List[AllModel7],
            ],
            /,
        ) -> "ConditionModel.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel7.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel7.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel7.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel8], /) -> "ConditionModel.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel8, AnyModel8.Builder]],
                GenericListBuilder[AnyModel8, AnyModel8.Builder] | List[AnyModel8],
            ],
            /,
        ) -> "ConditionModel.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel8.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel8.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel8.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["ConditionModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConditionModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConditionModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConditionModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConditionModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel7]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass
    """
    any: Optional[List[AnyModel8]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass
    """


class Attestation(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Attestation"]:
            return Attestation

        def build(self) -> "Attestation":
            return Attestation(**self._attrs)

        @overload
        def attestors(self, value_or_callback: List[Attestor], /) -> "Attestation.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "Attestation.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specify the required attestors (i.e. authorities).
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        @overload
        def conditions(
            self, value_or_callback: List[ConditionModel], /
        ) -> "Attestation.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ConditionModel, ConditionModel.Builder]],
                GenericListBuilder[ConditionModel, ConditionModel.Builder] | List[ConditionModel],
            ],
            /,
        ) -> "Attestation.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ConditionModel.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions are used to verify attributes within a Predicate. If no Conditions are specified
            the attestation check is satisfied as long there are predicates that match the predicate type.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ConditionModel.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConditionModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        def predicate_type(self, value: Optional[str], /) -> Self:
            """
            Deprecated in favour of 'Type', to be removed soon
            """
            return self._set("predicate_type", value)

        def type(self, value: Optional[str], /) -> Self:
            """
            Type defines the type of attestation contained within the Statement.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Attestation.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Attestation.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Attestation."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Attestation", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Attestation.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    attestors: Optional[List[Attestor]] = None
    """
    Attestors specify the required attestors (i.e. authorities).
    """
    conditions: Optional[List[ConditionModel]] = None
    """
    Conditions are used to verify attributes within a Predicate. If no Conditions are specified
    the attestation check is satisfied as long there are predicates that match the predicate type.
    """
    name: Optional[str] = None
    """
    Name is the variable name.
    """
    predicate_type: Annotated[Optional[str], Field(alias="predicateType")] = None
    """
    Deprecated in favour of 'Type', to be removed soon
    """
    type: Optional[str] = None
    """
    Type defines the type of attestation contained within the Statement.
    """


class ValidateModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel"]:
            return ValidateModel

        def build(self) -> "ValidateModel":
            return ValidateModel(**self._attrs)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel], /) -> "ValidateModel.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel.Builder], DenyModel.Builder | DenyModel],
            /,
        ) -> "ValidateModel.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel.builder())
                if isinstance(output, DenyModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

    class BuilderContext(BuilderContextBase["ValidateModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deny: Optional[DenyModel] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """


class VerifyImage(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VerifyImage"]:
            return VerifyImage

        def build(self) -> "VerifyImage":
            return VerifyImage(**self._attrs)

        @overload
        def attestations(
            self, value_or_callback: List[Attestation], /
        ) -> "VerifyImage.Builder": ...

        @overload
        def attestations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestation, Attestation.Builder]],
                GenericListBuilder[Attestation, Attestation.Builder] | List[Attestation],
            ],
            /,
        ) -> "VerifyImage.Builder": ...

        @overload
        def attestations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestation.Builder]: ...

        def attestations(self, value_or_callback=None, /):
            """
            Attestations are optional checks for signed in-toto Statements used to verify the image.
            See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
            OCI registry and decodes them into a list of Statement declarations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestation.Builder]()
                context._parent_builder = self
                context._field_name = "attestations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestations", value)

        @overload
        def attestors(self, value_or_callback: List[Attestor], /) -> "VerifyImage.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "VerifyImage.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specified the required attestors (i.e. authorities)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        def image_references(self, value: Optional[List[str]], /) -> Self:
            """
            ImageReferences is a list of matching image reference patterns. At least one pattern in the
            list must match the image for the rule to apply. Each image reference consists of a registry
            address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("image_references", value)

        @overload
        def image_registry_credentials(
            self, value_or_callback: Optional[ImageRegistryCredentials], /
        ) -> "VerifyImage.Builder": ...

        @overload
        def image_registry_credentials(
            self,
            value_or_callback: Callable[
                [ImageRegistryCredentials.Builder],
                ImageRegistryCredentials.Builder | ImageRegistryCredentials,
            ],
            /,
        ) -> "VerifyImage.Builder": ...

        @overload
        def image_registry_credentials(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistryCredentials.BuilderContext": ...

        def image_registry_credentials(self, value_or_callback=None, /):
            """
            ImageRegistryCredentials provides credentials that will be used for authentication with registry
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistryCredentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry_credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistryCredentials.builder())
                if isinstance(output, ImageRegistryCredentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry_credentials", value)

        def mutate_digest(self, value: Optional[bool], /) -> Self:
            """
            MutateDigest enables replacement of image tags with digests.
            Defaults to true.
            """
            return self._set("mutate_digest", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
            If specified Repository will override the default OCI image repository configured for the installation.
            The repository can also be overridden per Attestor or Attestation.
            """
            return self._set("repository", value)

        def required(self, value: Optional[bool], /) -> Self:
            """
            Required validates that images are verified i.e. have matched passed a signature or attestation check.
            """
            return self._set("required", value)

        def skip_image_references(self, value: Optional[List[str]], /) -> Self:
            """
            SkipImageReferences is a list of matching image reference patterns that should be skipped.
            At least one pattern in the list must match the image for the rule to be skipped. Each image reference
            consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("skip_image_references", value)

        def type(self, value: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]], /) -> Self:
            """
            Type specifies the method of signature validation. The allowed options
            are Cosign and Notary. By default Cosign is used if a type is not specified.
            """
            return self._set("type", value)

        def use_cache(self, value: Optional[bool], /) -> Self:
            """
            UseCache enables caching of image verify responses for this rule
            """
            return self._set("use_cache", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel], /
        ) -> "VerifyImage.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel.Builder], ValidateModel.Builder | ValidateModel
            ],
            /,
        ) -> "VerifyImage.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation checks conditions across multiple image
            verification attestations or context entries
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel.builder())
                if isinstance(output, ValidateModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        def verify_digest(self, value: Optional[bool], /) -> Self:
            """
            VerifyDigest validates that images have a digest.
            """
            return self._set("verify_digest", value)

    class BuilderContext(BuilderContextBase["VerifyImage.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VerifyImage.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VerifyImage."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VerifyImage", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VerifyImage.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    attestations: Optional[List[Attestation]] = None
    """
    Attestations are optional checks for signed in-toto Statements used to verify the image.
    See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
    OCI registry and decodes them into a list of Statement declarations.
    """
    attestors: Optional[List[Attestor]] = None
    """
    Attestors specified the required attestors (i.e. authorities)
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    Allowed values are Audit or Enforce.
    """
    image_references: Annotated[Optional[List[str]], Field(alias="imageReferences")] = None
    """
    ImageReferences is a list of matching image reference patterns. At least one pattern in the
    list must match the image for the rule to apply. Each image reference consists of a registry
    address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials], Field(alias="imageRegistryCredentials")
    ] = None
    """
    ImageRegistryCredentials provides credentials that will be used for authentication with registry
    """
    mutate_digest: Annotated[Optional[bool], Field(alias="mutateDigest")] = True
    """
    MutateDigest enables replacement of image tags with digests.
    Defaults to true.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
    If specified Repository will override the default OCI image repository configured for the installation.
    The repository can also be overridden per Attestor or Attestation.
    """
    required: Optional[bool] = True
    """
    Required validates that images are verified i.e. have matched passed a signature or attestation check.
    """
    skip_image_references: Annotated[Optional[List[str]], Field(alias="skipImageReferences")] = None
    """
    SkipImageReferences is a list of matching image reference patterns that should be skipped.
    At least one pattern in the list must match the image for the rule to be skipped. Each image reference
    consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    type: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]] = None
    """
    Type specifies the method of signature validation. The allowed options
    are Cosign and Notary. By default Cosign is used if a type is not specified.
    """
    use_cache: Annotated[Optional[bool], Field(alias="useCache")] = True
    """
    UseCache enables caching of image verify responses for this rule
    """
    validate_: Annotated[Optional[ValidateModel], Field(alias="validate")] = None
    """
    Validation checks conditions across multiple image
    verification attestations or context entries
    """
    verify_digest: Annotated[Optional[bool], Field(alias="verifyDigest")] = True
    """
    VerifyDigest validates that images have a digest.
    """


class Rule(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Rule"]:
            return Rule

        def build(self) -> "Rule":
            return Rule(**self._attrs)

        @overload
        def cel_preconditions(
            self, value_or_callback: List[CelPrecondition], /
        ) -> "Rule.Builder": ...

        @overload
        def cel_preconditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[CelPrecondition, CelPrecondition.Builder]],
                GenericListBuilder[CelPrecondition, CelPrecondition.Builder]
                | List[CelPrecondition],
            ],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def cel_preconditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[CelPrecondition.Builder]: ...

        def cel_preconditions(self, value_or_callback=None, /):
            """
            CELPreconditions are used to determine if a policy rule should be applied by evaluating a
            set of CEL conditions. It can only be used with the validate.cel subrule
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[CelPrecondition.Builder]()
                context._parent_builder = self
                context._field_name = "cel_preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CelPrecondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel_preconditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel9,
                        ContextModel10,
                        ContextModel11,
                        ContextModel12,
                        ContextModel13,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(self, value_or_callback: Optional[Exclude], /) -> "Rule.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[[Exclude.Builder], Exclude.Builder | Exclude],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "Exclude.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when this policy rule should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = Exclude.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Exclude.builder())
                if isinstance(output, Exclude.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def generate(self, value_or_callback: Optional[Generate], /) -> "Rule.Builder": ...

        @overload
        def generate(
            self,
            value_or_callback: Callable[[Generate.Builder], Generate.Builder | Generate],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def generate(self, value_or_callback: Never = ...) -> "Generate.BuilderContext": ...

        def generate(self, value_or_callback=None, /):
            """
            Generation is used to create new resources.
            """
            if self._in_context and value_or_callback is None:
                context = Generate.BuilderContext()
                context._parent_builder = self
                context._field_name = "generate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Generate.builder())
                if isinstance(output, Generate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("generate", value)

        def image_extractors(self, value: Optional[Dict[str, List[ImageExtractor]]], /) -> Self:
            """
            ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
            This config is only valid for verifyImages rules.
            """
            return self._set("image_extractors", value)

        @overload
        def match(self, value_or_callback: Match, /) -> "Rule.Builder": ...

        @overload
        def match(
            self, value_or_callback: Callable[[Match.Builder], Match.Builder | Match], /
        ) -> "Rule.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "Match.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when this policy rule should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = Match.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Match.builder())
                if isinstance(output, Match.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        @overload
        def mutate(self, value_or_callback: Optional[Mutate], /) -> "Rule.Builder": ...

        @overload
        def mutate(
            self,
            value_or_callback: Callable[[Mutate.Builder], Mutate.Builder | Mutate],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def mutate(self, value_or_callback: Never = ...) -> "Mutate.BuilderContext": ...

        def mutate(self, value_or_callback=None, /):
            """
            Mutation is used to modify matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = Mutate.BuilderContext()
                context._parent_builder = self
                context._field_name = "mutate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Mutate.builder())
                if isinstance(output, Mutate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("mutate", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a label to identify the rule, It must be unique within the policy.
            """
            return self._set("name", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel], /
        ) -> "Rule.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel.Builder],
                PreconditionsModel.Builder | PreconditionsModel,
            ],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            Preconditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel.builder())
                if isinstance(output, PreconditionsModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def skip_background_requests(self, value: Optional[bool], /) -> Self:
            """
            SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
            The default value is set to "true", it must be set to "false" to apply
            generate and mutateExisting rules to those requests.
            """
            return self._set("skip_background_requests", value)

        @overload
        def validate_(self, value_or_callback: Optional[Validate], /) -> "Rule.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[[Validate.Builder], Validate.Builder | Validate],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "Validate.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation is used to validate matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = Validate.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Validate.builder())
                if isinstance(output, Validate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        @overload
        def verify_images(self, value_or_callback: List[VerifyImage], /) -> "Rule.Builder": ...

        @overload
        def verify_images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[VerifyImage, VerifyImage.Builder]],
                GenericListBuilder[VerifyImage, VerifyImage.Builder] | List[VerifyImage],
            ],
            /,
        ) -> "Rule.Builder": ...

        @overload
        def verify_images(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[VerifyImage.Builder]: ...

        def verify_images(self, value_or_callback=None, /):
            """
            VerifyImages is used to verify image signatures and mutate them to add a digest
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[VerifyImage.Builder]()
                context._parent_builder = self
                context._field_name = "verify_images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VerifyImage.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("verify_images", value)

    class BuilderContext(BuilderContextBase["Rule.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Rule.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Rule."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Rule", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Rule.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]], Field(alias="celPreconditions")
    ] = None
    """
    CELPreconditions are used to determine if a policy rule should be applied by evaluating a
    set of CEL conditions. It can only be used with the validate.cel subrule
    """
    context: Optional[
        List[
            Union[
                ContextModel9,
                ContextModel10,
                ContextModel11,
                ContextModel12,
                ContextModel13,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[Exclude] = None
    """
    ExcludeResources defines when this policy rule should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    generate: Optional[Generate] = None
    """
    Generation is used to create new resources.
    """
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]], Field(alias="imageExtractors")
    ] = None
    """
    ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
    This config is only valid for verifyImages rules.
    """
    match: Match
    """
    MatchResources defines when this policy rule should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    mutate: Optional[Mutate] = None
    """
    Mutation is used to modify matching resources.
    """
    name: Annotated[str, Field(max_length=63)]
    """
    Name is a label to identify the rule, It must be unique within the policy.
    """
    preconditions: Optional[PreconditionsModel] = None
    """
    Preconditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    skip_background_requests: Annotated[Optional[bool], Field(alias="skipBackgroundRequests")] = (
        True
    )
    """
    SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
    The default value is set to "true", it must be set to "false" to apply
    generate and mutateExisting rules to those requests.
    """
    validate_: Annotated[Optional[Validate], Field(alias="validate")] = None
    """
    Validation is used to validate matching resources.
    """
    verify_images: Annotated[Optional[List[VerifyImage]], Field(alias="verifyImages")] = None
    """
    VerifyImages is used to verify image signatures and mutate them to add a digest
    """


class ValidationFailureActionOverride(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidationFailureActionOverride"]:
            return ValidationFailureActionOverride

        def build(self) -> "ValidationFailureActionOverride":
            return ValidationFailureActionOverride(**self._attrs)

        def action(
            self, value: Optional[Literal["audit", "enforce", "Audit", "Enforce"]], /
        ) -> Self:
            """
            ValidationFailureAction defines the policy validation failure action
            """
            return self._set("action", value)

        @overload
        def namespace_selector(
            self, value_or_callback: Optional[NamespaceSelector], /
        ) -> "ValidationFailureActionOverride.Builder": ...

        @overload
        def namespace_selector(
            self,
            value_or_callback: Callable[
                [NamespaceSelector.Builder],
                NamespaceSelector.Builder | NamespaceSelector,
            ],
            /,
        ) -> "ValidationFailureActionOverride.Builder": ...

        @overload
        def namespace_selector(
            self, value_or_callback: Never = ...
        ) -> "NamespaceSelector.BuilderContext": ...

        def namespace_selector(self, value_or_callback=None, /):
            """
            A label selector is a label query over a set of resources. The result of matchLabels and
            matchExpressions are ANDed. An empty label selector matches all objects. A null
            label selector matches no objects.
            """
            if self._in_context and value_or_callback is None:
                context = NamespaceSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "namespace_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(NamespaceSelector.builder())
                if isinstance(output, NamespaceSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("namespace_selector", value)

        def namespaces(self, value: Optional[List[str]], /) -> Self:
            return self._set("namespaces", value)

    class BuilderContext(BuilderContextBase["ValidationFailureActionOverride.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidationFailureActionOverride.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidationFailureActionOverride."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidationFailureActionOverride", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidationFailureActionOverride.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    action: Optional[Literal["audit", "enforce", "Audit", "Enforce"]] = None
    """
    ValidationFailureAction defines the policy validation failure action
    """
    namespace_selector: Annotated[Optional[NamespaceSelector], Field(alias="namespaceSelector")] = (
        None
    )
    """
    A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null
    label selector matches no objects.
    """
    namespaces: Optional[List[str]] = None


class MatchCondition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchCondition"]:
            return MatchCondition

        def build(self) -> "MatchCondition":
            return MatchCondition(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.
            CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

            'object' - The object from the incoming request. The value is null for DELETE requests.
            'oldObject' - The existing object. The value is null for CREATE requests.
            'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).
            'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
              See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
            'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
              request resource.
            Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

            Required.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is an identifier for this match condition, used for strategic merging of MatchConditions,
            as well as providing an identifier for logging purposes. A good name should be descriptive of
            the associated expression.
            Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and
            must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or
            '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
            optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

            Required.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["MatchCondition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchCondition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchCondition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchCondition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchCondition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.
    CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:

    'object' - The object from the incoming request. The value is null for DELETE requests.
    'oldObject' - The existing object. The value is null for CREATE requests.
    'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).
    'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
      See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
    'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
      request resource.
    Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/

    Required.
    """
    name: str
    """
    Name is an identifier for this match condition, used for strategic merging of MatchConditions,
    as well as providing an identifier for logging purposes. A good name should be descriptive of
    the associated expression.
    Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and
    must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or
    '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an
    optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')

    Required.
    """


class WebhookConfiguration(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["WebhookConfiguration"]:
            return WebhookConfiguration

        def build(self) -> "WebhookConfiguration":
            return WebhookConfiguration(**self._attrs)

        def failure_policy(self, value: Optional[Literal["Ignore", "Fail"]], /) -> Self:
            """
            FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.
            Rules within the same policy share the same failure behavior.
            This field should not be accessed directly, instead `GetFailurePolicy()` should be used.
            Allowed values are Ignore or Fail. Defaults to Fail.
            """
            return self._set("failure_policy", value)

        @overload
        def match_conditions(
            self, value_or_callback: List[MatchCondition], /
        ) -> "WebhookConfiguration.Builder": ...

        @overload
        def match_conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[MatchCondition, MatchCondition.Builder]],
                GenericListBuilder[MatchCondition, MatchCondition.Builder] | List[MatchCondition],
            ],
            /,
        ) -> "WebhookConfiguration.Builder": ...

        @overload
        def match_conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[MatchCondition.Builder]: ...

        def match_conditions(self, value_or_callback=None, /):
            """
            MatchCondition configures admission webhook matchConditions.
            Requires Kubernetes 1.27 or later.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[MatchCondition.Builder]()
                context._parent_builder = self
                context._field_name = "match_conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchCondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_conditions", value)

        def timeout_seconds(self, value: Optional[int], /) -> Self:
            """
            TimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
            After the configured time expires, the admission request may fail, or may simply ignore the policy results,
            based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
            """
            return self._set("timeout_seconds", value)

    class BuilderContext(BuilderContextBase["WebhookConfiguration.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = WebhookConfiguration.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for WebhookConfiguration."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["WebhookConfiguration", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use WebhookConfiguration.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    failure_policy: Annotated[Optional[Literal["Ignore", "Fail"]], Field(alias="failurePolicy")] = (
        None
    )
    """
    FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.
    Rules within the same policy share the same failure behavior.
    This field should not be accessed directly, instead `GetFailurePolicy()` should be used.
    Allowed values are Ignore or Fail. Defaults to Fail.
    """
    match_conditions: Annotated[Optional[List[MatchCondition]], Field(alias="matchConditions")] = (
        None
    )
    """
    MatchCondition configures admission webhook matchConditions.
    Requires Kubernetes 1.27 or later.
    """
    timeout_seconds: Annotated[Optional[int], Field(alias="timeoutSeconds")] = None
    """
    TimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
    After the configured time expires, the admission request may fail, or may simply ignore the policy results,
    based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
    """


class ClusterPolicySpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterPolicySpec"]:
            return ClusterPolicySpec

        def build(self) -> "ClusterPolicySpec":
            return ClusterPolicySpec(**self._attrs)

        def admission(self, value: Optional[bool], /) -> Self:
            """
            Admission controls if rules are applied during admission.
            Optional. Default value is "true".
            """
            return self._set("admission", value)

        def apply_rules(self, value: Optional[Literal["All", "One"]], /) -> Self:
            """
            ApplyRules controls how rules in a policy are applied. Rule are processed in
            the order of declaration. When set to `One` processing stops after a rule has
            been applied i.e. the rule matches and results in a pass, fail, or error. When
            set to `All` all rules in the policy are processed. The default is `All`.
            """
            return self._set("apply_rules", value)

        def background(self, value: Optional[bool], /) -> Self:
            """
            Background controls if rules are applied to existing resources during a background scan.
            Optional. Default value is "true". The value must be set to "false" if the policy rule
            uses variables that are only available in the admission review request (e.g. user name).
            """
            return self._set("background", value)

        def emit_warning(self, value: Optional[bool], /) -> Self:
            """
            EmitWarning enables API response warnings for mutate policy rules or validate policy rules with validationFailureAction set to Audit.
            Enabling this option will extend admission request processing times. The default value is "false".
            """
            return self._set("emit_warning", value)

        def failure_policy(self, value: Optional[Literal["Ignore", "Fail"]], /) -> Self:
            """
            Deprecated, use failurePolicy under the webhookConfiguration instead.
            """
            return self._set("failure_policy", value)

        def generate_existing(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use generateExisting under the generate rule instead
            """
            return self._set("generate_existing", value)

        def generate_existing_on_policy_update(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use generateExisting instead
            """
            return self._set("generate_existing_on_policy_update", value)

        def mutate_existing_on_policy_update(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use mutateExistingOnPolicyUpdate under the mutate rule instead
            """
            return self._set("mutate_existing_on_policy_update", value)

        @overload
        def rules(self, value_or_callback: List[Rule], /) -> "ClusterPolicySpec.Builder": ...

        @overload
        def rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Rule, Rule.Builder]],
                GenericListBuilder[Rule, Rule.Builder] | List[Rule],
            ],
            /,
        ) -> "ClusterPolicySpec.Builder": ...

        @overload
        def rules(self, value_or_callback: Never = ...) -> ListBuilderContext[Rule.Builder]: ...

        def rules(self, value_or_callback=None, /):
            """
            Rules is a list of Rule instances. A Policy contains multiple rules and
            each rule can validate, mutate, or generate resources.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Rule.Builder]()
                context._parent_builder = self
                context._field_name = "rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rule.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("rules", value)

        def schema_validation(self, value: Optional[bool], /) -> Self:
            """
            Deprecated.
            """
            return self._set("schema_validation", value)

        def use_server_side_apply(self, value: Optional[bool], /) -> Self:
            """
            UseServerSideApply controls whether to use server-side apply for generate rules
            If is set to "true" create & update for generate rules will use apply instead of create/update.
            Defaults to "false" if not specified.
            """
            return self._set("use_server_side_apply", value)

        def validation_failure_action(
            self, value: Optional[Literal["audit", "enforce", "Audit", "Enforce"]], /
        ) -> Self:
            """
            Deprecated, use validationFailureAction under the validate rule instead.
            """
            return self._set("validation_failure_action", value)

        @overload
        def validation_failure_action_overrides(
            self, value_or_callback: List[ValidationFailureActionOverride], /
        ) -> "ClusterPolicySpec.Builder": ...

        @overload
        def validation_failure_action_overrides(
            self,
            value_or_callback: Callable[
                [
                    GenericListBuilder[
                        ValidationFailureActionOverride,
                        ValidationFailureActionOverride.Builder,
                    ]
                ],
                GenericListBuilder[
                    ValidationFailureActionOverride,
                    ValidationFailureActionOverride.Builder,
                ]
                | List[ValidationFailureActionOverride],
            ],
            /,
        ) -> "ClusterPolicySpec.Builder": ...

        @overload
        def validation_failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ValidationFailureActionOverride.Builder]: ...

        def validation_failure_action_overrides(self, value_or_callback=None, /):
            """
            Deprecated, use validationFailureActionOverrides under the validate rule instead.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ValidationFailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "validation_failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidationFailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("validation_failure_action_overrides", value)

        @overload
        def webhook_configuration(
            self, value_or_callback: Optional[WebhookConfiguration], /
        ) -> "ClusterPolicySpec.Builder": ...

        @overload
        def webhook_configuration(
            self,
            value_or_callback: Callable[
                [WebhookConfiguration.Builder],
                WebhookConfiguration.Builder | WebhookConfiguration,
            ],
            /,
        ) -> "ClusterPolicySpec.Builder": ...

        @overload
        def webhook_configuration(
            self, value_or_callback: Never = ...
        ) -> "WebhookConfiguration.BuilderContext": ...

        def webhook_configuration(self, value_or_callback=None, /):
            """
            WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.
            """
            if self._in_context and value_or_callback is None:
                context = WebhookConfiguration.BuilderContext()
                context._parent_builder = self
                context._field_name = "webhook_configuration"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WebhookConfiguration.builder())
                if isinstance(output, WebhookConfiguration.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("webhook_configuration", value)

        def webhook_timeout_seconds(self, value: Optional[int], /) -> Self:
            """
            Deprecated, use webhookTimeoutSeconds under webhookConfiguration instead.
            """
            return self._set("webhook_timeout_seconds", value)

    class BuilderContext(BuilderContextBase["ClusterPolicySpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterPolicySpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterPolicySpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterPolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterPolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    admission: Optional[bool] = True
    """
    Admission controls if rules are applied during admission.
    Optional. Default value is "true".
    """
    apply_rules: Annotated[Optional[Literal["All", "One"]], Field(alias="applyRules")] = None
    """
    ApplyRules controls how rules in a policy are applied. Rule are processed in
    the order of declaration. When set to `One` processing stops after a rule has
    been applied i.e. the rule matches and results in a pass, fail, or error. When
    set to `All` all rules in the policy are processed. The default is `All`.
    """
    background: Optional[bool] = True
    """
    Background controls if rules are applied to existing resources during a background scan.
    Optional. Default value is "true". The value must be set to "false" if the policy rule
    uses variables that are only available in the admission review request (e.g. user name).
    """
    emit_warning: Annotated[Optional[bool], Field(alias="emitWarning")] = False
    """
    EmitWarning enables API response warnings for mutate policy rules or validate policy rules with validationFailureAction set to Audit.
    Enabling this option will extend admission request processing times. The default value is "false".
    """
    failure_policy: Annotated[Optional[Literal["Ignore", "Fail"]], Field(alias="failurePolicy")] = (
        None
    )
    """
    Deprecated, use failurePolicy under the webhookConfiguration instead.
    """
    generate_existing: Annotated[Optional[bool], Field(alias="generateExisting")] = None
    """
    Deprecated, use generateExisting under the generate rule instead
    """
    generate_existing_on_policy_update: Annotated[
        Optional[bool], Field(alias="generateExistingOnPolicyUpdate")
    ] = None
    """
    Deprecated, use generateExisting instead
    """
    mutate_existing_on_policy_update: Annotated[
        Optional[bool], Field(alias="mutateExistingOnPolicyUpdate")
    ] = None
    """
    Deprecated, use mutateExistingOnPolicyUpdate under the mutate rule instead
    """
    rules: Optional[List[Rule]] = None
    """
    Rules is a list of Rule instances. A Policy contains multiple rules and
    each rule can validate, mutate, or generate resources.
    """
    schema_validation: Annotated[Optional[bool], Field(alias="schemaValidation")] = None
    """
    Deprecated.
    """
    use_server_side_apply: Annotated[Optional[bool], Field(alias="useServerSideApply")] = None
    """
    UseServerSideApply controls whether to use server-side apply for generate rules
    If is set to "true" create & update for generate rules will use apply instead of create/update.
    Defaults to "false" if not specified.
    """
    validation_failure_action: Annotated[
        Optional[Literal["audit", "enforce", "Audit", "Enforce"]],
        Field(alias="validationFailureAction"),
    ] = "Audit"
    """
    Deprecated, use validationFailureAction under the validate rule instead.
    """
    validation_failure_action_overrides: Annotated[
        Optional[List[ValidationFailureActionOverride]],
        Field(alias="validationFailureActionOverrides"),
    ] = None
    """
    Deprecated, use validationFailureActionOverrides under the validate rule instead.
    """
    webhook_configuration: Annotated[
        Optional[WebhookConfiguration], Field(alias="webhookConfiguration")
    ] = None
    """
    WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.
    """
    webhook_timeout_seconds: Annotated[Optional[int], Field(alias="webhookTimeoutSeconds")] = None
    """
    Deprecated, use webhookTimeoutSeconds under webhookConfiguration instead.
    """


class ContextModel34(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel34"]:
            return ContextModel34

        def build(self) -> "ContextModel34":
            return ContextModel34(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel34.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel34.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel34.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel34.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel34.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel34.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel34.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel34.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel34.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel34.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel34.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel34.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel34."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel34", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel34.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel35(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel35"]:
            return ContextModel35

        def build(self) -> "ContextModel35":
            return ContextModel35(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel35.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel35.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel35.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel35.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel35.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel35.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel35.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel35.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel35.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel35.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel35.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel35.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel35."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel35", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel35.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel36(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel36"]:
            return ContextModel36

        def build(self) -> "ContextModel36":
            return ContextModel36(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel36.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel36.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel36.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel36.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel36.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel36.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel36.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel36.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel36.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel36.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel36.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel36.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel36."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel36", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel36.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel37(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel37"]:
            return ContextModel37

        def build(self) -> "ContextModel37":
            return ContextModel37(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel37.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel37.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel37.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel37.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel37.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel37.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel37.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel37.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel1, /) -> "ContextModel37.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel37.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel37.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel37.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel37."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel37", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel37.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel1
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel38(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel38"]:
            return ContextModel38

        def build(self) -> "ContextModel38":
            return ContextModel38(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel38.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel38.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel38.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel38.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel38.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel38.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel38.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel38.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel38.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel38.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel38.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel38.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel38."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel38", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel38.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel8(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel8"]:
            return AllModel8

        def build(self) -> "AllModel8":
            return AllModel8(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel8.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel8.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel8.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel8.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel8.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel8.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel8."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel8", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel8.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel9(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel9"]:
            return AnyModel9

        def build(self) -> "AnyModel9":
            return AnyModel9(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel9.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel9.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel9.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel9.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel9.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel9.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel9."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel9", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel9.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ExcludeModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel1"]:
            return ExcludeModel1

        def build(self) -> "ExcludeModel1":
            return ExcludeModel1(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel8], /) -> "ExcludeModel1.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel8, AllModel8.Builder]],
                GenericListBuilder[AllModel8, AllModel8.Builder] | List[AllModel8],
            ],
            /,
        ) -> "ExcludeModel1.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel8.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel8.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel8.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel9], /) -> "ExcludeModel1.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel9, AnyModel9.Builder]],
                GenericListBuilder[AnyModel9, AnyModel9.Builder] | List[AnyModel9],
            ],
            /,
        ) -> "ExcludeModel1.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel9.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel9.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel9.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(
            self, value_or_callback: Optional[Resources], /
        ) -> "ExcludeModel1.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "ExcludeModel1.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            Requires at least one tag to be specified when under MatchResources.
            Specifying ResourceDescription directly under match is being deprecated.
            Please specify under "any" or "all" instead.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "ExcludeModel1.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "ExcludeModel1.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["ExcludeModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel8]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel9]] = None
    """
    Any allows specifying resources which will be ORed
    """
    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ContextModel39(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel39"]:
            return ContextModel39

        def build(self) -> "ContextModel39":
            return ContextModel39(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel39.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel39.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel39.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel39.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel39.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel39.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel39.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel39.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel39.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel39.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel39.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel39.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel39."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel39", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel39.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel40(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel40"]:
            return ContextModel40

        def build(self) -> "ContextModel40":
            return ContextModel40(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel40.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel40.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel40.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel40.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel40.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel40.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel40.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel40.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel40.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel40.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel40.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel40.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel40."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel40", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel40.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel41(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel41"]:
            return ContextModel41

        def build(self) -> "ContextModel41":
            return ContextModel41(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel41.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel41.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel41.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel41.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel41.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel41.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel41.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel41.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel41.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel41.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel41.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel41.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel41."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel41", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel41.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel42(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel42"]:
            return ContextModel42

        def build(self) -> "ContextModel42":
            return ContextModel42(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel42.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel42.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel42.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel42.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel42.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel42.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel42.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel42.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel1, /) -> "ContextModel42.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel42.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel42.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel42.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel42."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel42", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel42.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel1
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel43(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel43"]:
            return ContextModel43

        def build(self) -> "ContextModel43":
            return ContextModel43(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel43.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel43.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel43.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel43.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel43.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel43.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel43.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel43.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel43.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel43.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel43.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel43.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel43."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel43", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel43.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel9(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel9"]:
            return AllModel9

        def build(self) -> "AllModel9":
            return AllModel9(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel9.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel9.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel9."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel9", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel9.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel10(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel10"]:
            return AnyModel10

        def build(self) -> "AnyModel10":
            return AnyModel10(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel10.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel10.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel10."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel10", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel10.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel2"]:
            return ForeachModel2

        def build(self) -> "ForeachModel2":
            return ForeachModel2(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        @overload
        def clone(self, value_or_callback: Optional[Clone], /) -> "ForeachModel2.Builder": ...

        @overload
        def clone(
            self, value_or_callback: Callable[[Clone.Builder], Clone.Builder | Clone], /
        ) -> "ForeachModel2.Builder": ...

        @overload
        def clone(self, value_or_callback: Never = ...) -> "Clone.BuilderContext": ...

        def clone(self, value_or_callback=None, /):
            """
            Clone specifies the source resource used to populate each generated resource.
            At most one of Data or Clone can be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            if self._in_context and value_or_callback is None:
                context = Clone.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Clone.builder())
                if isinstance(output, Clone.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone", value)

        @overload
        def clone_list(
            self, value_or_callback: Optional[CloneList], /
        ) -> "ForeachModel2.Builder": ...

        @overload
        def clone_list(
            self,
            value_or_callback: Callable[[CloneList.Builder], CloneList.Builder | CloneList],
            /,
        ) -> "ForeachModel2.Builder": ...

        @overload
        def clone_list(self, value_or_callback: Never = ...) -> "CloneList.BuilderContext": ...

        def clone_list(self, value_or_callback=None, /):
            """
            CloneList specifies the list of source resource used to populate each generated resource.
            """
            if self._in_context and value_or_callback is None:
                context = CloneList.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone_list"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CloneList.builder())
                if isinstance(output, CloneList.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone_list", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel39,
                        ContextModel40,
                        ContextModel41,
                        ContextModel42,
                        ContextModel43,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def data(self, value: Optional[Any], /) -> Self:
            """
            Data provides the resource declaration used to populate each generated resource.
            At most one of Data or Clone must be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            return self._set("data", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel2.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel2.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["ForeachModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    clone: Optional[Clone] = None
    """
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    clone_list: Annotated[Optional[CloneList], Field(alias="cloneList")] = None
    """
    CloneList specifies the list of source resource used to populate each generated resource.
    """
    context: Optional[
        List[
            Union[
                ContextModel39,
                ContextModel40,
                ContextModel41,
                ContextModel42,
                ContextModel43,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    data: Optional[Any] = None
    """
    Data provides the resource declaration used to populate each generated resource.
    At most one of Data or Clone must be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class AllModel10(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel10"]:
            return AllModel10

        def build(self) -> "AllModel10":
            return AllModel10(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel10.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel10.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel10.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel10.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel10.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel10.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel10."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel10", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel10.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel11(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel11"]:
            return AnyModel11

        def build(self) -> "AnyModel11":
            return AnyModel11(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel11.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel11.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel11.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel11.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel11.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel11.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel11."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel11", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel11.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class MatchModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchModel"]:
            return MatchModel

        def build(self) -> "MatchModel":
            return MatchModel(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel10], /) -> "MatchModel.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel10, AllModel10.Builder]],
                GenericListBuilder[AllModel10, AllModel10.Builder] | List[AllModel10],
            ],
            /,
        ) -> "MatchModel.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel10.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel10.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel10.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel11], /) -> "MatchModel.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel11, AnyModel11.Builder]],
                GenericListBuilder[AnyModel11, AnyModel11.Builder] | List[AnyModel11],
            ],
            /,
        ) -> "MatchModel.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel11.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel11.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel11.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "MatchModel.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "MatchModel.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            Requires at least one tag to be specified when under MatchResources.
            Specifying ResourceDescription directly under match is being deprecated.
            Please specify under "any" or "all" instead.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "MatchModel.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "MatchModel.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["MatchModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel10]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel11]] = None
    """
    Any allows specifying resources which will be ORed
    """
    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ContextModel44(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel44"]:
            return ContextModel44

        def build(self) -> "ContextModel44":
            return ContextModel44(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel44.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel44.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel44.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel44.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel44.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel44.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel44.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel44.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel44.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel44.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel44.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel44.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel44."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel44", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel44.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel45(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel45"]:
            return ContextModel45

        def build(self) -> "ContextModel45":
            return ContextModel45(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel45.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel45.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel45.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel45.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel45.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel45.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel45.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel45.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel45.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel45.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel45.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel45.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel45."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel45", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel45.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel46(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel46"]:
            return ContextModel46

        def build(self) -> "ContextModel46":
            return ContextModel46(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel46.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel46.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel46.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel46.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel46.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel46.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel46.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel46.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel46.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel46.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel46.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel46.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel46."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel46", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel46.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel47(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel47"]:
            return ContextModel47

        def build(self) -> "ContextModel47":
            return ContextModel47(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel47.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel47.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel47.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel47.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel47.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel47.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel47.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel47.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel1, /) -> "ContextModel47.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel47.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel47.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel47.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel47."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel47", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel47.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel1
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel48(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel48"]:
            return ContextModel48

        def build(self) -> "ContextModel48":
            return ContextModel48(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel48.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel48.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel48.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel48.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel48.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel48.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel48.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel48.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel48.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel48.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel48.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel48.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel48."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel48", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel48.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel11(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel11"]:
            return AllModel11

        def build(self) -> "AllModel11":
            return AllModel11(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel11.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel11.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel11."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel11", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel11.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel12(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel12"]:
            return AnyModel12

        def build(self) -> "AnyModel12":
            return AnyModel12(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel12.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel12.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel12."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel12", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel12.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel3"]:
            return ForeachModel3

        def build(self) -> "ForeachModel3":
            return ForeachModel3(**self._attrs)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel44,
                        ContextModel45,
                        ContextModel46,
                        ContextModel47,
                        ContextModel48,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def order(self, value: Optional[Literal["Ascending", "Descending"]], /) -> Self:
            """
            Order defines the iteration order on the list.
            Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
            """
            return self._set("order", value)

        def patch_strategic_merge(self, value: Optional[Any], /) -> Self:
            """
            PatchStrategicMerge is a strategic merge patch used to modify resources.
            See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
            and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
            """
            return self._set("patch_strategic_merge", value)

        def patches_json6902(self, value: Optional[str], /) -> Self:
            """
            PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
            See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
            """
            return self._set("patches_json6902", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel3.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel3.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    context: Optional[
        List[
            Union[
                ContextModel44,
                ContextModel45,
                ContextModel46,
                ContextModel47,
                ContextModel48,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    order: Optional[Literal["Ascending", "Descending"]] = None
    """
    Order defines the iteration order on the list.
    Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
    """
    patch_strategic_merge: Annotated[Optional[Any], Field(alias="patchStrategicMerge")] = None
    """
    PatchStrategicMerge is a strategic merge patch used to modify resources.
    See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
    and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    """
    patches_json6902: Annotated[Optional[str], Field(alias="patchesJson6902")] = None
    """
    PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
    See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ContextModel49(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel49"]:
            return ContextModel49

        def build(self) -> "ContextModel49":
            return ContextModel49(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel49.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel49.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel49.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel49.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel49.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel49.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel49.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel49.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel49.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel49.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel49.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel49.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel49."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel49", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel49.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel50(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel50"]:
            return ContextModel50

        def build(self) -> "ContextModel50":
            return ContextModel50(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel50.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel50.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel50.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel50.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel50.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel50.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel50.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel50.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel50.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel50.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel50.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel50.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel50."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel50", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel50.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel51(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel51"]:
            return ContextModel51

        def build(self) -> "ContextModel51":
            return ContextModel51(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel51.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel51.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel51.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel51.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel51.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel51.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel51.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel51.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel51.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel51.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel51.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel51.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel51."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel51", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel51.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel52(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel52"]:
            return ContextModel52

        def build(self) -> "ContextModel52":
            return ContextModel52(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel52.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel52.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel52.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel52.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel52.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel52.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel52.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel52.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel1, /) -> "ContextModel52.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel52.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel52.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel52.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel52."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel52", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel52.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel1
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel53(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel53"]:
            return ContextModel53

        def build(self) -> "ContextModel53":
            return ContextModel53(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel53.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel53.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel53.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel53.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel53.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel53.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel53.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel53.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel1], /
        ) -> "ContextModel53.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel1.Builder], VariableModel1.Builder | VariableModel1
            ],
            /,
        ) -> "ContextModel53.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel1.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel1.builder())
                if isinstance(output, VariableModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel53.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel53.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel53."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel53", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel53.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel1] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class VariableModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel2"]:
            return VariableModel2

        def build(self) -> "VariableModel2":
            return VariableModel2(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression is the expression that will be evaluated as the value of the variable.
            The CEL expression has access to the same identifiers as the CEL expressions in Validation.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
            The variable can be accessed in other expressions through `variables`
            For example, if name is "foo", the variable will be available as `variables.foo`
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["VariableModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression is the expression that will be evaluated as the value of the variable.
    The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    """
    name: str
    """
    Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
    The variable can be accessed in other expressions through `variables`
    For example, if name is "foo", the variable will be available as `variables.foo`
    """


class VariableModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel3"]:
            return VariableModel3

        def build(self) -> "VariableModel3":
            return VariableModel3(**self._attrs)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the variable may take if the JMESPath
            expression evaluates to nil
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath Expression that can be used to
            transform the variable.
            """
            return self._set("jmes_path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is any arbitrary JSON object representable in YAML or JSON form.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["VariableModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the variable may take if the JMESPath
    expression evaluates to nil
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath Expression that can be used to
    transform the variable.
    """
    value: Optional[Any] = None
    """
    Value is any arbitrary JSON object representable in YAML or JSON form.
    """


class ContextModel54(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel54"]:
            return ContextModel54

        def build(self) -> "ContextModel54":
            return ContextModel54(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel54.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel54.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel54.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel54.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel54.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel54.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel54.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel54.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel54.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel54.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel54.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel54.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel54."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel54", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel54.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel55(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel55"]:
            return ContextModel55

        def build(self) -> "ContextModel55":
            return ContextModel55(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel55.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel55.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel55.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel55.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel55.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel55.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel55.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel55.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel55.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel55.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel55.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel55.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel55."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel55", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel55.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel56(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel56"]:
            return ContextModel56

        def build(self) -> "ContextModel56":
            return ContextModel56(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel56.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel56.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel56.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel56.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel56.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel56.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel56.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel56.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel56.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel56.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel56.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel56.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel56."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel56", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel56.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel57(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel57"]:
            return ContextModel57

        def build(self) -> "ContextModel57":
            return ContextModel57(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel57.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel57.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel57.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel57.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel57.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel57.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel57.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel57.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel3, /) -> "ContextModel57.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel57.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel57.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel57.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel57."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel57", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel57.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel3
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel58(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel58"]:
            return ContextModel58

        def build(self) -> "ContextModel58":
            return ContextModel58(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel58.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel58.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel58.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel58.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel58.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel58.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel58.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel58.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel58.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel58.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel58.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel58.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel58."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel58", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel58.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ForeachModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel4"]:
            return ForeachModel4

        def build(self) -> "ForeachModel4":
            return ForeachModel4(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel54,
                        ContextModel55,
                        ContextModel56,
                        ContextModel57,
                        ContextModel58,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel], /) -> "ForeachModel4.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel.Builder], DenyModel.Builder | DenyModel],
            /,
        ) -> "ForeachModel4.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel.builder())
                if isinstance(output, DenyModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def element_scope(self, value: Optional[bool], /) -> Self:
            """
            ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
            When set to "false", "request.object" is used as the validation scope within the foreach
            block to allow referencing other elements in the subtree.
            """
            return self._set("element_scope", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel4.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel4.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    context: Optional[
        List[
            Union[
                ContextModel54,
                ContextModel55,
                ContextModel56,
                ContextModel57,
                ContextModel58,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    deny: Optional[DenyModel] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    element_scope: Annotated[Optional[bool], Field(alias="elementScope")] = None
    """
    ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
    When set to "false", "request.object" is used as the validation scope within the foreach
    block to allow referencing other elements in the subtree.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ExcludeModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel2"]:
            return ExcludeModel2

        def build(self) -> "ExcludeModel2":
            return ExcludeModel2(**self._attrs)

        def control_name(
            self,
            value: Literal[
                "HostProcess",
                "Host Namespaces",
                "Privileged Containers",
                "Capabilities",
                "HostPath Volumes",
                "Host Ports",
                "AppArmor",
                "SELinux",
                "/proc Mount Type",
                "Seccomp",
                "Sysctls",
                "Volume Types",
                "Privilege Escalation",
                "Running as Non-root",
                "Running as Non-root user",
            ],
            /,
        ) -> Self:
            """
            ControlName specifies the name of the Pod Security Standard control.
            See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
            """
            return self._set("control_name", value)

        def images(self, value: Optional[List[str]], /) -> Self:
            """
            Images selects matching containers and applies the container level PSS.
            Each image is the image name consisting of the registry address, repository, image, and tag.
            Empty list matches no containers, PSS checks are applied at the pod level only.
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("images", value)

        def restricted_field(self, value: Optional[str], /) -> Self:
            """
            RestrictedField selects the field for the given Pod Security Standard control.
            When not set, all restricted fields for the control are selected.
            """
            return self._set("restricted_field", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            Values defines the allowed values that can be excluded.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["ExcludeModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(alias="controlName"),
    ]
    """
    ControlName specifies the name of the Pod Security Standard control.
    See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    """
    images: Optional[List[str]] = None
    """
    Images selects matching containers and applies the container level PSS.
    Each image is the image name consisting of the registry address, repository, image, and tag.
    Empty list matches no containers, PSS checks are applied at the pod level only.
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    restricted_field: Annotated[Optional[str], Field(alias="restrictedField")] = None
    """
    RestrictedField selects the field for the given Pod Security Standard control.
    When not set, all restricted fields for the control are selected.
    """
    values: Optional[List[str]] = None
    """
    Values defines the allowed values that can be excluded.
    """


class ValidateModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel1"]:
            return ValidateModel1

        def build(self) -> "ValidateModel1":
            return ValidateModel1(**self._attrs)

        def allow_existing_violations(self, value: Optional[bool], /) -> Self:
            """
            AllowExistingViolations allows prexisting violating resources to continue violating a policy.
            """
            return self._set("allow_existing_violations", value)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def assert_(self, value: Optional[Dict[str, Any]], /) -> Self:
            """
            Assert defines a kyverno-json assertion tree.
            """
            return self._set("assert_", value)

        @overload
        def cel(self, value_or_callback: Optional[Cel], /) -> "ValidateModel1.Builder": ...

        @overload
        def cel(
            self, value_or_callback: Callable[[Cel.Builder], Cel.Builder | Cel], /
        ) -> "ValidateModel1.Builder": ...

        @overload
        def cel(self, value_or_callback: Never = ...) -> "Cel.BuilderContext": ...

        def cel(self, value_or_callback=None, /):
            """
            CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
            """
            if self._in_context and value_or_callback is None:
                context = Cel.BuilderContext()
                context._parent_builder = self
                context._field_name = "cel"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Cel.builder())
                if isinstance(output, Cel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel], /) -> "ValidateModel1.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel.Builder], DenyModel.Builder | DenyModel],
            /,
        ) -> "ValidateModel1.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel.builder())
                if isinstance(output, DenyModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            FailureAction defines if a validation policy rule violation should block
            the admission review request (Enforce), or allow (Audit) the admission review request
            and report an error in a policy report. Optional.
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        @overload
        def failure_action_overrides(
            self, value_or_callback: List[FailureActionOverride], /
        ) -> "ValidateModel1.Builder": ...

        @overload
        def failure_action_overrides(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]],
                GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]
                | List[FailureActionOverride],
            ],
            /,
        ) -> "ValidateModel1.Builder": ...

        @overload
        def failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[FailureActionOverride.Builder]: ...

        def failure_action_overrides(self, value_or_callback=None, /):
            """
            FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
            namespace-wise. It overrides FailureAction for the specified namespaces.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[FailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(FailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("failure_action_overrides", value)

        @overload
        def foreach(
            self, value_or_callback: List[ForeachModel4], /
        ) -> "ValidateModel1.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ForeachModel4, ForeachModel4.Builder]],
                GenericListBuilder[ForeachModel4, ForeachModel4.Builder] | List[ForeachModel4],
            ],
            /,
        ) -> "ValidateModel1.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ForeachModel4.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ForeachModel4.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForeachModel4.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        @overload
        def manifests(
            self, value_or_callback: Optional[Manifests], /
        ) -> "ValidateModel1.Builder": ...

        @overload
        def manifests(
            self,
            value_or_callback: Callable[[Manifests.Builder], Manifests.Builder | Manifests],
            /,
        ) -> "ValidateModel1.Builder": ...

        @overload
        def manifests(self, value_or_callback: Never = ...) -> "Manifests.BuilderContext": ...

        def manifests(self, value_or_callback=None, /):
            """
            Manifest specifies conditions for manifest verification
            """
            if self._in_context and value_or_callback is None:
                context = Manifests.BuilderContext()
                context._parent_builder = self
                context._field_name = "manifests"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Manifests.builder())
                if isinstance(output, Manifests.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("manifests", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def pod_security(
            self, value_or_callback: Optional[PodSecurity], /
        ) -> "ValidateModel1.Builder": ...

        @overload
        def pod_security(
            self,
            value_or_callback: Callable[[PodSecurity.Builder], PodSecurity.Builder | PodSecurity],
            /,
        ) -> "ValidateModel1.Builder": ...

        @overload
        def pod_security(self, value_or_callback: Never = ...) -> "PodSecurity.BuilderContext": ...

        def pod_security(self, value_or_callback=None, /):
            """
            PodSecurity applies exemptions for Kubernetes Pod Security admission
            by specifying exclusions for Pod Security Standards controls.
            """
            if self._in_context and value_or_callback is None:
                context = PodSecurity.BuilderContext()
                context._parent_builder = self
                context._field_name = "pod_security"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PodSecurity.builder())
                if isinstance(output, PodSecurity.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("pod_security", value)

    class BuilderContext(BuilderContextBase["ValidateModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    allow_existing_violations: Annotated[Optional[bool], Field(alias="allowExistingViolations")] = (
        True
    )
    """
    AllowExistingViolations allows prexisting violating resources to continue violating a policy.
    """
    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    assert_: Annotated[Optional[Dict[str, Any]], Field(alias="assert")] = None
    """
    Assert defines a kyverno-json assertion tree.
    """
    cel: Optional[Cel] = None
    """
    CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
    """
    deny: Optional[DenyModel] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    FailureAction defines if a validation policy rule violation should block
    the admission review request (Enforce), or allow (Audit) the admission review request
    and report an error in a policy report. Optional.
    Allowed values are Audit or Enforce.
    """
    failure_action_overrides: Annotated[
        Optional[List[FailureActionOverride]], Field(alias="failureActionOverrides")
    ] = None
    """
    FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
    namespace-wise. It overrides FailureAction for the specified namespaces.
    """
    foreach: Optional[List[ForeachModel4]] = None
    """
    ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    manifests: Optional[Manifests] = None
    """
    Manifest specifies conditions for manifest verification
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    pod_security: Annotated[Optional[PodSecurity], Field(alias="podSecurity")] = None
    """
    PodSecurity applies exemptions for Kubernetes Pod Security admission
    by specifying exclusions for Pod Security Standards controls.
    """


class ValidateModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel2"]:
            return ValidateModel2

        def build(self) -> "ValidateModel2":
            return ValidateModel2(**self._attrs)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel], /) -> "ValidateModel2.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel.Builder], DenyModel.Builder | DenyModel],
            /,
        ) -> "ValidateModel2.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel.builder())
                if isinstance(output, DenyModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

    class BuilderContext(BuilderContextBase["ValidateModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deny: Optional[DenyModel] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """


class VerifyImageModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VerifyImageModel"]:
            return VerifyImageModel

        def build(self) -> "VerifyImageModel":
            return VerifyImageModel(**self._attrs)

        def additional_extensions(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Deprecated.
            """
            return self._set("additional_extensions", value)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Deprecated. Use annotations per Attestor instead.
            """
            return self._set("annotations", value)

        @overload
        def attestations(
            self, value_or_callback: List[Attestation], /
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def attestations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestation, Attestation.Builder]],
                GenericListBuilder[Attestation, Attestation.Builder] | List[Attestation],
            ],
            /,
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def attestations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestation.Builder]: ...

        def attestations(self, value_or_callback=None, /):
            """
            Attestations are optional checks for signed in-toto Statements used to verify the image.
            See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
            OCI registry and decodes them into a list of Statement declarations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestation.Builder]()
                context._parent_builder = self
                context._field_name = "attestations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestations", value)

        @overload
        def attestors(self, value_or_callback: List[Attestor], /) -> "VerifyImageModel.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specified the required attestors (i.e. authorities)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        def cosign_oci11(self, value: Optional[bool], /) -> Self:
            """
            CosignOCI11 enables the experimental OCI 1.1 behaviour in cosign image verification.
            Defaults to false.
            """
            return self._set("cosign_oci11", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        def image(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use ImageReferences instead.
            """
            return self._set("image", value)

        def image_references(self, value: Optional[List[str]], /) -> Self:
            """
            ImageReferences is a list of matching image reference patterns. At least one pattern in the
            list must match the image for the rule to apply. Each image reference consists of a registry
            address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("image_references", value)

        @overload
        def image_registry_credentials(
            self, value_or_callback: Optional[ImageRegistryCredentials], /
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def image_registry_credentials(
            self,
            value_or_callback: Callable[
                [ImageRegistryCredentials.Builder],
                ImageRegistryCredentials.Builder | ImageRegistryCredentials,
            ],
            /,
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def image_registry_credentials(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistryCredentials.BuilderContext": ...

        def image_registry_credentials(self, value_or_callback=None, /):
            """
            ImageRegistryCredentials provides credentials that will be used for authentication with registry.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistryCredentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry_credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistryCredentials.builder())
                if isinstance(output, ImageRegistryCredentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry_credentials", value)

        def issuer(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("issuer", value)

        def key(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use StaticKeyAttestor instead.
            """
            return self._set("key", value)

        def mutate_digest(self, value: Optional[bool], /) -> Self:
            """
            MutateDigest enables replacement of image tags with digests.
            Defaults to true.
            """
            return self._set("mutate_digest", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
            If specified Repository will override the default OCI image repository configured for the installation.
            The repository can also be overridden per Attestor or Attestation.
            """
            return self._set("repository", value)

        def required(self, value: Optional[bool], /) -> Self:
            """
            Required validates that images are verified i.e. have matched passed a signature or attestation check.
            """
            return self._set("required", value)

        def roots(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("roots", value)

        def skip_image_references(self, value: Optional[List[str]], /) -> Self:
            """
            SkipImageReferences is a list of matching image reference patterns that should be skipped.
            At least one pattern in the list must match the image for the rule to be skipped. Each image reference
            consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("skip_image_references", value)

        def subject(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("subject", value)

        def type(self, value: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]], /) -> Self:
            """
            Type specifies the method of signature validation. The allowed options
            are Cosign, Sigstore Bundle and Notary. By default Cosign is used if a type is not specified.
            """
            return self._set("type", value)

        def use_cache(self, value: Optional[bool], /) -> Self:
            """
            UseCache enables caching of image verify responses for this rule.
            """
            return self._set("use_cache", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel2], /
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel2.Builder], ValidateModel2.Builder | ValidateModel2
            ],
            /,
        ) -> "VerifyImageModel.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel2.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation checks conditions across multiple image
            verification attestations or context entries
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel2.builder())
                if isinstance(output, ValidateModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        def verify_digest(self, value: Optional[bool], /) -> Self:
            """
            VerifyDigest validates that images have a digest.
            """
            return self._set("verify_digest", value)

    class BuilderContext(BuilderContextBase["VerifyImageModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VerifyImageModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VerifyImageModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VerifyImageModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VerifyImageModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    additional_extensions: Annotated[
        Optional[Dict[str, str]], Field(alias="additionalExtensions")
    ] = None
    """
    Deprecated.
    """
    annotations: Optional[Dict[str, str]] = None
    """
    Deprecated. Use annotations per Attestor instead.
    """
    attestations: Optional[List[Attestation]] = None
    """
    Attestations are optional checks for signed in-toto Statements used to verify the image.
    See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
    OCI registry and decodes them into a list of Statement declarations.
    """
    attestors: Optional[List[Attestor]] = None
    """
    Attestors specified the required attestors (i.e. authorities)
    """
    cosign_oci11: Annotated[Optional[bool], Field(alias="cosignOCI11")] = None
    """
    CosignOCI11 enables the experimental OCI 1.1 behaviour in cosign image verification.
    Defaults to false.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    Allowed values are Audit or Enforce.
    """
    image: Optional[str] = None
    """
    Deprecated. Use ImageReferences instead.
    """
    image_references: Annotated[Optional[List[str]], Field(alias="imageReferences")] = None
    """
    ImageReferences is a list of matching image reference patterns. At least one pattern in the
    list must match the image for the rule to apply. Each image reference consists of a registry
    address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials], Field(alias="imageRegistryCredentials")
    ] = None
    """
    ImageRegistryCredentials provides credentials that will be used for authentication with registry.
    """
    issuer: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    key: Optional[str] = None
    """
    Deprecated. Use StaticKeyAttestor instead.
    """
    mutate_digest: Annotated[Optional[bool], Field(alias="mutateDigest")] = True
    """
    MutateDigest enables replacement of image tags with digests.
    Defaults to true.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
    If specified Repository will override the default OCI image repository configured for the installation.
    The repository can also be overridden per Attestor or Attestation.
    """
    required: Optional[bool] = True
    """
    Required validates that images are verified i.e. have matched passed a signature or attestation check.
    """
    roots: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    skip_image_references: Annotated[Optional[List[str]], Field(alias="skipImageReferences")] = None
    """
    SkipImageReferences is a list of matching image reference patterns that should be skipped.
    At least one pattern in the list must match the image for the rule to be skipped. Each image reference
    consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    subject: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    type: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]] = None
    """
    Type specifies the method of signature validation. The allowed options
    are Cosign, Sigstore Bundle and Notary. By default Cosign is used if a type is not specified.
    """
    use_cache: Annotated[Optional[bool], Field(alias="useCache")] = True
    """
    UseCache enables caching of image verify responses for this rule.
    """
    validate_: Annotated[Optional[ValidateModel2], Field(alias="validate")] = None
    """
    Validation checks conditions across multiple image
    verification attestations or context entries
    """
    verify_digest: Annotated[Optional[bool], Field(alias="verifyDigest")] = True
    """
    VerifyDigest validates that images have a digest.
    """


class RuleModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["RuleModel"]:
            return RuleModel

        def build(self) -> "RuleModel":
            return RuleModel(**self._attrs)

        @overload
        def cel_preconditions(
            self, value_or_callback: List[CelPrecondition], /
        ) -> "RuleModel.Builder": ...

        @overload
        def cel_preconditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[CelPrecondition, CelPrecondition.Builder]],
                GenericListBuilder[CelPrecondition, CelPrecondition.Builder]
                | List[CelPrecondition],
            ],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def cel_preconditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[CelPrecondition.Builder]: ...

        def cel_preconditions(self, value_or_callback=None, /):
            """
            CELPreconditions are used to determine if a policy rule should be applied by evaluating a
            set of CEL conditions. It can only be used with the validate.cel subrule
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[CelPrecondition.Builder]()
                context._parent_builder = self
                context._field_name = "cel_preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CelPrecondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel_preconditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel34,
                        ContextModel35,
                        ContextModel36,
                        ContextModel37,
                        ContextModel38,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(self, value_or_callback: Optional[ExcludeModel1], /) -> "RuleModel.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[
                [ExcludeModel1.Builder], ExcludeModel1.Builder | ExcludeModel1
            ],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "ExcludeModel1.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when this policy rule should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = ExcludeModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ExcludeModel1.builder())
                if isinstance(output, ExcludeModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def generate(self, value_or_callback: Optional[Generate], /) -> "RuleModel.Builder": ...

        @overload
        def generate(
            self,
            value_or_callback: Callable[[Generate.Builder], Generate.Builder | Generate],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def generate(self, value_or_callback: Never = ...) -> "Generate.BuilderContext": ...

        def generate(self, value_or_callback=None, /):
            """
            Generation is used to create new resources.
            """
            if self._in_context and value_or_callback is None:
                context = Generate.BuilderContext()
                context._parent_builder = self
                context._field_name = "generate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Generate.builder())
                if isinstance(output, Generate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("generate", value)

        def image_extractors(self, value: Optional[Dict[str, List[ImageExtractor]]], /) -> Self:
            """
            ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
            This config is only valid for verifyImages rules.
            """
            return self._set("image_extractors", value)

        @overload
        def match(self, value_or_callback: MatchModel, /) -> "RuleModel.Builder": ...

        @overload
        def match(
            self,
            value_or_callback: Callable[[MatchModel.Builder], MatchModel.Builder | MatchModel],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "MatchModel.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when this policy rule should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = MatchModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchModel.builder())
                if isinstance(output, MatchModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        @overload
        def mutate(self, value_or_callback: Optional[Mutate], /) -> "RuleModel.Builder": ...

        @overload
        def mutate(
            self,
            value_or_callback: Callable[[Mutate.Builder], Mutate.Builder | Mutate],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def mutate(self, value_or_callback: Never = ...) -> "Mutate.BuilderContext": ...

        def mutate(self, value_or_callback=None, /):
            """
            Mutation is used to modify matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = Mutate.BuilderContext()
                context._parent_builder = self
                context._field_name = "mutate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Mutate.builder())
                if isinstance(output, Mutate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("mutate", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a label to identify the rule, It must be unique within the policy.
            """
            return self._set("name", value)

        def preconditions(self, value: Optional[Any], /) -> Self:
            """
            Preconditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
            of conditions (without `any` or `all` statements is supported for backwards compatibility but
            will be deprecated in the next major release.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            return self._set("preconditions", value)

        def report_properties(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            ReportProperties are the additional properties from the rule that will be added to the policy report result
            """
            return self._set("report_properties", value)

        def skip_background_requests(self, value: Optional[bool], /) -> Self:
            """
            SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
            The default value is set to "true", it must be set to "false" to apply
            generate and mutateExisting rules to those requests.
            """
            return self._set("skip_background_requests", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel1], /
        ) -> "RuleModel.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel1.Builder], ValidateModel1.Builder | ValidateModel1
            ],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel1.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation is used to validate matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel1.builder())
                if isinstance(output, ValidateModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        @overload
        def verify_images(
            self, value_or_callback: List[VerifyImageModel], /
        ) -> "RuleModel.Builder": ...

        @overload
        def verify_images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[VerifyImageModel, VerifyImageModel.Builder]],
                GenericListBuilder[VerifyImageModel, VerifyImageModel.Builder]
                | List[VerifyImageModel],
            ],
            /,
        ) -> "RuleModel.Builder": ...

        @overload
        def verify_images(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[VerifyImageModel.Builder]: ...

        def verify_images(self, value_or_callback=None, /):
            """
            VerifyImages is used to verify image signatures and mutate them to add a digest
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[VerifyImageModel.Builder]()
                context._parent_builder = self
                context._field_name = "verify_images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VerifyImageModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("verify_images", value)

    class BuilderContext(BuilderContextBase["RuleModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = RuleModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for RuleModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["RuleModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RuleModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]], Field(alias="celPreconditions")
    ] = None
    """
    CELPreconditions are used to determine if a policy rule should be applied by evaluating a
    set of CEL conditions. It can only be used with the validate.cel subrule
    """
    context: Optional[
        List[
            Union[
                ContextModel34,
                ContextModel35,
                ContextModel36,
                ContextModel37,
                ContextModel38,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[ExcludeModel1] = None
    """
    ExcludeResources defines when this policy rule should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    generate: Optional[Generate] = None
    """
    Generation is used to create new resources.
    """
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]], Field(alias="imageExtractors")
    ] = None
    """
    ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
    This config is only valid for verifyImages rules.
    """
    match: MatchModel
    """
    MatchResources defines when this policy rule should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    mutate: Optional[Mutate] = None
    """
    Mutation is used to modify matching resources.
    """
    name: Annotated[str, Field(max_length=63)]
    """
    Name is a label to identify the rule, It must be unique within the policy.
    """
    preconditions: Optional[Any] = None
    """
    Preconditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
    of conditions (without `any` or `all` statements is supported for backwards compatibility but
    will be deprecated in the next major release.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    report_properties: Annotated[Optional[Dict[str, str]], Field(alias="reportProperties")] = None
    """
    ReportProperties are the additional properties from the rule that will be added to the policy report result
    """
    skip_background_requests: Annotated[Optional[bool], Field(alias="skipBackgroundRequests")] = (
        True
    )
    """
    SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
    The default value is set to "true", it must be set to "false" to apply
    generate and mutateExisting rules to those requests.
    """
    validate_: Annotated[Optional[ValidateModel1], Field(alias="validate")] = None
    """
    Validation is used to validate matching resources.
    """
    verify_images: Annotated[Optional[List[VerifyImageModel]], Field(alias="verifyImages")] = None
    """
    VerifyImages is used to verify image signatures and mutate them to add a digest
    """


class Autogen(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Autogen"]:
            return Autogen

        def build(self) -> "Autogen":
            return Autogen(**self._attrs)

        @overload
        def rules(self, value_or_callback: List[RuleModel], /) -> "Autogen.Builder": ...

        @overload
        def rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[RuleModel, RuleModel.Builder]],
                GenericListBuilder[RuleModel, RuleModel.Builder] | List[RuleModel],
            ],
            /,
        ) -> "Autogen.Builder": ...

        @overload
        def rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[RuleModel.Builder]: ...

        def rules(self, value_or_callback=None, /):
            """
            Rules is a list of Rule instances. It contains auto generated rules added for pod controllers
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[RuleModel.Builder]()
                context._parent_builder = self
                context._field_name = "rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(RuleModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("rules", value)

    class BuilderContext(BuilderContextBase["Autogen.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Autogen.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Autogen."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Autogen", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Autogen.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    rules: Optional[List[RuleModel]] = None
    """
    Rules is a list of Rule instances. It contains auto generated rules added for pod controllers
    """


class ConditionModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConditionModel1"]:
            return ConditionModel1

        def build(self) -> "ConditionModel1":
            return ConditionModel1(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: Literal["True", "False", "Unknown"], /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["ConditionModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConditionModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConditionModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConditionModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConditionModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another.
    This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: Annotated[str, Field(max_length=32768)]
    """
    message is a human readable message indicating details about the transition.
    This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration", ge=0)] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition.
    Producers of specific condition types may define expected values and meanings for this field,
    and whether the values are considered a guaranteed API.
    The value should be a CamelCase string.
    This field may not be empty.
    """
    status: Literal["True", "False", "Unknown"]
    """
    status of the condition, one of True, False, Unknown.
    """
    type: Annotated[
        str,
        Field(
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class Rulecount(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Rulecount"]:
            return Rulecount

        def build(self) -> "Rulecount":
            return Rulecount(**self._attrs)

        def generate(self, value: int, /) -> Self:
            """
            Count for generate rules in policy
            """
            return self._set("generate", value)

        def mutate(self, value: int, /) -> Self:
            """
            Count for mutate rules in policy
            """
            return self._set("mutate", value)

        def validate_(self, value: int, /) -> Self:
            """
            Count for validate rules in policy
            """
            return self._set("validate_", value)

        def verifyimages(self, value: int, /) -> Self:
            """
            Count for verify image rules in policy
            """
            return self._set("verifyimages", value)

    class BuilderContext(BuilderContextBase["Rulecount.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Rulecount.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Rulecount."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Rulecount", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Rulecount.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    generate: int
    """
    Count for generate rules in policy
    """
    mutate: int
    """
    Count for mutate rules in policy
    """
    validate_: Annotated[int, Field(alias="validate")]
    """
    Count for validate rules in policy
    """
    verifyimages: int
    """
    Count for verify image rules in policy
    """


class Validatingadmissionpolicy(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Validatingadmissionpolicy"]:
            return Validatingadmissionpolicy

        def build(self) -> "Validatingadmissionpolicy":
            return Validatingadmissionpolicy(**self._attrs)

        def generated(self, value: bool, /) -> Self:
            """
            Generated indicates whether a validating admission policy is generated from the policy or not
            """
            return self._set("generated", value)

        def message(self, value: str, /) -> Self:
            """
            Message is a human readable message indicating details about the generation of validating admission policy
            It is an empty string when validating admission policy is successfully generated.
            """
            return self._set("message", value)

    class BuilderContext(BuilderContextBase["Validatingadmissionpolicy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Validatingadmissionpolicy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Validatingadmissionpolicy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Validatingadmissionpolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Validatingadmissionpolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    generated: bool
    """
    Generated indicates whether a validating admission policy is generated from the policy or not
    """
    message: str
    """
    Message is a human readable message indicating details about the generation of validating admission policy
    It is an empty string when validating admission policy is successfully generated.
    """


class ClusterPolicyStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterPolicyStatus"]:
            return ClusterPolicyStatus

        def build(self) -> "ClusterPolicyStatus":
            return ClusterPolicyStatus(**self._attrs)

        @overload
        def autogen(
            self, value_or_callback: Optional[Autogen], /
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def autogen(
            self,
            value_or_callback: Callable[[Autogen.Builder], Autogen.Builder | Autogen],
            /,
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def autogen(self, value_or_callback: Never = ...) -> "Autogen.BuilderContext": ...

        def autogen(self, value_or_callback=None, /):
            """
            AutogenStatus contains autogen status information.
            """
            if self._in_context and value_or_callback is None:
                context = Autogen.BuilderContext()
                context._parent_builder = self
                context._field_name = "autogen"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Autogen.builder())
                if isinstance(output, Autogen.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("autogen", value)

        @overload
        def conditions(
            self, value_or_callback: List[ConditionModel1], /
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ConditionModel1, ConditionModel1.Builder]],
                GenericListBuilder[ConditionModel1, ConditionModel1.Builder]
                | List[ConditionModel1],
            ],
            /,
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ConditionModel1.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ConditionModel1.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConditionModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def ready(self, value: Optional[bool], /) -> Self:
            """
            Deprecated in favor of Conditions
            """
            return self._set("ready", value)

        @overload
        def rulecount(
            self, value_or_callback: Optional[Rulecount], /
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def rulecount(
            self,
            value_or_callback: Callable[[Rulecount.Builder], Rulecount.Builder | Rulecount],
            /,
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def rulecount(self, value_or_callback: Never = ...) -> "Rulecount.BuilderContext": ...

        def rulecount(self, value_or_callback=None, /):
            """
            RuleCountStatus contains four variables which describes counts for
            validate, generate, mutate and verify images rules
            """
            if self._in_context and value_or_callback is None:
                context = Rulecount.BuilderContext()
                context._parent_builder = self
                context._field_name = "rulecount"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rulecount.builder())
                if isinstance(output, Rulecount.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("rulecount", value)

        @overload
        def validatingadmissionpolicy(
            self, value_or_callback: Optional[Validatingadmissionpolicy], /
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def validatingadmissionpolicy(
            self,
            value_or_callback: Callable[
                [Validatingadmissionpolicy.Builder],
                Validatingadmissionpolicy.Builder | Validatingadmissionpolicy,
            ],
            /,
        ) -> "ClusterPolicyStatus.Builder": ...

        @overload
        def validatingadmissionpolicy(
            self, value_or_callback: Never = ...
        ) -> "Validatingadmissionpolicy.BuilderContext": ...

        def validatingadmissionpolicy(self, value_or_callback=None, /):
            """
            ValidatingAdmissionPolicy contains status information
            """
            if self._in_context and value_or_callback is None:
                context = Validatingadmissionpolicy.BuilderContext()
                context._parent_builder = self
                context._field_name = "validatingadmissionpolicy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Validatingadmissionpolicy.builder())
                if isinstance(output, Validatingadmissionpolicy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validatingadmissionpolicy", value)

    class BuilderContext(BuilderContextBase["ClusterPolicyStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterPolicyStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterPolicyStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterPolicyStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterPolicyStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    autogen: Optional[Autogen] = None
    """
    AutogenStatus contains autogen status information.
    """
    conditions: Optional[List[ConditionModel1]] = None
    ready: Optional[bool] = None
    """
    Deprecated in favor of Conditions
    """
    rulecount: Optional[Rulecount] = None
    """
    RuleCountStatus contains four variables which describes counts for
    validate, generate, mutate and verify images rules
    """
    validatingadmissionpolicy: Optional[Validatingadmissionpolicy] = None
    """
    ValidatingAdmissionPolicy contains status information
    """


class ContextModel59(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel59"]:
            return ContextModel59

        def build(self) -> "ContextModel59":
            return ContextModel59(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel59.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel59.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel59.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel59.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel59.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel59.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel59.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel59.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel59.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel59.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel59.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel59.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel59."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel59", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel59.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel60(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel60"]:
            return ContextModel60

        def build(self) -> "ContextModel60":
            return ContextModel60(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel60.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel60.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel60.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel60.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel60.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel60.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel60.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel60.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel60.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel60.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel60.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel60.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel60."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel60", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel60.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel61(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel61"]:
            return ContextModel61

        def build(self) -> "ContextModel61":
            return ContextModel61(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel61.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel61.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel61.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel61.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel61.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel61.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel61.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel61.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel61.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel61.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel61.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel61.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel61."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel61", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel61.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel62(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel62"]:
            return ContextModel62

        def build(self) -> "ContextModel62":
            return ContextModel62(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel62.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel62.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel62.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel62.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel62.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel62.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel62.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel62.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel3, /) -> "ContextModel62.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel62.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel62.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel62.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel62."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel62", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel62.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel3
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel63(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel63"]:
            return ContextModel63

        def build(self) -> "ContextModel63":
            return ContextModel63(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel63.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel63.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel63.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel63.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel63.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel63.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel63.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel63.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel63.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel63.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel63.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel63.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel63."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel63", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel63.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel12(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel12"]:
            return AllModel12

        def build(self) -> "AllModel12":
            return AllModel12(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel12.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel12.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel12.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel12.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel12.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel12.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel12."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel12", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel12.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel13(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel13"]:
            return AnyModel13

        def build(self) -> "AnyModel13":
            return AnyModel13(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel13.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel13.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel13.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel13.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel13.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel13.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel13."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel13", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel13.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ExcludeModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel3"]:
            return ExcludeModel3

        def build(self) -> "ExcludeModel3":
            return ExcludeModel3(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel12], /) -> "ExcludeModel3.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel12, AllModel12.Builder]],
                GenericListBuilder[AllModel12, AllModel12.Builder] | List[AllModel12],
            ],
            /,
        ) -> "ExcludeModel3.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel12.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel12.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel12.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel13], /) -> "ExcludeModel3.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel13, AnyModel13.Builder]],
                GenericListBuilder[AnyModel13, AnyModel13.Builder] | List[AnyModel13],
            ],
            /,
        ) -> "ExcludeModel3.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel13.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel13.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel13.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["ExcludeModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel12]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel13]] = None
    """
    Any allows specifying resources which will be ORed
    """


class ContextModel64(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel64"]:
            return ContextModel64

        def build(self) -> "ContextModel64":
            return ContextModel64(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel64.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel64.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel64.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel64.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel64.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel64.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel64.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel64.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel64.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel64.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel64.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel64.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel64."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel64", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel64.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel65(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel65"]:
            return ContextModel65

        def build(self) -> "ContextModel65":
            return ContextModel65(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel65.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel65.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel65.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel65.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel65.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel65.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel65.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel65.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel65.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel65.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel65.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel65.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel65."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel65", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel65.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel66(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel66"]:
            return ContextModel66

        def build(self) -> "ContextModel66":
            return ContextModel66(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel66.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel66.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel66.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel66.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel66.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel66.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel66.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel66.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel66.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel66.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel66.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel66.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel66."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel66", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel66.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel67(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel67"]:
            return ContextModel67

        def build(self) -> "ContextModel67":
            return ContextModel67(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel67.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel67.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel67.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel67.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel67.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel67.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel67.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel67.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel3, /) -> "ContextModel67.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel67.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel67.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel67.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel67."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel67", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel67.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel3
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel68(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel68"]:
            return ContextModel68

        def build(self) -> "ContextModel68":
            return ContextModel68(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel68.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel68.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel68.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel68.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel68.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel68.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel68.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel68.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel68.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel68.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel68.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel68.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel68."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel68", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel68.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel13(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel13"]:
            return AllModel13

        def build(self) -> "AllModel13":
            return AllModel13(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel13.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel13.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel13."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel13", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel13.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel14(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel14"]:
            return AnyModel14

        def build(self) -> "AnyModel14":
            return AnyModel14(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel14.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel14.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel14."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel14", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel14.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel5"]:
            return ForeachModel5

        def build(self) -> "ForeachModel5":
            return ForeachModel5(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        @overload
        def clone(self, value_or_callback: Optional[Clone], /) -> "ForeachModel5.Builder": ...

        @overload
        def clone(
            self, value_or_callback: Callable[[Clone.Builder], Clone.Builder | Clone], /
        ) -> "ForeachModel5.Builder": ...

        @overload
        def clone(self, value_or_callback: Never = ...) -> "Clone.BuilderContext": ...

        def clone(self, value_or_callback=None, /):
            """
            Clone specifies the source resource used to populate each generated resource.
            At most one of Data or Clone can be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            if self._in_context and value_or_callback is None:
                context = Clone.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Clone.builder())
                if isinstance(output, Clone.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone", value)

        @overload
        def clone_list(
            self, value_or_callback: Optional[CloneList], /
        ) -> "ForeachModel5.Builder": ...

        @overload
        def clone_list(
            self,
            value_or_callback: Callable[[CloneList.Builder], CloneList.Builder | CloneList],
            /,
        ) -> "ForeachModel5.Builder": ...

        @overload
        def clone_list(self, value_or_callback: Never = ...) -> "CloneList.BuilderContext": ...

        def clone_list(self, value_or_callback=None, /):
            """
            CloneList specifies the list of source resource used to populate each generated resource.
            """
            if self._in_context and value_or_callback is None:
                context = CloneList.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone_list"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CloneList.builder())
                if isinstance(output, CloneList.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone_list", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel64,
                        ContextModel65,
                        ContextModel66,
                        ContextModel67,
                        ContextModel68,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def data(self, value: Optional[Any], /) -> Self:
            """
            Data provides the resource declaration used to populate each generated resource.
            At most one of Data or Clone must be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            return self._set("data", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel5.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel5.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["ForeachModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    clone: Optional[Clone] = None
    """
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    clone_list: Annotated[Optional[CloneList], Field(alias="cloneList")] = None
    """
    CloneList specifies the list of source resource used to populate each generated resource.
    """
    context: Optional[
        List[
            Union[
                ContextModel64,
                ContextModel65,
                ContextModel66,
                ContextModel67,
                ContextModel68,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    data: Optional[Any] = None
    """
    Data provides the resource declaration used to populate each generated resource.
    At most one of Data or Clone must be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class AllModel14(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel14"]:
            return AllModel14

        def build(self) -> "AllModel14":
            return AllModel14(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel14.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel14.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel14.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel14.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel14.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel14.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel14."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel14", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel14.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel15(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel15"]:
            return AnyModel15

        def build(self) -> "AnyModel15":
            return AnyModel15(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel15.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel15.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel15.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel15.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel15.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel15.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel15."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel15", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel15.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class MatchModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchModel1"]:
            return MatchModel1

        def build(self) -> "MatchModel1":
            return MatchModel1(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel14], /) -> "MatchModel1.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel14, AllModel14.Builder]],
                GenericListBuilder[AllModel14, AllModel14.Builder] | List[AllModel14],
            ],
            /,
        ) -> "MatchModel1.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel14.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel14.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel14.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel15], /) -> "MatchModel1.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel15, AnyModel15.Builder]],
                GenericListBuilder[AnyModel15, AnyModel15.Builder] | List[AnyModel15],
            ],
            /,
        ) -> "MatchModel1.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel15.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel15.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel15.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["MatchModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel14]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel15]] = None
    """
    Any allows specifying resources which will be ORed
    """


class ContextModel69(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel69"]:
            return ContextModel69

        def build(self) -> "ContextModel69":
            return ContextModel69(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel69.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel69.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel69.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel69.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel69.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel69.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel69.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel69.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel69.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel69.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel69.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel69.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel69."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel69", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel69.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel70(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel70"]:
            return ContextModel70

        def build(self) -> "ContextModel70":
            return ContextModel70(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel70.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel70.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel70.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel70.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel70.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel70.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel70.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel70.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel70.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel70.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel70.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel70.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel70."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel70", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel70.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel71(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel71"]:
            return ContextModel71

        def build(self) -> "ContextModel71":
            return ContextModel71(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel71.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel71.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel71.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel71.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel71.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel71.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel71.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel71.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel71.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel71.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel71.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel71.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel71."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel71", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel71.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel72(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel72"]:
            return ContextModel72

        def build(self) -> "ContextModel72":
            return ContextModel72(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel72.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel72.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel72.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel72.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel72.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel72.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel72.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel72.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel3, /) -> "ContextModel72.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel72.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel72.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel72.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel72."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel72", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel72.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel3
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel73(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel73"]:
            return ContextModel73

        def build(self) -> "ContextModel73":
            return ContextModel73(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel73.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel73.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel73.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel73.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel73.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel73.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel73.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel73.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel73.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel73.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel73.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel73.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel73."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel73", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel73.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel15(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel15"]:
            return AllModel15

        def build(self) -> "AllModel15":
            return AllModel15(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel15.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel15.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel15."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel15", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel15.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel16(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel16"]:
            return AnyModel16

        def build(self) -> "AnyModel16":
            return AnyModel16(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel16.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel16.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel16."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel16", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel16.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel6"]:
            return ForeachModel6

        def build(self) -> "ForeachModel6":
            return ForeachModel6(**self._attrs)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel69,
                        ContextModel70,
                        ContextModel71,
                        ContextModel72,
                        ContextModel73,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def order(self, value: Optional[Literal["Ascending", "Descending"]], /) -> Self:
            """
            Order defines the iteration order on the list.
            Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
            """
            return self._set("order", value)

        def patch_strategic_merge(self, value: Optional[Any], /) -> Self:
            """
            PatchStrategicMerge is a strategic merge patch used to modify resources.
            See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
            and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
            """
            return self._set("patch_strategic_merge", value)

        def patches_json6902(self, value: Optional[str], /) -> Self:
            """
            PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
            See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
            """
            return self._set("patches_json6902", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel1], /
        ) -> "ForeachModel6.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel1.Builder],
                PreconditionsModel1.Builder | PreconditionsModel1,
            ],
            /,
        ) -> "ForeachModel6.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel1.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel1.builder())
                if isinstance(output, PreconditionsModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    context: Optional[
        List[
            Union[
                ContextModel69,
                ContextModel70,
                ContextModel71,
                ContextModel72,
                ContextModel73,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    order: Optional[Literal["Ascending", "Descending"]] = None
    """
    Order defines the iteration order on the list.
    Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
    """
    patch_strategic_merge: Annotated[Optional[Any], Field(alias="patchStrategicMerge")] = None
    """
    PatchStrategicMerge is a strategic merge patch used to modify resources.
    See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
    and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    """
    patches_json6902: Annotated[Optional[str], Field(alias="patchesJson6902")] = None
    """
    PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
    See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    """
    preconditions: Optional[PreconditionsModel1] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ContextModel74(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel74"]:
            return ContextModel74

        def build(self) -> "ContextModel74":
            return ContextModel74(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel74.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel74.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel74.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel74.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel74.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel74.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel74.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel74.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel74.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel74.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel74.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel74.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel74."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel74", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel74.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel75(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel75"]:
            return ContextModel75

        def build(self) -> "ContextModel75":
            return ContextModel75(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel75.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel75.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel75.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel75.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel75.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel75.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel75.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel75.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel75.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel75.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel75.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel75.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel75."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel75", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel75.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel76(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel76"]:
            return ContextModel76

        def build(self) -> "ContextModel76":
            return ContextModel76(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel76.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel76.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel76.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel76.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel76.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel76.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel76.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel76.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel76.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel76.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel76.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel76.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel76."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel76", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel76.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel77(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel77"]:
            return ContextModel77

        def build(self) -> "ContextModel77":
            return ContextModel77(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel77.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel77.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel77.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel77.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel77.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel77.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel77.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel77.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel3, /) -> "ContextModel77.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel77.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel77.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel77.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel77."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel77", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel77.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel3
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel78(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel78"]:
            return ContextModel78

        def build(self) -> "ContextModel78":
            return ContextModel78(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel78.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel78.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel78.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel78.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel78.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel78.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel78.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel78.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel3], /
        ) -> "ContextModel78.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel3.Builder], VariableModel3.Builder | VariableModel3
            ],
            /,
        ) -> "ContextModel78.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel3.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel3.builder())
                if isinstance(output, VariableModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel78.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel78.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel78."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel78", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel78.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel3] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel16(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel16"]:
            return AllModel16

        def build(self) -> "AllModel16":
            return AllModel16(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel16.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel16.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel16."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel16", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel16.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel17(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel17"]:
            return AnyModel17

        def build(self) -> "AnyModel17":
            return AnyModel17(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel17.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel17.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel17."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel17", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel17.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class PreconditionsModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PreconditionsModel2"]:
            return PreconditionsModel2

        def build(self) -> "PreconditionsModel2":
            return PreconditionsModel2(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel16], /) -> "PreconditionsModel2.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel16, AllModel16.Builder]],
                GenericListBuilder[AllModel16, AllModel16.Builder] | List[AllModel16],
            ],
            /,
        ) -> "PreconditionsModel2.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel16.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel16.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel16.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel17], /) -> "PreconditionsModel2.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel17, AnyModel17.Builder]],
                GenericListBuilder[AnyModel17, AnyModel17.Builder] | List[AnyModel17],
            ],
            /,
        ) -> "PreconditionsModel2.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel17.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel17.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel17.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["PreconditionsModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PreconditionsModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PreconditionsModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PreconditionsModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PreconditionsModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel16]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass.
    """
    any: Optional[List[AnyModel17]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass.
    """


class VariableModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel4"]:
            return VariableModel4

        def build(self) -> "VariableModel4":
            return VariableModel4(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression is the expression that will be evaluated as the value of the variable.
            The CEL expression has access to the same identifiers as the CEL expressions in Validation.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
            The variable can be accessed in other expressions through `variables`
            For example, if name is "foo", the variable will be available as `variables.foo`
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["VariableModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression is the expression that will be evaluated as the value of the variable.
    The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    """
    name: str
    """
    Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
    The variable can be accessed in other expressions through `variables`
    For example, if name is "foo", the variable will be available as `variables.foo`
    """


class DenyModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DenyModel1"]:
            return DenyModel1

        def build(self) -> "DenyModel1":
            return DenyModel1(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: Optional[Conditions], /
        ) -> "DenyModel1.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[[Conditions.Builder], Conditions.Builder | Conditions],
            /,
        ) -> "DenyModel1.Builder": ...

        @overload
        def conditions(self, value_or_callback: Never = ...) -> "Conditions.BuilderContext": ...

        def conditions(self, value_or_callback=None, /):
            """
            Multiple conditions can be declared under an `any` or `all` statement.
            See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
            """
            if self._in_context and value_or_callback is None:
                context = Conditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Conditions.builder())
                if isinstance(output, Conditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

    class BuilderContext(BuilderContextBase["DenyModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DenyModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DenyModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DenyModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DenyModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Conditions] = None
    """
    Multiple conditions can be declared under an `any` or `all` statement.
    See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


class VariableModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel5"]:
            return VariableModel5

        def build(self) -> "VariableModel5":
            return VariableModel5(**self._attrs)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the variable may take if the JMESPath
            expression evaluates to nil
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath Expression that can be used to
            transform the variable.
            """
            return self._set("jmes_path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is any arbitrary JSON object representable in YAML or JSON form.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["VariableModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the variable may take if the JMESPath
    expression evaluates to nil
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath Expression that can be used to
    transform the variable.
    """
    value: Optional[Any] = None
    """
    Value is any arbitrary JSON object representable in YAML or JSON form.
    """


class ContextModel79(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel79"]:
            return ContextModel79

        def build(self) -> "ContextModel79":
            return ContextModel79(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel79.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel79.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel79.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel79.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel79.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel79.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel79.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel79.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel79.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel79.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel79.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel79.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel79."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel79", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel79.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel80(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel80"]:
            return ContextModel80

        def build(self) -> "ContextModel80":
            return ContextModel80(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel80.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel80.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel80.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel80.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel80.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel80.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel80.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel80.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel80.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel80.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel80.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel80.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel80."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel80", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel80.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel81(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel81"]:
            return ContextModel81

        def build(self) -> "ContextModel81":
            return ContextModel81(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel81.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel81.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel81.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel81.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel81.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel81.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel81.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel81.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel81.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel81.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel81.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel81.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel81."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel81", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel81.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel82(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel82"]:
            return ContextModel82

        def build(self) -> "ContextModel82":
            return ContextModel82(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel82.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel82.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel82.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel82.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel82.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel82.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel82.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel82.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel5, /) -> "ContextModel82.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel82.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel82.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel82.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel82."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel82", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel82.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel5
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel83(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel83"]:
            return ContextModel83

        def build(self) -> "ContextModel83":
            return ContextModel83(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel83.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel83.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel83.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel83.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel83.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel83.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel83.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel83.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel83.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel83.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel83.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel83.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel83."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel83", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel83.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class DenyModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DenyModel2"]:
            return DenyModel2

        def build(self) -> "DenyModel2":
            return DenyModel2(**self._attrs)

        def conditions(self, value: Optional[Any], /) -> Self:
            """
            Multiple conditions can be declared under an `any` or `all` statement. A direct list
            of conditions (without `any` or `all` statements) is also supported for backwards compatibility
            but will be deprecated in the next major release.
            See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
            """
            return self._set("conditions", value)

    class BuilderContext(BuilderContextBase["DenyModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DenyModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DenyModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DenyModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DenyModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[Any] = None
    """
    Multiple conditions can be declared under an `any` or `all` statement. A direct list
    of conditions (without `any` or `all` statements) is also supported for backwards compatibility
    but will be deprecated in the next major release.
    See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
    """


class AllModel17(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel17"]:
            return AllModel17

        def build(self) -> "AllModel17":
            return AllModel17(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel17.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel17.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel17."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel17", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel17.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel18(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel18"]:
            return AnyModel18

        def build(self) -> "AnyModel18":
            return AnyModel18(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel18.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel18.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel18."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel18", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel18.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class PreconditionsModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PreconditionsModel3"]:
            return PreconditionsModel3

        def build(self) -> "PreconditionsModel3":
            return PreconditionsModel3(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel17], /) -> "PreconditionsModel3.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel17, AllModel17.Builder]],
                GenericListBuilder[AllModel17, AllModel17.Builder] | List[AllModel17],
            ],
            /,
        ) -> "PreconditionsModel3.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel17.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel17.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel17.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel18], /) -> "PreconditionsModel3.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel18, AnyModel18.Builder]],
                GenericListBuilder[AnyModel18, AnyModel18.Builder] | List[AnyModel18],
            ],
            /,
        ) -> "PreconditionsModel3.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel18.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel18.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel18.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["PreconditionsModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PreconditionsModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PreconditionsModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PreconditionsModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PreconditionsModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel17]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass
    """
    any: Optional[List[AnyModel18]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass
    """


class ForeachModel7(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel7"]:
            return ForeachModel7

        def build(self) -> "ForeachModel7":
            return ForeachModel7(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel79,
                        ContextModel80,
                        ContextModel81,
                        ContextModel82,
                        ContextModel83,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel2], /) -> "ForeachModel7.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel2.Builder], DenyModel2.Builder | DenyModel2],
            /,
        ) -> "ForeachModel7.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel2.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel2.builder())
                if isinstance(output, DenyModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def element_scope(self, value: Optional[bool], /) -> Self:
            """
            ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
            When set to "false", "request.object" is used as the validation scope within the foreach
            block to allow referencing other elements in the subtree.
            """
            return self._set("element_scope", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel3], /
        ) -> "ForeachModel7.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel3.Builder],
                PreconditionsModel3.Builder | PreconditionsModel3,
            ],
            /,
        ) -> "ForeachModel7.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel3.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel3.builder())
                if isinstance(output, PreconditionsModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel7.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel7.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel7."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel7", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel7.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    context: Optional[
        List[
            Union[
                ContextModel79,
                ContextModel80,
                ContextModel81,
                ContextModel82,
                ContextModel83,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    deny: Optional[DenyModel2] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    element_scope: Annotated[Optional[bool], Field(alias="elementScope")] = None
    """
    ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
    When set to "false", "request.object" is used as the validation scope within the foreach
    block to allow referencing other elements in the subtree.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    preconditions: Optional[PreconditionsModel3] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ExcludeModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel4"]:
            return ExcludeModel4

        def build(self) -> "ExcludeModel4":
            return ExcludeModel4(**self._attrs)

        def control_name(
            self,
            value: Literal[
                "HostProcess",
                "Host Namespaces",
                "Privileged Containers",
                "Capabilities",
                "HostPath Volumes",
                "Host Ports",
                "AppArmor",
                "SELinux",
                "/proc Mount Type",
                "Seccomp",
                "Sysctls",
                "Volume Types",
                "Privilege Escalation",
                "Running as Non-root",
                "Running as Non-root user",
            ],
            /,
        ) -> Self:
            """
            ControlName specifies the name of the Pod Security Standard control.
            See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
            """
            return self._set("control_name", value)

        def images(self, value: Optional[List[str]], /) -> Self:
            """
            Images selects matching containers and applies the container level PSS.
            Each image is the image name consisting of the registry address, repository, image, and tag.
            Empty list matches no containers, PSS checks are applied at the pod level only.
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("images", value)

        def restricted_field(self, value: Optional[str], /) -> Self:
            """
            RestrictedField selects the field for the given Pod Security Standard control.
            When not set, all restricted fields for the control are selected.
            """
            return self._set("restricted_field", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            Values defines the allowed values that can be excluded.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["ExcludeModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(alias="controlName"),
    ]
    """
    ControlName specifies the name of the Pod Security Standard control.
    See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    """
    images: Optional[List[str]] = None
    """
    Images selects matching containers and applies the container level PSS.
    Each image is the image name consisting of the registry address, repository, image, and tag.
    Empty list matches no containers, PSS checks are applied at the pod level only.
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    restricted_field: Annotated[Optional[str], Field(alias="restrictedField")] = None
    """
    RestrictedField selects the field for the given Pod Security Standard control.
    When not set, all restricted fields for the control are selected.
    """
    values: Optional[List[str]] = None
    """
    Values defines the allowed values that can be excluded.
    """


class ValidateModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel3"]:
            return ValidateModel3

        def build(self) -> "ValidateModel3":
            return ValidateModel3(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def assert_(self, value: Optional[Dict[str, Any]], /) -> Self:
            """
            Assert defines a kyverno-json assertion tree.
            """
            return self._set("assert_", value)

        @overload
        def cel(self, value_or_callback: Optional[Cel], /) -> "ValidateModel3.Builder": ...

        @overload
        def cel(
            self, value_or_callback: Callable[[Cel.Builder], Cel.Builder | Cel], /
        ) -> "ValidateModel3.Builder": ...

        @overload
        def cel(self, value_or_callback: Never = ...) -> "Cel.BuilderContext": ...

        def cel(self, value_or_callback=None, /):
            """
            CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
            """
            if self._in_context and value_or_callback is None:
                context = Cel.BuilderContext()
                context._parent_builder = self
                context._field_name = "cel"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Cel.builder())
                if isinstance(output, Cel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel1], /) -> "ValidateModel3.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel1.Builder], DenyModel1.Builder | DenyModel1],
            /,
        ) -> "ValidateModel3.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel1.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel1.builder())
                if isinstance(output, DenyModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            FailureAction defines if a validation policy rule violation should block
            the admission review request (Enforce), or allow (Audit) the admission review request
            and report an error in a policy report. Optional.
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        @overload
        def failure_action_overrides(
            self, value_or_callback: List[FailureActionOverride], /
        ) -> "ValidateModel3.Builder": ...

        @overload
        def failure_action_overrides(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]],
                GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]
                | List[FailureActionOverride],
            ],
            /,
        ) -> "ValidateModel3.Builder": ...

        @overload
        def failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[FailureActionOverride.Builder]: ...

        def failure_action_overrides(self, value_or_callback=None, /):
            """
            FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
            namespace-wise. It overrides FailureAction for the specified namespaces.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[FailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(FailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("failure_action_overrides", value)

        @overload
        def foreach(
            self, value_or_callback: List[ForeachModel7], /
        ) -> "ValidateModel3.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ForeachModel7, ForeachModel7.Builder]],
                GenericListBuilder[ForeachModel7, ForeachModel7.Builder] | List[ForeachModel7],
            ],
            /,
        ) -> "ValidateModel3.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ForeachModel7.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ForeachModel7.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForeachModel7.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        @overload
        def manifests(
            self, value_or_callback: Optional[Manifests], /
        ) -> "ValidateModel3.Builder": ...

        @overload
        def manifests(
            self,
            value_or_callback: Callable[[Manifests.Builder], Manifests.Builder | Manifests],
            /,
        ) -> "ValidateModel3.Builder": ...

        @overload
        def manifests(self, value_or_callback: Never = ...) -> "Manifests.BuilderContext": ...

        def manifests(self, value_or_callback=None, /):
            """
            Manifest specifies conditions for manifest verification
            """
            if self._in_context and value_or_callback is None:
                context = Manifests.BuilderContext()
                context._parent_builder = self
                context._field_name = "manifests"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Manifests.builder())
                if isinstance(output, Manifests.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("manifests", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def pod_security(
            self, value_or_callback: Optional[PodSecurity], /
        ) -> "ValidateModel3.Builder": ...

        @overload
        def pod_security(
            self,
            value_or_callback: Callable[[PodSecurity.Builder], PodSecurity.Builder | PodSecurity],
            /,
        ) -> "ValidateModel3.Builder": ...

        @overload
        def pod_security(self, value_or_callback: Never = ...) -> "PodSecurity.BuilderContext": ...

        def pod_security(self, value_or_callback=None, /):
            """
            PodSecurity applies exemptions for Kubernetes Pod Security admission
            by specifying exclusions for Pod Security Standards controls.
            """
            if self._in_context and value_or_callback is None:
                context = PodSecurity.BuilderContext()
                context._parent_builder = self
                context._field_name = "pod_security"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PodSecurity.builder())
                if isinstance(output, PodSecurity.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("pod_security", value)

    class BuilderContext(BuilderContextBase["ValidateModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    assert_: Annotated[Optional[Dict[str, Any]], Field(alias="assert")] = None
    """
    Assert defines a kyverno-json assertion tree.
    """
    cel: Optional[Cel] = None
    """
    CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
    """
    deny: Optional[DenyModel1] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    FailureAction defines if a validation policy rule violation should block
    the admission review request (Enforce), or allow (Audit) the admission review request
    and report an error in a policy report. Optional.
    Allowed values are Audit or Enforce.
    """
    failure_action_overrides: Annotated[
        Optional[List[FailureActionOverride]], Field(alias="failureActionOverrides")
    ] = None
    """
    FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
    namespace-wise. It overrides FailureAction for the specified namespaces.
    """
    foreach: Optional[List[ForeachModel7]] = None
    """
    ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    manifests: Optional[Manifests] = None
    """
    Manifest specifies conditions for manifest verification
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    pod_security: Annotated[Optional[PodSecurity], Field(alias="podSecurity")] = None
    """
    PodSecurity applies exemptions for Kubernetes Pod Security admission
    by specifying exclusions for Pod Security Standards controls.
    """


class ConditionModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConditionModel2"]:
            return ConditionModel2

        def build(self) -> "ConditionModel2":
            return ConditionModel2(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel17], /) -> "ConditionModel2.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel17, AllModel17.Builder]],
                GenericListBuilder[AllModel17, AllModel17.Builder] | List[AllModel17],
            ],
            /,
        ) -> "ConditionModel2.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel17.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            AllConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, all of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel17.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel17.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel18], /) -> "ConditionModel2.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel18, AnyModel18.Builder]],
                GenericListBuilder[AnyModel18, AnyModel18.Builder] | List[AnyModel18],
            ],
            /,
        ) -> "ConditionModel2.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel18.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            AnyConditions enable variable-based conditional rule execution. This is useful for
            finer control of when an rule is applied. A condition can reference object data
            using JMESPath notation.
            Here, at least one of the conditions need to pass
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel18.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel18.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["ConditionModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConditionModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConditionModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConditionModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConditionModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel17]] = None
    """
    AllConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, all of the conditions need to pass
    """
    any: Optional[List[AnyModel18]] = None
    """
    AnyConditions enable variable-based conditional rule execution. This is useful for
    finer control of when an rule is applied. A condition can reference object data
    using JMESPath notation.
    Here, at least one of the conditions need to pass
    """


class ValidateModel4(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel4"]:
            return ValidateModel4

        def build(self) -> "ValidateModel4":
            return ValidateModel4(**self._attrs)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel2], /) -> "ValidateModel4.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel2.Builder], DenyModel2.Builder | DenyModel2],
            /,
        ) -> "ValidateModel4.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel2.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel2.builder())
                if isinstance(output, DenyModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

    class BuilderContext(BuilderContextBase["ValidateModel4.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel4.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel4."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel4", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel4.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deny: Optional[DenyModel2] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """


class VerifyImageModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VerifyImageModel1"]:
            return VerifyImageModel1

        def build(self) -> "VerifyImageModel1":
            return VerifyImageModel1(**self._attrs)

        @overload
        def attestations(
            self, value_or_callback: List[Attestation], /
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def attestations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestation, Attestation.Builder]],
                GenericListBuilder[Attestation, Attestation.Builder] | List[Attestation],
            ],
            /,
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def attestations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestation.Builder]: ...

        def attestations(self, value_or_callback=None, /):
            """
            Attestations are optional checks for signed in-toto Statements used to verify the image.
            See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
            OCI registry and decodes them into a list of Statement declarations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestation.Builder]()
                context._parent_builder = self
                context._field_name = "attestations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestations", value)

        @overload
        def attestors(
            self, value_or_callback: List[Attestor], /
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specified the required attestors (i.e. authorities)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        def image_references(self, value: Optional[List[str]], /) -> Self:
            """
            ImageReferences is a list of matching image reference patterns. At least one pattern in the
            list must match the image for the rule to apply. Each image reference consists of a registry
            address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("image_references", value)

        @overload
        def image_registry_credentials(
            self, value_or_callback: Optional[ImageRegistryCredentials], /
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def image_registry_credentials(
            self,
            value_or_callback: Callable[
                [ImageRegistryCredentials.Builder],
                ImageRegistryCredentials.Builder | ImageRegistryCredentials,
            ],
            /,
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def image_registry_credentials(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistryCredentials.BuilderContext": ...

        def image_registry_credentials(self, value_or_callback=None, /):
            """
            ImageRegistryCredentials provides credentials that will be used for authentication with registry
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistryCredentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry_credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistryCredentials.builder())
                if isinstance(output, ImageRegistryCredentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry_credentials", value)

        def mutate_digest(self, value: Optional[bool], /) -> Self:
            """
            MutateDigest enables replacement of image tags with digests.
            Defaults to true.
            """
            return self._set("mutate_digest", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
            If specified Repository will override the default OCI image repository configured for the installation.
            The repository can also be overridden per Attestor or Attestation.
            """
            return self._set("repository", value)

        def required(self, value: Optional[bool], /) -> Self:
            """
            Required validates that images are verified i.e. have matched passed a signature or attestation check.
            """
            return self._set("required", value)

        def skip_image_references(self, value: Optional[List[str]], /) -> Self:
            """
            SkipImageReferences is a list of matching image reference patterns that should be skipped.
            At least one pattern in the list must match the image for the rule to be skipped. Each image reference
            consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("skip_image_references", value)

        def type(self, value: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]], /) -> Self:
            """
            Type specifies the method of signature validation. The allowed options
            are Cosign and Notary. By default Cosign is used if a type is not specified.
            """
            return self._set("type", value)

        def use_cache(self, value: Optional[bool], /) -> Self:
            """
            UseCache enables caching of image verify responses for this rule
            """
            return self._set("use_cache", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel4], /
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel4.Builder], ValidateModel4.Builder | ValidateModel4
            ],
            /,
        ) -> "VerifyImageModel1.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel4.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation checks conditions across multiple image
            verification attestations or context entries
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel4.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel4.builder())
                if isinstance(output, ValidateModel4.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        def verify_digest(self, value: Optional[bool], /) -> Self:
            """
            VerifyDigest validates that images have a digest.
            """
            return self._set("verify_digest", value)

    class BuilderContext(BuilderContextBase["VerifyImageModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VerifyImageModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VerifyImageModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VerifyImageModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VerifyImageModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    attestations: Optional[List[Attestation]] = None
    """
    Attestations are optional checks for signed in-toto Statements used to verify the image.
    See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
    OCI registry and decodes them into a list of Statement declarations.
    """
    attestors: Optional[List[Attestor]] = None
    """
    Attestors specified the required attestors (i.e. authorities)
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    Allowed values are Audit or Enforce.
    """
    image_references: Annotated[Optional[List[str]], Field(alias="imageReferences")] = None
    """
    ImageReferences is a list of matching image reference patterns. At least one pattern in the
    list must match the image for the rule to apply. Each image reference consists of a registry
    address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials], Field(alias="imageRegistryCredentials")
    ] = None
    """
    ImageRegistryCredentials provides credentials that will be used for authentication with registry
    """
    mutate_digest: Annotated[Optional[bool], Field(alias="mutateDigest")] = True
    """
    MutateDigest enables replacement of image tags with digests.
    Defaults to true.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
    If specified Repository will override the default OCI image repository configured for the installation.
    The repository can also be overridden per Attestor or Attestation.
    """
    required: Optional[bool] = True
    """
    Required validates that images are verified i.e. have matched passed a signature or attestation check.
    """
    skip_image_references: Annotated[Optional[List[str]], Field(alias="skipImageReferences")] = None
    """
    SkipImageReferences is a list of matching image reference patterns that should be skipped.
    At least one pattern in the list must match the image for the rule to be skipped. Each image reference
    consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    type: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]] = None
    """
    Type specifies the method of signature validation. The allowed options
    are Cosign and Notary. By default Cosign is used if a type is not specified.
    """
    use_cache: Annotated[Optional[bool], Field(alias="useCache")] = True
    """
    UseCache enables caching of image verify responses for this rule
    """
    validate_: Annotated[Optional[ValidateModel4], Field(alias="validate")] = None
    """
    Validation checks conditions across multiple image
    verification attestations or context entries
    """
    verify_digest: Annotated[Optional[bool], Field(alias="verifyDigest")] = True
    """
    VerifyDigest validates that images have a digest.
    """


class RuleModel1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["RuleModel1"]:
            return RuleModel1

        def build(self) -> "RuleModel1":
            return RuleModel1(**self._attrs)

        @overload
        def cel_preconditions(
            self, value_or_callback: List[CelPrecondition], /
        ) -> "RuleModel1.Builder": ...

        @overload
        def cel_preconditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[CelPrecondition, CelPrecondition.Builder]],
                GenericListBuilder[CelPrecondition, CelPrecondition.Builder]
                | List[CelPrecondition],
            ],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def cel_preconditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[CelPrecondition.Builder]: ...

        def cel_preconditions(self, value_or_callback=None, /):
            """
            CELPreconditions are used to determine if a policy rule should be applied by evaluating a
            set of CEL conditions. It can only be used with the validate.cel subrule
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[CelPrecondition.Builder]()
                context._parent_builder = self
                context._field_name = "cel_preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CelPrecondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel_preconditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel59,
                        ContextModel60,
                        ContextModel61,
                        ContextModel62,
                        ContextModel63,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(
            self, value_or_callback: Optional[ExcludeModel3], /
        ) -> "RuleModel1.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[
                [ExcludeModel3.Builder], ExcludeModel3.Builder | ExcludeModel3
            ],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "ExcludeModel3.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when this policy rule should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = ExcludeModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ExcludeModel3.builder())
                if isinstance(output, ExcludeModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def generate(self, value_or_callback: Optional[Generate], /) -> "RuleModel1.Builder": ...

        @overload
        def generate(
            self,
            value_or_callback: Callable[[Generate.Builder], Generate.Builder | Generate],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def generate(self, value_or_callback: Never = ...) -> "Generate.BuilderContext": ...

        def generate(self, value_or_callback=None, /):
            """
            Generation is used to create new resources.
            """
            if self._in_context and value_or_callback is None:
                context = Generate.BuilderContext()
                context._parent_builder = self
                context._field_name = "generate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Generate.builder())
                if isinstance(output, Generate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("generate", value)

        def image_extractors(self, value: Optional[Dict[str, List[ImageExtractor]]], /) -> Self:
            """
            ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
            This config is only valid for verifyImages rules.
            """
            return self._set("image_extractors", value)

        @overload
        def match(self, value_or_callback: MatchModel1, /) -> "RuleModel1.Builder": ...

        @overload
        def match(
            self,
            value_or_callback: Callable[[MatchModel1.Builder], MatchModel1.Builder | MatchModel1],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "MatchModel1.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when this policy rule should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = MatchModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchModel1.builder())
                if isinstance(output, MatchModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        @overload
        def mutate(self, value_or_callback: Optional[Mutate], /) -> "RuleModel1.Builder": ...

        @overload
        def mutate(
            self,
            value_or_callback: Callable[[Mutate.Builder], Mutate.Builder | Mutate],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def mutate(self, value_or_callback: Never = ...) -> "Mutate.BuilderContext": ...

        def mutate(self, value_or_callback=None, /):
            """
            Mutation is used to modify matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = Mutate.BuilderContext()
                context._parent_builder = self
                context._field_name = "mutate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Mutate.builder())
                if isinstance(output, Mutate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("mutate", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a label to identify the rule, It must be unique within the policy.
            """
            return self._set("name", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel2], /
        ) -> "RuleModel1.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel2.Builder],
                PreconditionsModel2.Builder | PreconditionsModel2,
            ],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel2.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            Preconditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel2.builder())
                if isinstance(output, PreconditionsModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def skip_background_requests(self, value: Optional[bool], /) -> Self:
            """
            SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
            The default value is set to "true", it must be set to "false" to apply
            generate and mutateExisting rules to those requests.
            """
            return self._set("skip_background_requests", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel3], /
        ) -> "RuleModel1.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel3.Builder], ValidateModel3.Builder | ValidateModel3
            ],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel3.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation is used to validate matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel3.builder())
                if isinstance(output, ValidateModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        @overload
        def verify_images(
            self, value_or_callback: List[VerifyImageModel1], /
        ) -> "RuleModel1.Builder": ...

        @overload
        def verify_images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[VerifyImageModel1, VerifyImageModel1.Builder]],
                GenericListBuilder[VerifyImageModel1, VerifyImageModel1.Builder]
                | List[VerifyImageModel1],
            ],
            /,
        ) -> "RuleModel1.Builder": ...

        @overload
        def verify_images(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[VerifyImageModel1.Builder]: ...

        def verify_images(self, value_or_callback=None, /):
            """
            VerifyImages is used to verify image signatures and mutate them to add a digest
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[VerifyImageModel1.Builder]()
                context._parent_builder = self
                context._field_name = "verify_images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VerifyImageModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("verify_images", value)

    class BuilderContext(BuilderContextBase["RuleModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = RuleModel1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for RuleModel1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["RuleModel1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RuleModel1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]], Field(alias="celPreconditions")
    ] = None
    """
    CELPreconditions are used to determine if a policy rule should be applied by evaluating a
    set of CEL conditions. It can only be used with the validate.cel subrule
    """
    context: Optional[
        List[
            Union[
                ContextModel59,
                ContextModel60,
                ContextModel61,
                ContextModel62,
                ContextModel63,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[ExcludeModel3] = None
    """
    ExcludeResources defines when this policy rule should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    generate: Optional[Generate] = None
    """
    Generation is used to create new resources.
    """
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]], Field(alias="imageExtractors")
    ] = None
    """
    ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
    This config is only valid for verifyImages rules.
    """
    match: MatchModel1
    """
    MatchResources defines when this policy rule should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    mutate: Optional[Mutate] = None
    """
    Mutation is used to modify matching resources.
    """
    name: Annotated[str, Field(max_length=63)]
    """
    Name is a label to identify the rule, It must be unique within the policy.
    """
    preconditions: Optional[PreconditionsModel2] = None
    """
    Preconditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    skip_background_requests: Annotated[Optional[bool], Field(alias="skipBackgroundRequests")] = (
        True
    )
    """
    SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
    The default value is set to "true", it must be set to "false" to apply
    generate and mutateExisting rules to those requests.
    """
    validate_: Annotated[Optional[ValidateModel3], Field(alias="validate")] = None
    """
    Validation is used to validate matching resources.
    """
    verify_images: Annotated[Optional[List[VerifyImageModel1]], Field(alias="verifyImages")] = None
    """
    VerifyImages is used to verify image signatures and mutate them to add a digest
    """


class PolicySpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PolicySpec"]:
            return PolicySpec

        def build(self) -> "PolicySpec":
            return PolicySpec(**self._attrs)

        def admission(self, value: Optional[bool], /) -> Self:
            """
            Admission controls if rules are applied during admission.
            Optional. Default value is "true".
            """
            return self._set("admission", value)

        def apply_rules(self, value: Optional[Literal["All", "One"]], /) -> Self:
            """
            ApplyRules controls how rules in a policy are applied. Rule are processed in
            the order of declaration. When set to `One` processing stops after a rule has
            been applied i.e. the rule matches and results in a pass, fail, or error. When
            set to `All` all rules in the policy are processed. The default is `All`.
            """
            return self._set("apply_rules", value)

        def background(self, value: Optional[bool], /) -> Self:
            """
            Background controls if rules are applied to existing resources during a background scan.
            Optional. Default value is "true". The value must be set to "false" if the policy rule
            uses variables that are only available in the admission review request (e.g. user name).
            """
            return self._set("background", value)

        def emit_warning(self, value: Optional[bool], /) -> Self:
            """
            EmitWarning enables API response warnings for mutate policy rules or validate policy rules with validationFailureAction set to Audit.
            Enabling this option will extend admission request processing times. The default value is "false".
            """
            return self._set("emit_warning", value)

        def failure_policy(self, value: Optional[Literal["Ignore", "Fail"]], /) -> Self:
            """
            Deprecated, use failurePolicy under the webhookConfiguration instead.
            """
            return self._set("failure_policy", value)

        def generate_existing(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use generateExisting under the generate rule instead
            """
            return self._set("generate_existing", value)

        def generate_existing_on_policy_update(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use generateExisting instead
            """
            return self._set("generate_existing_on_policy_update", value)

        def mutate_existing_on_policy_update(self, value: Optional[bool], /) -> Self:
            """
            Deprecated, use mutateExistingOnPolicyUpdate under the mutate rule instead
            """
            return self._set("mutate_existing_on_policy_update", value)

        @overload
        def rules(self, value_or_callback: List[RuleModel1], /) -> "PolicySpec.Builder": ...

        @overload
        def rules(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[RuleModel1, RuleModel1.Builder]],
                GenericListBuilder[RuleModel1, RuleModel1.Builder] | List[RuleModel1],
            ],
            /,
        ) -> "PolicySpec.Builder": ...

        @overload
        def rules(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[RuleModel1.Builder]: ...

        def rules(self, value_or_callback=None, /):
            """
            Rules is a list of Rule instances. A Policy contains multiple rules and
            each rule can validate, mutate, or generate resources.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[RuleModel1.Builder]()
                context._parent_builder = self
                context._field_name = "rules"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(RuleModel1.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("rules", value)

        def schema_validation(self, value: Optional[bool], /) -> Self:
            """
            Deprecated.
            """
            return self._set("schema_validation", value)

        def use_server_side_apply(self, value: Optional[bool], /) -> Self:
            """
            UseServerSideApply controls whether to use server-side apply for generate rules
            If is set to "true" create & update for generate rules will use apply instead of create/update.
            Defaults to "false" if not specified.
            """
            return self._set("use_server_side_apply", value)

        def validation_failure_action(
            self, value: Optional[Literal["audit", "enforce", "Audit", "Enforce"]], /
        ) -> Self:
            """
            Deprecated, use validationFailureAction under the validate rule instead.
            """
            return self._set("validation_failure_action", value)

        @overload
        def validation_failure_action_overrides(
            self, value_or_callback: List[ValidationFailureActionOverride], /
        ) -> "PolicySpec.Builder": ...

        @overload
        def validation_failure_action_overrides(
            self,
            value_or_callback: Callable[
                [
                    GenericListBuilder[
                        ValidationFailureActionOverride,
                        ValidationFailureActionOverride.Builder,
                    ]
                ],
                GenericListBuilder[
                    ValidationFailureActionOverride,
                    ValidationFailureActionOverride.Builder,
                ]
                | List[ValidationFailureActionOverride],
            ],
            /,
        ) -> "PolicySpec.Builder": ...

        @overload
        def validation_failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ValidationFailureActionOverride.Builder]: ...

        def validation_failure_action_overrides(self, value_or_callback=None, /):
            """
            Deprecated, use validationFailureActionOverrides under the validate rule instead.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ValidationFailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "validation_failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidationFailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("validation_failure_action_overrides", value)

        @overload
        def webhook_configuration(
            self, value_or_callback: Optional[WebhookConfiguration], /
        ) -> "PolicySpec.Builder": ...

        @overload
        def webhook_configuration(
            self,
            value_or_callback: Callable[
                [WebhookConfiguration.Builder],
                WebhookConfiguration.Builder | WebhookConfiguration,
            ],
            /,
        ) -> "PolicySpec.Builder": ...

        @overload
        def webhook_configuration(
            self, value_or_callback: Never = ...
        ) -> "WebhookConfiguration.BuilderContext": ...

        def webhook_configuration(self, value_or_callback=None, /):
            """
            WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.
            """
            if self._in_context and value_or_callback is None:
                context = WebhookConfiguration.BuilderContext()
                context._parent_builder = self
                context._field_name = "webhook_configuration"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WebhookConfiguration.builder())
                if isinstance(output, WebhookConfiguration.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("webhook_configuration", value)

        def webhook_timeout_seconds(self, value: Optional[int], /) -> Self:
            """
            Deprecated, use webhookTimeoutSeconds under webhookConfiguration instead.
            """
            return self._set("webhook_timeout_seconds", value)

    class BuilderContext(BuilderContextBase["PolicySpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PolicySpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PolicySpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    admission: Optional[bool] = True
    """
    Admission controls if rules are applied during admission.
    Optional. Default value is "true".
    """
    apply_rules: Annotated[Optional[Literal["All", "One"]], Field(alias="applyRules")] = None
    """
    ApplyRules controls how rules in a policy are applied. Rule are processed in
    the order of declaration. When set to `One` processing stops after a rule has
    been applied i.e. the rule matches and results in a pass, fail, or error. When
    set to `All` all rules in the policy are processed. The default is `All`.
    """
    background: Optional[bool] = True
    """
    Background controls if rules are applied to existing resources during a background scan.
    Optional. Default value is "true". The value must be set to "false" if the policy rule
    uses variables that are only available in the admission review request (e.g. user name).
    """
    emit_warning: Annotated[Optional[bool], Field(alias="emitWarning")] = False
    """
    EmitWarning enables API response warnings for mutate policy rules or validate policy rules with validationFailureAction set to Audit.
    Enabling this option will extend admission request processing times. The default value is "false".
    """
    failure_policy: Annotated[Optional[Literal["Ignore", "Fail"]], Field(alias="failurePolicy")] = (
        None
    )
    """
    Deprecated, use failurePolicy under the webhookConfiguration instead.
    """
    generate_existing: Annotated[Optional[bool], Field(alias="generateExisting")] = None
    """
    Deprecated, use generateExisting under the generate rule instead
    """
    generate_existing_on_policy_update: Annotated[
        Optional[bool], Field(alias="generateExistingOnPolicyUpdate")
    ] = None
    """
    Deprecated, use generateExisting instead
    """
    mutate_existing_on_policy_update: Annotated[
        Optional[bool], Field(alias="mutateExistingOnPolicyUpdate")
    ] = None
    """
    Deprecated, use mutateExistingOnPolicyUpdate under the mutate rule instead
    """
    rules: Optional[List[RuleModel1]] = None
    """
    Rules is a list of Rule instances. A Policy contains multiple rules and
    each rule can validate, mutate, or generate resources.
    """
    schema_validation: Annotated[Optional[bool], Field(alias="schemaValidation")] = None
    """
    Deprecated.
    """
    use_server_side_apply: Annotated[Optional[bool], Field(alias="useServerSideApply")] = None
    """
    UseServerSideApply controls whether to use server-side apply for generate rules
    If is set to "true" create & update for generate rules will use apply instead of create/update.
    Defaults to "false" if not specified.
    """
    validation_failure_action: Annotated[
        Optional[Literal["audit", "enforce", "Audit", "Enforce"]],
        Field(alias="validationFailureAction"),
    ] = "Audit"
    """
    Deprecated, use validationFailureAction under the validate rule instead.
    """
    validation_failure_action_overrides: Annotated[
        Optional[List[ValidationFailureActionOverride]],
        Field(alias="validationFailureActionOverrides"),
    ] = None
    """
    Deprecated, use validationFailureActionOverrides under the validate rule instead.
    """
    webhook_configuration: Annotated[
        Optional[WebhookConfiguration], Field(alias="webhookConfiguration")
    ] = None
    """
    WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.
    """
    webhook_timeout_seconds: Annotated[Optional[int], Field(alias="webhookTimeoutSeconds")] = None
    """
    Deprecated, use webhookTimeoutSeconds under webhookConfiguration instead.
    """


class ContextModel84(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel84"]:
            return ContextModel84

        def build(self) -> "ContextModel84":
            return ContextModel84(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel84.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel84.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel84.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel84.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel84.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel84.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel84.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel84.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel84.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel84.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel84.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel84.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel84."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel84", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel84.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel85(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel85"]:
            return ContextModel85

        def build(self) -> "ContextModel85":
            return ContextModel85(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel85.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel85.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel85.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel85.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel85.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel85.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel85.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel85.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel85.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel85.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel85.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel85.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel85."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel85", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel85.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel86(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel86"]:
            return ContextModel86

        def build(self) -> "ContextModel86":
            return ContextModel86(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel86.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel86.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel86.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel86.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel86.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel86.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel86.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel86.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel86.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel86.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel86.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel86.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel86."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel86", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel86.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel87(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel87"]:
            return ContextModel87

        def build(self) -> "ContextModel87":
            return ContextModel87(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel87.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel87.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel87.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel87.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel87.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel87.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel87.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel87.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel5, /) -> "ContextModel87.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel87.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel87.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel87.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel87."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel87", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel87.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel5
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel88(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel88"]:
            return ContextModel88

        def build(self) -> "ContextModel88":
            return ContextModel88(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel88.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel88.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel88.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel88.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel88.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel88.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel88.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel88.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel88.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel88.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel88.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel88.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel88."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel88", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel88.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel18(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel18"]:
            return AllModel18

        def build(self) -> "AllModel18":
            return AllModel18(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel18.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel18.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel18.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel18.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel18.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel18.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel18."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel18", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel18.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel19(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel19"]:
            return AnyModel19

        def build(self) -> "AnyModel19":
            return AnyModel19(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel19.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel19.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel19.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel19.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel19.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel19.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel19."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel19", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel19.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ExcludeModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel5"]:
            return ExcludeModel5

        def build(self) -> "ExcludeModel5":
            return ExcludeModel5(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel18], /) -> "ExcludeModel5.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel18, AllModel18.Builder]],
                GenericListBuilder[AllModel18, AllModel18.Builder] | List[AllModel18],
            ],
            /,
        ) -> "ExcludeModel5.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel18.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel18.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel18.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel19], /) -> "ExcludeModel5.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel19, AnyModel19.Builder]],
                GenericListBuilder[AnyModel19, AnyModel19.Builder] | List[AnyModel19],
            ],
            /,
        ) -> "ExcludeModel5.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel19.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel19.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel19.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(
            self, value_or_callback: Optional[Resources], /
        ) -> "ExcludeModel5.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "ExcludeModel5.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            Requires at least one tag to be specified when under MatchResources.
            Specifying ResourceDescription directly under match is being deprecated.
            Please specify under "any" or "all" instead.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "ExcludeModel5.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "ExcludeModel5.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["ExcludeModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel18]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel19]] = None
    """
    Any allows specifying resources which will be ORed
    """
    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ContextModel89(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel89"]:
            return ContextModel89

        def build(self) -> "ContextModel89":
            return ContextModel89(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel89.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel89.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel89.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel89.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel89.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel89.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel89.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel89.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel89.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel89.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel89.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel89.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel89."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel89", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel89.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel90(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel90"]:
            return ContextModel90

        def build(self) -> "ContextModel90":
            return ContextModel90(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel90.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel90.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel90.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel90.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel90.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel90.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel90.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel90.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel90.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel90.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel90.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel90.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel90."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel90", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel90.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel91(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel91"]:
            return ContextModel91

        def build(self) -> "ContextModel91":
            return ContextModel91(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel91.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel91.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel91.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel91.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel91.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel91.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel91.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel91.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel91.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel91.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel91.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel91.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel91."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel91", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel91.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel92(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel92"]:
            return ContextModel92

        def build(self) -> "ContextModel92":
            return ContextModel92(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel92.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel92.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel92.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel92.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel92.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel92.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel92.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel92.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel5, /) -> "ContextModel92.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel92.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel92.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel92.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel92."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel92", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel92.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel5
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel93(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel93"]:
            return ContextModel93

        def build(self) -> "ContextModel93":
            return ContextModel93(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel93.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel93.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel93.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel93.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel93.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel93.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel93.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel93.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel93.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel93.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel93.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel93.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel93."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel93", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel93.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel19(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel19"]:
            return AllModel19

        def build(self) -> "AllModel19":
            return AllModel19(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel19.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel19.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel19."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel19", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel19.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel20(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel20"]:
            return AnyModel20

        def build(self) -> "AnyModel20":
            return AnyModel20(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel20.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel20.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel20."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel20", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel20.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel8(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel8"]:
            return ForeachModel8

        def build(self) -> "ForeachModel8":
            return ForeachModel8(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion specifies resource apiVersion.
            """
            return self._set("api_version", value)

        @overload
        def clone(self, value_or_callback: Optional[Clone], /) -> "ForeachModel8.Builder": ...

        @overload
        def clone(
            self, value_or_callback: Callable[[Clone.Builder], Clone.Builder | Clone], /
        ) -> "ForeachModel8.Builder": ...

        @overload
        def clone(self, value_or_callback: Never = ...) -> "Clone.BuilderContext": ...

        def clone(self, value_or_callback=None, /):
            """
            Clone specifies the source resource used to populate each generated resource.
            At most one of Data or Clone can be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            if self._in_context and value_or_callback is None:
                context = Clone.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Clone.builder())
                if isinstance(output, Clone.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone", value)

        @overload
        def clone_list(
            self, value_or_callback: Optional[CloneList], /
        ) -> "ForeachModel8.Builder": ...

        @overload
        def clone_list(
            self,
            value_or_callback: Callable[[CloneList.Builder], CloneList.Builder | CloneList],
            /,
        ) -> "ForeachModel8.Builder": ...

        @overload
        def clone_list(self, value_or_callback: Never = ...) -> "CloneList.BuilderContext": ...

        def clone_list(self, value_or_callback=None, /):
            """
            CloneList specifies the list of source resource used to populate each generated resource.
            """
            if self._in_context and value_or_callback is None:
                context = CloneList.BuilderContext()
                context._parent_builder = self
                context._field_name = "clone_list"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CloneList.builder())
                if isinstance(output, CloneList.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("clone_list", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel89,
                        ContextModel90,
                        ContextModel91,
                        ContextModel92,
                        ContextModel93,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def data(self, value: Optional[Any], /) -> Self:
            """
            Data provides the resource declaration used to populate each generated resource.
            At most one of Data or Clone must be specified. If neither are provided, the generated
            resource will be created with default data only.
            """
            return self._set("data", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind specifies resource kind.
            """
            return self._set("kind", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name specifies the resource name.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace specifies resource namespace.
            """
            return self._set("namespace", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel3], /
        ) -> "ForeachModel8.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel3.Builder],
                PreconditionsModel3.Builder | PreconditionsModel3,
            ],
            /,
        ) -> "ForeachModel8.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel3.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel3.builder())
                if isinstance(output, PreconditionsModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID specifies the resource uid.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["ForeachModel8.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel8.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel8."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel8", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel8.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion specifies resource apiVersion.
    """
    clone: Optional[Clone] = None
    """
    Clone specifies the source resource used to populate each generated resource.
    At most one of Data or Clone can be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    clone_list: Annotated[Optional[CloneList], Field(alias="cloneList")] = None
    """
    CloneList specifies the list of source resource used to populate each generated resource.
    """
    context: Optional[
        List[
            Union[
                ContextModel89,
                ContextModel90,
                ContextModel91,
                ContextModel92,
                ContextModel93,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    data: Optional[Any] = None
    """
    Data provides the resource declaration used to populate each generated resource.
    At most one of Data or Clone must be specified. If neither are provided, the generated
    resource will be created with default data only.
    """
    kind: Optional[str] = None
    """
    Kind specifies resource kind.
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    name: Optional[str] = None
    """
    Name specifies the resource name.
    """
    namespace: Optional[str] = None
    """
    Namespace specifies resource namespace.
    """
    preconditions: Optional[PreconditionsModel3] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    uid: Optional[str] = None
    """
    UID specifies the resource uid.
    """


class AllModel20(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel20"]:
            return AllModel20

        def build(self) -> "AllModel20":
            return AllModel20(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel20.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel20.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel20.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel20.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel20.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel20.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel20."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel20", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel20.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel21(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel21"]:
            return AnyModel21

        def build(self) -> "AnyModel21":
            return AnyModel21(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel21.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel21.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel21.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel21.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel21.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel21.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel21."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel21", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel21.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class MatchModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchModel2"]:
            return MatchModel2

        def build(self) -> "MatchModel2":
            return MatchModel2(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel20], /) -> "MatchModel2.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel20, AllModel20.Builder]],
                GenericListBuilder[AllModel20, AllModel20.Builder] | List[AllModel20],
            ],
            /,
        ) -> "MatchModel2.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel20.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel20.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel20.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel21], /) -> "MatchModel2.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel21, AnyModel21.Builder]],
                GenericListBuilder[AnyModel21, AnyModel21.Builder] | List[AnyModel21],
            ],
            /,
        ) -> "MatchModel2.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel21.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel21.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel21.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "MatchModel2.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "MatchModel2.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            Requires at least one tag to be specified when under MatchResources.
            Specifying ResourceDescription directly under match is being deprecated.
            Please specify under "any" or "all" instead.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "MatchModel2.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "MatchModel2.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["MatchModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel20]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel21]] = None
    """
    Any allows specifying resources which will be ORed
    """
    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    Requires at least one tag to be specified when under MatchResources.
    Specifying ResourceDescription directly under match is being deprecated.
    Please specify under "any" or "all" instead.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class ContextModel94(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel94"]:
            return ContextModel94

        def build(self) -> "ContextModel94":
            return ContextModel94(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel94.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel94.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel94.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel94.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel94.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel94.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel94.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel94.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel94.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel94.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel94.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel94.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel94."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel94", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel94.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel95(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel95"]:
            return ContextModel95

        def build(self) -> "ContextModel95":
            return ContextModel95(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel95.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel95.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel95.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel95.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel95.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel95.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel95.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel95.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel95.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel95.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel95.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel95.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel95."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel95", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel95.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel96(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel96"]:
            return ContextModel96

        def build(self) -> "ContextModel96":
            return ContextModel96(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel96.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel96.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel96.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel96.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel96.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel96.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel96.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel96.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel96.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel96.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel96.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel96.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel96."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel96", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel96.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel97(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel97"]:
            return ContextModel97

        def build(self) -> "ContextModel97":
            return ContextModel97(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel97.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel97.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel97.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel97.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel97.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel97.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel97.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel97.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel5, /) -> "ContextModel97.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel97.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel97.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel97.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel97."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel97", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel97.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel5
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel98(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel98"]:
            return ContextModel98

        def build(self) -> "ContextModel98":
            return ContextModel98(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel98.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel98.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel98.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel98.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel98.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel98.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel98.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel98.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel98.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel98.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel98.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel98.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel98."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel98", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel98.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class AllModel21(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel21"]:
            return AllModel21

        def build(self) -> "AllModel21":
            return AllModel21(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel21.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel21.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel21."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel21", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel21.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel22(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel22"]:
            return AnyModel22

        def build(self) -> "AnyModel22":
            return AnyModel22(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "In",
                    "AnyIn",
                    "AllIn",
                    "NotIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel22.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel22.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel22."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel22", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel22.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "In",
            "AnyIn",
            "AllIn",
            "NotIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class ForeachModel9(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel9"]:
            return ForeachModel9

        def build(self) -> "ForeachModel9":
            return ForeachModel9(**self._attrs)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel94,
                        ContextModel95,
                        ContextModel96,
                        ContextModel97,
                        ContextModel98,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def order(self, value: Optional[Literal["Ascending", "Descending"]], /) -> Self:
            """
            Order defines the iteration order on the list.
            Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
            """
            return self._set("order", value)

        def patch_strategic_merge(self, value: Optional[Any], /) -> Self:
            """
            PatchStrategicMerge is a strategic merge patch used to modify resources.
            See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
            and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
            """
            return self._set("patch_strategic_merge", value)

        def patches_json6902(self, value: Optional[str], /) -> Self:
            """
            PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
            See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
            """
            return self._set("patches_json6902", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel3], /
        ) -> "ForeachModel9.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel3.Builder],
                PreconditionsModel3.Builder | PreconditionsModel3,
            ],
            /,
        ) -> "ForeachModel9.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel3.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel3.builder())
                if isinstance(output, PreconditionsModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel9.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel9.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel9."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel9", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel9.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    context: Optional[
        List[
            Union[
                ContextModel94,
                ContextModel95,
                ContextModel96,
                ContextModel97,
                ContextModel98,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    order: Optional[Literal["Ascending", "Descending"]] = None
    """
    Order defines the iteration order on the list.
    Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
    """
    patch_strategic_merge: Annotated[Optional[Any], Field(alias="patchStrategicMerge")] = None
    """
    PatchStrategicMerge is a strategic merge patch used to modify resources.
    See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
    and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
    """
    patches_json6902: Annotated[Optional[str], Field(alias="patchesJson6902")] = None
    """
    PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
    See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
    """
    preconditions: Optional[PreconditionsModel3] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ContextModel99(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel99"]:
            return ContextModel99

        def build(self) -> "ContextModel99":
            return ContextModel99(**self._attrs)

        @overload
        def api_call(self, value_or_callback: Optional[ApiCall], /) -> "ContextModel99.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel99.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel99.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel99.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel99.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel99.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel99.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel99.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel99.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel99.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel99.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel99.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel99."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel99", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel99.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel100(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel100"]:
            return ContextModel100

        def build(self) -> "ContextModel100":
            return ContextModel100(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel100.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel100.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel100.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel100.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel100.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel100.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel100.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel100.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel100.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel100.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel100.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel100.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel100."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel100", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel100.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel101(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel101"]:
            return ContextModel101

        def build(self) -> "ContextModel101":
            return ContextModel101(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel101.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel101.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel101.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel101.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel101.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel101.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel101.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel101.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel101.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel101.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel101.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel101.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel101."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel101", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel101.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel102(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel102"]:
            return ContextModel102

        def build(self) -> "ContextModel102":
            return ContextModel102(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel102.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel102.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel102.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel102.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel102.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel102.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel102.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel102.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel5, /) -> "ContextModel102.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel102.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel102.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel102.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel102."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel102", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel102.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel5
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel103(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel103"]:
            return ContextModel103

        def build(self) -> "ContextModel103":
            return ContextModel103(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel103.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel103.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel103.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel103.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel103.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel103.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel103.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel103.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel5], /
        ) -> "ContextModel103.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel5.Builder], VariableModel5.Builder | VariableModel5
            ],
            /,
        ) -> "ContextModel103.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel5.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel5.builder())
                if isinstance(output, VariableModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel103.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel103.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel103."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel103", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel103.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel5] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class VariableModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel6"]:
            return VariableModel6

        def build(self) -> "VariableModel6":
            return VariableModel6(**self._attrs)

        def expression(self, value: str, /) -> Self:
            """
            Expression is the expression that will be evaluated as the value of the variable.
            The CEL expression has access to the same identifiers as the CEL expressions in Validation.
            """
            return self._set("expression", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
            The variable can be accessed in other expressions through `variables`
            For example, if name is "foo", the variable will be available as `variables.foo`
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["VariableModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    expression: str
    """
    Expression is the expression that will be evaluated as the value of the variable.
    The CEL expression has access to the same identifiers as the CEL expressions in Validation.
    """
    name: str
    """
    Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.
    The variable can be accessed in other expressions through `variables`
    For example, if name is "foo", the variable will be available as `variables.foo`
    """


class VariableModel7(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VariableModel7"]:
            return VariableModel7

        def build(self) -> "VariableModel7":
            return VariableModel7(**self._attrs)

        def default(self, value: Optional[Any], /) -> Self:
            """
            Default is an optional arbitrary JSON object that the variable may take if the JMESPath
            expression evaluates to nil
            """
            return self._set("default", value)

        def jmes_path(self, value: Optional[str], /) -> Self:
            """
            JMESPath is an optional JMESPath Expression that can be used to
            transform the variable.
            """
            return self._set("jmes_path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is any arbitrary JSON object representable in YAML or JSON form.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["VariableModel7.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VariableModel7.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VariableModel7."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VariableModel7", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VariableModel7.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default: Optional[Any] = None
    """
    Default is an optional arbitrary JSON object that the variable may take if the JMESPath
    expression evaluates to nil
    """
    jmes_path: Annotated[Optional[str], Field(alias="jmesPath")] = None
    """
    JMESPath is an optional JMESPath Expression that can be used to
    transform the variable.
    """
    value: Optional[Any] = None
    """
    Value is any arbitrary JSON object representable in YAML or JSON form.
    """


class ContextModel104(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel104"]:
            return ContextModel104

        def build(self) -> "ContextModel104":
            return ContextModel104(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel104.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel104.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(self, value_or_callback: ConfigMap, /) -> "ContextModel104.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel104.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel104.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel104.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel104.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel104.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel7], /
        ) -> "ContextModel104.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel7.Builder], VariableModel7.Builder | VariableModel7
            ],
            /,
        ) -> "ContextModel104.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel7.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel7.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel7.builder())
                if isinstance(output, VariableModel7.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel104.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel104.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel104."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel104", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel104.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[ConfigMap, Field(alias="configMap")]
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel7] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel105(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel105"]:
            return ContextModel105

        def build(self) -> "ContextModel105":
            return ContextModel105(**self._attrs)

        @overload
        def api_call(self, value_or_callback: ApiCall, /) -> "ContextModel105.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel105.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel105.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel105.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel105.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel105.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel105.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel105.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel7], /
        ) -> "ContextModel105.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel7.Builder], VariableModel7.Builder | VariableModel7
            ],
            /,
        ) -> "ContextModel105.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel7.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel7.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel7.builder())
                if isinstance(output, VariableModel7.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel105.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel105.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel105."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel105", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel105.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[ApiCall, Field(alias="apiCall")]
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel7] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel106(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel106"]:
            return ContextModel106

        def build(self) -> "ContextModel106":
            return ContextModel106(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel106.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel106.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel106.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel106.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel106.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel106.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: ImageRegistry, /
        ) -> "ContextModel106.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel106.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel7], /
        ) -> "ContextModel106.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel7.Builder], VariableModel7.Builder | VariableModel7
            ],
            /,
        ) -> "ContextModel106.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel7.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel7.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel7.builder())
                if isinstance(output, VariableModel7.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel106.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel106.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel106."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel106", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel106.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[ImageRegistry, Field(alias="imageRegistry")]
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel7] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel107(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel107"]:
            return ContextModel107

        def build(self) -> "ContextModel107":
            return ContextModel107(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel107.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel107.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel107.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel107.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: Optional[GlobalReference], /
        ) -> "ContextModel107.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel107.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel107.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel107.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(self, value_or_callback: VariableModel7, /) -> "ContextModel107.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel7.Builder], VariableModel7.Builder | VariableModel7
            ],
            /,
        ) -> "ContextModel107.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel7.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel7.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel7.builder())
                if isinstance(output, VariableModel7.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel107.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel107.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel107."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel107", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel107.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[Optional[GlobalReference], Field(alias="globalReference")] = None
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: VariableModel7
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ContextModel108(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ContextModel108"]:
            return ContextModel108

        def build(self) -> "ContextModel108":
            return ContextModel108(**self._attrs)

        @overload
        def api_call(
            self, value_or_callback: Optional[ApiCall], /
        ) -> "ContextModel108.Builder": ...

        @overload
        def api_call(
            self,
            value_or_callback: Callable[[ApiCall.Builder], ApiCall.Builder | ApiCall],
            /,
        ) -> "ContextModel108.Builder": ...

        @overload
        def api_call(self, value_or_callback: Never = ...) -> "ApiCall.BuilderContext": ...

        def api_call(self, value_or_callback=None, /):
            """
            APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
            The data returned is stored in the context with the name for the context entry.
            """
            if self._in_context and value_or_callback is None:
                context = ApiCall.BuilderContext()
                context._parent_builder = self
                context._field_name = "api_call"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ApiCall.builder())
                if isinstance(output, ApiCall.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("api_call", value)

        @overload
        def config_map(
            self, value_or_callback: Optional[ConfigMap], /
        ) -> "ContextModel108.Builder": ...

        @overload
        def config_map(
            self,
            value_or_callback: Callable[[ConfigMap.Builder], ConfigMap.Builder | ConfigMap],
            /,
        ) -> "ContextModel108.Builder": ...

        @overload
        def config_map(self, value_or_callback: Never = ...) -> "ConfigMap.BuilderContext": ...

        def config_map(self, value_or_callback=None, /):
            """
            ConfigMap is the ConfigMap reference.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigMap.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_map"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigMap.builder())
                if isinstance(output, ConfigMap.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_map", value)

        @overload
        def global_reference(
            self, value_or_callback: GlobalReference, /
        ) -> "ContextModel108.Builder": ...

        @overload
        def global_reference(
            self,
            value_or_callback: Callable[
                [GlobalReference.Builder], GlobalReference.Builder | GlobalReference
            ],
            /,
        ) -> "ContextModel108.Builder": ...

        @overload
        def global_reference(
            self, value_or_callback: Never = ...
        ) -> "GlobalReference.BuilderContext": ...

        def global_reference(self, value_or_callback=None, /):
            """
            GlobalContextEntryReference is a reference to a cached global context entry.
            """
            if self._in_context and value_or_callback is None:
                context = GlobalReference.BuilderContext()
                context._parent_builder = self
                context._field_name = "global_reference"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GlobalReference.builder())
                if isinstance(output, GlobalReference.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("global_reference", value)

        @overload
        def image_registry(
            self, value_or_callback: Optional[ImageRegistry], /
        ) -> "ContextModel108.Builder": ...

        @overload
        def image_registry(
            self,
            value_or_callback: Callable[
                [ImageRegistry.Builder], ImageRegistry.Builder | ImageRegistry
            ],
            /,
        ) -> "ContextModel108.Builder": ...

        @overload
        def image_registry(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistry.BuilderContext": ...

        def image_registry(self, value_or_callback=None, /):
            """
            ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
            details.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistry.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistry.builder())
                if isinstance(output, ImageRegistry.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the variable name.
            """
            return self._set("name", value)

        @overload
        def variable(
            self, value_or_callback: Optional[VariableModel7], /
        ) -> "ContextModel108.Builder": ...

        @overload
        def variable(
            self,
            value_or_callback: Callable[
                [VariableModel7.Builder], VariableModel7.Builder | VariableModel7
            ],
            /,
        ) -> "ContextModel108.Builder": ...

        @overload
        def variable(self, value_or_callback: Never = ...) -> "VariableModel7.BuilderContext": ...

        def variable(self, value_or_callback=None, /):
            """
            Variable defines an arbitrary JMESPath context variable that can be defined inline.
            """
            if self._in_context and value_or_callback is None:
                context = VariableModel7.BuilderContext()
                context._parent_builder = self
                context._field_name = "variable"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VariableModel7.builder())
                if isinstance(output, VariableModel7.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("variable", value)

    class BuilderContext(BuilderContextBase["ContextModel108.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ContextModel108.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ContextModel108."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ContextModel108", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ContextModel108.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_call: Annotated[Optional[ApiCall], Field(alias="apiCall")] = None
    """
    APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
    The data returned is stored in the context with the name for the context entry.
    """
    config_map: Annotated[Optional[ConfigMap], Field(alias="configMap")] = None
    """
    ConfigMap is the ConfigMap reference.
    """
    global_reference: Annotated[GlobalReference, Field(alias="globalReference")]
    """
    GlobalContextEntryReference is a reference to a cached global context entry.
    """
    image_registry: Annotated[Optional[ImageRegistry], Field(alias="imageRegistry")] = None
    """
    ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
    details.
    """
    name: str
    """
    Name is the variable name.
    """
    variable: Optional[VariableModel7] = None
    """
    Variable defines an arbitrary JMESPath context variable that can be defined inline.
    """


class ForeachModel10(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForeachModel10"]:
            return ForeachModel10

        def build(self) -> "ForeachModel10":
            return ForeachModel10(**self._attrs)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel104,
                        ContextModel105,
                        ContextModel106,
                        ContextModel107,
                        ContextModel108,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel2], /) -> "ForeachModel10.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel2.Builder], DenyModel2.Builder | DenyModel2],
            /,
        ) -> "ForeachModel10.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel2.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel2.builder())
                if isinstance(output, DenyModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def element_scope(self, value: Optional[bool], /) -> Self:
            """
            ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
            When set to "false", "request.object" is used as the validation scope within the foreach
            block to allow referencing other elements in the subtree.
            """
            return self._set("element_scope", value)

        def foreach(self, value: Optional[Any], /) -> Self:
            """
            Foreach declares a nested foreach iterator
            """
            return self._set("foreach", value)

        def list(self, value: Optional[str], /) -> Self:
            """
            List specifies a JMESPath expression that results in one or more elements
            to which the validation logic is applied.
            """
            return self._set("list", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[PreconditionsModel3], /
        ) -> "ForeachModel10.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [PreconditionsModel3.Builder],
                PreconditionsModel3.Builder | PreconditionsModel3,
            ],
            /,
        ) -> "ForeachModel10.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "PreconditionsModel3.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            if self._in_context and value_or_callback is None:
                context = PreconditionsModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PreconditionsModel3.builder())
                if isinstance(output, PreconditionsModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

    class BuilderContext(BuilderContextBase["ForeachModel10.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForeachModel10.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForeachModel10."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForeachModel10", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForeachModel10.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    context: Optional[
        List[
            Union[
                ContextModel104,
                ContextModel105,
                ContextModel106,
                ContextModel107,
                ContextModel108,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    deny: Optional[DenyModel2] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    element_scope: Annotated[Optional[bool], Field(alias="elementScope")] = None
    """
    ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
    When set to "false", "request.object" is used as the validation scope within the foreach
    block to allow referencing other elements in the subtree.
    """
    foreach: Optional[Any] = None
    """
    Foreach declares a nested foreach iterator
    """
    list: Optional[str] = None
    """
    List specifies a JMESPath expression that results in one or more elements
    to which the validation logic is applied.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    preconditions: Optional[PreconditionsModel3] = None
    """
    AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """


class ExcludeModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ExcludeModel6"]:
            return ExcludeModel6

        def build(self) -> "ExcludeModel6":
            return ExcludeModel6(**self._attrs)

        def control_name(
            self,
            value: Literal[
                "HostProcess",
                "Host Namespaces",
                "Privileged Containers",
                "Capabilities",
                "HostPath Volumes",
                "Host Ports",
                "AppArmor",
                "SELinux",
                "/proc Mount Type",
                "Seccomp",
                "Sysctls",
                "Volume Types",
                "Privilege Escalation",
                "Running as Non-root",
                "Running as Non-root user",
            ],
            /,
        ) -> Self:
            """
            ControlName specifies the name of the Pod Security Standard control.
            See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
            """
            return self._set("control_name", value)

        def images(self, value: Optional[List[str]], /) -> Self:
            """
            Images selects matching containers and applies the container level PSS.
            Each image is the image name consisting of the registry address, repository, image, and tag.
            Empty list matches no containers, PSS checks are applied at the pod level only.
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("images", value)

        def restricted_field(self, value: Optional[str], /) -> Self:
            """
            RestrictedField selects the field for the given Pod Security Standard control.
            When not set, all restricted fields for the control are selected.
            """
            return self._set("restricted_field", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            Values defines the allowed values that can be excluded.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["ExcludeModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ExcludeModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ExcludeModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ExcludeModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ExcludeModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(alias="controlName"),
    ]
    """
    ControlName specifies the name of the Pod Security Standard control.
    See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    """
    images: Optional[List[str]] = None
    """
    Images selects matching containers and applies the container level PSS.
    Each image is the image name consisting of the registry address, repository, image, and tag.
    Empty list matches no containers, PSS checks are applied at the pod level only.
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    restricted_field: Annotated[Optional[str], Field(alias="restrictedField")] = None
    """
    RestrictedField selects the field for the given Pod Security Standard control.
    When not set, all restricted fields for the control are selected.
    """
    values: Optional[List[str]] = None
    """
    Values defines the allowed values that can be excluded.
    """


class ValidateModel5(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel5"]:
            return ValidateModel5

        def build(self) -> "ValidateModel5":
            return ValidateModel5(**self._attrs)

        def allow_existing_violations(self, value: Optional[bool], /) -> Self:
            """
            AllowExistingViolations allows prexisting violating resources to continue violating a policy.
            """
            return self._set("allow_existing_violations", value)

        def any_pattern(self, value: Optional[Any], /) -> Self:
            """
            AnyPattern specifies list of validation patterns. At least one of the patterns
            must be satisfied for the validation rule to succeed.
            """
            return self._set("any_pattern", value)

        def assert_(self, value: Optional[Dict[str, Any]], /) -> Self:
            """
            Assert defines a kyverno-json assertion tree.
            """
            return self._set("assert_", value)

        @overload
        def cel(self, value_or_callback: Optional[Cel], /) -> "ValidateModel5.Builder": ...

        @overload
        def cel(
            self, value_or_callback: Callable[[Cel.Builder], Cel.Builder | Cel], /
        ) -> "ValidateModel5.Builder": ...

        @overload
        def cel(self, value_or_callback: Never = ...) -> "Cel.BuilderContext": ...

        def cel(self, value_or_callback=None, /):
            """
            CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
            """
            if self._in_context and value_or_callback is None:
                context = Cel.BuilderContext()
                context._parent_builder = self
                context._field_name = "cel"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Cel.builder())
                if isinstance(output, Cel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel", value)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel2], /) -> "ValidateModel5.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel2.Builder], DenyModel2.Builder | DenyModel2],
            /,
        ) -> "ValidateModel5.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel2.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel2.builder())
                if isinstance(output, DenyModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            FailureAction defines if a validation policy rule violation should block
            the admission review request (Enforce), or allow (Audit) the admission review request
            and report an error in a policy report. Optional.
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        @overload
        def failure_action_overrides(
            self, value_or_callback: List[FailureActionOverride], /
        ) -> "ValidateModel5.Builder": ...

        @overload
        def failure_action_overrides(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]],
                GenericListBuilder[FailureActionOverride, FailureActionOverride.Builder]
                | List[FailureActionOverride],
            ],
            /,
        ) -> "ValidateModel5.Builder": ...

        @overload
        def failure_action_overrides(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[FailureActionOverride.Builder]: ...

        def failure_action_overrides(self, value_or_callback=None, /):
            """
            FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
            namespace-wise. It overrides FailureAction for the specified namespaces.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[FailureActionOverride.Builder]()
                context._parent_builder = self
                context._field_name = "failure_action_overrides"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(FailureActionOverride.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("failure_action_overrides", value)

        @overload
        def foreach(
            self, value_or_callback: List[ForeachModel10], /
        ) -> "ValidateModel5.Builder": ...

        @overload
        def foreach(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ForeachModel10, ForeachModel10.Builder]],
                GenericListBuilder[ForeachModel10, ForeachModel10.Builder] | List[ForeachModel10],
            ],
            /,
        ) -> "ValidateModel5.Builder": ...

        @overload
        def foreach(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ForeachModel10.Builder]: ...

        def foreach(self, value_or_callback=None, /):
            """
            ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ForeachModel10.Builder]()
                context._parent_builder = self
                context._field_name = "foreach"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForeachModel10.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("foreach", value)

        @overload
        def manifests(
            self, value_or_callback: Optional[Manifests], /
        ) -> "ValidateModel5.Builder": ...

        @overload
        def manifests(
            self,
            value_or_callback: Callable[[Manifests.Builder], Manifests.Builder | Manifests],
            /,
        ) -> "ValidateModel5.Builder": ...

        @overload
        def manifests(self, value_or_callback: Never = ...) -> "Manifests.BuilderContext": ...

        def manifests(self, value_or_callback=None, /):
            """
            Manifest specifies conditions for manifest verification
            """
            if self._in_context and value_or_callback is None:
                context = Manifests.BuilderContext()
                context._parent_builder = self
                context._field_name = "manifests"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Manifests.builder())
                if isinstance(output, Manifests.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("manifests", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

        def pattern(self, value: Optional[Any], /) -> Self:
            """
            Pattern specifies an overlay-style pattern used to check resources.
            """
            return self._set("pattern", value)

        @overload
        def pod_security(
            self, value_or_callback: Optional[PodSecurity], /
        ) -> "ValidateModel5.Builder": ...

        @overload
        def pod_security(
            self,
            value_or_callback: Callable[[PodSecurity.Builder], PodSecurity.Builder | PodSecurity],
            /,
        ) -> "ValidateModel5.Builder": ...

        @overload
        def pod_security(self, value_or_callback: Never = ...) -> "PodSecurity.BuilderContext": ...

        def pod_security(self, value_or_callback=None, /):
            """
            PodSecurity applies exemptions for Kubernetes Pod Security admission
            by specifying exclusions for Pod Security Standards controls.
            """
            if self._in_context and value_or_callback is None:
                context = PodSecurity.BuilderContext()
                context._parent_builder = self
                context._field_name = "pod_security"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PodSecurity.builder())
                if isinstance(output, PodSecurity.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("pod_security", value)

    class BuilderContext(BuilderContextBase["ValidateModel5.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel5.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel5."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel5", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel5.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    allow_existing_violations: Annotated[Optional[bool], Field(alias="allowExistingViolations")] = (
        True
    )
    """
    AllowExistingViolations allows prexisting violating resources to continue violating a policy.
    """
    any_pattern: Annotated[Optional[Any], Field(alias="anyPattern")] = None
    """
    AnyPattern specifies list of validation patterns. At least one of the patterns
    must be satisfied for the validation rule to succeed.
    """
    assert_: Annotated[Optional[Dict[str, Any]], Field(alias="assert")] = None
    """
    Assert defines a kyverno-json assertion tree.
    """
    cel: Optional[Cel] = None
    """
    CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
    """
    deny: Optional[DenyModel2] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    FailureAction defines if a validation policy rule violation should block
    the admission review request (Enforce), or allow (Audit) the admission review request
    and report an error in a policy report. Optional.
    Allowed values are Audit or Enforce.
    """
    failure_action_overrides: Annotated[
        Optional[List[FailureActionOverride]], Field(alias="failureActionOverrides")
    ] = None
    """
    FailureActionOverrides is a Cluster Policy attribute that specifies FailureAction
    namespace-wise. It overrides FailureAction for the specified namespaces.
    """
    foreach: Optional[List[ForeachModel10]] = None
    """
    ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
    """
    manifests: Optional[Manifests] = None
    """
    Manifest specifies conditions for manifest verification
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """
    pattern: Optional[Any] = None
    """
    Pattern specifies an overlay-style pattern used to check resources.
    """
    pod_security: Annotated[Optional[PodSecurity], Field(alias="podSecurity")] = None
    """
    PodSecurity applies exemptions for Kubernetes Pod Security admission
    by specifying exclusions for Pod Security Standards controls.
    """


class ValidateModel6(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ValidateModel6"]:
            return ValidateModel6

        def build(self) -> "ValidateModel6":
            return ValidateModel6(**self._attrs)

        @overload
        def deny(self, value_or_callback: Optional[DenyModel2], /) -> "ValidateModel6.Builder": ...

        @overload
        def deny(
            self,
            value_or_callback: Callable[[DenyModel2.Builder], DenyModel2.Builder | DenyModel2],
            /,
        ) -> "ValidateModel6.Builder": ...

        @overload
        def deny(self, value_or_callback: Never = ...) -> "DenyModel2.BuilderContext": ...

        def deny(self, value_or_callback=None, /):
            """
            Deny defines conditions used to pass or fail a validation rule.
            """
            if self._in_context and value_or_callback is None:
                context = DenyModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "deny"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DenyModel2.builder())
                if isinstance(output, DenyModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deny", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message specifies a custom message to be displayed on failure.
            """
            return self._set("message", value)

    class BuilderContext(BuilderContextBase["ValidateModel6.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ValidateModel6.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ValidateModel6."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ValidateModel6", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ValidateModel6.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deny: Optional[DenyModel2] = None
    """
    Deny defines conditions used to pass or fail a validation rule.
    """
    message: Optional[str] = None
    """
    Message specifies a custom message to be displayed on failure.
    """


class VerifyImageModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VerifyImageModel2"]:
            return VerifyImageModel2

        def build(self) -> "VerifyImageModel2":
            return VerifyImageModel2(**self._attrs)

        def additional_extensions(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Deprecated.
            """
            return self._set("additional_extensions", value)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Deprecated. Use annotations per Attestor instead.
            """
            return self._set("annotations", value)

        @overload
        def attestations(
            self, value_or_callback: List[Attestation], /
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def attestations(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestation, Attestation.Builder]],
                GenericListBuilder[Attestation, Attestation.Builder] | List[Attestation],
            ],
            /,
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def attestations(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestation.Builder]: ...

        def attestations(self, value_or_callback=None, /):
            """
            Attestations are optional checks for signed in-toto Statements used to verify the image.
            See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
            OCI registry and decodes them into a list of Statement declarations.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestation.Builder]()
                context._parent_builder = self
                context._field_name = "attestations"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestation.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestations", value)

        @overload
        def attestors(
            self, value_or_callback: List[Attestor], /
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def attestors(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Attestor, Attestor.Builder]],
                GenericListBuilder[Attestor, Attestor.Builder] | List[Attestor],
            ],
            /,
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def attestors(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Attestor.Builder]: ...

        def attestors(self, value_or_callback=None, /):
            """
            Attestors specified the required attestors (i.e. authorities)
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Attestor.Builder]()
                context._parent_builder = self
                context._field_name = "attestors"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Attestor.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("attestors", value)

        def cosign_oci11(self, value: Optional[bool], /) -> Self:
            """
            CosignOCI11 enables the experimental OCI 1.1 behaviour in cosign image verification.
            Defaults to false.
            """
            return self._set("cosign_oci11", value)

        def failure_action(self, value: Optional[Literal["Audit", "Enforce"]], /) -> Self:
            """
            Allowed values are Audit or Enforce.
            """
            return self._set("failure_action", value)

        def image(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use ImageReferences instead.
            """
            return self._set("image", value)

        def image_references(self, value: Optional[List[str]], /) -> Self:
            """
            ImageReferences is a list of matching image reference patterns. At least one pattern in the
            list must match the image for the rule to apply. Each image reference consists of a registry
            address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("image_references", value)

        @overload
        def image_registry_credentials(
            self, value_or_callback: Optional[ImageRegistryCredentials], /
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def image_registry_credentials(
            self,
            value_or_callback: Callable[
                [ImageRegistryCredentials.Builder],
                ImageRegistryCredentials.Builder | ImageRegistryCredentials,
            ],
            /,
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def image_registry_credentials(
            self, value_or_callback: Never = ...
        ) -> "ImageRegistryCredentials.BuilderContext": ...

        def image_registry_credentials(self, value_or_callback=None, /):
            """
            ImageRegistryCredentials provides credentials that will be used for authentication with registry.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRegistryCredentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_registry_credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRegistryCredentials.builder())
                if isinstance(output, ImageRegistryCredentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_registry_credentials", value)

        def issuer(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("issuer", value)

        def key(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use StaticKeyAttestor instead.
            """
            return self._set("key", value)

        def mutate_digest(self, value: Optional[bool], /) -> Self:
            """
            MutateDigest enables replacement of image tags with digests.
            Defaults to true.
            """
            return self._set("mutate_digest", value)

        def repository(self, value: Optional[str], /) -> Self:
            """
            Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
            If specified Repository will override the default OCI image repository configured for the installation.
            The repository can also be overridden per Attestor or Attestation.
            """
            return self._set("repository", value)

        def required(self, value: Optional[bool], /) -> Self:
            """
            Required validates that images are verified i.e. have matched passed a signature or attestation check.
            """
            return self._set("required", value)

        def roots(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("roots", value)

        def skip_image_references(self, value: Optional[List[str]], /) -> Self:
            """
            SkipImageReferences is a list of matching image reference patterns that should be skipped.
            At least one pattern in the list must match the image for the rule to be skipped. Each image reference
            consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("skip_image_references", value)

        def subject(self, value: Optional[str], /) -> Self:
            """
            Deprecated. Use KeylessAttestor instead.
            """
            return self._set("subject", value)

        def type(self, value: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]], /) -> Self:
            """
            Type specifies the method of signature validation. The allowed options
            are Cosign, Sigstore Bundle and Notary. By default Cosign is used if a type is not specified.
            """
            return self._set("type", value)

        def use_cache(self, value: Optional[bool], /) -> Self:
            """
            UseCache enables caching of image verify responses for this rule.
            """
            return self._set("use_cache", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel6], /
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel6.Builder], ValidateModel6.Builder | ValidateModel6
            ],
            /,
        ) -> "VerifyImageModel2.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel6.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation checks conditions across multiple image
            verification attestations or context entries
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel6.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel6.builder())
                if isinstance(output, ValidateModel6.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        def verify_digest(self, value: Optional[bool], /) -> Self:
            """
            VerifyDigest validates that images have a digest.
            """
            return self._set("verify_digest", value)

    class BuilderContext(BuilderContextBase["VerifyImageModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VerifyImageModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VerifyImageModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VerifyImageModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VerifyImageModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    additional_extensions: Annotated[
        Optional[Dict[str, str]], Field(alias="additionalExtensions")
    ] = None
    """
    Deprecated.
    """
    annotations: Optional[Dict[str, str]] = None
    """
    Deprecated. Use annotations per Attestor instead.
    """
    attestations: Optional[List[Attestation]] = None
    """
    Attestations are optional checks for signed in-toto Statements used to verify the image.
    See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
    OCI registry and decodes them into a list of Statement declarations.
    """
    attestors: Optional[List[Attestor]] = None
    """
    Attestors specified the required attestors (i.e. authorities)
    """
    cosign_oci11: Annotated[Optional[bool], Field(alias="cosignOCI11")] = None
    """
    CosignOCI11 enables the experimental OCI 1.1 behaviour in cosign image verification.
    Defaults to false.
    """
    failure_action: Annotated[
        Optional[Literal["Audit", "Enforce"]], Field(alias="failureAction")
    ] = None
    """
    Allowed values are Audit or Enforce.
    """
    image: Optional[str] = None
    """
    Deprecated. Use ImageReferences instead.
    """
    image_references: Annotated[Optional[List[str]], Field(alias="imageReferences")] = None
    """
    ImageReferences is a list of matching image reference patterns. At least one pattern in the
    list must match the image for the rule to apply. Each image reference consists of a registry
    address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials], Field(alias="imageRegistryCredentials")
    ] = None
    """
    ImageRegistryCredentials provides credentials that will be used for authentication with registry.
    """
    issuer: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    key: Optional[str] = None
    """
    Deprecated. Use StaticKeyAttestor instead.
    """
    mutate_digest: Annotated[Optional[bool], Field(alias="mutateDigest")] = True
    """
    MutateDigest enables replacement of image tags with digests.
    Defaults to true.
    """
    repository: Optional[str] = None
    """
    Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
    If specified Repository will override the default OCI image repository configured for the installation.
    The repository can also be overridden per Attestor or Attestation.
    """
    required: Optional[bool] = True
    """
    Required validates that images are verified i.e. have matched passed a signature or attestation check.
    """
    roots: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    skip_image_references: Annotated[Optional[List[str]], Field(alias="skipImageReferences")] = None
    """
    SkipImageReferences is a list of matching image reference patterns that should be skipped.
    At least one pattern in the list must match the image for the rule to be skipped. Each image reference
    consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    subject: Optional[str] = None
    """
    Deprecated. Use KeylessAttestor instead.
    """
    type: Optional[Literal["Cosign", "SigstoreBundle", "Notary"]] = None
    """
    Type specifies the method of signature validation. The allowed options
    are Cosign, Sigstore Bundle and Notary. By default Cosign is used if a type is not specified.
    """
    use_cache: Annotated[Optional[bool], Field(alias="useCache")] = True
    """
    UseCache enables caching of image verify responses for this rule.
    """
    validate_: Annotated[Optional[ValidateModel6], Field(alias="validate")] = None
    """
    Validation checks conditions across multiple image
    verification attestations or context entries
    """
    verify_digest: Annotated[Optional[bool], Field(alias="verifyDigest")] = True
    """
    VerifyDigest validates that images have a digest.
    """


class RuleModel2(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["RuleModel2"]:
            return RuleModel2

        def build(self) -> "RuleModel2":
            return RuleModel2(**self._attrs)

        @overload
        def cel_preconditions(
            self, value_or_callback: List[CelPrecondition], /
        ) -> "RuleModel2.Builder": ...

        @overload
        def cel_preconditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[CelPrecondition, CelPrecondition.Builder]],
                GenericListBuilder[CelPrecondition, CelPrecondition.Builder]
                | List[CelPrecondition],
            ],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def cel_preconditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[CelPrecondition.Builder]: ...

        def cel_preconditions(self, value_or_callback=None, /):
            """
            CELPreconditions are used to determine if a policy rule should be applied by evaluating a
            set of CEL conditions. It can only be used with the validate.cel subrule
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[CelPrecondition.Builder]()
                context._parent_builder = self
                context._field_name = "cel_preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CelPrecondition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("cel_preconditions", value)

        def context(
            self,
            value: Optional[
                List[
                    Union[
                        ContextModel84,
                        ContextModel85,
                        ContextModel86,
                        ContextModel87,
                        ContextModel88,
                    ]
                ]
            ],
            /,
        ) -> Self:
            """
            Context defines variables and data sources that can be used during rule execution.
            """
            return self._set("context", value)

        @overload
        def exclude(
            self, value_or_callback: Optional[ExcludeModel5], /
        ) -> "RuleModel2.Builder": ...

        @overload
        def exclude(
            self,
            value_or_callback: Callable[
                [ExcludeModel5.Builder], ExcludeModel5.Builder | ExcludeModel5
            ],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def exclude(self, value_or_callback: Never = ...) -> "ExcludeModel5.BuilderContext": ...

        def exclude(self, value_or_callback=None, /):
            """
            ExcludeResources defines when this policy rule should not be applied. The exclude
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the name or role.
            """
            if self._in_context and value_or_callback is None:
                context = ExcludeModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "exclude"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ExcludeModel5.builder())
                if isinstance(output, ExcludeModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("exclude", value)

        @overload
        def generate(self, value_or_callback: Optional[Generate], /) -> "RuleModel2.Builder": ...

        @overload
        def generate(
            self,
            value_or_callback: Callable[[Generate.Builder], Generate.Builder | Generate],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def generate(self, value_or_callback: Never = ...) -> "Generate.BuilderContext": ...

        def generate(self, value_or_callback=None, /):
            """
            Generation is used to create new resources.
            """
            if self._in_context and value_or_callback is None:
                context = Generate.BuilderContext()
                context._parent_builder = self
                context._field_name = "generate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Generate.builder())
                if isinstance(output, Generate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("generate", value)

        def image_extractors(self, value: Optional[Dict[str, List[ImageExtractor]]], /) -> Self:
            """
            ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
            This config is only valid for verifyImages rules.
            """
            return self._set("image_extractors", value)

        @overload
        def match(self, value_or_callback: MatchModel2, /) -> "RuleModel2.Builder": ...

        @overload
        def match(
            self,
            value_or_callback: Callable[[MatchModel2.Builder], MatchModel2.Builder | MatchModel2],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "MatchModel2.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            MatchResources defines when this policy rule should be applied. The match
            criteria can include resource information (e.g. kind, name, namespace, labels)
            and admission review request information like the user name or role.
            At least one kind is required.
            """
            if self._in_context and value_or_callback is None:
                context = MatchModel2.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchModel2.builder())
                if isinstance(output, MatchModel2.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        @overload
        def mutate(self, value_or_callback: Optional[Mutate], /) -> "RuleModel2.Builder": ...

        @overload
        def mutate(
            self,
            value_or_callback: Callable[[Mutate.Builder], Mutate.Builder | Mutate],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def mutate(self, value_or_callback: Never = ...) -> "Mutate.BuilderContext": ...

        def mutate(self, value_or_callback=None, /):
            """
            Mutation is used to modify matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = Mutate.BuilderContext()
                context._parent_builder = self
                context._field_name = "mutate"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Mutate.builder())
                if isinstance(output, Mutate.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("mutate", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a label to identify the rule, It must be unique within the policy.
            """
            return self._set("name", value)

        def preconditions(self, value: Optional[Any], /) -> Self:
            """
            Preconditions are used to determine if a policy rule should be applied by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
            of conditions (without `any` or `all` statements is supported for backwards compatibility but
            will be deprecated in the next major release.
            See: https://kyverno.io/docs/writing-policies/preconditions/
            """
            return self._set("preconditions", value)

        def report_properties(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            ReportProperties are the additional properties from the rule that will be added to the policy report result
            """
            return self._set("report_properties", value)

        def skip_background_requests(self, value: Optional[bool], /) -> Self:
            """
            SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
            The default value is set to "true", it must be set to "false" to apply
            generate and mutateExisting rules to those requests.
            """
            return self._set("skip_background_requests", value)

        @overload
        def validate_(
            self, value_or_callback: Optional[ValidateModel5], /
        ) -> "RuleModel2.Builder": ...

        @overload
        def validate_(
            self,
            value_or_callback: Callable[
                [ValidateModel5.Builder], ValidateModel5.Builder | ValidateModel5
            ],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def validate_(self, value_or_callback: Never = ...) -> "ValidateModel5.BuilderContext": ...

        def validate_(self, value_or_callback=None, /):
            """
            Validation is used to validate matching resources.
            """
            if self._in_context and value_or_callback is None:
                context = ValidateModel5.BuilderContext()
                context._parent_builder = self
                context._field_name = "validate_"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ValidateModel5.builder())
                if isinstance(output, ValidateModel5.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validate_", value)

        @overload
        def verify_images(
            self, value_or_callback: List[VerifyImageModel2], /
        ) -> "RuleModel2.Builder": ...

        @overload
        def verify_images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[VerifyImageModel2, VerifyImageModel2.Builder]],
                GenericListBuilder[VerifyImageModel2, VerifyImageModel2.Builder]
                | List[VerifyImageModel2],
            ],
            /,
        ) -> "RuleModel2.Builder": ...

        @overload
        def verify_images(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[VerifyImageModel2.Builder]: ...

        def verify_images(self, value_or_callback=None, /):
            """
            VerifyImages is used to verify image signatures and mutate them to add a digest
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[VerifyImageModel2.Builder]()
                context._parent_builder = self
                context._field_name = "verify_images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VerifyImageModel2.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("verify_images", value)

    class BuilderContext(BuilderContextBase["RuleModel2.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = RuleModel2.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for RuleModel2."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["RuleModel2", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RuleModel2.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]], Field(alias="celPreconditions")
    ] = None
    """
    CELPreconditions are used to determine if a policy rule should be applied by evaluating a
    set of CEL conditions. It can only be used with the validate.cel subrule
    """
    context: Optional[
        List[
            Union[
                ContextModel84,
                ContextModel85,
                ContextModel86,
                ContextModel87,
                ContextModel88,
            ]
        ]
    ] = None
    """
    Context defines variables and data sources that can be used during rule execution.
    """
    exclude: Optional[ExcludeModel5] = None
    """
    ExcludeResources defines when this policy rule should not be applied. The exclude
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the name or role.
    """
    generate: Optional[Generate] = None
    """
    Generation is used to create new resources.
    """
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]], Field(alias="imageExtractors")
    ] = None
    """
    ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.
    This config is only valid for verifyImages rules.
    """
    match: MatchModel2
    """
    MatchResources defines when this policy rule should be applied. The match
    criteria can include resource information (e.g. kind, name, namespace, labels)
    and admission review request information like the user name or role.
    At least one kind is required.
    """
    mutate: Optional[Mutate] = None
    """
    Mutation is used to modify matching resources.
    """
    name: Annotated[str, Field(max_length=63)]
    """
    Name is a label to identify the rule, It must be unique within the policy.
    """
    preconditions: Optional[Any] = None
    """
    Preconditions are used to determine if a policy rule should be applied by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements. A direct list
    of conditions (without `any` or `all` statements is supported for backwards compatibility but
    will be deprecated in the next major release.
    See: https://kyverno.io/docs/writing-policies/preconditions/
    """
    report_properties: Annotated[Optional[Dict[str, str]], Field(alias="reportProperties")] = None
    """
    ReportProperties are the additional properties from the rule that will be added to the policy report result
    """
    skip_background_requests: Annotated[Optional[bool], Field(alias="skipBackgroundRequests")] = (
        True
    )
    """
    SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
    The default value is set to "true", it must be set to "false" to apply
    generate and mutateExisting rules to those requests.
    """
    validate_: Annotated[Optional[ValidateModel5], Field(alias="validate")] = None
    """
    Validation is used to validate matching resources.
    """
    verify_images: Annotated[Optional[List[VerifyImageModel2]], Field(alias="verifyImages")] = None
    """
    VerifyImages is used to verify image signatures and mutate them to add a digest
    """


class ConditionModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConditionModel3"]:
            return ConditionModel3

        def build(self) -> "ConditionModel3":
            return ConditionModel3(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: Literal["True", "False", "Unknown"], /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["ConditionModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConditionModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConditionModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConditionModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConditionModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another.
    This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: Annotated[str, Field(max_length=32768)]
    """
    message is a human readable message indicating details about the transition.
    This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration", ge=0)] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition.
    Producers of specific condition types may define expected values and meanings for this field,
    and whether the values are considered a guaranteed API.
    The value should be a CamelCase string.
    This field may not be empty.
    """
    status: Literal["True", "False", "Unknown"]
    """
    status of the condition, one of True, False, Unknown.
    """
    type: Annotated[
        str,
        Field(
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class PolicyStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PolicyStatus"]:
            return PolicyStatus

        def build(self) -> "PolicyStatus":
            return PolicyStatus(**self._attrs)

        @overload
        def autogen(self, value_or_callback: Optional[Autogen], /) -> "PolicyStatus.Builder": ...

        @overload
        def autogen(
            self,
            value_or_callback: Callable[[Autogen.Builder], Autogen.Builder | Autogen],
            /,
        ) -> "PolicyStatus.Builder": ...

        @overload
        def autogen(self, value_or_callback: Never = ...) -> "Autogen.BuilderContext": ...

        def autogen(self, value_or_callback=None, /):
            """
            AutogenStatus contains autogen status information.
            """
            if self._in_context and value_or_callback is None:
                context = Autogen.BuilderContext()
                context._parent_builder = self
                context._field_name = "autogen"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Autogen.builder())
                if isinstance(output, Autogen.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("autogen", value)

        @overload
        def conditions(
            self, value_or_callback: List[ConditionModel3], /
        ) -> "PolicyStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ConditionModel3, ConditionModel3.Builder]],
                GenericListBuilder[ConditionModel3, ConditionModel3.Builder]
                | List[ConditionModel3],
            ],
            /,
        ) -> "PolicyStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ConditionModel3.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ConditionModel3.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConditionModel3.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def ready(self, value: Optional[bool], /) -> Self:
            """
            Deprecated in favor of Conditions
            """
            return self._set("ready", value)

        @overload
        def rulecount(
            self, value_or_callback: Optional[Rulecount], /
        ) -> "PolicyStatus.Builder": ...

        @overload
        def rulecount(
            self,
            value_or_callback: Callable[[Rulecount.Builder], Rulecount.Builder | Rulecount],
            /,
        ) -> "PolicyStatus.Builder": ...

        @overload
        def rulecount(self, value_or_callback: Never = ...) -> "Rulecount.BuilderContext": ...

        def rulecount(self, value_or_callback=None, /):
            """
            RuleCountStatus contains four variables which describes counts for
            validate, generate, mutate and verify images rules
            """
            if self._in_context and value_or_callback is None:
                context = Rulecount.BuilderContext()
                context._parent_builder = self
                context._field_name = "rulecount"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Rulecount.builder())
                if isinstance(output, Rulecount.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("rulecount", value)

        @overload
        def validatingadmissionpolicy(
            self, value_or_callback: Optional[Validatingadmissionpolicy], /
        ) -> "PolicyStatus.Builder": ...

        @overload
        def validatingadmissionpolicy(
            self,
            value_or_callback: Callable[
                [Validatingadmissionpolicy.Builder],
                Validatingadmissionpolicy.Builder | Validatingadmissionpolicy,
            ],
            /,
        ) -> "PolicyStatus.Builder": ...

        @overload
        def validatingadmissionpolicy(
            self, value_or_callback: Never = ...
        ) -> "Validatingadmissionpolicy.BuilderContext": ...

        def validatingadmissionpolicy(self, value_or_callback=None, /):
            """
            ValidatingAdmissionPolicy contains status information
            """
            if self._in_context and value_or_callback is None:
                context = Validatingadmissionpolicy.BuilderContext()
                context._parent_builder = self
                context._field_name = "validatingadmissionpolicy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Validatingadmissionpolicy.builder())
                if isinstance(output, Validatingadmissionpolicy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("validatingadmissionpolicy", value)

    class BuilderContext(BuilderContextBase["PolicyStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PolicyStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PolicyStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PolicyStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PolicyStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    autogen: Optional[Autogen] = None
    """
    AutogenStatus contains autogen status information.
    """
    conditions: Optional[List[ConditionModel3]] = None
    ready: Optional[bool] = None
    """
    Deprecated in favor of Conditions
    """
    rulecount: Optional[Rulecount] = None
    """
    RuleCountStatus contains four variables which describes counts for
    validate, generate, mutate and verify images rules
    """
    validatingadmissionpolicy: Optional[Validatingadmissionpolicy] = None
    """
    ValidatingAdmissionPolicy contains status information
    """


class AllModel22(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel22"]:
            return AllModel22

        def build(self) -> "AllModel22":
            return AllModel22(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AllModel22.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel22.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel22."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel22", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel22.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class AnyModel23(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel23"]:
            return AnyModel23

        def build(self) -> "AnyModel23":
            return AnyModel23(**self._attrs)

        def key(self, value: Optional[Any], /) -> Self:
            """
            Key is the context entry (using JMESPath) for conditional rule evaluation.
            """
            return self._set("key", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            Message is an optional display message
            """
            return self._set("message", value)

        def operator(
            self,
            value: Optional[
                Literal[
                    "Equals",
                    "NotEquals",
                    "AnyIn",
                    "AllIn",
                    "AnyNotIn",
                    "AllNotIn",
                    "GreaterThanOrEquals",
                    "GreaterThan",
                    "LessThanOrEquals",
                    "LessThan",
                    "DurationGreaterThanOrEquals",
                    "DurationGreaterThan",
                    "DurationLessThanOrEquals",
                    "DurationLessThan",
                ]
            ],
            /,
        ) -> Self:
            """
            Operator is the conditional operation to perform. Valid operators are:
            Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
            GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
            DurationLessThanOrEquals, DurationLessThan
            """
            return self._set("operator", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value is the conditional value, or set of values. The values can be fixed set
            or can be variables declared using JMESPath.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["AnyModel23.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel23.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel23."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel23", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel23.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[Any] = None
    """
    Key is the context entry (using JMESPath) for conditional rule evaluation.
    """
    message: Optional[str] = None
    """
    Message is an optional display message
    """
    operator: Optional[
        Literal[
            "Equals",
            "NotEquals",
            "AnyIn",
            "AllIn",
            "AnyNotIn",
            "AllNotIn",
            "GreaterThanOrEquals",
            "GreaterThan",
            "LessThanOrEquals",
            "LessThan",
            "DurationGreaterThanOrEquals",
            "DurationGreaterThan",
            "DurationLessThanOrEquals",
            "DurationLessThan",
        ]
    ] = None
    """
    Operator is the conditional operation to perform. Valid operators are:
    Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
    GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
    DurationLessThanOrEquals, DurationLessThan
    """
    value: Optional[Any] = None
    """
    Value is the conditional value, or set of values. The values can be fixed set
    or can be variables declared using JMESPath.
    """


class Exception(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Exception"]:
            return Exception

        def build(self) -> "Exception":
            return Exception(**self._attrs)

        def policy_name(self, value: str, /) -> Self:
            """
            PolicyName identifies the policy to which the exception is applied.
            The policy name uses the format <namespace>/<name> unless it
            references a ClusterPolicy.
            """
            return self._set("policy_name", value)

        def rule_names(self, value: List[str], /) -> Self:
            """
            RuleNames identifies the rules to which the exception is applied.
            """
            return self._set("rule_names", value)

    class BuilderContext(BuilderContextBase["Exception.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Exception.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Exception."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Exception", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Exception.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    policy_name: Annotated[str, Field(alias="policyName")]
    """
    PolicyName identifies the policy to which the exception is applied.
    The policy name uses the format <namespace>/<name> unless it
    references a ClusterPolicy.
    """
    rule_names: Annotated[List[str], Field(alias="ruleNames")]
    """
    RuleNames identifies the rules to which the exception is applied.
    """


class AllModel23(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AllModel23"]:
            return AllModel23

        def build(self) -> "AllModel23":
            return AllModel23(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AllModel23.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AllModel23.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AllModel23.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AllModel23.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AllModel23.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AllModel23.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AllModel23."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AllModel23", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AllModel23.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class AnyModel24(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AnyModel24"]:
            return AnyModel24

        def build(self) -> "AnyModel24":
            return AnyModel24(**self._attrs)

        def cluster_roles(self, value: Optional[List[str]], /) -> Self:
            """
            ClusterRoles is the list of cluster-wide role names for the user.
            """
            return self._set("cluster_roles", value)

        @overload
        def resources(self, value_or_callback: Optional[Resources], /) -> "AnyModel24.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[[Resources.Builder], Resources.Builder | Resources],
            /,
        ) -> "AnyModel24.Builder": ...

        @overload
        def resources(self, value_or_callback: Never = ...) -> "Resources.BuilderContext": ...

        def resources(self, value_or_callback=None, /):
            """
            ResourceDescription contains information about the resource being created or modified.
            """
            if self._in_context and value_or_callback is None:
                context = Resources.BuilderContext()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Resources.builder())
                if isinstance(output, Resources.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

        def roles(self, value: Optional[List[str]], /) -> Self:
            """
            Roles is the list of namespaced role names for the user.
            """
            return self._set("roles", value)

        @overload
        def subjects(self, value_or_callback: List[Subject], /) -> "AnyModel24.Builder": ...

        @overload
        def subjects(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Subject, Subject.Builder]],
                GenericListBuilder[Subject, Subject.Builder] | List[Subject],
            ],
            /,
        ) -> "AnyModel24.Builder": ...

        @overload
        def subjects(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Subject.Builder]: ...

        def subjects(self, value_or_callback=None, /):
            """
            Subjects is the list of subject names like users, user groups, and service accounts.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Subject.Builder]()
                context._parent_builder = self
                context._field_name = "subjects"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Subject.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("subjects", value)

    class BuilderContext(BuilderContextBase["AnyModel24.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AnyModel24.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AnyModel24."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AnyModel24", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AnyModel24.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cluster_roles: Annotated[Optional[List[str]], Field(alias="clusterRoles")] = None
    """
    ClusterRoles is the list of cluster-wide role names for the user.
    """
    resources: Optional[Resources] = None
    """
    ResourceDescription contains information about the resource being created or modified.
    """
    roles: Optional[List[str]] = None
    """
    Roles is the list of namespaced role names for the user.
    """
    subjects: Optional[List[Subject]] = None
    """
    Subjects is the list of subject names like users, user groups, and service accounts.
    """


class MatchModel3(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["MatchModel3"]:
            return MatchModel3

        def build(self) -> "MatchModel3":
            return MatchModel3(**self._attrs)

        @overload
        def all(self, value_or_callback: List[AllModel23], /) -> "MatchModel3.Builder": ...

        @overload
        def all(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AllModel23, AllModel23.Builder]],
                GenericListBuilder[AllModel23, AllModel23.Builder] | List[AllModel23],
            ],
            /,
        ) -> "MatchModel3.Builder": ...

        @overload
        def all(self, value_or_callback: Never = ...) -> ListBuilderContext[AllModel23.Builder]: ...

        def all(self, value_or_callback=None, /):
            """
            All allows specifying resources which will be ANDed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AllModel23.Builder]()
                context._parent_builder = self
                context._field_name = "all"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AllModel23.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("all", value)

        @overload
        def any(self, value_or_callback: List[AnyModel24], /) -> "MatchModel3.Builder": ...

        @overload
        def any(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[AnyModel24, AnyModel24.Builder]],
                GenericListBuilder[AnyModel24, AnyModel24.Builder] | List[AnyModel24],
            ],
            /,
        ) -> "MatchModel3.Builder": ...

        @overload
        def any(self, value_or_callback: Never = ...) -> ListBuilderContext[AnyModel24.Builder]: ...

        def any(self, value_or_callback=None, /):
            """
            Any allows specifying resources which will be ORed
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[AnyModel24.Builder]()
                context._parent_builder = self
                context._field_name = "any"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AnyModel24.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("any", value)

    class BuilderContext(BuilderContextBase["MatchModel3.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MatchModel3.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MatchModel3."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["MatchModel3", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use MatchModel3.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    all: Optional[List[AllModel23]] = None
    """
    All allows specifying resources which will be ANDed
    """
    any: Optional[List[AnyModel24]] = None
    """
    Any allows specifying resources which will be ORed
    """


class PodSecurityModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PodSecurityModel"]:
            return PodSecurityModel

        def build(self) -> "PodSecurityModel":
            return PodSecurityModel(**self._attrs)

        def control_name(
            self,
            value: Literal[
                "HostProcess",
                "Host Namespaces",
                "Privileged Containers",
                "Capabilities",
                "HostPath Volumes",
                "Host Ports",
                "AppArmor",
                "SELinux",
                "/proc Mount Type",
                "Seccomp",
                "Sysctls",
                "Volume Types",
                "Privilege Escalation",
                "Running as Non-root",
                "Running as Non-root user",
            ],
            /,
        ) -> Self:
            """
            ControlName specifies the name of the Pod Security Standard control.
            See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
            """
            return self._set("control_name", value)

        def images(self, value: Optional[List[str]], /) -> Self:
            """
            Images selects matching containers and applies the container level PSS.
            Each image is the image name consisting of the registry address, repository, image, and tag.
            Empty list matches no containers, PSS checks are applied at the pod level only.
            Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
            """
            return self._set("images", value)

        def restricted_field(self, value: Optional[str], /) -> Self:
            """
            RestrictedField selects the field for the given Pod Security Standard control.
            When not set, all restricted fields for the control are selected.
            """
            return self._set("restricted_field", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            Values defines the allowed values that can be excluded.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["PodSecurityModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PodSecurityModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PodSecurityModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PodSecurityModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PodSecurityModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(alias="controlName"),
    ]
    """
    ControlName specifies the name of the Pod Security Standard control.
    See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
    """
    images: Optional[List[str]] = None
    """
    Images selects matching containers and applies the container level PSS.
    Each image is the image name consisting of the registry address, repository, image, and tag.
    Empty list matches no containers, PSS checks are applied at the pod level only.
    Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
    """
    restricted_field: Annotated[Optional[str], Field(alias="restrictedField")] = None
    """
    RestrictedField selects the field for the given Pod Security Standard control.
    When not set, all restricted fields for the control are selected.
    """
    values: Optional[List[str]] = None
    """
    Values defines the allowed values that can be excluded.
    """


class PolicyExceptionSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PolicyExceptionSpec"]:
            return PolicyExceptionSpec

        def build(self) -> "PolicyExceptionSpec":
            return PolicyExceptionSpec(**self._attrs)

        def background(self, value: Optional[bool], /) -> Self:
            """
            Background controls if exceptions are applied to existing policies during a background scan.
            Optional. Default value is "true". The value must be set to "false" if the policy rule
            uses variables that are only available in the admission review request (e.g. user name).
            """
            return self._set("background", value)

        @overload
        def conditions(
            self, value_or_callback: Optional[Conditions], /
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[[Conditions.Builder], Conditions.Builder | Conditions],
            /,
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def conditions(self, value_or_callback: Never = ...) -> "Conditions.BuilderContext": ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions are used to determine if a resource applies to the exception by evaluating a
            set of conditions. The declaration can contain nested `any` or `all` statements.
            """
            if self._in_context and value_or_callback is None:
                context = Conditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Conditions.builder())
                if isinstance(output, Conditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        @overload
        def exceptions(
            self, value_or_callback: List[Exception], /
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def exceptions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Exception, Exception.Builder]],
                GenericListBuilder[Exception, Exception.Builder] | List[Exception],
            ],
            /,
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def exceptions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Exception.Builder]: ...

        def exceptions(self, value_or_callback=None, /):
            """
            Exceptions is a list policy/rules to be excluded
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Exception.Builder]()
                context._parent_builder = self
                context._field_name = "exceptions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Exception.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("exceptions", value)

        @overload
        def match(self, value_or_callback: MatchModel3, /) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def match(
            self,
            value_or_callback: Callable[[MatchModel3.Builder], MatchModel3.Builder | MatchModel3],
            /,
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def match(self, value_or_callback: Never = ...) -> "MatchModel3.BuilderContext": ...

        def match(self, value_or_callback=None, /):
            """
            Match defines match clause used to check if a resource applies to the exception
            """
            if self._in_context and value_or_callback is None:
                context = MatchModel3.BuilderContext()
                context._parent_builder = self
                context._field_name = "match"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(MatchModel3.builder())
                if isinstance(output, MatchModel3.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("match", value)

        @overload
        def pod_security(
            self, value_or_callback: List[PodSecurityModel], /
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def pod_security(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[PodSecurityModel, PodSecurityModel.Builder]],
                GenericListBuilder[PodSecurityModel, PodSecurityModel.Builder]
                | List[PodSecurityModel],
            ],
            /,
        ) -> "PolicyExceptionSpec.Builder": ...

        @overload
        def pod_security(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[PodSecurityModel.Builder]: ...

        def pod_security(self, value_or_callback=None, /):
            """
            PodSecurity specifies the Pod Security Standard controls to be excluded.
            Applicable only to policies that have validate.podSecurity subrule.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[PodSecurityModel.Builder]()
                context._parent_builder = self
                context._field_name = "pod_security"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PodSecurityModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("pod_security", value)

    class BuilderContext(BuilderContextBase["PolicyExceptionSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PolicyExceptionSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PolicyExceptionSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PolicyExceptionSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PolicyExceptionSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    background: Optional[bool] = None
    """
    Background controls if exceptions are applied to existing policies during a background scan.
    Optional. Default value is "true". The value must be set to "false" if the policy rule
    uses variables that are only available in the admission review request (e.g. user name).
    """
    conditions: Optional[Conditions] = None
    """
    Conditions are used to determine if a resource applies to the exception by evaluating a
    set of conditions. The declaration can contain nested `any` or `all` statements.
    """
    exceptions: List[Exception]
    """
    Exceptions is a list policy/rules to be excluded
    """
    match: MatchModel3
    """
    Match defines match clause used to check if a resource applies to the exception
    """
    pod_security: Annotated[Optional[List[PodSecurityModel]], Field(alias="podSecurity")] = None
    """
    PodSecurity specifies the Pod Security Standard controls to be excluded.
    Applicable only to policies that have validate.podSecurity subrule.
    """


class CleanupPolicy(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CleanupPolicy"]:
            return CleanupPolicy

        def build(self) -> "CleanupPolicy":
            return CleanupPolicy(**self._attrs)

        def api_version(self, value: Optional[Literal["kyverno.io/v2beta1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["CleanupPolicy"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "CleanupPolicy.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "CleanupPolicy.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: CleanupPolicySpec, /) -> "CleanupPolicy.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [CleanupPolicySpec.Builder],
                CleanupPolicySpec.Builder | CleanupPolicySpec,
            ],
            /,
        ) -> "CleanupPolicy.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "CleanupPolicySpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = CleanupPolicySpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CleanupPolicySpec.builder())
                if isinstance(output, CleanupPolicySpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[CleanupPolicyStatus], /
        ) -> "CleanupPolicy.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [CleanupPolicyStatus.Builder],
                CleanupPolicyStatus.Builder | CleanupPolicyStatus,
            ],
            /,
        ) -> "CleanupPolicy.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "CleanupPolicyStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = CleanupPolicyStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CleanupPolicyStatus.builder())
                if isinstance(output, CleanupPolicyStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["CleanupPolicy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CleanupPolicy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CleanupPolicy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CleanupPolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CleanupPolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["kyverno.io/v2beta1"]], Field(alias="apiVersion")] = (
        "kyverno.io/v2beta1"
    )
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["CleanupPolicy"]] = "CleanupPolicy"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: CleanupPolicySpec
    status: Optional[CleanupPolicyStatus] = None


class ClusterCleanupPolicy(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterCleanupPolicy"]:
            return ClusterCleanupPolicy

        def build(self) -> "ClusterCleanupPolicy":
            return ClusterCleanupPolicy(**self._attrs)

        def api_version(self, value: Optional[Literal["kyverno.io/v2beta1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ClusterCleanupPolicy"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(
            self, value_or_callback: ClusterCleanupPolicySpec, /
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [ClusterCleanupPolicySpec.Builder],
                ClusterCleanupPolicySpec.Builder | ClusterCleanupPolicySpec,
            ],
            /,
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def spec(
            self, value_or_callback: Never = ...
        ) -> "ClusterCleanupPolicySpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ClusterCleanupPolicySpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ClusterCleanupPolicySpec.builder())
                if isinstance(output, ClusterCleanupPolicySpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[ClusterCleanupPolicyStatus], /
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [ClusterCleanupPolicyStatus.Builder],
                ClusterCleanupPolicyStatus.Builder | ClusterCleanupPolicyStatus,
            ],
            /,
        ) -> "ClusterCleanupPolicy.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "ClusterCleanupPolicyStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ClusterCleanupPolicyStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ClusterCleanupPolicyStatus.builder())
                if isinstance(output, ClusterCleanupPolicyStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["ClusterCleanupPolicy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterCleanupPolicy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterCleanupPolicy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterCleanupPolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterCleanupPolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["kyverno.io/v2beta1"]], Field(alias="apiVersion")] = (
        "kyverno.io/v2beta1"
    )
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["ClusterCleanupPolicy"]] = "ClusterCleanupPolicy"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: ClusterCleanupPolicySpec
    status: Optional[ClusterCleanupPolicyStatus] = None


class ClusterPolicy(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ClusterPolicy"]:
            return ClusterPolicy

        def build(self) -> "ClusterPolicy":
            return ClusterPolicy(**self._attrs)

        def api_version(self, value: Optional[Literal["kyverno.io/v2beta1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ClusterPolicy"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "ClusterPolicy.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "ClusterPolicy.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: ClusterPolicySpec, /) -> "ClusterPolicy.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [ClusterPolicySpec.Builder],
                ClusterPolicySpec.Builder | ClusterPolicySpec,
            ],
            /,
        ) -> "ClusterPolicy.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "ClusterPolicySpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ClusterPolicySpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ClusterPolicySpec.builder())
                if isinstance(output, ClusterPolicySpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[ClusterPolicyStatus], /
        ) -> "ClusterPolicy.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [ClusterPolicyStatus.Builder],
                ClusterPolicyStatus.Builder | ClusterPolicyStatus,
            ],
            /,
        ) -> "ClusterPolicy.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "ClusterPolicyStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ClusterPolicyStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ClusterPolicyStatus.builder())
                if isinstance(output, ClusterPolicyStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["ClusterPolicy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ClusterPolicy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ClusterPolicy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ClusterPolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ClusterPolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["kyverno.io/v2beta1"]], Field(alias="apiVersion")] = (
        "kyverno.io/v2beta1"
    )
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["ClusterPolicy"]] = "ClusterPolicy"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: ClusterPolicySpec
    status: Optional[ClusterPolicyStatus] = None


class Policy(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Policy"]:
            return Policy

        def build(self) -> "Policy":
            return Policy(**self._attrs)

        def api_version(self, value: Optional[Literal["kyverno.io/v2beta1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Policy"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "Policy.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "Policy.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: PolicySpec, /) -> "Policy.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[[PolicySpec.Builder], PolicySpec.Builder | PolicySpec],
            /,
        ) -> "Policy.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "PolicySpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = PolicySpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PolicySpec.builder())
                if isinstance(output, PolicySpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(self, value_or_callback: Optional[PolicyStatus], /) -> "Policy.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [PolicyStatus.Builder], PolicyStatus.Builder | PolicyStatus
            ],
            /,
        ) -> "Policy.Builder": ...

        @overload
        def status(self, value_or_callback: Never = ...) -> "PolicyStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = PolicyStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PolicyStatus.builder())
                if isinstance(output, PolicyStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["Policy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Policy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Policy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Policy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Policy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["kyverno.io/v2beta1"]], Field(alias="apiVersion")] = (
        "kyverno.io/v2beta1"
    )
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["Policy"]] = "Policy"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: PolicySpec
    status: Optional[PolicyStatus] = None


class PolicyException(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PolicyException"]:
            return PolicyException

        def build(self) -> "PolicyException":
            return PolicyException(**self._attrs)

        def api_version(self, value: Optional[Literal["kyverno.io/v2beta1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["PolicyException"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "PolicyException.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "PolicyException.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: PolicyExceptionSpec, /) -> "PolicyException.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [PolicyExceptionSpec.Builder],
                PolicyExceptionSpec.Builder | PolicyExceptionSpec,
            ],
            /,
        ) -> "PolicyException.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "PolicyExceptionSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = PolicyExceptionSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PolicyExceptionSpec.builder())
                if isinstance(output, PolicyExceptionSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

    class BuilderContext(BuilderContextBase["PolicyException.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PolicyException.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PolicyException."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PolicyException", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PolicyException.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["kyverno.io/v2beta1"]], Field(alias="apiVersion")] = (
        "kyverno.io/v2beta1"
    )
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["PolicyException"]] = "PolicyException"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: PolicyExceptionSpec
