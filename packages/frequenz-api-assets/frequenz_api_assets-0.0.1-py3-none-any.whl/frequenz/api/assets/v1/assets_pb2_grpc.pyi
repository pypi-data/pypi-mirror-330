"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Assets API

Frequenz gRPC API to retrieval platform assets information

Copyright:
Copyright 2025 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import abc
import collections.abc
import frequenz.api.assets.v1.assets_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PlatformAssetsStub:
    """Service providing access to manage and retrieve information
    related to gridpools and microgrids, and other platform assets.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetMicrogrid: grpc.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.GetMicrogridRequest,
        frequenz.api.assets.v1.assets_pb2.GetMicrogridResponse,
    ]
    """Returns details of a specific microgrid."""

    ListMicrogridComponents: grpc.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsRequest,
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsResponse,
    ]
    """Returns list of a electrical components for a specific microgrid."""

    ListMicrogridComponentConnections: grpc.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsRequest,
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsResponse,
    ]
    """Returns a list of the connections between electrical components for a
    specific microgrid
    """

class PlatformAssetsAsyncStub:
    """Service providing access to manage and retrieve information
    related to gridpools and microgrids, and other platform assets.
    """

    GetMicrogrid: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.GetMicrogridRequest,
        frequenz.api.assets.v1.assets_pb2.GetMicrogridResponse,
    ]
    """Returns details of a specific microgrid."""

    ListMicrogridComponents: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsRequest,
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsResponse,
    ]
    """Returns list of a electrical components for a specific microgrid."""

    ListMicrogridComponentConnections: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsRequest,
        frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsResponse,
    ]
    """Returns a list of the connections between electrical components for a
    specific microgrid
    """

class PlatformAssetsServicer(metaclass=abc.ABCMeta):
    """Service providing access to manage and retrieve information
    related to gridpools and microgrids, and other platform assets.
    """

    @abc.abstractmethod
    def GetMicrogrid(
        self,
        request: frequenz.api.assets.v1.assets_pb2.GetMicrogridRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.assets.v1.assets_pb2.GetMicrogridResponse, collections.abc.Awaitable[frequenz.api.assets.v1.assets_pb2.GetMicrogridResponse]]:
        """Returns details of a specific microgrid."""

    @abc.abstractmethod
    def ListMicrogridComponents(
        self,
        request: frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsResponse, collections.abc.Awaitable[frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentsResponse]]:
        """Returns list of a electrical components for a specific microgrid."""

    @abc.abstractmethod
    def ListMicrogridComponentConnections(
        self,
        request: frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsResponse, collections.abc.Awaitable[frequenz.api.assets.v1.assets_pb2.ListMicrogridComponentConnectionsResponse]]:
        """Returns a list of the connections between electrical components for a
        specific microgrid
        """

def add_PlatformAssetsServicer_to_server(servicer: PlatformAssetsServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
