# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ParameterBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'system': 'str',
        'position': 'str',
        'x_coordinate': 'float',
        'y_coordinate': 'float',
        'z_coordinate': 'float',
        'type': 'str',
        'acquisition': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'system': 'System',
        'position': 'Position',
        'x_coordinate': 'XCoordinate',
        'y_coordinate': 'YCoordinate',
        'z_coordinate': 'ZCoordinate',
        'type': 'Type',
        'acquisition': 'Acquisition',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser'
    }

    def __init__(self, id=None, name=None, system=None, position=None, x_coordinate=None, y_coordinate=None, z_coordinate=None, type=None, acquisition=None, last_update_date_utc=None, last_update_user=None):  # noqa: E501
        """ParameterBinding - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._system = None
        self._position = None
        self._x_coordinate = None
        self._y_coordinate = None
        self._z_coordinate = None
        self._type = None
        self._acquisition = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self.discriminator = None
        self.id = id
        self.name = name
        if system is not None:
            self.system = system
        if position is not None:
            self.position = position
        if x_coordinate is not None:
            self.x_coordinate = x_coordinate
        if y_coordinate is not None:
            self.y_coordinate = y_coordinate
        if z_coordinate is not None:
            self.z_coordinate = z_coordinate
        if type is not None:
            self.type = type
        if acquisition is not None:
            self.acquisition = acquisition
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user

    @property
    def id(self):
        """Gets the id of this ParameterBinding.  # noqa: E501

        ParameterBinding unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new ParameterBinding.  # noqa: E501

        :return: The id of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParameterBinding.

        ParameterBinding unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new ParameterBinding.  # noqa: E501

        :param id: The id of this ParameterBinding.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ParameterBinding.  # noqa: E501

        Name of the ParameterBinding  # noqa: E501

        :return: The name of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterBinding.

        Name of the ParameterBinding  # noqa: E501

        :param name: The name of this ParameterBinding.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def system(self):
        """Gets the system of this ParameterBinding.  # noqa: E501

        ParameterBinding system  # noqa: E501

        :return: The system of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ParameterBinding.

        ParameterBinding system  # noqa: E501

        :param system: The system of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._system = system

    @property
    def position(self):
        """Gets the position of this ParameterBinding.  # noqa: E501

        ParameterBinding position  # noqa: E501

        :return: The position of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ParameterBinding.

        ParameterBinding position  # noqa: E501

        :param position: The position of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def x_coordinate(self):
        """Gets the x_coordinate of this ParameterBinding.  # noqa: E501

        X coordinate of the ParameterBinding  # noqa: E501

        :return: The x_coordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._x_coordinate

    @x_coordinate.setter
    def x_coordinate(self, x_coordinate):
        """Sets the x_coordinate of this ParameterBinding.

        X coordinate of the ParameterBinding  # noqa: E501

        :param x_coordinate: The x_coordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._x_coordinate = x_coordinate

    @property
    def y_coordinate(self):
        """Gets the y_coordinate of this ParameterBinding.  # noqa: E501

        Y coordinate of the ParameterBinding  # noqa: E501

        :return: The y_coordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._y_coordinate

    @y_coordinate.setter
    def y_coordinate(self, y_coordinate):
        """Sets the y_coordinate of this ParameterBinding.

        Y coordinate of the ParameterBinding  # noqa: E501

        :param y_coordinate: The y_coordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._y_coordinate = y_coordinate

    @property
    def z_coordinate(self):
        """Gets the z_coordinate of this ParameterBinding.  # noqa: E501

        Z coordinate of the ParameterBinding  # noqa: E501

        :return: The z_coordinate of this ParameterBinding.  # noqa: E501
        :rtype: float
        """
        return self._z_coordinate

    @z_coordinate.setter
    def z_coordinate(self, z_coordinate):
        """Sets the z_coordinate of this ParameterBinding.

        Z coordinate of the ParameterBinding  # noqa: E501

        :param z_coordinate: The z_coordinate of this ParameterBinding.  # noqa: E501
        :type: float
        """

        self._z_coordinate = z_coordinate

    @property
    def type(self):
        """Gets the type of this ParameterBinding.  # noqa: E501

        ParameterBinding type  # noqa: E501

        :return: The type of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParameterBinding.

        ParameterBinding type  # noqa: E501

        :param type: The type of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def acquisition(self):
        """Gets the acquisition of this ParameterBinding.  # noqa: E501

        ParameterBinding acquisition mode  # noqa: E501

        :return: The acquisition of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition):
        """Sets the acquisition of this ParameterBinding.

        ParameterBinding acquisition mode  # noqa: E501

        :param acquisition: The acquisition of this ParameterBinding.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Standard", "Virtual", "xCB"]  # noqa: E501
        if acquisition not in allowed_values:
            raise ValueError(
                "Invalid value for `acquisition` ({0}), must be one of {1}"  # noqa: E501
                .format(acquisition, allowed_values)
            )

        self._acquisition = acquisition

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this ParameterBinding.  # noqa: E501

        Last update utc date of the ParameterBinding  # noqa: E501

        :return: The last_update_date_utc of this ParameterBinding.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this ParameterBinding.

        Last update utc date of the ParameterBinding  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this ParameterBinding.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this ParameterBinding.  # noqa: E501

        The name of the user who performed the last update on the ParameterBinding  # noqa: E501

        :return: The last_update_user of this ParameterBinding.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this ParameterBinding.

        The name of the user who performed the last update on the ParameterBinding  # noqa: E501

        :param last_update_user: The last_update_user of this ParameterBinding.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterBinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
