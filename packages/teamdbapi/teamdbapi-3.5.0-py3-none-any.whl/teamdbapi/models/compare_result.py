# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompareResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'data_axe_x': 'list[float]',
        'data_axe_y': 'list[float]',
        'data_axe_z': 'list[float]',
        'data': 'list[object]',
        'revision_name': 'str'
    }

    attribute_map = {
        'reference': 'Reference',
        'data_axe_x': 'DataAxeX',
        'data_axe_y': 'DataAxeY',
        'data_axe_z': 'DataAxeZ',
        'data': 'Data',
        'revision_name': 'RevisionName'
    }

    def __init__(self, reference=None, data_axe_x=None, data_axe_y=None, data_axe_z=None, data=None, revision_name=None):  # noqa: E501
        """CompareResult - a model defined in Swagger"""  # noqa: E501
        self._reference = None
        self._data_axe_x = None
        self._data_axe_y = None
        self._data_axe_z = None
        self._data = None
        self._revision_name = None
        self.discriminator = None
        if reference is not None:
            self.reference = reference
        if data_axe_x is not None:
            self.data_axe_x = data_axe_x
        if data_axe_y is not None:
            self.data_axe_y = data_axe_y
        if data_axe_z is not None:
            self.data_axe_z = data_axe_z
        if data is not None:
            self.data = data
        if revision_name is not None:
            self.revision_name = revision_name

    @property
    def reference(self):
        """Gets the reference of this CompareResult.  # noqa: E501

        Parameter reference  # noqa: E501

        :return: The reference of this CompareResult.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CompareResult.

        Parameter reference  # noqa: E501

        :param reference: The reference of this CompareResult.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def data_axe_x(self):
        """Gets the data_axe_x of this CompareResult.  # noqa: E501

        Data axe X  # noqa: E501

        :return: The data_axe_x of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_x

    @data_axe_x.setter
    def data_axe_x(self, data_axe_x):
        """Sets the data_axe_x of this CompareResult.

        Data axe X  # noqa: E501

        :param data_axe_x: The data_axe_x of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_x = data_axe_x

    @property
    def data_axe_y(self):
        """Gets the data_axe_y of this CompareResult.  # noqa: E501

        Data axe Y  # noqa: E501

        :return: The data_axe_y of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_y

    @data_axe_y.setter
    def data_axe_y(self, data_axe_y):
        """Sets the data_axe_y of this CompareResult.

        Data axe Y  # noqa: E501

        :param data_axe_y: The data_axe_y of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_y = data_axe_y

    @property
    def data_axe_z(self):
        """Gets the data_axe_z of this CompareResult.  # noqa: E501

        Data axe Z  # noqa: E501

        :return: The data_axe_z of this CompareResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_z

    @data_axe_z.setter
    def data_axe_z(self, data_axe_z):
        """Sets the data_axe_z of this CompareResult.

        Data axe Z  # noqa: E501

        :param data_axe_z: The data_axe_z of this CompareResult.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_z = data_axe_z

    @property
    def data(self):
        """Gets the data of this CompareResult.  # noqa: E501

        Parameter data  # noqa: E501

        :return: The data of this CompareResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CompareResult.

        Parameter data  # noqa: E501

        :param data: The data of this CompareResult.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    @property
    def revision_name(self):
        """Gets the revision_name of this CompareResult.  # noqa: E501

        Revision name  # noqa: E501

        :return: The revision_name of this CompareResult.  # noqa: E501
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this CompareResult.

        Revision name  # noqa: E501

        :param revision_name: The revision_name of this CompareResult.  # noqa: E501
        :type: str
        """

        self._revision_name = revision_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompareResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompareResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
