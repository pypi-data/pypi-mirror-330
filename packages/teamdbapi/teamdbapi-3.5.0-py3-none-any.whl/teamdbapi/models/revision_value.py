# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RevisionValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'list[object]',
        'data_axe_x': 'list[float]',
        'data_axe_y': 'list[float]',
        'data_axe_z': 'list[float]',
        'is_main_revision': 'bool'
    }

    attribute_map = {
        'value': 'Value',
        'data_axe_x': 'DataAxeX',
        'data_axe_y': 'DataAxeY',
        'data_axe_z': 'DataAxeZ',
        'is_main_revision': 'IsMainRevision'
    }

    def __init__(self, value=None, data_axe_x=None, data_axe_y=None, data_axe_z=None, is_main_revision=None):  # noqa: E501
        """RevisionValue - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._data_axe_x = None
        self._data_axe_y = None
        self._data_axe_z = None
        self._is_main_revision = None
        self.discriminator = None
        self.value = value
        if data_axe_x is not None:
            self.data_axe_x = data_axe_x
        if data_axe_y is not None:
            self.data_axe_y = data_axe_y
        if data_axe_z is not None:
            self.data_axe_z = data_axe_z
        if is_main_revision is not None:
            self.is_main_revision = is_main_revision

    @property
    def value(self):
        """Gets the value of this RevisionValue.  # noqa: E501

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :return: The value of this RevisionValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RevisionValue.

        The revision value.  Depending on the parameter definition the value can be a single value or 2D value or 3D.  For this reason, the Value is represented as a 3 dimensionals JSON array.  The value type can be a string or double depending on the parameter.  For this reason, you have to serialize the value with invariant culture format.  Decimal separator must be the point. The coma is use to separate the elements inside the array.  Single Value sample : [[[0.7]]]  1D Value sample : [[[0.0]],[[0.1]],[[0.2]]]  2D Value sample : [[[1.0],[1.0],[1.0]], [[1.0],[1.0],[1.0],[1.0]]]  # noqa: E501

        :param value: The value of this RevisionValue.  # noqa: E501
        :type: list[object]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def data_axe_x(self):
        """Gets the data_axe_x of this RevisionValue.  # noqa: E501

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The data_axe_x of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_x

    @data_axe_x.setter
    def data_axe_x(self, data_axe_x):
        """Sets the data_axe_x of this RevisionValue.

        X axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param data_axe_x: The data_axe_x of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_x = data_axe_x

    @property
    def data_axe_y(self):
        """Gets the data_axe_y of this RevisionValue.  # noqa: E501

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The data_axe_y of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_y

    @data_axe_y.setter
    def data_axe_y(self, data_axe_y):
        """Sets the data_axe_y of this RevisionValue.

        Y axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param data_axe_y: The data_axe_y of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_y = data_axe_y

    @property
    def data_axe_z(self):
        """Gets the data_axe_z of this RevisionValue.  # noqa: E501

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :return: The data_axe_z of this RevisionValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._data_axe_z

    @data_axe_z.setter
    def data_axe_z(self, data_axe_z):
        """Sets the data_axe_z of this RevisionValue.

        Z axis data : filled only when the axis data are embedded inside the parameter definition  # noqa: E501

        :param data_axe_z: The data_axe_z of this RevisionValue.  # noqa: E501
        :type: list[float]
        """

        self._data_axe_z = data_axe_z

    @property
    def is_main_revision(self):
        """Gets the is_main_revision of this RevisionValue.  # noqa: E501

        When true, the revision is used in priority when importing revision from a Lifing mounting to a car parameters  assembly. Otherwise, the most recent revision will be used.  # noqa: E501

        :return: The is_main_revision of this RevisionValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_revision

    @is_main_revision.setter
    def is_main_revision(self, is_main_revision):
        """Sets the is_main_revision of this RevisionValue.

        When true, the revision is used in priority when importing revision from a Lifing mounting to a car parameters  assembly. Otherwise, the most recent revision will be used.  # noqa: E501

        :param is_main_revision: The is_main_revision of this RevisionValue.  # noqa: E501
        :type: bool
        """

        self._is_main_revision = is_main_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevisionValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
