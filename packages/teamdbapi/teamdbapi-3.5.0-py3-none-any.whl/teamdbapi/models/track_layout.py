# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TrackLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'length': 'float',
        'track_id': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str',
        'revision': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'length': 'Length',
        'track_id': 'TrackId',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser',
        'revision': 'Revision'
    }

    def __init__(self, id=None, name=None, length=None, track_id=None, last_update_date_utc=None, last_update_user=None, revision=None):  # noqa: E501
        """TrackLayout - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._length = None
        self._track_id = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self._revision = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.length = length
        self.track_id = track_id
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user
        if revision is not None:
            self.revision = revision

    @property
    def id(self):
        """Gets the id of this TrackLayout.  # noqa: E501

        The unique track layout Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Track Layout.  # noqa: E501

        :return: The id of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackLayout.

        The unique track layout Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Track Layout.  # noqa: E501

        :param id: The id of this TrackLayout.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrackLayout.  # noqa: E501

        The track layout name  # noqa: E501

        :return: The name of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackLayout.

        The track layout name  # noqa: E501

        :param name: The name of this TrackLayout.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def length(self):
        """Gets the length of this TrackLayout.  # noqa: E501

        The track layout length in meters  # noqa: E501

        :return: The length of this TrackLayout.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TrackLayout.

        The track layout length in meters  # noqa: E501

        :param length: The length of this TrackLayout.  # noqa: E501
        :type: float
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def track_id(self):
        """Gets the track_id of this TrackLayout.  # noqa: E501

        The track Id to which this track layout belongs.  # noqa: E501

        :return: The track_id of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """Sets the track_id of this TrackLayout.

        The track Id to which this track layout belongs.  # noqa: E501

        :param track_id: The track_id of this TrackLayout.  # noqa: E501
        :type: str
        """
        if track_id is None:
            raise ValueError("Invalid value for `track_id`, must not be `None`")  # noqa: E501

        self._track_id = track_id

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this TrackLayout.  # noqa: E501

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The last_update_date_utc of this TrackLayout.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this TrackLayout.

        The last utc date time when the properties of this object have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this TrackLayout.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this TrackLayout.  # noqa: E501

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The last_update_user of this TrackLayout.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this TrackLayout.

        The name of the last user having updated this object.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param last_update_user: The last_update_user of this TrackLayout.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    @property
    def revision(self):
        """Gets the revision of this TrackLayout.  # noqa: E501

        The revision number of the object.  # noqa: E501

        :return: The revision of this TrackLayout.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this TrackLayout.

        The revision number of the object.  # noqa: E501

        :param revision: The revision of this TrackLayout.  # noqa: E501
        :type: int
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackLayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
