# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version_id': 'str',
        'parent_group_id': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'version_id': 'VersionId',
        'parent_group_id': 'ParentGroupId',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser'
    }

    def __init__(self, id=None, name=None, version_id=None, parent_group_id=None, last_update_date_utc=None, last_update_user=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._version_id = None
        self._parent_group_id = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.version_id = version_id
        if parent_group_id is not None:
            self.parent_group_id = parent_group_id
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        The unique group id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Group.  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        The unique group id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Group.  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        The group name. Must be unique for a given version.  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The group name. Must be unique for a given version.  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version_id(self):
        """Gets the version_id of this Group.  # noqa: E501

        The version id to which the group belongs to.  # noqa: E501

        :return: The version_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this Group.

        The version id to which the group belongs to.  # noqa: E501

        :param version_id: The version_id of this Group.  # noqa: E501
        :type: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    @property
    def parent_group_id(self):
        """Gets the parent_group_id of this Group.  # noqa: E501

        The parent group id to which the group belongs to.  Leave the property to Guid.Empty (00000000-0000-0000-0000-000000000000) if the group doesn't have parent.  # noqa: E501

        :return: The parent_group_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """Sets the parent_group_id of this Group.

        The parent group id to which the group belongs to.  Leave the property to Guid.Empty (00000000-0000-0000-0000-000000000000) if the group doesn't have parent.  # noqa: E501

        :param parent_group_id: The parent_group_id of this Group.  # noqa: E501
        :type: str
        """

        self._parent_group_id = parent_group_id

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this Group.  # noqa: E501

        The last utc date time when the properties of the group have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The last_update_date_utc of this Group.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this Group.

        The last utc date time when the properties of the group have been updated.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this Group.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this Group.  # noqa: E501

        The name of the last user having updated the group.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :return: The last_update_user of this Group.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this Group.

        The name of the last user having updated the group.  This field will be automatically updated from the server side each time you update the object.  # noqa: E501

        :param last_update_user: The last_update_user of this Group.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
