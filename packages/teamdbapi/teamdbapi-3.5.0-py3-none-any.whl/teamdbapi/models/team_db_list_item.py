# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TeamDBListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'list_id': 'str',
        'name': 'str',
        'item_order': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'list_id': 'ListId',
        'name': 'Name',
        'item_order': 'ItemOrder'
    }

    def __init__(self, id=None, list_id=None, name=None, item_order=None):  # noqa: E501
        """TeamDBListItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._list_id = None
        self._name = None
        self._item_order = None
        self.discriminator = None
        self.id = id
        self.list_id = list_id
        self.name = name
        if item_order is not None:
            self.item_order = item_order

    @property
    def id(self):
        """Gets the id of this TeamDBListItem.  # noqa: E501

        The unique list item Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new TeamDB List Item.  # noqa: E501

        :return: The id of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamDBListItem.

        The unique list item Id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new TeamDB List Item.  # noqa: E501

        :param id: The id of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def list_id(self):
        """Gets the list_id of this TeamDBListItem.  # noqa: E501

        The unique list id to which this item belongs.  # noqa: E501

        :return: The list_id of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this TeamDBListItem.

        The unique list id to which this item belongs.  # noqa: E501

        :param list_id: The list_id of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")  # noqa: E501

        self._list_id = list_id

    @property
    def name(self):
        """Gets the name of this TeamDBListItem.  # noqa: E501

        The item name.  # noqa: E501

        :return: The name of this TeamDBListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamDBListItem.

        The item name.  # noqa: E501

        :param name: The name of this TeamDBListItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def item_order(self):
        """Gets the item_order of this TeamDBListItem.  # noqa: E501

        The item order in the list.  # noqa: E501

        :return: The item_order of this TeamDBListItem.  # noqa: E501
        :rtype: int
        """
        return self._item_order

    @item_order.setter
    def item_order(self, item_order):
        """Sets the item_order of this TeamDBListItem.

        The item order in the list.  # noqa: E501

        :param item_order: The item_order of this TeamDBListItem.  # noqa: E501
        :type: int
        """

        self._item_order = item_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamDBListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamDBListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
