# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PartCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_parent_id': 'str',
        'part_child_id': 'str',
        'count': 'int',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str'
    }

    attribute_map = {
        'part_parent_id': 'PartParentId',
        'part_child_id': 'PartChildId',
        'count': 'Count',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser'
    }

    def __init__(self, part_parent_id=None, part_child_id=None, count=None, last_update_date_utc=None, last_update_user=None):  # noqa: E501
        """PartCount - a model defined in Swagger"""  # noqa: E501
        self._part_parent_id = None
        self._part_child_id = None
        self._count = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self.discriminator = None
        self.part_parent_id = part_parent_id
        self.part_child_id = part_child_id
        self.count = count
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user

    @property
    def part_parent_id(self):
        """Gets the part_parent_id of this PartCount.  # noqa: E501

        Parent part unique identifier, common to all revisions of the same part  # noqa: E501

        :return: The part_parent_id of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._part_parent_id

    @part_parent_id.setter
    def part_parent_id(self, part_parent_id):
        """Sets the part_parent_id of this PartCount.

        Parent part unique identifier, common to all revisions of the same part  # noqa: E501

        :param part_parent_id: The part_parent_id of this PartCount.  # noqa: E501
        :type: str
        """
        if part_parent_id is None:
            raise ValueError("Invalid value for `part_parent_id`, must not be `None`")  # noqa: E501

        self._part_parent_id = part_parent_id

    @property
    def part_child_id(self):
        """Gets the part_child_id of this PartCount.  # noqa: E501

        Child part unique identifier, common to all revisions of the same part  # noqa: E501

        :return: The part_child_id of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._part_child_id

    @part_child_id.setter
    def part_child_id(self, part_child_id):
        """Sets the part_child_id of this PartCount.

        Child part unique identifier, common to all revisions of the same part  # noqa: E501

        :param part_child_id: The part_child_id of this PartCount.  # noqa: E501
        :type: str
        """
        if part_child_id is None:
            raise ValueError("Invalid value for `part_child_id`, must not be `None`")  # noqa: E501

        self._part_child_id = part_child_id

    @property
    def count(self):
        """Gets the count of this PartCount.  # noqa: E501

        TODO  Nombre d'occurence du part enfant dans le parent  # noqa: E501

        :return: The count of this PartCount.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PartCount.

        TODO  Nombre d'occurence du part enfant dans le parent  # noqa: E501

        :param count: The count of this PartCount.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this PartCount.  # noqa: E501

        Last partCount update utc date  # noqa: E501

        :return: The last_update_date_utc of this PartCount.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this PartCount.

        Last partCount update utc date  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this PartCount.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this PartCount.  # noqa: E501

        The name of the user who performed the last update on the partCount  # noqa: E501

        :return: The last_update_user of this PartCount.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this PartCount.

        The name of the user who performed the last update on the partCount  # noqa: E501

        :param last_update_user: The last_update_user of this PartCount.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
