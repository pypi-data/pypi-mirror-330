# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CarParametersContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_id': 'str',
        'version_id': 'str',
        'assembly_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'target_id': 'TargetId',
        'version_id': 'VersionId',
        'assembly_id': 'AssemblyId',
        'name': 'Name'
    }

    def __init__(self, target_id=None, version_id=None, assembly_id=None, name=None):  # noqa: E501
        """CarParametersContext - a model defined in Swagger"""  # noqa: E501
        self._target_id = None
        self._version_id = None
        self._assembly_id = None
        self._name = None
        self.discriminator = None
        if target_id is not None:
            self.target_id = target_id
        if version_id is not None:
            self.version_id = version_id
        if assembly_id is not None:
            self.assembly_id = assembly_id
        if name is not None:
            self.name = name

    @property
    def target_id(self):
        """Gets the target_id of this CarParametersContext.  # noqa: E501

        Target unique Id  # noqa: E501

        :return: The target_id of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this CarParametersContext.

        Target unique Id  # noqa: E501

        :param target_id: The target_id of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def version_id(self):
        """Gets the version_id of this CarParametersContext.  # noqa: E501

        Version unique Id  # noqa: E501

        :return: The version_id of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this CarParametersContext.

        Version unique Id  # noqa: E501

        :param version_id: The version_id of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def assembly_id(self):
        """Gets the assembly_id of this CarParametersContext.  # noqa: E501

        Assembly unique id  # noqa: E501

        :return: The assembly_id of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._assembly_id

    @assembly_id.setter
    def assembly_id(self, assembly_id):
        """Sets the assembly_id of this CarParametersContext.

        Assembly unique id  # noqa: E501

        :param assembly_id: The assembly_id of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._assembly_id = assembly_id

    @property
    def name(self):
        """Gets the name of this CarParametersContext.  # noqa: E501

        Context name (ie the layout name) or GLOBAL_CONTEXT for the global context  # noqa: E501

        :return: The name of this CarParametersContext.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarParametersContext.

        Context name (ie the layout name) or GLOBAL_CONTEXT for the global context  # noqa: E501

        :param name: The name of this CarParametersContext.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarParametersContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarParametersContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
