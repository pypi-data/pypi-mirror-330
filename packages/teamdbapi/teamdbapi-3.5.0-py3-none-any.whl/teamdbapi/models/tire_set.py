# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from teamdbapi.models.string_with_font_style import StringWithFontStyle  # noqa: F401,E501


class TireSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'event_id': 'str',
        'name': 'str',
        'comment': 'str',
        'id_fr': 'str',
        'id_fl': 'str',
        'id_rr': 'str',
        'id_rl': 'str',
        'mounting_direction_fl': 'str',
        'mounting_direction_fr': 'str',
        'mounting_direction_rl': 'str',
        'mounting_direction_rr': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str',
        'tire_set_color': 'str',
        'heating_time_of_use': 'datetime',
        'heating_duration': 'float',
        'heating_temperature': 'str',
        'heating_oven': 'StringWithFontStyle',
        'heating_engineer_comment': 'StringWithFontStyle',
        'heating_time_on_heat': 'datetime',
        'heating_tire_comment': 'StringWithFontStyle',
        'heating_action_after_use': 'str',
        'heating_done': 'bool',
        'id_spare1': 'str',
        'id_spare2': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'event_id': 'EventId',
        'name': 'Name',
        'comment': 'Comment',
        'id_fr': 'IdFR',
        'id_fl': 'IdFL',
        'id_rr': 'IdRR',
        'id_rl': 'IdRL',
        'mounting_direction_fl': 'MountingDirectionFL',
        'mounting_direction_fr': 'MountingDirectionFR',
        'mounting_direction_rl': 'MountingDirectionRL',
        'mounting_direction_rr': 'MountingDirectionRR',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser',
        'tire_set_color': 'TireSetColor',
        'heating_time_of_use': 'HeatingTimeOfUse',
        'heating_duration': 'HeatingDuration',
        'heating_temperature': 'HeatingTemperature',
        'heating_oven': 'HeatingOven',
        'heating_engineer_comment': 'HeatingEngineerComment',
        'heating_time_on_heat': 'HeatingTimeOnHeat',
        'heating_tire_comment': 'HeatingTireComment',
        'heating_action_after_use': 'HeatingActionAfterUse',
        'heating_done': 'HeatingDone',
        'id_spare1': 'IdSpare1',
        'id_spare2': 'IdSpare2'
    }

    def __init__(self, id=None, event_id=None, name=None, comment=None, id_fr=None, id_fl=None, id_rr=None, id_rl=None, mounting_direction_fl=None, mounting_direction_fr=None, mounting_direction_rl=None, mounting_direction_rr=None, last_update_date_utc=None, last_update_user=None, tire_set_color=None, heating_time_of_use=None, heating_duration=None, heating_temperature=None, heating_oven=None, heating_engineer_comment=None, heating_time_on_heat=None, heating_tire_comment=None, heating_action_after_use=None, heating_done=None, id_spare1=None, id_spare2=None):  # noqa: E501
        """TireSet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._event_id = None
        self._name = None
        self._comment = None
        self._id_fr = None
        self._id_fl = None
        self._id_rr = None
        self._id_rl = None
        self._mounting_direction_fl = None
        self._mounting_direction_fr = None
        self._mounting_direction_rl = None
        self._mounting_direction_rr = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self._tire_set_color = None
        self._heating_time_of_use = None
        self._heating_duration = None
        self._heating_temperature = None
        self._heating_oven = None
        self._heating_engineer_comment = None
        self._heating_time_on_heat = None
        self._heating_tire_comment = None
        self._heating_action_after_use = None
        self._heating_done = None
        self._id_spare1 = None
        self._id_spare2 = None
        self.discriminator = None
        self.id = id
        self.event_id = event_id
        self.name = name
        if comment is not None:
            self.comment = comment
        if id_fr is not None:
            self.id_fr = id_fr
        if id_fl is not None:
            self.id_fl = id_fl
        if id_rr is not None:
            self.id_rr = id_rr
        if id_rl is not None:
            self.id_rl = id_rl
        if mounting_direction_fl is not None:
            self.mounting_direction_fl = mounting_direction_fl
        if mounting_direction_fr is not None:
            self.mounting_direction_fr = mounting_direction_fr
        if mounting_direction_rl is not None:
            self.mounting_direction_rl = mounting_direction_rl
        if mounting_direction_rr is not None:
            self.mounting_direction_rr = mounting_direction_rr
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user
        if tire_set_color is not None:
            self.tire_set_color = tire_set_color
        if heating_time_of_use is not None:
            self.heating_time_of_use = heating_time_of_use
        if heating_duration is not None:
            self.heating_duration = heating_duration
        if heating_temperature is not None:
            self.heating_temperature = heating_temperature
        if heating_oven is not None:
            self.heating_oven = heating_oven
        if heating_engineer_comment is not None:
            self.heating_engineer_comment = heating_engineer_comment
        if heating_time_on_heat is not None:
            self.heating_time_on_heat = heating_time_on_heat
        if heating_tire_comment is not None:
            self.heating_tire_comment = heating_tire_comment
        if heating_action_after_use is not None:
            self.heating_action_after_use = heating_action_after_use
        if heating_done is not None:
            self.heating_done = heating_done
        if id_spare1 is not None:
            self.id_spare1 = id_spare1
        if id_spare2 is not None:
            self.id_spare2 = id_spare2

    @property
    def id(self):
        """Gets the id of this TireSet.  # noqa: E501

        Unique identifier of the tire set  # noqa: E501

        :return: The id of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TireSet.

        Unique identifier of the tire set  # noqa: E501

        :param id: The id of this TireSet.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def event_id(self):
        """Gets the event_id of this TireSet.  # noqa: E501

        Unique identifier corresponding to the event to which the tire set belongs  # noqa: E501

        :return: The event_id of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this TireSet.

        Unique identifier corresponding to the event to which the tire set belongs  # noqa: E501

        :param event_id: The event_id of this TireSet.  # noqa: E501
        :type: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def name(self):
        """Gets the name of this TireSet.  # noqa: E501

        Tire set name  # noqa: E501

        :return: The name of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TireSet.

        Tire set name  # noqa: E501

        :param name: The name of this TireSet.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this TireSet.  # noqa: E501

        Tire set comments  # noqa: E501

        :return: The comment of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TireSet.

        Tire set comments  # noqa: E501

        :param comment: The comment of this TireSet.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id_fr(self):
        """Gets the id_fr of this TireSet.  # noqa: E501

        Unique identifier corresponding to the front right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_fr of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_fr

    @id_fr.setter
    def id_fr(self, id_fr):
        """Sets the id_fr of this TireSet.

        Unique identifier corresponding to the front right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_fr: The id_fr of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_fr = id_fr

    @property
    def id_fl(self):
        """Gets the id_fl of this TireSet.  # noqa: E501

        Unique identifier corresponding to the front left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_fl of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_fl

    @id_fl.setter
    def id_fl(self, id_fl):
        """Sets the id_fl of this TireSet.

        Unique identifier corresponding to the front left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_fl: The id_fl of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_fl = id_fl

    @property
    def id_rr(self):
        """Gets the id_rr of this TireSet.  # noqa: E501

        Unique identifier corresponding to the rear right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_rr of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_rr

    @id_rr.setter
    def id_rr(self, id_rr):
        """Sets the id_rr of this TireSet.

        Unique identifier corresponding to the rear right tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_rr: The id_rr of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_rr = id_rr

    @property
    def id_rl(self):
        """Gets the id_rl of this TireSet.  # noqa: E501

        Unique identifier corresponding to the rear left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_rl of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_rl

    @id_rl.setter
    def id_rl(self, id_rl):
        """Sets the id_rl of this TireSet.

        Unique identifier corresponding to the rear left tire. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_rl: The id_rl of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_rl = id_rl

    @property
    def mounting_direction_fl(self):
        """Gets the mounting_direction_fl of this TireSet.  # noqa: E501

        Mounting direction of the front left tire in the rim  # noqa: E501

        :return: The mounting_direction_fl of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._mounting_direction_fl

    @mounting_direction_fl.setter
    def mounting_direction_fl(self, mounting_direction_fl):
        """Sets the mounting_direction_fl of this TireSet.

        Mounting direction of the front left tire in the rim  # noqa: E501

        :param mounting_direction_fl: The mounting_direction_fl of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if mounting_direction_fl not in allowed_values:
            raise ValueError(
                "Invalid value for `mounting_direction_fl` ({0}), must be one of {1}"  # noqa: E501
                .format(mounting_direction_fl, allowed_values)
            )

        self._mounting_direction_fl = mounting_direction_fl

    @property
    def mounting_direction_fr(self):
        """Gets the mounting_direction_fr of this TireSet.  # noqa: E501

        Mounting direction of the front right tire in the rim  # noqa: E501

        :return: The mounting_direction_fr of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._mounting_direction_fr

    @mounting_direction_fr.setter
    def mounting_direction_fr(self, mounting_direction_fr):
        """Sets the mounting_direction_fr of this TireSet.

        Mounting direction of the front right tire in the rim  # noqa: E501

        :param mounting_direction_fr: The mounting_direction_fr of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if mounting_direction_fr not in allowed_values:
            raise ValueError(
                "Invalid value for `mounting_direction_fr` ({0}), must be one of {1}"  # noqa: E501
                .format(mounting_direction_fr, allowed_values)
            )

        self._mounting_direction_fr = mounting_direction_fr

    @property
    def mounting_direction_rl(self):
        """Gets the mounting_direction_rl of this TireSet.  # noqa: E501

        Mounting direction of the rear left tire in the rim  # noqa: E501

        :return: The mounting_direction_rl of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._mounting_direction_rl

    @mounting_direction_rl.setter
    def mounting_direction_rl(self, mounting_direction_rl):
        """Sets the mounting_direction_rl of this TireSet.

        Mounting direction of the rear left tire in the rim  # noqa: E501

        :param mounting_direction_rl: The mounting_direction_rl of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if mounting_direction_rl not in allowed_values:
            raise ValueError(
                "Invalid value for `mounting_direction_rl` ({0}), must be one of {1}"  # noqa: E501
                .format(mounting_direction_rl, allowed_values)
            )

        self._mounting_direction_rl = mounting_direction_rl

    @property
    def mounting_direction_rr(self):
        """Gets the mounting_direction_rr of this TireSet.  # noqa: E501

        Mounting direction of the rear right tire in the rim  # noqa: E501

        :return: The mounting_direction_rr of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._mounting_direction_rr

    @mounting_direction_rr.setter
    def mounting_direction_rr(self, mounting_direction_rr):
        """Sets the mounting_direction_rr of this TireSet.

        Mounting direction of the rear right tire in the rim  # noqa: E501

        :param mounting_direction_rr: The mounting_direction_rr of this TireSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Forward", "Reverse"]  # noqa: E501
        if mounting_direction_rr not in allowed_values:
            raise ValueError(
                "Invalid value for `mounting_direction_rr` ({0}), must be one of {1}"  # noqa: E501
                .format(mounting_direction_rr, allowed_values)
            )

        self._mounting_direction_rr = mounting_direction_rr

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this TireSet.  # noqa: E501

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :return: The last_update_date_utc of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this TireSet.

        Last updated utc date time. This field is automatically filled by the system.  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this TireSet.  # noqa: E501

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :return: The last_update_user of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this TireSet.

        Name of the last user who updated the data. This field is automatically filled by the system.  # noqa: E501

        :param last_update_user: The last_update_user of this TireSet.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    @property
    def tire_set_color(self):
        """Gets the tire_set_color of this TireSet.  # noqa: E501

        The tireset color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :return: The tire_set_color of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._tire_set_color

    @tire_set_color.setter
    def tire_set_color(self, tire_set_color):
        """Sets the tire_set_color of this TireSet.

        The tireset color. You must enter a ARGB hex value : #FF12EE33  # noqa: E501

        :param tire_set_color: The tire_set_color of this TireSet.  # noqa: E501
        :type: str
        """

        self._tire_set_color = tire_set_color

    @property
    def heating_time_of_use(self):
        """Gets the heating_time_of_use of this TireSet.  # noqa: E501

        Time of the day when the tires are used. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :return: The heating_time_of_use of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._heating_time_of_use

    @heating_time_of_use.setter
    def heating_time_of_use(self, heating_time_of_use):
        """Sets the heating_time_of_use of this TireSet.

        Time of the day when the tires are used. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :param heating_time_of_use: The heating_time_of_use of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._heating_time_of_use = heating_time_of_use

    @property
    def heating_duration(self):
        """Gets the heating_duration of this TireSet.  # noqa: E501

        Heating duration in seconds  # noqa: E501

        :return: The heating_duration of this TireSet.  # noqa: E501
        :rtype: float
        """
        return self._heating_duration

    @heating_duration.setter
    def heating_duration(self, heating_duration):
        """Sets the heating_duration of this TireSet.

        Heating duration in seconds  # noqa: E501

        :param heating_duration: The heating_duration of this TireSet.  # noqa: E501
        :type: float
        """

        self._heating_duration = heating_duration

    @property
    def heating_temperature(self):
        """Gets the heating_temperature of this TireSet.  # noqa: E501

        Heating temperature to use  # noqa: E501

        :return: The heating_temperature of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._heating_temperature

    @heating_temperature.setter
    def heating_temperature(self, heating_temperature):
        """Sets the heating_temperature of this TireSet.

        Heating temperature to use  # noqa: E501

        :param heating_temperature: The heating_temperature of this TireSet.  # noqa: E501
        :type: str
        """

        self._heating_temperature = heating_temperature

    @property
    def heating_oven(self):
        """Gets the heating_oven of this TireSet.  # noqa: E501


        :return: The heating_oven of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._heating_oven

    @heating_oven.setter
    def heating_oven(self, heating_oven):
        """Sets the heating_oven of this TireSet.


        :param heating_oven: The heating_oven of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._heating_oven = heating_oven

    @property
    def heating_engineer_comment(self):
        """Gets the heating_engineer_comment of this TireSet.  # noqa: E501


        :return: The heating_engineer_comment of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._heating_engineer_comment

    @heating_engineer_comment.setter
    def heating_engineer_comment(self, heating_engineer_comment):
        """Sets the heating_engineer_comment of this TireSet.


        :param heating_engineer_comment: The heating_engineer_comment of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._heating_engineer_comment = heating_engineer_comment

    @property
    def heating_time_on_heat(self):
        """Gets the heating_time_on_heat of this TireSet.  # noqa: E501

        Starting time of the tires heating. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :return: The heating_time_on_heat of this TireSet.  # noqa: E501
        :rtype: datetime
        """
        return self._heating_time_on_heat

    @heating_time_on_heat.setter
    def heating_time_on_heat(self, heating_time_on_heat):
        """Sets the heating_time_on_heat of this TireSet.

        Starting time of the tires heating. The date part will automatically replaced with the date of the day.  Here is an example : 2019-01-07T12:30:00.000Z  # noqa: E501

        :param heating_time_on_heat: The heating_time_on_heat of this TireSet.  # noqa: E501
        :type: datetime
        """

        self._heating_time_on_heat = heating_time_on_heat

    @property
    def heating_tire_comment(self):
        """Gets the heating_tire_comment of this TireSet.  # noqa: E501


        :return: The heating_tire_comment of this TireSet.  # noqa: E501
        :rtype: StringWithFontStyle
        """
        return self._heating_tire_comment

    @heating_tire_comment.setter
    def heating_tire_comment(self, heating_tire_comment):
        """Sets the heating_tire_comment of this TireSet.


        :param heating_tire_comment: The heating_tire_comment of this TireSet.  # noqa: E501
        :type: StringWithFontStyle
        """

        self._heating_tire_comment = heating_tire_comment

    @property
    def heating_action_after_use(self):
        """Gets the heating_action_after_use of this TireSet.  # noqa: E501

        Discribe the action to do after the use of the tire  # noqa: E501

        :return: The heating_action_after_use of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._heating_action_after_use

    @heating_action_after_use.setter
    def heating_action_after_use(self, heating_action_after_use):
        """Sets the heating_action_after_use of this TireSet.

        Discribe the action to do after the use of the tire  # noqa: E501

        :param heating_action_after_use: The heating_action_after_use of this TireSet.  # noqa: E501
        :type: str
        """

        self._heating_action_after_use = heating_action_after_use

    @property
    def heating_done(self):
        """Gets the heating_done of this TireSet.  # noqa: E501

        Specify whether the heating is completed or not  # noqa: E501

        :return: The heating_done of this TireSet.  # noqa: E501
        :rtype: bool
        """
        return self._heating_done

    @heating_done.setter
    def heating_done(self, heating_done):
        """Sets the heating_done of this TireSet.

        Specify whether the heating is completed or not  # noqa: E501

        :param heating_done: The heating_done of this TireSet.  # noqa: E501
        :type: bool
        """

        self._heating_done = heating_done

    @property
    def id_spare1(self):
        """Gets the id_spare1 of this TireSet.  # noqa: E501

        Unique identifier corresponding to the spare tire 1. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_spare1 of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_spare1

    @id_spare1.setter
    def id_spare1(self, id_spare1):
        """Sets the id_spare1 of this TireSet.

        Unique identifier corresponding to the spare tire 1. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_spare1: The id_spare1 of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_spare1 = id_spare1

    @property
    def id_spare2(self):
        """Gets the id_spare2 of this TireSet.  # noqa: E501

        Unique identifier corresponding to the spare tire 2. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :return: The id_spare2 of this TireSet.  # noqa: E501
        :rtype: str
        """
        return self._id_spare2

    @id_spare2.setter
    def id_spare2(self, id_spare2):
        """Sets the id_spare2 of this TireSet.

        Unique identifier corresponding to the spare tire 2. The tire must exists in the event linked to the tire set.  Enter the empty identifier (00000000-0000-0000-0000-000000000000) to unset the tire.  # noqa: E501

        :param id_spare2: The id_spare2 of this TireSet.  # noqa: E501
        :type: str
        """

        self._id_spare2 = id_spare2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TireSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TireSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
