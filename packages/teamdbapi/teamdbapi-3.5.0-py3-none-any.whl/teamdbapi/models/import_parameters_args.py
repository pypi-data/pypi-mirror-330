# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ImportParametersArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_id': 'str',
        'file_paths': 'list[str]',
        'revision_name': 'str',
        'revision_maturity': 'int',
        'revision_comment': 'str',
        'use_revision_names_from_assembly': 'bool',
        'revision_names_from_assembly_id': 'str',
        'use_revision_comments_from_assembly': 'bool',
        'create_assembly': 'bool',
        'created_assembly_name': 'str',
        'created_group_revisions_like_specified_version': 'bool',
        'ignore_load_file_warning': 'bool'
    }

    attribute_map = {
        'version_id': 'VersionId',
        'file_paths': 'FilePaths',
        'revision_name': 'RevisionName',
        'revision_maturity': 'RevisionMaturity',
        'revision_comment': 'RevisionComment',
        'use_revision_names_from_assembly': 'UseRevisionNamesFromAssembly',
        'revision_names_from_assembly_id': 'RevisionNamesFromAssemblyId',
        'use_revision_comments_from_assembly': 'UseRevisionCommentsFromAssembly',
        'create_assembly': 'CreateAssembly',
        'created_assembly_name': 'CreatedAssemblyName',
        'created_group_revisions_like_specified_version': 'CreatedGroupRevisionsLikeSpecifiedVersion',
        'ignore_load_file_warning': 'IgnoreLoadFileWarning'
    }

    def __init__(self, version_id=None, file_paths=None, revision_name=None, revision_maturity=None, revision_comment=None, use_revision_names_from_assembly=None, revision_names_from_assembly_id=None, use_revision_comments_from_assembly=None, create_assembly=None, created_assembly_name=None, created_group_revisions_like_specified_version=None, ignore_load_file_warning=None):  # noqa: E501
        """ImportParametersArgs - a model defined in Swagger"""  # noqa: E501
        self._version_id = None
        self._file_paths = None
        self._revision_name = None
        self._revision_maturity = None
        self._revision_comment = None
        self._use_revision_names_from_assembly = None
        self._revision_names_from_assembly_id = None
        self._use_revision_comments_from_assembly = None
        self._create_assembly = None
        self._created_assembly_name = None
        self._created_group_revisions_like_specified_version = None
        self._ignore_load_file_warning = None
        self.discriminator = None
        self.version_id = version_id
        self.file_paths = file_paths
        self.revision_name = revision_name
        if revision_maturity is not None:
            self.revision_maturity = revision_maturity
        if revision_comment is not None:
            self.revision_comment = revision_comment
        self.use_revision_names_from_assembly = use_revision_names_from_assembly
        if revision_names_from_assembly_id is not None:
            self.revision_names_from_assembly_id = revision_names_from_assembly_id
        if use_revision_comments_from_assembly is not None:
            self.use_revision_comments_from_assembly = use_revision_comments_from_assembly
        self.create_assembly = create_assembly
        if created_assembly_name is not None:
            self.created_assembly_name = created_assembly_name
        self.created_group_revisions_like_specified_version = created_group_revisions_like_specified_version
        self.ignore_load_file_warning = ignore_load_file_warning

    @property
    def version_id(self):
        """Gets the version_id of this ImportParametersArgs.  # noqa: E501

        The version unique identifier to which import the data  # noqa: E501

        :return: The version_id of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this ImportParametersArgs.

        The version unique identifier to which import the data  # noqa: E501

        :param version_id: The version_id of this ImportParametersArgs.  # noqa: E501
        :type: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    @property
    def file_paths(self):
        """Gets the file_paths of this ImportParametersArgs.  # noqa: E501

        The paths to the files to import  The paths must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The file_paths of this ImportParametersArgs.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_paths

    @file_paths.setter
    def file_paths(self, file_paths):
        """Sets the file_paths of this ImportParametersArgs.

        The paths to the files to import  The paths must be described only by / or \\\\\\\\.  # noqa: E501

        :param file_paths: The file_paths of this ImportParametersArgs.  # noqa: E501
        :type: list[str]
        """
        if file_paths is None:
            raise ValueError("Invalid value for `file_paths`, must not be `None`")  # noqa: E501

        self._file_paths = file_paths

    @property
    def revision_name(self):
        """Gets the revision_name of this ImportParametersArgs.  # noqa: E501

        The revision name used to create new revisions  # noqa: E501

        :return: The revision_name of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this ImportParametersArgs.

        The revision name used to create new revisions  # noqa: E501

        :param revision_name: The revision_name of this ImportParametersArgs.  # noqa: E501
        :type: str
        """
        if revision_name is None:
            raise ValueError("Invalid value for `revision_name`, must not be `None`")  # noqa: E501

        self._revision_name = revision_name

    @property
    def revision_maturity(self):
        """Gets the revision_maturity of this ImportParametersArgs.  # noqa: E501

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :return: The revision_maturity of this ImportParametersArgs.  # noqa: E501
        :rtype: int
        """
        return self._revision_maturity

    @revision_maturity.setter
    def revision_maturity(self, revision_maturity):
        """Sets the revision_maturity of this ImportParametersArgs.

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :param revision_maturity: The revision_maturity of this ImportParametersArgs.  # noqa: E501
        :type: int
        """

        self._revision_maturity = revision_maturity

    @property
    def revision_comment(self):
        """Gets the revision_comment of this ImportParametersArgs.  # noqa: E501

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :return: The revision_comment of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._revision_comment

    @revision_comment.setter
    def revision_comment(self, revision_comment):
        """Sets the revision_comment of this ImportParametersArgs.

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :param revision_comment: The revision_comment of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._revision_comment = revision_comment

    @property
    def use_revision_names_from_assembly(self):
        """Gets the use_revision_names_from_assembly of this ImportParametersArgs.  # noqa: E501

        Specify if the revision names used to create new revisions are generated from the assembly specified by RevisionNamesFromAssemblyId  # noqa: E501

        :return: The use_revision_names_from_assembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._use_revision_names_from_assembly

    @use_revision_names_from_assembly.setter
    def use_revision_names_from_assembly(self, use_revision_names_from_assembly):
        """Sets the use_revision_names_from_assembly of this ImportParametersArgs.

        Specify if the revision names used to create new revisions are generated from the assembly specified by RevisionNamesFromAssemblyId  # noqa: E501

        :param use_revision_names_from_assembly: The use_revision_names_from_assembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if use_revision_names_from_assembly is None:
            raise ValueError("Invalid value for `use_revision_names_from_assembly`, must not be `None`")  # noqa: E501

        self._use_revision_names_from_assembly = use_revision_names_from_assembly

    @property
    def revision_names_from_assembly_id(self):
        """Gets the revision_names_from_assembly_id of this ImportParametersArgs.  # noqa: E501

        The assembly unique identifier used to generate the revision names when UseRevisionNamesFromAssembly is true  # noqa: E501

        :return: The revision_names_from_assembly_id of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._revision_names_from_assembly_id

    @revision_names_from_assembly_id.setter
    def revision_names_from_assembly_id(self, revision_names_from_assembly_id):
        """Sets the revision_names_from_assembly_id of this ImportParametersArgs.

        The assembly unique identifier used to generate the revision names when UseRevisionNamesFromAssembly is true  # noqa: E501

        :param revision_names_from_assembly_id: The revision_names_from_assembly_id of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._revision_names_from_assembly_id = revision_names_from_assembly_id

    @property
    def use_revision_comments_from_assembly(self):
        """Gets the use_revision_comments_from_assembly of this ImportParametersArgs.  # noqa: E501

        Specify if the revision comments are copied from the assembly defined by RevisionNamesFromAssemblyId  # noqa: E501

        :return: The use_revision_comments_from_assembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._use_revision_comments_from_assembly

    @use_revision_comments_from_assembly.setter
    def use_revision_comments_from_assembly(self, use_revision_comments_from_assembly):
        """Sets the use_revision_comments_from_assembly of this ImportParametersArgs.

        Specify if the revision comments are copied from the assembly defined by RevisionNamesFromAssemblyId  # noqa: E501

        :param use_revision_comments_from_assembly: The use_revision_comments_from_assembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """

        self._use_revision_comments_from_assembly = use_revision_comments_from_assembly

    @property
    def create_assembly(self):
        """Gets the create_assembly of this ImportParametersArgs.  # noqa: E501

        Specify if a new assembly must be created during the import  # noqa: E501

        :return: The create_assembly of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._create_assembly

    @create_assembly.setter
    def create_assembly(self, create_assembly):
        """Sets the create_assembly of this ImportParametersArgs.

        Specify if a new assembly must be created during the import  # noqa: E501

        :param create_assembly: The create_assembly of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if create_assembly is None:
            raise ValueError("Invalid value for `create_assembly`, must not be `None`")  # noqa: E501

        self._create_assembly = create_assembly

    @property
    def created_assembly_name(self):
        """Gets the created_assembly_name of this ImportParametersArgs.  # noqa: E501

        The name used to create the new assembly when CreateAssembly is true  # noqa: E501

        :return: The created_assembly_name of this ImportParametersArgs.  # noqa: E501
        :rtype: str
        """
        return self._created_assembly_name

    @created_assembly_name.setter
    def created_assembly_name(self, created_assembly_name):
        """Sets the created_assembly_name of this ImportParametersArgs.

        The name used to create the new assembly when CreateAssembly is true  # noqa: E501

        :param created_assembly_name: The created_assembly_name of this ImportParametersArgs.  # noqa: E501
        :type: str
        """

        self._created_assembly_name = created_assembly_name

    @property
    def created_group_revisions_like_specified_version(self):
        """Gets the created_group_revisions_like_specified_version of this ImportParametersArgs.  # noqa: E501

        Specify if new group revision must be created automatically like those existing in the version.  # noqa: E501

        :return: The created_group_revisions_like_specified_version of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._created_group_revisions_like_specified_version

    @created_group_revisions_like_specified_version.setter
    def created_group_revisions_like_specified_version(self, created_group_revisions_like_specified_version):
        """Sets the created_group_revisions_like_specified_version of this ImportParametersArgs.

        Specify if new group revision must be created automatically like those existing in the version.  # noqa: E501

        :param created_group_revisions_like_specified_version: The created_group_revisions_like_specified_version of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if created_group_revisions_like_specified_version is None:
            raise ValueError("Invalid value for `created_group_revisions_like_specified_version`, must not be `None`")  # noqa: E501

        self._created_group_revisions_like_specified_version = created_group_revisions_like_specified_version

    @property
    def ignore_load_file_warning(self):
        """Gets the ignore_load_file_warning of this ImportParametersArgs.  # noqa: E501

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :return: The ignore_load_file_warning of this ImportParametersArgs.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_load_file_warning

    @ignore_load_file_warning.setter
    def ignore_load_file_warning(self, ignore_load_file_warning):
        """Sets the ignore_load_file_warning of this ImportParametersArgs.

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :param ignore_load_file_warning: The ignore_load_file_warning of this ImportParametersArgs.  # noqa: E501
        :type: bool
        """
        if ignore_load_file_warning is None:
            raise ValueError("Invalid value for `ignore_load_file_warning`, must not be `None`")  # noqa: E501

        self._ignore_load_file_warning = ignore_load_file_warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportParametersArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportParametersArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
