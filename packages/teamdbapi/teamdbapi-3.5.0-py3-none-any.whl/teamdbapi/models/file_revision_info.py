# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FileRevisionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_path': 'str',
        'revision_name': 'str',
        'revision_maturity': 'int',
        'revision_comment': 'str'
    }

    attribute_map = {
        'file_path': 'FilePath',
        'revision_name': 'RevisionName',
        'revision_maturity': 'RevisionMaturity',
        'revision_comment': 'RevisionComment'
    }

    def __init__(self, file_path=None, revision_name=None, revision_maturity=None, revision_comment=None):  # noqa: E501
        """FileRevisionInfo - a model defined in Swagger"""  # noqa: E501
        self._file_path = None
        self._revision_name = None
        self._revision_maturity = None
        self._revision_comment = None
        self.discriminator = None
        self.file_path = file_path
        self.revision_name = revision_name
        if revision_maturity is not None:
            self.revision_maturity = revision_maturity
        if revision_comment is not None:
            self.revision_comment = revision_comment

    @property
    def file_path(self):
        """Gets the file_path of this FileRevisionInfo.  # noqa: E501

        The path to the file containing the revisions to import  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The file_path of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this FileRevisionInfo.

        The path to the file containing the revisions to import  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param file_path: The file_path of this FileRevisionInfo.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def revision_name(self):
        """Gets the revision_name of this FileRevisionInfo.  # noqa: E501

        The revision name used to create new revisions  # noqa: E501

        :return: The revision_name of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this FileRevisionInfo.

        The revision name used to create new revisions  # noqa: E501

        :param revision_name: The revision_name of this FileRevisionInfo.  # noqa: E501
        :type: str
        """
        if revision_name is None:
            raise ValueError("Invalid value for `revision_name`, must not be `None`")  # noqa: E501

        self._revision_name = revision_name

    @property
    def revision_maturity(self):
        """Gets the revision_maturity of this FileRevisionInfo.  # noqa: E501

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :return: The revision_maturity of this FileRevisionInfo.  # noqa: E501
        :rtype: int
        """
        return self._revision_maturity

    @revision_maturity.setter
    def revision_maturity(self, revision_maturity):
        """Sets the revision_maturity of this FileRevisionInfo.

        The revision maturity used when new revisions are created or null is not needed  # noqa: E501

        :param revision_maturity: The revision_maturity of this FileRevisionInfo.  # noqa: E501
        :type: int
        """

        self._revision_maturity = revision_maturity

    @property
    def revision_comment(self):
        """Gets the revision_comment of this FileRevisionInfo.  # noqa: E501

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :return: The revision_comment of this FileRevisionInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_comment

    @revision_comment.setter
    def revision_comment(self, revision_comment):
        """Sets the revision_comment of this FileRevisionInfo.

        The revision comment used when new revisions are created or null is not needed  # noqa: E501

        :param revision_comment: The revision_comment of this FileRevisionInfo.  # noqa: E501
        :type: str
        """

        self._revision_comment = revision_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileRevisionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileRevisionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
