# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Target(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'file_format': 'str',
        'auto_generate_assembly': 'bool',
        'auto_generate_assembly_version_id': 'str',
        'revision_merge_comment_mandatory': 'bool',
        'allow_override_limits': 'bool',
        'assembly_name_suffix': 'str',
        'show_param_has_new_revision': 'bool',
        'link_map_to_axis': 'bool',
        'reuse_previous_run_assembly': 'bool',
        'auto_generate_assembly_event_type': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'file_format': 'FileFormat',
        'auto_generate_assembly': 'AutoGenerateAssembly',
        'auto_generate_assembly_version_id': 'AutoGenerateAssemblyVersionId',
        'revision_merge_comment_mandatory': 'RevisionMergeCommentMandatory',
        'allow_override_limits': 'AllowOverrideLimits',
        'assembly_name_suffix': 'AssemblyNameSuffix',
        'show_param_has_new_revision': 'ShowParamHasNewRevision',
        'link_map_to_axis': 'LinkMapToAxis',
        'reuse_previous_run_assembly': 'ReusePreviousRunAssembly',
        'auto_generate_assembly_event_type': 'AutoGenerateAssemblyEventType'
    }

    def __init__(self, id=None, name=None, description=None, file_format='M', auto_generate_assembly=None, auto_generate_assembly_version_id=None, revision_merge_comment_mandatory=None, allow_override_limits=None, assembly_name_suffix=None, show_param_has_new_revision=None, link_map_to_axis=None, reuse_previous_run_assembly=None, auto_generate_assembly_event_type=None):  # noqa: E501
        """Target - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._file_format = None
        self._auto_generate_assembly = None
        self._auto_generate_assembly_version_id = None
        self._revision_merge_comment_mandatory = None
        self._allow_override_limits = None
        self._assembly_name_suffix = None
        self._show_param_has_new_revision = None
        self._link_map_to_axis = None
        self._reuse_previous_run_assembly = None
        self._auto_generate_assembly_event_type = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.file_format = file_format
        if auto_generate_assembly is not None:
            self.auto_generate_assembly = auto_generate_assembly
        if auto_generate_assembly_version_id is not None:
            self.auto_generate_assembly_version_id = auto_generate_assembly_version_id
        if revision_merge_comment_mandatory is not None:
            self.revision_merge_comment_mandatory = revision_merge_comment_mandatory
        if allow_override_limits is not None:
            self.allow_override_limits = allow_override_limits
        if assembly_name_suffix is not None:
            self.assembly_name_suffix = assembly_name_suffix
        if show_param_has_new_revision is not None:
            self.show_param_has_new_revision = show_param_has_new_revision
        if link_map_to_axis is not None:
            self.link_map_to_axis = link_map_to_axis
        if reuse_previous_run_assembly is not None:
            self.reuse_previous_run_assembly = reuse_previous_run_assembly
        if auto_generate_assembly_event_type is not None:
            self.auto_generate_assembly_event_type = auto_generate_assembly_event_type

    @property
    def id(self):
        """Gets the id of this Target.  # noqa: E501

        The unique target id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new target.  # noqa: E501

        :return: The id of this Target.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Target.

        The unique target id.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new target.  # noqa: E501

        :param id: The id of this Target.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Target.  # noqa: E501

        The target unique name  # noqa: E501

        :return: The name of this Target.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Target.

        The target unique name  # noqa: E501

        :param name: The name of this Target.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Target.  # noqa: E501

        The target description  # noqa: E501

        :return: The description of this Target.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Target.

        The target description  # noqa: E501

        :param description: The description of this Target.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_format(self):
        """Gets the file_format of this Target.  # noqa: E501

        The file format used to create the target versions.  M = 2, Dcm = 3, Clx = 4  # noqa: E501

        :return: The file_format of this Target.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this Target.

        The file format used to create the target versions.  M = 2, Dcm = 3, Clx = 4  # noqa: E501

        :param file_format: The file_format of this Target.  # noqa: E501
        :type: str
        """
        if file_format is None:
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501
        allowed_values = ["Simu", "M", "Dcm", "Clx", "Canopy"]  # noqa: E501
        if file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `file_format` ({0}), must be one of {1}"  # noqa: E501
                .format(file_format, allowed_values)
            )

        self._file_format = file_format

    @property
    def auto_generate_assembly(self):
        """Gets the auto_generate_assembly of this Target.  # noqa: E501

        True if we want to automatically generate assemblies when new Runs are created  If true, then ReusePreviousRunAssembly is disabled  Must be set to false when creating a new Target  # noqa: E501

        :return: The auto_generate_assembly of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._auto_generate_assembly

    @auto_generate_assembly.setter
    def auto_generate_assembly(self, auto_generate_assembly):
        """Sets the auto_generate_assembly of this Target.

        True if we want to automatically generate assemblies when new Runs are created  If true, then ReusePreviousRunAssembly is disabled  Must be set to false when creating a new Target  # noqa: E501

        :param auto_generate_assembly: The auto_generate_assembly of this Target.  # noqa: E501
        :type: bool
        """

        self._auto_generate_assembly = auto_generate_assembly

    @property
    def auto_generate_assembly_version_id(self):
        """Gets the auto_generate_assembly_version_id of this Target.  # noqa: E501

        The version unqiue Id used as reference to create the assemblies when AutoGenerateAssembly is true.  It is also used to display the current version in the drop down list.  Must be set to Guid.Empty (00000000-0000-0000-0000-000000000000) when creating a new Target.  # noqa: E501

        :return: The auto_generate_assembly_version_id of this Target.  # noqa: E501
        :rtype: str
        """
        return self._auto_generate_assembly_version_id

    @auto_generate_assembly_version_id.setter
    def auto_generate_assembly_version_id(self, auto_generate_assembly_version_id):
        """Sets the auto_generate_assembly_version_id of this Target.

        The version unqiue Id used as reference to create the assemblies when AutoGenerateAssembly is true.  It is also used to display the current version in the drop down list.  Must be set to Guid.Empty (00000000-0000-0000-0000-000000000000) when creating a new Target.  # noqa: E501

        :param auto_generate_assembly_version_id: The auto_generate_assembly_version_id of this Target.  # noqa: E501
        :type: str
        """

        self._auto_generate_assembly_version_id = auto_generate_assembly_version_id

    @property
    def revision_merge_comment_mandatory(self):
        """Gets the revision_merge_comment_mandatory of this Target.  # noqa: E501

        True if you want to set comments mandatory when you merge revisions after a comparison.  # noqa: E501

        :return: The revision_merge_comment_mandatory of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._revision_merge_comment_mandatory

    @revision_merge_comment_mandatory.setter
    def revision_merge_comment_mandatory(self, revision_merge_comment_mandatory):
        """Sets the revision_merge_comment_mandatory of this Target.

        True if you want to set comments mandatory when you merge revisions after a comparison.  # noqa: E501

        :param revision_merge_comment_mandatory: The revision_merge_comment_mandatory of this Target.  # noqa: E501
        :type: bool
        """

        self._revision_merge_comment_mandatory = revision_merge_comment_mandatory

    @property
    def allow_override_limits(self):
        """Gets the allow_override_limits of this Target.  # noqa: E501

        True if you want to allow overriding parameters limits  # noqa: E501

        :return: The allow_override_limits of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._allow_override_limits

    @allow_override_limits.setter
    def allow_override_limits(self, allow_override_limits):
        """Sets the allow_override_limits of this Target.

        True if you want to allow overriding parameters limits  # noqa: E501

        :param allow_override_limits: The allow_override_limits of this Target.  # noqa: E501
        :type: bool
        """

        self._allow_override_limits = allow_override_limits

    @property
    def assembly_name_suffix(self):
        """Gets the assembly_name_suffix of this Target.  # noqa: E501

        The suffix name automatically applyed to the assemblies name created by Teamdb.  Must not contains _. Only contains zero or many letters and end with at least one 0.  # noqa: E501

        :return: The assembly_name_suffix of this Target.  # noqa: E501
        :rtype: str
        """
        return self._assembly_name_suffix

    @assembly_name_suffix.setter
    def assembly_name_suffix(self, assembly_name_suffix):
        """Sets the assembly_name_suffix of this Target.

        The suffix name automatically applyed to the assemblies name created by Teamdb.  Must not contains _. Only contains zero or many letters and end with at least one 0.  # noqa: E501

        :param assembly_name_suffix: The assembly_name_suffix of this Target.  # noqa: E501
        :type: str
        """

        self._assembly_name_suffix = assembly_name_suffix

    @property
    def show_param_has_new_revision(self):
        """Gets the show_param_has_new_revision of this Target.  # noqa: E501

        True to highlight the parameters having new revisions on the parameters grid  # noqa: E501

        :return: The show_param_has_new_revision of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._show_param_has_new_revision

    @show_param_has_new_revision.setter
    def show_param_has_new_revision(self, show_param_has_new_revision):
        """Sets the show_param_has_new_revision of this Target.

        True to highlight the parameters having new revisions on the parameters grid  # noqa: E501

        :param show_param_has_new_revision: The show_param_has_new_revision of this Target.  # noqa: E501
        :type: bool
        """

        self._show_param_has_new_revision = show_param_has_new_revision

    @property
    def link_map_to_axis(self):
        """Gets the link_map_to_axis of this Target.  # noqa: E501

        true to enabled the option that allows you to select the axis revisions  you expect to find when you export an assembly  # noqa: E501

        :return: The link_map_to_axis of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._link_map_to_axis

    @link_map_to_axis.setter
    def link_map_to_axis(self, link_map_to_axis):
        """Sets the link_map_to_axis of this Target.

        true to enabled the option that allows you to select the axis revisions  you expect to find when you export an assembly  # noqa: E501

        :param link_map_to_axis: The link_map_to_axis of this Target.  # noqa: E501
        :type: bool
        """

        self._link_map_to_axis = link_map_to_axis

    @property
    def reuse_previous_run_assembly(self):
        """Gets the reuse_previous_run_assembly of this Target.  # noqa: E501

        True if we want to automatically reusue the same assemblies associated with the previous run when a new Run is created  If true, then AutoGenerateAssembly is disabled  # noqa: E501

        :return: The reuse_previous_run_assembly of this Target.  # noqa: E501
        :rtype: bool
        """
        return self._reuse_previous_run_assembly

    @reuse_previous_run_assembly.setter
    def reuse_previous_run_assembly(self, reuse_previous_run_assembly):
        """Sets the reuse_previous_run_assembly of this Target.

        True if we want to automatically reusue the same assemblies associated with the previous run when a new Run is created  If true, then AutoGenerateAssembly is disabled  # noqa: E501

        :param reuse_previous_run_assembly: The reuse_previous_run_assembly of this Target.  # noqa: E501
        :type: bool
        """

        self._reuse_previous_run_assembly = reuse_previous_run_assembly

    @property
    def auto_generate_assembly_event_type(self):
        """Gets the auto_generate_assembly_event_type of this Target.  # noqa: E501

        List of event types separated with ; for which auto generate assembly is allowed.  If empty, all the event types are allowed.  Example: Race;Test  # noqa: E501

        :return: The auto_generate_assembly_event_type of this Target.  # noqa: E501
        :rtype: str
        """
        return self._auto_generate_assembly_event_type

    @auto_generate_assembly_event_type.setter
    def auto_generate_assembly_event_type(self, auto_generate_assembly_event_type):
        """Sets the auto_generate_assembly_event_type of this Target.

        List of event types separated with ; for which auto generate assembly is allowed.  If empty, all the event types are allowed.  Example: Race;Test  # noqa: E501

        :param auto_generate_assembly_event_type: The auto_generate_assembly_event_type of this Target.  # noqa: E501
        :type: str
        """

        self._auto_generate_assembly_event_type = auto_generate_assembly_event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Target, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Target):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
