# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from teamdbapi.models.issue_custom_field_value import IssueCustomFieldValue  # noqa: F401,E501
from teamdbapi.models.issue_priority import IssuePriority  # noqa: F401,E501
from teamdbapi.models.issue_project import IssueProject  # noqa: F401,E501
from teamdbapi.models.issue_sector import IssueSector  # noqa: F401,E501
from teamdbapi.models.issue_status import IssueStatus  # noqa: F401,E501
from teamdbapi.models.issue_type import IssueType  # noqa: F401,E501


class Issue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_id': 'str',
        'human_id': 'str',
        'priority': 'IssuePriority',
        'summary': 'str',
        'rich_description': 'str',
        'creator_name': 'str',
        'updator_name': 'str',
        'type': 'IssueType',
        'creation_date': 'datetime',
        'updated_date': 'datetime',
        'event_id': 'str',
        'car_id': 'str',
        'session_id': 'str',
        'run_id': 'str',
        'lap_id': 'str',
        'project': 'IssueProject',
        'status': 'IssueStatus',
        'owner_name': 'str',
        'sector': 'IssueSector',
        'occurrence': 'int',
        'custom_fields': 'list[IssueCustomFieldValue]'
    }

    attribute_map = {
        'issue_id': 'IssueId',
        'human_id': 'HumanId',
        'priority': 'Priority',
        'summary': 'Summary',
        'rich_description': 'RichDescription',
        'creator_name': 'CreatorName',
        'updator_name': 'UpdatorName',
        'type': 'Type',
        'creation_date': 'CreationDate',
        'updated_date': 'UpdatedDate',
        'event_id': 'EventId',
        'car_id': 'CarId',
        'session_id': 'SessionId',
        'run_id': 'RunId',
        'lap_id': 'LapId',
        'project': 'Project',
        'status': 'Status',
        'owner_name': 'OwnerName',
        'sector': 'Sector',
        'occurrence': 'Occurrence',
        'custom_fields': 'CustomFields'
    }

    def __init__(self, issue_id=None, human_id=None, priority=None, summary=None, rich_description=None, creator_name=None, updator_name=None, type=None, creation_date=None, updated_date=None, event_id=None, car_id=None, session_id=None, run_id=None, lap_id=None, project=None, status=None, owner_name=None, sector=None, occurrence=None, custom_fields=None):  # noqa: E501
        """Issue - a model defined in Swagger"""  # noqa: E501
        self._issue_id = None
        self._human_id = None
        self._priority = None
        self._summary = None
        self._rich_description = None
        self._creator_name = None
        self._updator_name = None
        self._type = None
        self._creation_date = None
        self._updated_date = None
        self._event_id = None
        self._car_id = None
        self._session_id = None
        self._run_id = None
        self._lap_id = None
        self._project = None
        self._status = None
        self._owner_name = None
        self._sector = None
        self._occurrence = None
        self._custom_fields = None
        self.discriminator = None
        self.issue_id = issue_id
        if human_id is not None:
            self.human_id = human_id
        self.priority = priority
        if summary is not None:
            self.summary = summary
        if rich_description is not None:
            self.rich_description = rich_description
        if creator_name is not None:
            self.creator_name = creator_name
        if updator_name is not None:
            self.updator_name = updator_name
        self.type = type
        if creation_date is not None:
            self.creation_date = creation_date
        if updated_date is not None:
            self.updated_date = updated_date
        if event_id is not None:
            self.event_id = event_id
        if car_id is not None:
            self.car_id = car_id
        if session_id is not None:
            self.session_id = session_id
        if run_id is not None:
            self.run_id = run_id
        if lap_id is not None:
            self.lap_id = lap_id
        self.project = project
        self.status = status
        if owner_name is not None:
            self.owner_name = owner_name
        if sector is not None:
            self.sector = sector
        if occurrence is not None:
            self.occurrence = occurrence
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def issue_id(self):
        """Gets the issue_id of this Issue.  # noqa: E501

        Unique identifier of the Issue  Set the IssueId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Issue.  # noqa: E501

        :return: The issue_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this Issue.

        Unique identifier of the Issue  Set the IssueId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new Issue.  # noqa: E501

        :param issue_id: The issue_id of this Issue.  # noqa: E501
        :type: str
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")  # noqa: E501

        self._issue_id = issue_id

    @property
    def human_id(self):
        """Gets the human_id of this Issue.  # noqa: E501

        Human-readable identifier  # noqa: E501

        :return: The human_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._human_id

    @human_id.setter
    def human_id(self, human_id):
        """Sets the human_id of this Issue.

        Human-readable identifier  # noqa: E501

        :param human_id: The human_id of this Issue.  # noqa: E501
        :type: str
        """

        self._human_id = human_id

    @property
    def priority(self):
        """Gets the priority of this Issue.  # noqa: E501


        :return: The priority of this Issue.  # noqa: E501
        :rtype: IssuePriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Issue.


        :param priority: The priority of this Issue.  # noqa: E501
        :type: IssuePriority
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def summary(self):
        """Gets the summary of this Issue.  # noqa: E501

        Summary of the Issue  # noqa: E501

        :return: The summary of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Issue.

        Summary of the Issue  # noqa: E501

        :param summary: The summary of this Issue.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def rich_description(self):
        """Gets the rich_description of this Issue.  # noqa: E501

        Description of the Issue  # noqa: E501

        :return: The rich_description of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._rich_description

    @rich_description.setter
    def rich_description(self, rich_description):
        """Sets the rich_description of this Issue.

        Description of the Issue  # noqa: E501

        :param rich_description: The rich_description of this Issue.  # noqa: E501
        :type: str
        """

        self._rich_description = rich_description

    @property
    def creator_name(self):
        """Gets the creator_name of this Issue.  # noqa: E501

        Issue creator  # noqa: E501

        :return: The creator_name of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this Issue.

        Issue creator  # noqa: E501

        :param creator_name: The creator_name of this Issue.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def updator_name(self):
        """Gets the updator_name of this Issue.  # noqa: E501

        Name of last user to modify Issue  # noqa: E501

        :return: The updator_name of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._updator_name

    @updator_name.setter
    def updator_name(self, updator_name):
        """Sets the updator_name of this Issue.

        Name of last user to modify Issue  # noqa: E501

        :param updator_name: The updator_name of this Issue.  # noqa: E501
        :type: str
        """

        self._updator_name = updator_name

    @property
    def type(self):
        """Gets the type of this Issue.  # noqa: E501


        :return: The type of this Issue.  # noqa: E501
        :rtype: IssueType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Issue.


        :param type: The type of this Issue.  # noqa: E501
        :type: IssueType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def creation_date(self):
        """Gets the creation_date of this Issue.  # noqa: E501

        Issue creation date  # noqa: E501

        :return: The creation_date of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Issue.

        Issue creation date  # noqa: E501

        :param creation_date: The creation_date of this Issue.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def updated_date(self):
        """Gets the updated_date of this Issue.  # noqa: E501

        Date of last Issue update  # noqa: E501

        :return: The updated_date of this Issue.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Issue.

        Date of last Issue update  # noqa: E501

        :param updated_date: The updated_date of this Issue.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def event_id(self):
        """Gets the event_id of this Issue.  # noqa: E501

        Potential Event identifier  # noqa: E501

        :return: The event_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Issue.

        Potential Event identifier  # noqa: E501

        :param event_id: The event_id of this Issue.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def car_id(self):
        """Gets the car_id of this Issue.  # noqa: E501

        Potential Car identifier  # noqa: E501

        :return: The car_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._car_id

    @car_id.setter
    def car_id(self, car_id):
        """Sets the car_id of this Issue.

        Potential Car identifier  # noqa: E501

        :param car_id: The car_id of this Issue.  # noqa: E501
        :type: str
        """

        self._car_id = car_id

    @property
    def session_id(self):
        """Gets the session_id of this Issue.  # noqa: E501

        Potential Session identifier  # noqa: E501

        :return: The session_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Issue.

        Potential Session identifier  # noqa: E501

        :param session_id: The session_id of this Issue.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def run_id(self):
        """Gets the run_id of this Issue.  # noqa: E501

        Potential Run identifier  # noqa: E501

        :return: The run_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this Issue.

        Potential Run identifier  # noqa: E501

        :param run_id: The run_id of this Issue.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def lap_id(self):
        """Gets the lap_id of this Issue.  # noqa: E501

        Potential Lap identifier  # noqa: E501

        :return: The lap_id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._lap_id

    @lap_id.setter
    def lap_id(self, lap_id):
        """Sets the lap_id of this Issue.

        Potential Lap identifier  # noqa: E501

        :param lap_id: The lap_id of this Issue.  # noqa: E501
        :type: str
        """

        self._lap_id = lap_id

    @property
    def project(self):
        """Gets the project of this Issue.  # noqa: E501


        :return: The project of this Issue.  # noqa: E501
        :rtype: IssueProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Issue.


        :param project: The project of this Issue.  # noqa: E501
        :type: IssueProject
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def status(self):
        """Gets the status of this Issue.  # noqa: E501


        :return: The status of this Issue.  # noqa: E501
        :rtype: IssueStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Issue.


        :param status: The status of this Issue.  # noqa: E501
        :type: IssueStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def owner_name(self):
        """Gets the owner_name of this Issue.  # noqa: E501

        Issue owner identifer  # noqa: E501

        :return: The owner_name of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Issue.

        Issue owner identifer  # noqa: E501

        :param owner_name: The owner_name of this Issue.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def sector(self):
        """Gets the sector of this Issue.  # noqa: E501


        :return: The sector of this Issue.  # noqa: E501
        :rtype: IssueSector
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Issue.


        :param sector: The sector of this Issue.  # noqa: E501
        :type: IssueSector
        """

        self._sector = sector

    @property
    def occurrence(self):
        """Gets the occurrence of this Issue.  # noqa: E501

        Issue occurrence  # noqa: E501

        :return: The occurrence of this Issue.  # noqa: E501
        :rtype: int
        """
        return self._occurrence

    @occurrence.setter
    def occurrence(self, occurrence):
        """Sets the occurrence of this Issue.

        Issue occurrence  # noqa: E501

        :param occurrence: The occurrence of this Issue.  # noqa: E501
        :type: int
        """

        self._occurrence = occurrence

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Issue.  # noqa: E501

        List of custom fields for the issue  # noqa: E501

        :return: The custom_fields of this Issue.  # noqa: E501
        :rtype: list[IssueCustomFieldValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Issue.

        List of custom fields for the issue  # noqa: E501

        :param custom_fields: The custom_fields of this Issue.  # noqa: E501
        :type: list[IssueCustomFieldValue]
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Issue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Issue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
