# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddPartCarParameterArg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'str',
        'parameter_id': 'str',
        'target_id': 'str',
        'parameter_binding': 'str',
        'redirect_part_id': 'str',
        'redirect_parameter_id': 'str',
        'redirect_target_id': 'str',
        'redirect_coeff_a': 'float',
        'redirect_coeff_b': 'float',
        'redirect_coeff_c': 'float',
        'redirect_coeff_d': 'float'
    }

    attribute_map = {
        'part_id': 'PartId',
        'parameter_id': 'ParameterId',
        'target_id': 'TargetId',
        'parameter_binding': 'ParameterBinding',
        'redirect_part_id': 'RedirectPartId',
        'redirect_parameter_id': 'RedirectParameterId',
        'redirect_target_id': 'RedirectTargetId',
        'redirect_coeff_a': 'RedirectCoeffA',
        'redirect_coeff_b': 'RedirectCoeffB',
        'redirect_coeff_c': 'RedirectCoeffC',
        'redirect_coeff_d': 'RedirectCoeffD'
    }

    def __init__(self, part_id=None, parameter_id=None, target_id=None, parameter_binding=None, redirect_part_id=None, redirect_parameter_id=None, redirect_target_id=None, redirect_coeff_a=None, redirect_coeff_b=None, redirect_coeff_c=None, redirect_coeff_d=None):  # noqa: E501
        """AddPartCarParameterArg - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._parameter_id = None
        self._target_id = None
        self._parameter_binding = None
        self._redirect_part_id = None
        self._redirect_parameter_id = None
        self._redirect_target_id = None
        self._redirect_coeff_a = None
        self._redirect_coeff_b = None
        self._redirect_coeff_c = None
        self._redirect_coeff_d = None
        self.discriminator = None
        self.part_id = part_id
        self.parameter_id = parameter_id
        self.target_id = target_id
        if parameter_binding is not None:
            self.parameter_binding = parameter_binding
        if redirect_part_id is not None:
            self.redirect_part_id = redirect_part_id
        if redirect_parameter_id is not None:
            self.redirect_parameter_id = redirect_parameter_id
        if redirect_target_id is not None:
            self.redirect_target_id = redirect_target_id
        if redirect_coeff_a is not None:
            self.redirect_coeff_a = redirect_coeff_a
        if redirect_coeff_b is not None:
            self.redirect_coeff_b = redirect_coeff_b
        if redirect_coeff_c is not None:
            self.redirect_coeff_c = redirect_coeff_c
        if redirect_coeff_d is not None:
            self.redirect_coeff_d = redirect_coeff_d

    @property
    def part_id(self):
        """Gets the part_id of this AddPartCarParameterArg.  # noqa: E501

        The part unique identifier  # noqa: E501

        :return: The part_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this AddPartCarParameterArg.

        The part unique identifier  # noqa: E501

        :param part_id: The part_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this AddPartCarParameterArg.  # noqa: E501

        The car parameters unique identifier  # noqa: E501

        :return: The parameter_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this AddPartCarParameterArg.

        The car parameters unique identifier  # noqa: E501

        :param parameter_id: The parameter_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")  # noqa: E501

        self._parameter_id = parameter_id

    @property
    def target_id(self):
        """Gets the target_id of this AddPartCarParameterArg.  # noqa: E501

        The car parameters target unique identifier  # noqa: E501

        :return: The target_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this AddPartCarParameterArg.

        The car parameters target unique identifier  # noqa: E501

        :param target_id: The target_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501

        self._target_id = target_id

    @property
    def parameter_binding(self):
        """Gets the parameter_binding of this AddPartCarParameterArg.  # noqa: E501

        The parameter binfing used to identify the component to import from a mounting  to a car parameter assembly  # noqa: E501

        :return: The parameter_binding of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._parameter_binding

    @parameter_binding.setter
    def parameter_binding(self, parameter_binding):
        """Sets the parameter_binding of this AddPartCarParameterArg.

        The parameter binfing used to identify the component to import from a mounting  to a car parameter assembly  # noqa: E501

        :param parameter_binding: The parameter_binding of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._parameter_binding = parameter_binding

    @property
    def redirect_part_id(self):
        """Gets the redirect_part_id of this AddPartCarParameterArg.  # noqa: E501

        The redirect part name.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_part_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._redirect_part_id

    @redirect_part_id.setter
    def redirect_part_id(self, redirect_part_id):
        """Sets the redirect_part_id of this AddPartCarParameterArg.

        The redirect part name.  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_part_id: The redirect_part_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._redirect_part_id = redirect_part_id

    @property
    def redirect_parameter_id(self):
        """Gets the redirect_parameter_id of this AddPartCarParameterArg.  # noqa: E501

        The redirected car parameters unique id  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_parameter_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._redirect_parameter_id

    @redirect_parameter_id.setter
    def redirect_parameter_id(self, redirect_parameter_id):
        """Sets the redirect_parameter_id of this AddPartCarParameterArg.

        The redirected car parameters unique id  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_parameter_id: The redirect_parameter_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._redirect_parameter_id = redirect_parameter_id

    @property
    def redirect_target_id(self):
        """Gets the redirect_target_id of this AddPartCarParameterArg.  # noqa: E501

        The redirected car parameters target unique id  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_target_id of this AddPartCarParameterArg.  # noqa: E501
        :rtype: str
        """
        return self._redirect_target_id

    @redirect_target_id.setter
    def redirect_target_id(self, redirect_target_id):
        """Sets the redirect_target_id of this AddPartCarParameterArg.

        The redirected car parameters target unique id  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_target_id: The redirect_target_id of this AddPartCarParameterArg.  # noqa: E501
        :type: str
        """

        self._redirect_target_id = redirect_target_id

    @property
    def redirect_coeff_a(self):
        """Gets the redirect_coeff_a of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_coeff_a of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._redirect_coeff_a

    @redirect_coeff_a.setter
    def redirect_coeff_a(self, redirect_coeff_a):
        """Sets the redirect_coeff_a of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_coeff_a: The redirect_coeff_a of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._redirect_coeff_a = redirect_coeff_a

    @property
    def redirect_coeff_b(self):
        """Gets the redirect_coeff_b of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_coeff_b of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._redirect_coeff_b

    @redirect_coeff_b.setter
    def redirect_coeff_b(self, redirect_coeff_b):
        """Sets the redirect_coeff_b of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_coeff_b: The redirect_coeff_b of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._redirect_coeff_b = redirect_coeff_b

    @property
    def redirect_coeff_c(self):
        """Gets the redirect_coeff_c of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_coeff_c of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._redirect_coeff_c

    @redirect_coeff_c.setter
    def redirect_coeff_c(self, redirect_coeff_c):
        """Sets the redirect_coeff_c of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_coeff_c: The redirect_coeff_c of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._redirect_coeff_c = redirect_coeff_c

    @property
    def redirect_coeff_d(self):
        """Gets the redirect_coeff_d of this AddPartCarParameterArg.  # noqa: E501

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :return: The redirect_coeff_d of this AddPartCarParameterArg.  # noqa: E501
        :rtype: float
        """
        return self._redirect_coeff_d

    @redirect_coeff_d.setter
    def redirect_coeff_d(self, redirect_coeff_d):
        """Sets the redirect_coeff_d of this AddPartCarParameterArg.

        Coeff A applied to convert a car parameters revision when  a redirection is specified.  Optional field. Only valid with a group part.  # noqa: E501

        :param redirect_coeff_d: The redirect_coeff_d of this AddPartCarParameterArg.  # noqa: E501
        :type: float
        """

        self._redirect_coeff_d = redirect_coeff_d

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddPartCarParameterArg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddPartCarParameterArg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
