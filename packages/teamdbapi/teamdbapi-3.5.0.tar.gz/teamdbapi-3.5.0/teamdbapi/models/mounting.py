# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Mounting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revision_id': 'str',
        'mounting_id': 'str',
        'name': 'str',
        'description': 'str',
        'creation_date_utc': 'datetime',
        'creator': 'str',
        'revision_name': 'str',
        'date_exploitation_start_utc': 'datetime',
        'date_exploitation_end_utc': 'datetime',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str',
        'template_id': 'str',
        'tags': 'str',
        'replication_filter': 'str'
    }

    attribute_map = {
        'revision_id': 'RevisionId',
        'mounting_id': 'MountingId',
        'name': 'Name',
        'description': 'Description',
        'creation_date_utc': 'CreationDateUtc',
        'creator': 'Creator',
        'revision_name': 'RevisionName',
        'date_exploitation_start_utc': 'DateExploitationStartUtc',
        'date_exploitation_end_utc': 'DateExploitationEndUtc',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser',
        'template_id': 'TemplateId',
        'tags': 'Tags',
        'replication_filter': 'ReplicationFilter'
    }

    def __init__(self, revision_id=None, mounting_id=None, name=None, description=None, creation_date_utc=None, creator=None, revision_name=None, date_exploitation_start_utc=None, date_exploitation_end_utc=None, last_update_date_utc=None, last_update_user=None, template_id=None, tags=None, replication_filter=None):  # noqa: E501
        """Mounting - a model defined in Swagger"""  # noqa: E501
        self._revision_id = None
        self._mounting_id = None
        self._name = None
        self._description = None
        self._creation_date_utc = None
        self._creator = None
        self._revision_name = None
        self._date_exploitation_start_utc = None
        self._date_exploitation_end_utc = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self._template_id = None
        self._tags = None
        self._replication_filter = None
        self.discriminator = None
        self.revision_id = revision_id
        self.mounting_id = mounting_id
        self.name = name
        if description is not None:
            self.description = description
        if creation_date_utc is not None:
            self.creation_date_utc = creation_date_utc
        if creator is not None:
            self.creator = creator
        self.revision_name = revision_name
        self.date_exploitation_start_utc = date_exploitation_start_utc
        self.date_exploitation_end_utc = date_exploitation_end_utc
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user
        if template_id is not None:
            self.template_id = template_id
        if tags is not None:
            self.tags = tags
        if replication_filter is not None:
            self.replication_filter = replication_filter

    @property
    def revision_id(self):
        """Gets the revision_id of this Mounting.  # noqa: E501

        Mounting revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting revision.  # noqa: E501

        :return: The revision_id of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Mounting.

        Mounting revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting revision.  # noqa: E501

        :param revision_id: The revision_id of this Mounting.  # noqa: E501
        :type: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")  # noqa: E501

        self._revision_id = revision_id

    @property
    def mounting_id(self):
        """Gets the mounting_id of this Mounting.  # noqa: E501

        Mounting unique identifier, common to all revisions of the same mounting  Set the MountingId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting.  # noqa: E501

        :return: The mounting_id of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._mounting_id

    @mounting_id.setter
    def mounting_id(self, mounting_id):
        """Sets the mounting_id of this Mounting.

        Mounting unique identifier, common to all revisions of the same mounting  Set the MountingId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new mounting.  # noqa: E501

        :param mounting_id: The mounting_id of this Mounting.  # noqa: E501
        :type: str
        """
        if mounting_id is None:
            raise ValueError("Invalid value for `mounting_id`, must not be `None`")  # noqa: E501

        self._mounting_id = mounting_id

    @property
    def name(self):
        """Gets the name of this Mounting.  # noqa: E501

        Mounting name  # noqa: E501

        :return: The name of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mounting.

        Mounting name  # noqa: E501

        :param name: The name of this Mounting.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Mounting.  # noqa: E501

        Mounting description  # noqa: E501

        :return: The description of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Mounting.

        Mounting description  # noqa: E501

        :param description: The description of this Mounting.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creation_date_utc(self):
        """Gets the creation_date_utc of this Mounting.  # noqa: E501

        Mounting creation utc date  # noqa: E501

        :return: The creation_date_utc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_utc

    @creation_date_utc.setter
    def creation_date_utc(self, creation_date_utc):
        """Sets the creation_date_utc of this Mounting.

        Mounting creation utc date  # noqa: E501

        :param creation_date_utc: The creation_date_utc of this Mounting.  # noqa: E501
        :type: datetime
        """

        self._creation_date_utc = creation_date_utc

    @property
    def creator(self):
        """Gets the creator of this Mounting.  # noqa: E501

        Mounting creator username  # noqa: E501

        :return: The creator of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Mounting.

        Mounting creator username  # noqa: E501

        :param creator: The creator of this Mounting.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def revision_name(self):
        """Gets the revision_name of this Mounting.  # noqa: E501

        Mounting revision name  # noqa: E501

        :return: The revision_name of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this Mounting.

        Mounting revision name  # noqa: E501

        :param revision_name: The revision_name of this Mounting.  # noqa: E501
        :type: str
        """
        if revision_name is None:
            raise ValueError("Invalid value for `revision_name`, must not be `None`")  # noqa: E501

        self._revision_name = revision_name

    @property
    def date_exploitation_start_utc(self):
        """Gets the date_exploitation_start_utc of this Mounting.  # noqa: E501

        Mounting utc start date  # noqa: E501

        :return: The date_exploitation_start_utc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._date_exploitation_start_utc

    @date_exploitation_start_utc.setter
    def date_exploitation_start_utc(self, date_exploitation_start_utc):
        """Sets the date_exploitation_start_utc of this Mounting.

        Mounting utc start date  # noqa: E501

        :param date_exploitation_start_utc: The date_exploitation_start_utc of this Mounting.  # noqa: E501
        :type: datetime
        """
        if date_exploitation_start_utc is None:
            raise ValueError("Invalid value for `date_exploitation_start_utc`, must not be `None`")  # noqa: E501

        self._date_exploitation_start_utc = date_exploitation_start_utc

    @property
    def date_exploitation_end_utc(self):
        """Gets the date_exploitation_end_utc of this Mounting.  # noqa: E501

        End utc date of mounting operation (or dismantling date)  # noqa: E501

        :return: The date_exploitation_end_utc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._date_exploitation_end_utc

    @date_exploitation_end_utc.setter
    def date_exploitation_end_utc(self, date_exploitation_end_utc):
        """Sets the date_exploitation_end_utc of this Mounting.

        End utc date of mounting operation (or dismantling date)  # noqa: E501

        :param date_exploitation_end_utc: The date_exploitation_end_utc of this Mounting.  # noqa: E501
        :type: datetime
        """
        if date_exploitation_end_utc is None:
            raise ValueError("Invalid value for `date_exploitation_end_utc`, must not be `None`")  # noqa: E501

        self._date_exploitation_end_utc = date_exploitation_end_utc

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this Mounting.  # noqa: E501

        Mounting last update utc date  # noqa: E501

        :return: The last_update_date_utc of this Mounting.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this Mounting.

        Mounting last update utc date  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this Mounting.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this Mounting.  # noqa: E501

        The name of the user who performed the last update on the mounting  # noqa: E501

        :return: The last_update_user of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this Mounting.

        The name of the user who performed the last update on the mounting  # noqa: E501

        :param last_update_user: The last_update_user of this Mounting.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    @property
    def template_id(self):
        """Gets the template_id of this Mounting.  # noqa: E501

        Mounting related template id  # noqa: E501

        :return: The template_id of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Mounting.

        Mounting related template id  # noqa: E501

        :param template_id: The template_id of this Mounting.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def tags(self):
        """Gets the tags of this Mounting.  # noqa: E501

        Mounting tags. Each tag must be separated by a semicolon.  # noqa: E501

        :return: The tags of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Mounting.

        Mounting tags. Each tag must be separated by a semicolon.  # noqa: E501

        :param tags: The tags of this Mounting.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def replication_filter(self):
        """Gets the replication_filter of this Mounting.  # noqa: E501

        Filter level used for replication of large tables  # noqa: E501

        :return: The replication_filter of this Mounting.  # noqa: E501
        :rtype: str
        """
        return self._replication_filter

    @replication_filter.setter
    def replication_filter(self, replication_filter):
        """Sets the replication_filter of this Mounting.

        Filter level used for replication of large tables  # noqa: E501

        :param replication_filter: The replication_filter of this Mounting.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotForReplication", "ForReplication"]  # noqa: E501
        if replication_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(replication_filter, allowed_values)
            )

        self._replication_filter = replication_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mounting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mounting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
