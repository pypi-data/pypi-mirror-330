# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LapReportOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_single_lap_mode': 'bool',
        'lap_report_file_format': 'str',
        'lap_report_file_path': 'str'
    }

    attribute_map = {
        'use_single_lap_mode': 'UseSingleLapMode',
        'lap_report_file_format': 'LapReportFileFormat',
        'lap_report_file_path': 'LapReportFilePath'
    }

    def __init__(self, use_single_lap_mode=None, lap_report_file_format=None, lap_report_file_path=None):  # noqa: E501
        """LapReportOptions - a model defined in Swagger"""  # noqa: E501
        self._use_single_lap_mode = None
        self._lap_report_file_format = None
        self._lap_report_file_path = None
        self.discriminator = None
        self.use_single_lap_mode = use_single_lap_mode
        self.lap_report_file_format = lap_report_file_format
        if lap_report_file_path is not None:
            self.lap_report_file_path = lap_report_file_path

    @property
    def use_single_lap_mode(self):
        """Gets the use_single_lap_mode of this LapReportOptions.  # noqa: E501

        A boolean value that specifies if you want to read only the last lap in the lap report. When the value is false then all the laps will be read  # noqa: E501

        :return: The use_single_lap_mode of this LapReportOptions.  # noqa: E501
        :rtype: bool
        """
        return self._use_single_lap_mode

    @use_single_lap_mode.setter
    def use_single_lap_mode(self, use_single_lap_mode):
        """Sets the use_single_lap_mode of this LapReportOptions.

        A boolean value that specifies if you want to read only the last lap in the lap report. When the value is false then all the laps will be read  # noqa: E501

        :param use_single_lap_mode: The use_single_lap_mode of this LapReportOptions.  # noqa: E501
        :type: bool
        """
        if use_single_lap_mode is None:
            raise ValueError("Invalid value for `use_single_lap_mode`, must not be `None`")  # noqa: E501

        self._use_single_lap_mode = use_single_lap_mode

    @property
    def lap_report_file_format(self):
        """Gets the lap_report_file_format of this LapReportOptions.  # noqa: E501

        The lap report file format : Wintax or Atlas  # noqa: E501

        :return: The lap_report_file_format of this LapReportOptions.  # noqa: E501
        :rtype: str
        """
        return self._lap_report_file_format

    @lap_report_file_format.setter
    def lap_report_file_format(self, lap_report_file_format):
        """Sets the lap_report_file_format of this LapReportOptions.

        The lap report file format : Wintax or Atlas  # noqa: E501

        :param lap_report_file_format: The lap_report_file_format of this LapReportOptions.  # noqa: E501
        :type: str
        """
        if lap_report_file_format is None:
            raise ValueError("Invalid value for `lap_report_file_format`, must not be `None`")  # noqa: E501
        allowed_values = ["Wintax", "Atlas"]  # noqa: E501
        if lap_report_file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `lap_report_file_format` ({0}), must be one of {1}"  # noqa: E501
                .format(lap_report_file_format, allowed_values)
            )

        self._lap_report_file_format = lap_report_file_format

    @property
    def lap_report_file_path(self):
        """Gets the lap_report_file_path of this LapReportOptions.  # noqa: E501

        The file path to the lap report.   You have to provide the file extension for example : C:/path/MyFile.csv.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The lap_report_file_path of this LapReportOptions.  # noqa: E501
        :rtype: str
        """
        return self._lap_report_file_path

    @lap_report_file_path.setter
    def lap_report_file_path(self, lap_report_file_path):
        """Sets the lap_report_file_path of this LapReportOptions.

        The file path to the lap report.   You have to provide the file extension for example : C:/path/MyFile.csv.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param lap_report_file_path: The lap_report_file_path of this LapReportOptions.  # noqa: E501
        :type: str
        """

        self._lap_report_file_path = lap_report_file_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LapReportOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LapReportOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
