# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CompareOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameters_selection_filters': 'list[str]',
        'exclude_parameters_in_selection': 'bool',
        'diff_file_path': 'str',
        'diff_group': 'str'
    }

    attribute_map = {
        'parameters_selection_filters': 'ParametersSelectionFilters',
        'exclude_parameters_in_selection': 'ExcludeParametersInSelection',
        'diff_file_path': 'DiffFilePath',
        'diff_group': 'DiffGroup'
    }

    def __init__(self, parameters_selection_filters=None, exclude_parameters_in_selection=None, diff_file_path=None, diff_group=None):  # noqa: E501
        """CompareOptions - a model defined in Swagger"""  # noqa: E501
        self._parameters_selection_filters = None
        self._exclude_parameters_in_selection = None
        self._diff_file_path = None
        self._diff_group = None
        self.discriminator = None
        if parameters_selection_filters is not None:
            self.parameters_selection_filters = parameters_selection_filters
        if exclude_parameters_in_selection is not None:
            self.exclude_parameters_in_selection = exclude_parameters_in_selection
        if diff_file_path is not None:
            self.diff_file_path = diff_file_path
        if diff_group is not None:
            self.diff_group = diff_group

    @property
    def parameters_selection_filters(self):
        """Gets the parameters_selection_filters of this CompareOptions.  # noqa: E501

        The parameters selection filter  # noqa: E501

        :return: The parameters_selection_filters of this CompareOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters_selection_filters

    @parameters_selection_filters.setter
    def parameters_selection_filters(self, parameters_selection_filters):
        """Sets the parameters_selection_filters of this CompareOptions.

        The parameters selection filter  # noqa: E501

        :param parameters_selection_filters: The parameters_selection_filters of this CompareOptions.  # noqa: E501
        :type: list[str]
        """

        self._parameters_selection_filters = parameters_selection_filters

    @property
    def exclude_parameters_in_selection(self):
        """Gets the exclude_parameters_in_selection of this CompareOptions.  # noqa: E501

        Exclude the parameters in the selection  # noqa: E501

        :return: The exclude_parameters_in_selection of this CompareOptions.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_parameters_in_selection

    @exclude_parameters_in_selection.setter
    def exclude_parameters_in_selection(self, exclude_parameters_in_selection):
        """Sets the exclude_parameters_in_selection of this CompareOptions.

        Exclude the parameters in the selection  # noqa: E501

        :param exclude_parameters_in_selection: The exclude_parameters_in_selection of this CompareOptions.  # noqa: E501
        :type: bool
        """

        self._exclude_parameters_in_selection = exclude_parameters_in_selection

    @property
    def diff_file_path(self):
        """Gets the diff_file_path of this CompareOptions.  # noqa: E501

        The output file path contenaing the differences.   The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The diff_file_path of this CompareOptions.  # noqa: E501
        :rtype: str
        """
        return self._diff_file_path

    @diff_file_path.setter
    def diff_file_path(self, diff_file_path):
        """Sets the diff_file_path of this CompareOptions.

        The output file path contenaing the differences.   The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param diff_file_path: The diff_file_path of this CompareOptions.  # noqa: E501
        :type: str
        """

        self._diff_file_path = diff_file_path

    @property
    def diff_group(self):
        """Gets the diff_group of this CompareOptions.  # noqa: E501

        The diffence group (A or B) to use to generate the diff file when DiffFilePath is filled  # noqa: E501

        :return: The diff_group of this CompareOptions.  # noqa: E501
        :rtype: str
        """
        return self._diff_group

    @diff_group.setter
    def diff_group(self, diff_group):
        """Sets the diff_group of this CompareOptions.

        The diffence group (A or B) to use to generate the diff file when DiffFilePath is filled  # noqa: E501

        :param diff_group: The diff_group of this CompareOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if diff_group not in allowed_values:
            raise ValueError(
                "Invalid value for `diff_group` ({0}), must be one of {1}"  # noqa: E501
                .format(diff_group, allowed_values)
            )

        self._diff_group = diff_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompareOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompareOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
