# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from teamdbapi.models.assembly import Assembly  # noqa: F401,E501


class ImportParametersResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'before_import_warning': 'str',
        'import_report_result': 'str',
        'assembly_created': 'Assembly'
    }

    attribute_map = {
        'before_import_warning': 'BeforeImportWarning',
        'import_report_result': 'ImportReportResult',
        'assembly_created': 'AssemblyCreated'
    }

    def __init__(self, before_import_warning=None, import_report_result=None, assembly_created=None):  # noqa: E501
        """ImportParametersResults - a model defined in Swagger"""  # noqa: E501
        self._before_import_warning = None
        self._import_report_result = None
        self._assembly_created = None
        self.discriminator = None
        if before_import_warning is not None:
            self.before_import_warning = before_import_warning
        if import_report_result is not None:
            self.import_report_result = import_report_result
        if assembly_created is not None:
            self.assembly_created = assembly_created

    @property
    def before_import_warning(self):
        """Gets the before_import_warning of this ImportParametersResults.  # noqa: E501

        Warning before import  # noqa: E501

        :return: The before_import_warning of this ImportParametersResults.  # noqa: E501
        :rtype: str
        """
        return self._before_import_warning

    @before_import_warning.setter
    def before_import_warning(self, before_import_warning):
        """Sets the before_import_warning of this ImportParametersResults.

        Warning before import  # noqa: E501

        :param before_import_warning: The before_import_warning of this ImportParametersResults.  # noqa: E501
        :type: str
        """

        self._before_import_warning = before_import_warning

    @property
    def import_report_result(self):
        """Gets the import_report_result of this ImportParametersResults.  # noqa: E501

        The import report result  # noqa: E501

        :return: The import_report_result of this ImportParametersResults.  # noqa: E501
        :rtype: str
        """
        return self._import_report_result

    @import_report_result.setter
    def import_report_result(self, import_report_result):
        """Sets the import_report_result of this ImportParametersResults.

        The import report result  # noqa: E501

        :param import_report_result: The import_report_result of this ImportParametersResults.  # noqa: E501
        :type: str
        """

        self._import_report_result = import_report_result

    @property
    def assembly_created(self):
        """Gets the assembly_created of this ImportParametersResults.  # noqa: E501


        :return: The assembly_created of this ImportParametersResults.  # noqa: E501
        :rtype: Assembly
        """
        return self._assembly_created

    @assembly_created.setter
    def assembly_created(self, assembly_created):
        """Sets the assembly_created of this ImportParametersResults.


        :param assembly_created: The assembly_created of this ImportParametersResults.  # noqa: E501
        :type: Assembly
        """

        self._assembly_created = assembly_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportParametersResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportParametersResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
