# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Criteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'field_id': 'str',
        'aggregation_type': 'str',
        'unit': 'str',
        'target_value_double': 'float',
        'target_value_int': 'int',
        'target_value_time': 'int',
        'decimal_number': 'int',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'field_id': 'FieldId',
        'aggregation_type': 'AggregationType',
        'unit': 'Unit',
        'target_value_double': 'TargetValueDouble',
        'target_value_int': 'TargetValueInt',
        'target_value_time': 'TargetValueTime',
        'decimal_number': 'DecimalNumber',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser'
    }

    def __init__(self, id=None, name=None, description=None, field_id=None, aggregation_type=None, unit=None, target_value_double=None, target_value_int=None, target_value_time=None, decimal_number=None, last_update_date_utc=None, last_update_user=None):  # noqa: E501
        """Criteria - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._field_id = None
        self._aggregation_type = None
        self._unit = None
        self._target_value_double = None
        self._target_value_int = None
        self._target_value_time = None
        self._decimal_number = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.field_id = field_id
        if aggregation_type is not None:
            self.aggregation_type = aggregation_type
        if unit is not None:
            self.unit = unit
        if target_value_double is not None:
            self.target_value_double = target_value_double
        if target_value_int is not None:
            self.target_value_int = target_value_int
        if target_value_time is not None:
            self.target_value_time = target_value_time
        if decimal_number is not None:
            self.decimal_number = decimal_number
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user

    @property
    def id(self):
        """Gets the id of this Criteria.  # noqa: E501

        Criteria unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new criteria.  # noqa: E501

        :return: The id of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Criteria.

        Criteria unique identifier.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new criteria.  # noqa: E501

        :param id: The id of this Criteria.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Criteria.  # noqa: E501

        Name of the criteria  # noqa: E501

        :return: The name of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Criteria.

        Name of the criteria  # noqa: E501

        :param name: The name of this Criteria.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Criteria.  # noqa: E501

        Description of the criteria  # noqa: E501

        :return: The description of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Criteria.

        Description of the criteria  # noqa: E501

        :param description: The description of this Criteria.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field_id(self):
        """Gets the field_id of this Criteria.  # noqa: E501

        Field associated with the criteria  # noqa: E501

        :return: The field_id of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this Criteria.

        Field associated with the criteria  # noqa: E501

        :param field_id: The field_id of this Criteria.  # noqa: E501
        :type: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this Criteria.  # noqa: E501

        Type of criteria aggregation  # noqa: E501

        :return: The aggregation_type of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this Criteria.

        Type of criteria aggregation  # noqa: E501

        :param aggregation_type: The aggregation_type of this Criteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Sum", "Min", "Max", "First", "Last"]  # noqa: E501
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def unit(self):
        """Gets the unit of this Criteria.  # noqa: E501

        Criteria value unit  # noqa: E501

        :return: The unit of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Criteria.

        Criteria value unit  # noqa: E501

        :param unit: The unit of this Criteria.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def target_value_double(self):
        """Gets the target_value_double of this Criteria.  # noqa: E501

        The target value of the criteria (in double)  # noqa: E501

        :return: The target_value_double of this Criteria.  # noqa: E501
        :rtype: float
        """
        return self._target_value_double

    @target_value_double.setter
    def target_value_double(self, target_value_double):
        """Sets the target_value_double of this Criteria.

        The target value of the criteria (in double)  # noqa: E501

        :param target_value_double: The target_value_double of this Criteria.  # noqa: E501
        :type: float
        """

        self._target_value_double = target_value_double

    @property
    def target_value_int(self):
        """Gets the target_value_int of this Criteria.  # noqa: E501

        The target value of the criteria (in integer)  # noqa: E501

        :return: The target_value_int of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._target_value_int

    @target_value_int.setter
    def target_value_int(self, target_value_int):
        """Sets the target_value_int of this Criteria.

        The target value of the criteria (in integer)  # noqa: E501

        :param target_value_int: The target_value_int of this Criteria.  # noqa: E501
        :type: int
        """

        self._target_value_int = target_value_int

    @property
    def target_value_time(self):
        """Gets the target_value_time of this Criteria.  # noqa: E501

        The target value of the criteria (in time)  # noqa: E501

        :return: The target_value_time of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._target_value_time

    @target_value_time.setter
    def target_value_time(self, target_value_time):
        """Sets the target_value_time of this Criteria.

        The target value of the criteria (in time)  # noqa: E501

        :param target_value_time: The target_value_time of this Criteria.  # noqa: E501
        :type: int
        """

        self._target_value_time = target_value_time

    @property
    def decimal_number(self):
        """Gets the decimal_number of this Criteria.  # noqa: E501

        The number of decimal places for the double value of the criteria  # noqa: E501

        :return: The decimal_number of this Criteria.  # noqa: E501
        :rtype: int
        """
        return self._decimal_number

    @decimal_number.setter
    def decimal_number(self, decimal_number):
        """Sets the decimal_number of this Criteria.

        The number of decimal places for the double value of the criteria  # noqa: E501

        :param decimal_number: The decimal_number of this Criteria.  # noqa: E501
        :type: int
        """

        self._decimal_number = decimal_number

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this Criteria.  # noqa: E501

        Last update utc date of the criteria  # noqa: E501

        :return: The last_update_date_utc of this Criteria.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this Criteria.

        Last update utc date of the criteria  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this Criteria.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this Criteria.  # noqa: E501

        The name of the user who performed the last update on the criteria  # noqa: E501

        :return: The last_update_user of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this Criteria.

        The name of the user who performed the last update on the criteria  # noqa: E501

        :param last_update_user: The last_update_user of this Criteria.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Criteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Criteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
