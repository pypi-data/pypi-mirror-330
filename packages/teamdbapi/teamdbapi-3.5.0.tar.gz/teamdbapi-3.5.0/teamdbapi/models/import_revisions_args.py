# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from teamdbapi.models.file_revision_info import FileRevisionInfo  # noqa: F401,E501


class ImportRevisionsArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_id': 'str',
        'file_revision_infos': 'list[FileRevisionInfo]',
        'ignore_load_file_warning': 'bool'
    }

    attribute_map = {
        'version_id': 'VersionId',
        'file_revision_infos': 'FileRevisionInfos',
        'ignore_load_file_warning': 'IgnoreLoadFileWarning'
    }

    def __init__(self, version_id=None, file_revision_infos=None, ignore_load_file_warning=None):  # noqa: E501
        """ImportRevisionsArgs - a model defined in Swagger"""  # noqa: E501
        self._version_id = None
        self._file_revision_infos = None
        self._ignore_load_file_warning = None
        self.discriminator = None
        self.version_id = version_id
        self.file_revision_infos = file_revision_infos
        self.ignore_load_file_warning = ignore_load_file_warning

    @property
    def version_id(self):
        """Gets the version_id of this ImportRevisionsArgs.  # noqa: E501

        The version unique identifier to which import the data  # noqa: E501

        :return: The version_id of this ImportRevisionsArgs.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this ImportRevisionsArgs.

        The version unique identifier to which import the data  # noqa: E501

        :param version_id: The version_id of this ImportRevisionsArgs.  # noqa: E501
        :type: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    @property
    def file_revision_infos(self):
        """Gets the file_revision_infos of this ImportRevisionsArgs.  # noqa: E501

        The paths to the files to import  # noqa: E501

        :return: The file_revision_infos of this ImportRevisionsArgs.  # noqa: E501
        :rtype: list[FileRevisionInfo]
        """
        return self._file_revision_infos

    @file_revision_infos.setter
    def file_revision_infos(self, file_revision_infos):
        """Sets the file_revision_infos of this ImportRevisionsArgs.

        The paths to the files to import  # noqa: E501

        :param file_revision_infos: The file_revision_infos of this ImportRevisionsArgs.  # noqa: E501
        :type: list[FileRevisionInfo]
        """
        if file_revision_infos is None:
            raise ValueError("Invalid value for `file_revision_infos`, must not be `None`")  # noqa: E501

        self._file_revision_infos = file_revision_infos

    @property
    def ignore_load_file_warning(self):
        """Gets the ignore_load_file_warning of this ImportRevisionsArgs.  # noqa: E501

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :return: The ignore_load_file_warning of this ImportRevisionsArgs.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_load_file_warning

    @ignore_load_file_warning.setter
    def ignore_load_file_warning(self, ignore_load_file_warning):
        """Sets the ignore_load_file_warning of this ImportRevisionsArgs.

        True to ignore the warnings detected before importing the file and continue the import process if they are not blocking.  False to stop the import if a warning is detected.  # noqa: E501

        :param ignore_load_file_warning: The ignore_load_file_warning of this ImportRevisionsArgs.  # noqa: E501
        :type: bool
        """
        if ignore_load_file_warning is None:
            raise ValueError("Invalid value for `ignore_load_file_warning`, must not be `None`")  # noqa: E501

        self._ignore_load_file_warning = ignore_load_file_warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportRevisionsArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportRevisionsArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
