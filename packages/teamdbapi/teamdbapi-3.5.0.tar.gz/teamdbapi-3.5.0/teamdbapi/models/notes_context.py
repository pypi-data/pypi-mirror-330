# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NotesContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'str',
        'car_id': 'str',
        'session_id': 'str',
        'run_id': 'str',
        'lap_id': 'str'
    }

    attribute_map = {
        'event_id': 'EventId',
        'car_id': 'CarId',
        'session_id': 'SessionId',
        'run_id': 'RunId',
        'lap_id': 'LapId'
    }

    def __init__(self, event_id=None, car_id=None, session_id=None, run_id=None, lap_id=None):  # noqa: E501
        """NotesContext - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._car_id = None
        self._session_id = None
        self._run_id = None
        self._lap_id = None
        self.discriminator = None
        if event_id is not None:
            self.event_id = event_id
        if car_id is not None:
            self.car_id = car_id
        if session_id is not None:
            self.session_id = session_id
        if run_id is not None:
            self.run_id = run_id
        if lap_id is not None:
            self.lap_id = lap_id

    @property
    def event_id(self):
        """Gets the event_id of this NotesContext.  # noqa: E501

        Event unique Id  # noqa: E501

        :return: The event_id of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this NotesContext.

        Event unique Id  # noqa: E501

        :param event_id: The event_id of this NotesContext.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def car_id(self):
        """Gets the car_id of this NotesContext.  # noqa: E501

        Car unique Id  # noqa: E501

        :return: The car_id of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._car_id

    @car_id.setter
    def car_id(self, car_id):
        """Sets the car_id of this NotesContext.

        Car unique Id  # noqa: E501

        :param car_id: The car_id of this NotesContext.  # noqa: E501
        :type: str
        """

        self._car_id = car_id

    @property
    def session_id(self):
        """Gets the session_id of this NotesContext.  # noqa: E501

        Session unique id  # noqa: E501

        :return: The session_id of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this NotesContext.

        Session unique id  # noqa: E501

        :param session_id: The session_id of this NotesContext.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def run_id(self):
        """Gets the run_id of this NotesContext.  # noqa: E501

        Run unique id  # noqa: E501

        :return: The run_id of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this NotesContext.

        Run unique id  # noqa: E501

        :param run_id: The run_id of this NotesContext.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def lap_id(self):
        """Gets the lap_id of this NotesContext.  # noqa: E501

        Lap unique id  # noqa: E501

        :return: The lap_id of this NotesContext.  # noqa: E501
        :rtype: str
        """
        return self._lap_id

    @lap_id.setter
    def lap_id(self, lap_id):
        """Sets the lap_id of this NotesContext.

        Lap unique id  # noqa: E501

        :param lap_id: The lap_id of this NotesContext.  # noqa: E501
        :type: str
        """

        self._lap_id = lap_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotesContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotesContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
