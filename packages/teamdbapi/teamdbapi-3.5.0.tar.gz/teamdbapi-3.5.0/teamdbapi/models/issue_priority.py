# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IssuePriority(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'default': 'bool',
        'obsolete': 'bool',
        'priority': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'default': 'Default',
        'obsolete': 'Obsolete',
        'priority': 'Priority'
    }

    def __init__(self, id=None, name=None, default=None, obsolete=None, priority=None):  # noqa: E501
        """IssuePriority - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._default = None
        self._obsolete = None
        self._priority = None
        self.discriminator = None
        self.id = id
        self.name = name
        if default is not None:
            self.default = default
        if obsolete is not None:
            self.obsolete = obsolete
        if priority is not None:
            self.priority = priority

    @property
    def id(self):
        """Gets the id of this IssuePriority.  # noqa: E501

        The Id of the item.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new issue list item  # noqa: E501

        :return: The id of this IssuePriority.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssuePriority.

        The Id of the item.  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new issue list item  # noqa: E501

        :param id: The id of this IssuePriority.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this IssuePriority.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this IssuePriority.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssuePriority.

        The name of the item.  # noqa: E501

        :param name: The name of this IssuePriority.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def default(self):
        """Gets the default of this IssuePriority.  # noqa: E501

        Define whether the item is the default one or not.  # noqa: E501

        :return: The default of this IssuePriority.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this IssuePriority.

        Define whether the item is the default one or not.  # noqa: E501

        :param default: The default of this IssuePriority.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def obsolete(self):
        """Gets the obsolete of this IssuePriority.  # noqa: E501

        Define whether the item is obsolete or not.  # noqa: E501

        :return: The obsolete of this IssuePriority.  # noqa: E501
        :rtype: bool
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this IssuePriority.

        Define whether the item is obsolete or not.  # noqa: E501

        :param obsolete: The obsolete of this IssuePriority.  # noqa: E501
        :type: bool
        """

        self._obsolete = obsolete

    @property
    def priority(self):
        """Gets the priority of this IssuePriority.  # noqa: E501

        The priority weight for significance calculation.  # noqa: E501

        :return: The priority of this IssuePriority.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this IssuePriority.

        The priority weight for significance calculation.  # noqa: E501

        :param priority: The priority of this IssuePriority.  # noqa: E501
        :type: int
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssuePriority, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssuePriority):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
