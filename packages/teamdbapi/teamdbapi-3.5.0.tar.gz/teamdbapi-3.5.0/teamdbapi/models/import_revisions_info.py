# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ImportRevisionsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revision_id': 'str',
        'parameter_id': 'str',
        'parameter_name': 'str',
        'is_new_revision': 'bool'
    }

    attribute_map = {
        'revision_id': 'RevisionId',
        'parameter_id': 'ParameterId',
        'parameter_name': 'ParameterName',
        'is_new_revision': 'IsNewRevision'
    }

    def __init__(self, revision_id=None, parameter_id=None, parameter_name=None, is_new_revision=None):  # noqa: E501
        """ImportRevisionsInfo - a model defined in Swagger"""  # noqa: E501
        self._revision_id = None
        self._parameter_id = None
        self._parameter_name = None
        self._is_new_revision = None
        self.discriminator = None
        if revision_id is not None:
            self.revision_id = revision_id
        if parameter_id is not None:
            self.parameter_id = parameter_id
        if parameter_name is not None:
            self.parameter_name = parameter_name
        if is_new_revision is not None:
            self.is_new_revision = is_new_revision

    @property
    def revision_id(self):
        """Gets the revision_id of this ImportRevisionsInfo.  # noqa: E501

        The revision Id  # noqa: E501

        :return: The revision_id of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ImportRevisionsInfo.

        The revision Id  # noqa: E501

        :param revision_id: The revision_id of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._revision_id = revision_id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this ImportRevisionsInfo.  # noqa: E501

        The revision parameter id  # noqa: E501

        :return: The parameter_id of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this ImportRevisionsInfo.

        The revision parameter id  # noqa: E501

        :param parameter_id: The parameter_id of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._parameter_id = parameter_id

    @property
    def parameter_name(self):
        """Gets the parameter_name of this ImportRevisionsInfo.  # noqa: E501

        The revision parameter name  # noqa: E501

        :return: The parameter_name of this ImportRevisionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this ImportRevisionsInfo.

        The revision parameter name  # noqa: E501

        :param parameter_name: The parameter_name of this ImportRevisionsInfo.  # noqa: E501
        :type: str
        """

        self._parameter_name = parameter_name

    @property
    def is_new_revision(self):
        """Gets the is_new_revision of this ImportRevisionsInfo.  # noqa: E501

        True when the revision has been created during the import.  If false, the revision already existed.  # noqa: E501

        :return: The is_new_revision of this ImportRevisionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_revision

    @is_new_revision.setter
    def is_new_revision(self, is_new_revision):
        """Sets the is_new_revision of this ImportRevisionsInfo.

        True when the revision has been created during the import.  If false, the revision already existed.  # noqa: E501

        :param is_new_revision: The is_new_revision of this ImportRevisionsInfo.  # noqa: E501
        :type: bool
        """

        self._is_new_revision = is_new_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportRevisionsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportRevisionsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
