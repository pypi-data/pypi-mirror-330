# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Component(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revision_id': 'str',
        'component_id': 'str',
        'part_id': 'str',
        'type_component': 'str',
        'name': 'str',
        'batch_number': 'str',
        'expiration_date_utc': 'datetime',
        'initial_distance': 'float',
        'initial_time': 'int',
        'accident_damaged': 'bool',
        'status': 'str',
        'issues_human_id': 'str',
        'distance_run': 'float',
        'time_run': 'int',
        'creation_date_utc': 'datetime',
        'creator': 'str',
        'department': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str',
        'production_date_utc': 'datetime',
        'weight': 'float',
        'revision_date_utc': 'datetime',
        'revision_name': 'str',
        'tags': 'str',
        'annotation': 'str',
        'manufacturer': 'str',
        'manufacturer_number': 'str',
        'user_update_date_utc': 'datetime',
        'user_update_name': 'str',
        'distance_run_factored': 'float',
        'distance_run_pwr': 'float',
        'time_run_pwr': 'int',
        'distance_total': 'float',
        'time_total': 'int',
        'distance_pwr_total': 'float',
        'time_pwr_total': 'int',
        'distance_factored_total': 'float',
        'has_check_rule_alert': 'bool',
        'energy_run': 'float',
        'energy_total': 'float',
        'intended_purpose': 'str',
        'is_special_equipment': 'bool',
        'sub_component_parameter_binding': 'str',
        'manufacturer_serial_number': 'str'
    }

    attribute_map = {
        'revision_id': 'RevisionId',
        'component_id': 'ComponentId',
        'part_id': 'PartId',
        'type_component': 'TypeComponent',
        'name': 'Name',
        'batch_number': 'BatchNumber',
        'expiration_date_utc': 'ExpirationDateUtc',
        'initial_distance': 'InitialDistance',
        'initial_time': 'InitialTime',
        'accident_damaged': 'AccidentDamaged',
        'status': 'Status',
        'issues_human_id': 'IssuesHumanId',
        'distance_run': 'DistanceRun',
        'time_run': 'TimeRun',
        'creation_date_utc': 'CreationDateUtc',
        'creator': 'Creator',
        'department': 'Department',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser',
        'production_date_utc': 'ProductionDateUtc',
        'weight': 'Weight',
        'revision_date_utc': 'RevisionDateUtc',
        'revision_name': 'RevisionName',
        'tags': 'Tags',
        'annotation': 'Annotation',
        'manufacturer': 'Manufacturer',
        'manufacturer_number': 'ManufacturerNumber',
        'user_update_date_utc': 'UserUpdateDateUtc',
        'user_update_name': 'UserUpdateName',
        'distance_run_factored': 'DistanceRunFactored',
        'distance_run_pwr': 'DistanceRunPwr',
        'time_run_pwr': 'TimeRunPwr',
        'distance_total': 'DistanceTotal',
        'time_total': 'TimeTotal',
        'distance_pwr_total': 'DistancePwrTotal',
        'time_pwr_total': 'TimePwrTotal',
        'distance_factored_total': 'DistanceFactoredTotal',
        'has_check_rule_alert': 'HasCheckRuleAlert',
        'energy_run': 'EnergyRun',
        'energy_total': 'EnergyTotal',
        'intended_purpose': 'IntendedPurpose',
        'is_special_equipment': 'IsSpecialEquipment',
        'sub_component_parameter_binding': 'SubComponentParameterBinding',
        'manufacturer_serial_number': 'ManufacturerSerialNumber'
    }

    def __init__(self, revision_id=None, component_id=None, part_id=None, type_component=None, name=None, batch_number=None, expiration_date_utc=None, initial_distance=None, initial_time=None, accident_damaged=None, status=None, issues_human_id=None, distance_run=None, time_run=None, creation_date_utc=None, creator=None, department=None, last_update_date_utc=None, last_update_user=None, production_date_utc=None, weight=None, revision_date_utc=None, revision_name=None, tags=None, annotation=None, manufacturer=None, manufacturer_number=None, user_update_date_utc=None, user_update_name=None, distance_run_factored=None, distance_run_pwr=None, time_run_pwr=None, distance_total=None, time_total=None, distance_pwr_total=None, time_pwr_total=None, distance_factored_total=None, has_check_rule_alert=None, energy_run=None, energy_total=None, intended_purpose=None, is_special_equipment=None, sub_component_parameter_binding=None, manufacturer_serial_number=None):  # noqa: E501
        """Component - a model defined in Swagger"""  # noqa: E501
        self._revision_id = None
        self._component_id = None
        self._part_id = None
        self._type_component = None
        self._name = None
        self._batch_number = None
        self._expiration_date_utc = None
        self._initial_distance = None
        self._initial_time = None
        self._accident_damaged = None
        self._status = None
        self._issues_human_id = None
        self._distance_run = None
        self._time_run = None
        self._creation_date_utc = None
        self._creator = None
        self._department = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self._production_date_utc = None
        self._weight = None
        self._revision_date_utc = None
        self._revision_name = None
        self._tags = None
        self._annotation = None
        self._manufacturer = None
        self._manufacturer_number = None
        self._user_update_date_utc = None
        self._user_update_name = None
        self._distance_run_factored = None
        self._distance_run_pwr = None
        self._time_run_pwr = None
        self._distance_total = None
        self._time_total = None
        self._distance_pwr_total = None
        self._time_pwr_total = None
        self._distance_factored_total = None
        self._has_check_rule_alert = None
        self._energy_run = None
        self._energy_total = None
        self._intended_purpose = None
        self._is_special_equipment = None
        self._sub_component_parameter_binding = None
        self._manufacturer_serial_number = None
        self.discriminator = None
        self.revision_id = revision_id
        self.component_id = component_id
        self.part_id = part_id
        if type_component is not None:
            self.type_component = type_component
        self.name = name
        if batch_number is not None:
            self.batch_number = batch_number
        if expiration_date_utc is not None:
            self.expiration_date_utc = expiration_date_utc
        if initial_distance is not None:
            self.initial_distance = initial_distance
        if initial_time is not None:
            self.initial_time = initial_time
        if accident_damaged is not None:
            self.accident_damaged = accident_damaged
        self.status = status
        if issues_human_id is not None:
            self.issues_human_id = issues_human_id
        if distance_run is not None:
            self.distance_run = distance_run
        if time_run is not None:
            self.time_run = time_run
        if creation_date_utc is not None:
            self.creation_date_utc = creation_date_utc
        if creator is not None:
            self.creator = creator
        self.department = department
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user
        if production_date_utc is not None:
            self.production_date_utc = production_date_utc
        if weight is not None:
            self.weight = weight
        if revision_date_utc is not None:
            self.revision_date_utc = revision_date_utc
        if revision_name is not None:
            self.revision_name = revision_name
        if tags is not None:
            self.tags = tags
        if annotation is not None:
            self.annotation = annotation
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_number is not None:
            self.manufacturer_number = manufacturer_number
        if user_update_date_utc is not None:
            self.user_update_date_utc = user_update_date_utc
        if user_update_name is not None:
            self.user_update_name = user_update_name
        if distance_run_factored is not None:
            self.distance_run_factored = distance_run_factored
        if distance_run_pwr is not None:
            self.distance_run_pwr = distance_run_pwr
        if time_run_pwr is not None:
            self.time_run_pwr = time_run_pwr
        if distance_total is not None:
            self.distance_total = distance_total
        if time_total is not None:
            self.time_total = time_total
        if distance_pwr_total is not None:
            self.distance_pwr_total = distance_pwr_total
        if time_pwr_total is not None:
            self.time_pwr_total = time_pwr_total
        if distance_factored_total is not None:
            self.distance_factored_total = distance_factored_total
        if has_check_rule_alert is not None:
            self.has_check_rule_alert = has_check_rule_alert
        if energy_run is not None:
            self.energy_run = energy_run
        if energy_total is not None:
            self.energy_total = energy_total
        if intended_purpose is not None:
            self.intended_purpose = intended_purpose
        if is_special_equipment is not None:
            self.is_special_equipment = is_special_equipment
        if sub_component_parameter_binding is not None:
            self.sub_component_parameter_binding = sub_component_parameter_binding
        if manufacturer_serial_number is not None:
            self.manufacturer_serial_number = manufacturer_serial_number

    @property
    def revision_id(self):
        """Gets the revision_id of this Component.  # noqa: E501

        Component revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component revision.  # noqa: E501

        :return: The revision_id of this Component.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Component.

        Component revision unique identifier.  Set the RevisionId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component revision.  # noqa: E501

        :param revision_id: The revision_id of this Component.  # noqa: E501
        :type: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")  # noqa: E501

        self._revision_id = revision_id

    @property
    def component_id(self):
        """Gets the component_id of this Component.  # noqa: E501

        Component unique identifier, common to all revisions of the same component  Set the ComponentId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component.  # noqa: E501

        :return: The component_id of this Component.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Component.

        Component unique identifier, common to all revisions of the same component  Set the ComponentId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new component.  # noqa: E501

        :param component_id: The component_id of this Component.  # noqa: E501
        :type: str
        """
        if component_id is None:
            raise ValueError("Invalid value for `component_id`, must not be `None`")  # noqa: E501

        self._component_id = component_id

    @property
    def part_id(self):
        """Gets the part_id of this Component.  # noqa: E501

        Part id associated with the Component  # noqa: E501

        :return: The part_id of this Component.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this Component.

        Part id associated with the Component  # noqa: E501

        :param part_id: The part_id of this Component.  # noqa: E501
        :type: str
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def type_component(self):
        """Gets the type_component of this Component.  # noqa: E501

        Component type  # noqa: E501

        :return: The type_component of this Component.  # noqa: E501
        :rtype: str
        """
        return self._type_component

    @type_component.setter
    def type_component(self, type_component):
        """Sets the type_component of this Component.

        Component type  # noqa: E501

        :param type_component: The type_component of this Component.  # noqa: E501
        :type: str
        """
        allowed_values = ["Single", "Group"]  # noqa: E501
        if type_component not in allowed_values:
            raise ValueError(
                "Invalid value for `type_component` ({0}), must be one of {1}"  # noqa: E501
                .format(type_component, allowed_values)
            )

        self._type_component = type_component

    @property
    def name(self):
        """Gets the name of this Component.  # noqa: E501

        Component name  # noqa: E501

        :return: The name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Component.

        Component name  # noqa: E501

        :param name: The name of this Component.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def batch_number(self):
        """Gets the batch_number of this Component.  # noqa: E501

        Component batch number  # noqa: E501

        :return: The batch_number of this Component.  # noqa: E501
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this Component.

        Component batch number  # noqa: E501

        :param batch_number: The batch_number of this Component.  # noqa: E501
        :type: str
        """

        self._batch_number = batch_number

    @property
    def expiration_date_utc(self):
        """Gets the expiration_date_utc of this Component.  # noqa: E501

        Component expiry utc date  # noqa: E501

        :return: The expiration_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date_utc

    @expiration_date_utc.setter
    def expiration_date_utc(self, expiration_date_utc):
        """Sets the expiration_date_utc of this Component.

        Component expiry utc date  # noqa: E501

        :param expiration_date_utc: The expiration_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._expiration_date_utc = expiration_date_utc

    @property
    def initial_distance(self):
        """Gets the initial_distance of this Component.  # noqa: E501

        Initial component distance  # noqa: E501

        :return: The initial_distance of this Component.  # noqa: E501
        :rtype: float
        """
        return self._initial_distance

    @initial_distance.setter
    def initial_distance(self, initial_distance):
        """Sets the initial_distance of this Component.

        Initial component distance  # noqa: E501

        :param initial_distance: The initial_distance of this Component.  # noqa: E501
        :type: float
        """

        self._initial_distance = initial_distance

    @property
    def initial_time(self):
        """Gets the initial_time of this Component.  # noqa: E501

        Initial component usage time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The initial_time of this Component.  # noqa: E501
        :rtype: int
        """
        return self._initial_time

    @initial_time.setter
    def initial_time(self, initial_time):
        """Sets the initial_time of this Component.

        Initial component usage time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param initial_time: The initial_time of this Component.  # noqa: E501
        :type: int
        """

        self._initial_time = initial_time

    @property
    def accident_damaged(self):
        """Gets the accident_damaged of this Component.  # noqa: E501

        Indicates whether the component has been involved in an accident  # noqa: E501

        :return: The accident_damaged of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._accident_damaged

    @accident_damaged.setter
    def accident_damaged(self, accident_damaged):
        """Sets the accident_damaged of this Component.

        Indicates whether the component has been involved in an accident  # noqa: E501

        :param accident_damaged: The accident_damaged of this Component.  # noqa: E501
        :type: bool
        """

        self._accident_damaged = accident_damaged

    @property
    def status(self):
        """Gets the status of this Component.  # noqa: E501

        Component status name  # noqa: E501

        :return: The status of this Component.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Component.

        Component status name  # noqa: E501

        :param status: The status of this Component.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def issues_human_id(self):
        """Gets the issues_human_id of this Component.  # noqa: E501

        Component associated issues HumanId.  Each HumanId must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :return: The issues_human_id of this Component.  # noqa: E501
        :rtype: str
        """
        return self._issues_human_id

    @issues_human_id.setter
    def issues_human_id(self, issues_human_id):
        """Sets the issues_human_id of this Component.

        Component associated issues HumanId.  Each HumanId must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :param issues_human_id: The issues_human_id of this Component.  # noqa: E501
        :type: str
        """

        self._issues_human_id = issues_human_id

    @property
    def distance_run(self):
        """Gets the distance_run of this Component.  # noqa: E501

        Distance covered by the component  # noqa: E501

        :return: The distance_run of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_run

    @distance_run.setter
    def distance_run(self, distance_run):
        """Sets the distance_run of this Component.

        Distance covered by the component  # noqa: E501

        :param distance_run: The distance_run of this Component.  # noqa: E501
        :type: float
        """

        self._distance_run = distance_run

    @property
    def time_run(self):
        """Gets the time_run of this Component.  # noqa: E501

        Total component useful life (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The time_run of this Component.  # noqa: E501
        :rtype: int
        """
        return self._time_run

    @time_run.setter
    def time_run(self, time_run):
        """Sets the time_run of this Component.

        Total component useful life (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param time_run: The time_run of this Component.  # noqa: E501
        :type: int
        """

        self._time_run = time_run

    @property
    def creation_date_utc(self):
        """Gets the creation_date_utc of this Component.  # noqa: E501

        Component creation utc date  # noqa: E501

        :return: The creation_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_utc

    @creation_date_utc.setter
    def creation_date_utc(self, creation_date_utc):
        """Sets the creation_date_utc of this Component.

        Component creation utc date  # noqa: E501

        :param creation_date_utc: The creation_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._creation_date_utc = creation_date_utc

    @property
    def creator(self):
        """Gets the creator of this Component.  # noqa: E501

        Component creator username  # noqa: E501

        :return: The creator of this Component.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Component.

        Component creator username  # noqa: E501

        :param creator: The creator of this Component.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def department(self):
        """Gets the department of this Component.  # noqa: E501

        Department name to which the component belongs  # noqa: E501

        :return: The department of this Component.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Component.

        Department name to which the component belongs  # noqa: E501

        :param department: The department of this Component.  # noqa: E501
        :type: str
        """
        if department is None:
            raise ValueError("Invalid value for `department`, must not be `None`")  # noqa: E501

        self._department = department

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this Component.  # noqa: E501

        Component last update utc date  # noqa: E501

        :return: The last_update_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this Component.

        Component last update utc date  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this Component.  # noqa: E501

        The name of the user who performed the last update on the component  # noqa: E501

        :return: The last_update_user of this Component.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this Component.

        The name of the user who performed the last update on the component  # noqa: E501

        :param last_update_user: The last_update_user of this Component.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    @property
    def production_date_utc(self):
        """Gets the production_date_utc of this Component.  # noqa: E501

        Component production utc date  # noqa: E501

        :return: The production_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._production_date_utc

    @production_date_utc.setter
    def production_date_utc(self, production_date_utc):
        """Sets the production_date_utc of this Component.

        Component production utc date  # noqa: E501

        :param production_date_utc: The production_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._production_date_utc = production_date_utc

    @property
    def weight(self):
        """Gets the weight of this Component.  # noqa: E501

        Component weight  # noqa: E501

        :return: The weight of this Component.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Component.

        Component weight  # noqa: E501

        :param weight: The weight of this Component.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def revision_date_utc(self):
        """Gets the revision_date_utc of this Component.  # noqa: E501

        Component revision utc date  # noqa: E501

        :return: The revision_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._revision_date_utc

    @revision_date_utc.setter
    def revision_date_utc(self, revision_date_utc):
        """Sets the revision_date_utc of this Component.

        Component revision utc date  # noqa: E501

        :param revision_date_utc: The revision_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._revision_date_utc = revision_date_utc

    @property
    def revision_name(self):
        """Gets the revision_name of this Component.  # noqa: E501

        Component revison name  # noqa: E501

        :return: The revision_name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this Component.

        Component revison name  # noqa: E501

        :param revision_name: The revision_name of this Component.  # noqa: E501
        :type: str
        """

        self._revision_name = revision_name

    @property
    def tags(self):
        """Gets the tags of this Component.  # noqa: E501

        Component tags. Each tag must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :return: The tags of this Component.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Component.

        Component tags. Each tag must be separated by a semicolon.  Valid characters allowed are: literals, numbers, underscore and semicolon  # noqa: E501

        :param tags: The tags of this Component.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def annotation(self):
        """Gets the annotation of this Component.  # noqa: E501

        Comments associated with the component  # noqa: E501

        :return: The annotation of this Component.  # noqa: E501
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this Component.

        Comments associated with the component  # noqa: E501

        :param annotation: The annotation of this Component.  # noqa: E501
        :type: str
        """

        self._annotation = annotation

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Component.  # noqa: E501

        Component manufacturer name (if any)  # noqa: E501

        :return: The manufacturer of this Component.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Component.

        Component manufacturer name (if any)  # noqa: E501

        :param manufacturer: The manufacturer of this Component.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_number(self):
        """Gets the manufacturer_number of this Component.  # noqa: E501

        Component manufacturer number (if any)  # noqa: E501

        :return: The manufacturer_number of this Component.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_number

    @manufacturer_number.setter
    def manufacturer_number(self, manufacturer_number):
        """Sets the manufacturer_number of this Component.

        Component manufacturer number (if any)  # noqa: E501

        :param manufacturer_number: The manufacturer_number of this Component.  # noqa: E501
        :type: str
        """

        self._manufacturer_number = manufacturer_number

    @property
    def user_update_date_utc(self):
        """Gets the user_update_date_utc of this Component.  # noqa: E501

        Date utc of the last \"user update\"  # noqa: E501

        :return: The user_update_date_utc of this Component.  # noqa: E501
        :rtype: datetime
        """
        return self._user_update_date_utc

    @user_update_date_utc.setter
    def user_update_date_utc(self, user_update_date_utc):
        """Sets the user_update_date_utc of this Component.

        Date utc of the last \"user update\"  # noqa: E501

        :param user_update_date_utc: The user_update_date_utc of this Component.  # noqa: E501
        :type: datetime
        """

        self._user_update_date_utc = user_update_date_utc

    @property
    def user_update_name(self):
        """Gets the user_update_name of this Component.  # noqa: E501

        The name of the user who made the last \"user update\"  # noqa: E501

        :return: The user_update_name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._user_update_name

    @user_update_name.setter
    def user_update_name(self, user_update_name):
        """Sets the user_update_name of this Component.

        The name of the user who made the last \"user update\"  # noqa: E501

        :param user_update_name: The user_update_name of this Component.  # noqa: E501
        :type: str
        """

        self._user_update_name = user_update_name

    @property
    def distance_run_factored(self):
        """Gets the distance_run_factored of this Component.  # noqa: E501

        Factored run distance  # noqa: E501

        :return: The distance_run_factored of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_run_factored

    @distance_run_factored.setter
    def distance_run_factored(self, distance_run_factored):
        """Sets the distance_run_factored of this Component.

        Factored run distance  # noqa: E501

        :param distance_run_factored: The distance_run_factored of this Component.  # noqa: E501
        :type: float
        """

        self._distance_run_factored = distance_run_factored

    @property
    def distance_run_pwr(self):
        """Gets the distance_run_pwr of this Component.  # noqa: E501

        Powered run distance  # noqa: E501

        :return: The distance_run_pwr of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_run_pwr

    @distance_run_pwr.setter
    def distance_run_pwr(self, distance_run_pwr):
        """Sets the distance_run_pwr of this Component.

        Powered run distance  # noqa: E501

        :param distance_run_pwr: The distance_run_pwr of this Component.  # noqa: E501
        :type: float
        """

        self._distance_run_pwr = distance_run_pwr

    @property
    def time_run_pwr(self):
        """Gets the time_run_pwr of this Component.  # noqa: E501

        Powered run time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The time_run_pwr of this Component.  # noqa: E501
        :rtype: int
        """
        return self._time_run_pwr

    @time_run_pwr.setter
    def time_run_pwr(self, time_run_pwr):
        """Sets the time_run_pwr of this Component.

        Powered run time (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param time_run_pwr: The time_run_pwr of this Component.  # noqa: E501
        :type: int
        """

        self._time_run_pwr = time_run_pwr

    @property
    def distance_total(self):
        """Gets the distance_total of this Component.  # noqa: E501

        Total distance for all revisions of a component  # noqa: E501

        :return: The distance_total of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_total

    @distance_total.setter
    def distance_total(self, distance_total):
        """Sets the distance_total of this Component.

        Total distance for all revisions of a component  # noqa: E501

        :param distance_total: The distance_total of this Component.  # noqa: E501
        :type: float
        """

        self._distance_total = distance_total

    @property
    def time_total(self):
        """Gets the time_total of this Component.  # noqa: E501

        Total duration of all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The time_total of this Component.  # noqa: E501
        :rtype: int
        """
        return self._time_total

    @time_total.setter
    def time_total(self, time_total):
        """Sets the time_total of this Component.

        Total duration of all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param time_total: The time_total of this Component.  # noqa: E501
        :type: int
        """

        self._time_total = time_total

    @property
    def distance_pwr_total(self):
        """Gets the distance_pwr_total of this Component.  # noqa: E501

        The total powered distance for all revisions of a component  # noqa: E501

        :return: The distance_pwr_total of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_pwr_total

    @distance_pwr_total.setter
    def distance_pwr_total(self, distance_pwr_total):
        """Sets the distance_pwr_total of this Component.

        The total powered distance for all revisions of a component  # noqa: E501

        :param distance_pwr_total: The distance_pwr_total of this Component.  # noqa: E501
        :type: float
        """

        self._distance_pwr_total = distance_pwr_total

    @property
    def time_pwr_total(self):
        """Gets the time_pwr_total of this Component.  # noqa: E501

        Total powered time for all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :return: The time_pwr_total of this Component.  # noqa: E501
        :rtype: int
        """
        return self._time_pwr_total

    @time_pwr_total.setter
    def time_pwr_total(self, time_pwr_total):
        """Sets the time_pwr_total of this Component.

        Total powered time for all revisions of a component (in ticks : 1 ticks = 0.0000001 seconds)  # noqa: E501

        :param time_pwr_total: The time_pwr_total of this Component.  # noqa: E501
        :type: int
        """

        self._time_pwr_total = time_pwr_total

    @property
    def distance_factored_total(self):
        """Gets the distance_factored_total of this Component.  # noqa: E501

        Total factored distance for all revisions of a component  # noqa: E501

        :return: The distance_factored_total of this Component.  # noqa: E501
        :rtype: float
        """
        return self._distance_factored_total

    @distance_factored_total.setter
    def distance_factored_total(self, distance_factored_total):
        """Sets the distance_factored_total of this Component.

        Total factored distance for all revisions of a component  # noqa: E501

        :param distance_factored_total: The distance_factored_total of this Component.  # noqa: E501
        :type: float
        """

        self._distance_factored_total = distance_factored_total

    @property
    def has_check_rule_alert(self):
        """Gets the has_check_rule_alert of this Component.  # noqa: E501

        Indicates whether there are any checkRule overruns on the component revision  # noqa: E501

        :return: The has_check_rule_alert of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._has_check_rule_alert

    @has_check_rule_alert.setter
    def has_check_rule_alert(self, has_check_rule_alert):
        """Sets the has_check_rule_alert of this Component.

        Indicates whether there are any checkRule overruns on the component revision  # noqa: E501

        :param has_check_rule_alert: The has_check_rule_alert of this Component.  # noqa: E501
        :type: bool
        """

        self._has_check_rule_alert = has_check_rule_alert

    @property
    def energy_run(self):
        """Gets the energy_run of this Component.  # noqa: E501

        Component revision energy  # noqa: E501

        :return: The energy_run of this Component.  # noqa: E501
        :rtype: float
        """
        return self._energy_run

    @energy_run.setter
    def energy_run(self, energy_run):
        """Sets the energy_run of this Component.

        Component revision energy  # noqa: E501

        :param energy_run: The energy_run of this Component.  # noqa: E501
        :type: float
        """

        self._energy_run = energy_run

    @property
    def energy_total(self):
        """Gets the energy_total of this Component.  # noqa: E501

        Total energy for all revisions of a component  # noqa: E501

        :return: The energy_total of this Component.  # noqa: E501
        :rtype: float
        """
        return self._energy_total

    @energy_total.setter
    def energy_total(self, energy_total):
        """Sets the energy_total of this Component.

        Total energy for all revisions of a component  # noqa: E501

        :param energy_total: The energy_total of this Component.  # noqa: E501
        :type: float
        """

        self._energy_total = energy_total

    @property
    def intended_purpose(self):
        """Gets the intended_purpose of this Component.  # noqa: E501

        Sensor database Intended Purpose  # noqa: E501

        :return: The intended_purpose of this Component.  # noqa: E501
        :rtype: str
        """
        return self._intended_purpose

    @intended_purpose.setter
    def intended_purpose(self, intended_purpose):
        """Sets the intended_purpose of this Component.

        Sensor database Intended Purpose  # noqa: E501

        :param intended_purpose: The intended_purpose of this Component.  # noqa: E501
        :type: str
        """

        self._intended_purpose = intended_purpose

    @property
    def is_special_equipment(self):
        """Gets the is_special_equipment of this Component.  # noqa: E501

        Sensor database Is Special Equipment  # noqa: E501

        :return: The is_special_equipment of this Component.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_equipment

    @is_special_equipment.setter
    def is_special_equipment(self, is_special_equipment):
        """Sets the is_special_equipment of this Component.

        Sensor database Is Special Equipment  # noqa: E501

        :param is_special_equipment: The is_special_equipment of this Component.  # noqa: E501
        :type: bool
        """

        self._is_special_equipment = is_special_equipment

    @property
    def sub_component_parameter_binding(self):
        """Gets the sub_component_parameter_binding of this Component.  # noqa: E501

        The sensor parameter binding specified on the sub component.  This field is only filled when calling the route:  component/{componentId}/revision/{revisionId}/content  # noqa: E501

        :return: The sub_component_parameter_binding of this Component.  # noqa: E501
        :rtype: str
        """
        return self._sub_component_parameter_binding

    @sub_component_parameter_binding.setter
    def sub_component_parameter_binding(self, sub_component_parameter_binding):
        """Sets the sub_component_parameter_binding of this Component.

        The sensor parameter binding specified on the sub component.  This field is only filled when calling the route:  component/{componentId}/revision/{revisionId}/content  # noqa: E501

        :param sub_component_parameter_binding: The sub_component_parameter_binding of this Component.  # noqa: E501
        :type: str
        """

        self._sub_component_parameter_binding = sub_component_parameter_binding

    @property
    def manufacturer_serial_number(self):
        """Gets the manufacturer_serial_number of this Component.  # noqa: E501

        The manufacturer serial number. Allows you to store your  own manufacturer number.  # noqa: E501

        :return: The manufacturer_serial_number of this Component.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_serial_number

    @manufacturer_serial_number.setter
    def manufacturer_serial_number(self, manufacturer_serial_number):
        """Sets the manufacturer_serial_number of this Component.

        The manufacturer serial number. Allows you to store your  own manufacturer number.  # noqa: E501

        :param manufacturer_serial_number: The manufacturer_serial_number of this Component.  # noqa: E501
        :type: str
        """

        self._manufacturer_serial_number = manufacturer_serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Component, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Component):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
