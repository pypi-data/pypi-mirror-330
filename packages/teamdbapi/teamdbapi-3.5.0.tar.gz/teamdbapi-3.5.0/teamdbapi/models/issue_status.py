# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IssueStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'human_id': 'str',
        'name': 'str',
        'description': 'str',
        'workflow_id': 'str',
        'initial': 'bool',
        'terminal': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'human_id': 'HumanId',
        'name': 'Name',
        'description': 'Description',
        'workflow_id': 'WorkflowId',
        'initial': 'Initial',
        'terminal': 'Terminal'
    }

    def __init__(self, id=None, human_id=None, name=None, description=None, workflow_id=None, initial=None, terminal=None):  # noqa: E501
        """IssueStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._human_id = None
        self._name = None
        self._description = None
        self._workflow_id = None
        self._initial = None
        self._terminal = None
        self.discriminator = None
        self.id = id
        if human_id is not None:
            self.human_id = human_id
        self.name = name
        if description is not None:
            self.description = description
        self.workflow_id = workflow_id
        if initial is not None:
            self.initial = initial
        if terminal is not None:
            self.terminal = terminal

    @property
    def id(self):
        """Gets the id of this IssueStatus.  # noqa: E501

        Unique identifier of the status  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new status  # noqa: E501

        :return: The id of this IssueStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueStatus.

        Unique identifier of the status  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new status  # noqa: E501

        :param id: The id of this IssueStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def human_id(self):
        """Gets the human_id of this IssueStatus.  # noqa: E501

        Human Id of the status  # noqa: E501

        :return: The human_id of this IssueStatus.  # noqa: E501
        :rtype: str
        """
        return self._human_id

    @human_id.setter
    def human_id(self, human_id):
        """Sets the human_id of this IssueStatus.

        Human Id of the status  # noqa: E501

        :param human_id: The human_id of this IssueStatus.  # noqa: E501
        :type: str
        """

        self._human_id = human_id

    @property
    def name(self):
        """Gets the name of this IssueStatus.  # noqa: E501

        Name of the status  # noqa: E501

        :return: The name of this IssueStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueStatus.

        Name of the status  # noqa: E501

        :param name: The name of this IssueStatus.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this IssueStatus.  # noqa: E501

        Description of the status  # noqa: E501

        :return: The description of this IssueStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueStatus.

        Description of the status  # noqa: E501

        :param description: The description of this IssueStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workflow_id(self):
        """Gets the workflow_id of this IssueStatus.  # noqa: E501

        Unique identifier of the associated workflow  # noqa: E501

        :return: The workflow_id of this IssueStatus.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this IssueStatus.

        Unique identifier of the associated workflow  # noqa: E501

        :param workflow_id: The workflow_id of this IssueStatus.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def initial(self):
        """Gets the initial of this IssueStatus.  # noqa: E501

        Indicates whether this is the initial status  # noqa: E501

        :return: The initial of this IssueStatus.  # noqa: E501
        :rtype: bool
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this IssueStatus.

        Indicates whether this is the initial status  # noqa: E501

        :param initial: The initial of this IssueStatus.  # noqa: E501
        :type: bool
        """

        self._initial = initial

    @property
    def terminal(self):
        """Gets the terminal of this IssueStatus.  # noqa: E501

        Indicates whether this is the terminal status  # noqa: E501

        :return: The terminal of this IssueStatus.  # noqa: E501
        :rtype: bool
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this IssueStatus.

        Indicates whether this is the terminal status  # noqa: E501

        :param terminal: The terminal of this IssueStatus.  # noqa: E501
        :type: bool
        """

        self._terminal = terminal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
