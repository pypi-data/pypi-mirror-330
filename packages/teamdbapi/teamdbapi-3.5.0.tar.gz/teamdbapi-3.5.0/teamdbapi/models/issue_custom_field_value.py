# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IssueCustomFieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'issue_workflow_id': 'str',
        'default_value': 'str',
        'list_data_source': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'type': 'Type',
        'issue_workflow_id': 'IssueWorkflowId',
        'default_value': 'DefaultValue',
        'list_data_source': 'ListDataSource',
        'value': 'Value'
    }

    def __init__(self, id=None, name=None, description=None, type=None, issue_workflow_id=None, default_value=None, list_data_source=None, value=None):  # noqa: E501
        """IssueCustomFieldValue - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._issue_workflow_id = None
        self._default_value = None
        self._list_data_source = None
        self._value = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.type = type
        self.issue_workflow_id = issue_workflow_id
        if default_value is not None:
            self.default_value = default_value
        if list_data_source is not None:
            self.list_data_source = list_data_source
        if value is not None:
            self.value = value

    @property
    def id(self):
        """Gets the id of this IssueCustomFieldValue.  # noqa: E501

        Id of the Issue Custom Field  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new custom field  # noqa: E501

        :return: The id of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueCustomFieldValue.

        Id of the Issue Custom Field  Set the Id to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new custom field  # noqa: E501

        :param id: The id of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this IssueCustomFieldValue.  # noqa: E501

        Name of the custom field  # noqa: E501

        :return: The name of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueCustomFieldValue.

        Name of the custom field  # noqa: E501

        :param name: The name of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this IssueCustomFieldValue.  # noqa: E501

        Description of the custom field  # noqa: E501

        :return: The description of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueCustomFieldValue.

        Description of the custom field  # noqa: E501

        :param description: The description of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this IssueCustomFieldValue.  # noqa: E501

        Type of the custom field  # noqa: E501

        :return: The type of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueCustomFieldValue.

        Type of the custom field  # noqa: E501

        :param type: The type of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["String", "Date", "Decimal", "List", "MediaFile", "User"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def issue_workflow_id(self):
        """Gets the issue_workflow_id of this IssueCustomFieldValue.  # noqa: E501

        Unique identifier of the workflow the custom field belong to  # noqa: E501

        :return: The issue_workflow_id of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._issue_workflow_id

    @issue_workflow_id.setter
    def issue_workflow_id(self, issue_workflow_id):
        """Sets the issue_workflow_id of this IssueCustomFieldValue.

        Unique identifier of the workflow the custom field belong to  # noqa: E501

        :param issue_workflow_id: The issue_workflow_id of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """
        if issue_workflow_id is None:
            raise ValueError("Invalid value for `issue_workflow_id`, must not be `None`")  # noqa: E501

        self._issue_workflow_id = issue_workflow_id

    @property
    def default_value(self):
        """Gets the default_value of this IssueCustomFieldValue.  # noqa: E501

        Default value of the custom field  # noqa: E501

        :return: The default_value of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this IssueCustomFieldValue.

        Default value of the custom field  # noqa: E501

        :param default_value: The default_value of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def list_data_source(self):
        """Gets the list_data_source of this IssueCustomFieldValue.  # noqa: E501

        Unique identifier of the source list. Only for custom field of type : List  # noqa: E501

        :return: The list_data_source of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._list_data_source

    @list_data_source.setter
    def list_data_source(self, list_data_source):
        """Sets the list_data_source of this IssueCustomFieldValue.

        Unique identifier of the source list. Only for custom field of type : List  # noqa: E501

        :param list_data_source: The list_data_source of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._list_data_source = list_data_source

    @property
    def value(self):
        """Gets the value of this IssueCustomFieldValue.  # noqa: E501

        Value of the custom field  # noqa: E501

        :return: The value of this IssueCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IssueCustomFieldValue.

        Value of the custom field  # noqa: E501

        :param value: The value of this IssueCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueCustomFieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueCustomFieldValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
