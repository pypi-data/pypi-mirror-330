# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Script(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'path': 'str',
        'is_shared_script': 'bool',
        'shared_script_owner': 'str',
        'run_in_gui_thread': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'path': 'Path',
        'is_shared_script': 'IsSharedScript',
        'shared_script_owner': 'SharedScriptOwner',
        'run_in_gui_thread': 'RunInGuiThread'
    }

    def __init__(self, id=None, name=None, path=None, is_shared_script=None, shared_script_owner=None, run_in_gui_thread=None):  # noqa: E501
        """Script - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._path = None
        self._is_shared_script = None
        self._shared_script_owner = None
        self._run_in_gui_thread = None
        self.discriminator = None
        self.id = id
        self.name = name
        if path is not None:
            self.path = path
        if is_shared_script is not None:
            self.is_shared_script = is_shared_script
        if shared_script_owner is not None:
            self.shared_script_owner = shared_script_owner
        if run_in_gui_thread is not None:
            self.run_in_gui_thread = run_in_gui_thread

    @property
    def id(self):
        """Gets the id of this Script.  # noqa: E501

        The unique script Id.  # noqa: E501

        :return: The id of this Script.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Script.

        The unique script Id.  # noqa: E501

        :param id: The id of this Script.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Script.  # noqa: E501

        The script name.  # noqa: E501

        :return: The name of this Script.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Script.

        The script name.  # noqa: E501

        :param name: The name of this Script.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this Script.  # noqa: E501

        The script file path.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :return: The path of this Script.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Script.

        The script file path.  The path must be described only by / or \\\\\\\\.  # noqa: E501

        :param path: The path of this Script.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def is_shared_script(self):
        """Gets the is_shared_script of this Script.  # noqa: E501

        True if it is a shared script.  # noqa: E501

        :return: The is_shared_script of this Script.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared_script

    @is_shared_script.setter
    def is_shared_script(self, is_shared_script):
        """Sets the is_shared_script of this Script.

        True if it is a shared script.  # noqa: E501

        :param is_shared_script: The is_shared_script of this Script.  # noqa: E501
        :type: bool
        """

        self._is_shared_script = is_shared_script

    @property
    def shared_script_owner(self):
        """Gets the shared_script_owner of this Script.  # noqa: E501

        The shared script owner name.  # noqa: E501

        :return: The shared_script_owner of this Script.  # noqa: E501
        :rtype: str
        """
        return self._shared_script_owner

    @shared_script_owner.setter
    def shared_script_owner(self, shared_script_owner):
        """Sets the shared_script_owner of this Script.

        The shared script owner name.  # noqa: E501

        :param shared_script_owner: The shared_script_owner of this Script.  # noqa: E501
        :type: str
        """

        self._shared_script_owner = shared_script_owner

    @property
    def run_in_gui_thread(self):
        """Gets the run_in_gui_thread of this Script.  # noqa: E501

        True if the script runs in the GUI thread.  # noqa: E501

        :return: The run_in_gui_thread of this Script.  # noqa: E501
        :rtype: bool
        """
        return self._run_in_gui_thread

    @run_in_gui_thread.setter
    def run_in_gui_thread(self, run_in_gui_thread):
        """Sets the run_in_gui_thread of this Script.

        True if the script runs in the GUI thread.  # noqa: E501

        :param run_in_gui_thread: The run_in_gui_thread of this Script.  # noqa: E501
        :type: bool
        """

        self._run_in_gui_thread = run_in_gui_thread

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Script, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Script):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
