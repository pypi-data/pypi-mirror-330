# coding: utf-8

"""
    Trackside Software TeamDB API v2.0

    This API enables you to access TeamDB data  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@trackside.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Part(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'str',
        'is_lifed': 'bool',
        'part_name': 'str',
        'manufacturer_number': 'str',
        'description': 'str',
        'tags': 'str',
        'is_class': 'bool',
        'has_expiration_date': 'bool',
        'max_distance': 'float',
        'min_distance': 'float',
        'max_time': 'float',
        'date_creation_utc': 'datetime',
        'creator': 'str',
        'last_update_date_utc': 'datetime',
        'last_update_user': 'str',
        'part_status': 'str',
        'part_type': 'str',
        'manufacturer': 'str',
        'parent_part_class': 'str',
        'icon_id': 'str',
        'department': 'str',
        'annotation': 'str',
        'multi_manufacturer': 'bool',
        'classification_code': 'str',
        'max_distance_factored': 'float',
        'factor_id': 'str',
        'max_energy': 'float',
        'criteria_set_id': 'str',
        'inherited_status': 'bool',
        'min_weight': 'float',
        'max_weight': 'float',
        'is_sensor': 'bool'
    }

    attribute_map = {
        'part_id': 'PartId',
        'is_lifed': 'IsLifed',
        'part_name': 'PartName',
        'manufacturer_number': 'ManufacturerNumber',
        'description': 'Description',
        'tags': 'Tags',
        'is_class': 'IsClass',
        'has_expiration_date': 'HasExpirationDate',
        'max_distance': 'MaxDistance',
        'min_distance': 'MinDistance',
        'max_time': 'MaxTime',
        'date_creation_utc': 'DateCreationUtc',
        'creator': 'Creator',
        'last_update_date_utc': 'LastUpdateDateUtc',
        'last_update_user': 'LastUpdateUser',
        'part_status': 'PartStatus',
        'part_type': 'PartType',
        'manufacturer': 'Manufacturer',
        'parent_part_class': 'ParentPartClass',
        'icon_id': 'IconId',
        'department': 'Department',
        'annotation': 'Annotation',
        'multi_manufacturer': 'MultiManufacturer',
        'classification_code': 'ClassificationCode',
        'max_distance_factored': 'MaxDistanceFactored',
        'factor_id': 'FactorId',
        'max_energy': 'MaxEnergy',
        'criteria_set_id': 'CriteriaSetId',
        'inherited_status': 'InheritedStatus',
        'min_weight': 'MinWeight',
        'max_weight': 'MaxWeight',
        'is_sensor': 'IsSensor'
    }

    def __init__(self, part_id=None, is_lifed=None, part_name=None, manufacturer_number=None, description=None, tags=None, is_class=None, has_expiration_date=None, max_distance=None, min_distance=None, max_time=None, date_creation_utc=None, creator=None, last_update_date_utc=None, last_update_user=None, part_status=None, part_type=None, manufacturer=None, parent_part_class=None, icon_id=None, department=None, annotation=None, multi_manufacturer=None, classification_code=None, max_distance_factored=None, factor_id=None, max_energy=None, criteria_set_id=None, inherited_status=None, min_weight=None, max_weight=None, is_sensor=None):  # noqa: E501
        """Part - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._is_lifed = None
        self._part_name = None
        self._manufacturer_number = None
        self._description = None
        self._tags = None
        self._is_class = None
        self._has_expiration_date = None
        self._max_distance = None
        self._min_distance = None
        self._max_time = None
        self._date_creation_utc = None
        self._creator = None
        self._last_update_date_utc = None
        self._last_update_user = None
        self._part_status = None
        self._part_type = None
        self._manufacturer = None
        self._parent_part_class = None
        self._icon_id = None
        self._department = None
        self._annotation = None
        self._multi_manufacturer = None
        self._classification_code = None
        self._max_distance_factored = None
        self._factor_id = None
        self._max_energy = None
        self._criteria_set_id = None
        self._inherited_status = None
        self._min_weight = None
        self._max_weight = None
        self._is_sensor = None
        self.discriminator = None
        self.part_id = part_id
        if is_lifed is not None:
            self.is_lifed = is_lifed
        if part_name is not None:
            self.part_name = part_name
        if manufacturer_number is not None:
            self.manufacturer_number = manufacturer_number
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if is_class is not None:
            self.is_class = is_class
        if has_expiration_date is not None:
            self.has_expiration_date = has_expiration_date
        if max_distance is not None:
            self.max_distance = max_distance
        if min_distance is not None:
            self.min_distance = min_distance
        if max_time is not None:
            self.max_time = max_time
        if date_creation_utc is not None:
            self.date_creation_utc = date_creation_utc
        if creator is not None:
            self.creator = creator
        if last_update_date_utc is not None:
            self.last_update_date_utc = last_update_date_utc
        if last_update_user is not None:
            self.last_update_user = last_update_user
        self.part_status = part_status
        self.part_type = part_type
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if parent_part_class is not None:
            self.parent_part_class = parent_part_class
        if icon_id is not None:
            self.icon_id = icon_id
        self.department = department
        if annotation is not None:
            self.annotation = annotation
        if multi_manufacturer is not None:
            self.multi_manufacturer = multi_manufacturer
        if classification_code is not None:
            self.classification_code = classification_code
        if max_distance_factored is not None:
            self.max_distance_factored = max_distance_factored
        if factor_id is not None:
            self.factor_id = factor_id
        if max_energy is not None:
            self.max_energy = max_energy
        if criteria_set_id is not None:
            self.criteria_set_id = criteria_set_id
        if inherited_status is not None:
            self.inherited_status = inherited_status
        if min_weight is not None:
            self.min_weight = min_weight
        if max_weight is not None:
            self.max_weight = max_weight
        if is_sensor is not None:
            self.is_sensor = is_sensor

    @property
    def part_id(self):
        """Gets the part_id of this Part.  # noqa: E501

        Part unique identifier, common to all revisions of the same part  Set the PartId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new part.  # noqa: E501

        :return: The part_id of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this Part.

        Part unique identifier, common to all revisions of the same part  Set the PartId to Guid.Empty (00000000-0000-0000-0000-000000000000) if you want to create a new part.  # noqa: E501

        :param part_id: The part_id of this Part.  # noqa: E501
        :type: str
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def is_lifed(self):
        """Gets the is_lifed of this Part.  # noqa: E501

        Indicates whether the part should be monitored because it has is limited lifespan  # noqa: E501

        :return: The is_lifed of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._is_lifed

    @is_lifed.setter
    def is_lifed(self, is_lifed):
        """Sets the is_lifed of this Part.

        Indicates whether the part should be monitored because it has is limited lifespan  # noqa: E501

        :param is_lifed: The is_lifed of this Part.  # noqa: E501
        :type: bool
        """

        self._is_lifed = is_lifed

    @property
    def part_name(self):
        """Gets the part_name of this Part.  # noqa: E501

        Part name  # noqa: E501

        :return: The part_name of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_name

    @part_name.setter
    def part_name(self, part_name):
        """Sets the part_name of this Part.

        Part name  # noqa: E501

        :param part_name: The part_name of this Part.  # noqa: E501
        :type: str
        """

        self._part_name = part_name

    @property
    def manufacturer_number(self):
        """Gets the manufacturer_number of this Part.  # noqa: E501

        Part number in the manufacturer's reference system  # noqa: E501

        :return: The manufacturer_number of this Part.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_number

    @manufacturer_number.setter
    def manufacturer_number(self, manufacturer_number):
        """Sets the manufacturer_number of this Part.

        Part number in the manufacturer's reference system  # noqa: E501

        :param manufacturer_number: The manufacturer_number of this Part.  # noqa: E501
        :type: str
        """

        self._manufacturer_number = manufacturer_number

    @property
    def description(self):
        """Gets the description of this Part.  # noqa: E501

        Part description  # noqa: E501

        :return: The description of this Part.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Part.

        Part description  # noqa: E501

        :param description: The description of this Part.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Part.  # noqa: E501

        Part tags. Each tag must be separated by a semicolon.  # noqa: E501

        :return: The tags of this Part.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Part.

        Part tags. Each tag must be separated by a semicolon.  # noqa: E501

        :param tags: The tags of this Part.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def is_class(self):
        """Gets the is_class of this Part.  # noqa: E501

        Indicates whether it is a class part  # noqa: E501

        :return: The is_class of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._is_class

    @is_class.setter
    def is_class(self, is_class):
        """Sets the is_class of this Part.

        Indicates whether it is a class part  # noqa: E501

        :param is_class: The is_class of this Part.  # noqa: E501
        :type: bool
        """

        self._is_class = is_class

    @property
    def has_expiration_date(self):
        """Gets the has_expiration_date of this Part.  # noqa: E501

        Indicates whether the part has an expiry date  # noqa: E501

        :return: The has_expiration_date of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._has_expiration_date

    @has_expiration_date.setter
    def has_expiration_date(self, has_expiration_date):
        """Sets the has_expiration_date of this Part.

        Indicates whether the part has an expiry date  # noqa: E501

        :param has_expiration_date: The has_expiration_date of this Part.  # noqa: E501
        :type: bool
        """

        self._has_expiration_date = has_expiration_date

    @property
    def max_distance(self):
        """Gets the max_distance of this Part.  # noqa: E501

        Maximum distance that the part can cover  # noqa: E501

        :return: The max_distance of this Part.  # noqa: E501
        :rtype: float
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this Part.

        Maximum distance that the part can cover  # noqa: E501

        :param max_distance: The max_distance of this Part.  # noqa: E501
        :type: float
        """

        self._max_distance = max_distance

    @property
    def min_distance(self):
        """Gets the min_distance of this Part.  # noqa: E501

        Minimum distance that the part can cover  # noqa: E501

        :return: The min_distance of this Part.  # noqa: E501
        :rtype: float
        """
        return self._min_distance

    @min_distance.setter
    def min_distance(self, min_distance):
        """Sets the min_distance of this Part.

        Minimum distance that the part can cover  # noqa: E501

        :param min_distance: The min_distance of this Part.  # noqa: E501
        :type: float
        """

        self._min_distance = min_distance

    @property
    def max_time(self):
        """Gets the max_time of this Part.  # noqa: E501

        Maximum duration of use of the part (in hours)  # noqa: E501

        :return: The max_time of this Part.  # noqa: E501
        :rtype: float
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this Part.

        Maximum duration of use of the part (in hours)  # noqa: E501

        :param max_time: The max_time of this Part.  # noqa: E501
        :type: float
        """

        self._max_time = max_time

    @property
    def date_creation_utc(self):
        """Gets the date_creation_utc of this Part.  # noqa: E501

        Part creation utc date  # noqa: E501

        :return: The date_creation_utc of this Part.  # noqa: E501
        :rtype: datetime
        """
        return self._date_creation_utc

    @date_creation_utc.setter
    def date_creation_utc(self, date_creation_utc):
        """Sets the date_creation_utc of this Part.

        Part creation utc date  # noqa: E501

        :param date_creation_utc: The date_creation_utc of this Part.  # noqa: E501
        :type: datetime
        """

        self._date_creation_utc = date_creation_utc

    @property
    def creator(self):
        """Gets the creator of this Part.  # noqa: E501

        Part creator username  # noqa: E501

        :return: The creator of this Part.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Part.

        Part creator username  # noqa: E501

        :param creator: The creator of this Part.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def last_update_date_utc(self):
        """Gets the last_update_date_utc of this Part.  # noqa: E501

        Part last update utc date  # noqa: E501

        :return: The last_update_date_utc of this Part.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_utc

    @last_update_date_utc.setter
    def last_update_date_utc(self, last_update_date_utc):
        """Sets the last_update_date_utc of this Part.

        Part last update utc date  # noqa: E501

        :param last_update_date_utc: The last_update_date_utc of this Part.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_utc = last_update_date_utc

    @property
    def last_update_user(self):
        """Gets the last_update_user of this Part.  # noqa: E501

        The name of the user who performed the last update on the part  # noqa: E501

        :return: The last_update_user of this Part.  # noqa: E501
        :rtype: str
        """
        return self._last_update_user

    @last_update_user.setter
    def last_update_user(self, last_update_user):
        """Sets the last_update_user of this Part.

        The name of the user who performed the last update on the part  # noqa: E501

        :param last_update_user: The last_update_user of this Part.  # noqa: E501
        :type: str
        """

        self._last_update_user = last_update_user

    @property
    def part_status(self):
        """Gets the part_status of this Part.  # noqa: E501

        Part status name  # noqa: E501

        :return: The part_status of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_status

    @part_status.setter
    def part_status(self, part_status):
        """Sets the part_status of this Part.

        Part status name  # noqa: E501

        :param part_status: The part_status of this Part.  # noqa: E501
        :type: str
        """
        if part_status is None:
            raise ValueError("Invalid value for `part_status`, must not be `None`")  # noqa: E501

        self._part_status = part_status

    @property
    def part_type(self):
        """Gets the part_type of this Part.  # noqa: E501

        Part type  # noqa: E501

        :return: The part_type of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_type

    @part_type.setter
    def part_type(self, part_type):
        """Sets the part_type of this Part.

        Part type  # noqa: E501

        :param part_type: The part_type of this Part.  # noqa: E501
        :type: str
        """
        if part_type is None:
            raise ValueError("Invalid value for `part_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Single", "Group"]  # noqa: E501
        if part_type not in allowed_values:
            raise ValueError(
                "Invalid value for `part_type` ({0}), must be one of {1}"  # noqa: E501
                .format(part_type, allowed_values)
            )

        self._part_type = part_type

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Part.  # noqa: E501

        Part manufacturer name  # noqa: E501

        :return: The manufacturer of this Part.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Part.

        Part manufacturer name  # noqa: E501

        :param manufacturer: The manufacturer of this Part.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def parent_part_class(self):
        """Gets the parent_part_class of this Part.  # noqa: E501

        Parent class part identifier or null  # noqa: E501

        :return: The parent_part_class of this Part.  # noqa: E501
        :rtype: str
        """
        return self._parent_part_class

    @parent_part_class.setter
    def parent_part_class(self, parent_part_class):
        """Sets the parent_part_class of this Part.

        Parent class part identifier or null  # noqa: E501

        :param parent_part_class: The parent_part_class of this Part.  # noqa: E501
        :type: str
        """

        self._parent_part_class = parent_part_class

    @property
    def icon_id(self):
        """Gets the icon_id of this Part.  # noqa: E501

        Identifier of the icon associated with the part or null  # noqa: E501

        :return: The icon_id of this Part.  # noqa: E501
        :rtype: str
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this Part.

        Identifier of the icon associated with the part or null  # noqa: E501

        :param icon_id: The icon_id of this Part.  # noqa: E501
        :type: str
        """

        self._icon_id = icon_id

    @property
    def department(self):
        """Gets the department of this Part.  # noqa: E501

        The department to which the part belongs  # noqa: E501

        :return: The department of this Part.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Part.

        The department to which the part belongs  # noqa: E501

        :param department: The department of this Part.  # noqa: E501
        :type: str
        """
        if department is None:
            raise ValueError("Invalid value for `department`, must not be `None`")  # noqa: E501

        self._department = department

    @property
    def annotation(self):
        """Gets the annotation of this Part.  # noqa: E501

        Comments associated with the part  # noqa: E501

        :return: The annotation of this Part.  # noqa: E501
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this Part.

        Comments associated with the part  # noqa: E501

        :param annotation: The annotation of this Part.  # noqa: E501
        :type: str
        """

        self._annotation = annotation

    @property
    def multi_manufacturer(self):
        """Gets the multi_manufacturer of this Part.  # noqa: E501

        Indicates whether the part has multiple manufacturers  # noqa: E501

        :return: The multi_manufacturer of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._multi_manufacturer

    @multi_manufacturer.setter
    def multi_manufacturer(self, multi_manufacturer):
        """Sets the multi_manufacturer of this Part.

        Indicates whether the part has multiple manufacturers  # noqa: E501

        :param multi_manufacturer: The multi_manufacturer of this Part.  # noqa: E501
        :type: bool
        """

        self._multi_manufacturer = multi_manufacturer

    @property
    def classification_code(self):
        """Gets the classification_code of this Part.  # noqa: E501

        Part classification code  # noqa: E501

        :return: The classification_code of this Part.  # noqa: E501
        :rtype: str
        """
        return self._classification_code

    @classification_code.setter
    def classification_code(self, classification_code):
        """Sets the classification_code of this Part.

        Part classification code  # noqa: E501

        :param classification_code: The classification_code of this Part.  # noqa: E501
        :type: str
        """

        self._classification_code = classification_code

    @property
    def max_distance_factored(self):
        """Gets the max_distance_factored of this Part.  # noqa: E501

        Maximum factorized distance for the part  # noqa: E501

        :return: The max_distance_factored of this Part.  # noqa: E501
        :rtype: float
        """
        return self._max_distance_factored

    @max_distance_factored.setter
    def max_distance_factored(self, max_distance_factored):
        """Sets the max_distance_factored of this Part.

        Maximum factorized distance for the part  # noqa: E501

        :param max_distance_factored: The max_distance_factored of this Part.  # noqa: E501
        :type: float
        """

        self._max_distance_factored = max_distance_factored

    @property
    def factor_id(self):
        """Gets the factor_id of this Part.  # noqa: E501

        Identifier of the factor associated with the part or null  # noqa: E501

        :return: The factor_id of this Part.  # noqa: E501
        :rtype: str
        """
        return self._factor_id

    @factor_id.setter
    def factor_id(self, factor_id):
        """Sets the factor_id of this Part.

        Identifier of the factor associated with the part or null  # noqa: E501

        :param factor_id: The factor_id of this Part.  # noqa: E501
        :type: str
        """

        self._factor_id = factor_id

    @property
    def max_energy(self):
        """Gets the max_energy of this Part.  # noqa: E501

        Maximum energy allowed for the part  # noqa: E501

        :return: The max_energy of this Part.  # noqa: E501
        :rtype: float
        """
        return self._max_energy

    @max_energy.setter
    def max_energy(self, max_energy):
        """Sets the max_energy of this Part.

        Maximum energy allowed for the part  # noqa: E501

        :param max_energy: The max_energy of this Part.  # noqa: E501
        :type: float
        """

        self._max_energy = max_energy

    @property
    def criteria_set_id(self):
        """Gets the criteria_set_id of this Part.  # noqa: E501

        Identifier of the criteria set associated with the part or null  # noqa: E501

        :return: The criteria_set_id of this Part.  # noqa: E501
        :rtype: str
        """
        return self._criteria_set_id

    @criteria_set_id.setter
    def criteria_set_id(self, criteria_set_id):
        """Sets the criteria_set_id of this Part.

        Identifier of the criteria set associated with the part or null  # noqa: E501

        :param criteria_set_id: The criteria_set_id of this Part.  # noqa: E501
        :type: str
        """

        self._criteria_set_id = criteria_set_id

    @property
    def inherited_status(self):
        """Gets the inherited_status of this Part.  # noqa: E501

        Indicates whether to use the part status when creating a component  # noqa: E501

        :return: The inherited_status of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._inherited_status

    @inherited_status.setter
    def inherited_status(self, inherited_status):
        """Sets the inherited_status of this Part.

        Indicates whether to use the part status when creating a component  # noqa: E501

        :param inherited_status: The inherited_status of this Part.  # noqa: E501
        :type: bool
        """

        self._inherited_status = inherited_status

    @property
    def min_weight(self):
        """Gets the min_weight of this Part.  # noqa: E501

        Minimum authorized weight for the part  # noqa: E501

        :return: The min_weight of this Part.  # noqa: E501
        :rtype: float
        """
        return self._min_weight

    @min_weight.setter
    def min_weight(self, min_weight):
        """Sets the min_weight of this Part.

        Minimum authorized weight for the part  # noqa: E501

        :param min_weight: The min_weight of this Part.  # noqa: E501
        :type: float
        """

        self._min_weight = min_weight

    @property
    def max_weight(self):
        """Gets the max_weight of this Part.  # noqa: E501

        Maximum authorized weight for the part  # noqa: E501

        :return: The max_weight of this Part.  # noqa: E501
        :rtype: float
        """
        return self._max_weight

    @max_weight.setter
    def max_weight(self, max_weight):
        """Sets the max_weight of this Part.

        Maximum authorized weight for the part  # noqa: E501

        :param max_weight: The max_weight of this Part.  # noqa: E501
        :type: float
        """

        self._max_weight = max_weight

    @property
    def is_sensor(self):
        """Gets the is_sensor of this Part.  # noqa: E501

        Indicates whether the part is a sensor  # noqa: E501

        :return: The is_sensor of this Part.  # noqa: E501
        :rtype: bool
        """
        return self._is_sensor

    @is_sensor.setter
    def is_sensor(self, is_sensor):
        """Sets the is_sensor of this Part.

        Indicates whether the part is a sensor  # noqa: E501

        :param is_sensor: The is_sensor of this Part.  # noqa: E501
        :type: bool
        """

        self._is_sensor = is_sensor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Part, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Part):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
