# -*- coding: utf-8 -*-
"""ENVM_20250220_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qiSU2wQ2753h86ui8b8j_22OOGQKGGGL

# EnvFileManager
ipynbファイルをenvファイルに変換します


```
2025/02/20 0.1.0 完成
2025/03/02 PyPIへアップロード
```

# EnvFileManager

## 1. 初期設定
"""

# @title a. GDrive接続と .env 読み込み{"form-width":"400px"}
from google.colab import drive
drive.mount('/content/drive')

get_ipython().system( "pip install python-dotenv" )
from dotenv import load_dotenv

load_dotenv("/content/drive/MyDrive/env/settings_git.env")
load_dotenv("/content/drive/MyDrive/env/settings_pid.env")


import os
Git_username = os.getenv( "Git_username" )
Git_personal_access_token = os.getenv( "Git_personal_access_token" )

Pid_env_folder = os.getenv( "Pid_env_folder" )
Pid_env_config_file = os.getenv( "Pid_env_config_file" )

# @title b. 外部モジュール読み込みと宣言

# an_DebugHelper
Git_repo_url = f"https://{ Git_username }:{ Git_personal_access_token }@github.com/{ Git_username }/{'an_DebugHelper'}.git"
get_ipython().system( f"pip install git+{ Git_repo_url }" )

"""## 2. モジュール定義"""

# @title a. EnvFileManager 定義{"form-width":"400px"}
import yaml
import json
from pathlib import Path
from an_debughelper import DebugHelper

class EnvFileManager:
    def __init__(self, ipynb_file, config_path = Path( Pid_env_folder ) / Path( Pid_env_config_file ) ):
        """
        環境変数を分類して.envファイルに保存する

        :param ipynb_file : 変換する ipynb ファイルのパス
        :param config_path: 抽出変数ルール定義ファイル
        """
        self.debug = DebugHelper()
        self.ipynb_file = ipynb_file
        self.config = self.load_config(config_path)

        self.debug.log_step(f"EnvFileManager 初期化", success=None)
        self.debug.log_step(f"対象のノートブック: {self.ipynb_file}", char = "📄")

        if not os.path.exists( Pid_env_folder ):
            os.makedirs( Pid_env_folder )
            self.debug.log_step( "envファイル保存用のフォルダを作成しました", success = True )
        # self.debug.run_command( "ls -l '/content/drive/MyDrive/Colab Notebooks/'", stdout = True, stderr = True )
        if not os.path.exists(self.ipynb_file):
            raise FileNotFoundError(f"{self.ipynb_file} が見つかりません。")
        else:
            self.debug.log_step(f"{self.ipynb_file} が見つかりました", success=True)

    def load_config(self, config_path):
        """YAMLファイルからプレフィックスの設定を読み込む"""
        with open(config_path, "r") as file:
            return yaml.safe_load(file)

    def extract_env_from_ipynb(self):
        """特定のコメント行で囲まれた部分の環境変数を抽出し、適切な.envファイルに分類"""
        env_vars = {}  # { "ファイル名": [変数リスト] }
        start_marker = "# START_ENV"
        end_marker = "# END_ENV"
        within_section = False

        i = 0
        with open(self.ipynb_file, "r", encoding="utf-8") as f:
            notebook = json.load(f)
            for cell in notebook.get("cells", []):
                if cell.get("cell_type") == "code":
                    for line in cell.get("source", []):
                        i += 1
                        self.debug.log_step( f"No.{ i }: {line}", end = "", success = None)
                        if start_marker in line:
                            within_section = True
                            self.debug.log_step( "Start marker", success = None )
                            continue
                        if end_marker in line:
                            within_section = False
                            self.debug.log_step( "End marker", success = None )
                            continue
                        if within_section:
                            if "os.environ" in line:  # 環境変数の定義
                                env_vars.setdefault( Path( Pid_env_folder ) / Path( "env_settings.env" ), []).append(line)
                                self.debug.log_step( f"次のファイルに書き出します : settings_env.env", char = "✏️" )
                            else:  # 通常の変数定義
                                for prefix, env_file in self.config["env_rules"].items():
                                    if line.strip().startswith(prefix):
                                        env_vars.setdefault(Path( Pid_env_folder ) / Path( env_file ), []).append(line)
                                        self.debug.log_step( f"次のファイルに書き出します : { prefix }", char = "✒️" )
                                        break
                                else:
                                    env_vars.setdefault(self.config["env_rules"]["default"], []).append(line)

        # 分類した環境変数を保存
        for file, lines in env_vars.items():
            with open(file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            self.debug.log_step(f"{file} に環境変数を保存", success=True)

"""## 3. テスト"""

# @title a. テスト{"form-width":"400px"}
# **使用例**
if __name__ == "__main__":

    manager = EnvFileManager( ipynb_file = "/content/drive/MyDrive/Colab Notebooks/VENV_20250220_00.ipynb" )
    manager.extract_env_from_ipynb()
    # # `.ipynb` から `.env` を作成
    # if manager.extract_env_from_ipynb():
    #     # `.env` をカレントディレクトリへコピー
    #     manager.copy_env_to_current_dir()