# GitHub Actions workflow for Sequenzo package
name: Sequenzo Package CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Clear the `pip` cache to prevent conflicts
    - name: Clear pip cache
      run: python -m pip cache purge

    # macOS: Handle dependency installation, using different strategies for different Python versions
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        python -m pip install --upgrade pip
        pip install Cython==0.29.36
        
        if [ "${{ matrix.python-version }}" == "3.11" ]; then
          pip install "setuptools>=60.0.0"
        else
          pip install "setuptools==58.1.0"
        fi
        
        if [ "${{ matrix.python-version }}" == "3.11" ]; then
          pip install "numpy>=1.23.2,<2.0" --only-binary numpy
        elif [ "${{ matrix.python-version }}" == "3.10" ]; then
          pip install "numpy>=1.22.4,<2.0" --only-binary numpy
        else
          pip install "numpy==1.22.4" --only-binary numpy || pip install "numpy>=1.21.0,<2.0" --only-binary numpy
        fi
        
        pip install pybind11
        
        if [ "${{ matrix.python-version }}" == "3.11" ]; then
          pip install "scipy>=1.8.0"
        else
          pip install "scipy==1.7.3" || pip install "scipy>=1.7.0"
        fi
        
        python -m pip install --upgrade wheel
        pip install fastcluster==1.2.6 || pip install fastcluster
        
        if [ -f "requirements-${{ matrix.python-version }}.txt" ]; then
          pip install -r requirements-${{ matrix.python-version }}.txt --no-build-isolation || echo "⚠️ Some requirements may not be installed"
        else
          pip install -r requirements-3.9.txt --no-build-isolation || echo "⚠️ Some requirements may not be installed"
          echo "⚠️ Using requirements-3.9.txt as fallback"
        fi

    # macOS: Ensure that Xcode CLI tools are installed – required for all Python versions
    - name: Install Xcode Command Line Tools
      if: runner.os == 'macOS'
      run: |
        xcode-select --install || echo "Xcode CLI already installed"

    # Windows: Handle numpy & fastcluster version issues, install the complete MSVC toolchain
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh  # 确保使用 PowerShell，而不是默认 cmd.exe
      run: |
        choco install visualstudio2022buildtools --version=17.0.0 -y
        choco install visualstudio2022-workload-vctools -y

        python -m pip install --upgrade pip

        if ("${{ matrix.python-version }}" -eq "3.11") {
          pip install "numpy>=1.23.2,<2.0"
        } else {
          pip install numpy==1.22.4 --only-binary numpy
        }
        
        pip install wheel setuptools cmake Cython
        
        pip uninstall -y pybind11  
        pip install pybind11==2.10.4  
        
        pip install --force-reinstall fastcluster==1.2.6  
        
        if (Test-Path "requirements-${{ matrix.python-version }}.txt") {
          pip install -r requirements-${{ matrix.python-version }}.txt --use-deprecated=legacy-resolver
        } else {
          pip install -r requirements-3.9.txt --use-deprecated=legacy-resolver
          Write-Host "⚠️ Using requirements-3.9.txt as fallback"
        }

    # Linux: Handle fastcluster version issues, ensure numpy is installed first
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        
        sudo apt-get update
        sudo apt-get install -y build-essential
        
        if [ "${{ matrix.python-version }}" == "3.11" ]; then
          pip install "numpy>=1.23.2,<2.0" --only-binary numpy
        else
          pip install numpy==1.22.4 --only-binary numpy
        fi
        
        pip install pybind11 
        pip install fastcluster==1.2.6  
        
        if [ -f "requirements-${{ matrix.python-version }}.txt" ]; then
          pip install -r requirements-${{ matrix.python-version }}.txt --no-build-isolation
        else
          pip install -r requirements-3.9.txt --no-build-isolation
          echo "⚠️ Using requirements-3.9.txt as fallback"
        fi

    # Ensure `PYTHONPATH` is set correctly
    - name: Verify package path
      shell: bash
      run: |
        echo "📂 Current directory:"
        ls -lah
        echo "📂 Sequenzo package directory:"
        ls -lah sequenzo || echo "⚠️ Directory 'sequenzo' not found!"

    # Windows: Fix Unicode encoding issues
    - name: Set Windows Encoding
      if: runner.os == 'Windows'
      run: chcp 65001

    - name: Setup Windows C++ compilation
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install visualstudio2019buildtools -y
        choco install visualstudio2019-workload-vctools -y

        & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

        $Env:CL = "/EHsc /MD /bigobj /Ox"
        $Env:DISTUTILS_USE_SDK = "1"
        $Env:MSSdk = "1"

    # Consolidated installation steps for all platforms
    - name: Install local package
      if: runner.os != 'Windows'
      run: |
        pip install --no-cache-dir -e . --no-build-isolation
      env:
        PYTHONUTF8: 1
        PYTHONPATH: ${{ github.workspace }}

    - name: Install local package (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $editable_install = $false
        try {
          pip install --no-cache-dir -e . --no-build-isolation --verbose
          $editable_install = $true
        } catch {
          Write-Host "ERROR DETAILS: $_"
          Write-Host "Editable install failed, trying regular install..."
          pip install --no-cache-dir . --no-build-isolation --verbose
        }
      env:
        PYTHONUTF8: 1
        PYTHONPATH: ${{ github.workspace }}
        DISTUTILS_USE_SDK: 1
        MSSdk: 1

    # Display installed packages
    - name: Show installed packages
      run: pip list

    # Test whether the module is installed correctly
    - name: Test imports
      run: |
        python -c "import sequenzo.dissimilarity_measures; print('Dissimilarity measures module imported successfully')"
        python -c "import sequenzo.clustering; print('Clustering module imported successfully')"
      env:
        PYTHONPATH: ${{ github.workspace }}

    # Build the wheel
    - name: Build wheel
      run: python setup.py bdist_wheel

    # Upload build artifacts
    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/*.whl