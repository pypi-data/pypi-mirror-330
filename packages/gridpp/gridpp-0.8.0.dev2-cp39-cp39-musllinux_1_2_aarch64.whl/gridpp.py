# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gridpp
else:
    import _gridpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _gridpp.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gridpp.delete_SwigPyIterator

    def value(self):
        return _gridpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gridpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gridpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gridpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gridpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gridpp.SwigPyIterator_copy(self)

    def next(self):
        return _gridpp.SwigPyIterator_next(self)

    def __next__(self):
        return _gridpp.SwigPyIterator___next__(self)

    def previous(self):
        return _gridpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gridpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gridpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gridpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gridpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gridpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gridpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gridpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gridpp:
_gridpp.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector___bool__(self)

    def __len__(self):
        return _gridpp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector_pop(self)

    def append(self, x):
        return _gridpp.IntVector_append(self, x)

    def empty(self):
        return _gridpp.IntVector_empty(self)

    def size(self):
        return _gridpp.IntVector_size(self)

    def swap(self, v):
        return _gridpp.IntVector_swap(self, v)

    def begin(self):
        return _gridpp.IntVector_begin(self)

    def end(self):
        return _gridpp.IntVector_end(self)

    def rbegin(self):
        return _gridpp.IntVector_rbegin(self)

    def rend(self):
        return _gridpp.IntVector_rend(self)

    def clear(self):
        return _gridpp.IntVector_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.IntVector_swiginit(self, _gridpp.new_IntVector(*args))

    def push_back(self, x):
        return _gridpp.IntVector_push_back(self, x)

    def front(self):
        return _gridpp.IntVector_front(self)

    def back(self):
        return _gridpp.IntVector_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector

# Register IntVector in _gridpp:
_gridpp.IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector_pop(self)

    def append(self, x):
        return _gridpp.FloatVector_append(self, x)

    def empty(self):
        return _gridpp.FloatVector_empty(self)

    def size(self):
        return _gridpp.FloatVector_size(self)

    def swap(self, v):
        return _gridpp.FloatVector_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector_begin(self)

    def end(self):
        return _gridpp.FloatVector_end(self)

    def rbegin(self):
        return _gridpp.FloatVector_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector_rend(self)

    def clear(self):
        return _gridpp.FloatVector_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector_swiginit(self, _gridpp.new_FloatVector(*args))

    def push_back(self, x):
        return _gridpp.FloatVector_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector_front(self)

    def back(self):
        return _gridpp.FloatVector_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector

# Register FloatVector in _gridpp:
_gridpp.FloatVector_swigregister(FloatVector)

class FloatVector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector3___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector3___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector3___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector3___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector3_pop(self)

    def append(self, x):
        return _gridpp.FloatVector3_append(self, x)

    def empty(self):
        return _gridpp.FloatVector3_empty(self)

    def size(self):
        return _gridpp.FloatVector3_size(self)

    def swap(self, v):
        return _gridpp.FloatVector3_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector3_begin(self)

    def end(self):
        return _gridpp.FloatVector3_end(self)

    def rbegin(self):
        return _gridpp.FloatVector3_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector3_rend(self)

    def clear(self):
        return _gridpp.FloatVector3_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector3_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector3_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector3_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector3_swiginit(self, _gridpp.new_FloatVector3(*args))

    def push_back(self, x):
        return _gridpp.FloatVector3_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector3_front(self)

    def back(self):
        return _gridpp.FloatVector3_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector3_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector3_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector3_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector3_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector3_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector3

# Register FloatVector3 in _gridpp:
_gridpp.FloatVector3_swigregister(FloatVector3)

class IntVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.IntVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.IntVector2___bool__(self)

    def __len__(self):
        return _gridpp.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.IntVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.IntVector2_pop(self)

    def append(self, x):
        return _gridpp.IntVector2_append(self, x)

    def empty(self):
        return _gridpp.IntVector2_empty(self)

    def size(self):
        return _gridpp.IntVector2_size(self)

    def swap(self, v):
        return _gridpp.IntVector2_swap(self, v)

    def begin(self):
        return _gridpp.IntVector2_begin(self)

    def end(self):
        return _gridpp.IntVector2_end(self)

    def rbegin(self):
        return _gridpp.IntVector2_rbegin(self)

    def rend(self):
        return _gridpp.IntVector2_rend(self)

    def clear(self):
        return _gridpp.IntVector2_clear(self)

    def get_allocator(self):
        return _gridpp.IntVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.IntVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.IntVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.IntVector2_swiginit(self, _gridpp.new_IntVector2(*args))

    def push_back(self, x):
        return _gridpp.IntVector2_push_back(self, x)

    def front(self):
        return _gridpp.IntVector2_front(self)

    def back(self):
        return _gridpp.IntVector2_back(self)

    def assign(self, n, x):
        return _gridpp.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.IntVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.IntVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_IntVector2

# Register IntVector2 in _gridpp:
_gridpp.IntVector2_swigregister(IntVector2)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector_empty(self)

    def size(self):
        return _gridpp.DoubleVector_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector_begin(self)

    def end(self):
        return _gridpp.DoubleVector_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector_rend(self)

    def clear(self):
        return _gridpp.DoubleVector_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _gridpp.DoubleVector_swiginit(self, _gridpp.new_DoubleVector(*args))

    def push_back(self, x):
        return _gridpp.DoubleVector_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector_front(self)

    def back(self):
        return _gridpp.DoubleVector_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector

# Register DoubleVector in _gridpp:
_gridpp.DoubleVector_swigregister(DoubleVector)

class FloatVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.FloatVector2___bool__(self)

    def __len__(self):
        return _gridpp.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.FloatVector2_pop(self)

    def append(self, x):
        return _gridpp.FloatVector2_append(self, x)

    def empty(self):
        return _gridpp.FloatVector2_empty(self)

    def size(self):
        return _gridpp.FloatVector2_size(self)

    def swap(self, v):
        return _gridpp.FloatVector2_swap(self, v)

    def begin(self):
        return _gridpp.FloatVector2_begin(self)

    def end(self):
        return _gridpp.FloatVector2_end(self)

    def rbegin(self):
        return _gridpp.FloatVector2_rbegin(self)

    def rend(self):
        return _gridpp.FloatVector2_rend(self)

    def clear(self):
        return _gridpp.FloatVector2_clear(self)

    def get_allocator(self):
        return _gridpp.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.FloatVector2_swiginit(self, _gridpp.new_FloatVector2(*args))

    def push_back(self, x):
        return _gridpp.FloatVector2_push_back(self, x)

    def front(self):
        return _gridpp.FloatVector2_front(self)

    def back(self):
        return _gridpp.FloatVector2_back(self)

    def assign(self, n, x):
        return _gridpp.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.FloatVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.FloatVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_FloatVector2

# Register FloatVector2 in _gridpp:
_gridpp.FloatVector2_swigregister(FloatVector2)

class DoubleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gridpp.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridpp.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _gridpp.DoubleVector2___bool__(self)

    def __len__(self):
        return _gridpp.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _gridpp.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridpp.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridpp.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridpp.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridpp.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridpp.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _gridpp.DoubleVector2_pop(self)

    def append(self, x):
        return _gridpp.DoubleVector2_append(self, x)

    def empty(self):
        return _gridpp.DoubleVector2_empty(self)

    def size(self):
        return _gridpp.DoubleVector2_size(self)

    def swap(self, v):
        return _gridpp.DoubleVector2_swap(self, v)

    def begin(self):
        return _gridpp.DoubleVector2_begin(self)

    def end(self):
        return _gridpp.DoubleVector2_end(self)

    def rbegin(self):
        return _gridpp.DoubleVector2_rbegin(self)

    def rend(self):
        return _gridpp.DoubleVector2_rend(self)

    def clear(self):
        return _gridpp.DoubleVector2_clear(self)

    def get_allocator(self):
        return _gridpp.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _gridpp.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _gridpp.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        _gridpp.DoubleVector2_swiginit(self, _gridpp.new_DoubleVector2(*args))

    def push_back(self, x):
        return _gridpp.DoubleVector2_push_back(self, x)

    def front(self):
        return _gridpp.DoubleVector2_front(self)

    def back(self):
        return _gridpp.DoubleVector2_back(self)

    def assign(self, n, x):
        return _gridpp.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _gridpp.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _gridpp.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _gridpp.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _gridpp.DoubleVector2_capacity(self)
    __swig_destroy__ = _gridpp.delete_DoubleVector2

# Register DoubleVector2 in _gridpp:
_gridpp.DoubleVector2_swigregister(DoubleVector2)

GRIDPP_VERSION = _gridpp.GRIDPP_VERSION

__version__ = _gridpp.__version__

OneToOne = _gridpp.OneToOne
r""" Continue past the end-points using a slope of 1"""
MeanSlope = _gridpp.MeanSlope
r""" Continue past the end-points using the mean slope of the curve"""
NearestSlope = _gridpp.NearestSlope
r""" Continue past the end-points using the slope of the two lowermost or uppermost points in the curve"""
Zero = _gridpp.Zero
r""" Continue past the end-points using a slope of 0"""
Unchanged = _gridpp.Unchanged
r""" Keep values the way they were"""
Mean = _gridpp.Mean
r""" Mean of values"""
Min = _gridpp.Min
r""" Minimum of values"""
Median = _gridpp.Median
r""" Mean of values"""
Max = _gridpp.Max
r""" Maximum of values"""
Quantile = _gridpp.Quantile
r""" A quantile from values"""
Std = _gridpp.Std
r""" Standard deviation of values"""
Variance = _gridpp.Variance
r""" Population variance of values"""
Sum = _gridpp.Sum
r""" Sum of values"""
Count = _gridpp.Count
r""" Count of values"""
RandomChoice = _gridpp.RandomChoice
r""" Randomly pick a non-nan value"""
Unknown = _gridpp.Unknown
r""" Unknown statistic"""
Ets = _gridpp.Ets
r""" Equitable threat score"""
Ts = _gridpp.Ts
r""" Threat score"""
Kss = _gridpp.Kss
r""" Hannsen-Kuiper skill score"""
Pc = _gridpp.Pc
r""" Proportion correct"""
Bias = _gridpp.Bias
r""" Bias"""
Hss = _gridpp.Hss
r""" Heidke skill score"""
Qq = _gridpp.Qq
r""" Quantile mapping"""
Multiplicative = _gridpp.Multiplicative
r""" Multiplicative"""
Additive = _gridpp.Additive
r""" Additive"""
Geodetic = _gridpp.Geodetic
r""" Latitude and longitude"""
Cartesian = _gridpp.Cartesian
r""" X and Y"""
MinMax = _gridpp.MinMax

LinearRegression = _gridpp.LinearRegression

Nearest = _gridpp.Nearest
r""" Nearest neighour downscaler"""
Bilinear = _gridpp.Bilinear
r""" Bilinear downscaler"""
Lt = _gridpp.Lt
r""" Lower than, <"""
Leq = _gridpp.Leq
r""" Lower or equal than, <="""
Gt = _gridpp.Gt
r""" Greater than, >"""
Geq = _gridpp.Geq
r""" Greater or equal than, >="""

def optimal_interpolation(*args):
    r"""
    optimal_interpolation(bgrid, background, obs_points, obs, variance_ratios, background_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    variance_ratios: gridpp::vec const &
    background_at_points: gridpp::vec const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation(bpoints, background, obs_points, obs, variance_ratios, background_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector

    Parameters
    ----------
    bpoints: gridpp::Points const &
    background: gridpp::vec const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    variance_ratios: gridpp::vec const &
    background_at_points: gridpp::vec const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation(*args)

def optimal_interpolation_full(*args):
    r"""
    optimal_interpolation_full(bgrid, background, bvariance, obs_points, obs, obs_variance, background_at_points, bvariance_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    bvariance: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    obs_variance: gridpp::vec const &
    background_at_points: gridpp::vec const &
    bvariance_at_points: gridpp::vec const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation_full(bpoints, background, bvariance, obs_points, obs, obs_variance, background_at_points, bvariance_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector

    Parameters
    ----------
    bpoints: gridpp::Points const &
    background: gridpp::vec const &
    bvariance: gridpp::vec const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    obs_variance: gridpp::vec const &
    background_at_points: gridpp::vec const &
    bvariance_at_points: gridpp::vec const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation_full(*args)

def optimal_interpolation_ensi(*args):
    r"""
    optimal_interpolation_ensi(bgrid, background, obs_points, obs, obs_standard_deviations, background_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector3

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    background: gridpp::vec3 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    obs_standard_deviations: gridpp::vec const &
    background_at_points: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation_ensi(bpoints, background, obs_points, obs, obs_standard_deviations, background_at_points, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bpoints: gridpp::Points const &
    background: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    obs_standard_deviations: gridpp::vec const &
    background_at_points: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation_ensi(*args)

def optimal_interpolation_ensi_multi_ebe(*args):
    r"""
    optimal_interpolation_ensi_multi_ebe(bgrid, bratios, background, background_corr, obs_points, pobs, pratios, pbackground, pbackground_corr, structure, max_points, allow_extrapolation=True) -> FloatVector3

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    bratios: gridpp::vec2 const &
    background: gridpp::vec3 const &
    background_corr: gridpp::vec3 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec2 const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    pbackground_corr: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation_ensi_multi_ebe(bpoints, bratios, background, background_corr, obs_points, pobs, pratios, pbackground, pbackground_corr, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bpoints: gridpp::Points const &
    bratios: gridpp::vec const &
    background: gridpp::vec2 const &
    background_corr: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec2 const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    pbackground_corr: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation_ensi_multi_ebe(*args)

def optimal_interpolation_ensi_multi_ebesc(*args):
    r"""
    optimal_interpolation_ensi_multi_ebesc(bgrid, bratios, background, obs_points, pobs, pratios, pbackground, structure, max_points, allow_extrapolation=True) -> FloatVector3

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    bratios: gridpp::vec2 const &
    background: gridpp::vec3 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec2 const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation_ensi_multi_ebesc(bpoints, bratios, background, obs_points, pobs, pratios, pbackground, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bpoints: gridpp::Points const &
    bratios: gridpp::vec const &
    background: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec2 const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation_ensi_multi_ebesc(*args)

def optimal_interpolation_ensi_multi_utem(*args):
    r"""
    optimal_interpolation_ensi_multi_utem(bgrid, bratios, background, background_corr, obs_points, pobs, pratios, pbackground, pbackground_corr, structure, max_points, allow_extrapolation=True) -> FloatVector3

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    bratios: gridpp::vec2 const &
    background: gridpp::vec3 const &
    background_corr: gridpp::vec3 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    pbackground_corr: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    optimal_interpolation_ensi_multi_utem(bpoints, bratios, background, background_corr, obs_points, pobs, pratios, pbackground, pbackground_corr, structure, max_points, allow_extrapolation=True) -> FloatVector2

    Parameters
    ----------
    bpoints: gridpp::Points const &
    bratios: gridpp::vec const &
    background: gridpp::vec2 const &
    background_corr: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    pobs: gridpp::vec const &
    pratios: gridpp::vec const &
    pbackground: gridpp::vec2 const &
    pbackground_corr: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    max_points: int
    allow_extrapolation: bool

    """
    return _gridpp.optimal_interpolation_ensi_multi_utem(*args)

def staticcorr_points(points, knots, structure, max_points):
    r"""
    staticcorr_points(points, knots, structure, max_points) -> FloatVector2

    Parameters
    ----------
    points: gridpp::Points const &
    knots: gridpp::Points const &
    structure: gridpp::StructureFunction const &
    max_points: int

    """
    return _gridpp.staticcorr_points(points, knots, structure, max_points)

def local_distribution_correction(*args):
    r"""
    local_distribution_correction(bgrid, background, obs_points, obs, background_at_points, structure, min_quantile, max_quantile, min_points=0) -> FloatVector2

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec const &
    background_at_points: gridpp::vec const &
    structure: gridpp::StructureFunction const &
    min_quantile: float
    max_quantile: float
    min_points: int

    local_distribution_correction(bgrid, background, obs_points, obs, background_at_points, structure, min_quantile, max_quantile, min_points=0) -> FloatVector2

    Parameters
    ----------
    bgrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    obs_points: gridpp::Points const &
    obs: gridpp::vec2 const &
    background_at_points: gridpp::vec2 const &
    structure: gridpp::StructureFunction const &
    min_quantile: float
    max_quantile: float
    min_points: int

    """
    return _gridpp.local_distribution_correction(*args)

def fill(igrid, input, points, radii, value, outside):
    r"""
    fill(igrid, input, points, radii, value, outside) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    input: gridpp::vec2 const &
    points: gridpp::Points const &
    radii: gridpp::vec const &
    value: float
    outside: bool

    """
    return _gridpp.fill(igrid, input, points, radii, value, outside)

def doping_square(*args):
    r"""
    doping_square(igrid, background, points, observations, halfwidths, max_elev_diff=MV) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    points: gridpp::Points const &
    observations: gridpp::vec const &
    halfwidths: gridpp::ivec const &
    max_elev_diff: float

    """
    return _gridpp.doping_square(*args)

def doping_circle(*args):
    r"""
    doping_circle(igrid, background, points, observations, radii, max_elev_diff=MV) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    background: gridpp::vec2 const &
    points: gridpp::Points const &
    observations: gridpp::vec const &
    radii: gridpp::vec const &
    max_elev_diff: float

    """
    return _gridpp.doping_circle(*args)

def gamma_inv(levels, shape, scale):
    r"""
    gamma_inv(levels, shape, scale) -> FloatVector

    Parameters
    ----------
    levels: gridpp::vec const &
    shape: gridpp::vec const &
    scale: gridpp::vec const &

    """
    return _gridpp.gamma_inv(levels, shape, scale)

def neighbourhood(*args):
    r"""
    neighbourhood(input, halfwidth, statistic) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec2 const &
    halfwidth: int
    statistic: enum gridpp::Statistic

    neighbourhood(input, halfwidth, statistic) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    halfwidth: int
    statistic: enum gridpp::Statistic

    """
    return _gridpp.neighbourhood(*args)

def neighbourhood_quantile(*args):
    r"""
    neighbourhood_quantile(input, quantile, halfwidth) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec2 const &
    quantile: float
    halfwidth: int

    neighbourhood_quantile(input, quantile, halfwidth) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    quantile: float
    halfwidth: int

    """
    return _gridpp.neighbourhood_quantile(*args)

def neighbourhood_quantile_fast(*args):
    r"""
    neighbourhood_quantile_fast(input, quantile, halfwidth, thresholds) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec2 const &
    quantile: float
    halfwidth: int
    thresholds: gridpp::vec const &

    neighbourhood_quantile_fast(input, quantile, halfwidth, thresholds) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    quantile: float
    halfwidth: int
    thresholds: gridpp::vec const &

    neighbourhood_quantile_fast(input, quantile, halfwidth, thresholds) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec2 const &
    quantile: gridpp::vec2 const &
    halfwidth: int
    thresholds: gridpp::vec const &

    neighbourhood_quantile_fast(input, quantile, halfwidth, thresholds) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    quantile: gridpp::vec2 const &
    halfwidth: int
    thresholds: gridpp::vec const &

    """
    return _gridpp.neighbourhood_quantile_fast(*args)

def neighbourhood_brute_force(*args):
    r"""
    neighbourhood_brute_force(input, halfwidth, statistic) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec2 const &
    halfwidth: int
    statistic: enum gridpp::Statistic

    neighbourhood_brute_force(input, halfwidth, statistic) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    halfwidth: int
    statistic: enum gridpp::Statistic

    """
    return _gridpp.neighbourhood_brute_force(*args)

def get_neighbourhood_thresholds(*args):
    r"""
    get_neighbourhood_thresholds(input, num_thresholds) -> FloatVector

    Parameters
    ----------
    input: gridpp::vec2 const &
    num_thresholds: int

    get_neighbourhood_thresholds(input, num_thresholds) -> FloatVector

    Parameters
    ----------
    input: gridpp::vec3 const &
    num_thresholds: int

    """
    return _gridpp.get_neighbourhood_thresholds(*args)

def calc_gradient(*args):
    r"""
    calc_gradient(base, values, gradient_type, halfwidth, min_num=2, min_range=MV, default_gradient=0) -> FloatVector2

    Parameters
    ----------
    base: gridpp::vec2 const &
    values: gridpp::vec2 const &
    gradient_type: enum gridpp::GradientType
    halfwidth: int
    min_num: int
    min_range: float
    default_gradient: float

    """
    return _gridpp.calc_gradient(*args)

def neighbourhood_search(*args):
    r"""
    neighbourhood_search(array, search_array, halfwidth, search_target_min, search_target_max, search_delta, apply_array=gridpp::ivec2()) -> FloatVector2

    Parameters
    ----------
    array: gridpp::vec2 const &
    search_array: gridpp::vec2 const &
    halfwidth: int
    search_target_min: float
    search_target_max: float
    search_delta: float
    apply_array: gridpp::ivec2 const &

    """
    return _gridpp.neighbourhood_search(*args)

def neighbourhood_ens(input, halfwidth, statistic):
    r"""
    neighbourhood_ens(input, halfwidth, statistic) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    halfwidth: int
    statistic: enum gridpp::Statistic

    """
    return _gridpp.neighbourhood_ens(input, halfwidth, statistic)

def neighbourhood_quantile_ens(input, quantile, halfwidth):
    r"""
    neighbourhood_quantile_ens(input, quantile, halfwidth) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    quantile: float
    halfwidth: int

    """
    return _gridpp.neighbourhood_quantile_ens(input, quantile, halfwidth)

def neighbourhood_quantile_ens_fast(input, quantile, radius, thresholds):
    r"""
    neighbourhood_quantile_ens_fast(input, quantile, radius, thresholds) -> FloatVector2

    Parameters
    ----------
    input: gridpp::vec3 const &
    quantile: float
    radius: int
    thresholds: gridpp::vec const &

    """
    return _gridpp.neighbourhood_quantile_ens_fast(input, quantile, radius, thresholds)

def quantile_mapping_curve(*args):
    r"""
    quantile_mapping_curve(ref, fcst, quantiles=gridpp::vec()) -> FloatVector

    Parameters
    ----------
    ref: gridpp::vec const &
    fcst: gridpp::vec const &
    quantiles: gridpp::vec

    """
    return _gridpp.quantile_mapping_curve(*args)

def metric_optimizer_curve(ref, fcst, thresholds, metric):
    r"""
    metric_optimizer_curve(ref, fcst, thresholds, metric) -> FloatVector

    Parameters
    ----------
    ref: gridpp::vec const &
    fcst: gridpp::vec const &
    thresholds: gridpp::vec const &
    metric: enum gridpp::Metric

    """
    return _gridpp.metric_optimizer_curve(ref, fcst, thresholds, metric)

def apply_curve(*args):
    r"""
    apply_curve(fcst, curve_ref, curve_fcst, policy_below, policy_above) -> float

    Parameters
    ----------
    fcst: float
    curve_ref: gridpp::vec const &
    curve_fcst: gridpp::vec const &
    policy_below: enum gridpp::Extrapolation
    policy_above: enum gridpp::Extrapolation

    apply_curve(fcst, curve_ref, curve_fcst, policy_below, policy_above) -> FloatVector

    Parameters
    ----------
    fcst: gridpp::vec const &
    curve_ref: gridpp::vec const &
    curve_fcst: gridpp::vec const &
    policy_below: enum gridpp::Extrapolation
    policy_above: enum gridpp::Extrapolation

    apply_curve(fcst, curve_ref, curve_fcst, policy_below, policy_above) -> FloatVector2

    Parameters
    ----------
    fcst: gridpp::vec2 const &
    curve_ref: gridpp::vec const &
    curve_fcst: gridpp::vec const &
    policy_below: enum gridpp::Extrapolation
    policy_above: enum gridpp::Extrapolation

    apply_curve(fcst, curve_ref, curve_fcst, policy_below, policy_above) -> FloatVector2

    Parameters
    ----------
    fcst: gridpp::vec2 const &
    curve_ref: gridpp::vec3 const &
    curve_fcst: gridpp::vec3 const &
    policy_below: enum gridpp::Extrapolation
    policy_above: enum gridpp::Extrapolation

    """
    return _gridpp.apply_curve(*args)

def monotonize_curve(curve_ref, curve_fcst):
    r"""
    monotonize_curve(curve_ref, curve_fcst) -> FloatVector

    Parameters
    ----------
    curve_ref: gridpp::vec
    curve_fcst: gridpp::vec

    """
    return _gridpp.monotonize_curve(curve_ref, curve_fcst)

def get_optimal_threshold(curve_ref, curve_fcst, threshold, metric):
    r"""
    get_optimal_threshold(curve_ref, curve_fcst, threshold, metric) -> float

    Parameters
    ----------
    curve_ref: gridpp::vec const &
    curve_fcst: gridpp::vec const &
    threshold: float
    metric: enum gridpp::Metric

    """
    return _gridpp.get_optimal_threshold(curve_ref, curve_fcst, threshold, metric)

def calc_score(*args):
    r"""
    calc_score(a, b, c, d, metric) -> float

    Parameters
    ----------
    a: float
    b: float
    c: float
    d: float
    metric: enum gridpp::Metric

    calc_score(ref, fcst, threshold, metric) -> float

    Parameters
    ----------
    ref: gridpp::vec const &
    fcst: gridpp::vec const &
    threshold: float
    metric: enum gridpp::Metric

    calc_score(ref, fcst, threshold, fthreshold, metric) -> float

    Parameters
    ----------
    ref: gridpp::vec const &
    fcst: gridpp::vec const &
    threshold: float
    fthreshold: float
    metric: enum gridpp::Metric

    """
    return _gridpp.calc_score(*args)

def downscaling(*args):
    r"""
    downscaling(igrid, ogrid, ivalues, downscaler) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &
    downscaler: enum gridpp::Downscaler

    downscaling(igrid, ogrid, ivalues, downscaler) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &
    downscaler: enum gridpp::Downscaler

    downscaling(igrid, opoints, ivalues, downscaler) -> FloatVector

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &
    downscaler: enum gridpp::Downscaler

    downscaling(igrid, opoints, ivalues, downscaler) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec3 const &
    downscaler: enum gridpp::Downscaler

    """
    return _gridpp.downscaling(*args)

def nearest(*args):
    r"""
    nearest(igrid, ogrid, ivalues) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &

    nearest(igrid, ogrid, ivalues) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &

    nearest(igrid, opoints, ivalues) -> FloatVector

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &

    nearest(igrid, opoints, ivalues) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec3 const &

    nearest(ipoints, opoints, ivalues) -> FloatVector

    Parameters
    ----------
    ipoints: gridpp::Points const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec const &

    nearest(ipoints, opoints, ivalues) -> FloatVector2

    Parameters
    ----------
    ipoints: gridpp::Points const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &

    nearest(ipoints, ogrid, ivalues) -> FloatVector2

    Parameters
    ----------
    ipoints: gridpp::Points const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec const &

    nearest(ipoints, ogrid, ivalues) -> FloatVector3

    Parameters
    ----------
    ipoints: gridpp::Points const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &

    """
    return _gridpp.nearest(*args)

def downscale_probability(igrid, ogrid, ivalues, threshold, comparison_operator):
    r"""
    downscale_probability(igrid, ogrid, ivalues, threshold, comparison_operator) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &
    threshold: gridpp::vec2 const &
    comparison_operator: gridpp::ComparisonOperator const &

    """
    return _gridpp.downscale_probability(igrid, ogrid, ivalues, threshold, comparison_operator)

def mask_threshold_downscale_consensus(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, statistic):
    r"""
    mask_threshold_downscale_consensus(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, statistic) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues_true: gridpp::vec3 const &
    ivalues_false: gridpp::vec3 const &
    theshold_values: gridpp::vec3 const &
    threshold: gridpp::vec2 const &
    comparison_operator: gridpp::ComparisonOperator const &
    statistic: gridpp::Statistic const &

    """
    return _gridpp.mask_threshold_downscale_consensus(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, statistic)

def mask_threshold_downscale_quantile(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, quantile_level):
    r"""
    mask_threshold_downscale_quantile(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, quantile_level) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues_true: gridpp::vec3 const &
    ivalues_false: gridpp::vec3 const &
    theshold_values: gridpp::vec3 const &
    threshold: gridpp::vec2 const &
    comparison_operator: gridpp::ComparisonOperator const &
    quantile_level: float const

    """
    return _gridpp.mask_threshold_downscale_quantile(igrid, ogrid, ivalues_true, ivalues_false, theshold_values, threshold, comparison_operator, quantile_level)

def bilinear(*args):
    r"""
    bilinear(igrid, ogrid, ivalues) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &

    bilinear(igrid, ogrid, ivalues) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &

    bilinear(igrid, opoints, ivalues) -> FloatVector

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &

    bilinear(igrid, opoints, ivalues) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec3 const &

    """
    return _gridpp.bilinear(*args)

def simple_gradient(*args):
    r"""
    simple_gradient(igrid, ogrid, ivalues, elev_gradient, downscaler=Nearest) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &
    elev_gradient: float
    downscaler: enum gridpp::Downscaler

    simple_gradient(igrid, ogrid, ivalues, elev_gradient, downscaler=Nearest) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &
    elev_gradient: float
    downscaler: enum gridpp::Downscaler

    simple_gradient(igrid, opoints, ivalues, elev_gradient, downscaler=Nearest) -> FloatVector

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &
    elev_gradient: float
    downscaler: enum gridpp::Downscaler

    simple_gradient(igrid, opoints, ivalues, elev_gradient, downscaler=Nearest) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec3 const &
    elev_gradient: float
    downscaler: enum gridpp::Downscaler

    """
    return _gridpp.simple_gradient(*args)

def full_gradient(*args):
    r"""
    full_gradient(igrid, ogrid, ivalues, elev_gradient, laf_gradient=gridpp::vec2(), downscaler=Nearest) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &
    elev_gradient: gridpp::vec2 const &
    laf_gradient: gridpp::vec2 const &
    downscaler: enum gridpp::Downscaler

    full_gradient(igrid, ogrid, ivalues, elev_gradient, laf_gradient, downscaler=Nearest) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec3 const &
    elev_gradient: gridpp::vec3 const &
    laf_gradient: gridpp::vec3 const &
    downscaler: enum gridpp::Downscaler

    full_gradient(igrid, opoints, ivalues, elev_gradient, laf_gradient, downscaler=Nearest) -> FloatVector

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec2 const &
    elev_gradient: gridpp::vec2 const &
    laf_gradient: gridpp::vec2 const &
    downscaler: enum gridpp::Downscaler

    full_gradient(igrid, opoints, ivalues, elev_gradient, laf_gradient, downscaler=Nearest) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    opoints: gridpp::Points const &
    ivalues: gridpp::vec3 const &
    elev_gradient: gridpp::vec3 const &
    laf_gradient: gridpp::vec3 const &
    downscaler: enum gridpp::Downscaler

    """
    return _gridpp.full_gradient(*args)

def full_gradient_debug(*args):
    r"""
    full_gradient_debug(igrid, ogrid, ivalues, elev_gradient, laf_gradient=gridpp::vec2(), downscaler=Nearest) -> FloatVector3

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &
    elev_gradient: gridpp::vec2 const &
    laf_gradient: gridpp::vec2 const &
    downscaler: enum gridpp::Downscaler

    """
    return _gridpp.full_gradient_debug(*args)

def smart(igrid, ogrid, ivalues, num, structure):
    r"""
    smart(igrid, ogrid, ivalues, num, structure) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    ivalues: gridpp::vec2 const &
    num: int
    structure: gridpp::StructureFunction const &

    """
    return _gridpp.smart(igrid, ogrid, ivalues, num, structure)

def count(*args):
    r"""
    count(grid, points, radius) -> FloatVector

    Parameters
    ----------
    grid: gridpp::Grid const &
    points: gridpp::Points const &
    radius: float

    count(igrid, ogrid, radius) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    radius: float

    count(points, grid, radius) -> FloatVector2

    Parameters
    ----------
    points: gridpp::Points const &
    grid: gridpp::Grid const &
    radius: float

    count(ipoints, opoints, radius) -> FloatVector

    Parameters
    ----------
    ipoints: gridpp::Points const &
    opoints: gridpp::Points const &
    radius: float

    """
    return _gridpp.count(*args)

def distance(*args):
    r"""
    distance(grid, points, num=1) -> FloatVector

    Parameters
    ----------
    grid: gridpp::Grid const &
    points: gridpp::Points const &
    num: int

    distance(igrid, ogrid, num=1) -> FloatVector2

    Parameters
    ----------
    igrid: gridpp::Grid const &
    ogrid: gridpp::Grid const &
    num: int

    distance(points, grid, num=1) -> FloatVector2

    Parameters
    ----------
    points: gridpp::Points const &
    grid: gridpp::Grid const &
    num: int

    distance(ipoints, opoint, num=1) -> FloatVector

    Parameters
    ----------
    ipoints: gridpp::Points const &
    opoint: gridpp::Points const &
    num: int

    """
    return _gridpp.distance(*args)

def fill_missing(values):
    r"""
    fill_missing(values) -> FloatVector2

    Parameters
    ----------
    values: gridpp::vec2 const &

    """
    return _gridpp.fill_missing(values)

def gridding(*args):
    r"""
    gridding(grid, points, values, radius, min_num, statistic) -> FloatVector2

    Parameters
    ----------
    grid: gridpp::Grid const &
    points: gridpp::Points const &
    values: gridpp::vec const &
    radius: float
    min_num: int
    statistic: enum gridpp::Statistic

    gridding(opoints, ipoints, values, radius, min_num, statistic) -> FloatVector

    Parameters
    ----------
    opoints: gridpp::Points const &
    ipoints: gridpp::Points const &
    values: gridpp::vec const &
    radius: float
    min_num: int
    statistic: enum gridpp::Statistic

    """
    return _gridpp.gridding(*args)

def gridding_nearest(*args):
    r"""
    gridding_nearest(grid, points, values, min_num, statistic) -> FloatVector2

    Parameters
    ----------
    grid: gridpp::Grid const &
    points: gridpp::Points const &
    values: gridpp::vec const &
    min_num: int
    statistic: enum gridpp::Statistic

    gridding_nearest(opoints, ipoints, values, min_num, statistic) -> FloatVector

    Parameters
    ----------
    opoints: gridpp::Points const &
    ipoints: gridpp::Points const &
    values: gridpp::vec const &
    min_num: int
    statistic: enum gridpp::Statistic

    """
    return _gridpp.gridding_nearest(*args)

def neighbourhood_score(grid, points, fcst, ref, half_width, metric, threshold):
    r"""
    neighbourhood_score(grid, points, fcst, ref, half_width, metric, threshold) -> FloatVector2

    Parameters
    ----------
    grid: gridpp::Grid const &
    points: gridpp::Points const &
    fcst: gridpp::vec2 const &
    ref: gridpp::vec const &
    half_width: int
    metric: enum gridpp::Metric
    threshold: float

    """
    return _gridpp.neighbourhood_score(grid, points, fcst, ref, half_width, metric, threshold)

def dewpoint(*args):
    r"""
    dewpoint(temperature, relative_humidity) -> float

    Parameters
    ----------
    temperature: float
    relative_humidity: float

    dewpoint(temperature, relative_humidity) -> FloatVector

    Parameters
    ----------
    temperature: gridpp::vec const &
    relative_humidity: gridpp::vec const &

    """
    return _gridpp.dewpoint(*args)

def pressure(*args):
    r"""
    pressure(ielev, oelev, ipressure, itemperature=288.15) -> float

    Parameters
    ----------
    ielev: float
    oelev: float
    ipressure: float
    itemperature: float

    pressure(ielev, oelev, ipressure, itemperature) -> FloatVector

    Parameters
    ----------
    ielev: gridpp::vec const &
    oelev: gridpp::vec const &
    ipressure: gridpp::vec const &
    itemperature: gridpp::vec const &

    """
    return _gridpp.pressure(*args)

def sea_level_pressure(*args):
    r"""
    sea_level_pressure(ps, altitude, temperature, rh=MV, dewpoint=MV) -> float

    Parameters
    ----------
    ps: float
    altitude: float
    temperature: float
    rh: float
    dewpoint: float

    sea_level_pressure(ps, altitude, temperature, rh, dewpoint) -> FloatVector

    Parameters
    ----------
    ps: gridpp::vec const &
    altitude: gridpp::vec const &
    temperature: gridpp::vec const &
    rh: gridpp::vec const &
    dewpoint: gridpp::vec const &

    """
    return _gridpp.sea_level_pressure(*args)

def qnh(*args):
    r"""
    qnh(pressure, altitude) -> float

    Parameters
    ----------
    pressure: float
    altitude: float

    qnh(pressure, altitude) -> FloatVector

    Parameters
    ----------
    pressure: gridpp::vec const &
    altitude: gridpp::vec const &

    """
    return _gridpp.qnh(*args)

def relative_humidity(*args):
    r"""
    relative_humidity(temperature, dewpoint) -> float

    Parameters
    ----------
    temperature: float
    dewpoint: float

    relative_humidity(temperature, dewpoint) -> FloatVector

    Parameters
    ----------
    temperature: gridpp::vec const &
    dewpoint: gridpp::vec const &

    """
    return _gridpp.relative_humidity(*args)

def wetbulb(*args):
    r"""
    wetbulb(temperature, pressure, relative_humidity) -> float

    Parameters
    ----------
    temperature: float
    pressure: float
    relative_humidity: float

    wetbulb(temperature, pressure, relative_humidity) -> FloatVector

    Parameters
    ----------
    temperature: gridpp::vec const &
    pressure: gridpp::vec const &
    relative_humidity: gridpp::vec const &

    """
    return _gridpp.wetbulb(*args)

def wind_speed(*args):
    r"""
    wind_speed(xwind, ywind) -> float

    Parameters
    ----------
    xwind: float
    ywind: float

    wind_speed(xwind, ywind) -> FloatVector

    Parameters
    ----------
    xwind: gridpp::vec const &
    ywind: gridpp::vec const &

    """
    return _gridpp.wind_speed(*args)

def wind_direction(*args):
    r"""
    wind_direction(xwind, ywind) -> float

    Parameters
    ----------
    xwind: float
    ywind: float

    wind_direction(xwind, ywind) -> FloatVector

    Parameters
    ----------
    xwind: gridpp::vec const &
    ywind: gridpp::vec const &

    """
    return _gridpp.wind_direction(*args)

def set_omp_threads(num):
    r"""
    set_omp_threads(num)

    Parameters
    ----------
    num: int

    """
    return _gridpp.set_omp_threads(num)

def get_omp_threads():
    r"""get_omp_threads() -> int"""
    return _gridpp.get_omp_threads()

def initialize_omp():
    r"""initialize_omp()"""
    return _gridpp.initialize_omp()

def set_debug_level(level):
    r"""
    set_debug_level(level)

    Parameters
    ----------
    level: int

    """
    return _gridpp.set_debug_level(level)

def get_debug_level():
    r"""get_debug_level() -> int"""
    return _gridpp.get_debug_level()

def get_statistic(name):
    r"""
    get_statistic(name) -> gridpp::Statistic

    Parameters
    ----------
    name: std::string

    """
    return _gridpp.get_statistic(name)

def version():
    r"""version() -> std::string"""
    return _gridpp.version()

def clock():
    r"""clock() -> double"""
    return _gridpp.clock()

def debug(string):
    r"""
    debug(string)

    Parameters
    ----------
    string: std::string

    """
    return _gridpp.debug(string)

def warning(string):
    r"""
    warning(string)

    Parameters
    ----------
    string: std::string

    """
    return _gridpp.warning(string)

def error(string):
    r"""
    error(string)

    Parameters
    ----------
    string: std::string

    """
    return _gridpp.error(string)

def future_deprecation_warning(*args):
    r"""
    future_deprecation_warning(function, other="")

    Parameters
    ----------
    function: std::string
    other: std::string

    """
    return _gridpp.future_deprecation_warning(*args)

def is_valid(value):
    r"""
    is_valid(value) -> bool

    Parameters
    ----------
    value: float

    """
    return _gridpp.is_valid(value)

def calc_statistic(*args):
    r"""
    calc_statistic(array, statistic) -> float

    Parameters
    ----------
    array: gridpp::vec const &
    statistic: enum gridpp::Statistic

    calc_statistic(array, statistic) -> FloatVector

    Parameters
    ----------
    array: gridpp::vec2 const &
    statistic: enum gridpp::Statistic

    """
    return _gridpp.calc_statistic(*args)

def calc_quantile(*args):
    r"""
    calc_quantile(array, quantile_level) -> float

    Parameters
    ----------
    array: gridpp::vec const &
    quantile_level: float

    calc_quantile(array, quantile=MV) -> FloatVector

    Parameters
    ----------
    array: gridpp::vec2 const &
    quantile: float

    calc_quantile(array, quantile_levels) -> FloatVector2

    Parameters
    ----------
    array: gridpp::vec3 const &
    quantile_levels: gridpp::vec2 const &

    """
    return _gridpp.calc_quantile(*args)

def convert_coordinates(*args):
    r"""
    convert_coordinates(lats, lons, type) -> bool

    Parameters
    ----------
    lats: gridpp::vec const &
    lons: gridpp::vec const &
    type: enum gridpp::CoordinateType

    convert_coordinates(lat, lon, type) -> bool

    Parameters
    ----------
    lat: float
    lon: float
    type: enum gridpp::CoordinateType

    """
    return _gridpp.convert_coordinates(*args)

def is_valid_lat(lat, type):
    r"""
    is_valid_lat(lat, type) -> bool

    Parameters
    ----------
    lat: float
    type: enum gridpp::CoordinateType

    """
    return _gridpp.is_valid_lat(lat, type)

def is_valid_lon(lon, type):
    r"""
    is_valid_lon(lon, type) -> bool

    Parameters
    ----------
    lon: float
    type: enum gridpp::CoordinateType

    """
    return _gridpp.is_valid_lon(lon, type)

def num_missing_values(iArray):
    r"""
    num_missing_values(iArray) -> int

    Parameters
    ----------
    iArray: gridpp::vec2 const &

    """
    return _gridpp.num_missing_values(iArray)

def get_lower_index(iX, iValues):
    r"""
    get_lower_index(iX, iValues) -> int

    Parameters
    ----------
    iX: float
    iValues: gridpp::vec const &

    """
    return _gridpp.get_lower_index(iX, iValues)

def get_upper_index(iX, iValues):
    r"""
    get_upper_index(iX, iValues) -> int

    Parameters
    ----------
    iX: float
    iValues: gridpp::vec const &

    """
    return _gridpp.get_upper_index(iX, iValues)

def interpolate(*args):
    r"""
    interpolate(x, iX, iY) -> float

    Parameters
    ----------
    x: float
    iX: gridpp::vec const &
    iY: gridpp::vec const &

    interpolate(x, iX, iY) -> FloatVector

    Parameters
    ----------
    x: gridpp::vec const &
    iX: gridpp::vec const &
    iY: gridpp::vec const &

    """
    return _gridpp.interpolate(*args)

def init_ivec2(Y, X, value):
    r"""
    init_ivec2(Y, X, value) -> IntVector2

    Parameters
    ----------
    Y: int
    X: int
    value: int

    """
    return _gridpp.init_ivec2(Y, X, value)

def init_vec2(*args):
    r"""
    init_vec2(Y, X, value=MV) -> FloatVector2

    Parameters
    ----------
    Y: int
    X: int
    value: float

    """
    return _gridpp.init_vec2(*args)

def init_ivec3(Y, X, E, value):
    r"""
    init_ivec3(Y, X, E, value) -> gridpp::ivec3

    Parameters
    ----------
    Y: int
    X: int
    E: int
    value: int

    """
    return _gridpp.init_ivec3(Y, X, E, value)

def init_vec3(*args):
    r"""
    init_vec3(Y, X, E, value=MV) -> FloatVector3

    Parameters
    ----------
    Y: int
    X: int
    E: int
    value: float

    """
    return _gridpp.init_vec3(*args)

def calc_even_quantiles(values, num):
    r"""
    calc_even_quantiles(values, num) -> FloatVector

    Parameters
    ----------
    values: gridpp::vec const &
    num: int

    """
    return _gridpp.calc_even_quantiles(values, num)

def window(array, length, statistic, before=False, keep_missing=False, missing_edges=True):
    r"""
    window(array, length, statistic, before=False, keep_missing=False, missing_edges=True) -> FloatVector2

    Parameters
    ----------
    array: gridpp::vec2 const &
    length: int
    statistic: enum gridpp::Statistic
    before: bool
    keep_missing: bool
    missing_edges: bool

    """
    return _gridpp.window(array, length, statistic, before, keep_missing, missing_edges)

def compatible_size(*args):
    r"""
    compatible_size(grid, v) -> bool

    Parameters
    ----------
    grid: gridpp::Grid const &
    v: gridpp::vec2 const &

    compatible_size(grid, v) -> bool

    Parameters
    ----------
    grid: gridpp::Grid const &
    v: gridpp::vec3 const &

    compatible_size(points, v) -> bool

    Parameters
    ----------
    points: gridpp::Points const &
    v: gridpp::vec const &

    compatible_size(points, v) -> bool

    Parameters
    ----------
    points: gridpp::Points const &
    v: gridpp::vec2 const &

    compatible_size(a, b) -> bool

    Parameters
    ----------
    a: gridpp::vec2 const &
    b: gridpp::vec2 const &

    compatible_size(a, b) -> bool

    Parameters
    ----------
    a: gridpp::vec2 const &
    b: gridpp::vec3 const &

    compatible_size(a, b) -> bool

    Parameters
    ----------
    a: gridpp::vec3 const &
    b: gridpp::vec3 const &

    """
    return _gridpp.compatible_size(*args)

def point_in_rectangle(A, B, C, D, m):
    r"""
    point_in_rectangle(A, B, C, D, m) -> bool

    Parameters
    ----------
    A: gridpp::Point const &
    B: gridpp::Point const &
    C: gridpp::Point const &
    D: gridpp::Point const &
    m: gridpp::Point const &

    """
    return _gridpp.point_in_rectangle(A, B, C, D, m)

def test_array(v):
    r"""
    test_array(v) -> float *

    Parameters
    ----------
    v: float *

    """
    return _gridpp.test_array(v)

def test_vec_input(input):
    r"""
    test_vec_input(input) -> float

    Parameters
    ----------
    input: gridpp::vec const &

    """
    return _gridpp.test_vec_input(input)

def test_ivec_input(input):
    r"""
    test_ivec_input(input) -> int

    Parameters
    ----------
    input: gridpp::ivec const &

    """
    return _gridpp.test_ivec_input(input)

def test_vec2_input(input):
    r"""
    test_vec2_input(input) -> float

    Parameters
    ----------
    input: gridpp::vec2 const &

    """
    return _gridpp.test_vec2_input(input)

def test_vec3_input(input):
    r"""
    test_vec3_input(input) -> float

    Parameters
    ----------
    input: gridpp::vec3 const &

    """
    return _gridpp.test_vec3_input(input)

def test_vec_output():
    r"""test_vec_output() -> FloatVector"""
    return _gridpp.test_vec_output()

def test_ivec_output():
    r"""test_ivec_output() -> IntVector"""
    return _gridpp.test_ivec_output()

def test_vec2_output():
    r"""test_vec2_output() -> FloatVector2"""
    return _gridpp.test_vec2_output()

def test_ivec2_output():
    r"""test_ivec2_output() -> IntVector2"""
    return _gridpp.test_ivec2_output()

def test_vec3_output():
    r"""test_vec3_output() -> FloatVector3"""
    return _gridpp.test_vec3_output()

def test_ivec3_output():
    r"""test_ivec3_output() -> gridpp::ivec3"""
    return _gridpp.test_ivec3_output()

def test_vec_argout():
    r"""test_vec_argout() -> float"""
    return _gridpp.test_vec_argout()

def test_vec2_argout():
    r"""test_vec2_argout() -> float"""
    return _gridpp.test_vec2_argout()

def test_not_implemented_exception():
    r"""test_not_implemented_exception()"""
    return _gridpp.test_not_implemented_exception()

def test_args_for_R(bpoints, structure, background):
    r"""
    test_args_for_R(bpoints, structure, background) -> FloatVector2

    Parameters
    ----------
    bpoints: gridpp::Points const &
    structure: gridpp::StructureFunction const &
    background: gridpp::vec2 const &

    """
    return _gridpp.test_args_for_R(bpoints, structure, background)

def test_args_for_R_1(structure):
    r"""
    test_args_for_R_1(structure)

    Parameters
    ----------
    structure: gridpp::StructureFunction const &

    """
    return _gridpp.test_args_for_R_1(structure)
class Point(object):
    r"""Proxy of C++ gridpp::Point class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, lat, lon, elev=MV, laf=MV, type=Geodetic) -> Point

        Parameters
        ----------
        lat: float
        lon: float
        elev: float
        laf: float
        type: enum gridpp::CoordinateType

        __init__(self, lat, lon, elev, laf, type, x, y, z) -> Point

        Parameters
        ----------
        lat: float
        lon: float
        elev: float
        laf: float
        type: enum gridpp::CoordinateType
        x: float
        y: float
        z: float

        """
        _gridpp.Point_swiginit(self, _gridpp.new_Point(*args))
    lat = property(_gridpp.Point_lat_get, _gridpp.Point_lat_set, doc=r"""lat""")
    lon = property(_gridpp.Point_lon_get, _gridpp.Point_lon_set, doc=r"""lon""")
    elev = property(_gridpp.Point_elev_get, _gridpp.Point_elev_set, doc=r"""elev""")
    laf = property(_gridpp.Point_laf_get, _gridpp.Point_laf_set, doc=r"""laf""")
    type = property(_gridpp.Point_type_get, _gridpp.Point_type_set, doc=r"""type""")
    x = property(_gridpp.Point_x_get, _gridpp.Point_x_set, doc=r"""x""")
    y = property(_gridpp.Point_y_get, _gridpp.Point_y_set, doc=r"""y""")
    z = property(_gridpp.Point_z_get, _gridpp.Point_z_set, doc=r"""z""")
    __swig_destroy__ = _gridpp.delete_Point

# Register Point in _gridpp:
_gridpp.Point_swigregister(Point)
cvar = _gridpp.cvar
MV = cvar.MV
MV_CML = cvar.MV_CML
pi = cvar.pi
radius_earth = cvar.radius_earth
lapse_rate = cvar.lapse_rate
standard_surface_temperature = cvar.standard_surface_temperature
gravit = cvar.gravit
molar_mass = cvar.molar_mass
gas_constant_mol = cvar.gas_constant_mol
gas_constant_si = cvar.gas_constant_si
swig_default_value = cvar.swig_default_value

class KDTree(object):
    r"""Proxy of C++ gridpp::KDTree class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, lats, lons, type=Geodetic) -> KDTree

        Parameters
        ----------
        lats: gridpp::vec
        lons: gridpp::vec
        type: enum gridpp::CoordinateType

        __init__(self, other) -> KDTree

        Parameters
        ----------
        other: gridpp::KDTree const &

        __init__(self, type=Geodetic) -> KDTree

        Parameters
        ----------
        type: enum gridpp::CoordinateType

        """
        _gridpp.KDTree_swiginit(self, _gridpp.new_KDTree(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        r"""
        get_nearest_neighbour(self, lat, lon, include_match=True) -> int

        Parameters
        ----------
        lat: float
        lon: float
        include_match: bool

        """
        return _gridpp.KDTree_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours(self, lat, lon, radius, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.KDTree_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours_with_distance(self, lat, lon, radius, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.KDTree_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_num_neighbours(self, lat, lon, radius, include_match=True) -> int

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.KDTree_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        r"""
        get_closest_neighbours(self, lat, lon, num, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        num: int
        include_match: bool

        """
        return _gridpp.KDTree_get_closest_neighbours(self, lat, lon, num, include_match)

    @staticmethod
    def deg2rad(deg):
        r"""
        deg2rad(deg) -> float

        Parameters
        ----------
        deg: float

        """
        return _gridpp.KDTree_deg2rad(deg)

    @staticmethod
    def rad2deg(deg):
        r"""
        rad2deg(deg) -> float

        Parameters
        ----------
        deg: float

        """
        return _gridpp.KDTree_rad2deg(deg)

    @staticmethod
    def calc_distance(*args):
        r"""
        calc_distance(lat1, lon1, lat2, lon2, type=Geodetic) -> float

        Parameters
        ----------
        lat1: float
        lon1: float
        lat2: float
        lon2: float
        type: enum gridpp::CoordinateType

        calc_distance(p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        """
        return _gridpp.KDTree_calc_distance(*args)

    @staticmethod
    def calc_straight_distance(*args):
        r"""
        calc_straight_distance(x0, y0, z0, x1, y1, z1) -> float

        Parameters
        ----------
        x0: float
        y0: float
        z0: float
        x1: float
        y1: float
        z1: float

        calc_straight_distance(p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        """
        return _gridpp.KDTree_calc_straight_distance(*args)

    @staticmethod
    def calc_distance_fast(*args):
        r"""
        calc_distance_fast(lat1, lon1, lat2, lon2, type=Geodetic) -> float

        Parameters
        ----------
        lat1: float
        lon1: float
        lat2: float
        lon2: float
        type: enum gridpp::CoordinateType

        """
        return _gridpp.KDTree_calc_distance_fast(*args)

    def get_lats(self):
        r"""get_lats(self) -> FloatVector"""
        return _gridpp.KDTree_get_lats(self)

    def get_lons(self):
        r"""get_lons(self) -> FloatVector"""
        return _gridpp.KDTree_get_lons(self)

    def size(self):
        r"""size(self) -> int"""
        return _gridpp.KDTree_size(self)

    def get_coordinate_type(self):
        r"""get_coordinate_type(self) -> gridpp::CoordinateType"""
        return _gridpp.KDTree_get_coordinate_type(self)

    def get_x(self):
        r"""get_x(self) -> FloatVector"""
        return _gridpp.KDTree_get_x(self)

    def get_y(self):
        r"""get_y(self) -> FloatVector"""
        return _gridpp.KDTree_get_y(self)

    def get_z(self):
        r"""get_z(self) -> FloatVector"""
        return _gridpp.KDTree_get_z(self)
    __swig_destroy__ = _gridpp.delete_KDTree

# Register KDTree in _gridpp:
_gridpp.KDTree_swigregister(KDTree)

def KDTree_deg2rad(deg):
    r"""
    KDTree_deg2rad(deg) -> float

    Parameters
    ----------
    deg: float

    """
    return _gridpp.KDTree_deg2rad(deg)

def KDTree_rad2deg(deg):
    r"""
    KDTree_rad2deg(deg) -> float

    Parameters
    ----------
    deg: float

    """
    return _gridpp.KDTree_rad2deg(deg)

def KDTree_calc_distance(*args):
    r"""
    KDTree_calc_distance(lat1, lon1, lat2, lon2, type=Geodetic) -> float

    Parameters
    ----------
    lat1: float
    lon1: float
    lat2: float
    lon2: float
    type: enum gridpp::CoordinateType

    KDTree_calc_distance(p1, p2) -> float

    Parameters
    ----------
    p1: gridpp::Point const &
    p2: gridpp::Point const &

    """
    return _gridpp.KDTree_calc_distance(*args)

def KDTree_calc_straight_distance(*args):
    r"""
    KDTree_calc_straight_distance(x0, y0, z0, x1, y1, z1) -> float

    Parameters
    ----------
    x0: float
    y0: float
    z0: float
    x1: float
    y1: float
    z1: float

    KDTree_calc_straight_distance(p1, p2) -> float

    Parameters
    ----------
    p1: gridpp::Point const &
    p2: gridpp::Point const &

    """
    return _gridpp.KDTree_calc_straight_distance(*args)

def KDTree_calc_distance_fast(*args):
    r"""
    KDTree_calc_distance_fast(lat1, lon1, lat2, lon2, type=Geodetic) -> float

    Parameters
    ----------
    lat1: float
    lon1: float
    lat2: float
    lon2: float
    type: enum gridpp::CoordinateType

    """
    return _gridpp.KDTree_calc_distance_fast(*args)

class Points(object):
    r"""Proxy of C++ gridpp::Points class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Points
        __init__(self, lats, lons, elevs=gridpp::vec(), lafs=gridpp::vec(), type=Geodetic) -> Points

        Parameters
        ----------
        lats: gridpp::vec
        lons: gridpp::vec
        elevs: gridpp::vec
        lafs: gridpp::vec
        type: enum gridpp::CoordinateType

        __init__(self, tree, elevs=gridpp::vec(), lafs=gridpp::vec()) -> Points

        Parameters
        ----------
        tree: gridpp::KDTree
        elevs: gridpp::vec
        lafs: gridpp::vec

        __init__(self, other) -> Points

        Parameters
        ----------
        other: gridpp::Points const &

        """
        _gridpp.Points_swiginit(self, _gridpp.new_Points(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        r"""
        get_nearest_neighbour(self, lat, lon, include_match=True) -> int

        Parameters
        ----------
        lat: float
        lon: float
        include_match: bool

        """
        return _gridpp.Points_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours(self, lat, lon, radius, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Points_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours_with_distance(self, lat, lon, radius, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Points_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_num_neighbours(self, lat, lon, radius, include_match=True) -> int

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Points_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        r"""
        get_closest_neighbours(self, lat, lon, num, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        num: int
        include_match: bool

        """
        return _gridpp.Points_get_closest_neighbours(self, lat, lon, num, include_match)

    def get_lats(self):
        r"""get_lats(self) -> FloatVector"""
        return _gridpp.Points_get_lats(self)

    def get_lons(self):
        r"""get_lons(self) -> FloatVector"""
        return _gridpp.Points_get_lons(self)

    def get_elevs(self):
        r"""get_elevs(self) -> FloatVector"""
        return _gridpp.Points_get_elevs(self)

    def get_lafs(self):
        r"""get_lafs(self) -> FloatVector"""
        return _gridpp.Points_get_lafs(self)

    def size(self):
        r"""size(self) -> int"""
        return _gridpp.Points_size(self)

    def get_in_domain_indices(self, grid):
        r"""
        get_in_domain_indices(self, grid) -> IntVector

        Parameters
        ----------
        grid: gridpp::Grid const &

        """
        return _gridpp.Points_get_in_domain_indices(self, grid)

    def get_in_domain(self, grid):
        r"""
        get_in_domain(self, grid) -> Points

        Parameters
        ----------
        grid: gridpp::Grid const &

        """
        return _gridpp.Points_get_in_domain(self, grid)

    def get_coordinate_type(self):
        r"""get_coordinate_type(self) -> gridpp::CoordinateType"""
        return _gridpp.Points_get_coordinate_type(self)

    def get_point(self, index):
        r"""
        get_point(self, index) -> Point

        Parameters
        ----------
        index: int

        """
        return _gridpp.Points_get_point(self, index)

    def subset(self, indices):
        r"""
        subset(self, indices) -> Points

        Parameters
        ----------
        indices: gridpp::ivec const &

        """
        return _gridpp.Points_subset(self, indices)
    __swig_destroy__ = _gridpp.delete_Points

# Register Points in _gridpp:
_gridpp.Points_swigregister(Points)

class Grid(object):
    r"""Proxy of C++ gridpp::Grid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Grid
        __init__(self, lats, lons, elevs=gridpp::vec2(), lafs=gridpp::vec2(), type=Geodetic) -> Grid

        Parameters
        ----------
        lats: gridpp::vec2
        lons: gridpp::vec2
        elevs: gridpp::vec2
        lafs: gridpp::vec2
        type: enum gridpp::CoordinateType

        """
        _gridpp.Grid_swiginit(self, _gridpp.new_Grid(*args))

    def get_nearest_neighbour(self, lat, lon, include_match=True):
        r"""
        get_nearest_neighbour(self, lat, lon, include_match=True) -> IntVector

        Parameters
        ----------
        lat: float
        lon: float
        include_match: bool

        """
        return _gridpp.Grid_get_nearest_neighbour(self, lat, lon, include_match)

    def get_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours(self, lat, lon, radius, include_match=True) -> IntVector2

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Grid_get_neighbours(self, lat, lon, radius, include_match)

    def get_neighbours_with_distance(self, lat, lon, radius, include_match=True):
        r"""
        get_neighbours_with_distance(self, lat, lon, radius, include_match=True) -> IntVector2

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Grid_get_neighbours_with_distance(self, lat, lon, radius, include_match)

    def get_num_neighbours(self, lat, lon, radius, include_match=True):
        r"""
        get_num_neighbours(self, lat, lon, radius, include_match=True) -> int

        Parameters
        ----------
        lat: float
        lon: float
        radius: float
        include_match: bool

        """
        return _gridpp.Grid_get_num_neighbours(self, lat, lon, radius, include_match)

    def get_closest_neighbours(self, lat, lon, num, include_match=True):
        r"""
        get_closest_neighbours(self, lat, lon, num, include_match=True) -> IntVector2

        Parameters
        ----------
        lat: float
        lon: float
        num: int
        include_match: bool

        """
        return _gridpp.Grid_get_closest_neighbours(self, lat, lon, num, include_match)

    def get_box(self, lat, lon):
        r"""
        get_box(self, lat, lon) -> bool

        Parameters
        ----------
        lat: float
        lon: float

        """
        return _gridpp.Grid_get_box(self, lat, lon)

    def to_points(self):
        r"""to_points(self) -> Points"""
        return _gridpp.Grid_to_points(self)

    def get_lats(self):
        r"""get_lats(self) -> FloatVector2"""
        return _gridpp.Grid_get_lats(self)

    def get_lons(self):
        r"""get_lons(self) -> FloatVector2"""
        return _gridpp.Grid_get_lons(self)

    def get_elevs(self):
        r"""get_elevs(self) -> FloatVector2"""
        return _gridpp.Grid_get_elevs(self)

    def get_lafs(self):
        r"""get_lafs(self) -> FloatVector2"""
        return _gridpp.Grid_get_lafs(self)

    def size(self):
        r"""size(self) -> IntVector"""
        return _gridpp.Grid_size(self)

    def get_coordinate_type(self):
        r"""get_coordinate_type(self) -> gridpp::CoordinateType"""
        return _gridpp.Grid_get_coordinate_type(self)

    def get_point(self, y_index, x_index):
        r"""
        get_point(self, y_index, x_index) -> Point

        Parameters
        ----------
        y_index: int
        x_index: int

        """
        return _gridpp.Grid_get_point(self, y_index, x_index)
    __swig_destroy__ = _gridpp.delete_Grid

# Register Grid in _gridpp:
_gridpp.Grid_swigregister(Grid)

class not_implemented_exception(object):
    r"""Proxy of C++ gridpp::not_implemented_exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> not_implemented_exception"""
        _gridpp.not_implemented_exception_swiginit(self, _gridpp.new_not_implemented_exception())
    __swig_destroy__ = _gridpp.delete_not_implemented_exception

# Register not_implemented_exception in _gridpp:
_gridpp.not_implemented_exception_swigregister(not_implemented_exception)

class StructureFunction(object):
    r"""Proxy of C++ gridpp::StructureFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.StructureFunction_corr(self, *args)

    def corr_background(self, *args):
        r"""
        corr_background(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr_background(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.StructureFunction_corr_background(self, *args)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.StructureFunction_localization_distance(self, p)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.StructureFunction_clone(self)
    __swig_destroy__ = _gridpp.delete_StructureFunction

# Register StructureFunction in _gridpp:
_gridpp.StructureFunction_swigregister(StructureFunction)
StructureFunction.default_min_rho = _gridpp.cvar.StructureFunction_default_min_rho

class MultipleStructure(StructureFunction):
    r"""Proxy of C++ gridpp::MultipleStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, structure_h, structure_v, structure_w):
        r"""
        __init__(self, structure_h, structure_v, structure_w) -> MultipleStructure

        Parameters
        ----------
        structure_h: gridpp::StructureFunction const &
        structure_v: gridpp::StructureFunction const &
        structure_w: gridpp::StructureFunction const &

        """
        _gridpp.MultipleStructure_swiginit(self, _gridpp.new_MultipleStructure(structure_h, structure_v, structure_w))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.MultipleStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.MultipleStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.MultipleStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_MultipleStructure

# Register MultipleStructure in _gridpp:
_gridpp.MultipleStructure_swigregister(MultipleStructure)

class BarnesStructure(StructureFunction):
    r"""Proxy of C++ gridpp::BarnesStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, h, v=0, w=0, hmax=MV) -> BarnesStructure

        Parameters
        ----------
        h: float
        v: float
        w: float
        hmax: float

        __init__(self, grid, h, v, w, min_rho=default_min_rho) -> BarnesStructure

        Parameters
        ----------
        grid: gridpp::Grid
        h: gridpp::vec2
        v: gridpp::vec2
        w: gridpp::vec2
        min_rho: float

        """
        _gridpp.BarnesStructure_swiginit(self, _gridpp.new_BarnesStructure(*args))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.BarnesStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.BarnesStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.BarnesStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_BarnesStructure

# Register BarnesStructure in _gridpp:
_gridpp.BarnesStructure_swigregister(BarnesStructure)

class SoarStructure(StructureFunction):
    r"""Proxy of C++ gridpp::SoarStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, h, v=0, w=0, hmax=MV) -> SoarStructure

        Parameters
        ----------
        h: float
        v: float
        w: float
        hmax: float

        __init__(self, grid, h, v, w, min_rho=default_min_rho) -> SoarStructure

        Parameters
        ----------
        grid: gridpp::Grid
        h: gridpp::vec2
        v: gridpp::vec2
        w: gridpp::vec2
        min_rho: float

        """
        _gridpp.SoarStructure_swiginit(self, _gridpp.new_SoarStructure(*args))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.SoarStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.SoarStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.SoarStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_SoarStructure

# Register SoarStructure in _gridpp:
_gridpp.SoarStructure_swigregister(SoarStructure)

class ToarStructure(StructureFunction):
    r"""Proxy of C++ gridpp::ToarStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, h, v=0, w=0, hmax=MV) -> ToarStructure

        Parameters
        ----------
        h: float
        v: float
        w: float
        hmax: float

        __init__(self, grid, h, v, w, min_rho=default_min_rho) -> ToarStructure

        Parameters
        ----------
        grid: gridpp::Grid
        h: gridpp::vec2
        v: gridpp::vec2
        w: gridpp::vec2
        min_rho: float

        """
        _gridpp.ToarStructure_swiginit(self, _gridpp.new_ToarStructure(*args))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.ToarStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.ToarStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.ToarStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_ToarStructure

# Register ToarStructure in _gridpp:
_gridpp.ToarStructure_swigregister(ToarStructure)

class PowerlawStructure(StructureFunction):
    r"""Proxy of C++ gridpp::PowerlawStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, h, v=0, w=0, hmax=MV) -> PowerlawStructure

        Parameters
        ----------
        h: float
        v: float
        w: float
        hmax: float

        __init__(self, grid, h, v, w, min_rho=default_min_rho) -> PowerlawStructure

        Parameters
        ----------
        grid: gridpp::Grid
        h: gridpp::vec2
        v: gridpp::vec2
        w: gridpp::vec2
        min_rho: float

        """
        _gridpp.PowerlawStructure_swiginit(self, _gridpp.new_PowerlawStructure(*args))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.PowerlawStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.PowerlawStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.PowerlawStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_PowerlawStructure

# Register PowerlawStructure in _gridpp:
_gridpp.PowerlawStructure_swigregister(PowerlawStructure)

class LinearStructure(StructureFunction):
    r"""Proxy of C++ gridpp::LinearStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, h, v=0, w=0, hmax=MV) -> LinearStructure

        Parameters
        ----------
        h: float
        v: float
        w: float
        hmax: float

        __init__(self, grid, h, v, w, min_rho=default_min_rho) -> LinearStructure

        Parameters
        ----------
        grid: gridpp::Grid
        h: gridpp::vec2
        v: gridpp::vec2
        w: gridpp::vec2
        min_rho: float

        """
        _gridpp.LinearStructure_swiginit(self, _gridpp.new_LinearStructure(*args))

    def corr(self, *args):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.LinearStructure_corr(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.LinearStructure_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.LinearStructure_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_LinearStructure

# Register LinearStructure in _gridpp:
_gridpp.LinearStructure_swigregister(LinearStructure)

class CressmanStructure(StructureFunction):
    r"""Proxy of C++ gridpp::CressmanStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h, v=0, w=0):
        r"""
        __init__(self, h, v=0, w=0) -> CressmanStructure

        Parameters
        ----------
        h: float
        v: float
        w: float

        """
        _gridpp.CressmanStructure_swiginit(self, _gridpp.new_CressmanStructure(h, v, w))

    def corr(self, p1, p2):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        """
        return _gridpp.CressmanStructure_corr(self, p1, p2)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.CressmanStructure_clone(self)
    __swig_destroy__ = _gridpp.delete_CressmanStructure

# Register CressmanStructure in _gridpp:
_gridpp.CressmanStructure_swigregister(CressmanStructure)

class CrossValidation(StructureFunction):
    r"""Proxy of C++ gridpp::CrossValidation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, structure, dist):
        r"""
        __init__(self, structure, dist) -> CrossValidation

        Parameters
        ----------
        structure: gridpp::StructureFunction &
        dist: float

        """
        _gridpp.CrossValidation_swiginit(self, _gridpp.new_CrossValidation(structure, dist))

    def corr(self, p1, p2):
        r"""
        corr(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        """
        return _gridpp.CrossValidation_corr(self, p1, p2)

    def corr_background(self, *args):
        r"""
        corr_background(self, p1, p2) -> float

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: gridpp::Point const &

        corr_background(self, p1, p2) -> FloatVector

        Parameters
        ----------
        p1: gridpp::Point const &
        p2: std::vector< gridpp::Point,std::allocator< gridpp::Point > > const &

        """
        return _gridpp.CrossValidation_corr_background(self, *args)

    def clone(self):
        r"""clone(self) -> gridpp::StructureFunctionPtr"""
        return _gridpp.CrossValidation_clone(self)

    def localization_distance(self, p):
        r"""
        localization_distance(self, p) -> float

        Parameters
        ----------
        p: gridpp::Point const &

        """
        return _gridpp.CrossValidation_localization_distance(self, p)
    __swig_destroy__ = _gridpp.delete_CrossValidation

# Register CrossValidation in _gridpp:
_gridpp.CrossValidation_swigregister(CrossValidation)

class Transform(object):
    r"""Proxy of C++ gridpp::Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        r"""
        forward(self, value) -> float

        Parameters
        ----------
        value: float

        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        """
        return _gridpp.Transform_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, value) -> float

        Parameters
        ----------
        value: float

        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        """
        return _gridpp.Transform_backward(self, *args)

    def __init__(self):
        r"""__init__(self) -> Transform"""
        _gridpp.Transform_swiginit(self, _gridpp.new_Transform())
    __swig_destroy__ = _gridpp.delete_Transform

# Register Transform in _gridpp:
_gridpp.Transform_swigregister(Transform)

class Identity(Transform):
    r"""Proxy of C++ gridpp::Identity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        r"""
        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        forward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Identity_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        backward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Identity_backward(self, *args)

    def __init__(self):
        r"""__init__(self) -> Identity"""
        _gridpp.Identity_swiginit(self, _gridpp.new_Identity())
    __swig_destroy__ = _gridpp.delete_Identity

# Register Identity in _gridpp:
_gridpp.Identity_swigregister(Identity)

class Log(Transform):
    r"""Proxy of C++ gridpp::Log class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def forward(self, *args):
        r"""
        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        forward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Log_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        backward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Log_backward(self, *args)

    def __init__(self):
        r"""__init__(self) -> Log"""
        _gridpp.Log_swiginit(self, _gridpp.new_Log())
    __swig_destroy__ = _gridpp.delete_Log

# Register Log in _gridpp:
_gridpp.Log_swigregister(Log)

class BoxCox(Transform):
    r"""Proxy of C++ gridpp::BoxCox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, threshold):
        r"""
        __init__(self, threshold) -> BoxCox

        Parameters
        ----------
        threshold: float

        """
        _gridpp.BoxCox_swiginit(self, _gridpp.new_BoxCox(threshold))

    def forward(self, *args):
        r"""
        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        forward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.BoxCox_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        backward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.BoxCox_backward(self, *args)
    __swig_destroy__ = _gridpp.delete_BoxCox

# Register BoxCox in _gridpp:
_gridpp.BoxCox_swigregister(BoxCox)

class StartedBoxCox(Transform):
    r"""Proxy of C++ gridpp::StartedBoxCox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, threshold, scaling_factor):
        r"""
        __init__(self, threshold, scaling_factor) -> StartedBoxCox

        Parameters
        ----------
        threshold: float
        scaling_factor: float

        """
        _gridpp.StartedBoxCox_swiginit(self, _gridpp.new_StartedBoxCox(threshold, scaling_factor))

    def forward(self, *args):
        r"""
        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        forward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.StartedBoxCox_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        backward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.StartedBoxCox_backward(self, *args)
    __swig_destroy__ = _gridpp.delete_StartedBoxCox

# Register StartedBoxCox in _gridpp:
_gridpp.StartedBoxCox_swigregister(StartedBoxCox)

class Gamma(Transform):
    r"""Proxy of C++ gridpp::Gamma class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, scale, tolerance=0.01):
        r"""
        __init__(self, shape, scale, tolerance=0.01) -> Gamma

        Parameters
        ----------
        shape: float
        scale: float
        tolerance: float

        """
        _gridpp.Gamma_swiginit(self, _gridpp.new_Gamma(shape, scale, tolerance))

    def forward(self, *args):
        r"""
        forward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        forward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        forward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        forward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Gamma_forward(self, *args)

    def backward(self, *args):
        r"""
        backward(self, input) -> FloatVector

        Parameters
        ----------
        input: gridpp::vec const &

        backward(self, input) -> FloatVector2

        Parameters
        ----------
        input: gridpp::vec2 const &

        backward(self, input) -> FloatVector3

        Parameters
        ----------
        input: gridpp::vec3 const &

        backward(self, value) -> float

        Parameters
        ----------
        value: float

        """
        return _gridpp.Gamma_backward(self, *args)
    __swig_destroy__ = _gridpp.delete_Gamma

# Register Gamma in _gridpp:
_gridpp.Gamma_swigregister(Gamma)



