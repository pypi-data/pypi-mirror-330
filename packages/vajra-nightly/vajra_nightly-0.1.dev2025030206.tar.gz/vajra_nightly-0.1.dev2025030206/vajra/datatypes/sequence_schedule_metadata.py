from dataclasses import dataclass
from typing import Dict, List


@dataclass(frozen=True)
class SequenceScheduleMetadata:
    """Metadata generated by the scheduler for sequence that has been scheduled.
    This is passed to the worker, and the sequence manager is responsible for
    materializing it into a `SequenceMetadata`. The primary difference between the two data structures
    is that, `SequenceMetadata` contains block table, which can be a potentially large object,
    that we wouldn't want to send over wire to the worker.

    Args:
        seq_id: The ID of the request.
        num_q_tokens: The size of the query tokens.
        kvp_group_block_counter: A mapping from group ID to block ID.
        kvp_group_ids: The IDs of the active groups.
    """

    schedule_id: int
    seq_id: str
    num_q_tokens: int
    kvp_group_block_counter: Dict[int, int]
    kvp_group_ids: List[int]

    @property
    def is_kvp_request(self) -> bool:
        """Returns True if the request is a KVP request."""
        return len(self.kvp_group_ids) > 1
