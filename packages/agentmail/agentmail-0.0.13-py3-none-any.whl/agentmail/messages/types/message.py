# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .message_id import MessageId
from .message_thread_id import MessageThreadId
from .message_sent_at import MessageSentAt
import typing
import datetime as dt
import pydantic
import typing_extensions
from .message_from import MessageFrom
from ...core.serialization import FieldMetadata
from .message_subject import MessageSubject
from .message_preview import MessagePreview
from .message_to import MessageTo
from .message_cc import MessageCc
from .message_bcc import MessageBcc
from .message_text import MessageText
from .message_html import MessageHtml
from .message_attachments import MessageAttachments
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Message(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from agentmail.messages import Attachment, Message

    Message(
        message_id="msg_123",
        thread_id="thread_123",
        sent_at=datetime.datetime.fromisoformat(
            "2024-01-15 09:30:00+00:00",
        ),
        received_at=datetime.datetime.fromisoformat(
            "2024-01-15 09:30:00+00:00",
        ),
        from_="alice@example.com",
        reply_to="alice.work@example.com",
        to=["bob@example.com"],
        cc=["charlie@example.com"],
        bcc=["david@example.com"],
        subject="Project Discussion",
        preview="Let's review the timeline for the project.",
        text="Let's review the timeline for the project. How does tomorrow look?",
        html="<p>Let's review the timeline for the project. How does tomorrow look?</p>",
        attachments=[
            Attachment(
                attachment_id="att_123",
                filename="proposal.pdf",
                content_type="application/pdf",
                size=1024,
                inline=False,
            )
        ],
        in_reply_to="msg_122",
        references=["msg_121", "msg_122"],
    )
    """

    message_id: MessageId
    thread_id: MessageThreadId
    sent_at: MessageSentAt
    received_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Time at which message was received.
    """

    from_: typing_extensions.Annotated[MessageFrom, FieldMetadata(alias="from")]
    reply_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    Address to reply to. In format `username@domain.com` or `Display Name <username@domain.com>`.
    """

    subject: typing.Optional[MessageSubject] = None
    preview: typing.Optional[MessagePreview] = None
    to: MessageTo
    cc: typing.Optional[MessageCc] = None
    bcc: typing.Optional[MessageBcc] = None
    text: typing.Optional[MessageText] = None
    html: typing.Optional[MessageHtml] = None
    attachments: typing.Optional[MessageAttachments] = None
    in_reply_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of message being replied to.
    """

    references: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    IDs of previous messages in thread.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
