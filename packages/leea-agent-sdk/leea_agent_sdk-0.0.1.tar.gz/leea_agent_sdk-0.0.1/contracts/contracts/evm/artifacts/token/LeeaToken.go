// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CheckpointsCheckpoint208 is an auto generated low-level Go binding around an user-defined struct.
type CheckpointsCheckpoint208 struct {
	Key   *big.Int
	Value *big.Int
}

// LeeaTokenMetaData contains all meta data concerning the LeeaToken contract.
var LeeaTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"structCheckpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x61016060405234801561001157600080fd5b50604051612bdf380380612bdf83398101604081905261003091610891565b604051806040016040528060098152602001682632b2b0aa37b5b2b760b91b81525080604051806040016040528060018152602001603160f81b81525084604051806040016040528060098152602001682632b2b0aa37b5b2b760b91b815250604051806040016040528060048152602001634c45454160e01b81525081600390816100bc9190610969565b5060046100c98282610969565b5050506001600160a01b0381166100fb57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610104816101dc565b5061011082600661022e565b6101205261011f81600761022e565b61014052815160208084019190912060e052815190820120610100524660a0526101ac60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506101d5336101c66012600a610b1c565b6101d09084610b2b565b610261565b5050610c18565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208351101561024a576102438361029b565b905061025b565b816102558482610969565b5060ff90505b92915050565b6001600160a01b03821661028b5760405163ec442f0560e01b8152600060048201526024016100f2565b610297600083836102d9565b5050565b600080829050601f815111156102c6578260405163305a27a960e01b81526004016100f29190610b42565b80516102d182610b90565b179392505050565b6102e48383836102e9565b505050565b6102f4838383610350565b6001600160a01b03831661034557600061030d60025490565b90506001600160d01b038082111561034257604051630e58ae9360e11b815260048101839052602481018290526044016100f2565b50505b6102e483838361047a565b6001600160a01b03831661037b5780600260008282546103709190610bb4565b909155506103ed9050565b6001600160a01b038316600090815260208190526040902054818110156103ce5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100f2565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661040957600280548290039055610428565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161046d91815260200190565b60405180910390a3505050565b6001600160a01b0383166104a8576104a5600b61094d61050360201b176104a084610516565b61054e565b50505b6001600160a01b0382166104d1576104ce600b61095961057d60201b176104a084610516565b50505b6001600160a01b038381166000908152600960205260408082205485841683529120546102e492918216911683610589565b600061050f8284610bc7565b9392505050565b60006001600160d01b0382111561054a576040516306dfcc6560e41b815260d06004820152602481018390526044016100f2565b5090565b60008061057042610568610561886106de565b868860201c565b879190610728565b915091505b935093915050565b600061050f8284610be6565b816001600160a01b0316836001600160a01b0316141580156105ab5750600081115b156102e4576001600160a01b03831615610645576001600160a01b0383166000908152600a60209081526040822082916105f2919061057d901b610959176104a086610516565b6001600160d01b031691506001600160d01b03169150846001600160a01b0316600080516020612bbf833981519152838360405161063a929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156102e4576001600160a01b0382166000908152600a60209081526040822082916106879190610503901b61094d176104a086610516565b6001600160d01b031691506001600160d01b03169150836001600160a01b0316600080516020612bbf83398151915283836040516106cf929190918252602082015260400190565b60405180910390a25050505050565b8054600090801561071f57610706836106f8600184610c05565b600091825260209091200190565b54660100000000000090046001600160d01b031661050f565b60009392505050565b60008061057085858582546000908190801561083357600061074f876106f8600185610c05565b805490915065ffffffffffff80821691660100000000000090046001600160d01b031690881682111561079557604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff16036107d157825465ffffffffffff1666010000000000006001600160d01b03891602178355610825565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f5560008f815291909120945191519092166601000000000000029216919091179101555b945085935061057592505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a8152918220955192519093166601000000000000029190931617920191909155905081610575565b600080604083850312156108a457600080fd5b82516001600160a01b03811681146108bb57600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806108f557607f821691505b60208210810361091557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102e457806000526020600020601f840160051c810160208510156109425750805b601f840160051c820191505b81811015610962576000815560010161094e565b5050505050565b81516001600160401b03811115610982576109826108cb565b6109968161099084546108e1565b8461091b565b6020601f8211600181146109ca57600083156109b25750848201515b600019600385901b1c1916600184901b178455610962565b600084815260208120601f198516915b828110156109fa57878501518255602094850194600190920191016109da565b5084821015610a185786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561057557808504811115610a5c57610a5c610a27565b6001841615610a6a57908102905b60019390931c928002610a41565b600082610a875750600161025b565b81610a945750600061025b565b8160018114610aaa5760028114610ab457610ad0565b600191505061025b565b60ff841115610ac557610ac5610a27565b50506001821b61025b565b5060208310610133831016604e8410600b8410161715610af3575081810a61025b565b610b006000198484610a3d565b8060001904821115610b1457610b14610a27565b029392505050565b600061050f60ff841683610a78565b808202811582820484141761025b5761025b610a27565b602081526000825180602084015260005b81811015610b705760208186018101516040868401015201610b53565b506000604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156109155760001960209190910360031b1b16919050565b8082018082111561025b5761025b610a27565b6001600160d01b03818116838216019081111561025b5761025b610a27565b6001600160d01b03828116828216039081111561025b5761025b610a27565b8181038181111561025b5761025b610a27565b60805160a05160c05160e051610100516101205161014051611f4d610c726000396000610e4c01526000610e1f01526000610b2f01526000610b0701526000610a6201526000610a8c01526000610ab60152611f4d6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a61161010457806395d89b41116100a2578063d505accf11610071578063d505accf14610422578063dd62ed3e14610435578063f1127ed81461046e578063f2fde38b146104ad57600080fd5b806395d89b41146103e15780639ab24eb0146103e9578063a9059cbb146103fc578063c3cda5201461040f57600080fd5b806384b0196e116100de57806384b0196e1461038c5780638da5cb5b146103a75780638e539e8c146103b857806391ddadf4146103cb57600080fd5b8063715018a61461035e57806379cc6790146103665780637ecebe001461037957600080fd5b806340c10f1911610171578063587cde1e1161014b578063587cde1e146102b65780635c19a95c146102fa5780636fcfff451461030d57806370a082311461033557600080fd5b806340c10f191461026457806342966c68146102795780634bf5d7e91461028c57600080fd5b806323b872dd116101ad57806323b872dd14610227578063313ce5671461023a5780633644e515146102495780633a46b1a81461025157600080fd5b806306fdde03146101d4578063095ea7b3146101f257806318160ddd14610215575b600080fd5b6101dc6104c0565b6040516101e99190611b56565b60405180910390f35b610205610200366004611b85565b610552565b60405190151581526020016101e9565b6002545b6040519081526020016101e9565b610205610235366004611baf565b61056c565b604051601281526020016101e9565b610219610590565b61021961025f366004611b85565b61059f565b610277610272366004611b85565b6105db565b005b610277610287366004611bec565b6105f1565b60408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526101dc565b6102e26102c4366004611c05565b6001600160a01b039081166000908152600960205260409020541690565b6040516001600160a01b0390911681526020016101e9565b610277610308366004611c05565b6105fe565b61032061031b366004611c05565b610609565b60405163ffffffff90911681526020016101e9565b610219610343366004611c05565b6001600160a01b031660009081526020819052604090205490565b610277610614565b610277610374366004611b85565b610628565b610219610387366004611c05565b61063d565b610394610648565b6040516101e99796959493929190611c20565b6005546001600160a01b03166102e2565b6102196103c6366004611bec565b61068e565b60405165ffffffffffff421681526020016101e9565b6101dc6106b3565b6102196103f7366004611c05565b6106c2565b61020561040a366004611b85565b6106e3565b61027761041d366004611cc9565b6106f1565b610277610430366004611d21565b6107b3565b610219610443366004611d8c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61048161047c366004611dbf565b6108ed565b60408051825165ffffffffffff1681526020928301516001600160d01b031692810192909252016101e9565b6102776104bb366004611c05565b610912565b6060600380546104cf90611dff565b80601f01602080910402602001604051908101604052809291908181526020018280546104fb90611dff565b80156105485780601f1061051d57610100808354040283529160200191610548565b820191906000526020600020905b81548152906001019060200180831161052b57829003601f168201915b5050505050905090565b600033610560818585610965565b60019150505b92915050565b60003361057a858285610977565b6105858585856109f6565b506001949350505050565b600061059a610a55565b905090565b60006105cb6105ad83610b80565b6001600160a01b0385166000908152600a6020526040902090610bc5565b6001600160d01b03169392505050565b6105e3610c7b565b6105ed8282610ca8565b5050565b6105fb3382610cde565b50565b336105ed8183610d14565b600061056682610d86565b61061c610c7b565b6106266000610da8565b565b610633823383610977565b6105ed8282610cde565b600061056682610dfa565b60006060806000806000606061065c610e18565b610664610e45565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006106a461069c83610b80565b600b90610bc5565b6001600160d01b031692915050565b6060600480546104cf90611dff565b6001600160a01b0381166000908152600a602052604081206106a490610e72565b6000336105608185856109f6565b8342111561071a57604051632341d78760e11b8152600481018590526024015b60405180910390fd5b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906107949061078c9060a00160405160208183030381529060405280519060200120610eab565b858585610ed8565b90506107a08187610f06565b6107aa8188610d14565b50505050505050565b834211156107d75760405163313c898160e11b815260048101859052602401610711565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886108248c6001600160a01b0316600090815260086020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061087f82610eab565b9050600061088f82878787610ed8565b9050896001600160a01b0316816001600160a01b0316146108d6576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610711565b6108e18a8a8a610965565b50505050505050505050565b604080518082019091526000808252602082015261090b8383610f59565b9392505050565b61091a610c7b565b6001600160a01b03811661094457604051631e4fbdf760e01b815260006004820152602401610711565b6105fb81610da8565b600061090b8284611e4f565b600061090b8284611e6e565b6109728383836001610f8f565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156109f057818110156109e157604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610711565b6109f084848484036000610f8f565b50505050565b6001600160a01b038316610a2057604051634b637e8f60e11b815260006004820152602401610711565b6001600160a01b038216610a4a5760405163ec442f0560e01b815260006004820152602401610711565b610972838383611064565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610aae57507f000000000000000000000000000000000000000000000000000000000000000046145b15610ad857507f000000000000000000000000000000000000000000000000000000000000000090565b61059a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60004265ffffffffffff81168310610bbc57604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610711565b61090b8361106f565b815460009081816005811115610c24576000610be0846110a6565b610bea9085611e8d565b60008881526020902090915081015465ffffffffffff9081169087161015610c1457809150610c22565b610c1f816001611ea0565b92505b505b6000610c32878785856111ff565b90508015610c6d57610c5787610c49600184611e8d565b600091825260209091200190565b54600160301b90046001600160d01b0316610c70565b60005b979650505050505050565b6005546001600160a01b031633146106265760405163118cdaa760e01b8152336004820152602401610711565b6001600160a01b038216610cd25760405163ec442f0560e01b815260006004820152602401610711565b6105ed60008383611064565b6001600160a01b038216610d0857604051634b637e8f60e11b815260006004820152602401610711565b6105ed82600083611064565b6001600160a01b0382811660008181526009602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46109728183610d8186611261565b61127f565b6001600160a01b0381166000908152600a6020526040812054610566906113eb565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116600090815260086020526040812054610566565b606061059a7f0000000000000000000000000000000000000000000000000000000000000000600661141c565b606061059a7f0000000000000000000000000000000000000000000000000000000000000000600761141c565b80546000908015610ea257610e8c83610c49600184611e8d565b54600160301b90046001600160d01b031661090b565b60009392505050565b6000610566610eb8610a55565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080610eea888888886114c7565b925092509250610efa8282611596565b50909695505050505050565b6001600160a01b0382166000908152600860205260409020805460018101909155818114610972576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610711565b60408051808201909152600080825260208201526001600160a01b0383166000908152600a6020526040902061090b908361164f565b6001600160a01b038416610fb95760405163e602df0560e01b815260006004820152602401610711565b6001600160a01b038316610fe357604051634a1406b160e11b815260006004820152602401610711565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156109f057826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161105691815260200190565b60405180910390a350505050565b6109728383836116bf565b600065ffffffffffff8211156110a2576040516306dfcc6560e41b81526030600482015260248101839052604401610711565b5090565b6000600182116110b4575090565b816001600160801b82106110cd5760809190911c9060401b5b6801000000000000000082106110e85760409190911c9060201b5b64010000000082106110ff5760209190911c9060101b5b6201000082106111145760109190911c9060081b5b61010082106111285760089190911c9060041b5b6010821061113b5760049190911c9060021b5b600482106111475760011b5b600302600190811c9081858161115f5761115f611eb3565b048201901c9050600181858161117757611177611eb3565b048201901c9050600181858161118f5761118f611eb3565b048201901c905060018185816111a7576111a7611eb3565b048201901c905060018185816111bf576111bf611eb3565b048201901c905060018185816111d7576111d7611eb3565b048201901c90506111f68185816111f0576111f0611eb3565b04821190565b90039392505050565b60005b818310156112595760006112168484611726565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff16111561124557809250611253565b611250816001611ea0565b93505b50611202565b509392505050565b6001600160a01b038116600090815260208190526040812054610566565b816001600160a01b0316836001600160a01b0316141580156112a15750600081115b15610972576001600160a01b03831615611349576001600160a01b0383166000908152600a6020526040812081906112e4906109596112df86611741565b611775565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161133e929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610972576001600160a01b0382166000908152600a6020526040812081906113829061094d6112df86611741565b6001600160d01b031691506001600160d01b03169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516113dc929190918252602082015260400190565b60405180910390a25050505050565b600063ffffffff8211156110a2576040516306dfcc6560e41b81526020600482015260248101839052604401610711565b606060ff83146114365761142f836117a7565b9050610566565b81805461144290611dff565b80601f016020809104026020016040519081016040528092919081815260200182805461146e90611dff565b80156114bb5780601f10611490576101008083540402835291602001916114bb565b820191906000526020600020905b81548152906001019060200180831161149e57829003601f168201915b50505050509050610566565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611502575060009150600390508261158c565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611556573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166115825750600092506001915082905061158c565b9250600091508190505b9450945094915050565b60008260038111156115aa576115aa611ec9565b036115b3575050565b60018260038111156115c7576115c7611ec9565b036115e55760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156115f9576115f9611ec9565b0361161a5760405163fce698f760e01b815260048101829052602401610711565b600382600381111561162e5761162e611ec9565b036105ed576040516335e2f38360e21b815260048101829052602401610711565b6040805180820190915260008082526020820152826000018263ffffffff168154811061167e5761167e611edf565b60009182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b6116ca8383836117e6565b6001600160a01b03831661171b5760006116e360025490565b90506001600160d01b038082111561171857604051630e58ae9360e11b81526004810183905260248101829052604401610711565b50505b610972838383611910565b60006117356002848418611ef5565b61090b90848416611ea0565b60006001600160d01b038211156110a2576040516306dfcc6560e41b815260d0600482015260248101839052604401610711565b60008061179a4261179261178888610e72565b868863ffffffff16565b879190611986565b915091505b935093915050565b606060006117b483611994565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6001600160a01b0383166118115780600260008282546118069190611ea0565b909155506118839050565b6001600160a01b038316600090815260208190526040902054818110156118645760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610711565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661189f576002805482900390556118be565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161190391815260200190565b60405180910390a3505050565b6001600160a01b0383166119325761192f600b61094d6112df84611741565b50505b6001600160a01b03821661195457611951600b6109596112df84611741565b50505b6001600160a01b038381166000908152600960205260408082205485841683529120546109729291821691168361127f565b60008061179a8585856119bc565b600060ff8216601f81111561056657604051632cd44ac360e21b815260040160405180910390fd5b825460009081908015611ab55760006119da87610c49600185611e8d565b805490915065ffffffffffff80821691600160301b90046001600160d01b0316908816821115611a1d57604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff1603611a5657825465ffffffffffff16600160301b6001600160d01b03891602178355611aa7565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f5560008f81529190912094519151909216600160301b029216919091179101555b945085935061179f92505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b02919093161792019190915590508161179f565b6000815180845260005b81811015611b3657602081850181015186830182015201611b1a565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061090b6020830184611b10565b80356001600160a01b0381168114611b8057600080fd5b919050565b60008060408385031215611b9857600080fd5b611ba183611b69565b946020939093013593505050565b600080600060608486031215611bc457600080fd5b611bcd84611b69565b9250611bdb60208501611b69565b929592945050506040919091013590565b600060208284031215611bfe57600080fd5b5035919050565b600060208284031215611c1757600080fd5b61090b82611b69565b60ff60f81b8816815260e060208201526000611c3f60e0830189611b10565b8281036040840152611c518189611b10565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015611ca7578351835260209384019390920191600101611c89565b50909b9a5050505050505050505050565b803560ff81168114611b8057600080fd5b60008060008060008060c08789031215611ce257600080fd5b611ceb87611b69565b95506020870135945060408701359350611d0760608801611cb8565b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a031215611d3c57600080fd5b611d4588611b69565b9650611d5360208901611b69565b95506040880135945060608801359350611d6f60808901611cb8565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611d9f57600080fd5b611da883611b69565b9150611db660208401611b69565b90509250929050565b60008060408385031215611dd257600080fd5b611ddb83611b69565b9150602083013563ffffffff81168114611df457600080fd5b809150509250929050565b600181811c90821680611e1357607f821691505b602082108103611e3357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160d01b03818116838216019081111561056657610566611e39565b6001600160d01b03828116828216039081111561056657610566611e39565b8181038181111561056657610566611e39565b8082018082111561056657610566611e39565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082611f1257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212201bd7161022e23e6462d7fb3ca32835dff986dc4a956a76255eb8011706fdb3ae64736f6c634300081c0033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
}

// LeeaTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use LeeaTokenMetaData.ABI instead.
var LeeaTokenABI = LeeaTokenMetaData.ABI

// LeeaTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LeeaTokenMetaData.Bin instead.
var LeeaTokenBin = LeeaTokenMetaData.Bin

// DeployLeeaToken deploys a new Ethereum contract, binding an instance of LeeaToken to it.
func DeployLeeaToken(auth *bind.TransactOpts, backend bind.ContractBackend, initialOwner common.Address, supply *big.Int) (common.Address, *types.Transaction, *LeeaToken, error) {
	parsed, err := LeeaTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LeeaTokenBin), backend, initialOwner, supply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LeeaToken{LeeaTokenCaller: LeeaTokenCaller{contract: contract}, LeeaTokenTransactor: LeeaTokenTransactor{contract: contract}, LeeaTokenFilterer: LeeaTokenFilterer{contract: contract}}, nil
}

// LeeaToken is an auto generated Go binding around an Ethereum contract.
type LeeaToken struct {
	LeeaTokenCaller     // Read-only binding to the contract
	LeeaTokenTransactor // Write-only binding to the contract
	LeeaTokenFilterer   // Log filterer for contract events
}

// LeeaTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type LeeaTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeeaTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LeeaTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeeaTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LeeaTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeeaTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LeeaTokenSession struct {
	Contract     *LeeaToken        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LeeaTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LeeaTokenCallerSession struct {
	Contract *LeeaTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// LeeaTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LeeaTokenTransactorSession struct {
	Contract     *LeeaTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// LeeaTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type LeeaTokenRaw struct {
	Contract *LeeaToken // Generic contract binding to access the raw methods on
}

// LeeaTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LeeaTokenCallerRaw struct {
	Contract *LeeaTokenCaller // Generic read-only contract binding to access the raw methods on
}

// LeeaTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LeeaTokenTransactorRaw struct {
	Contract *LeeaTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLeeaToken creates a new instance of LeeaToken, bound to a specific deployed contract.
func NewLeeaToken(address common.Address, backend bind.ContractBackend) (*LeeaToken, error) {
	contract, err := bindLeeaToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LeeaToken{LeeaTokenCaller: LeeaTokenCaller{contract: contract}, LeeaTokenTransactor: LeeaTokenTransactor{contract: contract}, LeeaTokenFilterer: LeeaTokenFilterer{contract: contract}}, nil
}

// NewLeeaTokenCaller creates a new read-only instance of LeeaToken, bound to a specific deployed contract.
func NewLeeaTokenCaller(address common.Address, caller bind.ContractCaller) (*LeeaTokenCaller, error) {
	contract, err := bindLeeaToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenCaller{contract: contract}, nil
}

// NewLeeaTokenTransactor creates a new write-only instance of LeeaToken, bound to a specific deployed contract.
func NewLeeaTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*LeeaTokenTransactor, error) {
	contract, err := bindLeeaToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenTransactor{contract: contract}, nil
}

// NewLeeaTokenFilterer creates a new log filterer instance of LeeaToken, bound to a specific deployed contract.
func NewLeeaTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*LeeaTokenFilterer, error) {
	contract, err := bindLeeaToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenFilterer{contract: contract}, nil
}

// bindLeeaToken binds a generic wrapper to an already deployed contract.
func bindLeeaToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LeeaTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LeeaToken *LeeaTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LeeaToken.Contract.LeeaTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LeeaToken *LeeaTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LeeaToken.Contract.LeeaTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LeeaToken *LeeaTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LeeaToken.Contract.LeeaTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LeeaToken *LeeaTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LeeaToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LeeaToken *LeeaTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LeeaToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LeeaToken *LeeaTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LeeaToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_LeeaToken *LeeaTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_LeeaToken *LeeaTokenSession) CLOCKMODE() (string, error) {
	return _LeeaToken.Contract.CLOCKMODE(&_LeeaToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_LeeaToken *LeeaTokenCallerSession) CLOCKMODE() (string, error) {
	return _LeeaToken.Contract.CLOCKMODE(&_LeeaToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LeeaToken *LeeaTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LeeaToken *LeeaTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _LeeaToken.Contract.DOMAINSEPARATOR(&_LeeaToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_LeeaToken *LeeaTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _LeeaToken.Contract.DOMAINSEPARATOR(&_LeeaToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.Allowance(&_LeeaToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.Allowance(&_LeeaToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.BalanceOf(&_LeeaToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.BalanceOf(&_LeeaToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_LeeaToken *LeeaTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(CheckpointsCheckpoint208), err
	}

	out0 := *abi.ConvertType(out[0], new(CheckpointsCheckpoint208)).(*CheckpointsCheckpoint208)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_LeeaToken *LeeaTokenSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _LeeaToken.Contract.Checkpoints(&_LeeaToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_LeeaToken *LeeaTokenCallerSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _LeeaToken.Contract.Checkpoints(&_LeeaToken.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_LeeaToken *LeeaTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_LeeaToken *LeeaTokenSession) Clock() (*big.Int, error) {
	return _LeeaToken.Contract.Clock(&_LeeaToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_LeeaToken *LeeaTokenCallerSession) Clock() (*big.Int, error) {
	return _LeeaToken.Contract.Clock(&_LeeaToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LeeaToken *LeeaTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LeeaToken *LeeaTokenSession) Decimals() (uint8, error) {
	return _LeeaToken.Contract.Decimals(&_LeeaToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LeeaToken *LeeaTokenCallerSession) Decimals() (uint8, error) {
	return _LeeaToken.Contract.Decimals(&_LeeaToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_LeeaToken *LeeaTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_LeeaToken *LeeaTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _LeeaToken.Contract.Delegates(&_LeeaToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_LeeaToken *LeeaTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _LeeaToken.Contract.Delegates(&_LeeaToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LeeaToken *LeeaTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LeeaToken *LeeaTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _LeeaToken.Contract.Eip712Domain(&_LeeaToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_LeeaToken *LeeaTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _LeeaToken.Contract.Eip712Domain(&_LeeaToken.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _LeeaToken.Contract.GetPastTotalSupply(&_LeeaToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _LeeaToken.Contract.GetPastTotalSupply(&_LeeaToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _LeeaToken.Contract.GetPastVotes(&_LeeaToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _LeeaToken.Contract.GetPastVotes(&_LeeaToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.GetVotes(&_LeeaToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.GetVotes(&_LeeaToken.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LeeaToken *LeeaTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LeeaToken *LeeaTokenSession) Name() (string, error) {
	return _LeeaToken.Contract.Name(&_LeeaToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LeeaToken *LeeaTokenCallerSession) Name() (string, error) {
	return _LeeaToken.Contract.Name(&_LeeaToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LeeaToken *LeeaTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.Nonces(&_LeeaToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _LeeaToken.Contract.Nonces(&_LeeaToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_LeeaToken *LeeaTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_LeeaToken *LeeaTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _LeeaToken.Contract.NumCheckpoints(&_LeeaToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_LeeaToken *LeeaTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _LeeaToken.Contract.NumCheckpoints(&_LeeaToken.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LeeaToken *LeeaTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LeeaToken *LeeaTokenSession) Owner() (common.Address, error) {
	return _LeeaToken.Contract.Owner(&_LeeaToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LeeaToken *LeeaTokenCallerSession) Owner() (common.Address, error) {
	return _LeeaToken.Contract.Owner(&_LeeaToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LeeaToken *LeeaTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LeeaToken *LeeaTokenSession) Symbol() (string, error) {
	return _LeeaToken.Contract.Symbol(&_LeeaToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LeeaToken *LeeaTokenCallerSession) Symbol() (string, error) {
	return _LeeaToken.Contract.Symbol(&_LeeaToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LeeaToken *LeeaTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LeeaToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LeeaToken *LeeaTokenSession) TotalSupply() (*big.Int, error) {
	return _LeeaToken.Contract.TotalSupply(&_LeeaToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LeeaToken *LeeaTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _LeeaToken.Contract.TotalSupply(&_LeeaToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Approve(&_LeeaToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Approve(&_LeeaToken.TransactOpts, spender, value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_LeeaToken *LeeaTokenTransactor) Burn(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "burn", value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_LeeaToken *LeeaTokenSession) Burn(value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Burn(&_LeeaToken.TransactOpts, value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_LeeaToken *LeeaTokenTransactorSession) Burn(value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Burn(&_LeeaToken.TransactOpts, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_LeeaToken *LeeaTokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_LeeaToken *LeeaTokenSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.BurnFrom(&_LeeaToken.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_LeeaToken *LeeaTokenTransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.BurnFrom(&_LeeaToken.TransactOpts, account, value)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_LeeaToken *LeeaTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_LeeaToken *LeeaTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _LeeaToken.Contract.Delegate(&_LeeaToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_LeeaToken *LeeaTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _LeeaToken.Contract.Delegate(&_LeeaToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.Contract.DelegateBySig(&_LeeaToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.Contract.DelegateBySig(&_LeeaToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_LeeaToken *LeeaTokenTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_LeeaToken *LeeaTokenSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Mint(&_LeeaToken.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_LeeaToken *LeeaTokenTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Mint(&_LeeaToken.TransactOpts, to, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.Contract.Permit(&_LeeaToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_LeeaToken *LeeaTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _LeeaToken.Contract.Permit(&_LeeaToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LeeaToken *LeeaTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LeeaToken *LeeaTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _LeeaToken.Contract.RenounceOwnership(&_LeeaToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LeeaToken *LeeaTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LeeaToken.Contract.RenounceOwnership(&_LeeaToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Transfer(&_LeeaToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.Transfer(&_LeeaToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.TransferFrom(&_LeeaToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_LeeaToken *LeeaTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _LeeaToken.Contract.TransferFrom(&_LeeaToken.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LeeaToken *LeeaTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LeeaToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LeeaToken *LeeaTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LeeaToken.Contract.TransferOwnership(&_LeeaToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LeeaToken *LeeaTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LeeaToken.Contract.TransferOwnership(&_LeeaToken.TransactOpts, newOwner)
}

// LeeaTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LeeaToken contract.
type LeeaTokenApprovalIterator struct {
	Event *LeeaTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenApproval represents a Approval event raised by the LeeaToken contract.
type LeeaTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LeeaTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenApprovalIterator{contract: _LeeaToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LeeaTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenApproval)
				if err := _LeeaToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) ParseApproval(log types.Log) (*LeeaTokenApproval, error) {
	event := new(LeeaTokenApproval)
	if err := _LeeaToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LeeaTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the LeeaToken contract.
type LeeaTokenDelegateChangedIterator struct {
	Event *LeeaTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenDelegateChanged represents a DelegateChanged event raised by the LeeaToken contract.
type LeeaTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_LeeaToken *LeeaTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*LeeaTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenDelegateChangedIterator{contract: _LeeaToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_LeeaToken *LeeaTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *LeeaTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenDelegateChanged)
				if err := _LeeaToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_LeeaToken *LeeaTokenFilterer) ParseDelegateChanged(log types.Log) (*LeeaTokenDelegateChanged, error) {
	event := new(LeeaTokenDelegateChanged)
	if err := _LeeaToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LeeaTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the LeeaToken contract.
type LeeaTokenDelegateVotesChangedIterator struct {
	Event *LeeaTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the LeeaToken contract.
type LeeaTokenDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_LeeaToken *LeeaTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*LeeaTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenDelegateVotesChangedIterator{contract: _LeeaToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_LeeaToken *LeeaTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *LeeaTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenDelegateVotesChanged)
				if err := _LeeaToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_LeeaToken *LeeaTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*LeeaTokenDelegateVotesChanged, error) {
	event := new(LeeaTokenDelegateVotesChanged)
	if err := _LeeaToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LeeaTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the LeeaToken contract.
type LeeaTokenEIP712DomainChangedIterator struct {
	Event *LeeaTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the LeeaToken contract.
type LeeaTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LeeaToken *LeeaTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*LeeaTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &LeeaTokenEIP712DomainChangedIterator{contract: _LeeaToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LeeaToken *LeeaTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *LeeaTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenEIP712DomainChanged)
				if err := _LeeaToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_LeeaToken *LeeaTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*LeeaTokenEIP712DomainChanged, error) {
	event := new(LeeaTokenEIP712DomainChanged)
	if err := _LeeaToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LeeaTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LeeaToken contract.
type LeeaTokenOwnershipTransferredIterator struct {
	Event *LeeaTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenOwnershipTransferred represents a OwnershipTransferred event raised by the LeeaToken contract.
type LeeaTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LeeaToken *LeeaTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LeeaTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenOwnershipTransferredIterator{contract: _LeeaToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LeeaToken *LeeaTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LeeaTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenOwnershipTransferred)
				if err := _LeeaToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LeeaToken *LeeaTokenFilterer) ParseOwnershipTransferred(log types.Log) (*LeeaTokenOwnershipTransferred, error) {
	event := new(LeeaTokenOwnershipTransferred)
	if err := _LeeaToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LeeaTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LeeaToken contract.
type LeeaTokenTransferIterator struct {
	Event *LeeaTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeeaTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeeaTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeeaTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeeaTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeeaTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeeaTokenTransfer represents a Transfer event raised by the LeeaToken contract.
type LeeaTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LeeaTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LeeaToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LeeaTokenTransferIterator{contract: _LeeaToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LeeaTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LeeaToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeeaTokenTransfer)
				if err := _LeeaToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LeeaToken *LeeaTokenFilterer) ParseTransfer(log types.Log) (*LeeaTokenTransfer, error) {
	event := new(LeeaTokenTransfer)
	if err := _LeeaToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
