# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/bellem',
                'doc_host': 'https://bdsaglam.github.io/bellem',
                'git_url': 'https://github.com/bdsaglam/bellem',
                'lib_path': 'bellem'},
  'syms': { 'bellem.datasets.utils': { 'bellem.datasets.utils.chunk_random_dataset': ( 'misc/datasets.utils.html#chunk_random_dataset',
                                                                                       'bellem/datasets/utils.py'),
                                       'bellem.datasets.utils.concatenate_dataset_dicts': ( 'misc/datasets.utils.html#concatenate_dataset_dicts',
                                                                                            'bellem/datasets/utils.py'),
                                       'bellem.datasets.utils.load_datasets': ( 'misc/datasets.utils.html#load_datasets',
                                                                                'bellem/datasets/utils.py')},
            'bellem.dda.coop': { 'bellem.dda.coop.ClipVisualEncoder': ('dda/dda.coop.html#clipvisualencoder', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.ClipVisualEncoder.__init__': ( 'dda/dda.coop.html#clipvisualencoder.__init__',
                                                                                 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.ClipVisualEncoder.forward': ( 'dda/dda.coop.html#clipvisualencoder.forward',
                                                                                'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearner': ('dda/dda.coop.html#promptlearner', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearner.__init__': ( 'dda/dda.coop.html#promptlearner.__init__',
                                                                             'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearner.forward': ('dda/dda.coop.html#promptlearner.forward', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningClip': ('dda/dda.coop.html#promptlearningclip', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningClip.__init__': ( 'dda/dda.coop.html#promptlearningclip.__init__',
                                                                                  'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningClip.forward': ( 'dda/dda.coop.html#promptlearningclip.forward',
                                                                                 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningTextEncoder': ( 'dda/dda.coop.html#promptlearningtextencoder',
                                                                                'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningTextEncoder.__init__': ( 'dda/dda.coop.html#promptlearningtextencoder.__init__',
                                                                                         'bellem/dda/coop.py'),
                                 'bellem.dda.coop.PromptLearningTextEncoder.forward': ( 'dda/dda.coop.html#promptlearningtextencoder.forward',
                                                                                        'bellem/dda/coop.py'),
                                 'bellem.dda.coop.TextEncoder': ('dda/dda.coop.html#textencoder', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.TextEncoder.__init__': ('dda/dda.coop.html#textencoder.__init__', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.TextEncoder.forward': ('dda/dda.coop.html#textencoder.forward', 'bellem/dda/coop.py'),
                                 'bellem.dda.coop.make_prompt_learning_clip': ( 'dda/dda.coop.html#make_prompt_learning_clip',
                                                                                'bellem/dda/coop.py'),
                                 'bellem.dda.coop.prepare_prompt_learning_clip': ( 'dda/dda.coop.html#prepare_prompt_learning_clip',
                                                                                   'bellem/dda/coop.py')},
            'bellem.dda.mcd': { 'bellem.dda.mcd.DiscrepancyLoss': ('dda/dda.mcd.html#discrepancyloss', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.DiscrepancyLoss.__call__': ( 'dda/dda.mcd.html#discrepancyloss.__call__',
                                                                             'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.EnsembleMcdModel': ('dda/dda.mcd.html#ensemblemcdmodel', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.EnsembleMcdModel.__init__': ( 'dda/dda.mcd.html#ensemblemcdmodel.__init__',
                                                                              'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.EnsembleMcdModel.forward': ( 'dda/dda.mcd.html#ensemblemcdmodel.forward',
                                                                             'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.EnsembleMcdModel.from_mcd_model': ( 'dda/dda.mcd.html#ensemblemcdmodel.from_mcd_model',
                                                                                    'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Feature': ('dda/dda.mcd.html#feature', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Feature.__init__': ('dda/dda.mcd.html#feature.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Feature.forward': ('dda/dda.mcd.html#feature.forward', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback': ('dda/dda.mcd.html#mcdcallback', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback.__init__': ('dda/dda.mcd.html#mcdcallback.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback._do_grad_opt': ( 'dda/dda.mcd.html#mcdcallback._do_grad_opt',
                                                                             'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback._do_one_batch': ( 'dda/dda.mcd.html#mcdcallback._do_one_batch',
                                                                              'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback._predict_source': ( 'dda/dda.mcd.html#mcdcallback._predict_source',
                                                                                'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback._predict_target': ( 'dda/dda.mcd.html#mcdcallback._predict_target',
                                                                                'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback.before_batch': ( 'dda/dda.mcd.html#mcdcallback.before_batch',
                                                                             'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdCallback.before_fit': ('dda/dda.mcd.html#mcdcallback.before_fit', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader': ('dda/dda.mcd.html#mcddataloader', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.__init__': ('dda/dda.mcd.html#mcddataloader.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.__iter__': ('dda/dda.mcd.html#mcddataloader.__iter__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.__len__': ('dda/dda.mcd.html#mcddataloader.__len__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.__next__': ('dda/dda.mcd.html#mcddataloader.__next__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.new': ('dda/dda.mcd.html#mcddataloader.new', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataLoader.to': ('dda/dda.mcd.html#mcddataloader.to', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataset': ('dda/dda.mcd.html#mcddataset', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataset.__getitem__': ('dda/dda.mcd.html#mcddataset.__getitem__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataset.__init__': ('dda/dda.mcd.html#mcddataset.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdDataset.__len__': ('dda/dda.mcd.html#mcddataset.__len__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdModel': ('dda/dda.mcd.html#mcdmodel', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdModel.__init__': ('dda/dda.mcd.html#mcdmodel.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.McdModel.forward': ('dda/dda.mcd.html#mcdmodel.forward', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Predictor': ('dda/dda.mcd.html#predictor', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Predictor.__init__': ('dda/dda.mcd.html#predictor.__init__', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.Predictor.forward': ('dda/dda.mcd.html#predictor.forward', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.discrepancy': ('dda/dda.mcd.html#discrepancy', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.discrepancy_metric': ('dda/dda.mcd.html#discrepancy_metric', 'bellem/dda/mcd.py'),
                                'bellem.dda.mcd.mcd_learner': ('dda/dda.mcd.html#mcd_learner', 'bellem/dda/mcd.py')},
            'bellem.drop.eval': { 'bellem.drop.eval._align_bags': ('drop.eval.html#_align_bags', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._answer_to_bags': ('drop.eval.html#_answer_to_bags', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._compute_f1': ('drop.eval.html#_compute_f1', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._is_number': ('drop.eval.html#_is_number', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._lower': ('drop.eval.html#_lower', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._match_numbers_if_present': ( 'drop.eval.html#_match_numbers_if_present',
                                                                                  'bellem/drop/eval.py'),
                                  'bellem.drop.eval._normalize_answer': ('drop.eval.html#_normalize_answer', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._normalize_number': ('drop.eval.html#_normalize_number', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._remove_articles': ('drop.eval.html#_remove_articles', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._remove_punc': ('drop.eval.html#_remove_punc', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._tokenize': ('drop.eval.html#_tokenize', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval._white_space_fix': ('drop.eval.html#_white_space_fix', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval.aggregate_scores': ('drop.eval.html#aggregate_scores', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval.compute_scores': ('drop.eval.html#compute_scores', 'bellem/drop/eval.py'),
                                  'bellem.drop.eval.compute_scores_dataframe': ( 'drop.eval.html#compute_scores_dataframe',
                                                                                 'bellem/drop/eval.py'),
                                  'bellem.drop.eval.get_metric': ('drop.eval.html#get_metric', 'bellem/drop/eval.py')},
            'bellem.ds': { 'bellem.ds.NestedDict': ('core/ds.html#nesteddict', 'bellem/ds.py'),
                           'bellem.ds.NestedDict.__init__': ('core/ds.html#nesteddict.__init__', 'bellem/ds.py'),
                           'bellem.ds.NestedDict.at': ('core/ds.html#nesteddict.at', 'bellem/ds.py'),
                           'bellem.ds.NestedDict.flat': ('core/ds.html#nesteddict.flat', 'bellem/ds.py'),
                           'bellem.ds.NestedDict.from_flat_dict': ('core/ds.html#nesteddict.from_flat_dict', 'bellem/ds.py'),
                           'bellem.ds.NestedDict.set': ('core/ds.html#nesteddict.set', 'bellem/ds.py'),
                           'bellem.ds.flatten_dict': ('core/ds.html#flatten_dict', 'bellem/ds.py'),
                           'bellem.ds.unflatten_dict': ('core/ds.html#unflatten_dict', 'bellem/ds.py')},
            'bellem.dspy.module.cte': { 'bellem.dspy.module.cte.ConnectTheEntities': ( 'dspy/dspy.module.cte.html#connecttheentities',
                                                                                       'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.ConnectTheEntities.__init__': ( 'dspy/dspy.module.cte.html#connecttheentities.__init__',
                                                                                                'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.ConnectTheEntities.forward': ( 'dspy/dspy.module.cte.html#connecttheentities.forward',
                                                                                               'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.JERX': ('dspy/dspy.module.cte.html#jerx', 'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.QA': ('dspy/dspy.module.cte.html#qa', 'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.validate_number_of_triples': ( 'dspy/dspy.module.cte.html#validate_number_of_triples',
                                                                                               'bellem/dspy/module/cte.py'),
                                        'bellem.dspy.module.cte.validate_triple_format': ( 'dspy/dspy.module.cte.html#validate_triple_format',
                                                                                           'bellem/dspy/module/cte.py')},
            'bellem.dspy.module.sc': { 'bellem.dspy.module.sc.SelfConsistency': ( 'dspy/dspy.module.sc.html#selfconsistency',
                                                                                  'bellem/dspy/module/sc.py'),
                                       'bellem.dspy.module.sc.SelfConsistency.__init__': ( 'dspy/dspy.module.sc.html#selfconsistency.__init__',
                                                                                           'bellem/dspy/module/sc.py'),
                                       'bellem.dspy.module.sc.SelfConsistency.forward': ( 'dspy/dspy.module.sc.html#selfconsistency.forward',
                                                                                          'bellem/dspy/module/sc.py'),
                                       'bellem.dspy.module.sc.SelfConsistency.from_clones': ( 'dspy/dspy.module.sc.html#selfconsistency.from_clones',
                                                                                              'bellem/dspy/module/sc.py')},
            'bellem.dspy.predict.ccot': { 'bellem.dspy.predict.ccot.ConciseChainOfThought': ( 'dspy/dspy.predict.ccot.html#concisechainofthought',
                                                                                              'bellem/dspy/predict/ccot.py'),
                                          'bellem.dspy.predict.ccot.ConciseChainOfThought.__init__': ( 'dspy/dspy.predict.ccot.html#concisechainofthought.__init__',
                                                                                                       'bellem/dspy/predict/ccot.py'),
                                          'bellem.dspy.predict.ccot.ConciseChainOfThought.forward': ( 'dspy/dspy.predict.ccot.html#concisechainofthought.forward',
                                                                                                      'bellem/dspy/predict/ccot.py')},
            'bellem.dspy.predict.cok': { 'bellem.dspy.predict.cok.ChainOfKnowledge': ( 'dspy/dspy.predict.cok.html#chainofknowledge',
                                                                                       'bellem/dspy/predict/cok.py'),
                                         'bellem.dspy.predict.cok.ChainOfKnowledge.__init__': ( 'dspy/dspy.predict.cok.html#chainofknowledge.__init__',
                                                                                                'bellem/dspy/predict/cok.py'),
                                         'bellem.dspy.predict.cok.ChainOfKnowledge.demos': ( 'dspy/dspy.predict.cok.html#chainofknowledge.demos',
                                                                                             'bellem/dspy/predict/cok.py'),
                                         'bellem.dspy.predict.cok.ChainOfKnowledge.extended_signature': ( 'dspy/dspy.predict.cok.html#chainofknowledge.extended_signature',
                                                                                                          'bellem/dspy/predict/cok.py'),
                                         'bellem.dspy.predict.cok.ChainOfKnowledge.forward': ( 'dspy/dspy.predict.cok.html#chainofknowledge.forward',
                                                                                               'bellem/dspy/predict/cok.py')},
            'bellem.dspy.predict.cot': { 'bellem.dspy.predict.cot.ChainOfThought': ( 'dspy/dspy.predict.cot.html#chainofthought',
                                                                                     'bellem/dspy/predict/cot.py'),
                                         'bellem.dspy.predict.cot.ChainOfThought.__init__': ( 'dspy/dspy.predict.cot.html#chainofthought.__init__',
                                                                                              'bellem/dspy/predict/cot.py'),
                                         'bellem.dspy.predict.cot.ChainOfThought.demos': ( 'dspy/dspy.predict.cot.html#chainofthought.demos',
                                                                                           'bellem/dspy/predict/cot.py'),
                                         'bellem.dspy.predict.cot.ChainOfThought.extended_signature': ( 'dspy/dspy.predict.cot.html#chainofthought.extended_signature',
                                                                                                        'bellem/dspy/predict/cot.py'),
                                         'bellem.dspy.predict.cot.ChainOfThought.forward': ( 'dspy/dspy.predict.cot.html#chainofthought.forward',
                                                                                             'bellem/dspy/predict/cot.py')},
            'bellem.dspy.predict.cte': { 'bellem.dspy.predict.cte.ConnectTheEntities': ( 'dspy/dspy.predict.cte.html#connecttheentities',
                                                                                         'bellem/dspy/predict/cte.py'),
                                         'bellem.dspy.predict.cte.ConnectTheEntities.__init__': ( 'dspy/dspy.predict.cte.html#connecttheentities.__init__',
                                                                                                  'bellem/dspy/predict/cte.py'),
                                         'bellem.dspy.predict.cte.ConnectTheEntities.demos': ( 'dspy/dspy.predict.cte.html#connecttheentities.demos',
                                                                                               'bellem/dspy/predict/cte.py'),
                                         'bellem.dspy.predict.cte.ConnectTheEntities.extended_signature': ( 'dspy/dspy.predict.cte.html#connecttheentities.extended_signature',
                                                                                                            'bellem/dspy/predict/cte.py'),
                                         'bellem.dspy.predict.cte.ConnectTheEntities.forward': ( 'dspy/dspy.predict.cte.html#connecttheentities.forward',
                                                                                                 'bellem/dspy/predict/cte.py')},
            'bellem.dspy.utils': {'bellem.dspy.utils.configure_lm': ('dspy/dspy.utils.html#configure_lm', 'bellem/dspy/utils.py')},
            'bellem.dvc.experiment': { 'bellem.dvc.experiment.load_experiments': ( 'misc/dvc.experiment.html#load_experiments',
                                                                                   'bellem/dvc/experiment.py'),
                                       'bellem.dvc.experiment.parse_experiment': ( 'misc/dvc.experiment.html#parse_experiment',
                                                                                   'bellem/dvc/experiment.py'),
                                       'bellem.dvc.experiment.parse_experiments': ( 'misc/dvc.experiment.html#parse_experiments',
                                                                                    'bellem/dvc/experiment.py'),
                                       'bellem.dvc.experiment.parse_metrics': ( 'misc/dvc.experiment.html#parse_metrics',
                                                                                'bellem/dvc/experiment.py'),
                                       'bellem.dvc.experiment.parse_params': ( 'misc/dvc.experiment.html#parse_params',
                                                                               'bellem/dvc/experiment.py')},
            'bellem.fastai.classification': { 'bellem.fastai.classification.classification_summary': ( 'misc/fastai.classification.html#classification_summary',
                                                                                                       'bellem/fastai/classification.py'),
                                              'bellem.fastai.classification.evaluate_slmc': ( 'misc/fastai.classification.html#evaluate_slmc',
                                                                                              'bellem/fastai/classification.py'),
                                              'bellem.fastai.classification.find_binary_clf_threshold': ( 'misc/fastai.classification.html#find_binary_clf_threshold',
                                                                                                          'bellem/fastai/classification.py')},
            'bellem.jerx.dataset.docred': { 'bellem.jerx.dataset.docred.extract_sentences': ( 'jerx/jerx.dataset.docred.html#extract_sentences',
                                                                                              'bellem/jerx/dataset/docred.py'),
                                            'bellem.jerx.dataset.docred.extract_text': ( 'jerx/jerx.dataset.docred.html#extract_text',
                                                                                         'bellem/jerx/dataset/docred.py'),
                                            'bellem.jerx.dataset.docred.extract_triplets': ( 'jerx/jerx.dataset.docred.html#extract_triplets',
                                                                                             'bellem/jerx/dataset/docred.py'),
                                            'bellem.jerx.dataset.docred.join_tokens': ( 'jerx/jerx.dataset.docred.html#join_tokens',
                                                                                        'bellem/jerx/dataset/docred.py'),
                                            'bellem.jerx.dataset.docred.transform_docred': ( 'jerx/jerx.dataset.docred.html#transform_docred',
                                                                                             'bellem/jerx/dataset/docred.py')},
            'bellem.jerx.dataset.webnlg': { 'bellem.jerx.dataset.webnlg._batch_transform_webnlg': ( 'jerx/jerx.dataset.webnlg.html#_batch_transform_webnlg',
                                                                                                    'bellem/jerx/dataset/webnlg.py'),
                                            'bellem.jerx.dataset.webnlg._transform_entity': ( 'jerx/jerx.dataset.webnlg.html#_transform_entity',
                                                                                              'bellem/jerx/dataset/webnlg.py'),
                                            'bellem.jerx.dataset.webnlg._transform_relation': ( 'jerx/jerx.dataset.webnlg.html#_transform_relation',
                                                                                                'bellem/jerx/dataset/webnlg.py'),
                                            'bellem.jerx.dataset.webnlg._transform_triplet': ( 'jerx/jerx.dataset.webnlg.html#_transform_triplet',
                                                                                               'bellem/jerx/dataset/webnlg.py'),
                                            'bellem.jerx.dataset.webnlg.batch_transform_webnlg': ( 'jerx/jerx.dataset.webnlg.html#batch_transform_webnlg',
                                                                                                   'bellem/jerx/dataset/webnlg.py')},
            'bellem.jerx.eval': { 'bellem.jerx.eval.evaluate_jerx': ('jerx/jerx.eval.html#evaluate_jerx', 'bellem/jerx/eval.py'),
                                  'bellem.jerx.eval.evaluate_jerx_single': ( 'jerx/jerx.eval.html#evaluate_jerx_single',
                                                                             'bellem/jerx/eval.py'),
                                  'bellem.jerx.eval.evaluate_model_jerx': ( 'jerx/jerx.eval.html#evaluate_model_jerx',
                                                                            'bellem/jerx/eval.py'),
                                  'bellem.jerx.eval.evaluate_pipe_jerx': ('jerx/jerx.eval.html#evaluate_pipe_jerx', 'bellem/jerx/eval.py')},
            'bellem.jerx.fewshot.llm': { 'bellem.jerx.fewshot.llm.make_kg_triplet_extract_fn': ( 'jerx/jerx.fewshot.llm.html#make_kg_triplet_extract_fn',
                                                                                                 'bellem/jerx/fewshot/llm.py'),
                                         'bellem.jerx.fewshot.llm.parse_triplet_response': ( 'jerx/jerx.fewshot.llm.html#parse_triplet_response',
                                                                                             'bellem/jerx/fewshot/llm.py')},
            'bellem.jerx.offline.llm': { 'bellem.jerx.offline.llm.make_kg_triplet_extract_fn': ( 'jerx/jerx.offline.llm.html#make_kg_triplet_extract_fn',
                                                                                                 'bellem/jerx/offline/llm.py'),
                                         'bellem.jerx.offline.llm.parse_triplet_response': ( 'jerx/jerx.offline.llm.html#parse_triplet_response',
                                                                                             'bellem/jerx/offline/llm.py')},
            'bellem.jerx.prompt': { 'bellem.jerx.prompt.JERXChatFormatter': ( 'jerx/jerx.prompt.html#jerxchatformatter',
                                                                              'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXChatFormatter.__post_init__': ( 'jerx/jerx.prompt.html#jerxchatformatter.__post_init__',
                                                                                            'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXChatFormatter._format_triplets': ( 'jerx/jerx.prompt.html#jerxchatformatter._format_triplets',
                                                                                               'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXChatFormatter.format': ( 'jerx/jerx.prompt.html#jerxchatformatter.format',
                                                                                     'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXChatFormatter.make_messages': ( 'jerx/jerx.prompt.html#jerxchatformatter.make_messages',
                                                                                            'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXChatFormatter.make_system_message': ( 'jerx/jerx.prompt.html#jerxchatformatter.make_system_message',
                                                                                                  'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXSimpleChatFormatter': ( 'jerx/jerx.prompt.html#jerxsimplechatformatter',
                                                                                    'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXSimpleChatFormatter._format_triplets': ( 'jerx/jerx.prompt.html#jerxsimplechatformatter._format_triplets',
                                                                                                     'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXSimpleChatFormatter.format': ( 'jerx/jerx.prompt.html#jerxsimplechatformatter.format',
                                                                                           'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXSimpleChatFormatter.make_messages': ( 'jerx/jerx.prompt.html#jerxsimplechatformatter.make_messages',
                                                                                                  'bellem/jerx/prompt.py'),
                                    'bellem.jerx.prompt.JERXSimpleChatFormatter.make_system_message': ( 'jerx/jerx.prompt.html#jerxsimplechatformatter.make_system_message',
                                                                                                        'bellem/jerx/prompt.py')},
            'bellem.jerx.reward.heuristic': { 'bellem.jerx.reward.heuristic.compute_heuristic_reward': ( 'jerx/jerx.reward.heuristic.html#compute_heuristic_reward',
                                                                                                         'bellem/jerx/reward/heuristic.py')},
            'bellem.jerx.reward.llm': { 'bellem.jerx.reward.llm.Assessment': ( 'jerx/jerx.reward.llm.html#assessment',
                                                                               'bellem/jerx/reward/llm.py'),
                                        'bellem.jerx.reward.llm._assess_triplets': ( 'jerx/jerx.reward.llm.html#_assess_triplets',
                                                                                     'bellem/jerx/reward/llm.py'),
                                        'bellem.jerx.reward.llm.assess_quality': ( 'jerx/jerx.reward.llm.html#assess_quality',
                                                                                   'bellem/jerx/reward/llm.py')},
            'bellem.jerx.reward.qa': { 'bellem.jerx.reward.qa.QuestionAnsweringResult': ( 'jerx/jerx.reward.qa.html#questionansweringresult',
                                                                                          'bellem/jerx/reward/qa.py'),
                                       'bellem.jerx.reward.qa.RewardAssessment': ( 'jerx/jerx.reward.qa.html#rewardassessment',
                                                                                   'bellem/jerx/reward/qa.py'),
                                       'bellem.jerx.reward.qa.make_qa_reward_func': ( 'jerx/jerx.reward.qa.html#make_qa_reward_func',
                                                                                      'bellem/jerx/reward/qa.py'),
                                       'bellem.jerx.reward.qa.make_question_answer_func': ( 'jerx/jerx.reward.qa.html#make_question_answer_func',
                                                                                            'bellem/jerx/reward/qa.py')},
            'bellem.jerx.utils': { 'bellem.jerx.utils.parse_triplet_strings': ( 'jerx/jerx.utils.html#parse_triplet_strings',
                                                                                'bellem/jerx/utils.py'),
                                   'bellem.jerx.utils.parse_triplets': ('jerx/jerx.utils.html#parse_triplets', 'bellem/jerx/utils.py'),
                                   'bellem.jerx.utils.remove_enumeration': ( 'jerx/jerx.utils.html#remove_enumeration',
                                                                             'bellem/jerx/utils.py')},
            'bellem.llama_index.data_structs.data_structs': { 'bellem.llama_index.data_structs.data_structs.KG': ( 'llama_index/llama_index.data_structs.data_structs.html#kg',
                                                                                                                   'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.KG.add_node': ( 'llama_index/llama_index.data_structs.data_structs.html#kg.add_node',
                                                                                                                            'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.KG.add_to_embedding_dict': ( 'llama_index/llama_index.data_structs.data_structs.html#kg.add_to_embedding_dict',
                                                                                                                                         'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.KG.get_type': ( 'llama_index/llama_index.data_structs.data_structs.html#kg.get_type',
                                                                                                                            'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.KG.node_ids': ( 'llama_index/llama_index.data_structs.data_structs.html#kg.node_ids',
                                                                                                                            'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.KG.search_node_by_keyword': ( 'llama_index/llama_index.data_structs.data_structs.html#kg.search_node_by_keyword',
                                                                                                                                          'bellem/llama_index/data_structs/data_structs.py'),
                                                              'bellem.llama_index.data_structs.data_structs.patch_kg_data_struct': ( 'llama_index/llama_index.data_structs.data_structs.html#patch_kg_data_struct',
                                                                                                                                     'bellem/llama_index/data_structs/data_structs.py')},
            'bellem.llama_index.graph_stores.kuzu': { 'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore',
                                                                                                               'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.__init__': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.__init__',
                                                                                                                        'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.client': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.client',
                                                                                                                      'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.delete': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.delete',
                                                                                                                      'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.from_dict': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.from_dict',
                                                                                                                         'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.from_persist_dir': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.from_persist_dir',
                                                                                                                                'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.get': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.get',
                                                                                                                   'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.get_rel_map': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.get_rel_map',
                                                                                                                           'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.init_schema': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.init_schema',
                                                                                                                           'bellem/llama_index/graph_stores/kuzu.py'),
                                                      'bellem.llama_index.graph_stores.kuzu.KuzuGraphStore.upsert_triplet': ( 'llama_index/llama_index.graph_stores.kuzu.html#kuzugraphstore.upsert_triplet',
                                                                                                                              'bellem/llama_index/graph_stores/kuzu.py')},
            'bellem.llama_index.indices.knowledge_graph.base': { 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex',
                                                                                                                                          'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.__init__': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.__init__',
                                                                                                                                                   'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._build_index_from_nodes': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._build_index_from_nodes',
                                                                                                                                                                  'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._delete_node': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._delete_node',
                                                                                                                                                       'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._extract_triplets': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._extract_triplets',
                                                                                                                                                            'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._insert': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._insert',
                                                                                                                                                  'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._llm_extract_triplets': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._llm_extract_triplets',
                                                                                                                                                                'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex._parse_triplet_response': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex._parse_triplet_response',
                                                                                                                                                                  'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.add_node': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.add_node',
                                                                                                                                                   'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.as_retriever': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.as_retriever',
                                                                                                                                                       'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.get_networkx_graph': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.get_networkx_graph',
                                                                                                                                                             'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.graph_store': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.graph_store',
                                                                                                                                                      'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.query_context': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.query_context',
                                                                                                                                                        'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.ref_doc_info': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.ref_doc_info',
                                                                                                                                                       'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.upsert_triplet': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.upsert_triplet',
                                                                                                                                                         'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.KnowledgeGraphIndex.upsert_triplet_and_node': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#knowledgegraphindex.upsert_triplet_and_node',
                                                                                                                                                                  'bellem/llama_index/indices/knowledge_graph/base.py'),
                                                                 'bellem.llama_index.indices.knowledge_graph.base.patch_knowledge_graph_index': ( 'llama_index/llama_index.indices.knowledge_graph.base.html#patch_knowledge_graph_index',
                                                                                                                                                  'bellem/llama_index/indices/knowledge_graph/base.py')},
            'bellem.llama_index.indices.knowledge_graph.retrievers': { 'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever',
                                                                                                                                                   'bellem/llama_index/indices/knowledge_graph/retrievers.py'),
                                                                       'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever.__init__': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever.__init__',
                                                                                                                                                            'bellem/llama_index/indices/knowledge_graph/retrievers.py'),
                                                                       'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever._extract_rel_text_keywords': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever._extract_rel_text_keywords',
                                                                                                                                                                              'bellem/llama_index/indices/knowledge_graph/retrievers.py'),
                                                                       'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever._get_keywords': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever._get_keywords',
                                                                                                                                                                 'bellem/llama_index/indices/knowledge_graph/retrievers.py'),
                                                                       'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever._get_metadata_for_response': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever._get_metadata_for_response',
                                                                                                                                                                              'bellem/llama_index/indices/knowledge_graph/retrievers.py'),
                                                                       'bellem.llama_index.indices.knowledge_graph.retrievers.KGTableRetriever._retrieve': ( 'llama_index/llama_index.indices.knowledge_graph.retrievers.html#kgtableretriever._retrieve',
                                                                                                                                                             'bellem/llama_index/indices/knowledge_graph/retrievers.py')},
            'bellem.llama_index.obs': { 'bellem.llama_index.obs.FileSpanExporter': ( 'llama_index/llama_index.obs.html#filespanexporter',
                                                                                     'bellem/llama_index/obs.py'),
                                        'bellem.llama_index.obs.FileSpanExporter.__init__': ( 'llama_index/llama_index.obs.html#filespanexporter.__init__',
                                                                                              'bellem/llama_index/obs.py'),
                                        'bellem.llama_index.obs.FileSpanExporter._generate_filename': ( 'llama_index/llama_index.obs.html#filespanexporter._generate_filename',
                                                                                                        'bellem/llama_index/obs.py'),
                                        'bellem.llama_index.obs.FileSpanExporter.export': ( 'llama_index/llama_index.obs.html#filespanexporter.export',
                                                                                            'bellem/llama_index/obs.py'),
                                        'bellem.llama_index.obs.make_phoenix_trace_callback_handler': ( 'llama_index/llama_index.obs.html#make_phoenix_trace_callback_handler',
                                                                                                        'bellem/llama_index/obs.py')},
            'bellem.logging': {'bellem.logging.get_logger': ('core/logging.html#get_logger', 'bellem/logging.py')},
            'bellem.ml.dataset.imagenet': { 'bellem.ml.dataset.imagenet.fetch_imagenet_label_synsets': ( 'misc/ml.dataset.imagenet.html#fetch_imagenet_label_synsets',
                                                                                                         'bellem/ml/dataset/imagenet.py'),
                                            'bellem.ml.dataset.imagenet.get_imagenet_id_label_map': ( 'misc/ml.dataset.imagenet.html#get_imagenet_id_label_map',
                                                                                                      'bellem/ml/dataset/imagenet.py'),
                                            'bellem.ml.dataset.imagenet.get_imagenet_id_synset_map': ( 'misc/ml.dataset.imagenet.html#get_imagenet_id_synset_map',
                                                                                                       'bellem/ml/dataset/imagenet.py'),
                                            'bellem.ml.dataset.imagenet.make_imagenet_id_synset_map': ( 'misc/ml.dataset.imagenet.html#make_imagenet_id_synset_map',
                                                                                                        'bellem/ml/dataset/imagenet.py')},
            'bellem.ml.dataset.lang': { 'bellem.ml.dataset.lang.alpaca2openai': ( 'misc/ml.dataset.lang.html#alpaca2openai',
                                                                                  'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.alpaca2sharegpt': ( 'misc/ml.dataset.lang.html#alpaca2sharegpt',
                                                                                    'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.openai2sharegpt': ( 'misc/ml.dataset.lang.html#openai2sharegpt',
                                                                                    'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.openai2sharegpt_message': ( 'misc/ml.dataset.lang.html#openai2sharegpt_message',
                                                                                            'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.partition_input_output_messages': ( 'misc/ml.dataset.lang.html#partition_input_output_messages',
                                                                                                    'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.sharegpt2openai': ( 'misc/ml.dataset.lang.html#sharegpt2openai',
                                                                                    'bellem/ml/dataset/lang.py'),
                                        'bellem.ml.dataset.lang.sharegpt2openai_message': ( 'misc/ml.dataset.lang.html#sharegpt2openai_message',
                                                                                            'bellem/ml/dataset/lang.py')},
            'bellem.ml.vision': { 'bellem.ml.vision.Make3Channel': ('nn/nn.vision.html#make3channel', 'bellem/ml/vision.py'),
                                  'bellem.ml.vision.Make3Channel.__call__': ( 'nn/nn.vision.html#make3channel.__call__',
                                                                              'bellem/ml/vision.py'),
                                  'bellem.ml.vision.Make3Channel.__repr__': ( 'nn/nn.vision.html#make3channel.__repr__',
                                                                              'bellem/ml/vision.py'),
                                  'bellem.ml.vision.TorchVisionTransform': ( 'nn/nn.vision.html#torchvisiontransform',
                                                                             'bellem/ml/vision.py'),
                                  'bellem.ml.vision.TorchVisionTransform.__init__': ( 'nn/nn.vision.html#torchvisiontransform.__init__',
                                                                                      'bellem/ml/vision.py'),
                                  'bellem.ml.vision.TorchVisionTransform.encodes': ( 'nn/nn.vision.html#torchvisiontransform.encodes',
                                                                                     'bellem/ml/vision.py')},
            'bellem.musique.baseline': { 'bellem.musique.baseline.BaselineMultiHop': ( 'musique/musique.baseline.html#baselinemultihop',
                                                                                       'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineMultiHop.__call__': ( 'musique/musique.baseline.html#baselinemultihop.__call__',
                                                                                                'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineMultiHop.__init__': ( 'musique/musique.baseline.html#baselinemultihop.__init__',
                                                                                                'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineMultiHop._call': ( 'musique/musique.baseline.html#baselinemultihop._call',
                                                                                             'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineSingleHop': ( 'musique/musique.baseline.html#baselinesinglehop',
                                                                                        'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineSingleHop.__call__': ( 'musique/musique.baseline.html#baselinesinglehop.__call__',
                                                                                                 'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineSingleHop.__init__': ( 'musique/musique.baseline.html#baselinesinglehop.__init__',
                                                                                                 'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.BaselineSingleHop._call': ( 'musique/musique.baseline.html#baselinesinglehop._call',
                                                                                              'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.QuestionAnsweringResult': ( 'musique/musique.baseline.html#questionansweringresult',
                                                                                              'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.benchmark': ( 'musique/musique.baseline.html#benchmark',
                                                                                'bellem/musique/baseline.py'),
                                         'bellem.musique.baseline.make_docs': ( 'musique/musique.baseline.html#make_docs',
                                                                                'bellem/musique/baseline.py')},
            'bellem.musique.benchmark': { 'bellem.musique.benchmark.benchmark': ( 'musique/musique.benchmark.html#benchmark',
                                                                                  'bellem/musique/benchmark.py')},
            'bellem.musique.constants': {},
            'bellem.musique.eval': { 'bellem.musique.eval.aggregate_scores': ( 'musique/musique.eval.html#aggregate_scores',
                                                                               'bellem/musique/eval.py'),
                                     'bellem.musique.eval.compute_exact_match': ( 'musique/musique.eval.html#compute_exact_match',
                                                                                  'bellem/musique/eval.py'),
                                     'bellem.musique.eval.compute_f1': ('musique/musique.eval.html#compute_f1', 'bellem/musique/eval.py'),
                                     'bellem.musique.eval.compute_scores': ( 'musique/musique.eval.html#compute_scores',
                                                                             'bellem/musique/eval.py'),
                                     'bellem.musique.eval.compute_scores_dataframe': ( 'musique/musique.eval.html#compute_scores_dataframe',
                                                                                       'bellem/musique/eval.py'),
                                     'bellem.musique.eval.fuzzy_match_metric': ( 'musique/musique.eval.html#fuzzy_match_metric',
                                                                                 'bellem/musique/eval.py'),
                                     'bellem.musique.eval.get_tokens': ('musique/musique.eval.html#get_tokens', 'bellem/musique/eval.py'),
                                     'bellem.musique.eval.metric_max_over_ground_truths': ( 'musique/musique.eval.html#metric_max_over_ground_truths',
                                                                                            'bellem/musique/eval.py'),
                                     'bellem.musique.eval.normalize_answer': ( 'musique/musique.eval.html#normalize_answer',
                                                                               'bellem/musique/eval.py')},
            'bellem.musique.models': { 'bellem.musique.models.QuestionAnsweringResult': ( 'musique/musique.models.html#questionansweringresult',
                                                                                          'bellem/musique/models.py')},
            'bellem.musique.multihop': { 'bellem.musique.multihop.BaselineMultiHop': ( 'musique/musique.multihop.html#baselinemultihop',
                                                                                       'bellem/musique/multihop.py'),
                                         'bellem.musique.multihop.BaselineMultiHop.__call__': ( 'musique/musique.multihop.html#baselinemultihop.__call__',
                                                                                                'bellem/musique/multihop.py'),
                                         'bellem.musique.multihop.BaselineMultiHop.__init__': ( 'musique/musique.multihop.html#baselinemultihop.__init__',
                                                                                                'bellem/musique/multihop.py'),
                                         'bellem.musique.multihop.BaselineMultiHop._call': ( 'musique/musique.multihop.html#baselinemultihop._call',
                                                                                             'bellem/musique/multihop.py'),
                                         'bellem.musique.multihop.make_docs': ( 'musique/musique.multihop.html#make_docs',
                                                                                'bellem/musique/multihop.py')},
            'bellem.musique.multihopjerx': { 'bellem.musique.multihopjerx.BaselineMultiHop': ( 'musique/musique.multihopjerx.html#baselinemultihop',
                                                                                               'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.BaselineMultiHop.__call__': ( 'musique/musique.multihopjerx.html#baselinemultihop.__call__',
                                                                                                        'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.BaselineMultiHop.__init__': ( 'musique/musique.multihopjerx.html#baselinemultihop.__init__',
                                                                                                        'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.BaselineMultiHop._call': ( 'musique/musique.multihopjerx.html#baselinemultihop._call',
                                                                                                     'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.QuestionAnsweringResult': ( 'qa.llm.html#questionansweringresult',
                                                                                                      'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.benchmark': ( 'musique/musique.multihopjerx.html#benchmark',
                                                                                        'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.make_docs': ( 'musique/musique.multihopjerx.html#make_docs',
                                                                                        'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.make_qa_chat': ( 'musique/musique.multihopjerx.html#make_qa_chat',
                                                                                           'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.make_question_answer_func': ( 'qa.llm.html#make_question_answer_func',
                                                                                                        'bellem/musique/multihopjerx.py'),
                                             'bellem.musique.multihopjerx.parse_llm_generation': ( 'qa.llm.html#parse_llm_generation',
                                                                                                   'bellem/musique/multihopjerx.py')},
            'bellem.musique.nhop': { 'bellem.musique.nhop.BaselineMultiHop': ( 'musique/musique.multihop.html#baselinemultihop',
                                                                               'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.BaselineMultiHop.__call__': ( 'musique/musique.multihop.html#baselinemultihop.__call__',
                                                                                        'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.BaselineMultiHop.__init__': ( 'musique/musique.multihop.html#baselinemultihop.__init__',
                                                                                        'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.BaselineMultiHop._call': ( 'musique/musique.multihop.html#baselinemultihop._call',
                                                                                     'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.QuestionAnsweringResult': ( 'musique/musique.multihop.html#questionansweringresult',
                                                                                      'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.Result': ('musique/musique.multihop.html#result', 'bellem/musique/nhop.py'),
                                     'bellem.musique.nhop.make_docs': ( 'musique/musique.multihop.html#make_docs',
                                                                        'bellem/musique/nhop.py')},
            'bellem.musique.qa': { 'bellem.musique.qa.load_qa_func': ('musique/musique.qa.html#load_qa_func', 'bellem/musique/qa.py'),
                                   'bellem.musique.qa.make_qa_func': ('musique/musique.qa.html#make_qa_func', 'bellem/musique/qa.py'),
                                   'bellem.musique.qa.parse_answer': ('musique/musique.qa.html#parse_answer', 'bellem/musique/qa.py'),
                                   'bellem.musique.qa.self_consistency_decorator': ( 'musique/musique.qa.html#self_consistency_decorator',
                                                                                     'bellem/musique/qa.py')},
            'bellem.musique.singlehop': { 'bellem.musique.singlehop.BaselineSingleHop': ( 'musique/musique.singlehop.html#baselinesinglehop',
                                                                                          'bellem/musique/singlehop.py'),
                                          'bellem.musique.singlehop.BaselineSingleHop.__call__': ( 'musique/musique.singlehop.html#baselinesinglehop.__call__',
                                                                                                   'bellem/musique/singlehop.py'),
                                          'bellem.musique.singlehop.BaselineSingleHop.__init__': ( 'musique/musique.singlehop.html#baselinesinglehop.__init__',
                                                                                                   'bellem/musique/singlehop.py'),
                                          'bellem.musique.singlehop.BaselineSingleHop._call': ( 'musique/musique.singlehop.html#baselinesinglehop._call',
                                                                                                'bellem/musique/singlehop.py'),
                                          'bellem.musique.singlehop.make_docs': ( 'musique/musique.singlehop.html#make_docs',
                                                                                  'bellem/musique/singlehop.py')},
            'bellem.musique.twohop': { 'bellem.musique.twohop.BaselineMultiHop': ( 'musique/musique.twohop.html#baselinemultihop',
                                                                                   'bellem/musique/twohop.py'),
                                       'bellem.musique.twohop.BaselineMultiHop.__call__': ( 'musique/musique.twohop.html#baselinemultihop.__call__',
                                                                                            'bellem/musique/twohop.py'),
                                       'bellem.musique.twohop.BaselineMultiHop.__init__': ( 'musique/musique.twohop.html#baselinemultihop.__init__',
                                                                                            'bellem/musique/twohop.py'),
                                       'bellem.musique.twohop.BaselineMultiHop._call': ( 'musique/musique.twohop.html#baselinemultihop._call',
                                                                                         'bellem/musique/twohop.py'),
                                       'bellem.musique.twohop.make_docs': ( 'musique/musique.twohop.html#make_docs',
                                                                            'bellem/musique/twohop.py')},
            'bellem.nn.clip': { 'bellem.nn.clip.ClipClassificationHead': ('nn/nn.clip.html#clipclassificationhead', 'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipClassificationHead.__init__': ( 'nn/nn.clip.html#clipclassificationhead.__init__',
                                                                                    'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipClassificationHead.forward': ( 'nn/nn.clip.html#clipclassificationhead.forward',
                                                                                   'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipZeroShotClassifier': ('nn/nn.clip.html#clipzeroshotclassifier', 'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipZeroShotClassifier.__init__': ( 'nn/nn.clip.html#clipzeroshotclassifier.__init__',
                                                                                    'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipZeroShotClassifier.compute_text_features': ( 'nn/nn.clip.html#clipzeroshotclassifier.compute_text_features',
                                                                                                 'bellem/nn/clip.py'),
                                'bellem.nn.clip.ClipZeroShotClassifier.forward': ( 'nn/nn.clip.html#clipzeroshotclassifier.forward',
                                                                                   'bellem/nn/clip.py'),
                                'bellem.nn.clip.load_clip_preprocess': ('nn/nn.clip.html#load_clip_preprocess', 'bellem/nn/clip.py'),
                                'bellem.nn.clip.make_tfms_from_clip_preprocess': ( 'nn/nn.clip.html#make_tfms_from_clip_preprocess',
                                                                                   'bellem/nn/clip.py')},
            'bellem.nn.layer': { 'bellem.nn.layer.GradReverse': ('nn/nn.layer.html#gradreverse', 'bellem/nn/layer.py'),
                                 'bellem.nn.layer.GradReverse.__init__': ('nn/nn.layer.html#gradreverse.__init__', 'bellem/nn/layer.py'),
                                 'bellem.nn.layer.GradReverse.forward': ('nn/nn.layer.html#gradreverse.forward', 'bellem/nn/layer.py'),
                                 'bellem.nn.layer.reverse_grad': ('nn/nn.layer.html#reverse_grad', 'bellem/nn/layer.py'),
                                 'bellem.nn.layer.reverse_grad.backward': ('nn/nn.layer.html#reverse_grad.backward', 'bellem/nn/layer.py'),
                                 'bellem.nn.layer.reverse_grad.forward': ('nn/nn.layer.html#reverse_grad.forward', 'bellem/nn/layer.py')},
            'bellem.nn.loss': { 'bellem.nn.loss.BinaryFocalLoss': ('nn/nn.loss.html#binaryfocalloss', 'bellem/nn/loss.py'),
                                'bellem.nn.loss.BinaryFocalLoss.__init__': ( 'nn/nn.loss.html#binaryfocalloss.__init__',
                                                                             'bellem/nn/loss.py'),
                                'bellem.nn.loss.BinaryFocalLoss.activation': ( 'nn/nn.loss.html#binaryfocalloss.activation',
                                                                               'bellem/nn/loss.py'),
                                'bellem.nn.loss.BinaryFocalLoss.decodes': ('nn/nn.loss.html#binaryfocalloss.decodes', 'bellem/nn/loss.py'),
                                'bellem.nn.loss.BinaryFocalLoss.forward': ('nn/nn.loss.html#binaryfocalloss.forward', 'bellem/nn/loss.py')},
            'bellem.nn.vision': { 'bellem.nn.vision.Make3Channel': ('nn/nn.vision.html#make3channel', 'bellem/nn/vision.py'),
                                  'bellem.nn.vision.Make3Channel.__call__': ( 'nn/nn.vision.html#make3channel.__call__',
                                                                              'bellem/nn/vision.py'),
                                  'bellem.nn.vision.Make3Channel.__repr__': ( 'nn/nn.vision.html#make3channel.__repr__',
                                                                              'bellem/nn/vision.py'),
                                  'bellem.nn.vision.TorchVisionTransform': ( 'nn/nn.vision.html#torchvisiontransform',
                                                                             'bellem/nn/vision.py'),
                                  'bellem.nn.vision.TorchVisionTransform.__init__': ( 'nn/nn.vision.html#torchvisiontransform.__init__',
                                                                                      'bellem/nn/vision.py'),
                                  'bellem.nn.vision.TorchVisionTransform.encodes': ( 'nn/nn.vision.html#torchvisiontransform.encodes',
                                                                                     'bellem/nn/vision.py')},
            'bellem.qa.guided': { 'bellem.qa.guided.QuestionAnsweringResultCOT': ( 'qa/qa.guided.html#questionansweringresultcot',
                                                                                   'bellem/qa/guided.py'),
                                  'bellem.qa.guided.QuestionAnsweringResultCOTFS': ( 'qa/qa.guided.html#questionansweringresultcotfs',
                                                                                     'bellem/qa/guided.py'),
                                  'bellem.qa.guided.QuestionAnsweringResultCTE': ( 'qa/qa.guided.html#questionansweringresultcte',
                                                                                   'bellem/qa/guided.py'),
                                  'bellem.qa.guided.QuestionAnsweringResultCTECOT': ( 'qa/qa.guided.html#questionansweringresultctecot',
                                                                                      'bellem/qa/guided.py'),
                                  'bellem.qa.guided.QuestionAnsweringResultStandard': ( 'qa/qa.guided.html#questionansweringresultstandard',
                                                                                        'bellem/qa/guided.py'),
                                  'bellem.qa.guided._QuestionAnsweringResultCTE': ( 'qa/qa.guided.html#_questionansweringresultcte',
                                                                                    'bellem/qa/guided.py'),
                                  'bellem.qa.guided._answer_question_cte': ( 'qa/qa.guided.html#_answer_question_cte',
                                                                             'bellem/qa/guided.py'),
                                  'bellem.qa.guided.answer_question_cot': ('qa/qa.guided.html#answer_question_cot', 'bellem/qa/guided.py'),
                                  'bellem.qa.guided.answer_question_cot_fs': ( 'qa/qa.guided.html#answer_question_cot_fs',
                                                                               'bellem/qa/guided.py'),
                                  'bellem.qa.guided.answer_question_cte': ('qa/qa.guided.html#answer_question_cte', 'bellem/qa/guided.py'),
                                  'bellem.qa.guided.answer_question_cte_cot': ( 'qa/qa.guided.html#answer_question_cte_cot',
                                                                                'bellem/qa/guided.py'),
                                  'bellem.qa.guided.answer_question_standard': ( 'qa/qa.guided.html#answer_question_standard',
                                                                                 'bellem/qa/guided.py')},
            'bellem.qa.llm.single': { 'bellem.qa.llm.single.QuestionAnsweringResult': ( 'qa/qa.single.html#questionansweringresult',
                                                                                        'bellem/qa/llm/single.py'),
                                      'bellem.qa.llm.single.make_qa_chat': ('qa/qa.single.html#make_qa_chat', 'bellem/qa/llm/single.py'),
                                      'bellem.qa.llm.single.make_question_answer_func': ( 'qa/qa.single.html#make_question_answer_func',
                                                                                          'bellem/qa/llm/single.py'),
                                      'bellem.qa.llm.single.parse_llm_generation': ( 'qa/qa.single.html#parse_llm_generation',
                                                                                     'bellem/qa/llm/single.py')},
            'bellem.qa.multi': { 'bellem.qa.multi.load_qa_func': ('qa/qa.multi.html#load_qa_func', 'bellem/qa/multi.py'),
                                 'bellem.qa.multi.make_qa_func': ('qa/qa.multi.html#make_qa_func', 'bellem/qa/multi.py')},
            'bellem.qa.qdecomp': { 'bellem.qa.qdecomp.make_question_decomposer': ( 'qa/qa.qdecomp.html#make_question_decomposer',
                                                                                   'bellem/qa/qdecomp.py'),
                                   'bellem.qa.qdecomp.parse_llm_generation': ( 'qa/qa.qdecomp.html#parse_llm_generation',
                                                                               'bellem/qa/qdecomp.py')},
            'bellem.qa.single': { 'bellem.qa.single.QuestionAnsweringResult': ( 'qa/qa.single.html#questionansweringresult',
                                                                                'bellem/qa/single.py'),
                                  'bellem.qa.single.make_qa_chat': ('qa/qa.single.html#make_qa_chat', 'bellem/qa/single.py'),
                                  'bellem.qa.single.make_question_answer_func': ( 'qa/qa.single.html#make_question_answer_func',
                                                                                  'bellem/qa/single.py'),
                                  'bellem.qa.single.parse_llm_generation': ( 'qa/qa.single.html#parse_llm_generation',
                                                                             'bellem/qa/single.py')},
            'bellem.testing': { 'bellem.testing.fixture_directory': ('testing.html#fixture_directory', 'bellem/testing.py'),
                                'bellem.testing.fixture_path': ('testing.html#fixture_path', 'bellem/testing.py')},
            'bellem.text.utils': { 'bellem.text.utils.fuzzy_match': ('misc/text.utils.html#fuzzy_match', 'bellem/text/utils.py'),
                                   'bellem.text.utils.similarity': ('misc/text.utils.html#similarity', 'bellem/text/utils.py')},
            'bellem.torch.dataset.utils': { 'bellem.torch.dataset.utils.ListDataset': ( 'misc/torch.dataset.utils.html#listdataset',
                                                                                        'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ListDataset.__getitem__': ( 'misc/torch.dataset.utils.html#listdataset.__getitem__',
                                                                                                    'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ListDataset.__init__': ( 'misc/torch.dataset.utils.html#listdataset.__init__',
                                                                                                 'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ListDataset.__len__': ( 'misc/torch.dataset.utils.html#listdataset.__len__',
                                                                                                'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataLoader': ( 'misc/torch.dataset.utils.html#zippeddataloader',
                                                                                             'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataLoader.__init__': ( 'misc/torch.dataset.utils.html#zippeddataloader.__init__',
                                                                                                      'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataLoader.__iter__': ( 'misc/torch.dataset.utils.html#zippeddataloader.__iter__',
                                                                                                      'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataLoader.__next__': ( 'misc/torch.dataset.utils.html#zippeddataloader.__next__',
                                                                                                      'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataset': ( 'misc/torch.dataset.utils.html#zippeddataset',
                                                                                          'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataset.__getitem__': ( 'misc/torch.dataset.utils.html#zippeddataset.__getitem__',
                                                                                                      'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataset.__init__': ( 'misc/torch.dataset.utils.html#zippeddataset.__init__',
                                                                                                   'bellem/torch/dataset/utils.py'),
                                            'bellem.torch.dataset.utils.ZippedDataset.__len__': ( 'misc/torch.dataset.utils.html#zippeddataset.__len__',
                                                                                                  'bellem/torch/dataset/utils.py')},
            'bellem.transformers.experiment': { 'bellem.transformers.experiment._load_tokenizer_model': ( 'transformers/transformers.experiment.html#_load_tokenizer_model',
                                                                                                          'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.calculate_token_counts': ( 'transformers/transformers.experiment.html#calculate_token_counts',
                                                                                                           'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.evaluate_': ( 'transformers/transformers.experiment.html#evaluate_',
                                                                                              'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.fine_tune': ( 'transformers/transformers.experiment.html#fine_tune',
                                                                                              'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.make_datacollator': ( 'transformers/transformers.experiment.html#make_datacollator',
                                                                                                      'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.make_pipeline': ( 'transformers/transformers.experiment.html#make_pipeline',
                                                                                                  'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.predict': ( 'transformers/transformers.experiment.html#predict',
                                                                                            'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.prepare_config_for_fp': ( 'transformers/transformers.experiment.html#prepare_config_for_fp',
                                                                                                          'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.prepare_model_for_inference': ( 'transformers/transformers.experiment.html#prepare_model_for_inference',
                                                                                                                'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.prepare_model_for_training': ( 'transformers/transformers.experiment.html#prepare_model_for_training',
                                                                                                               'bellem/transformers/experiment.py'),
                                                'bellem.transformers.experiment.preprocess_config': ( 'transformers/transformers.experiment.html#preprocess_config',
                                                                                                      'bellem/transformers/experiment.py')},
            'bellem.transformers.generation': { 'bellem.transformers.generation.flat_pipeline': ( 'transformers/transformers.generation.html#flat_pipeline',
                                                                                                  'bellem/transformers/generation.py'),
                                                'bellem.transformers.generation.generate': ( 'transformers/transformers.generation.html#generate',
                                                                                             'bellem/transformers/generation.py'),
                                                'bellem.transformers.generation.preprocess_generation_params': ( 'transformers/transformers.generation.html#preprocess_generation_params',
                                                                                                                 'bellem/transformers/generation.py')},
            'bellem.transformers.llama3': { 'bellem.transformers.llama3.prepare_llama3_for_inference': ( 'transformers/transformers.llama3.html#prepare_llama3_for_inference',
                                                                                                         'bellem/transformers/llama3.py'),
                                            'bellem.transformers.llama3.prepare_llama3_for_training': ( 'transformers/transformers.llama3.html#prepare_llama3_for_training',
                                                                                                        'bellem/transformers/llama3.py')},
            'bellem.transformers.utils': { 'bellem.transformers.utils.load_tokenizer_model': ( 'transformers/transformers.utils.html#load_tokenizer_model',
                                                                                               'bellem/transformers/utils.py'),
                                           'bellem.transformers.utils.merge_adapters_and_publish': ( 'transformers/transformers.utils.html#merge_adapters_and_publish',
                                                                                                     'bellem/transformers/utils.py'),
                                           'bellem.transformers.utils.prepare_model_kwargs': ( 'transformers/transformers.utils.html#prepare_model_kwargs',
                                                                                               'bellem/transformers/utils.py')},
            'bellem.utils': { 'bellem.utils.Path.ls_sorted': ('core/utils.html#path.ls_sorted', 'bellem/utils.py'),
                              'bellem.utils.chunk_random': ('core/utils.html#chunk_random', 'bellem/utils.py'),
                              'bellem.utils.context_chdir': ('core/utils.html#context_chdir', 'bellem/utils.py'),
                              'bellem.utils.generate_time_id': ('core/utils.html#generate_time_id', 'bellem/utils.py'),
                              'bellem.utils.is_in': ('core/utils.html#is_in', 'bellem/utils.py'),
                              'bellem.utils.jprint': ('core/utils.html#jprint', 'bellem/utils.py'),
                              'bellem.utils.most_common': ('core/utils.html#most_common', 'bellem/utils.py'),
                              'bellem.utils.print_dict_schema': ('core/utils.html#print_dict_schema', 'bellem/utils.py'),
                              'bellem.utils.set_seed': ('core/utils.html#set_seed', 'bellem/utils.py'),
                              'bellem.utils.split_camel_case': ('core/utils.html#split_camel_case', 'bellem/utils.py')},
            'bellem.wandb.exp': { 'bellem.wandb.exp.after_experiment': ('wandb/wandb.exp.html#after_experiment', 'bellem/wandb/exp.py'),
                                  'bellem.wandb.exp.before_experiment': ('wandb/wandb.exp.html#before_experiment', 'bellem/wandb/exp.py'),
                                  'bellem.wandb.exp.main': ('wandb/wandb.exp.html#main', 'bellem/wandb/exp.py'),
                                  'bellem.wandb.exp.make_experiment_dir': ( 'wandb/wandb.exp.html#make_experiment_dir',
                                                                            'bellem/wandb/exp.py'),
                                  'bellem.wandb.exp.make_run_experiment_sweep': ( 'wandb/wandb.exp.html#make_run_experiment_sweep',
                                                                                  'bellem/wandb/exp.py')},
            'bellem.wandb.utils': { 'bellem.wandb.utils.fetch_wandb_config': ( 'wandb/wandb.utils.html#fetch_wandb_config',
                                                                               'bellem/wandb/utils.py'),
                                    'bellem.wandb.utils.fetch_wandb_run': ( 'wandb/wandb.utils.html#fetch_wandb_run',
                                                                            'bellem/wandb/utils.py'),
                                    'bellem.wandb.utils.generate_run_id': ( 'wandb/wandb.utils.html#generate_run_id',
                                                                            'bellem/wandb/utils.py')}}}
