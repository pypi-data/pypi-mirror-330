# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/access_loggers/fluentd/v3/fluentd.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta
from typing import (
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from .....config.core import v3 as ____config_core_v3__


@dataclass(eq=False, repr=False)
class FluentdAccessLogConfig(betterproto.Message):
    """
    Configuration for the *envoy.access_loggers.fluentd* :ref:`AccessLog
    <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This access log
    extension will send the emitted access logs over a TCP connection to an
    upstream that is accepting the Fluentd Forward Protocol as described in:
    `Fluentd Forward Protocol Specification
    <https://github.com/fluent/fluentd/wiki/Forward-Protocol-
    Specification-v1>`_. [#extension: envoy.access_loggers.fluentd] [#next-
    free-field: 9]
    """

    cluster: str = betterproto.string_field(1)
    """
    The upstream cluster to connect to for streaming the Fluentd messages.
    """

    tag: str = betterproto.string_field(2)
    """
    A tag is a string separated with '.' (e.g. log.type) to categorize events.
    See: https://github.com/fluent/fluentd/wiki/Forward-Protocol-
    Specification-v1#message-modes
    """

    stat_prefix: str = betterproto.string_field(3)
    """
    The prefix to use when emitting :ref:`statistics
    <config_access_log_stats>`.
    """

    buffer_flush_interval: timedelta = betterproto.message_field(4)
    """
    Interval for flushing access logs to the TCP stream. Logger will flush
    requests every time this interval is elapsed, or when batch size limit is
    hit, whichever comes first. Defaults to 1 second.
    """

    buffer_size_bytes: Optional[int] = betterproto.message_field(
        5, wraps=betterproto.TYPE_UINT32
    )
    """
    Soft size limit in bytes for access log entries buffer. The logger will
    buffer requests until this limit it hit, or every time flush interval is
    elapsed, whichever comes first. When the buffer limit is hit, the logger
    will immediately flush the buffer contents. Setting it to zero effectively
    disables the batching. Defaults to 16384.
    """

    record: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(6)
    """
    A struct that represents the record that is sent for each log entry.
    https://github.com/fluent/fluentd/wiki/Forward-Protocol-
    Specification-v1#entry Values are rendered as strings, numbers, or boolean
    values as appropriate. Nested JSON objects may be produced by some command
    operators (e.g. FILTER_STATE or DYNAMIC_METADATA). See :ref:`format
    string<config_access_log_format_strings>` documentation for a specific
    command operator details. .. validated-code-block:: yaml   :type-name:
    envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig   record:
    status: "%RESPONSE_CODE%"     message: "%LOCAL_REPLY_BODY%" The following
    msgpack record would be created: .. code-block:: json  {    "status": 500,
    "message": "My error message"  }
    """

    retry_options: "FluentdAccessLogConfigRetryOptions" = betterproto.message_field(7)
    """
    Optional retry, in case upstream connection has failed. If this field is
    not set, the default values will be applied, as specified in the
    :ref:`RetryOptions <envoy_v3_api_msg_extensions.access_loggers.fluentd.v3.F
    luentdAccessLogConfig.RetryOptions>` configuration.
    """

    formatters: List["____config_core_v3__.TypedExtensionConfig"] = (
        betterproto.message_field(8)
    )
    """
    Specifies a collection of Formatter plugins that can be called from the
    access log configuration. See the formatters extensions documentation for
    details. [#extension-category: envoy.formatter]
    """


@dataclass(eq=False, repr=False)
class FluentdAccessLogConfigRetryOptions(betterproto.Message):
    max_connect_attempts: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )
    """
    The number of times the logger will attempt to connect to the upstream
    during reconnects. By default, there is no limit. The logger will attempt
    to reconnect to the upstream each time connecting to the upstream failed or
    the upstream connection had been closed for any reason.
    """

    backoff_options: "____config_core_v3__.BackoffStrategy" = betterproto.message_field(
        2
    )
    """
    Sets the backoff strategy. If this value is not set, the default base
    backoff interval is 500 milliseconds and the default max backoff interval
    is 5 seconds (10 times the base interval).
    """
