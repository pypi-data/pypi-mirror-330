# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/thrift_proxy/filters/header_to_metadata/v3/header_to_metadata.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ........type.matcher import v3 as _______type_matcher_v3__


class HeaderToMetadataValueType(betterproto.Enum):
    STRING = 0
    NUMBER = 1
    PROTOBUF_VALUE = 2
    """
    The value is a serialized `protobuf.Value <https://github.com/protocolbuffe
    rs/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    """


class HeaderToMetadataValueEncode(betterproto.Enum):
    """ValueEncode defines the encoding algorithm."""

    NONE = 0
    """The value is not encoded."""

    BASE64 = 1
    """
    The value is encoded in `Base64
    <https://tools.ietf.org/html/rfc4648#section-4>`_. Note: this is mostly
    used for STRING and PROTOBUF_VALUE to escape the non-ASCII characters in
    the header.
    """


@dataclass(eq=False, repr=False)
class HeaderToMetadata(betterproto.Message):
    request_rules: List["HeaderToMetadataRule"] = betterproto.message_field(1)
    """The list of rules to apply to requests."""


@dataclass(eq=False, repr=False)
class HeaderToMetadataKeyValuePair(betterproto.Message):
    """[#next-free-field: 7]"""

    metadata_namespace: str = betterproto.string_field(1)
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: str = betterproto.string_field(2)
    """The key to use within the namespace."""

    value: str = betterproto.string_field(3, group="value_type")
    """
    The value to pair with the given key. When used for on_present case, if
    value is non-empty it'll be used instead of the header value. If both are
    empty, the header value is used as-is. When used for on_missing case, a
    non-empty value must be provided.
    """

    regex_value_rewrite: "_______type_matcher_v3__.RegexMatchAndSubstitute" = (
        betterproto.message_field(4, group="value_type")
    )
    """
    If present, the header's value will be matched and substituted with this.
    If there is no match or substitution, the header value is used as-is. This
    is only used for on_present.
    """

    type: "HeaderToMetadataValueType" = betterproto.enum_field(5)
    """The value's type — defaults to string."""

    encode: "HeaderToMetadataValueEncode" = betterproto.enum_field(6)
    """
    How is the value encoded, default is NONE (not encoded). The value will be
    decoded accordingly before storing to metadata.
    """


@dataclass(eq=False, repr=False)
class HeaderToMetadataRule(betterproto.Message):
    """
    A Rule defines what metadata to apply when a header is present or missing.
    """

    header: str = betterproto.string_field(1)
    """
    Specifies that a match will be performed on the value of a header. The
    header to be extracted.
    """

    on_present: "HeaderToMetadataKeyValuePair" = betterproto.message_field(2)
    """
    If the header is present, apply this metadata KeyValuePair. If the value in
    the KeyValuePair is non-empty, it'll be used instead of the header value.
    """

    on_missing: "HeaderToMetadataKeyValuePair" = betterproto.message_field(3)
    """
    If the header is not present, apply this metadata KeyValuePair. The value
    in the KeyValuePair must be set, since it'll be used in lieu of the missing
    header value.
    """

    remove: bool = betterproto.bool_field(4)
    """
    Whether or not to remove the header after a rule is applied. This prevents
    headers from leaking.
    """
