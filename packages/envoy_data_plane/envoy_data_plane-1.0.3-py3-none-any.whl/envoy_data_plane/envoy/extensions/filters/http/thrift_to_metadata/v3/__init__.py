# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/thrift_to_metadata/v3/thrift_to_metadata.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from ....network.thrift_proxy import v3 as ___network_thrift_proxy_v3__


class Field(betterproto.Enum):
    METHOD_NAME = 0
    """The Thrift method name, string value."""

    PROTOCOL = 1
    """
    The Thrift protocol name, string value. Values are "binary", "binary/non-
    strict", and "compact", with "(auto)" suffix if :ref:`protocol <envoy_v3_ap
    i_field_extensions.filters.http.thrift_to_metadata.v3.ThriftToMetadata.prot
    ocol>` is set to :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.fil
    ters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
    """

    TRANSPORT = 2
    """
    The Thrift transport name, string value. Values are "framed", "header", and
    "unframed", with "(auto)" suffix if :ref:`transport <envoy_v3_api_field_ext
    ensions.filters.http.thrift_to_metadata.v3.ThriftToMetadata.transport>` is
    set to :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.netw
    ork.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`
    """

    HEADER_FLAGS = 3
    """The Thrift message type, singed 16-bit integer value."""

    SEQUENCE_ID = 4
    """The Thrift sequence ID, singed 32-bit integer value."""

    MESSAGE_TYPE = 5
    """
    The Thrift message type, string value. Values in request are "call" and
    "oneway", and in response are "reply" and "exception".
    """

    REPLY_TYPE = 6
    """
    The Thrift reply type, string value. This is only valid for response rules.
    Values are "success" and "error".
    """


@dataclass(eq=False, repr=False)
class KeyValuePair(betterproto.Message):
    metadata_namespace: str = betterproto.string_field(1)
    """
    The namespace â€” if this is empty, the filter's namespace will be used.
    """

    key: str = betterproto.string_field(2)
    """The key to use within the namespace."""

    value: "betterproto_lib_google_protobuf.Value" = betterproto.message_field(3)
    """
    When used for on_present case, if value is non-empty it'll be used instead
    of the field value. When used for on_missing case, a non-empty value must
    be provided.
    """


@dataclass(eq=False, repr=False)
class FieldSelector(betterproto.Message):
    name: str = betterproto.string_field(1)
    """field name to log"""

    id: int = betterproto.int32_field(2)
    """field id to match"""

    child: "FieldSelector" = betterproto.message_field(3)
    """next node of the field selector"""


@dataclass(eq=False, repr=False)
class Rule(betterproto.Message):
    """[#next-free-field: 6]"""

    field: "Field" = betterproto.enum_field(1)
    """The field to match on. If set, takes precedence over field_selector."""

    field_selector: "FieldSelector" = betterproto.message_field(2)
    """
    Specifies that a match will be performed on the value of a field in the
    thrift body. If set, the whole http body will be buffered to extract the
    field value, which may have performance implications. It's a thrift over
    http version of :ref:`field_selector<envoy_v3_api_field_extensions.filters.
    network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule.
    field_selector>`. See also `payload-to-metadata <https://www.envoyproxy.io/
    docs/envoy/latest/configuration/other_protocols/thrift_filters/payload_to_m
    etadata_filter>`_ for more reference. Example: .. code-block:: yaml
    method_name: foo    field_selector:      name: info      id: 2      child:
    name: version        id: 1 The above yaml will match on value of
    ``info.version`` in the below thrift schema as input of :ref:`on_present<en
    voy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.Rule.on_pres
    ent>` or :ref:`on_missing<envoy_v3_api_field_extensions.filters.http.thrift
    _to_metadata.v3.Rule.on_missing>` while we are processing ``foo`` method.
    This rule won't be applied to ``bar`` method. .. code-block:: thrift
    struct Info {      1: required string version;    }    service Server {
    bool foo(1: i32 id, 2: Info info);      bool bar(1: i32 id, 2: Info info);
    }
    """

    method_name: str = betterproto.string_field(3)
    """
    If specified, :ref:`field_selector<envoy_v3_api_field_extensions.filters.ht
    tp.thrift_to_metadata.v3.Rule.field_selector>` will be used to extract the
    field value *only* on the thrift message with method name.
    """

    on_present: "KeyValuePair" = betterproto.message_field(4)
    """
    The key-value pair to set in the *filter metadata* if the field is present
    in *thrift metadata*. If the value in the KeyValuePair is non-empty, it'll
    be used instead of field value.
    """

    on_missing: "KeyValuePair" = betterproto.message_field(5)
    """
    The key-value pair to set in the *filter metadata* if the field is missing
    in *thrift metadata*. The value in the KeyValuePair must be set, since
    it'll be used in lieu of the missing field value.
    """


@dataclass(eq=False, repr=False)
class ThriftToMetadata(betterproto.Message):
    """
    The configuration for transforming thrift metadata into filter metadata.
    [#next-free-field: 7]
    """

    request_rules: List["Rule"] = betterproto.message_field(1)
    """
    The list of rules to apply to http request body to extract thrift metadata.
    """

    response_rules: List["Rule"] = betterproto.message_field(2)
    """
    The list of rules to apply to http response body to extract thrift
    metadata.
    """

    transport: "___network_thrift_proxy_v3__.TransportType" = betterproto.enum_field(3)
    """
    Supplies the type of transport that the Thrift proxy should use. Defaults
    to :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.
    thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
    """

    protocol: "___network_thrift_proxy_v3__.ProtocolType" = betterproto.enum_field(4)
    """
    Supplies the type of protocol that the Thrift proxy should use. Defaults to
    :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thri
    ft_proxy.v3.ProtocolType.AUTO_PROTOCOL>`. Note that :ref:`LAX_BINARY<envoy_
    v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.L
    AX_BINARY>` is not distinguished by :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_v
    alue_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>
    `, which is the same with :ref:`thrift_proxy network filter
    <envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProxy>`.
    Note that :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.
    thrift_proxy.v3.ProtocolType.TWITTER>` is not supported due to deprecation
    in envoy.
    """

    allow_content_types: List[str] = betterproto.string_field(5)
    """
    Allowed content-type for thrift payload to filter metadata transformation.
    Default to ``{"application/x-thrift"}``. Set ``allow_empty_content_type``
    if empty/missing content-type header is allowed.
    """

    allow_empty_content_type: bool = betterproto.bool_field(6)
    """
    Allowed empty content-type for thrift payload to filter metadata
    transformation. Default to false.
    """


@dataclass(eq=False, repr=False)
class ThriftToMetadataPerRoute(betterproto.Message):
    """
    Thrift to metadata configuration on a per-route basis, which overrides the
    global configuration for request rules and responses rules.
    """

    request_rules: List["Rule"] = betterproto.message_field(1)
    """
    The list of rules to apply to http request body to extract thrift metadata.
    """

    response_rules: List["Rule"] = betterproto.message_field(2)
    """
    The list of rules to apply to http response body to extract thrift
    metadata.
    """
