# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/proto_message_extraction/v3/config.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import Dict

import betterproto

from ......config.core import v3 as _____config_core_v3__


class ProtoMessageExtractionConfigExtractMode(betterproto.Enum):
    ExtractMode_UNSPECIFIED = 0
    FIRST_AND_LAST = 1
    """
    The filter will extract the first and the last message for for streaming
    cases, containing client-side streaming, server-side streaming or bi-
    directional streaming.
    """


class MethodExtractionExtractDirective(betterproto.Enum):
    ExtractDirective_UNSPECIFIED = 0
    EXTRACT = 1
    """The value of this field will be extracted."""

    EXTRACT_REDACT = 2
    """
    It should be only annotated on Message type fields so if the field isn't
    empty, an empty Struct will be extracted.
    """


@dataclass(eq=False, repr=False)
class ProtoMessageExtractionConfig(betterproto.Message):
    data_source: "_____config_core_v3__.DataSource" = betterproto.message_field(
        1, group="descriptor_set"
    )
    """
    It could be passed by a local file through ``Datasource.filename`` or
    embedded in the ``Datasource.inline_bytes``.
    """

    proto_descriptor_typed_metadata: str = betterproto.string_field(
        2, group="descriptor_set"
    )
    """
    Unimplemented, the key of proto descriptor TypedMetadata. Among filters
    depending on the proto descriptor, we can have a TypedMetadata for proto
    descriptors, so that these filters can share one copy of proto descriptor
    in memory.
    """

    mode: "ProtoMessageExtractionConfigExtractMode" = betterproto.enum_field(3)
    extraction_by_method: Dict[str, "MethodExtraction"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    """
    Specify the message extraction info. The key is the fully qualified gRPC
    method name. ``${package}.${Service}.${Method}``, like
    ``endpoints.examples.bookstore.BookStore.GetShelf`` The value is the
    message extraction information for individual gRPC methods.
    """


@dataclass(eq=False, repr=False)
class MethodExtraction(betterproto.Message):
    """
    This message can be used to support per route config approach later even
    though the Istio doesn't support that so far.
    """

    request_extraction_by_field: Dict[str, "MethodExtractionExtractDirective"] = (
        betterproto.map_field(2, betterproto.TYPE_STRING, betterproto.TYPE_ENUM)
    )
    """
    The mapping of field path to its ExtractDirective for request messages
    """

    response_extraction_by_field: Dict[str, "MethodExtractionExtractDirective"] = (
        betterproto.map_field(3, betterproto.TYPE_STRING, betterproto.TYPE_ENUM)
    )
    """
    The mapping of field path to its ExtractDirective for response messages
    """
