# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/load_balancing_policies/least_request/v3/least_request.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from typing import Optional

import betterproto

from .....config.core import v3 as ____config_core_v3__
from ...common import v3 as __common_v3__


class LeastRequestSelectionMethod(betterproto.Enum):
    """
    Available methods for selecting the host set from which to return the host
    with the fewest active requests.
    """

    N_CHOICES = 0
    """
    Return host with fewest requests from a set of ``choice_count`` randomly
    selected hosts. Best selection method for most scenarios.
    """

    FULL_SCAN = 1
    """
    Return host with fewest requests from all hosts. Useful in some niche use
    cases involving low request rates and one of: (example 1) low request
    limits on workloads, or (example 2) few hosts. Example 1: Consider a
    workload type that can only accept one connection at a time. If such
    workloads are deployed across many hosts, only a small percentage of those
    workloads have zero connections at any given time, and the rate of new
    connections is low, the ``FULL_SCAN`` method is more likely to select a
    suitable host than ``N_CHOICES``. Example 2: Consider a workload type that
    is only deployed on 2 hosts. With default settings, the ``N_CHOICES``
    method will return the host with more active requests 25% of the time. If
    the request rate is sufficiently low, the behavior of always selecting the
    host with least requests as of the last metrics refresh may be preferable.
    """


@dataclass(eq=False, repr=False)
class LeastRequest(betterproto.Message):
    """
    This configuration allows the built-in LEAST_REQUEST LB policy to be
    configured via the LB policy extension point. See the :ref:`load balancing
    architecture overview <arch_overview_load_balancing_types>` for more
    information. [#next-free-field: 7]
    """

    choice_count: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )
    """
    The number of random healthy hosts from which the host with the fewest
    active requests will be chosen. Defaults to 2 so that we perform two-choice
    selection if the field is not set. Only applies to the ``N_CHOICES``
    selection method.
    """

    active_request_bias: "____config_core_v3__.RuntimeDouble" = (
        betterproto.message_field(2)
    )
    """
    The following formula is used to calculate the dynamic weights when hosts
    have different load balancing weights: ``weight = load_balancing_weight /
    (active_requests + 1)^active_request_bias`` The larger the active request
    bias is, the more aggressively active requests will lower the effective
    weight when all host weights are not equal. ``active_request_bias`` must be
    greater than or equal to 0.0. When ``active_request_bias == 0.0`` the Least
    Request Load Balancer doesn't consider the number of active requests at the
    time it picks a host and behaves like the Round Robin Load Balancer. When
    ``active_request_bias > 0.0`` the Least Request Load Balancer scales the
    load balancing weight by the number of active requests at the time it does
    a pick. The value is cached for performance reasons and refreshed whenever
    one of the Load Balancer's host sets changes, e.g., whenever there is a
    host membership update or a host load balancing weight change. .. note::
    This setting only takes effect if all host weights are not equal.
    """

    slow_start_config: "__common_v3__.SlowStartConfig" = betterproto.message_field(3)
    """
    Configuration for slow start mode. If this configuration is not set, slow
    start will not be not enabled.
    """

    locality_lb_config: "__common_v3__.LocalityLbConfig" = betterproto.message_field(4)
    """
    Configuration for local zone aware load balancing or locality weighted load
    balancing.
    """

    enable_full_scan: Optional[bool] = betterproto.message_field(
        5, wraps=betterproto.TYPE_BOOL
    )
    """
    [#not-implemented-hide:] Unused. Replaced by the `selection_method` enum
    for better extensibility.
    """

    selection_method: "LeastRequestSelectionMethod" = betterproto.enum_field(6)
    """
    Method for selecting the host set from which to return the host with the
    fewest active requests. Defaults to ``N_CHOICES``.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("enable_full_scan"):
            warnings.warn(
                "LeastRequest.enable_full_scan is deprecated", DeprecationWarning
            )
