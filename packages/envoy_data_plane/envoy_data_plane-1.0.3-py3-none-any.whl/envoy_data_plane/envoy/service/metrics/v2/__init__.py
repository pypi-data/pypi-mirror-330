# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/metrics/v2/metrics_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .....io.prometheus import client as ____io_prometheus_client__
from ....api.v2 import core as ___api_v2_core__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class StreamMetricsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StreamMetricsMessage(betterproto.Message):
    identifier: "StreamMetricsMessageIdentifier" = betterproto.message_field(1)
    """
    Identifier data effectively is a structured metadata. As a performance
    optimization this will only be sent in the first message on the stream.
    """

    envoy_metrics: List["____io_prometheus_client__.MetricFamily"] = (
        betterproto.message_field(2)
    )
    """A list of metric entries"""


@dataclass(eq=False, repr=False)
class StreamMetricsMessageIdentifier(betterproto.Message):
    node: "___api_v2_core__.Node" = betterproto.message_field(1)
    """The node sending metrics over the stream."""


class MetricsServiceStub(betterproto.ServiceStub):
    async def stream_metrics(
        self,
        stream_metrics_message_iterator: Union[
            AsyncIterable["StreamMetricsMessage"], Iterable["StreamMetricsMessage"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StreamMetricsResponse":
        return await self._stream_unary(
            "/envoy.service.metrics.v2.MetricsService/StreamMetrics",
            stream_metrics_message_iterator,
            StreamMetricsMessage,
            StreamMetricsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricsServiceBase(ServiceBase):

    async def stream_metrics(
        self, stream_metrics_message_iterator: AsyncIterator["StreamMetricsMessage"]
    ) -> "StreamMetricsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_metrics(
        self,
        stream: "grpclib.server.Stream[StreamMetricsMessage, StreamMetricsResponse]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.stream_metrics(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.metrics.v2.MetricsService/StreamMetrics": grpclib.const.Handler(
                self.__rpc_stream_metrics,
                grpclib.const.Cardinality.STREAM_UNARY,
                StreamMetricsMessage,
                StreamMetricsResponse,
            ),
        }
