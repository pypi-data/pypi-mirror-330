# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/trace/v3/trace_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .....opencensus.proto.trace import v1 as ____opencensus_proto_trace_v1__
from ....config.core import v3 as ___config_core_v3__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class StreamTracesResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StreamTracesMessage(betterproto.Message):
    identifier: "StreamTracesMessageIdentifier" = betterproto.message_field(1)
    """
    Identifier data effectively is a structured metadata. As a performance
    optimization this will only be sent in the first message on the stream.
    """

    spans: List["____opencensus_proto_trace_v1__.Span"] = betterproto.message_field(2)
    """A list of Span entries"""


@dataclass(eq=False, repr=False)
class StreamTracesMessageIdentifier(betterproto.Message):
    node: "___config_core_v3__.Node" = betterproto.message_field(1)
    """The node sending the access log messages over the stream."""


class TraceServiceStub(betterproto.ServiceStub):
    async def stream_traces(
        self,
        stream_traces_message_iterator: Union[
            AsyncIterable["StreamTracesMessage"], Iterable["StreamTracesMessage"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StreamTracesResponse":
        return await self._stream_unary(
            "/envoy.service.trace.v3.TraceService/StreamTraces",
            stream_traces_message_iterator,
            StreamTracesMessage,
            StreamTracesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TraceServiceBase(ServiceBase):

    async def stream_traces(
        self, stream_traces_message_iterator: AsyncIterator["StreamTracesMessage"]
    ) -> "StreamTracesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_traces(
        self, stream: "grpclib.server.Stream[StreamTracesMessage, StreamTracesResponse]"
    ) -> None:
        request = stream.__aiter__()
        response = await self.stream_traces(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.trace.v3.TraceService/StreamTraces": grpclib.const.Handler(
                self.__rpc_stream_traces,
                grpclib.const.Cardinality.STREAM_UNARY,
                StreamTracesMessage,
                StreamTracesResponse,
            ),
        }
