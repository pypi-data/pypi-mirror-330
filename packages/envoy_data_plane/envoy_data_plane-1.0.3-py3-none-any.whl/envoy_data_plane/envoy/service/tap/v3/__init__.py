# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/tap/v3/tap.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....config.core import v3 as ___config_core_v3__
from ....data.tap import v3 as ___data_tap_v3__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class StreamTapsRequest(betterproto.Message):
    """
    [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a
    stream to the server and stream taps without ever expecting a response.
    """

    identifier: "StreamTapsRequestIdentifier" = betterproto.message_field(1)
    """
    Identifier data effectively is a structured metadata. As a performance
    optimization this will only be sent in the first message on the stream.
    """

    trace_id: int = betterproto.uint64_field(2)
    """
    The trace id. this can be used to merge together a streaming trace. Note
    that the trace_id is not guaranteed to be spatially or temporally unique.
    """

    trace: "___data_tap_v3__.TraceWrapper" = betterproto.message_field(3)
    """The trace data."""


@dataclass(eq=False, repr=False)
class StreamTapsRequestIdentifier(betterproto.Message):
    node: "___config_core_v3__.Node" = betterproto.message_field(1)
    """The node sending taps over the stream."""

    tap_id: str = betterproto.string_field(2)
    """
    The opaque identifier that was set in the :ref:`output config
    <envoy_v3_api_field_config.tap.v3.StreamingGrpcSink.tap_id>`.
    """


@dataclass(eq=False, repr=False)
class StreamTapsResponse(betterproto.Message):
    """[#not-implemented-hide:]"""

    pass


class TapSinkServiceStub(betterproto.ServiceStub):
    async def stream_taps(
        self,
        stream_taps_request_iterator: Union[
            AsyncIterable["StreamTapsRequest"], Iterable["StreamTapsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StreamTapsResponse":
        return await self._stream_unary(
            "/envoy.service.tap.v3.TapSinkService/StreamTaps",
            stream_taps_request_iterator,
            StreamTapsRequest,
            StreamTapsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TapSinkServiceBase(ServiceBase):

    async def stream_taps(
        self, stream_taps_request_iterator: AsyncIterator["StreamTapsRequest"]
    ) -> "StreamTapsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_taps(
        self, stream: "grpclib.server.Stream[StreamTapsRequest, StreamTapsResponse]"
    ) -> None:
        request = stream.__aiter__()
        response = await self.stream_taps(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.tap.v3.TapSinkService/StreamTaps": grpclib.const.Handler(
                self.__rpc_stream_taps,
                grpclib.const.Cardinality.STREAM_UNARY,
                StreamTapsRequest,
                StreamTapsResponse,
            ),
        }
