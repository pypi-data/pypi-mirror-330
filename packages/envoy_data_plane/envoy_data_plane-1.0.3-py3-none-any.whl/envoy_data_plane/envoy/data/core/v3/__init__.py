# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/data/core/v3/health_check_event.proto, envoy/data/core/v3/tlv_metadata.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import Dict

import betterproto

from ....config.core import v3 as ___config_core_v3__


class HealthCheckFailureType(betterproto.Enum):
    ACTIVE = 0
    PASSIVE = 1
    NETWORK = 2
    NETWORK_TIMEOUT = 3


class HealthCheckerType(betterproto.Enum):
    HTTP = 0
    TCP = 1
    GRPC = 2
    REDIS = 3
    THRIFT = 4


@dataclass(eq=False, repr=False)
class TlvsMetadata(betterproto.Message):
    typed_metadata: Dict[str, bytes] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_BYTES
    )
    """
    Typed metadata for :ref:`Proxy protocol filter <envoy_v3_api_msg_extensions
    .filters.listener.proxy_protocol.v3.ProxyProtocol>`, that represents a map
    of TLVs. Each entry in the map consists of a key which corresponds to a
    configured :ref:`rule key <envoy_v3_api_field_extensions.filters.listener.p
    roxy_protocol.v3.ProxyProtocol.KeyValuePair.key>` and a value (TLV value in
    bytes). When runtime flag
    ``envoy.reloadable_features.use_typed_metadata_in_proxy_protocol_listener``
    is enabled, :ref:`Proxy protocol filter <envoy_v3_api_msg_extensions.filter
    s.listener.proxy_protocol.v3.ProxyProtocol>` will populate typed metadata
    and regular metadata. By default filter will populate typed and untyped
    metadata.
    """


@dataclass(eq=False, repr=False)
class HealthCheckEvent(betterproto.Message):
    """[#next-free-field: 13]"""

    health_checker_type: "HealthCheckerType" = betterproto.enum_field(1)
    host: "___config_core_v3__.Address" = betterproto.message_field(2)
    cluster_name: str = betterproto.string_field(3)
    eject_unhealthy_event: "HealthCheckEjectUnhealthy" = betterproto.message_field(
        4, group="event"
    )
    """Host ejection."""

    add_healthy_event: "HealthCheckAddHealthy" = betterproto.message_field(
        5, group="event"
    )
    """Host addition."""

    successful_health_check_event: "HealthCheckSuccessful" = betterproto.message_field(
        12, group="event"
    )
    """
    A health check was successful. Note: a host will be considered healthy
    either if it is the first ever health check, or if the healthy threshold is
    reached. This kind of event indicate that a health check was successful,
    but does not indicates that the host is considered healthy. A host is
    considered healthy if HealthCheckAddHealthy kind of event is sent.
    """

    health_check_failure_event: "HealthCheckFailure" = betterproto.message_field(
        7, group="event"
    )
    """Host failure."""

    degraded_healthy_host: "DegradedHealthyHost" = betterproto.message_field(
        8, group="event"
    )
    """Healthy host became degraded."""

    no_longer_degraded_host: "NoLongerDegradedHost" = betterproto.message_field(
        9, group="event"
    )
    """A degraded host returned to being healthy."""

    timestamp: datetime = betterproto.message_field(6)
    """Timestamp for event."""

    metadata: "___config_core_v3__.Metadata" = betterproto.message_field(10)
    """Host metadata"""

    locality: "___config_core_v3__.Locality" = betterproto.message_field(11)
    """Host locality"""


@dataclass(eq=False, repr=False)
class HealthCheckEjectUnhealthy(betterproto.Message):
    failure_type: "HealthCheckFailureType" = betterproto.enum_field(1)
    """The type of failure that caused this ejection."""


@dataclass(eq=False, repr=False)
class HealthCheckAddHealthy(betterproto.Message):
    first_check: bool = betterproto.bool_field(1)
    """
    Whether this addition is the result of the first ever health check on a
    host, in which case the configured :ref:`healthy threshold
    <envoy_v3_api_field_config.core.v3.HealthCheck.healthy_threshold>` is
    bypassed and the host is immediately added.
    """


@dataclass(eq=False, repr=False)
class HealthCheckSuccessful(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HealthCheckFailure(betterproto.Message):
    failure_type: "HealthCheckFailureType" = betterproto.enum_field(1)
    """The type of failure that caused this event."""

    first_check: bool = betterproto.bool_field(2)
    """
    Whether this event is the result of the first ever health check on a host.
    """


@dataclass(eq=False, repr=False)
class DegradedHealthyHost(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NoLongerDegradedHost(betterproto.Message):
    pass
