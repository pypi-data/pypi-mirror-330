# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ......api.v2 import core as _____api_v2_core__


class IpTaggingRequestType(betterproto.Enum):
    """
    The type of requests the filter should apply to. The supported types are
    internal, external or both. The :ref:`x-forwarded-
    for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header
    is used to determine if a request is internal and will result in
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
    being set. The filter defaults to both, and it will apply to all request
    types.
    """

    BOTH = 0
    """
    Both external and internal requests will be tagged. This is the default
    value.
    """

    INTERNAL = 1
    """Only internal requests will be tagged."""

    EXTERNAL = 2
    """Only external requests will be tagged."""


@dataclass(eq=False, repr=False)
class IpTagging(betterproto.Message):
    request_type: "IpTaggingRequestType" = betterproto.enum_field(1)
    """The type of request the filter should apply to."""

    ip_tags: List["IpTaggingIpTag"] = betterproto.message_field(4)
    """
    [#comment:TODO(ccaraman): Extend functionality to load IP tags from file
    system. Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
    The set of IP tags for the filter.
    """


@dataclass(eq=False, repr=False)
class IpTaggingIpTag(betterproto.Message):
    """Supplies the IP tag name and the IP address subnets."""

    ip_tag_name: str = betterproto.string_field(1)
    """Specifies the IP tag name to apply."""

    ip_list: List["_____api_v2_core__.CidrRange"] = betterproto.message_field(2)
    """
    A list of IP address subnets that will be tagged with ip_tag_name. Both
    IPv4 and IPv6 are supported.
    """
