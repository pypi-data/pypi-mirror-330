# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/access_loggers/grpc/v3/als.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta
from typing import (
    List,
    Optional,
)

import betterproto

from .....config.core import v3 as ____config_core_v3__
from .....type.tracing import v3 as ____type_tracing_v3__


@dataclass(eq=False, repr=False)
class HttpGrpcAccessLogConfig(betterproto.Message):
    """
    Configuration for the built-in ``envoy.access_loggers.http_grpc``
    :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This
    configuration will populate :ref:`StreamAccessLogsMessage.http_logs <envoy_
    v3_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.
    [#extension: envoy.access_loggers.http_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig" = betterproto.message_field(1)
    additional_request_headers_to_log: List[str] = betterproto.string_field(2)
    """
    Additional request headers to log in
    :ref:`HTTPRequestProperties.request_headers <envoy_v3_api_field_data.access
    log.v3.HTTPRequestProperties.request_headers>`.
    """

    additional_response_headers_to_log: List[str] = betterproto.string_field(3)
    """
    Additional response headers to log in
    :ref:`HTTPResponseProperties.response_headers <envoy_v3_api_field_data.acce
    sslog.v3.HTTPResponseProperties.response_headers>`.
    """

    additional_response_trailers_to_log: List[str] = betterproto.string_field(4)
    """
    Additional response trailers to log in
    :ref:`HTTPResponseProperties.response_trailers <envoy_v3_api_field_data.acc
    esslog.v3.HTTPResponseProperties.response_trailers>`.
    """


@dataclass(eq=False, repr=False)
class TcpGrpcAccessLogConfig(betterproto.Message):
    """
    Configuration for the built-in ``envoy.access_loggers.tcp_grpc`` type. This
    configuration will populate ``StreamAccessLogsMessage.tcp_logs``.
    [#extension: envoy.access_loggers.tcp_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CommonGrpcAccessLogConfig(betterproto.Message):
    """Common configuration for gRPC access logs. [#next-free-field: 9]"""

    log_name: str = betterproto.string_field(1)
    """
    The friendly name of the access log to be returned in
    :ref:`StreamAccessLogsMessage.Identifier <envoy_v3_api_msg_service.accesslo
    g.v3.StreamAccessLogsMessage.Identifier>`. This allows the access log
    server to differentiate between different access logs coming from the same
    Envoy.
    """

    grpc_service: "____config_core_v3__.GrpcService" = betterproto.message_field(2)
    """The gRPC service for the access log service."""

    transport_api_version: "____config_core_v3__.ApiVersion" = betterproto.enum_field(6)
    """
    API version for access logs service transport protocol. This describes the
    access logs service gRPC endpoint and version of messages used on the wire.
    """

    buffer_flush_interval: timedelta = betterproto.message_field(3)
    """
    Interval for flushing access logs to the gRPC stream. Logger will flush
    requests every time this interval is elapsed, or when batch size limit is
    hit, whichever comes first. Defaults to 1 second.
    """

    buffer_size_bytes: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    """
    Soft size limit in bytes for access log entries buffer. Logger will buffer
    requests until this limit it hit, or every time flush interval is elapsed,
    whichever comes first. Setting it to zero effectively disables the
    batching. Defaults to 16384.
    """

    filter_state_objects_to_log: List[str] = betterproto.string_field(5)
    """
    Additional filter state objects to log in :ref:`filter_state_objects <envoy
    _v3_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
    Logger will call ``FilterState::Object::serializeAsProto`` to serialize the
    filter state object.
    """

    grpc_stream_retry_policy: "____config_core_v3__.RetryPolicy" = (
        betterproto.message_field(7)
    )
    """
    Sets the retry policy when the establishment of a gRPC stream fails. If the
    stream succeeds at least once in establishing itself, no retry will be
    performed no matter what gRPC status is received. Note that only
    :ref:`num_retries
    <envoy_v3_api_field_config.core.v3.RetryPolicy.num_retries>` will be used
    in this configuration. This feature is used only when you are using
    :ref:`Envoy gRPC client
    <envoy_v3_api_field_config.core.v3.GrpcService.envoy_grpc>`.
    """

    custom_tags: List["____type_tracing_v3__.CustomTag"] = betterproto.message_field(8)
    """
    A list of custom tags with unique tag name to create tags for the logs.
    """
