# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/generic_proxy/matcher/v3/matcher.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from .......type.matcher import v3 as ______type_matcher_v3__


@dataclass(eq=False, repr=False)
class ServiceMatchInput(betterproto.Message):
    """
    Used to match request service of the downstream request. Only applicable if
    a service provided by the application protocol. This is deprecated and
    should be replaced by HostMatchInput. This is kept for backward
    compatibility.
    """

    pass


@dataclass(eq=False, repr=False)
class HostMatchInput(betterproto.Message):
    """
    Used to match request host of the generic downstream request. Only
    applicable if a host provided by the application protocol. This is same
    with the ServiceMatchInput and this should be preferred over
    ServiceMatchInput.
    """

    pass


@dataclass(eq=False, repr=False)
class PathMatchInput(betterproto.Message):
    """
    Used to match request path of the generic downstream request. Only
    applicable if a path provided by the application protocol.
    """

    pass


@dataclass(eq=False, repr=False)
class MethodMatchInput(betterproto.Message):
    """
    Used to match request method of the generic downstream request. Only
    applicable if a method provided by the application protocol.
    """

    pass


@dataclass(eq=False, repr=False)
class PropertyMatchInput(betterproto.Message):
    """
    Used to match an arbitrary property of the generic downstream request.
    These properties are populated by the codecs of application protocols.
    """

    property_name: str = betterproto.string_field(1)
    """The property name to match on."""


@dataclass(eq=False, repr=False)
class RequestMatchInput(betterproto.Message):
    """Used to match an whole generic downstream request."""

    pass


@dataclass(eq=False, repr=False)
class KeyValueMatchEntry(betterproto.Message):
    """
    Used to match an arbitrary key-value pair for headers, trailers or
    properties.
    """

    name: str = betterproto.string_field(1)
    """The key name to match on."""

    string_match: "______type_matcher_v3__.StringMatcher" = betterproto.message_field(2)
    """The key value pattern."""


@dataclass(eq=False, repr=False)
class RequestMatcher(betterproto.Message):
    """
    Custom matcher to match on the generic downstream request. This is used to
    match multiple fields of the downstream request and avoid complex
    combinations of HostMatchInput, PathMatchInput, MethodMatchInput and
    PropertyMatchInput.
    """

    host: "______type_matcher_v3__.StringMatcher" = betterproto.message_field(1)
    """
    Optional host pattern to match on. If not specified, any host will match.
    """

    path: "______type_matcher_v3__.StringMatcher" = betterproto.message_field(2)
    """
    Optional path pattern to match on. If not specified, any path will match.
    """

    method: "______type_matcher_v3__.StringMatcher" = betterproto.message_field(3)
    """
    Optional method pattern to match on. If not specified, any method will
    match.
    """

    properties: List["KeyValueMatchEntry"] = betterproto.message_field(4)
    """
    Optional arbitrary properties to match on. If not specified, any properties
    will match. The key is the property name and the value is the property
    value to match on.
    """
