# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ......type.matcher import v3 as _____type_matcher_v3__


class ConfigValueType(betterproto.Enum):
    STRING = 0
    NUMBER = 1
    PROTOBUF_VALUE = 2
    """
    The value is a serialized `protobuf.Value <https://github.com/protocolbuffe
    rs/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    """


class ConfigValueEncode(betterproto.Enum):
    """ValueEncode defines the encoding algorithm."""

    NONE = 0
    """The value is not encoded."""

    BASE64 = 1
    """
    The value is encoded in `Base64
    <https://tools.ietf.org/html/rfc4648#section-4>`_. Note: this is mostly
    used for STRING and PROTOBUF_VALUE to escape the non-ASCII characters in
    the header.
    """


@dataclass(eq=False, repr=False)
class Config(betterproto.Message):
    request_rules: List["ConfigRule"] = betterproto.message_field(1)
    """The list of rules to apply to requests."""

    response_rules: List["ConfigRule"] = betterproto.message_field(2)
    """The list of rules to apply to responses."""


@dataclass(eq=False, repr=False)
class ConfigKeyValuePair(betterproto.Message):
    """[#next-free-field: 7]"""

    metadata_namespace: str = betterproto.string_field(1)
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: str = betterproto.string_field(2)
    """The key to use within the namespace."""

    value: str = betterproto.string_field(3)
    """
    The value to pair with the given key. When used for a
    :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_
    to_metadata.v3.Config.Rule.on_header_present>` case, if value is non-empty
    it'll be used instead of the header value. If both are empty, no metadata
    is added. When used for a :ref:`on_header_missing <envoy_v3_api_field_exten
    sions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing>`
    case, a non-empty value must be provided otherwise no metadata is added.
    """

    regex_value_rewrite: "_____type_matcher_v3__.RegexMatchAndSubstitute" = (
        betterproto.message_field(6)
    )
    """
    If present, the header's value will be matched and substituted with this.
    If there is no match or substitution, the header value is used as-is. This
    is only used for :ref:`on_header_present <envoy_v3_api_field_extensions.fil
    ters.http.header_to_metadata.v3.Config.Rule.on_header_present>`. Note: if
    the ``value`` field is non-empty this field should be empty.
    """

    type: "ConfigValueType" = betterproto.enum_field(4)
    """The value's type — defaults to string."""

    encode: "ConfigValueEncode" = betterproto.enum_field(5)
    """
    How is the value encoded, default is NONE (not encoded). The value will be
    decoded accordingly before storing to metadata.
    """


@dataclass(eq=False, repr=False)
class ConfigRule(betterproto.Message):
    """
    A Rule defines what metadata to apply when a header is present or missing.
    [#next-free-field: 6]
    """

    header: str = betterproto.string_field(1)
    """
    Specifies that a match will be performed on the value of a header or a
    cookie. The header to be extracted.
    """

    cookie: str = betterproto.string_field(5)
    """The cookie to be extracted."""

    on_header_present: "ConfigKeyValuePair" = betterproto.message_field(2)
    """
    If the header or cookie is present, apply this metadata KeyValuePair. If
    the value in the KeyValuePair is non-empty, it'll be used instead of the
    header or cookie value.
    """

    on_header_missing: "ConfigKeyValuePair" = betterproto.message_field(3)
    """
    If the header or cookie is not present, apply this metadata KeyValuePair.
    The value in the KeyValuePair must be set, since it'll be used in lieu of
    the missing header or cookie value.
    """

    remove: bool = betterproto.bool_field(4)
    """
    Whether or not to remove the header after a rule is applied. This prevents
    headers from leaking. This field is not supported in case of a cookie.
    """
