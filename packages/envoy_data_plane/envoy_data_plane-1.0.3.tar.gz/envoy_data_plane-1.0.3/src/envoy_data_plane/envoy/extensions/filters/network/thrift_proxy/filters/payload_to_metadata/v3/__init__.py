# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/thrift_proxy/filters/payload_to_metadata/v3/payload_to_metadata.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ........type.matcher import v3 as _______type_matcher_v3__


class PayloadToMetadataValueType(betterproto.Enum):
    STRING = 0
    NUMBER = 1


@dataclass(eq=False, repr=False)
class PayloadToMetadata(betterproto.Message):
    request_rules: List["PayloadToMetadataRule"] = betterproto.message_field(1)
    """The list of rules to apply to requests."""


@dataclass(eq=False, repr=False)
class PayloadToMetadataKeyValuePair(betterproto.Message):
    """[#next-free-field: 6]"""

    metadata_namespace: str = betterproto.string_field(1)
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: str = betterproto.string_field(2)
    """The key to use within the namespace."""

    value: str = betterproto.string_field(3, group="value_type")
    """
    The value to pair with the given key. When used for on_present case, if
    value is non-empty it'll be used instead of the field value. If both are
    empty, the field value is used as-is. When used for on_missing case, a non-
    empty value must be provided.
    """

    regex_value_rewrite: "_______type_matcher_v3__.RegexMatchAndSubstitute" = (
        betterproto.message_field(4, group="value_type")
    )
    """
    If present, the header's value will be matched and substituted with this.
    If there is no match or substitution, the field value is used as-is. This
    is only used for on_present.
    """

    type: "PayloadToMetadataValueType" = betterproto.enum_field(5)
    """The value's type — defaults to string."""


@dataclass(eq=False, repr=False)
class PayloadToMetadataRule(betterproto.Message):
    """
    A Rule defines what metadata to apply when a field is present or missing.
    [#next-free-field: 6]
    """

    method_name: str = betterproto.string_field(1, group="match_specifier")
    """
    If specified, the route must exactly match the request method name. As a
    special case, an empty string matches any request method name.
    """

    service_name: str = betterproto.string_field(2, group="match_specifier")
    """
    If specified, the route must have the service name as the request method
    name prefix. As a special case, an empty string matches any service name.
    Only relevant when service multiplexing.
    """

    field_selector: "PayloadToMetadataFieldSelector" = betterproto.message_field(3)
    """Specifies that a match will be performed on the value of a field."""

    on_present: "PayloadToMetadataKeyValuePair" = betterproto.message_field(4)
    """If the field is present, apply this metadata KeyValuePair."""

    on_missing: "PayloadToMetadataKeyValuePair" = betterproto.message_field(5)
    """
    If the field is missing, apply this metadata KeyValuePair. The value in the
    KeyValuePair must be set, since it'll be used in lieu of the missing field
    value.
    """


@dataclass(eq=False, repr=False)
class PayloadToMetadataFieldSelector(betterproto.Message):
    name: str = betterproto.string_field(1)
    """field name to log"""

    id: int = betterproto.int32_field(2)
    """field id to match"""

    child: "PayloadToMetadataFieldSelector" = betterproto.message_field(3)
    """next node of the field selector"""
