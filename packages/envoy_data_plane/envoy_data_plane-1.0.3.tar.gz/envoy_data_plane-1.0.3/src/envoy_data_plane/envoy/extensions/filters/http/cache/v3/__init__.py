# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/cache/v3/cache.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from ......config.route import v3 as _____config_route_v3__
from ......type.matcher import v3 as _____type_matcher_v3__


@dataclass(eq=False, repr=False)
class CacheConfig(betterproto.Message):
    """[#extension: envoy.filters.http.cache] [#next-free-field: 7]"""

    typed_config: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(1)
    """
    Config specific to the cache storage implementation. Required unless
    ``disabled`` is true. [#extension-category: envoy.http.cache]
    """

    disabled: Optional[bool] = betterproto.message_field(5, wraps=betterproto.TYPE_BOOL)
    """
    When true, the cache filter is a no-op filter. Possible use-cases for this
    include: - Turning a filter on and off with :ref:`ECDS
    <envoy_v3_api_file_envoy/service/extension/v3/config_discovery.proto>`.
    [#comment: once route-specific overrides are implemented, they are the more
    likely use-case.]
    """

    allowed_vary_headers: List["_____type_matcher_v3__.StringMatcher"] = (
        betterproto.message_field(2)
    )
    """
    List of matching rules that defines allowed ``Vary`` headers. The ``vary``
    response header holds a list of header names that affect the contents of a
    response, as described by
    https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses. During
    insertion, ``allowed_vary_headers`` acts as a allowlist: if a response's
    ``vary`` header mentions any header names that aren't matched by any rules
    in ``allowed_vary_headers``, that response will not be cached. During
    lookup, ``allowed_vary_headers`` controls what request headers will be sent
    to the cache storage implementation.
    """

    key_creator_params: "CacheConfigKeyCreatorParams" = betterproto.message_field(3)
    """
    [#not-implemented-hide:] <TODO(toddmgreer) implement key customization>
    Modifies cache key creation by restricting which parts of the URL are
    included.
    """

    max_body_bytes: int = betterproto.uint32_field(4)
    """
    [#not-implemented-hide:] <TODO(toddmgreer) implement size limit> Max body
    size the cache filter will insert into a cache. 0 means unlimited (though
    the cache storage implementation may have its own limit beyond which it
    will reject insertions).
    """

    ignore_request_cache_control_header: bool = betterproto.bool_field(6)
    """
    By default, a ``cache-control: no-cache`` or ``pragma: no-cache`` header in
    the request causes the cache to validate with its upstream even if the
    lookup is a hit. Setting this to true will ignore these headers.
    """


@dataclass(eq=False, repr=False)
class CacheConfigKeyCreatorParams(betterproto.Message):
    """
    [#not-implemented-hide:] Modifies cache key creation by restricting which
    parts of the URL are included.
    """

    exclude_scheme: bool = betterproto.bool_field(1)
    """
    If true, exclude the URL scheme from the cache key. Set to true if your
    origins always produce the same response for http and https requests.
    """

    exclude_host: bool = betterproto.bool_field(2)
    """
    If true, exclude the host from the cache key. Set to true if your origins'
    responses don't ever depend on host.
    """

    query_parameters_included: List["_____config_route_v3__.QueryParameterMatcher"] = (
        betterproto.message_field(3)
    )
    """
    If ``query_parameters_included`` is nonempty, only query parameters matched
    by one or more of its matchers are included in the cache key. Any other
    query params will not affect cache lookup.
    """

    query_parameters_excluded: List["_____config_route_v3__.QueryParameterMatcher"] = (
        betterproto.message_field(4)
    )
    """
    If ``query_parameters_excluded`` is nonempty, query parameters matched by
    one or more of its matchers are excluded from the cache key (even if also
    matched by ``query_parameters_included``), and will not affect cache
    lookup.
    """
