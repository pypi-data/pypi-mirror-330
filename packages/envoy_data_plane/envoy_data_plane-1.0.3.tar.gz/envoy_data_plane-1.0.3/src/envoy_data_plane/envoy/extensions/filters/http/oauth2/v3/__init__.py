# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/oauth2/v3/oauth.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta
from typing import (
    List,
    Optional,
)

import betterproto

from ......config.core import v3 as _____config_core_v3__
from ......config.route import v3 as _____config_route_v3__
from ......type.matcher import v3 as _____type_matcher_v3__
from .....transport_sockets.tls import v3 as ____transport_sockets_tls_v3__


class OAuth2ConfigAuthType(betterproto.Enum):
    URL_ENCODED_BODY = 0
    """
    The ``client_id`` and ``client_secret`` will be sent in the URL encoded
    request body. This type should only be used when Auth server does not
    support Basic authentication.
    """

    BASIC_AUTH = 1
    """
    The ``client_id`` and ``client_secret`` will be sent using HTTP Basic
    authentication scheme.
    """


@dataclass(eq=False, repr=False)
class OAuth2Credentials(betterproto.Message):
    """[#next-free-field: 6]"""

    client_id: str = betterproto.string_field(1)
    """
    The client_id to be used in the authorize calls. This value will be URL
    encoded when sent to the OAuth server.
    """

    token_secret: "____transport_sockets_tls_v3__.SdsSecretConfig" = (
        betterproto.message_field(2)
    )
    """
    The secret used to retrieve the access token. This value will be URL
    encoded when sent to the OAuth server.
    """

    hmac_secret: "____transport_sockets_tls_v3__.SdsSecretConfig" = (
        betterproto.message_field(3, group="token_formation")
    )
    """
    If present, the secret token will be a HMAC using the provided secret.
    """

    cookie_names: "OAuth2CredentialsCookieNames" = betterproto.message_field(4)
    """The cookie names used in OAuth filters flow."""

    cookie_domain: str = betterproto.string_field(5)
    """
    The domain to set the cookie on. If not set, the cookie will default to the
    host of the request, not including the subdomains. This is useful when
    token cookies need to be shared across multiple subdomains.
    """


@dataclass(eq=False, repr=False)
class OAuth2CredentialsCookieNames(betterproto.Message):
    """[#next-free-field: 7]"""

    bearer_token: str = betterproto.string_field(1)
    """
    Cookie name to hold OAuth bearer token value. When the authentication
    server validates the client and returns an authorization token back to the
    OAuth filter, no matter what format that token is, if
    :ref:`forward_bearer_token <envoy_v3_api_field_extensions.filters.http.oaut
    h2.v3.OAuth2Config.forward_bearer_token>` is set to true the filter will
    send over the bearer token as a cookie with this name to the upstream.
    Defaults to ``BearerToken``.
    """

    oauth_hmac: str = betterproto.string_field(2)
    """Cookie name to hold OAuth HMAC value. Defaults to ``OauthHMAC``."""

    oauth_expires: str = betterproto.string_field(3)
    """
    Cookie name to hold OAuth expiry value. Defaults to ``OauthExpires``.
    """

    id_token: str = betterproto.string_field(4)
    """Cookie name to hold the id token. Defaults to ``IdToken``."""

    refresh_token: str = betterproto.string_field(5)
    """Cookie name to hold the refresh token. Defaults to ``RefreshToken``."""

    oauth_nonce: str = betterproto.string_field(6)
    """Cookie name to hold the nonce value. Defaults to ``OauthNonce``."""


@dataclass(eq=False, repr=False)
class OAuth2Config(betterproto.Message):
    """OAuth config [#next-free-field: 21]"""

    token_endpoint: "_____config_core_v3__.HttpUri" = betterproto.message_field(1)
    """
    Endpoint on the authorization server to retrieve the access token from.
    """

    retry_policy: "_____config_core_v3__.RetryPolicy" = betterproto.message_field(18)
    """
    Specifies the retry policy for requests to the OAuth server. If not
    specified, then no retries will be performed.
    """

    authorization_endpoint: str = betterproto.string_field(2)
    """
    The endpoint redirect to for authorization in response to unauthorized
    requests.
    """

    credentials: "OAuth2Credentials" = betterproto.message_field(3)
    """Credentials used for OAuth."""

    redirect_uri: str = betterproto.string_field(4)
    """
    The redirect URI passed to the authorization endpoint. Supports header
    formatting tokens. For more information, including details on header value
    syntax, see the documentation on :ref:`custom request headers
    <config_http_conn_man_headers_custom_request_headers>`. This URI should not
    contain any query parameters.
    """

    redirect_path_matcher: "_____type_matcher_v3__.PathMatcher" = (
        betterproto.message_field(5)
    )
    """
    Matching criteria used to determine whether a path appears to be the result
    of a redirect from the authorization server.
    """

    signout_path: "_____type_matcher_v3__.PathMatcher" = betterproto.message_field(6)
    """The path to sign a user out, clearing their credential cookies."""

    forward_bearer_token: bool = betterproto.bool_field(7)
    """Forward the OAuth token as a Bearer to upstream web service."""

    preserve_authorization_header: bool = betterproto.bool_field(16)
    """
    If set to true, preserve the existing authorization header. By default the
    client strips the existing authorization header before forwarding upstream.
    Can not be set to true if forward_bearer_token is already set to true.
    Default value is false.
    """

    pass_through_matcher: List["_____config_route_v3__.HeaderMatcher"] = (
        betterproto.message_field(8)
    )
    """
    Any request that matches any of the provided matchers will be passed
    through without OAuth validation.
    """

    auth_scopes: List[str] = betterproto.string_field(9)
    """
    Optional list of OAuth scopes to be claimed in the authorization request.
    If not specified, defaults to "user" scope. OAuth RFC
    https://tools.ietf.org/html/rfc6749#section-3.3
    """

    resources: List[str] = betterproto.string_field(10)
    """
    Optional resource parameter for authorization request RFC:
    https://tools.ietf.org/html/rfc8707
    """

    auth_type: "OAuth2ConfigAuthType" = betterproto.enum_field(11)
    """
    Defines how ``client_id`` and ``client_secret`` are sent in OAuth client to
    OAuth server requests. RFC
    https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1
    """

    use_refresh_token: Optional[bool] = betterproto.message_field(
        12, wraps=betterproto.TYPE_BOOL
    )
    """
    If set to true, allows automatic access token refresh using the associated
    refresh token (see `RFC 6749 section 6
    <https://datatracker.ietf.org/doc/html/rfc6749#section-6>`_), provided that
    the OAuth server supports that. Default value is false.
    """

    default_expires_in: timedelta = betterproto.message_field(13)
    """
    The default lifetime in seconds of the access token, if omitted by the
    authorization server. If this value is not set, it will default to ``0s``.
    In this case, the expiry must be set by the authorization server or the
    OAuth flow will fail.
    """

    deny_redirect_matcher: List["_____config_route_v3__.HeaderMatcher"] = (
        betterproto.message_field(14)
    )
    """
    Any request that matches any of the provided matchers won't be redirected
    to OAuth server when tokens are not valid. Automatic access token refresh
    will be performed for these requests, if enabled. This behavior can be
    useful for AJAX requests.
    """

    default_refresh_token_expires_in: timedelta = betterproto.message_field(15)
    """
    The default lifetime in seconds of the refresh token, if the exp
    (expiration time) claim is omitted in the refresh token or the refresh
    token is not JWT. If this value is not set, it will default to ``604800s``.
    In this case, the cookie with the refresh token will be expired in a week.
    This setting is only considered if ``use_refresh_token`` is set to true,
    otherwise the authorization server expiration or ``default_expires_in`` is
    used.
    """

    disable_id_token_set_cookie: bool = betterproto.bool_field(17)
    """
    If set to true, the client will not set a cookie for ID Token even if one
    is received from the Identity Provider. This may be useful in cases where
    the ID Token is too large for HTTP cookies (longer than 4096 characters).
    Enabling this option will only disable setting the cookie response header,
    the filter will still process incoming ID Tokens as part of the HMAC if
    they are there. This is to ensure compatibility while switching this
    setting on. Future sessions would not set the IdToken cookie header.
    """

    disable_access_token_set_cookie: bool = betterproto.bool_field(19)
    """
    If set to true, the client will not set a cookie for Access Token even if
    one is received from the Identity Provider. Enabling this option will only
    disable setting the cookie response header, the filter will still process
    incoming Access Tokens as part of the HMAC if they are there. This is to
    ensure compatibility while switching this setting on. Future sessions would
    not set the Access Token cookie header.
    """

    disable_refresh_token_set_cookie: bool = betterproto.bool_field(20)
    """
    If set to true, the client will not set a cookie for Refresh Token even if
    one is received from the Identity Provider. Enabling this option will only
    disable setting the cookie response header, the filter will still process
    incoming Refresh Tokens as part of the HMAC if they are there. This is to
    ensure compatibility while switching this setting on. Future sessions would
    not set the Refresh Token cookie header.
    """


@dataclass(eq=False, repr=False)
class OAuth2(betterproto.Message):
    """Filter config."""

    config: "OAuth2Config" = betterproto.message_field(1)
    """
    Leave this empty to disable OAuth2 for a specific route, using per filter
    config.
    """
