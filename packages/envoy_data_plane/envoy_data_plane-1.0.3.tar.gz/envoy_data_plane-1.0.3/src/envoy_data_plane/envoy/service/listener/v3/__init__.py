# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/listener/v3/lds.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...discovery import v3 as __discovery_v3__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class LdsDummy(betterproto.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
    with importing services: https://github.com/google/protobuf/issues/4221 and
    protoxform to upgrade the file.
    """

    pass


class ListenerDiscoveryServiceStub(betterproto.ServiceStub):
    async def delta_listeners(
        self,
        discovery_v3_delta_discovery_request_iterator: Union[
            AsyncIterable["__discovery_v3__.DeltaDiscoveryRequest"],
            Iterable["__discovery_v3__.DeltaDiscoveryRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["__discovery_v3__.DeltaDiscoveryResponse"]:
        async for response in self._stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners",
            discovery_v3_delta_discovery_request_iterator,
            __discovery_v3__.DeltaDiscoveryRequest,
            __discovery_v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def stream_listeners(
        self,
        discovery_v3_discovery_request_iterator: Union[
            AsyncIterable["__discovery_v3__.DiscoveryRequest"],
            Iterable["__discovery_v3__.DiscoveryRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["__discovery_v3__.DiscoveryResponse"]:
        async for response in self._stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners",
            discovery_v3_discovery_request_iterator,
            __discovery_v3__.DiscoveryRequest,
            __discovery_v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_listeners(
        self,
        discovery_v3_discovery_request: "__discovery_v3__.DiscoveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__discovery_v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners",
            discovery_v3_discovery_request,
            __discovery_v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ListenerDiscoveryServiceBase(ServiceBase):

    async def delta_listeners(
        self,
        discovery_v3_delta_discovery_request_iterator: AsyncIterator[
            "__discovery_v3__.DeltaDiscoveryRequest"
        ],
    ) -> AsyncIterator["__discovery_v3__.DeltaDiscoveryResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery_v3__.DeltaDiscoveryResponse()

    async def stream_listeners(
        self,
        discovery_v3_discovery_request_iterator: AsyncIterator[
            "__discovery_v3__.DiscoveryRequest"
        ],
    ) -> AsyncIterator["__discovery_v3__.DiscoveryResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery_v3__.DiscoveryResponse()

    async def fetch_listeners(
        self, discovery_v3_discovery_request: "__discovery_v3__.DiscoveryRequest"
    ) -> "__discovery_v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_delta_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery_v3__.DeltaDiscoveryRequest, __discovery_v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_listeners,
            stream,
            request,
        )

    async def __rpc_stream_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery_v3__.DiscoveryRequest, __discovery_v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_listeners,
            stream,
            request,
        )

    async def __rpc_fetch_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery_v3__.DiscoveryRequest, __discovery_v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_listeners(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners": grpclib.const.Handler(
                self.__rpc_delta_listeners,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery_v3__.DeltaDiscoveryRequest,
                __discovery_v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners": grpclib.const.Handler(
                self.__rpc_stream_listeners,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery_v3__.DiscoveryRequest,
                __discovery_v3__.DiscoveryResponse,
            ),
            "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners": grpclib.const.Handler(
                self.__rpc_fetch_listeners,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery_v3__.DiscoveryRequest,
                __discovery_v3__.DiscoveryResponse,
            ),
        }
