# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/redis_auth/v3/redis_external_auth.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .....google import rpc as ____google_rpc__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class RedisProxyExternalAuthRequest(betterproto.Message):
    username: str = betterproto.string_field(1)
    """Username, if applicable. Otherwise, empty."""

    password: str = betterproto.string_field(2)
    """Password sent with the AUTH command."""


@dataclass(eq=False, repr=False)
class RedisProxyExternalAuthResponse(betterproto.Message):
    status: "____google_rpc__.Status" = betterproto.message_field(1)
    """Status of the authentication check."""

    expiration: datetime = betterproto.message_field(2)
    """
    Optional expiration time for the authentication. If set, the authentication
    will be valid until this time. If not set, the authentication will be valid
    indefinitely.
    """

    message: str = betterproto.string_field(3)
    """Optional message to be sent back to the client."""


class RedisProxyExternalAuthStub(betterproto.ServiceStub):
    async def authenticate(
        self,
        redis_proxy_external_auth_request: "RedisProxyExternalAuthRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RedisProxyExternalAuthResponse":
        return await self._unary_unary(
            "/envoy.service.redis_auth.v3.RedisProxyExternalAuth/Authenticate",
            redis_proxy_external_auth_request,
            RedisProxyExternalAuthResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class RedisProxyExternalAuthBase(ServiceBase):

    async def authenticate(
        self, redis_proxy_external_auth_request: "RedisProxyExternalAuthRequest"
    ) -> "RedisProxyExternalAuthResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_authenticate(
        self,
        stream: "grpclib.server.Stream[RedisProxyExternalAuthRequest, RedisProxyExternalAuthResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.authenticate(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.redis_auth.v3.RedisProxyExternalAuth/Authenticate": grpclib.const.Handler(
                self.__rpc_authenticate,
                grpclib.const.Cardinality.UNARY_UNARY,
                RedisProxyExternalAuthRequest,
                RedisProxyExternalAuthResponse,
            ),
        }
