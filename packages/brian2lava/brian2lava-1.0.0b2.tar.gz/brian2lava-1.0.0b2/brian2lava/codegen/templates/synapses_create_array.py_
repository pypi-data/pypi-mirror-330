{#
USES_VARIABLES { _synaptic_pre, _synaptic_post, sources, targets, N,
                  N_pre, N_post, _source_offset, _target_offset, N_incoming, N_outgoing }
#}
{# WRITES_TO_READ_ONLY_VARIABLES { _synaptic_pre, _synaptic_post, N}
#}
{# This is to show that we don't need to index the sources/targets #}
{# ITERATE_ALL { _idx } #}
{% extends 'common_group.py_' %}

{% block maincode %}
    # Constants
    {% for c in constants %}
    {{ c }}
    {% endfor%}
    {# After this code has been executed, the arrays _real_sources and
    _real_variables contain the final indices. Having any code here at all is
    only necessary for supporting subgroups #}
    {{vector_code|autoindent}}

    _old_num_synapses = {{N_init}}
    _new_num_synapses = _old_num_synapses + len({{sources_init}})

    # Resize all dependent dynamic arrays (synaptic weights, delays, etc.) and set
    # the total number of synapses
    {% for var in owner._registered_variables %}
    {# We have to set the varnames manually instead of using filters because we need a special naming for this template #}
    {% set varname = get_array_name(var,access_data = False, template_name = 'synapses_create_array') %}
    {{varname}} = _numpy.resize({{varname}}, _new_num_synapses)
    {% endfor %}

    {{_dynamic__synaptic_pre_init}}[_old_num_synapses:] = _real_sources
    {{_dynamic__synaptic_post_init}}[_old_num_synapses:] = _real_targets

    {{N_init}} = _new_num_synapses

    # And update N_incoming, N_outgoing
    post_with_offset = int(N_post) + _target_offset
    pre_with_offset = int(N_pre) + _source_offset
    N_incoming = _numpy.resize(N_incoming, post_with_offset)
    N_outgoing = _numpy.resize(N_outgoing, pre_with_offset)

    N_incoming[:] += _numpy.bincount({{_dynamic__synaptic_post_init}}[_old_num_synapses:], minlength=len(N_incoming))
    N_outgoing[:] += _numpy.bincount({{_dynamic__synaptic_pre_init}}[_old_num_synapses:], minlength=len(N_outgoing))

    # Save these numbers as attributes
    {{get_array_name(variables['N_incoming'],template_name = 'synapses_create_array')}} = N_incoming
    {{get_array_name(variables['N_outgoing'],template_name = 'synapses_create_array')}} = N_outgoing

    # Last thing to update is synapse_number, but for now I'll skip this because it can be handled by calling
    # synapses._update_synapse_numbers() directly after the simulation is done.

{% endblock %}
