# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_pingme_services.ipynb.

# %% auto 0
__all__ = ['NotificationService']

# %% ../nbs/02_pingme_services.ipynb 2
from .core import settings, logger
from .pingme_class import Card, PingMe

# %% ../nbs/02_pingme_services.ipynb 4
class NotificationService:
    @staticmethod
    def send_default_card_to_webhook():
        # Handles all logic for processing notifications
        logger.info("Sending default webhook card")
        card = Card.model_validate(
            {
                "name": "default",
                "context": {"title": "Default Title", "text": "Test Text"},
            }
        )
        notification = PingMe(
            card,
            config_file=settings.config_file,
        )
        response = notification.send_webhook()
        # Handle response safely
        try:
            response_data = response.json()
        except ValueError:
            # Return text content if not JSON
            response_data = {
                "content": response.text if response.text else "No content"
            }
        return {"status_code": response.status_code, "response": response_data}

    @staticmethod
    def send_simple_card_to_webhook(title: str, text: str):
        # Handles all logic for processing notifications
        logger.info("Sending simple webhook card")
        card = Card.model_validate(
            {
                "name": "default",
                "context": {"title": title, "text": text},
            }
        )
        notification = PingMe(
            card,
            config_file=settings.config_file,
        )
        response = notification.send_webhook()
        # Handle response safely
        try:
            response_data = response.json()
        except ValueError:
            # Return text content if not JSON
            response_data = {
                "content": response.text if response.text else "No content"
            }
        return {"status_code": response.status_code, "response": response_data}

    @staticmethod
    def send_card_to_webhook(card: Card):
        # Handles all logic for processing notifications
        logger.info("Sending webhook card")
        notification = PingMe(
            card,
            config_file=settings.config_file,
        )
        response = notification.send_webhook()
        # Handle response safely
        try:
            response_data = response.json()
        except ValueError:
            # Return text content if not JSON
            response_data = {
                "content": response.text if response.text else "No content"
            }
        return {"status_code": response.status_code, "response": response_data}
