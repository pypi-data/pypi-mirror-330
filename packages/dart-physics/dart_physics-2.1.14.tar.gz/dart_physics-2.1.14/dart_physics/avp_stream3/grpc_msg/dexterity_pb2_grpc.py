# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dart_physics.avp_stream3.grpc_msg.dexterity_pb2 as dexterity__pb2


class HandTrackingServiceStub(object):
    """The hand tracking service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamHandUpdatesandGetSimStates = channel.stream_stream(
                '/dexterity.HandTrackingService/StreamHandUpdatesandGetSimStates',
                request_serializer=dexterity__pb2.HandUpdate.SerializeToString,
                response_deserializer=dexterity__pb2.SimStates.FromString,
                )
        self.StreamHandUpdatesandGetStereoImages = channel.stream_stream(
                '/dexterity.HandTrackingService/StreamHandUpdatesandGetStereoImages',
                request_serializer=dexterity__pb2.HandUpdate.SerializeToString,
                response_deserializer=dexterity__pb2.StereoImage.FromString,
                )
        self.Check = channel.unary_unary(
                '/dexterity.HandTrackingService/Check',
                request_serializer=dexterity__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=dexterity__pb2.HealthCheckResponse.FromString,
                )


class HandTrackingServiceServicer(object):
    """The hand tracking service definition.
    """

    def StreamHandUpdatesandGetSimStates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamHandUpdatesandGetStereoImages(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HandTrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamHandUpdatesandGetSimStates': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamHandUpdatesandGetSimStates,
                    request_deserializer=dexterity__pb2.HandUpdate.FromString,
                    response_serializer=dexterity__pb2.SimStates.SerializeToString,
            ),
            'StreamHandUpdatesandGetStereoImages': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamHandUpdatesandGetStereoImages,
                    request_deserializer=dexterity__pb2.HandUpdate.FromString,
                    response_serializer=dexterity__pb2.StereoImage.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=dexterity__pb2.HealthCheckRequest.FromString,
                    response_serializer=dexterity__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dexterity.HandTrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HandTrackingService(object):
    """The hand tracking service definition.
    """

    @staticmethod
    def StreamHandUpdatesandGetSimStates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/dexterity.HandTrackingService/StreamHandUpdatesandGetSimStates',
            dexterity__pb2.HandUpdate.SerializeToString,
            dexterity__pb2.SimStates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamHandUpdatesandGetStereoImages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/dexterity.HandTrackingService/StreamHandUpdatesandGetStereoImages',
            dexterity__pb2.HandUpdate.SerializeToString,
            dexterity__pb2.StereoImage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dexterity.HandTrackingService/Check',
            dexterity__pb2.HealthCheckRequest.SerializeToString,
            dexterity__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
