import binascii
import struct

import pytest

from vallox_websocket_api.client import to_celsius
from vallox_websocket_api.data.model import DataModel
from vallox_websocket_api.messages import Messages


@pytest.fixture
async def data_model():
    data_model = DataModel()
    await data_model.read_bundled("2.0.16")

    return data_model


@pytest.fixture
def messages(data_model):
    return Messages(data_model)


def test_read_table_message_request(messages: Messages):
    expected = struct.pack("HHHH", 3, 246, 0, 249)

    res = messages.read_table_request.build({})

    assert expected == res


def test_write_message_request(messages: Messages, data_model: DataModel):
    expected = struct.pack("HHHHH", 4, 249, 20508, 29215, 49976)

    res = messages.write_request.build(
        {
            "fields": {
                "value": {
                    "items": [
                        {
                            "address": data_model.addresses[
                                "A_CYC_HOME_AIR_TEMP_TARGET"
                            ],
                            "value": 29215,
                        }
                    ]
                }
            }
        }
    )

    assert expected == res


def test_log_read_message(messages: Messages):
    expected = struct.pack("HHH", 2, 243, 245)

    res = messages.log_read_request.build({})

    assert expected == res


def test_read_table_message_response(messages: Messages, data_model: DataModel):
    data = messages.read_table_response.parse(
        binascii.unhexlify(
            "0024000000000000000000000000000001000800030000000000000061df98b100030003203fb9500331000000000000000000560000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b000f732a6ca969a171d1730800010000022700000028000000000000000001a6029e000100000028ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000057c503e8ffffffffffff000000190000000000010000000000000000000300001b98012000a50000000000000000001e00010000000100000000000000000007001b000f001700010012000200070044000000010000000000000007003200320001000000000000001e0000c0a80501ffffff0000000000000000000000000000000000000000000000000000000000c0a8050c86076097f78844b7ac4db61e502fe4f2004c004c000100c00101001c001e000a00320000003703840000708f00320032000a0000000000010000000a721f0000000000010000000f728300000000000000000064715700000000000000000000000000000000000000010037001e000000000000000068bf71bb000083910000002600b4000000010001000000010001001e000f00080001001200000003000000000000000000000017000003e90000000000000001000100010000000a003200010000000000000000000000000000000000000000001000000000000000000000000000540048000000000000000000000000000000ca
        )
    )

    assert 20.0 == to_celsius(
        data[
            data_model.calculate_offset(
                data_model.addresses["A_CYC_HOME_AIR_TEMP_TARGET"]
            )
        ]
    )


def test_log_read_response(messages: Messages):
    response = struct.pack("HHHH", 3, 243, 6, 252)

    result = messages.log_read_response1.parse(response)

    assert 6 == result.fields.value.pages


def test_alarm_resolve(messages: Messages, data_model: DataModel):
    expected = binascii.unhexlify("0400 f900 0790 0200 0691".replace(" ", ""))

    assert expected == messages.write_request.build(
        {
            "fields": {
                "value": {
                    "items": [
                        {
                            "address": data_model.addresses["A_CYC_FAULT_ACTIVITY"],
                            "value": 2,
                        }
                    ]
                }
            }
        }
    )
