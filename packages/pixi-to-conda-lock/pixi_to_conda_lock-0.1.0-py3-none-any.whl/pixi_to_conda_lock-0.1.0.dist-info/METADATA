Metadata-Version: 2.2
Name: pixi-to-conda-lock
Version: 0.1.0
Summary: pixi-to-conda-lock converts a pixi.lock file to a conda-lock.yml file.
Author-email: Bas Nijholt <bas@nijho.lt>
Project-URL: Homepage, https://github.com/basnijholt/pixi-to-conda-lock
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyyaml
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pre-commit; extra == "test"
Requires-Dist: coverage; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Provides-Extra: rich
Requires-Dist: rich; extra == "rich"
Provides-Extra: docs

# pixi-to-conda-lock 🔄🔒

![](https://via.placeholder.com/800x200.png?text=pixi-to-conda-lock+Banner)

[![Build](https://github.com/basnijholt/pixi-to-conda-lock/actions/workflows/pytest.yml/badge.svg)](https://github.com/basnijholt/pixi-to-conda-lock/actions)
[![Coverage](https://img.shields.io/codecov/c/github/basnijholt/pixi-to-conda-lock)](https://codecov.io/gh/basnijholt/pixi-to-conda-lock)
[![GitHub Stars](https://img.shields.io/github/stars/basnijholt/pixi-to-conda-lock.svg?style=social)](https://github.com/basnijholt/pixi-to-conda-lock/stargazers)
[![PyPI](https://img.shields.io/pypi/v/pixi-to-conda-lock.svg)](https://pypi.org/project/pixi-to-conda-lock)
[![License](https://img.shields.io/github/license/basnijholt/pixi-to-conda-lock)](https://github.com/basnijholt/pixi-to-conda-lock/blob/main/LICENSE)
[![Downloads](https://img.shields.io/pypi/dm/pixi-to-conda-lock)](https://pypi.org/project/pixi-to-conda-lock)
![Open Issues](https://img.shields.io/github/issues-raw/basnijholt/pixi-to-conda-lock)

**pixi-to-conda-lock** is a Python utility designed to bridge the gap between the lightning-fast `pixi lock` and the traditionally slow generation of `conda-lock` files.
By converting your fast-generated `pixi.lock` file into a fully functional `conda-lock.yml`, you can enjoy rapid lock file creation without sacrificing the reproducibility of your conda environments. 🚀

<details><summary><b>[ToC]</b> 📚</summary>

<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->

- [:star2: Features](#star2-features)
- [:books: Usage](#books-usage)
- [:hammer_and_wrench: Installation](#hammer_and_wrench-installation)
- [:bulb: Examples](#bulb-examples)
  - [Basic Conversion](#basic-conversion)
  - [Specifying a Repodata Directory](#specifying-a-repodata-directory)
  - [Enable Verbose Logging](#enable-verbose-logging)
- [:page_facing_up: How It Works](#page_facing_up-how-it-works)
- [:heart: Support and Contributions](#heart-support-and-contributions)

<!-- END doctoc generated TOC please keep comment here to allow auto update -->

</details>

---

## :star2: Features

- **Speed Boost:** Generate a `conda-lock.yml` file quickly by leveraging the performance of `pixi lock`.
- **Accurate Conversion:** Uses repodata to extract detailed package metadata from your `pixi.lock` file.
- **Multi-Manager Support:** Handles both conda and PyPI packages, ensuring comprehensive environment reproduction.
- **Fully Tested:** Comprehensive tests ensure robust and reliable behavior.
- **Typed & Readable:** Written in Python with full type annotations for clarity and maintainability.

---

## :books: Usage

Transform your fast-generated `pixi.lock` file into a reproducible conda lock file with a single command:

```bash
pixi-to-conda-lock --help
```

This will display the help message:

<!-- CODE:BASH:START -->
<!-- echo '```bash' -->
<!-- pixi-to-conda-lock --help -->
<!-- echo '```' -->
<!-- CODE:END -->

<!-- OUTPUT:START -->
<!-- ⚠️ This content is auto-generated by `markdown-code-runner`. -->
```bash
usage: pixi-to-conda-lock [-h] [--output OUTPUT] [--repodata-dir REPODATA_DIR]
                          [--verbose]
                          pixi_lock

Convert pixi.lock to conda-lock.yml

positional arguments:
  pixi_lock             Path to pixi.lock file

options:
  -h, --help            show this help message and exit
  --output, -o OUTPUT   Output conda-lock.yml file path
  --repodata-dir REPODATA_DIR
                        Path to repodata cache directory
  --verbose, -v         Enable verbose logging
```

<!-- OUTPUT:END -->

---

## :hammer_and_wrench: Installation

Install **pixi-to-conda-lock** via [PyPI](https://pypi.org/project/pixi-to-conda-lock):

```bash
pip install pixi-to-conda-lock
```

Or clone the repository and install locally:

```bash
git clone https://github.com/basnijholt/pixi-to-conda-lock.git
cd pixi-to-conda-lock
pip install .
```

---

## :bulb: Examples

### Basic Conversion

Convert your `pixi.lock` file to a `conda-lock.yml`:

```bash
pixi-to-conda-lock /path/to/pixi.lock
```

### Specifying a Repodata Directory

If you have a custom repodata cache directory:

```bash
pixi-to-conda-lock /path/to/pixi.lock --repodata-dir /custom/path/to/repodata
```

### Enable Verbose Logging

To see detailed logs during the conversion process:

```bash
pixi-to-conda-lock /path/to/pixi.lock --verbose
```

---

## :page_facing_up: How It Works

1. **Fast pixi.lock Parsing:** Reads the fast-generated `pixi.lock` file, which is created quickly compared to generating a conda lock file directly.
2. **Repodata Loading:** Retrieves detailed package metadata from repodata files (either automatically discovered or from a user-specified directory).
3. **Package Processing:** Processes both conda and PyPI packages. For conda packages, if repodata information isn’t available, the tool falls back on URL parsing.
4. **Generating conda-lock.yml:** Combines the gathered information to generate a fully reproducible `conda-lock.yml` file that mirrors your original environment.

This approach ensures you get the speed benefits of `pixi lock` without compromising on the quality and reproducibility of your conda environments.

---

## :heart: Support and Contributions

Contributions, bug reports, and feature suggestions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/basnijholt/pixi-to-conda-lock).

Happy converting! 🔄🔒
