"""
This file contains tests for the highpass filter.
"""

import pytest

from easy_fir_filter import FilterConf
from easy_fir_filter.filters.highpass_filter import HighpassFilter

highpass_filter_configurations: list[FilterConf] = [
    {
        "filter_type": "highpass",
        "window_type": "hamming",
        "sampling_freq_hz": 2500,
        "stopband_freq_hz": 500,
        "passband_freq_hz": 750,
        "passband_ripple_db": 0.1,
        "stopband_attenuation_db": 44,
    },
    {
        "filter_type": "highpass",
        "window_type": "kaiser",
        "sampling_freq_hz": 8000,
        "stopband_freq_hz": 1000,
        "passband_freq_hz": 1500,
        "passband_ripple_db": 0.2,
        "stopband_attenuation_db": 50,
    },
    {
        "filter_type": "highpass",
        "window_type": "hamming",
        "sampling_freq_hz": 16000,
        "stopband_freq_hz": 2000,
        "passband_freq_hz": 3000,
        "passband_ripple_db": 0.3,
        "stopband_attenuation_db": 60,
    },
    {
        "filter_type": "highpass",
        "window_type": "hamming",
        "sampling_freq_hz": 1000,
        "stopband_freq_hz": 150,
        "passband_freq_hz": 200,
        "passband_ripple_db": 0.15,
        "stopband_attenuation_db": 40,
    },
    {
        "filter_type": "highpass",
        "window_type": "hamming",
        "sampling_freq_hz": 500,
        "stopband_freq_hz": 50,
        "passband_freq_hz": 75,
        "passband_ripple_db": 0.5,
        "stopband_attenuation_db": 35,
    },
    {
        "filter_type": "highpass",
        "window_type": "blackman",
        "sampling_freq_hz": 44100,
        "stopband_freq_hz": 5000,
        "passband_freq_hz": 6000,
        "passband_ripple_db": 0.05,
        "stopband_attenuation_db": 70,
    },
    {
        "filter_type": "highpass",
        "window_type": "kaiser",
        "sampling_freq_hz": 22050,
        "stopband_freq_hz": 200,
        "passband_freq_hz": 300,
        "passband_ripple_db": 0.1,
        "stopband_attenuation_db": 45,
    },
    {
        "filter_type": "highpass",
        "window_type": "hamming",
        "sampling_freq_hz": 12000,
        "stopband_freq_hz": 1200,
        "passband_freq_hz": 1800,
        "passband_ripple_db": 0.4,
        "stopband_attenuation_db": 55,
    },
]

highpass_d_results = [
    2.5659562,
    2.9282878,
    3.6246518,
    2.3207072,
    1.8837079,
    4.3210837,
    2.5800849,
    3.2764894,
]

highpass_N_results = [
    26,
    47,
    58,
    47,
    38,
    191,
    569,
    66,
]

highpass_order_results = [
    (13, 27),
    (24, 49),
    (29, 59),
    (24, 49),
    (19, 39),
    (96, 193),
    (285, 571),
    (33, 67),
]

highpass_coefficients_results = [
    [
        0.5,
        -0.3183098,
        0.0,
        0.1061032,
        0.0,
        -0.0636619,
        0.0,
        0.0454728,
        0.0,
        -0.0353677,
        0.0,
        0.0289372,
        0.0,
        -0.0244853,
    ],
    [
        0.6875,
        -0.2646649,
        -0.1470399,
        -0.0206997,
        0.0562697,
        0.0624387,
        0.0203019,
        -0.0252633,
        -0.0397887,
        -0.0196492,
        0.0121811,
        0.0283812,
        0.0187565,
        -0.0047768,
        -0.0210057,
        -0.0176443,
        0.0,
        0.0155685,
        0.0163377,
        0.0032683,
        -0.0112539,
        -0.0148663,
        -0.0055369,
        0.0076888,
        0.0132629,
    ],
    [
        0.6875,
        -0.2646649,
        -0.1470399,
        -0.0206997,
        0.0562697,
        0.0624387,
        0.0203019,
        -0.0252633,
        -0.0397887,
        -0.0196492,
        0.0121811,
        0.0283812,
        0.0187565,
        -0.0047768,
        -0.0210057,
        -0.0176443,
        0.0,
        0.0155685,
        0.0163377,
        0.0032683,
        -0.0112539,
        -0.0148663,
        -0.0055369,
        0.0076888,
        0.0132629,
        0.0070737,
        -0.004685,
        -0.0115627,
        -0.0080385,
        0.0021413,
    ],
    [
        0.65,
        -0.2836161,
        -0.128759,
        0.0165982,
        0.0756826,
        0.0450158,
        -0.0163938,
        -0.0449129,
        -0.0233872,
        0.0160566,
        0.0318309,
        0.0131372,
        -0.0155914,
        -0.0241839,
        -0.0070259,
        0.0150052,
        0.0189206,
        0.002929,
        -0.0143065,
        -0.0149271,
        0.0,
        0.0135055,
        0.0117053,
        -0.0021649,
        -0.0126137,
    ],
    [
        0.75,
        -0.225079,
        -0.1591549,
        -0.0750263,
        0.0,
        0.0450158,
        0.0530516,
        0.0321541,
        0.0,
        -0.0250087,
        -0.0318309,
        -0.0204617,
        0.0,
        0.0173137,
        0.0227364,
        0.0150052,
        0.0,
        -0.0132399,
        -0.0176838,
        -0.0118462,
    ],
    [
        0.7505668,
        -0.2246778,
        -0.1591539,
        -0.0754261,
        -0.0005668,
        0.0446131,
        0.0530486,
        0.0325524,
        0.0005668,
        -0.0246047,
        -0.0318259,
        -0.0208586,
        -0.0005668,
        0.0169083,
        0.0227293,
        0.0154007,
        0.0005668,
        -0.012833,
        -0.0176747,
        -0.0122402,
        -0.0005667,
        0.0103097,
        0.0144575,
        0.0101785,
        0.0005667,
        -0.0085935,
        -0.0122295,
        -0.0087273,
        -0.0005666,
        0.0073503,
        0.0105951,
        0.0076502,
        0.0005665,
        -0.0064081,
        -0.0093448,
        -0.0068189,
        -0.0005665,
        0.0056694,
        0.0083574,
        0.0061578,
        0.0005664,
        -0.0050746,
        -0.0075576,
        -0.0056195,
        -0.0005663,
        0.0045852,
        0.0068965,
        0.0051725,
        0.0005662,
        -0.0041756,
        -0.0063409,
        -0.0047954,
        -0.000566,
        0.0038276,
        0.0058673,
        0.0044729,
        0.0005659,
        -0.0035282,
        -0.0054588,
        -0.0041939,
        -0.0005658,
        0.003268,
        0.0051027,
        0.0039502,
        0.0005656,
        -0.0030396,
        -0.0047895,
        -0.0037354,
        -0.0005655,
        0.0028375,
        0.0045119,
        0.0035446,
        0.0005653,
        -0.0026575,
        -0.0042641,
        -0.0033739,
        -0.0005651,
        0.002496,
        0.0040415,
        0.0032204,
        0.0005649,
        -0.0023504,
        -0.0038405,
        -0.0030816,
        -0.0005647,
        0.0022183,
        0.0036579,
        0.0029553,
        0.0005645,
        -0.002098,
        -0.0034914,
        -0.00284,
        -0.0005643,
        0.001988,
        0.0033389,
        0.0027343,
        0.0005641,
    ],
    [
        0.9773242,
        -0.0226565,
        -0.022599,
        -0.0225035,
        -0.0223701,
        -0.0221992,
        -0.0219915,
        -0.0217475,
        -0.021468,
        -0.0211538,
        -0.0208058,
        -0.0204252,
        -0.020013,
        -0.0195706,
        -0.0190991,
        -0.0186001,
        -0.018075,
        -0.0175254,
        -0.0169529,
        -0.0163592,
        -0.015746,
        -0.0151152,
        -0.0144685,
        -0.0138078,
        -0.0131351,
        -0.0124522,
        -0.0117611,
        -0.0110638,
        -0.0103621,
        -0.0096581,
        -0.0089537,
        -0.0082507,
        -0.0075512,
        -0.0068569,
        -0.0061696,
        -0.0054913,
        -0.0048235,
        -0.0041681,
        -0.0035265,
        -0.0029004,
        -0.0022913,
        -0.0017006,
        -0.0011295,
        -0.0005794,
        -5.15e-05,
        0.0004532,
        0.0009337,
        0.0013892,
        0.0018187,
        0.0022218,
        0.0025976,
        0.0029458,
        0.0032659,
        0.0035577,
        0.003821,
        0.0040557,
        0.0042618,
        0.0044394,
        0.0045888,
        0.0047102,
        0.0048041,
        0.0048709,
        0.0049112,
        0.0049258,
        0.0049153,
        0.0048806,
        0.0048226,
        0.0047421,
        0.0046404,
        0.0045184,
        0.0043773,
        0.0042183,
        0.0040425,
        0.0038514,
        0.0036462,
        0.0034282,
        0.0031988,
        0.0029593,
        0.0027111,
        0.0024556,
        0.0021943,
        0.0019283,
        0.0016593,
        0.0013883,
        0.0011169,
        0.0008463,
        0.0005777,
        0.0003123,
        5.15e-05,
        -0.0002037,
        -0.0004522,
        -0.000693,
        -0.0009252,
        -0.0011476,
        -0.0013596,
        -0.0015603,
        -0.001749,
        -0.001925,
        -0.0020878,
        -0.0022367,
        -0.0023715,
        -0.0024917,
        -0.002597,
        -0.0026872,
        -0.0027622,
        -0.0028219,
        -0.0028663,
        -0.0028954,
        -0.0029095,
        -0.0029087,
        -0.0028932,
        -0.0028635,
        -0.0028199,
        -0.002763,
        -0.0026931,
        -0.0026109,
        -0.002517,
        -0.002412,
        -0.0022967,
        -0.0021718,
        -0.002038,
        -0.0018962,
        -0.0017472,
        -0.0015918,
        -0.0014309,
        -0.0012653,
        -0.0010961,
        -0.0009239,
        -0.0007499,
        -0.0005747,
        -0.0003993,
        -0.0002247,
        -5.15e-05,
        0.0001192,
        0.0002869,
        0.0004507,
        0.0006097,
        0.0007634,
        0.000911,
        0.0010519,
        0.0011855,
        0.0013112,
        0.0014286,
        0.0015371,
        0.0016363,
        0.001726,
        0.0018057,
        0.0018752,
        0.0019344,
        0.001983,
        0.0020209,
        0.0020482,
        0.0020648,
        0.0020708,
        0.0020663,
        0.0020514,
        0.0020263,
        0.0019914,
        0.0019468,
        0.0018931,
        0.0018304,
        0.0017593,
        0.0016802,
        0.0015936,
        0.0015,
        0.0014,
        0.0012942,
        0.001183,
        0.0010673,
        0.0009475,
        0.0008244,
        0.0006985,
        0.0005706,
        0.0004413,
        0.0003112,
        0.0001811,
        5.15e-05,
        -7.68e-05,
        -0.0002033,
        -0.0003274,
        -0.0004485,
        -0.000566,
        -0.0006793,
        -0.000788,
        -0.0008915,
        -0.0009894,
        -0.0010812,
        -0.0011666,
        -0.0012452,
        -0.0013167,
        -0.0013808,
        -0.0014372,
        -0.0014859,
        -0.0015265,
        -0.001559,
        -0.0015833,
        -0.0015993,
        -0.0016071,
        -0.0016067,
        -0.0015983,
        -0.0015818,
        -0.0015575,
        -0.0015256,
        -0.0014863,
        -0.0014399,
        -0.0013867,
        -0.001327,
        -0.0012612,
        -0.0011896,
        -0.0011127,
        -0.0010309,
        -0.0009447,
        -0.0008546,
        -0.0007609,
        -0.0006643,
        -0.0005653,
        -0.0004643,
        -0.0003619,
        -0.0002586,
        -0.000155,
        -5.15e-05,
        5.12e-05,
        0.0001529,
        0.0002528,
        0.0003506,
        0.0004457,
        0.0005378,
        0.0006263,
        0.0007109,
        0.0007911,
        0.0008667,
        0.0009372,
        0.0010024,
        0.0010619,
        0.0011156,
        0.0011632,
        0.0012045,
        0.0012394,
        0.0012677,
        0.0012894,
        0.0013044,
        0.0013127,
        0.0013143,
        0.0013092,
        0.0012975,
        0.0012794,
        0.001255,
        0.0012244,
        0.0011879,
        0.0011457,
        0.001098,
        0.0010452,
        0.0009875,
        0.0009253,
        0.0008589,
        0.0007886,
        0.0007149,
        0.0006382,
        0.0005589,
        0.0004773,
        0.000394,
        0.0003093,
        0.0002237,
        0.0001376,
        5.15e-05,
        -3.42e-05,
        -0.0001191,
        -0.0002028,
        -0.0002848,
        -0.0003648,
        -0.0004424,
        -0.0005171,
        -0.0005887,
        -0.0006568,
        -0.000721,
        -0.0007812,
        -0.0008369,
        -0.0008881,
        -0.0009344,
        -0.0009756,
        -0.0010116,
        -0.0010422,
        -0.0010673,
        -0.0010869,
        -0.0011008,
        -0.0011091,
    ],
    [
        0.75,
        -0.225079,
        -0.1591549,
        -0.0750263,
        0.0,
        0.0450158,
        0.0530516,
        0.0321541,
        0.0,
        -0.0250087,
        -0.0318309,
        -0.0204617,
        0.0,
        0.0173137,
        0.0227364,
        0.0150052,
        0.0,
        -0.0132399,
        -0.0176838,
        -0.0118462,
        0.0,
        0.010718,
        0.0144686,
        0.009786,
        0.0,
        -0.0090031,
        -0.0122426,
        -0.0083362,
        0.0,
        0.0077613,
        0.0106103,
        0.0072606,
        0.0,
        -0.0068205,
    ],
]


class TestHighpassFilter:
    """
    Highpass Filter Tests
    """

    @pytest.fixture
    def filter_builder(self, filter_conf: FilterConf, round_to: int = 7):
        """
        Returns a HighpassFilter object.
        """
        return HighpassFilter(filter_conf, round_to)

    @pytest.mark.parametrize(
        "filter_conf, d",
        list(zip(highpass_filter_configurations, highpass_d_results)),
    )
    def test_calculate_filter_length_returns_int(
        self, filter_builder: HighpassFilter, d: float
    ):
        """
        Test that the _calculate_filter_length method returns an integer.
        """
        assert isinstance(filter_builder._calculate_filter_length(d), int)

    @pytest.mark.parametrize("filter_conf", highpass_filter_configurations)
    def test_calculate_filter_length_raises_value_error(
        self, filter_builder: HighpassFilter
    ):
        """
        Test that the _calculate_filter_length method raises a ValueError if d is not provided.
        """
        with pytest.raises(ValueError):
            filter_builder._calculate_filter_length(None)

    @pytest.mark.parametrize(
        "filter_conf, d, expected_N",
        list(
            zip(highpass_filter_configurations, highpass_d_results, highpass_N_results)
        ),
    )
    def test_calculate_filter_length_correct_value(
        self, filter_builder: HighpassFilter, d: float, expected_N: int
    ):
        """
        Test that the _calculate_filter_length method returns the correct value.
        """
        assert filter_builder._calculate_filter_length(d) == expected_N

    @pytest.mark.parametrize(
        "filter_conf",
        highpass_filter_configurations,
    )
    def test_calculate_impulse_response_coefficients_raises_value_error(
        self, filter_builder: HighpassFilter
    ):
        """
        Test that the calculate_impulse_response_coefficients method raises a ValueError
        if self.n is not previously calculate.
        """
        with pytest.raises(ValueError):
            filter_builder.calculate_impulse_response_coefficients()

    @pytest.mark.parametrize(
        "filter_conf, order",
        list(zip(highpass_filter_configurations, highpass_order_results)),
    )
    def test_calculate_impulse_response_coefficients_returns_list(
        self, filter_builder: HighpassFilter, order: tuple[int, int]
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns a list.
        """
        n, N = order
        filter_builder.n = n
        assert isinstance(
            filter_builder.calculate_impulse_response_coefficients(), list
        )

    @pytest.mark.parametrize(
        "filter_conf, order",
        list(zip(highpass_filter_configurations, highpass_order_results)),
    )
    def test_calculate_impulse_response_coefficients_correct_length(
        self, filter_builder: HighpassFilter, order: tuple[int, int]
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns the correct length.
        """
        n, N = order
        filter_builder.n = n
        c = filter_builder.calculate_impulse_response_coefficients()
        assert len(c) == n + 1

    @pytest.mark.parametrize(
        "filter_conf, order, coefficients",
        list(
            zip(
                highpass_filter_configurations,
                highpass_order_results,
                highpass_coefficients_results,
            )
        ),
    )
    def test_calculate_impulse_response_coefficients_correct_values(
        self,
        filter_builder: HighpassFilter,
        order: tuple[int, int],
        coefficients: list[float],
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns the correct values.
        """
        n, N = order
        filter_builder.n = n
        c = filter_builder.calculate_impulse_response_coefficients()
        assert c == coefficients
