"""
This file contains tests for the bandpass filter.
"""

import pytest

from easy_fir_filter import FilterConf
from easy_fir_filter.filters.bandpass_filter import BandpassFilter
from easy_fir_filter.filters.highpass_filter import HighpassFilter

bandpass_filter_configurations: list[FilterConf] = [
    {
        "filter_type": "bandpass",
        "window_type": "blackman",
        "sampling_freq_hz": 80,
        "stopband_freq_hz": 8,
        "passband_freq_hz": 16,
        "passband_freq2_hz": 24,
        "stopband_freq2_hz": 32,
        "passband_ripple_db": 0.4,
        "stopband_attenuation_db": 34,
    },
    {
        "filter_type": "bandpass",
        "window_type": "hamming",
        "sampling_freq_hz": 1000,
        "stopband_freq_hz": 100,
        "passband_freq_hz": 200,
        "passband_freq2_hz": 400,
        "stopband_freq2_hz": 500,
        "passband_ripple_db": 0.2,
        "stopband_attenuation_db": 40,
    },
    {
        "filter_type": "bandpass",
        "window_type": "kaiser",
        "sampling_freq_hz": 44100,
        "stopband_freq_hz": 1000,
        "passband_freq_hz": 2000,
        "passband_freq2_hz": 3000,
        "stopband_freq2_hz": 4000,
        "passband_ripple_db": 0.1,
        "stopband_attenuation_db": 50,
    },
    {
        "filter_type": "bandpass",
        "window_type": "hamming",
        "sampling_freq_hz": 16000,
        "stopband_freq_hz": 500,
        "passband_freq_hz": 1000,
        "passband_freq2_hz": 2000,
        "stopband_freq2_hz": 3000,
        "passband_ripple_db": 0.3,
        "stopband_attenuation_db": 60,
    },
    {
        "filter_type": "bandpass",
        "window_type": "blackman",
        "sampling_freq_hz": 2000,
        "stopband_freq_hz": 250,
        "passband_freq_hz": 300,
        "passband_freq2_hz": 600,
        "stopband_freq2_hz": 700,
        "passband_ripple_db": 0.5,
        "stopband_attenuation_db": 35,
    },
    {
        "filter_type": "bandpass",
        "window_type": "kaiser",
        "sampling_freq_hz": 96000,
        "stopband_freq_hz": 10000,
        "passband_freq_hz": 12000,
        "passband_freq2_hz": 16000,
        "stopband_freq2_hz": 18000,
        "passband_ripple_db": 0.05,
        "stopband_attenuation_db": 75,
    },
    {
        "filter_type": "bandpass",
        "window_type": "hamming",
        "sampling_freq_hz": 6000,
        "stopband_freq_hz": 50,
        "passband_freq_hz": 100,
        "passband_freq2_hz": 500,
        "stopband_freq2_hz": 600,
        "passband_ripple_db": 0.25,
        "stopband_attenuation_db": 48,
    },
]

bandpass_d_results = [
    1.8140675,
    2.2318941,
    2.9282878,
    3.6246518,
    1.8837079,
    4.669315,
    2.7890081,
]

bandpass_N_results = [
    20,
    24,
    131,
    117,
    77,
    226,
    336,
]

bandpass_order_results = [
    (10, 21),
    (12, 25),
    (66, 133),
    (59, 119),
    (39, 79),
    (113, 227),
    (168, 337),
]

bandpass_coefficients_results = [
    [0.4, 0.0, -0.3027306, 0.0, 0.0935489, 0.0, 0.0623659, 0.0, -0.0756826, 0.0, 0.0],
    [
        0.6,
        -0.1591549,
        -0.2449142,
        0.0530516,
        -0.0289082,
        0.1273239,
        -0.0192721,
        0.0227364,
        -0.0612285,
        -0.0176838,
        0.0,
        0.0144686,
        0.040819,
    ],
    [
        0.0907029,
        0.0847224,
        0.0677195,
        0.0423451,
        0.012496,
        -0.0173611,
        -0.0429519,
        -0.0608983,
        -0.0692382,
        -0.0676725,
        -0.0575024,
        -0.0412859,
        -0.0222893,
        -0.0038497,
        0.011226,
        0.0211133,
        0.0251963,
        0.0240403,
        0.0191359,
        0.0124832,
        0.0061134,
        0.0016507,
        3.6e-06,
        0.0012398,
        0.0046565,
        0.0090169,
        0.0128889,
        0.0150024,
        0.0145463,
        0.0113418,
        0.00586,
        -0.0009093,
        -0.0077016,
        -0.0132711,
        -0.0166657,
        -0.0174222,
        -0.0156415,
        -0.0119323,
        -0.0072454,
        -0.0026385,
        0.0009672,
        0.0029858,
        0.0032751,
        0.0021357,
        0.000206,
        -0.0017169,
        -0.0028851,
        -0.0027861,
        -0.0012639,
        0.0014501,
        0.0048015,
        0.0080522,
        0.0104611,
        0.0114607,
        0.0107875,
        0.0085395,
        0.005146,
        0.0012633,
        -0.0023799,
        -0.0051481,
        -0.006636,
        -0.0067474,
        -0.005699,
        -0.0039502,
        -0.002079,
        -0.0006362,
        -1.1e-05,
    ],
    [
        0.1875,
        0.1536563,
        0.067675,
        -0.0320022,
        -0.1039729,
        -0.1242761,
        -0.0961431,
        -0.0445605,
        0.0,
        0.0185252,
        0.0114744,
        -0.0055636,
        -0.0143556,
        -0.0060608,
        0.0144689,
        0.0337691,
        0.0397887,
        0.0297963,
        0.0112536,
        -0.0041468,
        -0.0086134,
        -0.0029143,
        0.0052156,
        0.0072489,
        0.0,
        -0.0124769,
        -0.0221868,
        -0.0230141,
        -0.0148532,
        -0.0033105,
        0.0045116,
        0.0049566,
        0.0,
        -0.0046562,
        -0.0039808,
        0.002743,
        0.0115525,
        0.016794,
        0.0151804,
        0.007998,
        0.0,
        -0.0040665,
        -0.002732,
        0.0014232,
        0.0039151,
        0.0017509,
        -0.0044036,
        -0.0107773,
        -0.0132629,
        -0.0103374,
        -0.0040513,
        0.0015449,
        0.0033128,
        0.0011547,
        -0.0021248,
        -0.0030313,
        0.0,
        0.0054723,
        0.0099458,
        0.0105318,
    ],
    [
        0.35,
        0.0520352,
        -0.269735,
        -0.0960427,
        0.1041682,
        0.0344536,
        0.0097561,
        0.0526268,
        -0.0233872,
        -0.0679342,
        0.0,
        0.0133442,
        -0.0050659,
        0.0331789,
        0.0263991,
        -0.0277261,
        -0.0189206,
        0.0013338,
        -0.0152707,
        0.0044691,
        0.0318309,
        0.0040435,
        -0.0124942,
        0.0009859,
        -0.0126137,
        -0.0166356,
        0.0142149,
        0.015975,
        -0.0021711,
        0.0050615,
        0.0,
        -0.0197228,
        -0.0058468,
        0.0111632,
        0.0017216,
        0.0049219,
        0.0115742,
        -0.0077872,
        -0.0141965,
        0.0013342,
    ],
    [
        0.125,
        0.0756071,
        -0.0315272,
        -0.1089213,
        -0.0974621,
        -0.0138182,
        0.0693153,
        0.088435,
        0.0397887,
        -0.0265491,
        -0.0568118,
        -0.0381768,
        0.0,
        0.0215845,
        0.0168087,
        0.0031685,
        0.0,
        0.0072432,
        0.0095704,
        -0.0024297,
        -0.0194924,
        -0.0232874,
        -0.0069194,
        0.0165262,
        0.0265258,
        0.0152041,
        -0.0058548,
        -0.0181124,
        -0.0139231,
        -0.0015919,
        0.0057422,
        0.0039721,
        0.0,
        0.0014402,
        0.0069212,
        0.0080171,
        0.0,
        -0.0113498,
        -0.0149504,
        -0.0061267,
        0.0079577,
        0.0150986,
        0.0099021,
        -0.0016067,
        -0.0088601,
        -0.0072614,
        -0.0013707,
        0.0016086,
        0.0,
        -0.001543,
        0.001261,
        0.0064071,
        0.007497,
        0.0013036,
        -0.0077017,
        -0.0112553,
        -0.0056841,
        0.0041919,
        0.0097951,
        0.0071177,
        0.0,
        -0.0045999,
        -0.0037955,
        -0.0007544,
        0.0,
        -0.0018943,
        -0.0026101,
        0.000689,
        0.005733,
        0.0070874,
        0.0021746,
        -0.0053535,
        -0.0088419,
        -0.0052068,
        0.0020571,
        0.0065204,
        0.0051295,
        0.0005995,
        -0.0022085,
        -0.0015586,
        0.0,
        -0.0005867,
        -0.0028697,
        -0.0033807,
        0.0,
        0.0049405,
        0.006606,
        0.0027464,
        -0.0036171,
        -0.0069555,
        -0.004621,
        0.0007592,
        0.0042374,
        0.0035135,
        0.0006707,
        -0.0007958,
        0.0,
        0.0007794,
        -0.0006434,
        -0.0033006,
        -0.0038984,
        -0.000684,
        0.0040773,
        0.0060101,
        0.0030606,
        -0.0022756,
        -0.0053596,
        -0.0039247,
        0.0,
        0.0025743,
        0.0021392,
        0.0004281,
        0.0,
        0.0010896,
    ],
    [
        0.15,
        0.1413421,
        0.1169107,
        0.0810068,
        0.0397887,
        0.0,
        -0.032384,
        -0.0532917,
        -0.0612285,
        -0.05736,
        -0.0450158,
        -0.0287593,
        -0.0132629,
        -0.0022583,
        0.0021981,
        0.0,
        -0.007227,
        -0.0167376,
        -0.0254944,
        -0.0309859,
        -0.0318309,
        -0.0280348,
        -0.0208591,
        -0.0123713,
        -0.004818,
        0.0,
        0.0011836,
        -0.0010873,
        -0.0056841,
        -0.0109087,
        -0.0150052,
        -0.0166529,
        -0.0153071,
        -0.0113043,
        -0.0057148,
        0.0,
        0.0044209,
        0.0065681,
        0.0061531,
        0.0036241,
        0.0,
        -0.0034473,
        -0.0055671,
        -0.0056516,
        -0.0036171,
        0.0,
        0.004224,
        0.007937,
        0.0102047,
        0.0105355,
        0.0090031,
        0.0062029,
        0.0030606,
        0.0005539,
        -0.0005699,
        0.0,
        0.0020648,
        0.0049919,
        0.007912,
        0.0099785,
        0.0106103,
        0.0096513,
        0.0074016,
        0.0045165,
        0.0018067,
        0.0,
        -0.0004662,
        0.0004381,
        0.0023405,
        0.0045848,
        0.0064308,
        0.0072709,
        0.0068031,
        0.0051101,
        0.0026257,
        0.0,
        -0.0020941,
        -0.0031561,
        -0.0029977,
        -0.0017891,
        0.0,
        0.0017449,
        0.0028514,
        0.0029279,
        0.0018947,
        0.0,
        -0.0022593,
        -0.0042878,
        -0.0055662,
        -0.0058004,
        -0.0050017,
        -0.0034764,
        -0.0017299,
        -0.0003156,
        0.0003273,
        0.0,
        -0.0012045,
        -0.0029334,
        -0.0046826,
        -0.0059467,
        -0.0063661,
        -0.005829,
        -0.004499,
        -0.0027625,
        -0.0011118,
        0.0,
        0.0002903,
        -0.0002743,
        -0.0014736,
        -0.0029023,
        -0.0040923,
        -0.0046508,
        -0.0043734,
        -0.0033012,
        -0.0017044,
        0.0,
        0.001372,
        0.002077,
        0.0019815,
        0.0011877,
        0.0,
        -0.0011681,
        -0.0019165,
        -0.0019757,
        -0.0012835,
        0.0,
        0.001542,
        0.0029373,
        0.0038267,
        0.0040018,
        0.0034627,
        0.0024149,
        0.0012057,
        0.0002207,
        -0.0002296,
        0.0,
        0.0008502,
        0.0020769,
        0.0033253,
        0.0042354,
        0.0045472,
        0.0041754,
        0.0032316,
        0.0019897,
        0.000803,
        0.0,
        -0.0002107,
        0.0001997,
        0.0010753,
        0.0021231,
        0.003001,
        0.0034188,
        0.0032225,
        0.0024381,
        0.0012617,
        0.0,
        -0.0010202,
        -0.0015479,
        -0.0014798,
        -0.0008889,
        0.0,
        0.0008779,
        0.0014433,
        0.0014909,
        0.0009704,
        0.0,
        -0.0011705,
        -0.0022337,
        -0.0029156,
    ],
]


class TestBandpassFilter:
    """
    Bandpass Filter Tests
    """

    @pytest.fixture
    def filter_builder(self, filter_conf: FilterConf, round_to: int = 7):
        """
        Returns a BandpassFilter object.
        """
        return BandpassFilter(filter_conf, round_to)

    @pytest.mark.parametrize(
        "filter_conf, d",
        list(zip(bandpass_filter_configurations, bandpass_d_results)),
    )
    def test_calculate_filter_length_returns_int(
        self, filter_builder: HighpassFilter, d: float
    ):
        """
        Test that the _calculate_filter_length method returns an integer.
        """
        assert isinstance(filter_builder._calculate_filter_length(d), int)

    @pytest.mark.parametrize("filter_conf", bandpass_filter_configurations)
    def test_calculate_filter_length_raises_value_error(
        self, filter_builder: HighpassFilter
    ):
        """
        Test that the _calculate_filter_length method raises a ValueError if d is not provided.
        """
        with pytest.raises(ValueError):
            filter_builder._calculate_filter_length(None)

    @pytest.mark.parametrize(
        "filter_conf, d, expected_N",
        list(
            zip(bandpass_filter_configurations, bandpass_d_results, bandpass_N_results)
        ),
    )
    def test_calculate_filter_length_correct_value(
        self, filter_builder: HighpassFilter, d: float, expected_N: int
    ):
        """
        Test that the _calculate_filter_length method returns the correct value.
        """
        assert filter_builder._calculate_filter_length(d) == expected_N

    @pytest.mark.parametrize(
        "filter_conf",
        bandpass_filter_configurations,
    )
    def test_calculate_impulse_response_coefficients_raises_value_error(
        self, filter_builder: HighpassFilter
    ):
        """
        Test that the calculate_impulse_response_coefficients method raises a ValueError
        if self.n is not previously calculate.
        """
        with pytest.raises(ValueError):
            filter_builder.calculate_impulse_response_coefficients()

    @pytest.mark.parametrize(
        "filter_conf, order",
        list(zip(bandpass_filter_configurations, bandpass_order_results)),
    )
    def test_calculate_impulse_response_coefficients_returns_list(
        self, filter_builder: HighpassFilter, order: tuple[int, int]
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns a list.
        """
        n, N = order
        filter_builder.n = n
        assert isinstance(
            filter_builder.calculate_impulse_response_coefficients(), list
        )

    @pytest.mark.parametrize(
        "filter_conf, order",
        list(zip(bandpass_filter_configurations, bandpass_order_results)),
    )
    def test_calculate_impulse_response_coefficients_correct_length(
        self, filter_builder: HighpassFilter, order: tuple[int, int]
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns the correct length.
        """
        n, N = order
        filter_builder.n = n
        c = filter_builder.calculate_impulse_response_coefficients()
        assert len(c) == n + 1

    @pytest.mark.parametrize(
        "filter_conf, order, coefficients",
        list(
            zip(
                bandpass_filter_configurations,
                bandpass_order_results,
                bandpass_coefficients_results,
            )
        ),
    )
    def test_calculate_impulse_response_coefficients_correct_values(
        self,
        filter_builder: HighpassFilter,
        order: tuple[int, int],
        coefficients: list[float],
    ):
        """
        Test that the calculate_impulse_response_coefficients method returns the correct values.
        """
        n, N = order
        filter_builder.n = n
        c = filter_builder.calculate_impulse_response_coefficients()
        assert c == coefficients
