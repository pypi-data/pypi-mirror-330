import os
import glob
from astropy.io import fits
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# NEID wavelength bounds for different orders in Angstrom. Derived from NEID FSR (neid_fsr.csv)
BOUNDS = {
    '10': [3753.648156000877, 3776.6552799412307],
    '11': [3775.816807269321, 3800.0661793501963],
    '12': [3799.932526170035, 3823.0462914261907],
    '13': [3822.5422231710645, 3846.7245313736908],
    '14': [3846.23866751893, 3870.8160258157195],
    '15': [3870.37819106182, 3894.984759967885],
    '16': [3894.589880666735, 3919.5345391471888],
    '17': [3919.174671902944, 3944.547554040351],
    '18': [3944.2321801759585, 3969.8153385384358],
    '19': [3969.6330299528217, 3995.525877369975],
    '20': [3995.4224434349794, 4021.579390667846],
    '21': [4021.3715973537987, 4048.252786610582],
    '22': [4048.091206529326, 4075.0243319531064],
    '23': [4074.6412493089815, 4102.26160310237],
    '24': [4101.7209686227925, 4130.302455612613],
    '25': [4129.282184000315, 4158.037161613106],
    '26': [4157.443293980817, 4186.410670272122],
    '27': [4185.586828815821, 4215.1961588160275],
    '28': [4214.266785612782, 4244.202520199879],
    '29': [4243.385047185162, 4273.700545217087],
    '30': [4272.9912915549685, 4303.627402203633],
    '31': [4302.912345857481, 4333.926657914155],
    '32': [4333.278585000361, 4364.803831553178],
    '33': [4364.078444536309, 4396.063932255782],
    '34': [4395.289945774679, 4427.74848242336],
    '35': [4427.132601603446, 4459.959955705854],
    '36': [4459.3551726494525, 4492.733690101623],
    '37': [4492.2112841372345, 4525.581543344342],
    '38': [4524.747593710076, 4559.18982935822],
    '39': [4558.463146701305, 4593.3947702313135],
    '40': [4592.664026481643, 4627.71429026071],
    '41': [4627.107138682643, 4662.921620174575],
    '42': [4662.253272847759, 4698.586838056449],
    '43': [4697.906635819421, 4734.836110040984],
    '44': [4734.021717214013, 4771.137551883522],
    '45': [4770.5976772065, 4808.862912021927],
    '46': [4808.406924223209, 4847.451799370049],
    '47': [4845.6405045847305, 4885.4861145874565],
    '48': [4884.667337029223, 4924.781348045058],
    '49': [4923.992098510901, 4964.366987552489],
    '50': [4964.003748907041, 5004.923995497515],
    '51': [5004.671581826336, 5045.956950552349],
    '52': [5046.011691368717, 5087.839026497913],
    '53': [5087.893001635377, 5130.190099697808],
    '54': [5130.553572032382, 5173.559797230099],
    '55': [5173.773984904827, 5217.393481479778],
    '56': [5217.871958823714, 5262.356930501427],
    '57': [5263.021913749441, 5307.397077221358],
    '58': [5307.931721920883, 5353.915226300151],
    '59': [5354.405288763551, 5401.0488662814105],
    '60': [5401.675163137737, 5448.875612783465],
    '61': [5449.313251315215, 5497.830323497814],
    '62': [5498.276143343188, 5547.615342546218],
    '63': [5547.791798338359, 5598.253629839504],
    '64': [5598.747104013057, 5649.7689216233175],
    '65': [5650.095397263472, 5702.237880338992],
    '66': [5702.667077188117, 5755.62424166781],
    '67': [5755.934992782059, 5810.0923019199245],
    '68': [5810.515451896964, 5865.5331749749475],
    '69': [5865.958331749221, 5922.137484541546],
    '70': [5922.724308970812, 5979.829734261999],
    '71': [5980.2505011779995, 6038.520826993035],
    '72': [6039.212082308112, 6098.5738649614395],
    '73': [6098.886286843387, 6159.704360791231],
    '74': [6159.947134812742, 6222.284134744038],
    '75': [6222.098723045735, 6285.969578935292],
    '76': [6285.670787476482, 6351.185710936974],
    '77': [6350.550255075698, 6417.586154800117],
    '78': [6416.650088150519, 6485.453949572474],
    '79': [6484.284325550842, 6554.65921861745],
    '80': [6554.274545062562, 6625.435516510785],
    '81': [6624.807892172201, 6697.88159500018],
    '82': [6696.6707231870805, 6771.737480011413],
    '83': [6770.48611877379, 6846.794671449412],
    '84': [6846.11503309758, 6923.810524138299],
    '85': [6923.374494924831, 7002.401591964186],
    '86': [7002.391594925888, 7082.837175338067],
    '87': [7082.95757874406, 7165.092253779934],
    '88': [7165.3622320564, 7249.748545251532],
    '89': [7250.318799935472, 7336.511200641103],
    '90': [7336.308952628353, 7425.691702821409],
    '91': [7425.439722205344, 7516.154674614481],
    '92': [7515.785516858366, 7609.590596590315],
    '93': [7608.679873241255, 7705.819911365751],
    '94': [7704.222264730966, 7804.2745948279735],
    '95': [7802.313609207384, 7904.093106368498],
    '96': [7901.286431078584, 8007.9123436369455],
    '97': [8004.127920867465, 8113.404260573979],
    '98': [8110.538680625225, 8221.709172466919],
    '99': [8219.286044801594, 8333.876125054001],
    '100': [8331.339585158154, 8447.832514011228],
    '101': [8446.305584809803, 8565.353560580945],
    '102': [8564.463519283021, 8685.720481034588],
    '103': [8685.490828395317, 8810.042341079652],
    '104': [8810.792726079537, 8937.074481099464],
    '105': [8938.520302447769, 9067.210889324242],
    '106': [9070.829130791393, 9200.774041321385],
    '107': [9204.523653547358, 9337.774612612888],
    '108': [9343.570526923602, 9476.539055244086],
    '109': [9486.375316817805, 9629.57510635908],
    '110': [9638.306629418717, 9781.58760274302],
    '111': [9792.431891799297, 9933.540260256805],
    '112': [9952.973708829177, 10103.401850721059],
    '113': [10118.938871664775, 10258.942816132918],
    '114': [10290.306528462517, 10425.458216503135],
    '115': [10467.806991143882, 10608.438775041766],
}

# Directory name of package
DIRNAME = os.path.dirname(os.path.dirname(__file__))
# DIRNAME = '/home/sejones/neidspecmatch'
print('DIRNAME: {}'.format(DIRNAME))

# Default library path
PATH_LIBRARIES = os.path.join(DIRNAME, "library")
PATH_LIBRARY = os.path.join(PATH_LIBRARIES, "20250226_specmatch_nir")
PATH_LIBRARY_DB = os.path.join(PATH_LIBRARY, "20250226_78stars.csv")
PATH_LIBRARY_FITS = os.path.join(PATH_LIBRARY, "FITS")
PATH_LIBRARY_CROSSVAL = os.path.join(PATH_LIBRARY, "crossval")
PATH_LIBRARY_ZIPNAME = os.path.join(PATH_LIBRARY, '20210406_specmatch_nir_library.zip')
URL_LIBRARY = 'https://www.dropbox.com/s/rtees0v6yt0t9eb/20210811_specmatch_nir.zip?dl=1'
LIBRARY_FITSFILES = sorted(glob.glob(PATH_LIBRARY_FITS + '/*.fits'))
print(PATH_LIBRARY_FITS)
PATH_FSR = os.path.join(DIRNAME, 'lib/neid_fsr.csv')

if __name__ == '__main__':
    fsr_csv = pd.read_csv(PATH_FSR)
    example_spec = fits.open(PATH_LIBRARY_FITS + '/neidL2_20211219T071619.fits')
    w = example_spec[7].data

    bounds_dict = {}

    for i, row in fsr_csv.iterrows():
        order_num = row['order']
        fsr_start = row['fsr_start']
        fsr_end = row['fsr_end']

        # Skip orders with NaN values
        if pd.isna(fsr_start) or pd.isna(fsr_end):
            continue

        start = int(fsr_start)
        end = int(fsr_end)

        # Extract the wavelength bounds for the current order
        wavelength_start = w[i][start]
        wavelength_end = w[i][end - 1]  # Subtract 1 to get the last pixel within FSR

        # Store the bounds in the dictionary
        bounds_dict[int(order_num)] = [wavelength_start, wavelength_end]

        # Print the resulting dictionary in a vertical format
    print("{")
    for key, value in bounds_dict.items():
        print(f"    '{key}': {value},")
    print("}")