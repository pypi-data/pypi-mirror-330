"""
Auto generated by Mercado Radar SDK Generator
2025-02-27 21:02:39
"""
from typing import Optional, List, Any

from .models._paginated_response import PaginatedResponse
from .models._product_history import ProductHistory as ProductHistorySchema


class ProductHistory:

    def __init__(self, client):
        self.client = client

    def list(self, product_id:float, created_at_after:str, created_at_before:str, status:List[Any], sales_price_min:float, sales_price_max:float, installment_price_min:float, installment_price_max:float, regular_price_min:float, regular_price_max:float, rating_min:float, rating_max:float, reviews_quantity_min:int, reviews_quantity_max:int, reviews_one_star_quantity_min:int, reviews_one_star_quantity_max:int, reviews_two_star_quantity_min:int, reviews_two_star_quantity_max:int, reviews_three_star_quantity_min:int, reviews_three_star_quantity_max:int, reviews_four_star_quantity_min:int, reviews_four_star_quantity_max:int, reviews_five_star_quantity_min:int, reviews_five_star_quantity_max:int, sold_quantity_min:int, sold_quantity_max:int, units_in_stock_min:int, units_in_stock_max:int, limit:int, offset:int) -> PaginatedResponse[ProductHistorySchema]:
        """
        List all Product Histories for Product

        List all Product Histories for [Product](#/v3%product/v3_product_list)
        """
        data = {
            "product_id": product_id,
            "created_at_after": created_at_after,
            "created_at_before": created_at_before,
            "status": status,
            "sales_price_min": sales_price_min,
            "sales_price_max": sales_price_max,
            "installment_price_min": installment_price_min,
            "installment_price_max": installment_price_max,
            "regular_price_min": regular_price_min,
            "regular_price_max": regular_price_max,
            "rating_min": rating_min,
            "rating_max": rating_max,
            "reviews_quantity_min": reviews_quantity_min,
            "reviews_quantity_max": reviews_quantity_max,
            "reviews_one_star_quantity_min": reviews_one_star_quantity_min,
            "reviews_one_star_quantity_max": reviews_one_star_quantity_max,
            "reviews_two_star_quantity_min": reviews_two_star_quantity_min,
            "reviews_two_star_quantity_max": reviews_two_star_quantity_max,
            "reviews_three_star_quantity_min": reviews_three_star_quantity_min,
            "reviews_three_star_quantity_max": reviews_three_star_quantity_max,
            "reviews_four_star_quantity_min": reviews_four_star_quantity_min,
            "reviews_four_star_quantity_max": reviews_four_star_quantity_max,
            "reviews_five_star_quantity_min": reviews_five_star_quantity_min,
            "reviews_five_star_quantity_max": reviews_five_star_quantity_max,
            "sold_quantity_min": sold_quantity_min,
            "sold_quantity_max": sold_quantity_max,
            "units_in_stock_min": units_in_stock_min,
            "units_in_stock_max": units_in_stock_max,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/product-history/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(ProductHistorySchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page, "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, sales_price:Optional[float] = None, installment_price:Optional[float] = None, regular_price:Optional[float] = None, status:Any, rating:Optional[float] = None, reviews_quantity:Optional[int] = None, reviews_one_star_quantity:Optional[int] = None, reviews_two_star_quantity:Optional[int] = None, reviews_three_star_quantity:Optional[int] = None, reviews_four_star_quantity:Optional[int] = None, reviews_five_star_quantity:Optional[int] = None, sold_quantity:Optional[int] = None, units_in_stock:Optional[int] = None) -> ProductHistorySchema:
        """
        Create a new Product History for a Product

        Create a new Product History for a [Product](#/v3%product/v3_product_list)
        """
        data = {
            "sales_price": sales_price,
            "installment_price": installment_price,
            "regular_price": regular_price,
            "status": status,
            "rating": rating,
            "reviews_quantity": reviews_quantity,
            "reviews_one_star_quantity": reviews_one_star_quantity,
            "reviews_two_star_quantity": reviews_two_star_quantity,
            "reviews_three_star_quantity": reviews_three_star_quantity,
            "reviews_four_star_quantity": reviews_four_star_quantity,
            "reviews_five_star_quantity": reviews_five_star_quantity,
            "sold_quantity": sold_quantity,
            "units_in_stock": units_in_stock,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/product-history/", json=data)

        response.raise_for_status()

        return ProductHistorySchema(**response.json())

    def destroy(self, id:int) -> ProductHistorySchema:
        """
        Destroy a Product History by ID

        Destroy a Product History by ID
        """

        response = self.client.delete(url=f"/v3/product-history/{id}/")

        response.raise_for_status()

        return ProductHistorySchema(**response.json())

