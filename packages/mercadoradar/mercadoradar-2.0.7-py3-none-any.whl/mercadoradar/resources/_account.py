"""
Auto generated by Mercado Radar SDK Generator
2025-02-27 21:31:37
"""
from typing import List, Any

from ..models._account import Account as AccountSchema
from ..models._paginated_response import PaginatedResponse


class Account:

    def __init__(self, client):
        self.client = client

    def list(self, name:str, status:List[Any], limit:int, offset:int) -> PaginatedResponse[AccountSchema]:
        """
        List all Accounts

        List all Accounts
        """
        data = {
            "name": name,
            "status": status,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/account/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(AccountSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page, "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, name:str) -> AccountSchema:
        """
        Create a new Account

        Create a new Account
        """
        data = {
            "name": name,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/account/", json=data)

        response.raise_for_status()

        return AccountSchema(**response.json())

    def retrieve(self, id:int) -> AccountSchema:
        """
        Retrieve a Account by ID

        Retrieve a Account by ID
        """

        response = self.client.get(url=f"/v3/account/{id}/")

        response.raise_for_status()

        return AccountSchema(**response.json())

    def update(self, id:int, name:str) -> AccountSchema:
        """
        Partially update a Account by ID

        Partially update a Account by ID
        """
        data = {
            "id": id,
            "name": name,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.patch(url=f"/v3/account/{id}/", json=data)

        response.raise_for_status()

        return AccountSchema(**response.json())

    def destroy(self, id:int) -> AccountSchema:
        """
        Destroy a Account by ID

        Destroy a Account by ID
        """

        response = self.client.delete(url=f"/v3/account/{id}/")

        response.raise_for_status()

        return AccountSchema(**response.json())

