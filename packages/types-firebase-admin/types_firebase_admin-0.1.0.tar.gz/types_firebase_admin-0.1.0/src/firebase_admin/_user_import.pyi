from _typeshed import Incomplete

def b64_encode(bytes_value): ...

class UserProvider:
    def __init__(self, uid, provider_id, email: Incomplete | None = None, display_name: Incomplete | None = None, photo_url: Incomplete | None = None) -> None: ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, uid) -> None: ...
    @property
    def provider_id(self): ...
    @provider_id.setter
    def provider_id(self, provider_id) -> None: ...
    @property
    def email(self): ...
    @email.setter
    def email(self, email) -> None: ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name) -> None: ...
    @property
    def photo_url(self): ...
    @photo_url.setter
    def photo_url(self, photo_url) -> None: ...
    def to_dict(self): ...

class ImportUserRecord:
    email_verified: Incomplete
    disabled: Incomplete
    def __init__(self, uid, email: Incomplete | None = None, email_verified: Incomplete | None = None, display_name: Incomplete | None = None, phone_number: Incomplete | None = None, photo_url: Incomplete | None = None, disabled: Incomplete | None = None, user_metadata: Incomplete | None = None, provider_data: Incomplete | None = None, custom_claims: Incomplete | None = None, password_hash: Incomplete | None = None, password_salt: Incomplete | None = None) -> None: ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, uid) -> None: ...
    @property
    def email(self): ...
    @email.setter
    def email(self, email) -> None: ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name) -> None: ...
    @property
    def phone_number(self): ...
    @phone_number.setter
    def phone_number(self, phone_number) -> None: ...
    @property
    def photo_url(self): ...
    @photo_url.setter
    def photo_url(self, photo_url) -> None: ...
    @property
    def password_hash(self): ...
    @password_hash.setter
    def password_hash(self, password_hash) -> None: ...
    @property
    def password_salt(self): ...
    @password_salt.setter
    def password_salt(self, password_salt) -> None: ...
    @property
    def user_metadata(self): ...
    @user_metadata.setter
    def user_metadata(self, user_metadata) -> None: ...
    @property
    def provider_data(self): ...
    @provider_data.setter
    def provider_data(self, provider_data) -> None: ...
    @property
    def custom_claims(self): ...
    @custom_claims.setter
    def custom_claims(self, custom_claims) -> None: ...
    def to_dict(self): ...

class UserImportHash:
    def __init__(self, name, data: Incomplete | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def hmac_sha512(cls, key): ...
    @classmethod
    def hmac_sha256(cls, key): ...
    @classmethod
    def hmac_sha1(cls, key): ...
    @classmethod
    def hmac_md5(cls, key): ...
    @classmethod
    def md5(cls, rounds): ...
    @classmethod
    def sha1(cls, rounds): ...
    @classmethod
    def sha256(cls, rounds): ...
    @classmethod
    def sha512(cls, rounds): ...
    @classmethod
    def pbkdf_sha1(cls, rounds): ...
    @classmethod
    def pbkdf2_sha256(cls, rounds): ...
    @classmethod
    def scrypt(cls, key, rounds, memory_cost, salt_separator: Incomplete | None = None): ...
    @classmethod
    def bcrypt(cls): ...
    @classmethod
    def standard_scrypt(cls, memory_cost, parallelization, block_size, derived_key_length): ...

class ErrorInfo:
    def __init__(self, error) -> None: ...
    @property
    def index(self): ...
    @property
    def reason(self): ...

class UserImportResult:
    def __init__(self, result, total) -> None: ...
    @property
    def success_count(self): ...
    @property
    def failure_count(self): ...
    @property
    def errors(self): ...
