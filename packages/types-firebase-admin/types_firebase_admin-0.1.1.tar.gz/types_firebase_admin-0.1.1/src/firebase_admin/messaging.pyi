from _typeshed import Incomplete

__all__ = ['AndroidConfig', 'AndroidFCMOptions', 'AndroidNotification', 'APNSConfig', 'APNSFCMOptions', 'APNSPayload', 'Aps', 'ApsAlert', 'BatchResponse', 'CriticalSound', 'ErrorInfo', 'FCMOptions', 'LightSettings', 'Message', 'MulticastMessage', 'Notification', 'QuotaExceededError', 'SenderIdMismatchError', 'SendResponse', 'ThirdPartyAuthError', 'TopicManagementResponse', 'UnregisteredError', 'WebpushConfig', 'WebpushFCMOptions', 'WebpushNotification', 'WebpushNotificationAction', 'send', 'send_all', 'send_multicast', 'send_each', 'send_each_for_multicast', 'subscribe_to_topic', 'unsubscribe_from_topic']

AndroidConfig: Incomplete
AndroidFCMOptions: Incomplete
AndroidNotification: Incomplete
APNSConfig: Incomplete
APNSFCMOptions: Incomplete
APNSPayload: Incomplete
Aps: Incomplete
ApsAlert: Incomplete
CriticalSound: Incomplete
FCMOptions: Incomplete
LightSettings: Incomplete
Message: Incomplete
MulticastMessage: Incomplete
Notification: Incomplete
WebpushConfig: Incomplete
WebpushFCMOptions: Incomplete
WebpushNotification: Incomplete
WebpushNotificationAction: Incomplete
QuotaExceededError: Incomplete
SenderIdMismatchError: Incomplete
ThirdPartyAuthError: Incomplete
UnregisteredError: Incomplete

def send(message, dry_run: bool = False, app: Incomplete | None = None): ...
def send_each(messages, dry_run: bool = False, app: Incomplete | None = None): ...
def send_each_for_multicast(multicast_message, dry_run: bool = False, app: Incomplete | None = None): ...
def send_all(messages, dry_run: bool = False, app: Incomplete | None = None): ...
def send_multicast(multicast_message, dry_run: bool = False, app: Incomplete | None = None): ...
def subscribe_to_topic(tokens, topic, app: Incomplete | None = None): ...
def unsubscribe_from_topic(tokens, topic, app: Incomplete | None = None): ...

class ErrorInfo:
    def __init__(self, index, reason) -> None: ...
    @property
    def index(self): ...
    @property
    def reason(self): ...

class TopicManagementResponse:
    def __init__(self, resp) -> None: ...
    @property
    def success_count(self): ...
    @property
    def failure_count(self): ...
    @property
    def errors(self): ...

class BatchResponse:
    def __init__(self, responses) -> None: ...
    @property
    def responses(self): ...
    @property
    def success_count(self): ...
    @property
    def failure_count(self): ...

class SendResponse:
    def __init__(self, resp, exception) -> None: ...
    @property
    def message_id(self): ...
    @property
    def success(self): ...
    @property
    def exception(self): ...

class _MessagingService:
    FCM_URL: str
    FCM_BATCH_URL: str
    IID_URL: str
    IID_HEADERS: Incomplete
    JSON_ENCODER: Incomplete
    FCM_ERROR_TYPES: Incomplete
    def __init__(self, app) -> None: ...
    @classmethod
    def encode_message(cls, message): ...
    def send(self, message, dry_run: bool = False): ...
    def send_each(self, messages, dry_run: bool = False): ...
    def send_all(self, messages, dry_run: bool = False): ...
    def make_topic_management_request(self, tokens, topic, operation): ...
