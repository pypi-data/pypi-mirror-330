from _typeshed import Incomplete

__all__ = ['ListTenantsPage', 'Tenant', 'TenantIdMismatchError', 'TenantNotFoundError', 'auth_for_tenant', 'create_tenant', 'delete_tenant', 'get_tenant', 'list_tenants', 'update_tenant']

TenantIdMismatchError: Incomplete
TenantNotFoundError: Incomplete

def auth_for_tenant(tenant_id, app: Incomplete | None = None): ...
def get_tenant(tenant_id, app: Incomplete | None = None): ...
def create_tenant(display_name, allow_password_sign_up: Incomplete | None = None, enable_email_link_sign_in: Incomplete | None = None, app: Incomplete | None = None): ...
def update_tenant(tenant_id, display_name: Incomplete | None = None, allow_password_sign_up: Incomplete | None = None, enable_email_link_sign_in: Incomplete | None = None, app: Incomplete | None = None): ...
def delete_tenant(tenant_id, app: Incomplete | None = None) -> None: ...
def list_tenants(page_token: Incomplete | None = None, max_results=..., app: Incomplete | None = None): ...

class Tenant:
    def __init__(self, data) -> None: ...
    @property
    def tenant_id(self): ...
    @property
    def display_name(self): ...
    @property
    def allow_password_sign_up(self): ...
    @property
    def enable_email_link_sign_in(self): ...

class _TenantManagementService:
    TENANT_MGT_URL: str
    app: Incomplete
    client: Incomplete
    tenant_clients: Incomplete
    lock: Incomplete
    def __init__(self, app) -> None: ...
    def auth_for_tenant(self, tenant_id): ...
    def get_tenant(self, tenant_id): ...
    def create_tenant(self, display_name, allow_password_sign_up: Incomplete | None = None, enable_email_link_sign_in: Incomplete | None = None): ...
    def update_tenant(self, tenant_id, display_name: Incomplete | None = None, allow_password_sign_up: Incomplete | None = None, enable_email_link_sign_in: Incomplete | None = None): ...
    def delete_tenant(self, tenant_id) -> None: ...
    def list_tenants(self, page_token: Incomplete | None = None, max_results=...): ...

class ListTenantsPage:
    def __init__(self, download, page_token, max_results) -> None: ...
    @property
    def tenants(self): ...
    @property
    def next_page_token(self): ...
    @property
    def has_next_page(self): ...
    def get_next_page(self): ...
    def iterate_all(self): ...

class _TenantIterator:
    def __init__(self, current_page) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def __iter__(self): ...
