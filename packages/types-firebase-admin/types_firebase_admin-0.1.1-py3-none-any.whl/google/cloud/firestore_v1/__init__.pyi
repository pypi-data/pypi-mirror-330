from _typeshed import Incomplete
from typing import Any, List, Union, Optional, TypeVar, overload, Type, cast
from google.cloud.firestore_v1.client import Client

# Define DocumentSnapshot class
class DocumentSnapshot:
    def __init__(self) -> None: ...
    @property
    def exists(self) -> bool: ...
    def to_dict(self) -> Optional[dict[str, Any]]: ...
    @property
    def id(self) -> str: ...

# Forward reference for Query
from google.cloud.firestore_v1.query import Query

# Define CollectionReference class that inherits from Query
class CollectionReference(Query):
    @overload
    def document(self) -> "DocumentReference": ...
    @overload
    def document(self, document_path: str) -> "DocumentReference": ...
    def document(self, document_path: Optional[str] = None) -> "DocumentReference": ...
    def where(self, field_path: str, op_string: str, value: Any) -> "CollectionReference": ...
    def stream(self) -> List[Any]: ...
    def get(self) -> List[DocumentSnapshot]: ...

# Define DocumentReference class
class DocumentReference:
    def get(self) -> DocumentSnapshot: ...
    def set(self, data: dict[str, Any], merge: bool = False) -> None: ...
    def update(self, data: dict[str, Any]) -> None: ...
    def delete(self) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def parent(self) -> CollectionReference: ...

# Define SERVER_TIMESTAMP constant
SERVER_TIMESTAMP: Incomplete

# Re-export Client
__all__ = ["Client", "Query", "CollectionReference", "DocumentReference", "DocumentSnapshot", "SERVER_TIMESTAMP"]
