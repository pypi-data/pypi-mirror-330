from _typeshed import Incomplete
from firebase_admin import _http_client, exceptions as exceptions

def reference(path: str = '/', app: Incomplete | None = None, url: Incomplete | None = None): ...

class Event:
    def __init__(self, sse_event) -> None: ...
    @property
    def data(self): ...
    @property
    def path(self): ...
    @property
    def event_type(self): ...

class ListenerRegistration:
    def __init__(self, callback, sse) -> None: ...
    def close(self) -> None: ...

class Reference:
    def __init__(self, **kwargs) -> None: ...
    @property
    def key(self): ...
    @property
    def path(self): ...
    @property
    def parent(self): ...
    def child(self, path): ...
    def get(self, etag: bool = False, shallow: bool = False): ...
    def get_if_changed(self, etag): ...
    def set(self, value) -> None: ...
    def set_if_unchanged(self, expected_etag, value): ...
    def push(self, value: str = ''): ...
    def update(self, value) -> None: ...
    def delete(self) -> None: ...
    def listen(self, callback): ...
    def transaction(self, transaction_update): ...
    def order_by_child(self, path): ...
    def order_by_key(self): ...
    def order_by_value(self): ...

class Query:
    def __init__(self, **kwargs) -> None: ...
    def limit_to_first(self, limit): ...
    def limit_to_last(self, limit): ...
    def start_at(self, start): ...
    def end_at(self, end): ...
    def equal_to(self, value): ...
    def get(self): ...

class TransactionAbortedError(exceptions.AbortedError):
    def __init__(self, message) -> None: ...

class _Sorter:
    dict_input: bool
    sort_entries: Incomplete
    def __init__(self, results, order_by) -> None: ...
    def get(self): ...

class _SortEntry:
    def __init__(self, key, value, order_by) -> None: ...
    @property
    def key(self): ...
    @property
    def index(self): ...
    @property
    def index_type(self): ...
    @property
    def value(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __eq__(self, other): ...

class _DatabaseService:
    def __init__(self, app) -> None: ...
    def get_client(self, db_url: Incomplete | None = None): ...
    def close(self) -> None: ...

class _Client(_http_client.JsonHttpClient):
    credential: Incomplete
    params: Incomplete
    def __init__(self, credential, base_url, timeout, params: Incomplete | None = None) -> None: ...
    def request(self, method, url, **kwargs): ...
    def create_listener_session(self): ...
    @classmethod
    def handle_rtdb_error(cls, error): ...
