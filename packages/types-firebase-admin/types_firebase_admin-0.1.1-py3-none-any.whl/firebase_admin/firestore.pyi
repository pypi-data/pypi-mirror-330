from _typeshed import Incomplete
from typing import Any, List, Union, Optional, TypeVar, overload, Type, cast
from firebase_admin import App as App

# Define SERVER_TIMESTAMP constant
SERVER_TIMESTAMP: Incomplete

existing: Incomplete

# Define DocumentSnapshot class
class DocumentSnapshot:
    def __init__(self) -> None: ...
    @property
    def exists(self) -> bool: ...
    def to_dict(self) -> Optional[dict[str, Any]]: ...
    @property
    def id(self) -> str: ...

# Define Query class
class Query:
    def where(self, field_path: str, op_string: str, value: Any) -> "CollectionReference": ...
    def stream(self) -> List[Any]: ...
    def get(self) -> List[DocumentSnapshot]: ...

# Define CollectionReference class that inherits from Query
class CollectionReference(Query):
    @overload
    def document(self) -> "DocumentReference": ...
    @overload
    def document(self, document_path: str) -> "DocumentReference": ...
    def document(self, document_path: Optional[str] = None) -> "DocumentReference": ...
    def where(self, field_path: str, op_string: str, value: Any) -> "CollectionReference": ...
    def stream(self) -> List[Any]: ...
    def get(self) -> List[DocumentSnapshot]: ...

# Define DocumentReference class
class DocumentReference:
    def get(self) -> DocumentSnapshot: ...
    def set(self, data: dict[str, Any], merge: bool = False) -> None: ...
    def update(self, data: dict[str, Any]) -> None: ...
    def delete(self) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def parent(self) -> CollectionReference: ...

# Define Client class
class Client:
    def __init__(self, project: str = "", database: str = "") -> None: ...
    def collection(self, collection_path: str) -> CollectionReference: ...
    def transaction(self) -> Any: ...

def client(app: App | None = None, database_id: str | None = None) -> Client: ...

class _FirestoreService:
    def __init__(self, app: App) -> None: ...
    def get_client(self, database_id: str | None) -> Client: ...
