from _typeshed import Incomplete
from firebase_admin import exceptions as exceptions, storage as storage

def create_model(model, app: Incomplete | None = None): ...
def update_model(model, app: Incomplete | None = None): ...
def publish_model(model_id, app: Incomplete | None = None): ...
def unpublish_model(model_id, app: Incomplete | None = None): ...
def get_model(model_id, app: Incomplete | None = None): ...
def list_models(list_filter: Incomplete | None = None, page_size: Incomplete | None = None, page_token: Incomplete | None = None, app: Incomplete | None = None): ...
def delete_model(model_id, app: Incomplete | None = None) -> None: ...

class Model:
    def __init__(self, display_name: Incomplete | None = None, tags: Incomplete | None = None, model_format: Incomplete | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data, app: Incomplete | None = None): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @property
    def model_id(self): ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name): ...
    @property
    def create_time(self): ...
    @property
    def update_time(self): ...
    @property
    def validation_error(self): ...
    @property
    def published(self): ...
    @property
    def etag(self): ...
    @property
    def model_hash(self): ...
    @property
    def tags(self): ...
    @tags.setter
    def tags(self, tags): ...
    @property
    def locked(self): ...
    def wait_for_unlocked(self, max_time_seconds: Incomplete | None = None) -> None: ...
    @property
    def model_format(self): ...
    @model_format.setter
    def model_format(self, model_format): ...
    def as_dict(self, for_upload: bool = False): ...

class ModelFormat:
    def as_dict(self, for_upload: bool = False) -> None: ...

class TFLiteFormat(ModelFormat):
    def __init__(self, model_source: Incomplete | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @property
    def model_source(self): ...
    @model_source.setter
    def model_source(self, model_source) -> None: ...
    @property
    def size_bytes(self): ...
    def as_dict(self, for_upload: bool = False): ...

class TFLiteModelSource:
    def as_dict(self, for_upload: bool = False) -> None: ...

class _CloudStorageClient:
    GCS_URI: str
    BLOB_NAME: str
    @staticmethod
    def upload(bucket_name, model_file_name, app): ...
    @staticmethod
    def sign_uri(gcs_tflite_uri, app): ...

class TFLiteGCSModelSource(TFLiteModelSource):
    def __init__(self, gcs_tflite_uri, app: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @classmethod
    def from_tflite_model_file(cls, model_file_name, bucket_name: Incomplete | None = None, app: Incomplete | None = None): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir, model_file_name: str = 'firebase_ml_model.tflite', bucket_name: Incomplete | None = None, app: Incomplete | None = None): ...
    @classmethod
    def from_keras_model(cls, keras_model, model_file_name: str = 'firebase_ml_model.tflite', bucket_name: Incomplete | None = None, app: Incomplete | None = None): ...
    @property
    def gcs_tflite_uri(self): ...
    @gcs_tflite_uri.setter
    def gcs_tflite_uri(self, gcs_tflite_uri) -> None: ...
    def as_dict(self, for_upload: bool = False): ...

class TFLiteAutoMlSource(TFLiteModelSource):
    def __init__(self, auto_ml_model, app: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @property
    def auto_ml_model(self): ...
    @auto_ml_model.setter
    def auto_ml_model(self, auto_ml_model) -> None: ...
    def as_dict(self, for_upload: bool = False): ...

class ListModelsPage:
    def __init__(self, list_models_func, list_filter, page_size, page_token, app) -> None: ...
    @property
    def models(self): ...
    @property
    def list_filter(self): ...
    @property
    def next_page_token(self): ...
    @property
    def has_next_page(self): ...
    def get_next_page(self): ...
    def iterate_all(self): ...

class _ModelIterator:
    def __init__(self, current_page) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def __iter__(self): ...

class _MLService:
    PROJECT_URL: str
    OPERATION_URL: str
    POLL_EXPONENTIAL_BACKOFF_FACTOR: float
    POLL_BASE_WAIT_TIME_SECONDS: int
    def __init__(self, app) -> None: ...
    def get_operation(self, op_name): ...
    def handle_operation(self, operation, wait_for_operation: bool = False, max_time_seconds: Incomplete | None = None): ...
    def create_model(self, model): ...
    def update_model(self, model, update_mask: Incomplete | None = None): ...
    def set_published(self, model_id, publish): ...
    def get_model(self, model_id): ...
    def list_models(self, list_filter, page_size, page_token): ...
    def delete_model(self, model_id) -> None: ...
