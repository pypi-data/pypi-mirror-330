from dataclasses import dataclass
from datetime import datetime
from firebase_admin import App
from typing import Any

__all__ = ['TaskOptions', 'task_queue']

def task_queue(function_name: str, extension_id: str | None = None, app: App | None = None) -> TaskQueue: ...

class _FunctionsService:
    def __init__(self, app: App) -> None: ...
    def task_queue(self, function_name: str, extension_id: str | None = None) -> TaskQueue: ...
    @classmethod
    def handle_functions_error(cls, error: Any): ...

class TaskQueue:
    def __init__(self, function_name: str, extension_id: str | None, project_id, credential, http_client) -> None: ...
    def enqueue(self, task_data: Any, opts: TaskOptions | None = None) -> str: ...
    def delete(self, task_id: str) -> None: ...

class _Validators:
    @classmethod
    def check_non_empty_string(cls, label: str, value: Any): ...
    @classmethod
    def is_non_empty_string(cls, value: Any): ...
    @classmethod
    def is_task_id(cls, task_id: Any): ...
    @classmethod
    def is_url(cls, url: Any): ...

@dataclass
class TaskOptions:
    schedule_delay_seconds: int | None = ...
    schedule_time: datetime | None = ...
    dispatch_deadline_seconds: int | None = ...
    task_id: str | None = ...
    headers: dict[str, str] | None = ...
    uri: str | None = ...

@dataclass
class Task:
    http_request: dict[str, str | dict | None]
    name: str | None = ...
    schedule_time: str | None = ...
    dispatch_deadline: str | None = ...

@dataclass
class Resource:
    resource_id: str
    project_id: str | None = ...
    location_id: str | None = ...
