# Generated by ariadne-codegen
# Source: python/atoti-client/graphql/operations.gql

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_join import CreateJoin
from .create_table import CreateTable
from .delete_cube_restrictions import DeleteCubeRestrictions
from .delete_table import DeleteTable
from .find_column import FindColumn
from .find_cube import FindCube
from .find_hierarchy import FindHierarchy
from .find_hierarchy_across_dimensions import FindHierarchyAcrossDimensions
from .find_level import FindLevel
from .find_level_across_dimensions import FindLevelAcrossDimensions
from .find_level_across_hierarchies import FindLevelAcrossHierarchies
from .find_table import FindTable
from .get_aggregate_cache import GetAggregateCache
from .get_cluster_members import GetClusterMembers
from .get_column_data_type import GetColumnDataType
from .get_column_default_value import GetColumnDefaultValue
from .get_cube_fact_table import GetCubeFactTable
from .get_cube_restrictions import GetCubeRestrictions
from .get_cubes import GetCubes
from .get_database_schema import GetDatabaseSchema
from .get_dimension_default_hierarchy import GetDimensionDefaultHierarchy
from .get_hierarchies import GetHierarchies
from .get_hierarchy_are_members_indexed_by_name import (
    GetHierarchyAreMembersIndexedByName,
)
from .get_hierarchy_is_slicing import GetHierarchyIsSlicing
from .get_hierarchy_is_virtual import GetHierarchyIsVirtual
from .get_hierarchy_is_visible import GetHierarchyIsVisible
from .get_hierarchy_levels import GetHierarchyLevels
from .get_levels import GetLevels
from .get_table_columns import GetTableColumns
from .get_table_primary_index import GetTablePrimaryIndex
from .get_tables import GetTables
from .input_types import (
    CreateJoinInput,
    CreateTableInput,
    DeleteCubeRestrictionsInput,
    DeleteTableInput,
    UpdateAggregateCacheInput,
    UpdateColumnInput,
    UpdateCubeRestrictionsInput,
    UpdateHierarchyInput,
)
from .update_aggregate_cache import UpdateAggregateCache
from .update_column import UpdateColumn
from .update_cube_restrictions import UpdateCubeRestrictions
from .update_hierarchy import UpdateHierarchy


def gql(q: str) -> str:
    return q


class GraphqlClient(BaseClient):
    def create_join(self, input: CreateJoinInput, **kwargs: Any) -> CreateJoin:
        query = gql(
            """
            mutation CreateJoin($input: CreateJoinInput!) {
              createJoin(input: $input) {
                join {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="CreateJoin", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateJoin.model_validate(data)

    def create_table(self, input: CreateTableInput, **kwargs: Any) -> CreateTable:
        query = gql(
            """
            mutation CreateTable($input: CreateTableInput!) {
              createTable(input: $input) {
                table {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="CreateTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateTable.model_validate(data)

    def delete_cube_restrictions(
        self, input: DeleteCubeRestrictionsInput, **kwargs: Any
    ) -> DeleteCubeRestrictions:
        query = gql(
            """
            mutation DeleteCubeRestrictions($input: DeleteCubeRestrictionsInput!) {
              deleteCubeRestrictions(input: $input) {
                cube {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="DeleteCubeRestrictions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCubeRestrictions.model_validate(data)

    def delete_table(self, input: DeleteTableInput, **kwargs: Any) -> DeleteTable:
        query = gql(
            """
            mutation DeleteTable($input: DeleteTableInput!) {
              deleteTable(input: $input) {
                tables {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="DeleteTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteTable.model_validate(data)

    def find_column(
        self,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindColumn:
        query = gql(
            """
            query FindColumn($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  column(name: $columnName) {
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="FindColumn", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindColumn.model_validate(data)

    def find_cube(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindCube:
        query = gql(
            """
            query FindCube($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="FindCube", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindCube.model_validate(data)

    def find_hierarchy(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindHierarchy:
        query = gql(
            """
            query FindHierarchy($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query, operation_name="FindHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindHierarchy.model_validate(data)

    def find_hierarchy_across_dimensions(
        self,
        cube_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindHierarchyAcrossDimensions:
        query = gql(
            """
            query FindHierarchyAcrossDimensions($cubeName: String!, $dataModelTransactionId: ID, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchy(name: $hierarchyName) {
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindHierarchyAcrossDimensions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindHierarchyAcrossDimensions.model_validate(data)

    def find_level(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindLevel:
        query = gql(
            """
            query FindLevel($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query, operation_name="FindLevel", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindLevel.model_validate(data)

    def find_level_across_dimensions(
        self,
        cube_name: str,
        hierarchy_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindLevelAcrossDimensions:
        query = gql(
            """
            query FindLevelAcrossDimensions($cubeName: String!, $dataModelTransactionId: ID, $hierarchyName: String!, $levelName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchy(name: $hierarchyName) {
                      level(name: $levelName) {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossDimensions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindLevelAcrossDimensions.model_validate(data)

    def find_level_across_hierarchies(
        self,
        cube_name: str,
        level_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindLevelAcrossHierarchies:
        query = gql(
            """
            query FindLevelAcrossHierarchies($cubeName: String!, $dataModelTransactionId: ID, $levelName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      level(name: $levelName) {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossHierarchies",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindLevelAcrossHierarchies.model_validate(data)

    def find_table(
        self,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindTable:
        query = gql(
            """
            query FindTable($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="FindTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindTable.model_validate(data)

    def get_aggregate_cache(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetAggregateCache:
        query = gql(
            """
            query GetAggregateCache($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  aggregateCache {
                    capacity
                    measures {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetAggregateCache",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetAggregateCache.model_validate(data)

    def get_cluster_members(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetClusterMembers:
        query = gql(
            """
            query GetClusterMembers($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  cluster {
                    nodes {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetClusterMembers",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetClusterMembers.model_validate(data)

    def get_column_data_type(
        self,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetColumnDataType:
        query = gql(
            """
            query GetColumnDataType($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  column(name: $columnName) {
                    dataType
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetColumnDataType",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetColumnDataType.model_validate(data)

    def get_column_default_value(
        self,
        column_name: str,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetColumnDefaultValue:
        query = gql(
            """
            query GetColumnDefaultValue($columnName: String!, $dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  column(name: $columnName) {
                    defaultValue
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "columnName": column_name,
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetColumnDefaultValue",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetColumnDefaultValue.model_validate(data)

    def get_cube_fact_table(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetCubeFactTable:
        query = gql(
            """
            query GetCubeFactTable($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  factTable {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query,
            operation_name="GetCubeFactTable",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCubeFactTable.model_validate(data)

    def get_cube_restrictions(
        self, cube_name: str, **kwargs: Any
    ) -> GetCubeRestrictions:
        query = gql(
            """
            query GetCubeRestrictions($cubeName: String!) {
              dataModel {
                cube(name: $cubeName) {
                  restrictions {
                    condition {
                      __typename
                      ... on CubeRestrictionIsInCondition {
                        elements
                        isInOperator: operator
                        level: subject {
                          ...levelIdentifier
                        }
                      }
                      ... on CubeRestrictionRelationalCondition {
                        level: subject {
                          ...levelIdentifier
                        }
                        relationalOperator: operator
                        target
                      }
                    }
                    roleName
                  }
                }
              }
            }

            fragment hierarchyIdentifier on Hierarchy {
              dimension {
                name
              }
              name
            }

            fragment levelIdentifier on Level {
              hierarchy {
                ...hierarchyIdentifier
              }
              name
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name}
        response = self.execute(
            query=query,
            operation_name="GetCubeRestrictions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCubeRestrictions.model_validate(data)

    def get_cubes(
        self,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetCubes:
        query = gql(
            """
            query GetCubes($dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cubes {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query, operation_name="GetCubes", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetCubes.model_validate(data)

    def get_database_schema(
        self,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetDatabaseSchema:
        query = gql(
            """
            query GetDatabaseSchema($dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                tables {
                  columns {
                    dataType
                    defaultValue
                    name
                  }
                  joins {
                    isPartial
                    mappingItems {
                      source {
                        name
                      }
                      target {
                        name
                      }
                    }
                    target {
                      name
                    }
                    targetOptionality
                  }
                  name
                  primaryIndex {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query,
            operation_name="GetDatabaseSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDatabaseSchema.model_validate(data)

    def get_dimension_default_hierarchy(
        self,
        cube_name: str,
        dimension_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetDimensionDefaultHierarchy:
        query = gql(
            """
            query GetDimensionDefaultHierarchy($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    defaultHierarchy {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetDimensionDefaultHierarchy",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDimensionDefaultHierarchy.model_validate(data)

    def get_hierarchies(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchies:
        query = gql(
            """
            query GetHierarchies($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="GetHierarchies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetHierarchies.model_validate(data)

    def get_hierarchy_are_members_indexed_by_name(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchyAreMembersIndexedByName:
        query = gql(
            """
            query GetHierarchyAreMembersIndexedByName($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      areMembersIndexedByName
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyAreMembersIndexedByName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyAreMembersIndexedByName.model_validate(data)

    def get_hierarchy_is_slicing(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchyIsSlicing:
        query = gql(
            """
            query GetHierarchyIsSlicing($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isSlicing
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsSlicing",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsSlicing.model_validate(data)

    def get_hierarchy_is_virtual(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchyIsVirtual:
        query = gql(
            """
            query GetHierarchyIsVirtual($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isVirtual
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVirtual",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsVirtual.model_validate(data)

    def get_hierarchy_is_visible(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchyIsVisible:
        query = gql(
            """
            query GetHierarchyIsVisible($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      isVisible
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVisible",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsVisible.model_validate(data)

    def get_hierarchy_levels(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetHierarchyLevels:
        query = gql(
            """
            query GetHierarchyLevels($cubeName: String!, $dataModelTransactionId: ID, $dimensionName: String!, $hierarchyName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimension(name: $dimensionName) {
                    hierarchy(name: $hierarchyName) {
                      levels {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyLevels",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyLevels.model_validate(data)

    def get_levels(
        self,
        cube_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetLevels:
        query = gql(
            """
            query GetLevels($cubeName: String!, $dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                cube(name: $cubeName) {
                  dimensions {
                    hierarchies {
                      levels {
                        name
                        type
                      }
                      name
                    }
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dataModelTransactionId": data_model_transaction_id,
        }
        response = self.execute(
            query=query, operation_name="GetLevels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetLevels.model_validate(data)

    def get_table_columns(
        self,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetTableColumns:
        query = gql(
            """
            query GetTableColumns($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  columns {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query, operation_name="GetTableColumns", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTableColumns.model_validate(data)

    def get_table_primary_index(
        self,
        table_name: str,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetTablePrimaryIndex:
        query = gql(
            """
            query GetTablePrimaryIndex($dataModelTransactionId: ID, $tableName: String!) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                table(name: $tableName) {
                  primaryIndex {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id,
            "tableName": table_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetTablePrimaryIndex",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetTablePrimaryIndex.model_validate(data)

    def get_tables(
        self,
        data_model_transaction_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetTables:
        query = gql(
            """
            query GetTables($dataModelTransactionId: ID) {
              dataModel(dataModelTransactionId: $dataModelTransactionId) {
                tables {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "dataModelTransactionId": data_model_transaction_id
        }
        response = self.execute(
            query=query, operation_name="GetTables", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTables.model_validate(data)

    def update_aggregate_cache(
        self, input: UpdateAggregateCacheInput, **kwargs: Any
    ) -> UpdateAggregateCache:
        query = gql(
            """
            mutation UpdateAggregateCache($input: UpdateAggregateCacheInput!) {
              updateAggregateCache(input: $input) {
                aggregateCache {
                  capacity
                  measures {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="UpdateAggregateCache",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAggregateCache.model_validate(data)

    def update_column(self, input: UpdateColumnInput, **kwargs: Any) -> UpdateColumn:
        query = gql(
            """
            mutation UpdateColumn($input: UpdateColumnInput!) {
              updateColumn(input: $input) {
                column {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateColumn", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateColumn.model_validate(data)

    def update_cube_restrictions(
        self, input: UpdateCubeRestrictionsInput, **kwargs: Any
    ) -> UpdateCubeRestrictions:
        query = gql(
            """
            mutation UpdateCubeRestrictions($input: UpdateCubeRestrictionsInput!) {
              updateCubeRestrictions(input: $input) {
                cube {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="UpdateCubeRestrictions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCubeRestrictions.model_validate(data)

    def update_hierarchy(
        self, input: UpdateHierarchyInput, **kwargs: Any
    ) -> UpdateHierarchy:
        query = gql(
            """
            mutation UpdateHierarchy($input: UpdateHierarchyInput!) {
              updateHierarchy(input: $input) {
                hierarchy {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateHierarchy.model_validate(data)
