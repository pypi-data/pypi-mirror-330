# generated by datamodel-codegen:
#   filename:  session_result.json

from __future__ import annotations

from dataclasses import dataclass
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . import (
        collect_report,
        error_message,
        project,
        python_distribution,
        test_case_report,
        warning_message,
    )


@dataclass
class SessionResult:
    """Result of a pytest session, including collect reports and test reports."""

    session_id: str
    """
    The unique if of this test session.
    """
    start_timestamp: str
    """
    The start time of the pytest session in ISO 8601 format.
    """
    stop_timestamp: str
    """
    The stop time of the pytest session in ISO 8601 format.
    """
    python: python_distribution.PythonDistribution
    """
    The Python distribution that ran the tests.
    """
    pytest_version: str
    """
    The version of pytest that generated the report.
    """
    plugin_version: str
    """
    The version of the plugin that generated the report.
    """
    exit_status: int
    """
    The exit status of the pytest run. 0 indicates success, non-zero indicates failure.
    """
    errors: list[error_message.ErrorMessage]
    """
    Errors generated during the session.
    """
    warnings: list[warning_message.WarningMessage]
    """
    Warnings generated during the session.
    """
    collect_reports: list[collect_report.CollectReport]
    """
    Collect reports generated during the session.
    """
    test_reports: list[test_case_report.TestCaseReport]
    """
    Test reports generated during the session.
    """
    project: project.Project | None = None
    """
    The project that is being tested.
    """
