# Generated by cloudcoil-model-codegen v0.5.6
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource


class CommonMetadata(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["CommonMetadata"]:
            return CommonMetadata

        def build(self) -> "CommonMetadata":
            return CommonMetadata(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations to be added to the object's metadata.
            """
            return self._set("annotations", value)

        def labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Labels to be added to the object's metadata.
            """
            return self._set("labels", value)

    class BuilderContext(BuilderContextBase["CommonMetadata.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = CommonMetadata.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for CommonMetadata."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["CommonMetadata", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CommonMetadata.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations to be added to the object's metadata.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels to be added to the object's metadata.
    """


class SecretRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SecretRef"]:
            return SecretRef

        def build(self) -> "SecretRef":
            return SecretRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["SecretRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SecretRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SecretRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SecretRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SecretRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referent.
    """


class Decryption(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Decryption"]:
            return Decryption

        def build(self) -> "Decryption":
            return Decryption(**self._attrs)

        def provider(self, value: Literal["sops"], /) -> Self:
            """
            Provider is the name of the decryption engine.
            """
            return self._set("provider", value)

        @overload
        def secret_ref(self, value_or_callback: Optional[SecretRef], /) -> "Decryption.Builder": ...

        @overload
        def secret_ref(
            self,
            value_or_callback: Callable[[SecretRef.Builder], SecretRef.Builder | SecretRef],
            /,
        ) -> "Decryption.Builder": ...

        @overload
        def secret_ref(self, value_or_callback: Never = ...) -> "SecretRef.BuilderContext": ...

        def secret_ref(self, value_or_callback=None, /):
            """
            The secret name containing the private OpenPGP keys used for decryption.
            """
            if self._in_context and value_or_callback is None:
                context = SecretRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SecretRef.builder())
                if isinstance(output, SecretRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret_ref", value)

    class BuilderContext(BuilderContextBase["Decryption.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Decryption.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Decryption."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Decryption", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Decryption.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    provider: Literal["sops"]
    """
    Provider is the name of the decryption engine.
    """
    secret_ref: Annotated[Optional[SecretRef], Field(alias="secretRef")] = None
    """
    The secret name containing the private OpenPGP keys used for decryption.
    """


class DependsOn(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DependsOn"]:
            return DependsOn

        def build(self) -> "DependsOn":
            return DependsOn(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, when not specified it acts as LocalObjectReference.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["DependsOn.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DependsOn.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DependsOn."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DependsOn", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DependsOn.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referent.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, when not specified it acts as LocalObjectReference.
    """


class HealthCheckExpr(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["HealthCheckExpr"]:
            return HealthCheckExpr

        def build(self) -> "HealthCheckExpr":
            return HealthCheckExpr(**self._attrs)

        def api_version(self, value: str, /) -> Self:
            """
            APIVersion of the custom resource under evaluation.
            """
            return self._set("api_version", value)

        def current(self, value: str, /) -> Self:
            """
            Current is the CEL expression that determines if the status
            of the custom resource has reached the desired state.
            """
            return self._set("current", value)

        def failed(self, value: Optional[str], /) -> Self:
            """
            Failed is the CEL expression that determines if the status
            of the custom resource has failed to reach the desired state.
            """
            return self._set("failed", value)

        def in_progress(self, value: Optional[str], /) -> Self:
            """
            InProgress is the CEL expression that determines if the status
            of the custom resource has not yet reached the desired state.
            """
            return self._set("in_progress", value)

        def kind(self, value: str, /) -> Self:
            """
            Kind of the custom resource under evaluation.
            """
            return self._set("kind", value)

    class BuilderContext(BuilderContextBase["HealthCheckExpr.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = HealthCheckExpr.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for HealthCheckExpr."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["HealthCheckExpr", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use HealthCheckExpr.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[str, Field(alias="apiVersion")]
    """
    APIVersion of the custom resource under evaluation.
    """
    current: str
    """
    Current is the CEL expression that determines if the status
    of the custom resource has reached the desired state.
    """
    failed: Optional[str] = None
    """
    Failed is the CEL expression that determines if the status
    of the custom resource has failed to reach the desired state.
    """
    in_progress: Annotated[Optional[str], Field(alias="inProgress")] = None
    """
    InProgress is the CEL expression that determines if the status
    of the custom resource has not yet reached the desired state.
    """
    kind: str
    """
    Kind of the custom resource under evaluation.
    """


class HealthCheck(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["HealthCheck"]:
            return HealthCheck

        def build(self) -> "HealthCheck":
            return HealthCheck(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            API version of the referent, if not specified the Kubernetes preferred version will be used.
            """
            return self._set("api_version", value)

        def kind(self, value: str, /) -> Self:
            """
            Kind of the referent.
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, when not specified it acts as LocalObjectReference.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["HealthCheck.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = HealthCheck.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for HealthCheck."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["HealthCheck", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use HealthCheck.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    API version of the referent, if not specified the Kubernetes preferred version will be used.
    """
    kind: str
    """
    Kind of the referent.
    """
    name: str
    """
    Name of the referent.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, when not specified it acts as LocalObjectReference.
    """


class Image(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Image"]:
            return Image

        def build(self) -> "Image":
            return Image(**self._attrs)

        def digest(self, value: Optional[str], /) -> Self:
            """
            Digest is the value used to replace the original image tag.
            If digest is present NewTag value is ignored.
            """
            return self._set("digest", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a tag-less image name.
            """
            return self._set("name", value)

        def new_name(self, value: Optional[str], /) -> Self:
            """
            NewName is the value used to replace the original name.
            """
            return self._set("new_name", value)

        def new_tag(self, value: Optional[str], /) -> Self:
            """
            NewTag is the value used to replace the original tag.
            """
            return self._set("new_tag", value)

    class BuilderContext(BuilderContextBase["Image.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Image.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Image."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Image", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Image.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    digest: Optional[str] = None
    """
    Digest is the value used to replace the original image tag.
    If digest is present NewTag value is ignored.
    """
    name: str
    """
    Name is a tag-less image name.
    """
    new_name: Annotated[Optional[str], Field(alias="newName")] = None
    """
    NewName is the value used to replace the original name.
    """
    new_tag: Annotated[Optional[str], Field(alias="newTag")] = None
    """
    NewTag is the value used to replace the original tag.
    """


class SecretRefModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SecretRefModel"]:
            return SecretRefModel

        def build(self) -> "SecretRefModel":
            return SecretRefModel(**self._attrs)

        def key(self, value: Optional[str], /) -> Self:
            """
            Key in the Secret, when not specified an implementation-specific default key is used.
            """
            return self._set("key", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the Secret.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["SecretRefModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SecretRefModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SecretRefModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SecretRefModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SecretRefModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: Optional[str] = None
    """
    Key in the Secret, when not specified an implementation-specific default key is used.
    """
    name: str
    """
    Name of the Secret.
    """


class KubeConfig(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KubeConfig"]:
            return KubeConfig

        def build(self) -> "KubeConfig":
            return KubeConfig(**self._attrs)

        @overload
        def secret_ref(self, value_or_callback: SecretRefModel, /) -> "KubeConfig.Builder": ...

        @overload
        def secret_ref(
            self,
            value_or_callback: Callable[
                [SecretRefModel.Builder], SecretRefModel.Builder | SecretRefModel
            ],
            /,
        ) -> "KubeConfig.Builder": ...

        @overload
        def secret_ref(self, value_or_callback: Never = ...) -> "SecretRefModel.BuilderContext": ...

        def secret_ref(self, value_or_callback=None, /):
            """
            SecretRef holds the name of a secret that contains a key with
            the kubeconfig file as the value. If no key is set, the key will default
            to 'value'.
            It is recommended that the kubeconfig is self-contained, and the secret
            is regularly updated if credentials such as a cloud-access-token expire.
            Cloud specific `cmd-path` auth helpers will not function without adding
            binaries and credentials to the Pod that is responsible for reconciling
            Kubernetes resources.
            """
            if self._in_context and value_or_callback is None:
                context = SecretRefModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SecretRefModel.builder())
                if isinstance(output, SecretRefModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret_ref", value)

    class BuilderContext(BuilderContextBase["KubeConfig.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KubeConfig.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KubeConfig."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KubeConfig", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KubeConfig.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    secret_ref: Annotated[SecretRefModel, Field(alias="secretRef")]
    """
    SecretRef holds the name of a secret that contains a key with
    the kubeconfig file as the value. If no key is set, the key will default
    to 'value'.
    It is recommended that the kubeconfig is self-contained, and the secret
    is regularly updated if credentials such as a cloud-access-token expire.
    Cloud specific `cmd-path` auth helpers will not function without adding
    binaries and credentials to the Pod that is responsible for reconciling
    Kubernetes resources.
    """


class Target(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Target"]:
            return Target

        def build(self) -> "Target":
            return Target(**self._attrs)

        def annotation_selector(self, value: Optional[str], /) -> Self:
            """
            AnnotationSelector is a string that follows the label selection expression
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
            It matches with the resource annotations.
            """
            return self._set("annotation_selector", value)

        def group(self, value: Optional[str], /) -> Self:
            """
            Group is the API group to select resources from.
            Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("group", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind of the API Group to select resources from.
            Together with Group and Version it is capable of unambiguously
            identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("kind", value)

        def label_selector(self, value: Optional[str], /) -> Self:
            """
            LabelSelector is a string that follows the label selection expression
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
            It matches with the resource labels.
            """
            return self._set("label_selector", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name to match resources with.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace to select resources from.
            """
            return self._set("namespace", value)

        def version(self, value: Optional[str], /) -> Self:
            """
            Version of the API Group to select resources from.
            Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["Target.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Target.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Target."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Target", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Target.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotation_selector: Annotated[Optional[str], Field(alias="annotationSelector")] = None
    """
    AnnotationSelector is a string that follows the label selection expression
    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
    It matches with the resource annotations.
    """
    group: Optional[str] = None
    """
    Group is the API group to select resources from.
    Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """
    kind: Optional[str] = None
    """
    Kind of the API Group to select resources from.
    Together with Group and Version it is capable of unambiguously
    identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """
    label_selector: Annotated[Optional[str], Field(alias="labelSelector")] = None
    """
    LabelSelector is a string that follows the label selection expression
    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
    It matches with the resource labels.
    """
    name: Optional[str] = None
    """
    Name to match resources with.
    """
    namespace: Optional[str] = None
    """
    Namespace to select resources from.
    """
    version: Optional[str] = None
    """
    Version of the API Group to select resources from.
    Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """


class Patch(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Patch"]:
            return Patch

        def build(self) -> "Patch":
            return Patch(**self._attrs)

        def patch(self, value: str, /) -> Self:
            """
            Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
            an array of operation objects.
            """
            return self._set("patch", value)

        @overload
        def target(self, value_or_callback: Optional[Target], /) -> "Patch.Builder": ...

        @overload
        def target(
            self,
            value_or_callback: Callable[[Target.Builder], Target.Builder | Target],
            /,
        ) -> "Patch.Builder": ...

        @overload
        def target(self, value_or_callback: Never = ...) -> "Target.BuilderContext": ...

        def target(self, value_or_callback=None, /):
            """
            Target points to the resources that the patch document should be applied to.
            """
            if self._in_context and value_or_callback is None:
                context = Target.BuilderContext()
                context._parent_builder = self
                context._field_name = "target"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Target.builder())
                if isinstance(output, Target.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("target", value)

    class BuilderContext(BuilderContextBase["Patch.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Patch.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Patch."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Patch", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Patch.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    patch: str
    """
    Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
    an array of operation objects.
    """
    target: Optional[Target] = None
    """
    Target points to the resources that the patch document should be applied to.
    """


class SubstituteFrom(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SubstituteFrom"]:
            return SubstituteFrom

        def build(self) -> "SubstituteFrom":
            return SubstituteFrom(**self._attrs)

        def kind(self, value: Literal["Secret", "ConfigMap"], /) -> Self:
            """
            Kind of the values referent, valid values are ('Secret', 'ConfigMap').
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the values referent. Should reside in the same namespace as the
            referring resource.
            """
            return self._set("name", value)

        def optional(self, value: Optional[bool], /) -> Self:
            """
            Optional indicates whether the referenced resource must exist, or whether to
            tolerate its absence. If true and the referenced resource is absent, proceed
            as if the resource was present but empty, without any variables defined.
            """
            return self._set("optional", value)

    class BuilderContext(BuilderContextBase["SubstituteFrom.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SubstituteFrom.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SubstituteFrom."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SubstituteFrom", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SubstituteFrom.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    kind: Literal["Secret", "ConfigMap"]
    """
    Kind of the values referent, valid values are ('Secret', 'ConfigMap').
    """
    name: Annotated[str, Field(max_length=253, min_length=1)]
    """
    Name of the values referent. Should reside in the same namespace as the
    referring resource.
    """
    optional: Optional[bool] = False
    """
    Optional indicates whether the referenced resource must exist, or whether to
    tolerate its absence. If true and the referenced resource is absent, proceed
    as if the resource was present but empty, without any variables defined.
    """


class PostBuild(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PostBuild"]:
            return PostBuild

        def build(self) -> "PostBuild":
            return PostBuild(**self._attrs)

        def substitute(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Substitute holds a map of key/value pairs.
            The variables defined in your YAML manifests that match any of the keys
            defined in the map will be substituted with the set value.
            Includes support for bash string replacement functions
            e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.
            """
            return self._set("substitute", value)

        @overload
        def substitute_from(
            self, value_or_callback: List[SubstituteFrom], /
        ) -> "PostBuild.Builder": ...

        @overload
        def substitute_from(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[SubstituteFrom, SubstituteFrom.Builder]],
                GenericListBuilder[SubstituteFrom, SubstituteFrom.Builder] | List[SubstituteFrom],
            ],
            /,
        ) -> "PostBuild.Builder": ...

        @overload
        def substitute_from(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[SubstituteFrom.Builder]: ...

        def substitute_from(self, value_or_callback=None, /):
            """
            SubstituteFrom holds references to ConfigMaps and Secrets containing
            the variables and their values to be substituted in the YAML manifests.
            The ConfigMap and the Secret data keys represent the var names, and they
            must match the vars declared in the manifests for the substitution to
            happen.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[SubstituteFrom.Builder]()
                context._parent_builder = self
                context._field_name = "substitute_from"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SubstituteFrom.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("substitute_from", value)

    class BuilderContext(BuilderContextBase["PostBuild.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PostBuild.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PostBuild."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PostBuild", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PostBuild.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    substitute: Optional[Dict[str, str]] = None
    """
    Substitute holds a map of key/value pairs.
    The variables defined in your YAML manifests that match any of the keys
    defined in the map will be substituted with the set value.
    Includes support for bash string replacement functions
    e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.
    """
    substitute_from: Annotated[Optional[List[SubstituteFrom]], Field(alias="substituteFrom")] = None
    """
    SubstituteFrom holds references to ConfigMaps and Secrets containing
    the variables and their values to be substituted in the YAML manifests.
    The ConfigMap and the Secret data keys represent the var names, and they
    must match the vars declared in the manifests for the substitution to
    happen.
    """


class SourceRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SourceRef"]:
            return SourceRef

        def build(self) -> "SourceRef":
            return SourceRef(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            API version of the referent.
            """
            return self._set("api_version", value)

        def kind(self, value: Literal["OCIRepository", "GitRepository", "Bucket"], /) -> Self:
            """
            Kind of the referent.
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, defaults to the namespace of the Kubernetes
            resource object that contains the reference.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["SourceRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SourceRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SourceRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SourceRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SourceRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    API version of the referent.
    """
    kind: Literal["OCIRepository", "GitRepository", "Bucket"]
    """
    Kind of the referent.
    """
    name: str
    """
    Name of the referent.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, defaults to the namespace of the Kubernetes
    resource object that contains the reference.
    """


class KustomizationSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KustomizationSpec"]:
            return KustomizationSpec

        def build(self) -> "KustomizationSpec":
            return KustomizationSpec(**self._attrs)

        @overload
        def common_metadata(
            self, value_or_callback: Optional[CommonMetadata], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def common_metadata(
            self,
            value_or_callback: Callable[
                [CommonMetadata.Builder], CommonMetadata.Builder | CommonMetadata
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def common_metadata(
            self, value_or_callback: Never = ...
        ) -> "CommonMetadata.BuilderContext": ...

        def common_metadata(self, value_or_callback=None, /):
            """
            CommonMetadata specifies the common labels and annotations that are
            applied to all resources. Any existing label or annotation will be
            overridden if its key matches a common one.
            """
            if self._in_context and value_or_callback is None:
                context = CommonMetadata.BuilderContext()
                context._parent_builder = self
                context._field_name = "common_metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(CommonMetadata.builder())
                if isinstance(output, CommonMetadata.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("common_metadata", value)

        def components(self, value: Optional[List[str]], /) -> Self:
            """
            Components specifies relative paths to specifications of other Components.
            """
            return self._set("components", value)

        @overload
        def decryption(
            self, value_or_callback: Optional[Decryption], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def decryption(
            self,
            value_or_callback: Callable[[Decryption.Builder], Decryption.Builder | Decryption],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def decryption(self, value_or_callback: Never = ...) -> "Decryption.BuilderContext": ...

        def decryption(self, value_or_callback=None, /):
            """
            Decrypt Kubernetes secrets before applying them on the cluster.
            """
            if self._in_context and value_or_callback is None:
                context = Decryption.BuilderContext()
                context._parent_builder = self
                context._field_name = "decryption"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Decryption.builder())
                if isinstance(output, Decryption.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("decryption", value)

        def deletion_policy(
            self, value: Optional[Literal["MirrorPrune", "Delete", "Orphan"]], /
        ) -> Self:
            """
            DeletionPolicy can be used to control garbage collection when this
            Kustomization is deleted. Valid values are ('MirrorPrune', 'Delete',
            'Orphan'). 'MirrorPrune' mirrors the Prune field (orphan if false,
            delete if true). Defaults to 'MirrorPrune'.
            """
            return self._set("deletion_policy", value)

        @overload
        def depends_on(
            self, value_or_callback: List[DependsOn], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def depends_on(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[DependsOn, DependsOn.Builder]],
                GenericListBuilder[DependsOn, DependsOn.Builder] | List[DependsOn],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def depends_on(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[DependsOn.Builder]: ...

        def depends_on(self, value_or_callback=None, /):
            """
            DependsOn may contain a meta.NamespacedObjectReference slice
            with references to Kustomization resources that must be ready before this
            Kustomization can be reconciled.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[DependsOn.Builder]()
                context._parent_builder = self
                context._field_name = "depends_on"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DependsOn.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("depends_on", value)

        def force(self, value: Optional[bool], /) -> Self:
            """
            Force instructs the controller to recreate resources
            when patching fails due to an immutable field change.
            """
            return self._set("force", value)

        @overload
        def health_check_exprs(
            self, value_or_callback: List[HealthCheckExpr], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_check_exprs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[HealthCheckExpr, HealthCheckExpr.Builder]],
                GenericListBuilder[HealthCheckExpr, HealthCheckExpr.Builder]
                | List[HealthCheckExpr],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_check_exprs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[HealthCheckExpr.Builder]: ...

        def health_check_exprs(self, value_or_callback=None, /):
            """
            HealthCheckExprs is a list of healthcheck expressions for evaluating the
            health of custom resources using Common Expression Language (CEL).
            The expressions are evaluated only when Wait or HealthChecks are specified.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[HealthCheckExpr.Builder]()
                context._parent_builder = self
                context._field_name = "health_check_exprs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(HealthCheckExpr.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("health_check_exprs", value)

        @overload
        def health_checks(
            self, value_or_callback: List[HealthCheck], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_checks(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[HealthCheck, HealthCheck.Builder]],
                GenericListBuilder[HealthCheck, HealthCheck.Builder] | List[HealthCheck],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_checks(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[HealthCheck.Builder]: ...

        def health_checks(self, value_or_callback=None, /):
            """
            A list of resources to be included in the health assessment.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[HealthCheck.Builder]()
                context._parent_builder = self
                context._field_name = "health_checks"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(HealthCheck.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("health_checks", value)

        @overload
        def images(self, value_or_callback: List[Image], /) -> "KustomizationSpec.Builder": ...

        @overload
        def images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Image, Image.Builder]],
                GenericListBuilder[Image, Image.Builder] | List[Image],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def images(self, value_or_callback: Never = ...) -> ListBuilderContext[Image.Builder]: ...

        def images(self, value_or_callback=None, /):
            """
            Images is a list of (image name, new name, new tag or digest)
            for changing image names, tags or digests. This can also be achieved with a
            patch, but this operator is simpler to specify.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Image.Builder]()
                context._parent_builder = self
                context._field_name = "images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Image.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("images", value)

        def interval(self, value: str, /) -> Self:
            """
            The interval at which to reconcile the Kustomization.
            This interval is approximate and may be subject to jitter to ensure
            efficient use of resources.
            """
            return self._set("interval", value)

        @overload
        def kube_config(
            self, value_or_callback: Optional[KubeConfig], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def kube_config(
            self,
            value_or_callback: Callable[[KubeConfig.Builder], KubeConfig.Builder | KubeConfig],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def kube_config(self, value_or_callback: Never = ...) -> "KubeConfig.BuilderContext": ...

        def kube_config(self, value_or_callback=None, /):
            """
            The KubeConfig for reconciling the Kustomization on a remote cluster.
            When used in combination with KustomizationSpec.ServiceAccountName,
            forces the controller to act on behalf of that Service Account at the
            target cluster.
            If the --default-service-account flag is set, its value will be used as
            a controller level fallback for when KustomizationSpec.ServiceAccountName
            is empty.
            """
            if self._in_context and value_or_callback is None:
                context = KubeConfig.BuilderContext()
                context._parent_builder = self
                context._field_name = "kube_config"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KubeConfig.builder())
                if isinstance(output, KubeConfig.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("kube_config", value)

        def name_prefix(self, value: Optional[str], /) -> Self:
            """
            NamePrefix will prefix the names of all managed resources.
            """
            return self._set("name_prefix", value)

        def name_suffix(self, value: Optional[str], /) -> Self:
            """
            NameSuffix will suffix the names of all managed resources.
            """
            return self._set("name_suffix", value)

        @overload
        def patches(self, value_or_callback: List[Patch], /) -> "KustomizationSpec.Builder": ...

        @overload
        def patches(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Patch, Patch.Builder]],
                GenericListBuilder[Patch, Patch.Builder] | List[Patch],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def patches(self, value_or_callback: Never = ...) -> ListBuilderContext[Patch.Builder]: ...

        def patches(self, value_or_callback=None, /):
            """
            Strategic merge and JSON patches, defined as inline YAML objects,
            capable of targeting objects based on kind, label and annotation selectors.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Patch.Builder]()
                context._parent_builder = self
                context._field_name = "patches"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Patch.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("patches", value)

        def path(self, value: Optional[str], /) -> Self:
            """
            Path to the directory containing the kustomization.yaml file, or the
            set of plain YAMLs a kustomization.yaml should be generated for.
            Defaults to 'None', which translates to the root path of the SourceRef.
            """
            return self._set("path", value)

        @overload
        def post_build(
            self, value_or_callback: Optional[PostBuild], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def post_build(
            self,
            value_or_callback: Callable[[PostBuild.Builder], PostBuild.Builder | PostBuild],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def post_build(self, value_or_callback: Never = ...) -> "PostBuild.BuilderContext": ...

        def post_build(self, value_or_callback=None, /):
            """
            PostBuild describes which actions to perform on the YAML manifest
            generated by building the kustomize overlay.
            """
            if self._in_context and value_or_callback is None:
                context = PostBuild.BuilderContext()
                context._parent_builder = self
                context._field_name = "post_build"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PostBuild.builder())
                if isinstance(output, PostBuild.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("post_build", value)

        def prune(self, value: bool, /) -> Self:
            """
            Prune enables garbage collection.
            """
            return self._set("prune", value)

        def retry_interval(self, value: Optional[str], /) -> Self:
            """
            The interval at which to retry a previously failed reconciliation.
            When not specified, the controller uses the KustomizationSpec.Interval
            value to retry failures.
            """
            return self._set("retry_interval", value)

        def service_account_name(self, value: Optional[str], /) -> Self:
            """
            The name of the Kubernetes service account to impersonate
            when reconciling this Kustomization.
            """
            return self._set("service_account_name", value)

        @overload
        def source_ref(self, value_or_callback: SourceRef, /) -> "KustomizationSpec.Builder": ...

        @overload
        def source_ref(
            self,
            value_or_callback: Callable[[SourceRef.Builder], SourceRef.Builder | SourceRef],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def source_ref(self, value_or_callback: Never = ...) -> "SourceRef.BuilderContext": ...

        def source_ref(self, value_or_callback=None, /):
            """
            Reference of the source where the kustomization file is.
            """
            if self._in_context and value_or_callback is None:
                context = SourceRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "source_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SourceRef.builder())
                if isinstance(output, SourceRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("source_ref", value)

        def suspend(self, value: Optional[bool], /) -> Self:
            """
            This flag tells the controller to suspend subsequent kustomize executions,
            it does not apply to already started executions. Defaults to false.
            """
            return self._set("suspend", value)

        def target_namespace(self, value: Optional[str], /) -> Self:
            """
            TargetNamespace sets or overrides the namespace in the
            kustomization.yaml file.
            """
            return self._set("target_namespace", value)

        def timeout(self, value: Optional[str], /) -> Self:
            """
            Timeout for validation, apply and health checking operations.
            Defaults to 'Interval' duration.
            """
            return self._set("timeout", value)

        def wait(self, value: Optional[bool], /) -> Self:
            """
            Wait instructs the controller to check the health of all the reconciled
            resources. When enabled, the HealthChecks are ignored. Defaults to false.
            """
            return self._set("wait", value)

    class BuilderContext(BuilderContextBase["KustomizationSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KustomizationSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KustomizationSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KustomizationSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KustomizationSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    common_metadata: Annotated[Optional[CommonMetadata], Field(alias="commonMetadata")] = None
    """
    CommonMetadata specifies the common labels and annotations that are
    applied to all resources. Any existing label or annotation will be
    overridden if its key matches a common one.
    """
    components: Optional[List[str]] = None
    """
    Components specifies relative paths to specifications of other Components.
    """
    decryption: Optional[Decryption] = None
    """
    Decrypt Kubernetes secrets before applying them on the cluster.
    """
    deletion_policy: Annotated[
        Optional[Literal["MirrorPrune", "Delete", "Orphan"]],
        Field(alias="deletionPolicy"),
    ] = None
    """
    DeletionPolicy can be used to control garbage collection when this
    Kustomization is deleted. Valid values are ('MirrorPrune', 'Delete',
    'Orphan'). 'MirrorPrune' mirrors the Prune field (orphan if false,
    delete if true). Defaults to 'MirrorPrune'.
    """
    depends_on: Annotated[Optional[List[DependsOn]], Field(alias="dependsOn")] = None
    """
    DependsOn may contain a meta.NamespacedObjectReference slice
    with references to Kustomization resources that must be ready before this
    Kustomization can be reconciled.
    """
    force: Optional[bool] = False
    """
    Force instructs the controller to recreate resources
    when patching fails due to an immutable field change.
    """
    health_check_exprs: Annotated[
        Optional[List[HealthCheckExpr]], Field(alias="healthCheckExprs")
    ] = None
    """
    HealthCheckExprs is a list of healthcheck expressions for evaluating the
    health of custom resources using Common Expression Language (CEL).
    The expressions are evaluated only when Wait or HealthChecks are specified.
    """
    health_checks: Annotated[Optional[List[HealthCheck]], Field(alias="healthChecks")] = None
    """
    A list of resources to be included in the health assessment.
    """
    images: Optional[List[Image]] = None
    """
    Images is a list of (image name, new name, new tag or digest)
    for changing image names, tags or digests. This can also be achieved with a
    patch, but this operator is simpler to specify.
    """
    interval: Annotated[str, Field(pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$")]
    """
    The interval at which to reconcile the Kustomization.
    This interval is approximate and may be subject to jitter to ensure
    efficient use of resources.
    """
    kube_config: Annotated[Optional[KubeConfig], Field(alias="kubeConfig")] = None
    """
    The KubeConfig for reconciling the Kustomization on a remote cluster.
    When used in combination with KustomizationSpec.ServiceAccountName,
    forces the controller to act on behalf of that Service Account at the
    target cluster.
    If the --default-service-account flag is set, its value will be used as
    a controller level fallback for when KustomizationSpec.ServiceAccountName
    is empty.
    """
    name_prefix: Annotated[
        Optional[str], Field(alias="namePrefix", max_length=200, min_length=1)
    ] = None
    """
    NamePrefix will prefix the names of all managed resources.
    """
    name_suffix: Annotated[
        Optional[str], Field(alias="nameSuffix", max_length=200, min_length=1)
    ] = None
    """
    NameSuffix will suffix the names of all managed resources.
    """
    patches: Optional[List[Patch]] = None
    """
    Strategic merge and JSON patches, defined as inline YAML objects,
    capable of targeting objects based on kind, label and annotation selectors.
    """
    path: Optional[str] = None
    """
    Path to the directory containing the kustomization.yaml file, or the
    set of plain YAMLs a kustomization.yaml should be generated for.
    Defaults to 'None', which translates to the root path of the SourceRef.
    """
    post_build: Annotated[Optional[PostBuild], Field(alias="postBuild")] = None
    """
    PostBuild describes which actions to perform on the YAML manifest
    generated by building the kustomize overlay.
    """
    prune: bool
    """
    Prune enables garbage collection.
    """
    retry_interval: Annotated[
        Optional[str],
        Field(alias="retryInterval", pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"),
    ] = None
    """
    The interval at which to retry a previously failed reconciliation.
    When not specified, the controller uses the KustomizationSpec.Interval
    value to retry failures.
    """
    service_account_name: Annotated[Optional[str], Field(alias="serviceAccountName")] = None
    """
    The name of the Kubernetes service account to impersonate
    when reconciling this Kustomization.
    """
    source_ref: Annotated[SourceRef, Field(alias="sourceRef")]
    """
    Reference of the source where the kustomization file is.
    """
    suspend: Optional[bool] = None
    """
    This flag tells the controller to suspend subsequent kustomize executions,
    it does not apply to already started executions. Defaults to false.
    """
    target_namespace: Annotated[
        Optional[str], Field(alias="targetNamespace", max_length=63, min_length=1)
    ] = None
    """
    TargetNamespace sets or overrides the namespace in the
    kustomization.yaml file.
    """
    timeout: Annotated[Optional[str], Field(pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$")] = None
    """
    Timeout for validation, apply and health checking operations.
    Defaults to 'Interval' duration.
    """
    wait: Optional[bool] = None
    """
    Wait instructs the controller to check the health of all the reconciled
    resources. When enabled, the HealthChecks are ignored. Defaults to false.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: Literal["True", "False", "Unknown"], /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another.
    This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: Annotated[str, Field(max_length=32768)]
    """
    message is a human readable message indicating details about the transition.
    This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration", ge=0)] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition.
    Producers of specific condition types may define expected values and meanings for this field,
    and whether the values are considered a guaranteed API.
    The value should be a CamelCase string.
    This field may not be empty.
    """
    status: Literal["True", "False", "Unknown"]
    """
    status of the condition, one of True, False, Unknown.
    """
    type: Annotated[
        str,
        Field(
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class Entry(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Entry"]:
            return Entry

        def build(self) -> "Entry":
            return Entry(**self._attrs)

        def id(self, value: str, /) -> Self:
            """
            ID is the string representation of the Kubernetes resource object's metadata,
            in the format '<namespace>_<name>_<group>_<kind>'.
            """
            return self._set("id", value)

        def v(self, value: str, /) -> Self:
            """
            Version is the API version of the Kubernetes resource object's kind.
            """
            return self._set("v", value)

    class BuilderContext(BuilderContextBase["Entry.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Entry.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Entry."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Entry", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Entry.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    id: str
    """
    ID is the string representation of the Kubernetes resource object's metadata,
    in the format '<namespace>_<name>_<group>_<kind>'.
    """
    v: str
    """
    Version is the API version of the Kubernetes resource object's kind.
    """


class Inventory(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Inventory"]:
            return Inventory

        def build(self) -> "Inventory":
            return Inventory(**self._attrs)

        @overload
        def entries(self, value_or_callback: List[Entry], /) -> "Inventory.Builder": ...

        @overload
        def entries(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Entry, Entry.Builder]],
                GenericListBuilder[Entry, Entry.Builder] | List[Entry],
            ],
            /,
        ) -> "Inventory.Builder": ...

        @overload
        def entries(self, value_or_callback: Never = ...) -> ListBuilderContext[Entry.Builder]: ...

        def entries(self, value_or_callback=None, /):
            """
            Entries of Kubernetes resource object references.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Entry.Builder]()
                context._parent_builder = self
                context._field_name = "entries"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Entry.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("entries", value)

    class BuilderContext(BuilderContextBase["Inventory.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Inventory.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Inventory."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Inventory", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Inventory.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    entries: List[Entry]
    """
    Entries of Kubernetes resource object references.
    """


class KustomizationStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KustomizationStatus"]:
            return KustomizationStatus

        def build(self) -> "KustomizationStatus":
            return KustomizationStatus(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        @overload
        def inventory(
            self, value_or_callback: Optional[Inventory], /
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def inventory(
            self,
            value_or_callback: Callable[[Inventory.Builder], Inventory.Builder | Inventory],
            /,
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def inventory(self, value_or_callback: Never = ...) -> "Inventory.BuilderContext": ...

        def inventory(self, value_or_callback=None, /):
            """
            Inventory contains the list of Kubernetes resource object references that
            have been successfully applied.
            """
            if self._in_context and value_or_callback is None:
                context = Inventory.BuilderContext()
                context._parent_builder = self
                context._field_name = "inventory"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Inventory.builder())
                if isinstance(output, Inventory.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("inventory", value)

        def last_applied_origin_revision(self, value: Optional[str], /) -> Self:
            """
            The last successfully applied origin revision.
            Equals the origin revision of the applied Artifact from the referenced Source.
            Usually present on the Metadata of the applied Artifact and depends on the
            Source type, e.g. for OCI it's the value associated with the key
            "org.opencontainers.image.revision".
            """
            return self._set("last_applied_origin_revision", value)

        def last_applied_revision(self, value: Optional[str], /) -> Self:
            """
            The last successfully applied revision.
            Equals the Revision of the applied Artifact from the referenced Source.
            """
            return self._set("last_applied_revision", value)

        def last_attempted_revision(self, value: Optional[str], /) -> Self:
            """
            LastAttemptedRevision is the revision of the last reconciliation attempt.
            """
            return self._set("last_attempted_revision", value)

        def last_handled_reconcile_at(self, value: Optional[str], /) -> Self:
            """
            LastHandledReconcileAt holds the value of the most recent
            reconcile request value, so a change of the annotation value
            can be detected.
            """
            return self._set("last_handled_reconcile_at", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration is the last reconciled generation.
            """
            return self._set("observed_generation", value)

    class BuilderContext(BuilderContextBase["KustomizationStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KustomizationStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KustomizationStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KustomizationStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KustomizationStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[List[Condition]] = None
    inventory: Optional[Inventory] = None
    """
    Inventory contains the list of Kubernetes resource object references that
    have been successfully applied.
    """
    last_applied_origin_revision: Annotated[
        Optional[str], Field(alias="lastAppliedOriginRevision")
    ] = None
    """
    The last successfully applied origin revision.
    Equals the origin revision of the applied Artifact from the referenced Source.
    Usually present on the Metadata of the applied Artifact and depends on the
    Source type, e.g. for OCI it's the value associated with the key
    "org.opencontainers.image.revision".
    """
    last_applied_revision: Annotated[Optional[str], Field(alias="lastAppliedRevision")] = None
    """
    The last successfully applied revision.
    Equals the Revision of the applied Artifact from the referenced Source.
    """
    last_attempted_revision: Annotated[Optional[str], Field(alias="lastAttemptedRevision")] = None
    """
    LastAttemptedRevision is the revision of the last reconciliation attempt.
    """
    last_handled_reconcile_at: Annotated[Optional[str], Field(alias="lastHandledReconcileAt")] = (
        None
    )
    """
    LastHandledReconcileAt holds the value of the most recent
    reconcile request value, so a change of the annotation value
    can be detected.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration is the last reconciled generation.
    """


class Kustomization(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Kustomization"]:
            return Kustomization

        def build(self) -> "Kustomization":
            return Kustomization(**self._attrs)

        def api_version(
            self, value: Optional[Literal["kustomize.toolkit.fluxcd.io/v1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Kustomization"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "Kustomization.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(
            self, value_or_callback: Optional[KustomizationSpec], /
        ) -> "Kustomization.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [KustomizationSpec.Builder],
                KustomizationSpec.Builder | KustomizationSpec,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "KustomizationSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = KustomizationSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KustomizationSpec.builder())
                if isinstance(output, KustomizationSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[KustomizationStatus], /
        ) -> "Kustomization.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [KustomizationStatus.Builder],
                KustomizationStatus.Builder | KustomizationStatus,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "KustomizationStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = KustomizationStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KustomizationStatus.builder())
                if isinstance(output, KustomizationStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["Kustomization.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Kustomization.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Kustomization."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Kustomization", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Kustomization.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["kustomize.toolkit.fluxcd.io/v1"]], Field(alias="apiVersion")
    ] = "kustomize.toolkit.fluxcd.io/v1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["Kustomization"]] = "Kustomization"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[KustomizationSpec] = None
    status: Optional[KustomizationStatus] = None
