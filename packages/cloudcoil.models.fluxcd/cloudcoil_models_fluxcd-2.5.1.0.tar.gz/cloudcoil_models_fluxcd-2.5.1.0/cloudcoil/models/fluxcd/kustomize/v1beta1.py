# Generated by cloudcoil-model-codegen v0.5.6
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Any,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource


class SecretRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SecretRef"]:
            return SecretRef

        def build(self) -> "SecretRef":
            return SecretRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["SecretRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SecretRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SecretRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SecretRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SecretRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referent.
    """


class Decryption(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Decryption"]:
            return Decryption

        def build(self) -> "Decryption":
            return Decryption(**self._attrs)

        def provider(self, value: Literal["sops"], /) -> Self:
            """
            Provider is the name of the decryption engine.
            """
            return self._set("provider", value)

        @overload
        def secret_ref(self, value_or_callback: Optional[SecretRef], /) -> "Decryption.Builder": ...

        @overload
        def secret_ref(
            self,
            value_or_callback: Callable[[SecretRef.Builder], SecretRef.Builder | SecretRef],
            /,
        ) -> "Decryption.Builder": ...

        @overload
        def secret_ref(self, value_or_callback: Never = ...) -> "SecretRef.BuilderContext": ...

        def secret_ref(self, value_or_callback=None, /):
            """
            The secret name containing the private OpenPGP keys used for decryption.
            """
            if self._in_context and value_or_callback is None:
                context = SecretRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SecretRef.builder())
                if isinstance(output, SecretRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret_ref", value)

    class BuilderContext(BuilderContextBase["Decryption.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Decryption.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Decryption."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Decryption", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Decryption.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    provider: Literal["sops"]
    """
    Provider is the name of the decryption engine.
    """
    secret_ref: Annotated[Optional[SecretRef], Field(alias="secretRef")] = None
    """
    The secret name containing the private OpenPGP keys used for decryption.
    """


class DependsOn(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DependsOn"]:
            return DependsOn

        def build(self) -> "DependsOn":
            return DependsOn(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, when not specified it acts as LocalObjectReference.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["DependsOn.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DependsOn.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DependsOn."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DependsOn", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DependsOn.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referent.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, when not specified it acts as LocalObjectReference.
    """


class HealthCheck(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["HealthCheck"]:
            return HealthCheck

        def build(self) -> "HealthCheck":
            return HealthCheck(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            API version of the referent, if not specified the Kubernetes preferred version will be used.
            """
            return self._set("api_version", value)

        def kind(self, value: str, /) -> Self:
            """
            Kind of the referent.
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, when not specified it acts as LocalObjectReference.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["HealthCheck.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = HealthCheck.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for HealthCheck."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["HealthCheck", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use HealthCheck.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    API version of the referent, if not specified the Kubernetes preferred version will be used.
    """
    kind: str
    """
    Kind of the referent.
    """
    name: str
    """
    Name of the referent.
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, when not specified it acts as LocalObjectReference.
    """


class Image(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Image"]:
            return Image

        def build(self) -> "Image":
            return Image(**self._attrs)

        def digest(self, value: Optional[str], /) -> Self:
            """
            Digest is the value used to replace the original image tag.
            If digest is present NewTag value is ignored.
            """
            return self._set("digest", value)

        def name(self, value: str, /) -> Self:
            """
            Name is a tag-less image name.
            """
            return self._set("name", value)

        def new_name(self, value: Optional[str], /) -> Self:
            """
            NewName is the value used to replace the original name.
            """
            return self._set("new_name", value)

        def new_tag(self, value: Optional[str], /) -> Self:
            """
            NewTag is the value used to replace the original tag.
            """
            return self._set("new_tag", value)

    class BuilderContext(BuilderContextBase["Image.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Image.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Image."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Image", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Image.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    digest: Optional[str] = None
    """
    Digest is the value used to replace the original image tag.
    If digest is present NewTag value is ignored.
    """
    name: str
    """
    Name is a tag-less image name.
    """
    new_name: Annotated[Optional[str], Field(alias="newName")] = None
    """
    NewName is the value used to replace the original name.
    """
    new_tag: Annotated[Optional[str], Field(alias="newTag")] = None
    """
    NewTag is the value used to replace the original tag.
    """


class KubeConfig(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KubeConfig"]:
            return KubeConfig

        def build(self) -> "KubeConfig":
            return KubeConfig(**self._attrs)

        @overload
        def secret_ref(self, value_or_callback: SecretRef, /) -> "KubeConfig.Builder": ...

        @overload
        def secret_ref(
            self,
            value_or_callback: Callable[[SecretRef.Builder], SecretRef.Builder | SecretRef],
            /,
        ) -> "KubeConfig.Builder": ...

        @overload
        def secret_ref(self, value_or_callback: Never = ...) -> "SecretRef.BuilderContext": ...

        def secret_ref(self, value_or_callback=None, /):
            """
            SecretRef holds the name to a secret that contains a 'value' key with
            the kubeconfig file as the value. It must be in the same namespace as
            the Kustomization.
            It is recommended that the kubeconfig is self-contained, and the secret
            is regularly updated if credentials such as a cloud-access-token expire.
            Cloud specific `cmd-path` auth helpers will not function without adding
            binaries and credentials to the Pod that is responsible for reconciling
            the Kustomization.
            """
            if self._in_context and value_or_callback is None:
                context = SecretRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SecretRef.builder())
                if isinstance(output, SecretRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret_ref", value)

    class BuilderContext(BuilderContextBase["KubeConfig.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KubeConfig.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KubeConfig."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KubeConfig", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KubeConfig.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    secret_ref: Annotated[SecretRef, Field(alias="secretRef")]
    """
    SecretRef holds the name to a secret that contains a 'value' key with
    the kubeconfig file as the value. It must be in the same namespace as
    the Kustomization.
    It is recommended that the kubeconfig is self-contained, and the secret
    is regularly updated if credentials such as a cloud-access-token expire.
    Cloud specific `cmd-path` auth helpers will not function without adding
    binaries and credentials to the Pod that is responsible for reconciling
    the Kustomization.
    """


class Target(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Target"]:
            return Target

        def build(self) -> "Target":
            return Target(**self._attrs)

        def annotation_selector(self, value: Optional[str], /) -> Self:
            """
            AnnotationSelector is a string that follows the label selection expression
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
            It matches with the resource annotations.
            """
            return self._set("annotation_selector", value)

        def group(self, value: Optional[str], /) -> Self:
            """
            Group is the API group to select resources from.
            Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("group", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            Kind of the API Group to select resources from.
            Together with Group and Version it is capable of unambiguously
            identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("kind", value)

        def label_selector(self, value: Optional[str], /) -> Self:
            """
            LabelSelector is a string that follows the label selection expression
            https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
            It matches with the resource labels.
            """
            return self._set("label_selector", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name to match resources with.
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace to select resources from.
            """
            return self._set("namespace", value)

        def version(self, value: Optional[str], /) -> Self:
            """
            Version of the API Group to select resources from.
            Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
            https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
            """
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["Target.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Target.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Target."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Target", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Target.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotation_selector: Annotated[Optional[str], Field(alias="annotationSelector")] = None
    """
    AnnotationSelector is a string that follows the label selection expression
    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
    It matches with the resource annotations.
    """
    group: Optional[str] = None
    """
    Group is the API group to select resources from.
    Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """
    kind: Optional[str] = None
    """
    Kind of the API Group to select resources from.
    Together with Group and Version it is capable of unambiguously
    identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """
    label_selector: Annotated[Optional[str], Field(alias="labelSelector")] = None
    """
    LabelSelector is a string that follows the label selection expression
    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
    It matches with the resource labels.
    """
    name: Optional[str] = None
    """
    Name to match resources with.
    """
    namespace: Optional[str] = None
    """
    Namespace to select resources from.
    """
    version: Optional[str] = None
    """
    Version of the API Group to select resources from.
    Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
    https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
    """


class Patch(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Patch"]:
            return Patch

        def build(self) -> "Patch":
            return Patch(**self._attrs)

        def patch(self, value: str, /) -> Self:
            """
            Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
            an array of operation objects.
            """
            return self._set("patch", value)

        @overload
        def target(self, value_or_callback: Optional[Target], /) -> "Patch.Builder": ...

        @overload
        def target(
            self,
            value_or_callback: Callable[[Target.Builder], Target.Builder | Target],
            /,
        ) -> "Patch.Builder": ...

        @overload
        def target(self, value_or_callback: Never = ...) -> "Target.BuilderContext": ...

        def target(self, value_or_callback=None, /):
            """
            Target points to the resources that the patch document should be applied to.
            """
            if self._in_context and value_or_callback is None:
                context = Target.BuilderContext()
                context._parent_builder = self
                context._field_name = "target"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Target.builder())
                if isinstance(output, Target.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("target", value)

    class BuilderContext(BuilderContextBase["Patch.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Patch.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Patch."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Patch", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Patch.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    patch: str
    """
    Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
    an array of operation objects.
    """
    target: Optional[Target] = None
    """
    Target points to the resources that the patch document should be applied to.
    """


class PatchModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PatchModel"]:
            return PatchModel

        def build(self) -> "PatchModel":
            return PatchModel(**self._attrs)

        def from_(self, value: Optional[str], /) -> Self:
            """
            From contains a JSON-pointer value that references a location within the target document where the operation is
            performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
            """
            return self._set("from_", value)

        def op(self, value: Literal["test", "remove", "add", "replace", "move", "copy"], /) -> Self:
            """
            Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
            "test".
            https://datatracker.ietf.org/doc/html/rfc6902#section-4
            """
            return self._set("op", value)

        def path(self, value: str, /) -> Self:
            """
            Path contains the JSON-pointer value that references a location within the target document where the operation
            is performed. The meaning of the value depends on the value of Op.
            """
            return self._set("path", value)

        def value(self, value: Optional[Any], /) -> Self:
            """
            Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
            account by all operations.
            """
            return self._set("value", value)

    class BuilderContext(BuilderContextBase["PatchModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PatchModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PatchModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PatchModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PatchModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    from_: Annotated[Optional[str], Field(alias="from")] = None
    """
    From contains a JSON-pointer value that references a location within the target document where the operation is
    performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
    """
    op: Literal["test", "remove", "add", "replace", "move", "copy"]
    """
    Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
    "test".
    https://datatracker.ietf.org/doc/html/rfc6902#section-4
    """
    path: str
    """
    Path contains the JSON-pointer value that references a location within the target document where the operation
    is performed. The meaning of the value depends on the value of Op.
    """
    value: Optional[Any] = None
    """
    Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
    account by all operations.
    """


class PatchesJson6902(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PatchesJson6902"]:
            return PatchesJson6902

        def build(self) -> "PatchesJson6902":
            return PatchesJson6902(**self._attrs)

        @overload
        def patch(self, value_or_callback: List[PatchModel], /) -> "PatchesJson6902.Builder": ...

        @overload
        def patch(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[PatchModel, PatchModel.Builder]],
                GenericListBuilder[PatchModel, PatchModel.Builder] | List[PatchModel],
            ],
            /,
        ) -> "PatchesJson6902.Builder": ...

        @overload
        def patch(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[PatchModel.Builder]: ...

        def patch(self, value_or_callback=None, /):
            """
            Patch contains the JSON6902 patch document with an array of operation objects.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[PatchModel.Builder]()
                context._parent_builder = self
                context._field_name = "patch"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PatchModel.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("patch", value)

        @overload
        def target(self, value_or_callback: Target, /) -> "PatchesJson6902.Builder": ...

        @overload
        def target(
            self,
            value_or_callback: Callable[[Target.Builder], Target.Builder | Target],
            /,
        ) -> "PatchesJson6902.Builder": ...

        @overload
        def target(self, value_or_callback: Never = ...) -> "Target.BuilderContext": ...

        def target(self, value_or_callback=None, /):
            """
            Target points to the resources that the patch document should be applied to.
            """
            if self._in_context and value_or_callback is None:
                context = Target.BuilderContext()
                context._parent_builder = self
                context._field_name = "target"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Target.builder())
                if isinstance(output, Target.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("target", value)

    class BuilderContext(BuilderContextBase["PatchesJson6902.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PatchesJson6902.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PatchesJson6902."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PatchesJson6902", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PatchesJson6902.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    patch: List[PatchModel]
    """
    Patch contains the JSON6902 patch document with an array of operation objects.
    """
    target: Target
    """
    Target points to the resources that the patch document should be applied to.
    """


class SubstituteFrom(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SubstituteFrom"]:
            return SubstituteFrom

        def build(self) -> "SubstituteFrom":
            return SubstituteFrom(**self._attrs)

        def kind(self, value: Literal["Secret", "ConfigMap"], /) -> Self:
            """
            Kind of the values referent, valid values are ('Secret', 'ConfigMap').
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the values referent. Should reside in the same namespace as the
            referring resource.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["SubstituteFrom.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SubstituteFrom.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SubstituteFrom."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SubstituteFrom", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SubstituteFrom.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    kind: Literal["Secret", "ConfigMap"]
    """
    Kind of the values referent, valid values are ('Secret', 'ConfigMap').
    """
    name: Annotated[str, Field(max_length=253, min_length=1)]
    """
    Name of the values referent. Should reside in the same namespace as the
    referring resource.
    """


class PostBuild(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PostBuild"]:
            return PostBuild

        def build(self) -> "PostBuild":
            return PostBuild(**self._attrs)

        def substitute(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Substitute holds a map of key/value pairs.
            The variables defined in your YAML manifests
            that match any of the keys defined in the map
            will be substituted with the set value.
            Includes support for bash string replacement functions
            e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.
            """
            return self._set("substitute", value)

        @overload
        def substitute_from(
            self, value_or_callback: List[SubstituteFrom], /
        ) -> "PostBuild.Builder": ...

        @overload
        def substitute_from(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[SubstituteFrom, SubstituteFrom.Builder]],
                GenericListBuilder[SubstituteFrom, SubstituteFrom.Builder] | List[SubstituteFrom],
            ],
            /,
        ) -> "PostBuild.Builder": ...

        @overload
        def substitute_from(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[SubstituteFrom.Builder]: ...

        def substitute_from(self, value_or_callback=None, /):
            """
            SubstituteFrom holds references to ConfigMaps and Secrets containing
            the variables and their values to be substituted in the YAML manifests.
            The ConfigMap and the Secret data keys represent the var names and they
            must match the vars declared in the manifests for the substitution to happen.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[SubstituteFrom.Builder]()
                context._parent_builder = self
                context._field_name = "substitute_from"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SubstituteFrom.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("substitute_from", value)

    class BuilderContext(BuilderContextBase["PostBuild.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PostBuild.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PostBuild."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PostBuild", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PostBuild.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    substitute: Optional[Dict[str, str]] = None
    """
    Substitute holds a map of key/value pairs.
    The variables defined in your YAML manifests
    that match any of the keys defined in the map
    will be substituted with the set value.
    Includes support for bash string replacement functions
    e.g. ${var:=default}, ${var:position} and ${var/substring/replacement}.
    """
    substitute_from: Annotated[Optional[List[SubstituteFrom]], Field(alias="substituteFrom")] = None
    """
    SubstituteFrom holds references to ConfigMaps and Secrets containing
    the variables and their values to be substituted in the YAML manifests.
    The ConfigMap and the Secret data keys represent the var names and they
    must match the vars declared in the manifests for the substitution to happen.
    """


class SourceRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SourceRef"]:
            return SourceRef

        def build(self) -> "SourceRef":
            return SourceRef(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            API version of the referent
            """
            return self._set("api_version", value)

        def kind(self, value: Literal["GitRepository", "Bucket"], /) -> Self:
            """
            Kind of the referent
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace of the referent, defaults to the Kustomization namespace
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["SourceRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SourceRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SourceRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SourceRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SourceRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    API version of the referent
    """
    kind: Literal["GitRepository", "Bucket"]
    """
    Kind of the referent
    """
    name: str
    """
    Name of the referent
    """
    namespace: Optional[str] = None
    """
    Namespace of the referent, defaults to the Kustomization namespace
    """


class KustomizationSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KustomizationSpec"]:
            return KustomizationSpec

        def build(self) -> "KustomizationSpec":
            return KustomizationSpec(**self._attrs)

        @overload
        def decryption(
            self, value_or_callback: Optional[Decryption], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def decryption(
            self,
            value_or_callback: Callable[[Decryption.Builder], Decryption.Builder | Decryption],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def decryption(self, value_or_callback: Never = ...) -> "Decryption.BuilderContext": ...

        def decryption(self, value_or_callback=None, /):
            """
            Decrypt Kubernetes secrets before applying them on the cluster.
            """
            if self._in_context and value_or_callback is None:
                context = Decryption.BuilderContext()
                context._parent_builder = self
                context._field_name = "decryption"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Decryption.builder())
                if isinstance(output, Decryption.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("decryption", value)

        @overload
        def depends_on(
            self, value_or_callback: List[DependsOn], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def depends_on(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[DependsOn, DependsOn.Builder]],
                GenericListBuilder[DependsOn, DependsOn.Builder] | List[DependsOn],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def depends_on(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[DependsOn.Builder]: ...

        def depends_on(self, value_or_callback=None, /):
            """
            DependsOn may contain a meta.NamespacedObjectReference slice
            with references to Kustomization resources that must be ready before this
            Kustomization can be reconciled.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[DependsOn.Builder]()
                context._parent_builder = self
                context._field_name = "depends_on"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DependsOn.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("depends_on", value)

        def force(self, value: Optional[bool], /) -> Self:
            """
            Force instructs the controller to recreate resources
            when patching fails due to an immutable field change.
            """
            return self._set("force", value)

        @overload
        def health_checks(
            self, value_or_callback: List[HealthCheck], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_checks(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[HealthCheck, HealthCheck.Builder]],
                GenericListBuilder[HealthCheck, HealthCheck.Builder] | List[HealthCheck],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def health_checks(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[HealthCheck.Builder]: ...

        def health_checks(self, value_or_callback=None, /):
            """
            A list of resources to be included in the health assessment.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[HealthCheck.Builder]()
                context._parent_builder = self
                context._field_name = "health_checks"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(HealthCheck.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("health_checks", value)

        @overload
        def images(self, value_or_callback: List[Image], /) -> "KustomizationSpec.Builder": ...

        @overload
        def images(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Image, Image.Builder]],
                GenericListBuilder[Image, Image.Builder] | List[Image],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def images(self, value_or_callback: Never = ...) -> ListBuilderContext[Image.Builder]: ...

        def images(self, value_or_callback=None, /):
            """
            Images is a list of (image name, new name, new tag or digest)
            for changing image names, tags or digests. This can also be achieved with a
            patch, but this operator is simpler to specify.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Image.Builder]()
                context._parent_builder = self
                context._field_name = "images"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Image.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("images", value)

        def interval(self, value: str, /) -> Self:
            """
            The interval at which to reconcile the Kustomization.
            """
            return self._set("interval", value)

        @overload
        def kube_config(
            self, value_or_callback: Optional[KubeConfig], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def kube_config(
            self,
            value_or_callback: Callable[[KubeConfig.Builder], KubeConfig.Builder | KubeConfig],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def kube_config(self, value_or_callback: Never = ...) -> "KubeConfig.BuilderContext": ...

        def kube_config(self, value_or_callback=None, /):
            """
            The KubeConfig for reconciling the Kustomization on a remote cluster.
            When specified, KubeConfig takes precedence over ServiceAccountName.
            """
            if self._in_context and value_or_callback is None:
                context = KubeConfig.BuilderContext()
                context._parent_builder = self
                context._field_name = "kube_config"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KubeConfig.builder())
                if isinstance(output, KubeConfig.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("kube_config", value)

        @overload
        def patches(self, value_or_callback: List[Patch], /) -> "KustomizationSpec.Builder": ...

        @overload
        def patches(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Patch, Patch.Builder]],
                GenericListBuilder[Patch, Patch.Builder] | List[Patch],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def patches(self, value_or_callback: Never = ...) -> ListBuilderContext[Patch.Builder]: ...

        def patches(self, value_or_callback=None, /):
            """
            Strategic merge and JSON patches, defined as inline YAML objects,
            capable of targeting objects based on kind, label and annotation selectors.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Patch.Builder]()
                context._parent_builder = self
                context._field_name = "patches"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Patch.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("patches", value)

        @overload
        def patches_json6902(
            self, value_or_callback: List[PatchesJson6902], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def patches_json6902(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[PatchesJson6902, PatchesJson6902.Builder]],
                GenericListBuilder[PatchesJson6902, PatchesJson6902.Builder]
                | List[PatchesJson6902],
            ],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def patches_json6902(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[PatchesJson6902.Builder]: ...

        def patches_json6902(self, value_or_callback=None, /):
            """
            JSON 6902 patches, defined as inline YAML objects.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[PatchesJson6902.Builder]()
                context._parent_builder = self
                context._field_name = "patches_json6902"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PatchesJson6902.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("patches_json6902", value)

        def patches_strategic_merge(self, value: Optional[List[Any]], /) -> Self:
            """
            Strategic merge patches, defined as inline YAML objects.
            """
            return self._set("patches_strategic_merge", value)

        def path(self, value: Optional[str], /) -> Self:
            """
            Path to the directory containing the kustomization.yaml file, or the
            set of plain YAMLs a kustomization.yaml should be generated for.
            Defaults to 'None', which translates to the root path of the SourceRef.
            """
            return self._set("path", value)

        @overload
        def post_build(
            self, value_or_callback: Optional[PostBuild], /
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def post_build(
            self,
            value_or_callback: Callable[[PostBuild.Builder], PostBuild.Builder | PostBuild],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def post_build(self, value_or_callback: Never = ...) -> "PostBuild.BuilderContext": ...

        def post_build(self, value_or_callback=None, /):
            """
            PostBuild describes which actions to perform on the YAML manifest
            generated by building the kustomize overlay.
            """
            if self._in_context and value_or_callback is None:
                context = PostBuild.BuilderContext()
                context._parent_builder = self
                context._field_name = "post_build"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PostBuild.builder())
                if isinstance(output, PostBuild.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("post_build", value)

        def prune(self, value: bool, /) -> Self:
            """
            Prune enables garbage collection.
            """
            return self._set("prune", value)

        def retry_interval(self, value: Optional[str], /) -> Self:
            """
            The interval at which to retry a previously failed reconciliation.
            When not specified, the controller uses the KustomizationSpec.Interval
            value to retry failures.
            """
            return self._set("retry_interval", value)

        def service_account_name(self, value: Optional[str], /) -> Self:
            """
            The name of the Kubernetes service account to impersonate
            when reconciling this Kustomization.
            """
            return self._set("service_account_name", value)

        @overload
        def source_ref(self, value_or_callback: SourceRef, /) -> "KustomizationSpec.Builder": ...

        @overload
        def source_ref(
            self,
            value_or_callback: Callable[[SourceRef.Builder], SourceRef.Builder | SourceRef],
            /,
        ) -> "KustomizationSpec.Builder": ...

        @overload
        def source_ref(self, value_or_callback: Never = ...) -> "SourceRef.BuilderContext": ...

        def source_ref(self, value_or_callback=None, /):
            """
            Reference of the source where the kustomization file is.
            """
            if self._in_context and value_or_callback is None:
                context = SourceRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "source_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SourceRef.builder())
                if isinstance(output, SourceRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("source_ref", value)

        def suspend(self, value: Optional[bool], /) -> Self:
            """
            This flag tells the controller to suspend subsequent kustomize executions,
            it does not apply to already started executions. Defaults to false.
            """
            return self._set("suspend", value)

        def target_namespace(self, value: Optional[str], /) -> Self:
            """
            TargetNamespace sets or overrides the namespace in the
            kustomization.yaml file.
            """
            return self._set("target_namespace", value)

        def timeout(self, value: Optional[str], /) -> Self:
            """
            Timeout for validation, apply and health checking operations.
            Defaults to 'Interval' duration.
            """
            return self._set("timeout", value)

        def validation(self, value: Optional[Literal["none", "client", "server"]], /) -> Self:
            """
            Validate the Kubernetes objects before applying them on the cluster.
            The validation strategy can be 'client' (local dry-run), 'server'
            (APIServer dry-run) or 'none'.
            When 'Force' is 'true', validation will fallback to 'client' if set to
            'server' because server-side validation is not supported in this scenario.
            """
            return self._set("validation", value)

    class BuilderContext(BuilderContextBase["KustomizationSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KustomizationSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KustomizationSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KustomizationSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KustomizationSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    decryption: Optional[Decryption] = None
    """
    Decrypt Kubernetes secrets before applying them on the cluster.
    """
    depends_on: Annotated[Optional[List[DependsOn]], Field(alias="dependsOn")] = None
    """
    DependsOn may contain a meta.NamespacedObjectReference slice
    with references to Kustomization resources that must be ready before this
    Kustomization can be reconciled.
    """
    force: Optional[bool] = False
    """
    Force instructs the controller to recreate resources
    when patching fails due to an immutable field change.
    """
    health_checks: Annotated[Optional[List[HealthCheck]], Field(alias="healthChecks")] = None
    """
    A list of resources to be included in the health assessment.
    """
    images: Optional[List[Image]] = None
    """
    Images is a list of (image name, new name, new tag or digest)
    for changing image names, tags or digests. This can also be achieved with a
    patch, but this operator is simpler to specify.
    """
    interval: str
    """
    The interval at which to reconcile the Kustomization.
    """
    kube_config: Annotated[Optional[KubeConfig], Field(alias="kubeConfig")] = None
    """
    The KubeConfig for reconciling the Kustomization on a remote cluster.
    When specified, KubeConfig takes precedence over ServiceAccountName.
    """
    patches: Optional[List[Patch]] = None
    """
    Strategic merge and JSON patches, defined as inline YAML objects,
    capable of targeting objects based on kind, label and annotation selectors.
    """
    patches_json6902: Annotated[Optional[List[PatchesJson6902]], Field(alias="patchesJson6902")] = (
        None
    )
    """
    JSON 6902 patches, defined as inline YAML objects.
    """
    patches_strategic_merge: Annotated[
        Optional[List[Any]], Field(alias="patchesStrategicMerge")
    ] = None
    """
    Strategic merge patches, defined as inline YAML objects.
    """
    path: Optional[str] = None
    """
    Path to the directory containing the kustomization.yaml file, or the
    set of plain YAMLs a kustomization.yaml should be generated for.
    Defaults to 'None', which translates to the root path of the SourceRef.
    """
    post_build: Annotated[Optional[PostBuild], Field(alias="postBuild")] = None
    """
    PostBuild describes which actions to perform on the YAML manifest
    generated by building the kustomize overlay.
    """
    prune: bool
    """
    Prune enables garbage collection.
    """
    retry_interval: Annotated[Optional[str], Field(alias="retryInterval")] = None
    """
    The interval at which to retry a previously failed reconciliation.
    When not specified, the controller uses the KustomizationSpec.Interval
    value to retry failures.
    """
    service_account_name: Annotated[Optional[str], Field(alias="serviceAccountName")] = None
    """
    The name of the Kubernetes service account to impersonate
    when reconciling this Kustomization.
    """
    source_ref: Annotated[SourceRef, Field(alias="sourceRef")]
    """
    Reference of the source where the kustomization file is.
    """
    suspend: Optional[bool] = None
    """
    This flag tells the controller to suspend subsequent kustomize executions,
    it does not apply to already started executions. Defaults to false.
    """
    target_namespace: Annotated[
        Optional[str], Field(alias="targetNamespace", max_length=63, min_length=1)
    ] = None
    """
    TargetNamespace sets or overrides the namespace in the
    kustomization.yaml file.
    """
    timeout: Optional[str] = None
    """
    Timeout for validation, apply and health checking operations.
    Defaults to 'Interval' duration.
    """
    validation: Optional[Literal["none", "client", "server"]] = None
    """
    Validate the Kubernetes objects before applying them on the cluster.
    The validation strategy can be 'client' (local dry-run), 'server'
    (APIServer dry-run) or 'none'.
    When 'Force' is 'true', validation will fallback to 'client' if set to
    'server' because server-side validation is not supported in this scenario.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            lastTransitionTime is the last time the condition transitioned from one status to another.
            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition.
            This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition.
            Producers of specific condition types may define expected values and meanings for this field,
            and whether the values are considered a guaranteed API.
            The value should be a CamelCase string.
            This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: Literal["True", "False", "Unknown"], /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another.
    This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: Annotated[str, Field(max_length=32768)]
    """
    message is a human readable message indicating details about the transition.
    This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration", ge=0)] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition.
    Producers of specific condition types may define expected values and meanings for this field,
    and whether the values are considered a guaranteed API.
    The value should be a CamelCase string.
    This field may not be empty.
    """
    status: Literal["True", "False", "Unknown"]
    """
    status of the condition, one of True, False, Unknown.
    """
    type: Annotated[
        str,
        Field(
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class Entry(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Entry"]:
            return Entry

        def build(self) -> "Entry":
            return Entry(**self._attrs)

        def kinds(self, value: Dict[str, str], /) -> Self:
            """
            The list of Kubernetes kinds.
            """
            return self._set("kinds", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            The namespace of this entry.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["Entry.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Entry.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Entry."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Entry", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Entry.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    kinds: Dict[str, str]
    """
    The list of Kubernetes kinds.
    """
    namespace: Optional[str] = None
    """
    The namespace of this entry.
    """


class Snapshot(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Snapshot"]:
            return Snapshot

        def build(self) -> "Snapshot":
            return Snapshot(**self._attrs)

        def checksum(self, value: str, /) -> Self:
            """
            The manifests sha1 checksum.
            """
            return self._set("checksum", value)

        @overload
        def entries(self, value_or_callback: List[Entry], /) -> "Snapshot.Builder": ...

        @overload
        def entries(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Entry, Entry.Builder]],
                GenericListBuilder[Entry, Entry.Builder] | List[Entry],
            ],
            /,
        ) -> "Snapshot.Builder": ...

        @overload
        def entries(self, value_or_callback: Never = ...) -> ListBuilderContext[Entry.Builder]: ...

        def entries(self, value_or_callback=None, /):
            """
            A list of Kubernetes kinds grouped by namespace.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Entry.Builder]()
                context._parent_builder = self
                context._field_name = "entries"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Entry.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("entries", value)

    class BuilderContext(BuilderContextBase["Snapshot.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Snapshot.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Snapshot."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Snapshot", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Snapshot.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    checksum: str
    """
    The manifests sha1 checksum.
    """
    entries: List[Entry]
    """
    A list of Kubernetes kinds grouped by namespace.
    """


class KustomizationStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["KustomizationStatus"]:
            return KustomizationStatus

        def build(self) -> "KustomizationStatus":
            return KustomizationStatus(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def last_applied_revision(self, value: Optional[str], /) -> Self:
            """
            The last successfully applied revision.
            The revision format for Git sources is <branch|tag>/<commit-sha>.
            """
            return self._set("last_applied_revision", value)

        def last_attempted_revision(self, value: Optional[str], /) -> Self:
            """
            LastAttemptedRevision is the revision of the last reconciliation attempt.
            """
            return self._set("last_attempted_revision", value)

        def last_handled_reconcile_at(self, value: Optional[str], /) -> Self:
            """
            LastHandledReconcileAt holds the value of the most recent
            reconcile request value, so a change of the annotation value
            can be detected.
            """
            return self._set("last_handled_reconcile_at", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration is the last reconciled generation.
            """
            return self._set("observed_generation", value)

        @overload
        def snapshot(
            self, value_or_callback: Optional[Snapshot], /
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def snapshot(
            self,
            value_or_callback: Callable[[Snapshot.Builder], Snapshot.Builder | Snapshot],
            /,
        ) -> "KustomizationStatus.Builder": ...

        @overload
        def snapshot(self, value_or_callback: Never = ...) -> "Snapshot.BuilderContext": ...

        def snapshot(self, value_or_callback=None, /):
            """
            The last successfully applied revision metadata.
            """
            if self._in_context and value_or_callback is None:
                context = Snapshot.BuilderContext()
                context._parent_builder = self
                context._field_name = "snapshot"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Snapshot.builder())
                if isinstance(output, Snapshot.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("snapshot", value)

    class BuilderContext(BuilderContextBase["KustomizationStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = KustomizationStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for KustomizationStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["KustomizationStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use KustomizationStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[List[Condition]] = None
    last_applied_revision: Annotated[Optional[str], Field(alias="lastAppliedRevision")] = None
    """
    The last successfully applied revision.
    The revision format for Git sources is <branch|tag>/<commit-sha>.
    """
    last_attempted_revision: Annotated[Optional[str], Field(alias="lastAttemptedRevision")] = None
    """
    LastAttemptedRevision is the revision of the last reconciliation attempt.
    """
    last_handled_reconcile_at: Annotated[Optional[str], Field(alias="lastHandledReconcileAt")] = (
        None
    )
    """
    LastHandledReconcileAt holds the value of the most recent
    reconcile request value, so a change of the annotation value
    can be detected.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration is the last reconciled generation.
    """
    snapshot: Optional[Snapshot] = None
    """
    The last successfully applied revision metadata.
    """


class Kustomization(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Kustomization"]:
            return Kustomization

        def build(self) -> "Kustomization":
            return Kustomization(**self._attrs)

        def api_version(
            self, value: Optional[Literal["kustomize.toolkit.fluxcd.io/v1beta1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Kustomization"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "Kustomization.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(
            self, value_or_callback: Optional[KustomizationSpec], /
        ) -> "Kustomization.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [KustomizationSpec.Builder],
                KustomizationSpec.Builder | KustomizationSpec,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "KustomizationSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = KustomizationSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KustomizationSpec.builder())
                if isinstance(output, KustomizationSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[KustomizationStatus], /
        ) -> "Kustomization.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [KustomizationStatus.Builder],
                KustomizationStatus.Builder | KustomizationStatus,
            ],
            /,
        ) -> "Kustomization.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "KustomizationStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = KustomizationStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(KustomizationStatus.builder())
                if isinstance(output, KustomizationStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["Kustomization.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Kustomization.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Kustomization."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Kustomization", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Kustomization.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["kustomize.toolkit.fluxcd.io/v1beta1"]],
        Field(alias="apiVersion"),
    ] = "kustomize.toolkit.fluxcd.io/v1beta1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["Kustomization"]] = "Kustomization"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[KustomizationSpec] = None
    status: Optional[KustomizationStatus] = None
