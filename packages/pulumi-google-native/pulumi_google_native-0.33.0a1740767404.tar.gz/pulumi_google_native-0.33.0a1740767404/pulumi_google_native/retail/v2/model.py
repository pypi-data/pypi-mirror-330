# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ModelArgs', 'Model']

@pulumi.input_type
class ModelArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 filtering_option: Optional[pulumi.Input['ModelFilteringOption']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 model_features_config: Optional[pulumi.Input['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optimization_objective: Optional[pulumi.Input[str]] = None,
                 periodic_tuning_state: Optional[pulumi.Input['ModelPeriodicTuningState']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 training_state: Optional[pulumi.Input['ModelTrainingState']] = None):
        """
        The set of arguments for constructing a Model resource.
        :param pulumi.Input[str] display_name: The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
        :param pulumi.Input[str] type: The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        :param pulumi.Input[bool] dry_run: Optional. Whether to run a dry run to validate the request (without actually creating the model).
        :param pulumi.Input['ModelFilteringOption'] filtering_option: Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
        :param pulumi.Input['GoogleCloudRetailV2ModelModelFeaturesConfigArgs'] model_features_config: Optional. Additional model features config.
        :param pulumi.Input[str] name: The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
        :param pulumi.Input[str] optimization_objective: Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        :param pulumi.Input['ModelPeriodicTuningState'] periodic_tuning_state: Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
        :param pulumi.Input['ModelTrainingState'] training_state: Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "type", type)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if filtering_option is not None:
            pulumi.set(__self__, "filtering_option", filtering_option)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if model_features_config is not None:
            pulumi.set(__self__, "model_features_config", model_features_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optimization_objective is not None:
            pulumi.set(__self__, "optimization_objective", optimization_objective)
        if periodic_tuning_state is not None:
            pulumi.set(__self__, "periodic_tuning_state", periodic_tuning_state)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if training_state is not None:
            pulumi.set(__self__, "training_state", training_state)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Whether to run a dry run to validate the request (without actually creating the model).
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="filteringOption")
    def filtering_option(self) -> Optional[pulumi.Input['ModelFilteringOption']]:
        """
        Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
        """
        return pulumi.get(self, "filtering_option")

    @filtering_option.setter
    def filtering_option(self, value: Optional[pulumi.Input['ModelFilteringOption']]):
        pulumi.set(self, "filtering_option", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="modelFeaturesConfig")
    def model_features_config(self) -> Optional[pulumi.Input['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']]:
        """
        Optional. Additional model features config.
        """
        return pulumi.get(self, "model_features_config")

    @model_features_config.setter
    def model_features_config(self, value: Optional[pulumi.Input['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']]):
        pulumi.set(self, "model_features_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optimizationObjective")
    def optimization_objective(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        """
        return pulumi.get(self, "optimization_objective")

    @optimization_objective.setter
    def optimization_objective(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimization_objective", value)

    @property
    @pulumi.getter(name="periodicTuningState")
    def periodic_tuning_state(self) -> Optional[pulumi.Input['ModelPeriodicTuningState']]:
        """
        Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
        """
        return pulumi.get(self, "periodic_tuning_state")

    @periodic_tuning_state.setter
    def periodic_tuning_state(self, value: Optional[pulumi.Input['ModelPeriodicTuningState']]):
        pulumi.set(self, "periodic_tuning_state", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="trainingState")
    def training_state(self) -> Optional[pulumi.Input['ModelTrainingState']]:
        """
        Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
        """
        return pulumi.get(self, "training_state")

    @training_state.setter
    def training_state(self, value: Optional[pulumi.Input['ModelTrainingState']]):
        pulumi.set(self, "training_state", value)


class Model(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 filtering_option: Optional[pulumi.Input['ModelFilteringOption']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 model_features_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optimization_objective: Optional[pulumi.Input[str]] = None,
                 periodic_tuning_state: Optional[pulumi.Input['ModelPeriodicTuningState']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 training_state: Optional[pulumi.Input['ModelTrainingState']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new model.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
        :param pulumi.Input[bool] dry_run: Optional. Whether to run a dry run to validate the request (without actually creating the model).
        :param pulumi.Input['ModelFilteringOption'] filtering_option: Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
        :param pulumi.Input[pulumi.InputType['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']] model_features_config: Optional. Additional model features config.
        :param pulumi.Input[str] name: The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
        :param pulumi.Input[str] optimization_objective: Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        :param pulumi.Input['ModelPeriodicTuningState'] periodic_tuning_state: Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
        :param pulumi.Input['ModelTrainingState'] training_state: Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
        :param pulumi.Input[str] type: The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new model.

        :param str resource_name: The name of the resource.
        :param ModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 filtering_option: Optional[pulumi.Input['ModelFilteringOption']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 model_features_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudRetailV2ModelModelFeaturesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optimization_objective: Optional[pulumi.Input[str]] = None,
                 periodic_tuning_state: Optional[pulumi.Input['ModelPeriodicTuningState']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 training_state: Optional[pulumi.Input['ModelTrainingState']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModelArgs.__new__(ModelArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["filtering_option"] = filtering_option
            __props__.__dict__["location"] = location
            __props__.__dict__["model_features_config"] = model_features_config
            __props__.__dict__["name"] = name
            __props__.__dict__["optimization_objective"] = optimization_objective
            __props__.__dict__["periodic_tuning_state"] = periodic_tuning_state
            __props__.__dict__["project"] = project
            __props__.__dict__["training_state"] = training_state
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["data_state"] = None
            __props__.__dict__["last_tune_time"] = None
            __props__.__dict__["serving_config_lists"] = None
            __props__.__dict__["serving_state"] = None
            __props__.__dict__["tuning_operation"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["catalogId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Model, __self__).__init__(
            'google-native:retail/v2:Model',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Model':
        """
        Get an existing Model resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ModelArgs.__new__(ModelArgs)

        __props__.__dict__["catalog_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["data_state"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["dry_run"] = None
        __props__.__dict__["filtering_option"] = None
        __props__.__dict__["last_tune_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["model_features_config"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["optimization_objective"] = None
        __props__.__dict__["periodic_tuning_state"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["serving_config_lists"] = None
        __props__.__dict__["serving_state"] = None
        __props__.__dict__["training_state"] = None
        __props__.__dict__["tuning_operation"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["update_time"] = None
        return Model(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp the Recommendation Model was created at.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataState")
    def data_state(self) -> pulumi.Output[str]:
        """
        The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
        """
        return pulumi.get(self, "data_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Optional. Whether to run a dry run to validate the request (without actually creating the model).
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="filteringOption")
    def filtering_option(self) -> pulumi.Output[str]:
        """
        Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
        """
        return pulumi.get(self, "filtering_option")

    @property
    @pulumi.getter(name="lastTuneTime")
    def last_tune_time(self) -> pulumi.Output[str]:
        """
        The timestamp when the latest successful tune finished.
        """
        return pulumi.get(self, "last_tune_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="modelFeaturesConfig")
    def model_features_config(self) -> pulumi.Output['outputs.GoogleCloudRetailV2ModelModelFeaturesConfigResponse']:
        """
        Optional. Additional model features config.
        """
        return pulumi.get(self, "model_features_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optimizationObjective")
    def optimization_objective(self) -> pulumi.Output[str]:
        """
        Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        """
        return pulumi.get(self, "optimization_objective")

    @property
    @pulumi.getter(name="periodicTuningState")
    def periodic_tuning_state(self) -> pulumi.Output[str]:
        """
        Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
        """
        return pulumi.get(self, "periodic_tuning_state")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="servingConfigLists")
    def serving_config_lists(self) -> pulumi.Output[Sequence['outputs.GoogleCloudRetailV2ModelServingConfigListResponse']]:
        """
        The list of valid serving configs associated with the PageOptimizationConfig.
        """
        return pulumi.get(self, "serving_config_lists")

    @property
    @pulumi.getter(name="servingState")
    def serving_state(self) -> pulumi.Output[str]:
        """
        The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.
        """
        return pulumi.get(self, "serving_state")

    @property
    @pulumi.getter(name="trainingState")
    def training_state(self) -> pulumi.Output[str]:
        """
        Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
        """
        return pulumi.get(self, "training_state")

    @property
    @pulumi.getter(name="tuningOperation")
    def tuning_operation(self) -> pulumi.Output[str]:
        """
        The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.
        """
        return pulumi.get(self, "tuning_operation")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.
        """
        return pulumi.get(self, "update_time")

