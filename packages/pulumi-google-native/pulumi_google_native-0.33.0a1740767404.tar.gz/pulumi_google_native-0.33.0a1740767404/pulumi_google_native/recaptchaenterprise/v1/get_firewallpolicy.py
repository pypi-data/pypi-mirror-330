# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFirewallpolicyResult',
    'AwaitableGetFirewallpolicyResult',
    'get_firewallpolicy',
    'get_firewallpolicy_output',
]

@pulumi.output_type
class GetFirewallpolicyResult:
    def __init__(__self__, actions=None, condition=None, description=None, name=None, path=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if condition and not isinstance(condition, str):
            raise TypeError("Expected argument 'condition' to be a str")
        pulumi.set(__self__, "condition", condition)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GoogleCloudRecaptchaenterpriseV1FirewallActionResponse']:
        """
        Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.
        """
        return pulumi.get(self, "path")


class AwaitableGetFirewallpolicyResult(GetFirewallpolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallpolicyResult(
            actions=self.actions,
            condition=self.condition,
            description=self.description,
            name=self.name,
            path=self.path)


def get_firewallpolicy(firewallpolicy_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallpolicyResult:
    """
    Returns the specified firewall policy.
    """
    __args__ = dict()
    __args__['firewallpolicyId'] = firewallpolicy_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:recaptchaenterprise/v1:getFirewallpolicy', __args__, opts=opts, typ=GetFirewallpolicyResult).value

    return AwaitableGetFirewallpolicyResult(
        actions=pulumi.get(__ret__, 'actions'),
        condition=pulumi.get(__ret__, 'condition'),
        description=pulumi.get(__ret__, 'description'),
        name=pulumi.get(__ret__, 'name'),
        path=pulumi.get(__ret__, 'path'))


@_utilities.lift_output_func(get_firewallpolicy)
def get_firewallpolicy_output(firewallpolicy_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallpolicyResult]:
    """
    Returns the specified firewall policy.
    """
    ...
