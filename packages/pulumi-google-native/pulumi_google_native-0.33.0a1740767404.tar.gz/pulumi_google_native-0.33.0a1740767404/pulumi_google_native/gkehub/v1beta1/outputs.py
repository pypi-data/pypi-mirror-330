# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplianceClusterResponse',
    'AuditConfigResponse',
    'AuditLogConfigResponse',
    'AuthorityResponse',
    'BindingResponse',
    'EdgeClusterResponse',
    'ExprResponse',
    'GkeClusterResponse',
    'KubernetesMetadataResponse',
    'KubernetesResourceResponse',
    'MembershipEndpointResponse',
    'MembershipStateResponse',
    'MonitoringConfigResponse',
    'MultiCloudClusterResponse',
    'OnPremClusterResponse',
    'ResourceManifestResponse',
    'ResourceOptionsResponse',
]

@pulumi.output_type
class ApplianceClusterResponse(dict):
    """
    ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_link: str):
        """
        ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
        :param str resource_link: Immutable. Self-link of the GCP resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
        """
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        """
        Immutable. Self-link of the GCP resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
        """
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class AuditConfigResponse(dict):
    """
    Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogConfigs":
            suggest = "audit_log_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_configs: Sequence['outputs.AuditLogConfigResponse'],
                 service: str):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param Sequence['AuditLogConfigResponse'] audit_log_configs: The configuration for logging of each type of permission.
        :param str service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Sequence['outputs.AuditLogConfigResponse']:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AuditLogConfigResponse(dict):
    """
    Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedMembers":
            suggest = "exempted_members"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exempted_members: Sequence[str],
                 log_type: str):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param Sequence[str] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param str log_type: The log type that this config enables.
        """
        pulumi.set(__self__, "exempted_members", exempted_members)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Sequence[str]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class AuthorityResponse(dict):
    """
    Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityProvider":
            suggest = "identity_provider"
        elif key == "oidcJwks":
            suggest = "oidc_jwks"
        elif key == "workloadIdentityPool":
            suggest = "workload_identity_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthorityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthorityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthorityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_provider: str,
                 issuer: str,
                 oidc_jwks: str,
                 workload_identity_pool: str):
        """
        Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        :param str identity_provider: An identity provider that reflects the `issuer` in the workload identity pool.
        :param str issuer: Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
        :param str oidc_jwks: Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
        :param str workload_identity_pool: The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
        """
        pulumi.set(__self__, "identity_provider", identity_provider)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "oidc_jwks", oidc_jwks)
        pulumi.set(__self__, "workload_identity_pool", workload_identity_pool)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> str:
        """
        An identity provider that reflects the `issuer` in the workload identity pool.
        """
        return pulumi.get(self, "identity_provider")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="oidcJwks")
    def oidc_jwks(self) -> str:
        """
        Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
        """
        return pulumi.get(self, "oidc_jwks")

    @property
    @pulumi.getter(name="workloadIdentityPool")
    def workload_identity_pool(self) -> str:
        """
        The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
        """
        return pulumi.get(self, "workload_identity_pool")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class EdgeClusterResponse(dict):
    """
    EdgeCluster contains information specific to Google Edge Clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_link: str):
        """
        EdgeCluster contains information specific to Google Edge Clusters.
        :param str resource_link: Immutable. Self-link of the GCP resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
        """
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        """
        Immutable. Self-link of the GCP resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
        """
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GkeClusterResponse(dict):
    """
    GkeCluster contains information specific to GKE clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMissing":
            suggest = "cluster_missing"
        elif key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GkeClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GkeClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GkeClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_missing: bool,
                 resource_link: str):
        """
        GkeCluster contains information specific to GKE clusters.
        :param bool cluster_missing: If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.
        :param str resource_link: Immutable. Self-link of the GCP resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
        """
        pulumi.set(__self__, "cluster_missing", cluster_missing)
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="clusterMissing")
    def cluster_missing(self) -> bool:
        """
        If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.
        """
        return pulumi.get(self, "cluster_missing")

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        """
        Immutable. Self-link of the GCP resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
        """
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class KubernetesMetadataResponse(dict):
    """
    KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubernetesApiServerVersion":
            suggest = "kubernetes_api_server_version"
        elif key == "memoryMb":
            suggest = "memory_mb"
        elif key == "nodeCount":
            suggest = "node_count"
        elif key == "nodeProviderId":
            suggest = "node_provider_id"
        elif key == "updateTime":
            suggest = "update_time"
        elif key == "vcpuCount":
            suggest = "vcpu_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kubernetes_api_server_version: str,
                 memory_mb: int,
                 node_count: int,
                 node_provider_id: str,
                 update_time: str,
                 vcpu_count: int):
        """
        KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
        :param str kubernetes_api_server_version: Kubernetes API server version string as reported by '/version'.
        :param int memory_mb: The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.
        :param int node_count: Node count as reported by Kubernetes nodes resources.
        :param str node_provider_id: Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.
        :param str update_time: The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.
        :param int vcpu_count: vCPU count as reported by Kubernetes nodes resources.
        """
        pulumi.set(__self__, "kubernetes_api_server_version", kubernetes_api_server_version)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "node_provider_id", node_provider_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vcpu_count", vcpu_count)

    @property
    @pulumi.getter(name="kubernetesApiServerVersion")
    def kubernetes_api_server_version(self) -> str:
        """
        Kubernetes API server version string as reported by '/version'.
        """
        return pulumi.get(self, "kubernetes_api_server_version")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> int:
        """
        The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Node count as reported by Kubernetes nodes resources.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeProviderId")
    def node_provider_id(self) -> str:
        """
        Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.
        """
        return pulumi.get(self, "node_provider_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vcpuCount")
    def vcpu_count(self) -> int:
        """
        vCPU count as reported by Kubernetes nodes resources.
        """
        return pulumi.get(self, "vcpu_count")


@pulumi.output_type
class KubernetesResourceResponse(dict):
    """
    KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectResources":
            suggest = "connect_resources"
        elif key == "membershipCrManifest":
            suggest = "membership_cr_manifest"
        elif key == "membershipResources":
            suggest = "membership_resources"
        elif key == "resourceOptions":
            suggest = "resource_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_resources: Sequence['outputs.ResourceManifestResponse'],
                 membership_cr_manifest: str,
                 membership_resources: Sequence['outputs.ResourceManifestResponse'],
                 resource_options: 'outputs.ResourceOptionsResponse'):
        """
        KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
        :param Sequence['ResourceManifestResponse'] connect_resources: The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
        :param str membership_cr_manifest: Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
        :param Sequence['ResourceManifestResponse'] membership_resources: Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
        :param 'ResourceOptionsResponse' resource_options: Optional. Options for Kubernetes resource generation.
        """
        pulumi.set(__self__, "connect_resources", connect_resources)
        pulumi.set(__self__, "membership_cr_manifest", membership_cr_manifest)
        pulumi.set(__self__, "membership_resources", membership_resources)
        pulumi.set(__self__, "resource_options", resource_options)

    @property
    @pulumi.getter(name="connectResources")
    def connect_resources(self) -> Sequence['outputs.ResourceManifestResponse']:
        """
        The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
        """
        return pulumi.get(self, "connect_resources")

    @property
    @pulumi.getter(name="membershipCrManifest")
    def membership_cr_manifest(self) -> str:
        """
        Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
        """
        return pulumi.get(self, "membership_cr_manifest")

    @property
    @pulumi.getter(name="membershipResources")
    def membership_resources(self) -> Sequence['outputs.ResourceManifestResponse']:
        """
        Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
        """
        return pulumi.get(self, "membership_resources")

    @property
    @pulumi.getter(name="resourceOptions")
    def resource_options(self) -> 'outputs.ResourceOptionsResponse':
        """
        Optional. Options for Kubernetes resource generation.
        """
        return pulumi.get(self, "resource_options")


@pulumi.output_type
class MembershipEndpointResponse(dict):
    """
    MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applianceCluster":
            suggest = "appliance_cluster"
        elif key == "edgeCluster":
            suggest = "edge_cluster"
        elif key == "gkeCluster":
            suggest = "gke_cluster"
        elif key == "kubernetesMetadata":
            suggest = "kubernetes_metadata"
        elif key == "kubernetesResource":
            suggest = "kubernetes_resource"
        elif key == "multiCloudCluster":
            suggest = "multi_cloud_cluster"
        elif key == "onPremCluster":
            suggest = "on_prem_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipEndpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipEndpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipEndpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 appliance_cluster: 'outputs.ApplianceClusterResponse',
                 edge_cluster: 'outputs.EdgeClusterResponse',
                 gke_cluster: 'outputs.GkeClusterResponse',
                 kubernetes_metadata: 'outputs.KubernetesMetadataResponse',
                 kubernetes_resource: 'outputs.KubernetesResourceResponse',
                 multi_cloud_cluster: 'outputs.MultiCloudClusterResponse',
                 on_prem_cluster: 'outputs.OnPremClusterResponse'):
        """
        MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
        :param 'ApplianceClusterResponse' appliance_cluster: Optional. Specific information for a GDC Edge Appliance cluster.
        :param 'EdgeClusterResponse' edge_cluster: Optional. Specific information for a Google Edge cluster.
        :param 'GkeClusterResponse' gke_cluster: Optional. Specific information for a GKE-on-GCP cluster.
        :param 'KubernetesMetadataResponse' kubernetes_metadata: Useful Kubernetes-specific metadata.
        :param 'KubernetesResourceResponse' kubernetes_resource: Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
        :param 'MultiCloudClusterResponse' multi_cloud_cluster: Optional. Specific information for a GKE Multi-Cloud cluster.
        :param 'OnPremClusterResponse' on_prem_cluster: Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
        """
        pulumi.set(__self__, "appliance_cluster", appliance_cluster)
        pulumi.set(__self__, "edge_cluster", edge_cluster)
        pulumi.set(__self__, "gke_cluster", gke_cluster)
        pulumi.set(__self__, "kubernetes_metadata", kubernetes_metadata)
        pulumi.set(__self__, "kubernetes_resource", kubernetes_resource)
        pulumi.set(__self__, "multi_cloud_cluster", multi_cloud_cluster)
        pulumi.set(__self__, "on_prem_cluster", on_prem_cluster)

    @property
    @pulumi.getter(name="applianceCluster")
    def appliance_cluster(self) -> 'outputs.ApplianceClusterResponse':
        """
        Optional. Specific information for a GDC Edge Appliance cluster.
        """
        return pulumi.get(self, "appliance_cluster")

    @property
    @pulumi.getter(name="edgeCluster")
    def edge_cluster(self) -> 'outputs.EdgeClusterResponse':
        """
        Optional. Specific information for a Google Edge cluster.
        """
        return pulumi.get(self, "edge_cluster")

    @property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> 'outputs.GkeClusterResponse':
        """
        Optional. Specific information for a GKE-on-GCP cluster.
        """
        return pulumi.get(self, "gke_cluster")

    @property
    @pulumi.getter(name="kubernetesMetadata")
    def kubernetes_metadata(self) -> 'outputs.KubernetesMetadataResponse':
        """
        Useful Kubernetes-specific metadata.
        """
        return pulumi.get(self, "kubernetes_metadata")

    @property
    @pulumi.getter(name="kubernetesResource")
    def kubernetes_resource(self) -> 'outputs.KubernetesResourceResponse':
        """
        Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
        """
        return pulumi.get(self, "kubernetes_resource")

    @property
    @pulumi.getter(name="multiCloudCluster")
    def multi_cloud_cluster(self) -> 'outputs.MultiCloudClusterResponse':
        """
        Optional. Specific information for a GKE Multi-Cloud cluster.
        """
        return pulumi.get(self, "multi_cloud_cluster")

    @property
    @pulumi.getter(name="onPremCluster")
    def on_prem_cluster(self) -> 'outputs.OnPremClusterResponse':
        """
        Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
        """
        return pulumi.get(self, "on_prem_cluster")


@pulumi.output_type
class MembershipStateResponse(dict):
    """
    State of the Membership resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: str,
                 description: str,
                 update_time: str):
        """
        State of the Membership resource.
        :param str code: The current state of the Membership resource.
        :param str description: This field is never set by the Hub Service.
        :param str update_time: This field is never set by the Hub Service.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The current state of the Membership resource.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        This field is never set by the Hub Service.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        This field is never set by the Hub Service.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class MonitoringConfigResponse(dict):
    """
    MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterHash":
            suggest = "cluster_hash"
        elif key == "kubernetesMetricsPrefix":
            suggest = "kubernetes_metrics_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster: str,
                 cluster_hash: str,
                 kubernetes_metrics_prefix: str,
                 location: str,
                 project: str):
        """
        MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
        :param str cluster: Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
        :param str cluster_hash: Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
        :param str kubernetes_metrics_prefix: Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
        :param str location: Optional. Location used to report Metrics
        :param str project: Optional. Project used to report Metrics
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "cluster_hash", cluster_hash)
        pulumi.set(__self__, "kubernetes_metrics_prefix", kubernetes_metrics_prefix)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="clusterHash")
    def cluster_hash(self) -> str:
        """
        Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
        """
        return pulumi.get(self, "cluster_hash")

    @property
    @pulumi.getter(name="kubernetesMetricsPrefix")
    def kubernetes_metrics_prefix(self) -> str:
        """
        Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
        """
        return pulumi.get(self, "kubernetes_metrics_prefix")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. Location used to report Metrics
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        Optional. Project used to report Metrics
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class MultiCloudClusterResponse(dict):
    """
    MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMissing":
            suggest = "cluster_missing"
        elif key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiCloudClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiCloudClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiCloudClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_missing: bool,
                 resource_link: str):
        """
        MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
        :param bool cluster_missing: If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.
        :param str resource_link: Immutable. Self-link of the GCP resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
        """
        pulumi.set(__self__, "cluster_missing", cluster_missing)
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="clusterMissing")
    def cluster_missing(self) -> bool:
        """
        If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.
        """
        return pulumi.get(self, "cluster_missing")

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        """
        Immutable. Self-link of the GCP resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
        """
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class OnPremClusterResponse(dict):
    """
    OnPremCluster contains information specific to GKE On-Prem clusters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminCluster":
            suggest = "admin_cluster"
        elif key == "clusterMissing":
            suggest = "cluster_missing"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OnPremClusterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OnPremClusterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OnPremClusterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_cluster: bool,
                 cluster_missing: bool,
                 cluster_type: str,
                 resource_link: str):
        """
        OnPremCluster contains information specific to GKE On-Prem clusters.
        :param bool admin_cluster: Immutable. Whether the cluster is an admin cluster.
        :param bool cluster_missing: If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.
        :param str cluster_type: Immutable. The on prem cluster's type.
        :param str resource_link: Immutable. Self-link of the GCP resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
        """
        pulumi.set(__self__, "admin_cluster", admin_cluster)
        pulumi.set(__self__, "cluster_missing", cluster_missing)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="adminCluster")
    def admin_cluster(self) -> bool:
        """
        Immutable. Whether the cluster is an admin cluster.
        """
        return pulumi.get(self, "admin_cluster")

    @property
    @pulumi.getter(name="clusterMissing")
    def cluster_missing(self) -> bool:
        """
        If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.
        """
        return pulumi.get(self, "cluster_missing")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Immutable. The on prem cluster's type.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        """
        Immutable. Self-link of the GCP resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
        """
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class ResourceManifestResponse(dict):
    """
    ResourceManifest represents a single Kubernetes resource to be applied to the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterScoped":
            suggest = "cluster_scoped"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceManifestResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceManifestResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceManifestResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_scoped: bool,
                 manifest: str):
        """
        ResourceManifest represents a single Kubernetes resource to be applied to the cluster.
        :param bool cluster_scoped: Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.
        :param str manifest: YAML manifest of the resource.
        """
        pulumi.set(__self__, "cluster_scoped", cluster_scoped)
        pulumi.set(__self__, "manifest", manifest)

    @property
    @pulumi.getter(name="clusterScoped")
    def cluster_scoped(self) -> bool:
        """
        Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.
        """
        return pulumi.get(self, "cluster_scoped")

    @property
    @pulumi.getter
    def manifest(self) -> str:
        """
        YAML manifest of the resource.
        """
        return pulumi.get(self, "manifest")


@pulumi.output_type
class ResourceOptionsResponse(dict):
    """
    ResourceOptions represent options for Kubernetes resource generation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectVersion":
            suggest = "connect_version"
        elif key == "k8sVersion":
            suggest = "k8s_version"
        elif key == "v1beta1Crd":
            suggest = "v1beta1_crd"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_version: str,
                 k8s_version: str,
                 v1beta1_crd: bool):
        """
        ResourceOptions represent options for Kubernetes resource generation.
        :param str connect_version: Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
        :param str k8s_version: Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
        :param bool v1beta1_crd: Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
        """
        pulumi.set(__self__, "connect_version", connect_version)
        pulumi.set(__self__, "k8s_version", k8s_version)
        pulumi.set(__self__, "v1beta1_crd", v1beta1_crd)

    @property
    @pulumi.getter(name="connectVersion")
    def connect_version(self) -> str:
        """
        Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
        """
        return pulumi.get(self, "connect_version")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> str:
        """
        Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter(name="v1beta1Crd")
    def v1beta1_crd(self) -> bool:
        """
        Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
        """
        return pulumi.get(self, "v1beta1_crd")


