# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMembershipRbacRoleBindingResult',
    'AwaitableGetMembershipRbacRoleBindingResult',
    'get_membership_rbac_role_binding',
    'get_membership_rbac_role_binding_output',
]

@pulumi.output_type
class GetMembershipRbacRoleBindingResult:
    def __init__(__self__, create_time=None, delete_time=None, group=None, labels=None, name=None, role=None, state=None, uid=None, update_time=None, user=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if role and not isinstance(role, dict):
            raise TypeError("Expected argument 'role' to be a dict")
        pulumi.set(__self__, "role", role)
        if state and not isinstance(state, dict):
            raise TypeError("Expected argument 'state' to be a dict")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        When the rbacrolebinding was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        When the rbacrolebinding was deleted.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        group is the group, as seen by the kubernetes cluster.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels for this RBACRolebinding.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> 'outputs.RoleResponse':
        """
        Role to bind to the principal
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def state(self) -> 'outputs.RBACRoleBindingLifecycleStateResponse':
        """
        State of the rbacrolebinding resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        When the rbacrolebinding was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
        """
        return pulumi.get(self, "user")


class AwaitableGetMembershipRbacRoleBindingResult(GetMembershipRbacRoleBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMembershipRbacRoleBindingResult(
            create_time=self.create_time,
            delete_time=self.delete_time,
            group=self.group,
            labels=self.labels,
            name=self.name,
            role=self.role,
            state=self.state,
            uid=self.uid,
            update_time=self.update_time,
            user=self.user)


def get_membership_rbac_role_binding(location: Optional[str] = None,
                                     membership_id: Optional[str] = None,
                                     project: Optional[str] = None,
                                     rbacrolebinding_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMembershipRbacRoleBindingResult:
    """
    Returns the details of a Membership RBACRoleBinding.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['membershipId'] = membership_id
    __args__['project'] = project
    __args__['rbacrolebindingId'] = rbacrolebinding_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:gkehub/v1alpha:getMembershipRbacRoleBinding', __args__, opts=opts, typ=GetMembershipRbacRoleBindingResult).value

    return AwaitableGetMembershipRbacRoleBindingResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        group=pulumi.get(__ret__, 'group'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        role=pulumi.get(__ret__, 'role'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        user=pulumi.get(__ret__, 'user'))


@_utilities.lift_output_func(get_membership_rbac_role_binding)
def get_membership_rbac_role_binding_output(location: Optional[pulumi.Input[str]] = None,
                                            membership_id: Optional[pulumi.Input[str]] = None,
                                            project: Optional[pulumi.Input[Optional[str]]] = None,
                                            rbacrolebinding_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMembershipRbacRoleBindingResult]:
    """
    Returns the details of a Membership RBACRoleBinding.
    """
    ...
