# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    def __init__(__self__, annotations=None, create_time=None, disabled=None, etag=None, github_config=None, github_enterprise_config=None, gitlab_config=None, installation_state=None, name=None, reconciling=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if disabled and not isinstance(disabled, bool):
            raise TypeError("Expected argument 'disabled' to be a bool")
        pulumi.set(__self__, "disabled", disabled)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if github_config and not isinstance(github_config, dict):
            raise TypeError("Expected argument 'github_config' to be a dict")
        pulumi.set(__self__, "github_config", github_config)
        if github_enterprise_config and not isinstance(github_enterprise_config, dict):
            raise TypeError("Expected argument 'github_enterprise_config' to be a dict")
        pulumi.set(__self__, "github_enterprise_config", github_enterprise_config)
        if gitlab_config and not isinstance(gitlab_config, dict):
            raise TypeError("Expected argument 'gitlab_config' to be a dict")
        pulumi.set(__self__, "gitlab_config", gitlab_config)
        if installation_state and not isinstance(installation_state, dict):
            raise TypeError("Expected argument 'installation_state' to be a dict")
        pulumi.set(__self__, "installation_state", installation_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Allows clients to store small amounts of arbitrary data.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Server assigned timestamp for when the connection was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="githubConfig")
    def github_config(self) -> 'outputs.GitHubConfigResponse':
        """
        Configuration for connections to github.com.
        """
        return pulumi.get(self, "github_config")

    @property
    @pulumi.getter(name="githubEnterpriseConfig")
    def github_enterprise_config(self) -> 'outputs.GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse':
        """
        Configuration for connections to an instance of GitHub Enterprise.
        """
        return pulumi.get(self, "github_enterprise_config")

    @property
    @pulumi.getter(name="gitlabConfig")
    def gitlab_config(self) -> 'outputs.GoogleDevtoolsCloudbuildV2GitLabConfigResponse':
        """
        Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
        """
        return pulumi.get(self, "gitlab_config")

    @property
    @pulumi.getter(name="installationState")
    def installation_state(self) -> 'outputs.InstallationStateResponse':
        """
        Installation state of the Connection.
        """
        return pulumi.get(self, "installation_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Set to true when the connection is being set up or updated in the background.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Server assigned timestamp for when the connection was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            annotations=self.annotations,
            create_time=self.create_time,
            disabled=self.disabled,
            etag=self.etag,
            github_config=self.github_config,
            github_enterprise_config=self.github_enterprise_config,
            gitlab_config=self.gitlab_config,
            installation_state=self.installation_state,
            name=self.name,
            reconciling=self.reconciling,
            update_time=self.update_time)


def get_connection(connection_id: Optional[str] = None,
                   location: Optional[str] = None,
                   project: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    Gets details of a single connection.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:cloudbuild/v2:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        create_time=pulumi.get(__ret__, 'create_time'),
        disabled=pulumi.get(__ret__, 'disabled'),
        etag=pulumi.get(__ret__, 'etag'),
        github_config=pulumi.get(__ret__, 'github_config'),
        github_enterprise_config=pulumi.get(__ret__, 'github_enterprise_config'),
        gitlab_config=pulumi.get(__ret__, 'gitlab_config'),
        installation_state=pulumi.get(__ret__, 'installation_state'),
        name=pulumi.get(__ret__, 'name'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_connection)
def get_connection_output(connection_id: Optional[pulumi.Input[str]] = None,
                          location: Optional[pulumi.Input[str]] = None,
                          project: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionResult]:
    """
    Gets details of a single connection.
    """
    ...
