# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ServiceLevelObjectiveArgs', 'ServiceLevelObjective']

@pulumi.input_type
class ServiceLevelObjectiveArgs:
    def __init__(__self__, *,
                 service_id: pulumi.Input[str],
                 v3_id: pulumi.Input[str],
                 v3_id1: pulumi.Input[str],
                 calendar_period: Optional[pulumi.Input['ServiceLevelObjectiveCalendarPeriod']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 goal: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rolling_period: Optional[pulumi.Input[str]] = None,
                 service_level_indicator: Optional[pulumi.Input['ServiceLevelIndicatorArgs']] = None,
                 service_level_objective_id: Optional[pulumi.Input[str]] = None,
                 user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ServiceLevelObjective resource.
        :param pulumi.Input['ServiceLevelObjectiveCalendarPeriod'] calendar_period: A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        :param pulumi.Input[str] display_name: Name used for UI elements listing this SLO.
        :param pulumi.Input[float] goal: The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
        :param pulumi.Input[str] name: Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        :param pulumi.Input[str] rolling_period: A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        :param pulumi.Input['ServiceLevelIndicatorArgs'] service_level_indicator: The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        :param pulumi.Input[str] service_level_objective_id: Optional. The ServiceLevelObjective id to use for this ServiceLevelObjective. If omitted, an id will be generated instead. Must match the pattern ^[a-zA-Z0-9-_:.]+$
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_labels: Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
        """
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "v3_id", v3_id)
        pulumi.set(__self__, "v3_id1", v3_id1)
        if calendar_period is not None:
            pulumi.set(__self__, "calendar_period", calendar_period)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if goal is not None:
            pulumi.set(__self__, "goal", goal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rolling_period is not None:
            pulumi.set(__self__, "rolling_period", rolling_period)
        if service_level_indicator is not None:
            pulumi.set(__self__, "service_level_indicator", service_level_indicator)
        if service_level_objective_id is not None:
            pulumi.set(__self__, "service_level_objective_id", service_level_objective_id)
        if user_labels is not None:
            pulumi.set(__self__, "user_labels", user_labels)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="v3Id")
    def v3_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v3_id")

    @v3_id.setter
    def v3_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "v3_id", value)

    @property
    @pulumi.getter(name="v3Id1")
    def v3_id1(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v3_id1")

    @v3_id1.setter
    def v3_id1(self, value: pulumi.Input[str]):
        pulumi.set(self, "v3_id1", value)

    @property
    @pulumi.getter(name="calendarPeriod")
    def calendar_period(self) -> Optional[pulumi.Input['ServiceLevelObjectiveCalendarPeriod']]:
        """
        A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        """
        return pulumi.get(self, "calendar_period")

    @calendar_period.setter
    def calendar_period(self, value: Optional[pulumi.Input['ServiceLevelObjectiveCalendarPeriod']]):
        pulumi.set(self, "calendar_period", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name used for UI elements listing this SLO.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def goal(self) -> Optional[pulumi.Input[float]]:
        """
        The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
        """
        return pulumi.get(self, "goal")

    @goal.setter
    def goal(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "goal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rollingPeriod")
    def rolling_period(self) -> Optional[pulumi.Input[str]]:
        """
        A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        """
        return pulumi.get(self, "rolling_period")

    @rolling_period.setter
    def rolling_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rolling_period", value)

    @property
    @pulumi.getter(name="serviceLevelIndicator")
    def service_level_indicator(self) -> Optional[pulumi.Input['ServiceLevelIndicatorArgs']]:
        """
        The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        """
        return pulumi.get(self, "service_level_indicator")

    @service_level_indicator.setter
    def service_level_indicator(self, value: Optional[pulumi.Input['ServiceLevelIndicatorArgs']]):
        pulumi.set(self, "service_level_indicator", value)

    @property
    @pulumi.getter(name="serviceLevelObjectiveId")
    def service_level_objective_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The ServiceLevelObjective id to use for this ServiceLevelObjective. If omitted, an id will be generated instead. Must match the pattern ^[a-zA-Z0-9-_:.]+$
        """
        return pulumi.get(self, "service_level_objective_id")

    @service_level_objective_id.setter
    def service_level_objective_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_level_objective_id", value)

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
        """
        return pulumi.get(self, "user_labels")

    @user_labels.setter
    def user_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_labels", value)


class ServiceLevelObjective(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 calendar_period: Optional[pulumi.Input['ServiceLevelObjectiveCalendarPeriod']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 goal: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rolling_period: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_level_indicator: Optional[pulumi.Input[pulumi.InputType['ServiceLevelIndicatorArgs']]] = None,
                 service_level_objective_id: Optional[pulumi.Input[str]] = None,
                 user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 v3_id: Optional[pulumi.Input[str]] = None,
                 v3_id1: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ServiceLevelObjective for the given Service.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['ServiceLevelObjectiveCalendarPeriod'] calendar_period: A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        :param pulumi.Input[str] display_name: Name used for UI elements listing this SLO.
        :param pulumi.Input[float] goal: The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
        :param pulumi.Input[str] name: Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        :param pulumi.Input[str] rolling_period: A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        :param pulumi.Input[pulumi.InputType['ServiceLevelIndicatorArgs']] service_level_indicator: The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        :param pulumi.Input[str] service_level_objective_id: Optional. The ServiceLevelObjective id to use for this ServiceLevelObjective. If omitted, an id will be generated instead. Must match the pattern ^[a-zA-Z0-9-_:.]+$
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_labels: Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceLevelObjectiveArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceLevelObjective for the given Service.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ServiceLevelObjectiveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceLevelObjectiveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 calendar_period: Optional[pulumi.Input['ServiceLevelObjectiveCalendarPeriod']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 goal: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rolling_period: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_level_indicator: Optional[pulumi.Input[pulumi.InputType['ServiceLevelIndicatorArgs']]] = None,
                 service_level_objective_id: Optional[pulumi.Input[str]] = None,
                 user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 v3_id: Optional[pulumi.Input[str]] = None,
                 v3_id1: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceLevelObjectiveArgs.__new__(ServiceLevelObjectiveArgs)

            __props__.__dict__["calendar_period"] = calendar_period
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["goal"] = goal
            __props__.__dict__["name"] = name
            __props__.__dict__["rolling_period"] = rolling_period
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["service_level_indicator"] = service_level_indicator
            __props__.__dict__["service_level_objective_id"] = service_level_objective_id
            __props__.__dict__["user_labels"] = user_labels
            if v3_id is None and not opts.urn:
                raise TypeError("Missing required property 'v3_id'")
            __props__.__dict__["v3_id"] = v3_id
            if v3_id1 is None and not opts.urn:
                raise TypeError("Missing required property 'v3_id1'")
            __props__.__dict__["v3_id1"] = v3_id1
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["serviceId", "v3Id", "v3Id1"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ServiceLevelObjective, __self__).__init__(
            'google-native:monitoring/v3:ServiceLevelObjective',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceLevelObjective':
        """
        Get an existing ServiceLevelObjective resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceLevelObjectiveArgs.__new__(ServiceLevelObjectiveArgs)

        __props__.__dict__["calendar_period"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["goal"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["rolling_period"] = None
        __props__.__dict__["service_id"] = None
        __props__.__dict__["service_level_indicator"] = None
        __props__.__dict__["service_level_objective_id"] = None
        __props__.__dict__["user_labels"] = None
        __props__.__dict__["v3_id"] = None
        __props__.__dict__["v3_id1"] = None
        return ServiceLevelObjective(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="calendarPeriod")
    def calendar_period(self) -> pulumi.Output[str]:
        """
        A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        """
        return pulumi.get(self, "calendar_period")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Name used for UI elements listing this SLO.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def goal(self) -> pulumi.Output[float]:
        """
        The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
        """
        return pulumi.get(self, "goal")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rollingPeriod")
    def rolling_period(self) -> pulumi.Output[str]:
        """
        A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        """
        return pulumi.get(self, "rolling_period")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceLevelIndicator")
    def service_level_indicator(self) -> pulumi.Output['outputs.ServiceLevelIndicatorResponse']:
        """
        The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        """
        return pulumi.get(self, "service_level_indicator")

    @property
    @pulumi.getter(name="serviceLevelObjectiveId")
    def service_level_objective_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. The ServiceLevelObjective id to use for this ServiceLevelObjective. If omitted, an id will be generated instead. Must match the pattern ^[a-zA-Z0-9-_:.]+$
        """
        return pulumi.get(self, "service_level_objective_id")

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
        """
        return pulumi.get(self, "user_labels")

    @property
    @pulumi.getter(name="v3Id")
    def v3_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "v3_id")

    @property
    @pulumi.getter(name="v3Id1")
    def v3_id1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "v3_id1")

