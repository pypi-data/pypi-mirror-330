# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetVersionResult',
    'AwaitableGetVersionResult',
    'get_version',
    'get_version_output',
]

@pulumi.output_type
class GetVersionResult:
    def __init__(__self__, cloud_logging_details=None, create_time=None, database_persistence_policy=None, description=None, error_catcher_configs=None, integration_parameters=None, integration_parameters_internal=None, last_modifier_email=None, lock_holder=None, name=None, origin=None, parent_template_id=None, run_as_service_account=None, snapshot_number=None, state=None, status=None, task_configs=None, task_configs_internal=None, teardown=None, trigger_configs=None, trigger_configs_internal=None, update_time=None, user_label=None):
        if cloud_logging_details and not isinstance(cloud_logging_details, dict):
            raise TypeError("Expected argument 'cloud_logging_details' to be a dict")
        pulumi.set(__self__, "cloud_logging_details", cloud_logging_details)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if database_persistence_policy and not isinstance(database_persistence_policy, str):
            raise TypeError("Expected argument 'database_persistence_policy' to be a str")
        pulumi.set(__self__, "database_persistence_policy", database_persistence_policy)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if error_catcher_configs and not isinstance(error_catcher_configs, list):
            raise TypeError("Expected argument 'error_catcher_configs' to be a list")
        pulumi.set(__self__, "error_catcher_configs", error_catcher_configs)
        if integration_parameters and not isinstance(integration_parameters, list):
            raise TypeError("Expected argument 'integration_parameters' to be a list")
        pulumi.set(__self__, "integration_parameters", integration_parameters)
        if integration_parameters_internal and not isinstance(integration_parameters_internal, dict):
            raise TypeError("Expected argument 'integration_parameters_internal' to be a dict")
        pulumi.set(__self__, "integration_parameters_internal", integration_parameters_internal)
        if last_modifier_email and not isinstance(last_modifier_email, str):
            raise TypeError("Expected argument 'last_modifier_email' to be a str")
        pulumi.set(__self__, "last_modifier_email", last_modifier_email)
        if lock_holder and not isinstance(lock_holder, str):
            raise TypeError("Expected argument 'lock_holder' to be a str")
        pulumi.set(__self__, "lock_holder", lock_holder)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if origin and not isinstance(origin, str):
            raise TypeError("Expected argument 'origin' to be a str")
        pulumi.set(__self__, "origin", origin)
        if parent_template_id and not isinstance(parent_template_id, str):
            raise TypeError("Expected argument 'parent_template_id' to be a str")
        pulumi.set(__self__, "parent_template_id", parent_template_id)
        if run_as_service_account and not isinstance(run_as_service_account, str):
            raise TypeError("Expected argument 'run_as_service_account' to be a str")
        pulumi.set(__self__, "run_as_service_account", run_as_service_account)
        if snapshot_number and not isinstance(snapshot_number, str):
            raise TypeError("Expected argument 'snapshot_number' to be a str")
        pulumi.set(__self__, "snapshot_number", snapshot_number)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_configs and not isinstance(task_configs, list):
            raise TypeError("Expected argument 'task_configs' to be a list")
        pulumi.set(__self__, "task_configs", task_configs)
        if task_configs_internal and not isinstance(task_configs_internal, list):
            raise TypeError("Expected argument 'task_configs_internal' to be a list")
        pulumi.set(__self__, "task_configs_internal", task_configs_internal)
        if teardown and not isinstance(teardown, dict):
            raise TypeError("Expected argument 'teardown' to be a dict")
        pulumi.set(__self__, "teardown", teardown)
        if trigger_configs and not isinstance(trigger_configs, list):
            raise TypeError("Expected argument 'trigger_configs' to be a list")
        pulumi.set(__self__, "trigger_configs", trigger_configs)
        if trigger_configs_internal and not isinstance(trigger_configs_internal, list):
            raise TypeError("Expected argument 'trigger_configs_internal' to be a list")
        pulumi.set(__self__, "trigger_configs_internal", trigger_configs_internal)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if user_label and not isinstance(user_label, str):
            raise TypeError("Expected argument 'user_label' to be a str")
        pulumi.set(__self__, "user_label", user_label)

    @property
    @pulumi.getter(name="cloudLoggingDetails")
    def cloud_logging_details(self) -> 'outputs.GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse':
        """
        Optional. Cloud Logging details for the integration version
        """
        return pulumi.get(self, "cloud_logging_details")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databasePersistencePolicy")
    def database_persistence_policy(self) -> str:
        """
        Optional. Flag to disable database persistence for execution data, including event execution info, execution export info, execution metadata index and execution param index.
        """
        return pulumi.get(self, "database_persistence_policy")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. The integration description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorCatcherConfigs")
    def error_catcher_configs(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse']:
        """
        Optional. Error Catch Task configuration for the integration. It's optional.
        """
        return pulumi.get(self, "error_catcher_configs")

    @property
    @pulumi.getter(name="integrationParameters")
    def integration_parameters(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationParameterResponse']:
        """
        Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.
        """
        return pulumi.get(self, "integration_parameters")

    @property
    @pulumi.getter(name="integrationParametersInternal")
    def integration_parameters_internal(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParametersResponse':
        """
        Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.
        """
        return pulumi.get(self, "integration_parameters_internal")

    @property
    @pulumi.getter(name="lastModifierEmail")
    def last_modifier_email(self) -> str:
        """
        Optional. The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "last_modifier_email")

    @property
    @pulumi.getter(name="lockHolder")
    def lock_holder(self) -> str:
        """
        Optional. The edit lock holder's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "lock_holder")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto-generated primary key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        Optional. The origin that indicates where this integration is coming from.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="parentTemplateId")
    def parent_template_id(self) -> str:
        """
        Optional. The id of the template which was used to create this integration_version.
        """
        return pulumi.get(self, "parent_template_id")

    @property
    @pulumi.getter(name="runAsServiceAccount")
    def run_as_service_account(self) -> str:
        """
        Optional. The run-as service account email, if set and auth config is not configured, that will be used to generate auth token to be used in Connector task, Rest caller task and Cloud function task.
        """
        return pulumi.get(self, "run_as_service_account")

    @property
    @pulumi.getter(name="snapshotNumber")
    def snapshot_number(self) -> str:
        """
        Optional. An increasing sequence that is set when a new snapshot is created. The last created snapshot can be identified by [workflow_name, org_id latest(snapshot_number)]. However, last created snapshot need not be same as the HEAD. So users should always use "HEAD" tag to identify the head.
        """
        return pulumi.get(self, "snapshot_number")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        User should not set it as an input.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Generated by eventbus. User should not set it as an input.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskConfigs")
    def task_configs(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaTaskConfigResponse']:
        """
        Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.
        """
        return pulumi.get(self, "task_configs")

    @property
    @pulumi.getter(name="taskConfigsInternal")
    def task_configs_internal(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse']:
        """
        Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.
        """
        return pulumi.get(self, "task_configs_internal")

    @property
    @pulumi.getter
    def teardown(self) -> 'outputs.EnterpriseCrmEventbusProtoTeardownResponse':
        """
        Optional. Contains a graph of tasks that will be executed before putting the event in a terminal state (SUCCEEDED/FAILED/FATAL), regardless of success or failure, similar to "finally" in code.
        """
        return pulumi.get(self, "teardown")

    @property
    @pulumi.getter(name="triggerConfigs")
    def trigger_configs(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaTriggerConfigResponse']:
        """
        Optional. Trigger configurations.
        """
        return pulumi.get(self, "trigger_configs")

    @property
    @pulumi.getter(name="triggerConfigsInternal")
    def trigger_configs_internal(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse']:
        """
        Optional. Trigger configurations.
        """
        return pulumi.get(self, "trigger_configs_internal")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> str:
        """
        Optional. A user-defined label that annotates an integration version. Typically, this is only set when the integration version is created.
        """
        return pulumi.get(self, "user_label")


class AwaitableGetVersionResult(GetVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVersionResult(
            cloud_logging_details=self.cloud_logging_details,
            create_time=self.create_time,
            database_persistence_policy=self.database_persistence_policy,
            description=self.description,
            error_catcher_configs=self.error_catcher_configs,
            integration_parameters=self.integration_parameters,
            integration_parameters_internal=self.integration_parameters_internal,
            last_modifier_email=self.last_modifier_email,
            lock_holder=self.lock_holder,
            name=self.name,
            origin=self.origin,
            parent_template_id=self.parent_template_id,
            run_as_service_account=self.run_as_service_account,
            snapshot_number=self.snapshot_number,
            state=self.state,
            status=self.status,
            task_configs=self.task_configs,
            task_configs_internal=self.task_configs_internal,
            teardown=self.teardown,
            trigger_configs=self.trigger_configs,
            trigger_configs_internal=self.trigger_configs_internal,
            update_time=self.update_time,
            user_label=self.user_label)


def get_version(integration_id: Optional[str] = None,
                location: Optional[str] = None,
                product_id: Optional[str] = None,
                project: Optional[str] = None,
                version_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVersionResult:
    """
    Get a integration in the specified project.
    """
    __args__ = dict()
    __args__['integrationId'] = integration_id
    __args__['location'] = location
    __args__['productId'] = product_id
    __args__['project'] = project
    __args__['versionId'] = version_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:integrations/v1alpha:getVersion', __args__, opts=opts, typ=GetVersionResult).value

    return AwaitableGetVersionResult(
        cloud_logging_details=pulumi.get(__ret__, 'cloud_logging_details'),
        create_time=pulumi.get(__ret__, 'create_time'),
        database_persistence_policy=pulumi.get(__ret__, 'database_persistence_policy'),
        description=pulumi.get(__ret__, 'description'),
        error_catcher_configs=pulumi.get(__ret__, 'error_catcher_configs'),
        integration_parameters=pulumi.get(__ret__, 'integration_parameters'),
        integration_parameters_internal=pulumi.get(__ret__, 'integration_parameters_internal'),
        last_modifier_email=pulumi.get(__ret__, 'last_modifier_email'),
        lock_holder=pulumi.get(__ret__, 'lock_holder'),
        name=pulumi.get(__ret__, 'name'),
        origin=pulumi.get(__ret__, 'origin'),
        parent_template_id=pulumi.get(__ret__, 'parent_template_id'),
        run_as_service_account=pulumi.get(__ret__, 'run_as_service_account'),
        snapshot_number=pulumi.get(__ret__, 'snapshot_number'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        task_configs=pulumi.get(__ret__, 'task_configs'),
        task_configs_internal=pulumi.get(__ret__, 'task_configs_internal'),
        teardown=pulumi.get(__ret__, 'teardown'),
        trigger_configs=pulumi.get(__ret__, 'trigger_configs'),
        trigger_configs_internal=pulumi.get(__ret__, 'trigger_configs_internal'),
        update_time=pulumi.get(__ret__, 'update_time'),
        user_label=pulumi.get(__ret__, 'user_label'))


@_utilities.lift_output_func(get_version)
def get_version_output(integration_id: Optional[pulumi.Input[str]] = None,
                       location: Optional[pulumi.Input[str]] = None,
                       product_id: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       version_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVersionResult]:
    """
    Get a integration in the specified project.
    """
    ...
