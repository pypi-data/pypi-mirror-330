# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetLineageEventResult',
    'AwaitableGetLineageEventResult',
    'get_lineage_event',
    'get_lineage_event_output',
]

@pulumi.output_type
class GetLineageEventResult:
    def __init__(__self__, end_time=None, links=None, name=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Optional. The end of the transformation which resulted in this lineage event. For streaming scenarios, it should be the end of the period from which the lineage is being reported.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GoogleCloudDatacatalogLineageV1EventLinkResponse']:
        """
        Optional. List of source-target pairs. Can't contain more than 100 tuples.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of the lineage event. Format: `projects/{project}/locations/{location}/processes/{process}/runs/{run}/lineageEvents/{lineage_event}`. Can be specified or auto-assigned. {lineage_event} must be not longer than 200 characters and only contain characters in a set: `a-zA-Z0-9_-:.`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The beginning of the transformation which resulted in this lineage event. For streaming scenarios, it should be the beginning of the period from which the lineage is being reported.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetLineageEventResult(GetLineageEventResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLineageEventResult(
            end_time=self.end_time,
            links=self.links,
            name=self.name,
            start_time=self.start_time)


def get_lineage_event(lineage_event_id: Optional[str] = None,
                      location: Optional[str] = None,
                      process_id: Optional[str] = None,
                      project: Optional[str] = None,
                      run_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLineageEventResult:
    """
    Gets details of a specified lineage event.
    """
    __args__ = dict()
    __args__['lineageEventId'] = lineage_event_id
    __args__['location'] = location
    __args__['processId'] = process_id
    __args__['project'] = project
    __args__['runId'] = run_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:datalineage/v1:getLineageEvent', __args__, opts=opts, typ=GetLineageEventResult).value

    return AwaitableGetLineageEventResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        links=pulumi.get(__ret__, 'links'),
        name=pulumi.get(__ret__, 'name'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_lineage_event)
def get_lineage_event_output(lineage_event_id: Optional[pulumi.Input[str]] = None,
                             location: Optional[pulumi.Input[str]] = None,
                             process_id: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             run_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLineageEventResult]:
    """
    Gets details of a specified lineage event.
    """
    ...
