# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudDatacatalogLineageV1EntityReferenceArgs',
    'GoogleCloudDatacatalogLineageV1EventLinkArgs',
    'GoogleCloudDatacatalogLineageV1OriginArgs',
]

@pulumi.input_type
class GoogleCloudDatacatalogLineageV1EntityReferenceArgs:
    def __init__(__self__, *,
                 fully_qualified_name: pulumi.Input[str]):
        """
        The soft reference to everything you can attach a lineage event to.
        :param pulumi.Input[str] fully_qualified_name: [Fully Qualified Name (FQN)](https://cloud.google.com/data-catalog/docs/fully-qualified-names) of the entity.
        """
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        """
        [Fully Qualified Name (FQN)](https://cloud.google.com/data-catalog/docs/fully-qualified-names) of the entity.
        """
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)


@pulumi.input_type
class GoogleCloudDatacatalogLineageV1EventLinkArgs:
    def __init__(__self__, *,
                 source: pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs'],
                 target: pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs']):
        """
        A lineage between source and target entities.
        :param pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs'] source: Reference to the source entity
        :param pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs'] target: Reference to the target entity
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs']:
        """
        Reference to the source entity
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs']:
        """
        Reference to the target entity
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['GoogleCloudDatacatalogLineageV1EntityReferenceArgs']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class GoogleCloudDatacatalogLineageV1OriginArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input['GoogleCloudDatacatalogLineageV1OriginSourceType']] = None):
        """
        Origin of a process.
        :param pulumi.Input[str] name: If the source_type isn't CUSTOM, the value of this field should be a GCP resource name of the system, which reports lineage. The project and location parts of the resource name must match the project and location of the lineage resource being created. Examples: - `{source_type: COMPOSER, name: "projects/foo/locations/us/environments/bar"}` - `{source_type: BIGQUERY, name: "projects/foo/locations/eu"}` - `{source_type: CUSTOM, name: "myCustomIntegration"}`
        :param pulumi.Input['GoogleCloudDatacatalogLineageV1OriginSourceType'] source_type: Type of the source. Use of a source_type other than `CUSTOM` for process creation or updating is highly discouraged, and may be restricted in the future without notice.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If the source_type isn't CUSTOM, the value of this field should be a GCP resource name of the system, which reports lineage. The project and location parts of the resource name must match the project and location of the lineage resource being created. Examples: - `{source_type: COMPOSER, name: "projects/foo/locations/us/environments/bar"}` - `{source_type: BIGQUERY, name: "projects/foo/locations/eu"}` - `{source_type: CUSTOM, name: "myCustomIntegration"}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogLineageV1OriginSourceType']]:
        """
        Type of the source. Use of a source_type other than `CUSTOM` for process creation or updating is highly discouraged, and may be restricted in the future without notice.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogLineageV1OriginSourceType']]):
        pulumi.set(self, "source_type", value)


