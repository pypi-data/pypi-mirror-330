# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = ['RuleInitArgs', 'Rule']

@pulumi.input_type
class RuleInitArgs:
    def __init__(__self__, *,
                 basic_profile: pulumi.Input['RuleBasicProfile'],
                 enabled: pulumi.Input[bool],
                 gateway_security_policy_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 session_matcher: pulumi.Input[str],
                 application_matcher: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_security_policy_rule_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 tls_inspection_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Rule resource.
        :param pulumi.Input['RuleBasicProfile'] basic_profile: Profile which tells what the primitive action should be.
        :param pulumi.Input[bool] enabled: Whether the rule is enforced.
        :param pulumi.Input[str] name: Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        :param pulumi.Input[int] priority: Priority of the rule. Lower number corresponds to higher precedence.
        :param pulumi.Input[str] session_matcher: CEL expression for matching on session criteria.
        :param pulumi.Input[str] application_matcher: Optional. CEL expression for matching on L7/application level criteria.
        :param pulumi.Input[str] description: Optional. Free-text description of the resource.
        :param pulumi.Input[str] gateway_security_policy_rule_id: The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
        :param pulumi.Input[bool] tls_inspection_enabled: Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
        """
        pulumi.set(__self__, "basic_profile", basic_profile)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "gateway_security_policy_id", gateway_security_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "session_matcher", session_matcher)
        if application_matcher is not None:
            pulumi.set(__self__, "application_matcher", application_matcher)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_security_policy_rule_id is not None:
            pulumi.set(__self__, "gateway_security_policy_rule_id", gateway_security_policy_rule_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if tls_inspection_enabled is not None:
            pulumi.set(__self__, "tls_inspection_enabled", tls_inspection_enabled)

    @property
    @pulumi.getter(name="basicProfile")
    def basic_profile(self) -> pulumi.Input['RuleBasicProfile']:
        """
        Profile which tells what the primitive action should be.
        """
        return pulumi.get(self, "basic_profile")

    @basic_profile.setter
    def basic_profile(self, value: pulumi.Input['RuleBasicProfile']):
        pulumi.set(self, "basic_profile", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the rule is enforced.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="gatewaySecurityPolicyId")
    def gateway_security_policy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway_security_policy_id")

    @gateway_security_policy_id.setter
    def gateway_security_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_security_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Priority of the rule. Lower number corresponds to higher precedence.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="sessionMatcher")
    def session_matcher(self) -> pulumi.Input[str]:
        """
        CEL expression for matching on session criteria.
        """
        return pulumi.get(self, "session_matcher")

    @session_matcher.setter
    def session_matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "session_matcher", value)

    @property
    @pulumi.getter(name="applicationMatcher")
    def application_matcher(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. CEL expression for matching on L7/application level criteria.
        """
        return pulumi.get(self, "application_matcher")

    @application_matcher.setter
    def application_matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_matcher", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Free-text description of the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewaySecurityPolicyRuleId")
    def gateway_security_policy_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
        """
        return pulumi.get(self, "gateway_security_policy_rule_id")

    @gateway_security_policy_rule_id.setter
    def gateway_security_policy_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_security_policy_rule_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="tlsInspectionEnabled")
    def tls_inspection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
        """
        return pulumi.get(self, "tls_inspection_enabled")

    @tls_inspection_enabled.setter
    def tls_inspection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_inspection_enabled", value)


class Rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_matcher: Optional[pulumi.Input[str]] = None,
                 basic_profile: Optional[pulumi.Input['RuleBasicProfile']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 gateway_security_policy_id: Optional[pulumi.Input[str]] = None,
                 gateway_security_policy_rule_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 session_matcher: Optional[pulumi.Input[str]] = None,
                 tls_inspection_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Creates a new GatewaySecurityPolicy in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_matcher: Optional. CEL expression for matching on L7/application level criteria.
        :param pulumi.Input['RuleBasicProfile'] basic_profile: Profile which tells what the primitive action should be.
        :param pulumi.Input[str] description: Optional. Free-text description of the resource.
        :param pulumi.Input[bool] enabled: Whether the rule is enforced.
        :param pulumi.Input[str] gateway_security_policy_rule_id: The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
        :param pulumi.Input[str] name: Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        :param pulumi.Input[int] priority: Priority of the rule. Lower number corresponds to higher precedence.
        :param pulumi.Input[str] session_matcher: CEL expression for matching on session criteria.
        :param pulumi.Input[bool] tls_inspection_enabled: Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new GatewaySecurityPolicy in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param RuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_matcher: Optional[pulumi.Input[str]] = None,
                 basic_profile: Optional[pulumi.Input['RuleBasicProfile']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 gateway_security_policy_id: Optional[pulumi.Input[str]] = None,
                 gateway_security_policy_rule_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 session_matcher: Optional[pulumi.Input[str]] = None,
                 tls_inspection_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleInitArgs.__new__(RuleInitArgs)

            __props__.__dict__["application_matcher"] = application_matcher
            if basic_profile is None and not opts.urn:
                raise TypeError("Missing required property 'basic_profile'")
            __props__.__dict__["basic_profile"] = basic_profile
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if gateway_security_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_security_policy_id'")
            __props__.__dict__["gateway_security_policy_id"] = gateway_security_policy_id
            __props__.__dict__["gateway_security_policy_rule_id"] = gateway_security_policy_rule_id
            __props__.__dict__["location"] = location
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            __props__.__dict__["project"] = project
            if session_matcher is None and not opts.urn:
                raise TypeError("Missing required property 'session_matcher'")
            __props__.__dict__["session_matcher"] = session_matcher
            __props__.__dict__["tls_inspection_enabled"] = tls_inspection_enabled
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["gatewaySecurityPolicyId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Rule, __self__).__init__(
            'google-native:networksecurity/v1:Rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Rule':
        """
        Get an existing Rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RuleInitArgs.__new__(RuleInitArgs)

        __props__.__dict__["application_matcher"] = None
        __props__.__dict__["basic_profile"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["gateway_security_policy_id"] = None
        __props__.__dict__["gateway_security_policy_rule_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["session_matcher"] = None
        __props__.__dict__["tls_inspection_enabled"] = None
        __props__.__dict__["update_time"] = None
        return Rule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationMatcher")
    def application_matcher(self) -> pulumi.Output[str]:
        """
        Optional. CEL expression for matching on L7/application level criteria.
        """
        return pulumi.get(self, "application_matcher")

    @property
    @pulumi.getter(name="basicProfile")
    def basic_profile(self) -> pulumi.Output[str]:
        """
        Profile which tells what the primitive action should be.
        """
        return pulumi.get(self, "basic_profile")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when the rule was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional. Free-text description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the rule is enforced.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="gatewaySecurityPolicyId")
    def gateway_security_policy_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gateway_security_policy_id")

    @property
    @pulumi.getter(name="gatewaySecurityPolicyRuleId")
    def gateway_security_policy_rule_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
        """
        return pulumi.get(self, "gateway_security_policy_rule_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority of the rule. Lower number corresponds to higher precedence.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="sessionMatcher")
    def session_matcher(self) -> pulumi.Output[str]:
        """
        CEL expression for matching on session criteria.
        """
        return pulumi.get(self, "session_matcher")

    @property
    @pulumi.getter(name="tlsInspectionEnabled")
    def tls_inspection_enabled(self) -> pulumi.Output[bool]:
        """
        Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
        """
        return pulumi.get(self, "tls_inspection_enabled")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time when the rule was updated.
        """
        return pulumi.get(self, "update_time")

