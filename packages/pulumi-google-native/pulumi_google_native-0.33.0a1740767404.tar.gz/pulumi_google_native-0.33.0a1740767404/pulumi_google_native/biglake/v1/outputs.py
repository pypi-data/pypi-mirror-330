# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'HiveDatabaseOptionsResponse',
    'HiveTableOptionsResponse',
    'SerDeInfoResponse',
    'StorageDescriptorResponse',
]

@pulumi.output_type
class HiveDatabaseOptionsResponse(dict):
    """
    Options of a Hive database.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationUri":
            suggest = "location_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HiveDatabaseOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HiveDatabaseOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HiveDatabaseOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location_uri: str,
                 parameters: Mapping[str, str]):
        """
        Options of a Hive database.
        :param str location_uri: Cloud Storage folder URI where the database data is stored, starting with "gs://".
        :param Mapping[str, str] parameters: Stores user supplied Hive database parameters.
        """
        pulumi.set(__self__, "location_uri", location_uri)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="locationUri")
    def location_uri(self) -> str:
        """
        Cloud Storage folder URI where the database data is stored, starting with "gs://".
        """
        return pulumi.get(self, "location_uri")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        """
        Stores user supplied Hive database parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class HiveTableOptionsResponse(dict):
    """
    Options of a Hive table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageDescriptor":
            suggest = "storage_descriptor"
        elif key == "tableType":
            suggest = "table_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HiveTableOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HiveTableOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HiveTableOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Mapping[str, str],
                 storage_descriptor: 'outputs.StorageDescriptorResponse',
                 table_type: str):
        """
        Options of a Hive table.
        :param Mapping[str, str] parameters: Stores user supplied Hive table parameters.
        :param 'StorageDescriptorResponse' storage_descriptor: Stores physical storage information of the data.
        :param str table_type: Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "storage_descriptor", storage_descriptor)
        pulumi.set(__self__, "table_type", table_type)

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        """
        Stores user supplied Hive table parameters.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="storageDescriptor")
    def storage_descriptor(self) -> 'outputs.StorageDescriptorResponse':
        """
        Stores physical storage information of the data.
        """
        return pulumi.get(self, "storage_descriptor")

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> str:
        """
        Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.
        """
        return pulumi.get(self, "table_type")


@pulumi.output_type
class SerDeInfoResponse(dict):
    """
    Serializer and deserializer information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serializationLib":
            suggest = "serialization_lib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SerDeInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SerDeInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SerDeInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 serialization_lib: str):
        """
        Serializer and deserializer information.
        :param str serialization_lib: The fully qualified Java class name of the serialization library.
        """
        pulumi.set(__self__, "serialization_lib", serialization_lib)

    @property
    @pulumi.getter(name="serializationLib")
    def serialization_lib(self) -> str:
        """
        The fully qualified Java class name of the serialization library.
        """
        return pulumi.get(self, "serialization_lib")


@pulumi.output_type
class StorageDescriptorResponse(dict):
    """
    Stores physical storage information of the data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputFormat":
            suggest = "input_format"
        elif key == "locationUri":
            suggest = "location_uri"
        elif key == "outputFormat":
            suggest = "output_format"
        elif key == "serdeInfo":
            suggest = "serde_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageDescriptorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageDescriptorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageDescriptorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_format: str,
                 location_uri: str,
                 output_format: str,
                 serde_info: 'outputs.SerDeInfoResponse'):
        """
        Stores physical storage information of the data.
        :param str input_format: The fully qualified Java class name of the input format.
        :param str location_uri: Cloud Storage folder URI where the table data is stored, starting with "gs://".
        :param str output_format: The fully qualified Java class name of the output format.
        :param 'SerDeInfoResponse' serde_info: Serializer and deserializer information.
        """
        pulumi.set(__self__, "input_format", input_format)
        pulumi.set(__self__, "location_uri", location_uri)
        pulumi.set(__self__, "output_format", output_format)
        pulumi.set(__self__, "serde_info", serde_info)

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> str:
        """
        The fully qualified Java class name of the input format.
        """
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="locationUri")
    def location_uri(self) -> str:
        """
        Cloud Storage folder URI where the table data is stored, starting with "gs://".
        """
        return pulumi.get(self, "location_uri")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> str:
        """
        The fully qualified Java class name of the output format.
        """
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter(name="serdeInfo")
    def serde_info(self) -> 'outputs.SerDeInfoResponse':
        """
        Serializer and deserializer information.
        """
        return pulumi.get(self, "serde_info")


