# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ConversationArgs', 'Conversation']

@pulumi.input_type
class ConversationArgs:
    def __init__(__self__, *,
                 collection_id: pulumi.Input[str],
                 data_store_id: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input['ConversationState']] = None,
                 user_pseudo_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Conversation resource.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]] messages: Conversation messages.
        :param pulumi.Input[str] name: Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        :param pulumi.Input['ConversationState'] state: The state of the Conversation.
        :param pulumi.Input[str] user_pseudo_id: A unique identifier for tracking users.
        """
        pulumi.set(__self__, "collection_id", collection_id)
        pulumi.set(__self__, "data_store_id", data_store_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if user_pseudo_id is not None:
            pulumi.set(__self__, "user_pseudo_id", user_pseudo_id)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection_id", value)

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_store_id")

    @data_store_id.setter
    def data_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]]:
        """
        Conversation messages.
        """
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['ConversationState']]:
        """
        The state of the Conversation.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['ConversationState']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="userPseudoId")
    def user_pseudo_id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for tracking users.
        """
        return pulumi.get(self, "user_pseudo_id")

    @user_pseudo_id.setter
    def user_pseudo_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_pseudo_id", value)


class Conversation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 data_store_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input['ConversationState']] = None,
                 user_pseudo_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]] messages: Conversation messages.
        :param pulumi.Input[str] name: Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        :param pulumi.Input['ConversationState'] state: The state of the Conversation.
        :param pulumi.Input[str] user_pseudo_id: A unique identifier for tracking users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConversationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ConversationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConversationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 data_store_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDiscoveryengineV1betaConversationMessageArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input['ConversationState']] = None,
                 user_pseudo_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConversationArgs.__new__(ConversationArgs)

            if collection_id is None and not opts.urn:
                raise TypeError("Missing required property 'collection_id'")
            __props__.__dict__["collection_id"] = collection_id
            if data_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_store_id'")
            __props__.__dict__["data_store_id"] = data_store_id
            __props__.__dict__["location"] = location
            __props__.__dict__["messages"] = messages
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["state"] = state
            __props__.__dict__["user_pseudo_id"] = user_pseudo_id
            __props__.__dict__["end_time"] = None
            __props__.__dict__["start_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["collectionId", "dataStoreId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Conversation, __self__).__init__(
            'google-native:discoveryengine/v1beta:Conversation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Conversation':
        """
        Get an existing Conversation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ConversationArgs.__new__(ConversationArgs)

        __props__.__dict__["collection_id"] = None
        __props__.__dict__["data_store_id"] = None
        __props__.__dict__["end_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["messages"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["start_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["user_pseudo_id"] = None
        return Conversation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collection_id")

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "data_store_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        The time the conversation finished.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Output[Sequence['outputs.GoogleCloudDiscoveryengineV1betaConversationMessageResponse']]:
        """
        Conversation messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        The time the conversation started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the Conversation.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userPseudoId")
    def user_pseudo_id(self) -> pulumi.Output[str]:
        """
        A unique identifier for tracking users.
        """
        return pulumi.get(self, "user_pseudo_id")

