# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GoogleCloudDiscoveryengineV1betaConversationContextResponse',
    'GoogleCloudDiscoveryengineV1betaConversationMessageResponse',
    'GoogleCloudDiscoveryengineV1betaDocumentContentResponse',
    'GoogleCloudDiscoveryengineV1betaReplyReferenceResponse',
    'GoogleCloudDiscoveryengineV1betaReplyResponse',
    'GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse',
    'GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesResponse',
    'GoogleCloudDiscoveryengineV1betaTextInputResponse',
]

@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaConversationContextResponse(dict):
    """
    Defines context of the conversation
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDocument":
            suggest = "active_document"
        elif key == "contextDocuments":
            suggest = "context_documents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDiscoveryengineV1betaConversationContextResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDiscoveryengineV1betaConversationContextResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDiscoveryengineV1betaConversationContextResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_document: str,
                 context_documents: Sequence[str]):
        """
        Defines context of the conversation
        :param str active_document: The current active document the user opened. It contains the document resource reference.
        :param Sequence[str] context_documents: The current list of documents the user is seeing. It contains the document resource references.
        """
        pulumi.set(__self__, "active_document", active_document)
        pulumi.set(__self__, "context_documents", context_documents)

    @property
    @pulumi.getter(name="activeDocument")
    def active_document(self) -> str:
        """
        The current active document the user opened. It contains the document resource reference.
        """
        return pulumi.get(self, "active_document")

    @property
    @pulumi.getter(name="contextDocuments")
    def context_documents(self) -> Sequence[str]:
        """
        The current list of documents the user is seeing. It contains the document resource references.
        """
        return pulumi.get(self, "context_documents")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaConversationMessageResponse(dict):
    """
    Defines a conversation message.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "userInput":
            suggest = "user_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDiscoveryengineV1betaConversationMessageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDiscoveryengineV1betaConversationMessageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDiscoveryengineV1betaConversationMessageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: str,
                 reply: 'outputs.GoogleCloudDiscoveryengineV1betaReplyResponse',
                 user_input: 'outputs.GoogleCloudDiscoveryengineV1betaTextInputResponse'):
        """
        Defines a conversation message.
        :param str create_time: Message creation timestamp.
        :param 'GoogleCloudDiscoveryengineV1betaReplyResponse' reply: Search reply.
        :param 'GoogleCloudDiscoveryengineV1betaTextInputResponse' user_input: User text input.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "reply", reply)
        pulumi.set(__self__, "user_input", user_input)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Message creation timestamp.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def reply(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaReplyResponse':
        """
        Search reply.
        """
        return pulumi.get(self, "reply")

    @property
    @pulumi.getter(name="userInput")
    def user_input(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaTextInputResponse':
        """
        User text input.
        """
        return pulumi.get(self, "user_input")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaDocumentContentResponse(dict):
    """
    Unstructured data linked to this document.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mimeType":
            suggest = "mime_type"
        elif key == "rawBytes":
            suggest = "raw_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDiscoveryengineV1betaDocumentContentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDiscoveryengineV1betaDocumentContentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDiscoveryengineV1betaDocumentContentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mime_type: str,
                 raw_bytes: str,
                 uri: str):
        """
        Unstructured data linked to this document.
        :param str mime_type: The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        :param str raw_bytes: The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        :param str uri: The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        pulumi.set(__self__, "mime_type", mime_type)
        pulumi.set(__self__, "raw_bytes", raw_bytes)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> str:
        """
        The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        """
        return pulumi.get(self, "mime_type")

    @property
    @pulumi.getter(name="rawBytes")
    def raw_bytes(self) -> str:
        """
        The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        """
        return pulumi.get(self, "raw_bytes")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaReplyReferenceResponse(dict):
    """
    Defines reference in reply.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anchorText":
            suggest = "anchor_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDiscoveryengineV1betaReplyReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDiscoveryengineV1betaReplyReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDiscoveryengineV1betaReplyReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 anchor_text: str,
                 end: int,
                 start: int,
                 uri: str):
        """
        Defines reference in reply.
        :param str anchor_text: Anchor text.
        :param int end: Anchor text end index.
        :param int start: Anchor text start index.
        :param str uri: URI link reference.
        """
        pulumi.set(__self__, "anchor_text", anchor_text)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="anchorText")
    def anchor_text(self) -> str:
        """
        Anchor text.
        """
        return pulumi.get(self, "anchor_text")

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        Anchor text end index.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        Anchor text start index.
        """
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI link reference.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaReplyResponse(dict):
    """
    Defines a reply message to user.
    """
    def __init__(__self__, *,
                 references: Sequence['outputs.GoogleCloudDiscoveryengineV1betaReplyReferenceResponse'],
                 reply: str,
                 summary: 'outputs.GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse'):
        """
        Defines a reply message to user.
        :param Sequence['GoogleCloudDiscoveryengineV1betaReplyReferenceResponse'] references: References in the reply.
        :param str reply: DEPRECATED: use `summary` instead. Text reply.
        :param 'GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse' summary: Summary based on search results.
        """
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "reply", reply)
        pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GoogleCloudDiscoveryengineV1betaReplyReferenceResponse']:
        """
        References in the reply.
        """
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    @_utilities.deprecated("""DEPRECATED: use `summary` instead. Text reply.""")
    def reply(self) -> str:
        """
        DEPRECATED: use `summary` instead. Text reply.
        """
        return pulumi.get(self, "reply")

    @property
    @pulumi.getter
    def summary(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse':
        """
        Summary based on search results.
        """
        return pulumi.get(self, "summary")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse(dict):
    """
    Summary of the top N search result specified by the summary spec.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "safetyAttributes":
            suggest = "safety_attributes"
        elif key == "summarySkippedReasons":
            suggest = "summary_skipped_reasons"
        elif key == "summaryText":
            suggest = "summary_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDiscoveryengineV1betaSearchResponseSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 safety_attributes: 'outputs.GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesResponse',
                 summary_skipped_reasons: Sequence[str],
                 summary_text: str):
        """
        Summary of the top N search result specified by the summary spec.
        :param 'GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesResponse' safety_attributes: A collection of Safety Attribute categories and their associated confidence scores.
        :param Sequence[str] summary_skipped_reasons: Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        :param str summary_text: The summary content.
        """
        pulumi.set(__self__, "safety_attributes", safety_attributes)
        pulumi.set(__self__, "summary_skipped_reasons", summary_skipped_reasons)
        pulumi.set(__self__, "summary_text", summary_text)

    @property
    @pulumi.getter(name="safetyAttributes")
    def safety_attributes(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesResponse':
        """
        A collection of Safety Attribute categories and their associated confidence scores.
        """
        return pulumi.get(self, "safety_attributes")

    @property
    @pulumi.getter(name="summarySkippedReasons")
    def summary_skipped_reasons(self) -> Sequence[str]:
        """
        Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        """
        return pulumi.get(self, "summary_skipped_reasons")

    @property
    @pulumi.getter(name="summaryText")
    def summary_text(self) -> str:
        """
        The summary content.
        """
        return pulumi.get(self, "summary_text")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesResponse(dict):
    """
    Safety Attribute categories and their associated confidence scores.
    """
    def __init__(__self__, *,
                 categories: Sequence[str],
                 scores: Sequence[float]):
        """
        Safety Attribute categories and their associated confidence scores.
        :param Sequence[str] categories: The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        :param Sequence[float] scores: The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "scores", scores)

    @property
    @pulumi.getter
    def categories(self) -> Sequence[str]:
        """
        The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def scores(self) -> Sequence[float]:
        """
        The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        return pulumi.get(self, "scores")


@pulumi.output_type
class GoogleCloudDiscoveryengineV1betaTextInputResponse(dict):
    """
    Defines text input.
    """
    def __init__(__self__, *,
                 context: 'outputs.GoogleCloudDiscoveryengineV1betaConversationContextResponse',
                 input: str):
        """
        Defines text input.
        :param 'GoogleCloudDiscoveryengineV1betaConversationContextResponse' context: Conversation context of the input.
        :param str input: Text input.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def context(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaConversationContextResponse':
        """
        Conversation context of the input.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter
    def input(self) -> str:
        """
        Text input.
        """
        return pulumi.get(self, "input")


