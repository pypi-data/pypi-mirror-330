# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEngineResult',
    'AwaitableGetEngineResult',
    'get_engine',
    'get_engine_output',
]

@pulumi.output_type
class GetEngineResult:
    def __init__(__self__, chat_engine_config=None, chat_engine_metadata=None, common_config=None, create_time=None, data_store_ids=None, display_name=None, industry_vertical=None, media_recommendation_engine_config=None, name=None, recommendation_metadata=None, search_engine_config=None, similar_documents_config=None, solution_type=None, update_time=None):
        if chat_engine_config and not isinstance(chat_engine_config, dict):
            raise TypeError("Expected argument 'chat_engine_config' to be a dict")
        pulumi.set(__self__, "chat_engine_config", chat_engine_config)
        if chat_engine_metadata and not isinstance(chat_engine_metadata, dict):
            raise TypeError("Expected argument 'chat_engine_metadata' to be a dict")
        pulumi.set(__self__, "chat_engine_metadata", chat_engine_metadata)
        if common_config and not isinstance(common_config, dict):
            raise TypeError("Expected argument 'common_config' to be a dict")
        pulumi.set(__self__, "common_config", common_config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if data_store_ids and not isinstance(data_store_ids, list):
            raise TypeError("Expected argument 'data_store_ids' to be a list")
        pulumi.set(__self__, "data_store_ids", data_store_ids)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if industry_vertical and not isinstance(industry_vertical, str):
            raise TypeError("Expected argument 'industry_vertical' to be a str")
        pulumi.set(__self__, "industry_vertical", industry_vertical)
        if media_recommendation_engine_config and not isinstance(media_recommendation_engine_config, dict):
            raise TypeError("Expected argument 'media_recommendation_engine_config' to be a dict")
        pulumi.set(__self__, "media_recommendation_engine_config", media_recommendation_engine_config)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if recommendation_metadata and not isinstance(recommendation_metadata, dict):
            raise TypeError("Expected argument 'recommendation_metadata' to be a dict")
        pulumi.set(__self__, "recommendation_metadata", recommendation_metadata)
        if search_engine_config and not isinstance(search_engine_config, dict):
            raise TypeError("Expected argument 'search_engine_config' to be a dict")
        pulumi.set(__self__, "search_engine_config", search_engine_config)
        if similar_documents_config and not isinstance(similar_documents_config, dict):
            raise TypeError("Expected argument 'similar_documents_config' to be a dict")
        pulumi.set(__self__, "similar_documents_config", similar_documents_config)
        if solution_type and not isinstance(solution_type, str):
            raise TypeError("Expected argument 'solution_type' to be a str")
        pulumi.set(__self__, "solution_type", solution_type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="chatEngineConfig")
    def chat_engine_config(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponse':
        """
        Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
        """
        return pulumi.get(self, "chat_engine_config")

    @property
    @pulumi.getter(name="chatEngineMetadata")
    def chat_engine_metadata(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponse':
        """
        Additional information of the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
        """
        return pulumi.get(self, "chat_engine_metadata")

    @property
    @pulumi.getter(name="commonConfig")
    def common_config(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponse':
        """
        Common config spec that specifies the metadata of the engine.
        """
        return pulumi.get(self, "common_config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp the Recommendation Engine was created at.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataStoreIds")
    def data_store_ids(self) -> Sequence[str]:
        """
        The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
        """
        return pulumi.get(self, "data_store_ids")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="industryVertical")
    def industry_vertical(self) -> str:
        """
        The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
        """
        return pulumi.get(self, "industry_vertical")

    @property
    @pulumi.getter(name="mediaRecommendationEngineConfig")
    def media_recommendation_engine_config(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponse':
        """
        Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
        """
        return pulumi.get(self, "media_recommendation_engine_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationMetadata")
    def recommendation_metadata(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponse':
        """
        Additional information of a recommendation engine. Only applicable if solution_type is SOLUTION_TYPE_RECOMMENDATION.
        """
        return pulumi.get(self, "recommendation_metadata")

    @property
    @pulumi.getter(name="searchEngineConfig")
    def search_engine_config(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponse':
        """
        Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
        """
        return pulumi.get(self, "search_engine_config")

    @property
    @pulumi.getter(name="similarDocumentsConfig")
    def similar_documents_config(self) -> 'outputs.GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponse':
        """
        Additional config specs for a `similar-items` engine.
        """
        return pulumi.get(self, "similar_documents_config")

    @property
    @pulumi.getter(name="solutionType")
    def solution_type(self) -> str:
        """
        The solutions of the engine.
        """
        return pulumi.get(self, "solution_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp the Recommendation Engine was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetEngineResult(GetEngineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEngineResult(
            chat_engine_config=self.chat_engine_config,
            chat_engine_metadata=self.chat_engine_metadata,
            common_config=self.common_config,
            create_time=self.create_time,
            data_store_ids=self.data_store_ids,
            display_name=self.display_name,
            industry_vertical=self.industry_vertical,
            media_recommendation_engine_config=self.media_recommendation_engine_config,
            name=self.name,
            recommendation_metadata=self.recommendation_metadata,
            search_engine_config=self.search_engine_config,
            similar_documents_config=self.similar_documents_config,
            solution_type=self.solution_type,
            update_time=self.update_time)


def get_engine(collection_id: Optional[str] = None,
               engine_id: Optional[str] = None,
               location: Optional[str] = None,
               project: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEngineResult:
    """
    Gets a Engine.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['engineId'] = engine_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:discoveryengine/v1alpha:getEngine', __args__, opts=opts, typ=GetEngineResult).value

    return AwaitableGetEngineResult(
        chat_engine_config=pulumi.get(__ret__, 'chat_engine_config'),
        chat_engine_metadata=pulumi.get(__ret__, 'chat_engine_metadata'),
        common_config=pulumi.get(__ret__, 'common_config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        data_store_ids=pulumi.get(__ret__, 'data_store_ids'),
        display_name=pulumi.get(__ret__, 'display_name'),
        industry_vertical=pulumi.get(__ret__, 'industry_vertical'),
        media_recommendation_engine_config=pulumi.get(__ret__, 'media_recommendation_engine_config'),
        name=pulumi.get(__ret__, 'name'),
        recommendation_metadata=pulumi.get(__ret__, 'recommendation_metadata'),
        search_engine_config=pulumi.get(__ret__, 'search_engine_config'),
        similar_documents_config=pulumi.get(__ret__, 'similar_documents_config'),
        solution_type=pulumi.get(__ret__, 'solution_type'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_engine)
def get_engine_output(collection_id: Optional[pulumi.Input[str]] = None,
                      engine_id: Optional[pulumi.Input[str]] = None,
                      location: Optional[pulumi.Input[str]] = None,
                      project: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEngineResult]:
    """
    Gets a Engine.
    """
    ...
