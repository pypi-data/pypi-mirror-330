# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSchemaResult',
    'AwaitableGetSchemaResult',
    'get_schema',
    'get_schema_output',
]

@pulumi.output_type
class GetSchemaResult:
    def __init__(__self__, field_configs=None, json_schema=None, name=None, struct_schema=None):
        if field_configs and not isinstance(field_configs, list):
            raise TypeError("Expected argument 'field_configs' to be a list")
        pulumi.set(__self__, "field_configs", field_configs)
        if json_schema and not isinstance(json_schema, str):
            raise TypeError("Expected argument 'json_schema' to be a str")
        pulumi.set(__self__, "json_schema", json_schema)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if struct_schema and not isinstance(struct_schema, dict):
            raise TypeError("Expected argument 'struct_schema' to be a dict")
        pulumi.set(__self__, "struct_schema", struct_schema)

    @property
    @pulumi.getter(name="fieldConfigs")
    def field_configs(self) -> Sequence['outputs.GoogleCloudDiscoveryengineV1alphaFieldConfigResponse']:
        """
        Configurations for fields of the schema.
        """
        return pulumi.get(self, "field_configs")

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> str:
        """
        The JSON representation of the schema.
        """
        return pulumi.get(self, "json_schema")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The full resource name of the schema, in the format of `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="structSchema")
    def struct_schema(self) -> Mapping[str, Any]:
        """
        The structured representation of the schema.
        """
        return pulumi.get(self, "struct_schema")


class AwaitableGetSchemaResult(GetSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchemaResult(
            field_configs=self.field_configs,
            json_schema=self.json_schema,
            name=self.name,
            struct_schema=self.struct_schema)


def get_schema(collection_id: Optional[str] = None,
               data_store_id: Optional[str] = None,
               location: Optional[str] = None,
               project: Optional[str] = None,
               schema_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchemaResult:
    """
    Gets a Schema.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['dataStoreId'] = data_store_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['schemaId'] = schema_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:discoveryengine/v1alpha:getSchema', __args__, opts=opts, typ=GetSchemaResult).value

    return AwaitableGetSchemaResult(
        field_configs=pulumi.get(__ret__, 'field_configs'),
        json_schema=pulumi.get(__ret__, 'json_schema'),
        name=pulumi.get(__ret__, 'name'),
        struct_schema=pulumi.get(__ret__, 'struct_schema'))


@_utilities.lift_output_func(get_schema)
def get_schema_output(collection_id: Optional[pulumi.Input[str]] = None,
                      data_store_id: Optional[pulumi.Input[str]] = None,
                      location: Optional[pulumi.Input[str]] = None,
                      project: Optional[pulumi.Input[Optional[str]]] = None,
                      schema_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchemaResult]:
    """
    Gets a Schema.
    """
    ...
