# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkforcePoolKeyArgs', 'WorkforcePoolKey']

@pulumi.input_type
class WorkforcePoolKeyArgs:
    def __init__(__self__, *,
                 provider_id: pulumi.Input[str],
                 use: pulumi.Input['WorkforcePoolKeyUse'],
                 workforce_pool_id: pulumi.Input[str],
                 workforce_pool_provider_key_id: pulumi.Input[str],
                 key_data: Optional[pulumi.Input['KeyDataArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkforcePoolKey resource.
        :param pulumi.Input['WorkforcePoolKeyUse'] use: The purpose of the key.
        :param pulumi.Input[str] workforce_pool_provider_key_id: Required. The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        :param pulumi.Input['KeyDataArgs'] key_data: Immutable. Public half of the asymmetric key.
        """
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "use", use)
        pulumi.set(__self__, "workforce_pool_id", workforce_pool_id)
        pulumi.set(__self__, "workforce_pool_provider_key_id", workforce_pool_provider_key_id)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_id", value)

    @property
    @pulumi.getter
    def use(self) -> pulumi.Input['WorkforcePoolKeyUse']:
        """
        The purpose of the key.
        """
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: pulumi.Input['WorkforcePoolKeyUse']):
        pulumi.set(self, "use", value)

    @property
    @pulumi.getter(name="workforcePoolId")
    def workforce_pool_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workforce_pool_id")

    @workforce_pool_id.setter
    def workforce_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workforce_pool_id", value)

    @property
    @pulumi.getter(name="workforcePoolProviderKeyId")
    def workforce_pool_provider_key_id(self) -> pulumi.Input[str]:
        """
        Required. The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        """
        return pulumi.get(self, "workforce_pool_provider_key_id")

    @workforce_pool_provider_key_id.setter
    def workforce_pool_provider_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workforce_pool_provider_key_id", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input['KeyDataArgs']]:
        """
        Immutable. Public half of the asymmetric key.
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input['KeyDataArgs']]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)


class WorkforcePoolKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_data: Optional[pulumi.Input[pulumi.InputType['KeyDataArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 provider_id: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input['WorkforcePoolKeyUse']] = None,
                 workforce_pool_id: Optional[pulumi.Input[str]] = None,
                 workforce_pool_provider_key_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new WorkforcePoolProviderKey in a WorkforcePoolProvider.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['KeyDataArgs']] key_data: Immutable. Public half of the asymmetric key.
        :param pulumi.Input['WorkforcePoolKeyUse'] use: The purpose of the key.
        :param pulumi.Input[str] workforce_pool_provider_key_id: Required. The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkforcePoolKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new WorkforcePoolProviderKey in a WorkforcePoolProvider.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param WorkforcePoolKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkforcePoolKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_data: Optional[pulumi.Input[pulumi.InputType['KeyDataArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 provider_id: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input['WorkforcePoolKeyUse']] = None,
                 workforce_pool_id: Optional[pulumi.Input[str]] = None,
                 workforce_pool_provider_key_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkforcePoolKeyArgs.__new__(WorkforcePoolKeyArgs)

            __props__.__dict__["key_data"] = key_data
            __props__.__dict__["location"] = location
            if provider_id is None and not opts.urn:
                raise TypeError("Missing required property 'provider_id'")
            __props__.__dict__["provider_id"] = provider_id
            if use is None and not opts.urn:
                raise TypeError("Missing required property 'use'")
            __props__.__dict__["use"] = use
            if workforce_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'workforce_pool_id'")
            __props__.__dict__["workforce_pool_id"] = workforce_pool_id
            if workforce_pool_provider_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'workforce_pool_provider_key_id'")
            __props__.__dict__["workforce_pool_provider_key_id"] = workforce_pool_provider_key_id
            __props__.__dict__["expire_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "providerId", "workforcePoolId", "workforcePoolProviderKeyId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(WorkforcePoolKey, __self__).__init__(
            'google-native:iam/v1:WorkforcePoolKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WorkforcePoolKey':
        """
        Get an existing WorkforcePoolKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkforcePoolKeyArgs.__new__(WorkforcePoolKeyArgs)

        __props__.__dict__["expire_time"] = None
        __props__.__dict__["key_data"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provider_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["use"] = None
        __props__.__dict__["workforce_pool_id"] = None
        __props__.__dict__["workforce_pool_provider_key_id"] = None
        return WorkforcePoolKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        The time after which the key will be permanently deleted and cannot be recovered. Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> pulumi.Output['outputs.KeyDataResponse']:
        """
        Immutable. Public half of the asymmetric key.
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def use(self) -> pulumi.Output[str]:
        """
        The purpose of the key.
        """
        return pulumi.get(self, "use")

    @property
    @pulumi.getter(name="workforcePoolId")
    def workforce_pool_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "workforce_pool_id")

    @property
    @pulumi.getter(name="workforcePoolProviderKeyId")
    def workforce_pool_provider_key_id(self) -> pulumi.Output[str]:
        """
        Required. The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
        """
        return pulumi.get(self, "workforce_pool_provider_key_id")

