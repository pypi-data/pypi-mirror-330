# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetWorkloadIdentityPoolKeyResult',
    'AwaitableGetWorkloadIdentityPoolKeyResult',
    'get_workload_identity_pool_key',
    'get_workload_identity_pool_key_output',
]

@pulumi.output_type
class GetWorkloadIdentityPoolKeyResult:
    def __init__(__self__, expire_time=None, key_data=None, name=None, state=None, use=None):
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if key_data and not isinstance(key_data, dict):
            raise TypeError("Expected argument 'key_data' to be a dict")
        pulumi.set(__self__, "key_data", key_data)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if use and not isinstance(use, str):
            raise TypeError("Expected argument 'use' to be a str")
        pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> 'outputs.KeyDataResponse':
        """
        Immutable. Public half of the asymmetric key.
        """
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def use(self) -> str:
        """
        The purpose of the key.
        """
        return pulumi.get(self, "use")


class AwaitableGetWorkloadIdentityPoolKeyResult(GetWorkloadIdentityPoolKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkloadIdentityPoolKeyResult(
            expire_time=self.expire_time,
            key_data=self.key_data,
            name=self.name,
            state=self.state,
            use=self.use)


def get_workload_identity_pool_key(key_id: Optional[str] = None,
                                   location: Optional[str] = None,
                                   project: Optional[str] = None,
                                   provider_id: Optional[str] = None,
                                   workload_identity_pool_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkloadIdentityPoolKeyResult:
    """
    Gets an individual WorkloadIdentityPoolProviderKey.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['providerId'] = provider_id
    __args__['workloadIdentityPoolId'] = workload_identity_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:iam/v1:getWorkloadIdentityPoolKey', __args__, opts=opts, typ=GetWorkloadIdentityPoolKeyResult).value

    return AwaitableGetWorkloadIdentityPoolKeyResult(
        expire_time=pulumi.get(__ret__, 'expire_time'),
        key_data=pulumi.get(__ret__, 'key_data'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        use=pulumi.get(__ret__, 'use'))


@_utilities.lift_output_func(get_workload_identity_pool_key)
def get_workload_identity_pool_key_output(key_id: Optional[pulumi.Input[str]] = None,
                                          location: Optional[pulumi.Input[str]] = None,
                                          project: Optional[pulumi.Input[Optional[str]]] = None,
                                          provider_id: Optional[pulumi.Input[str]] = None,
                                          workload_identity_pool_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkloadIdentityPoolKeyResult]:
    """
    Gets an individual WorkloadIdentityPoolProviderKey.
    """
    ...
