# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['EventSubscriptionArgs', 'EventSubscription']

@pulumi.input_type
class EventSubscriptionArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 event_subscription_id: pulumi.Input[str],
                 destinations: Optional[pulumi.Input['EventSubscriptionDestinationArgs']] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 jms: Optional[pulumi.Input['JMSArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subscriber: Optional[pulumi.Input[str]] = None,
                 subscriber_link: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EventSubscription resource.
        :param pulumi.Input[str] event_subscription_id: Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
        :param pulumi.Input['EventSubscriptionDestinationArgs'] destinations: Optional. The destination to hit when we receive an event
        :param pulumi.Input[str] event_type_id: Optional. Event type id of the event of current EventSubscription.
        :param pulumi.Input['JMSArgs'] jms: Optional. JMS is the source for the event listener.
        :param pulumi.Input[str] name: Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        :param pulumi.Input[str] subscriber: Optional. name of the Subscriber for the current EventSubscription.
        :param pulumi.Input[str] subscriber_link: Optional. Link for Subscriber of the current EventSubscription.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "event_subscription_id", event_subscription_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if event_type_id is not None:
            pulumi.set(__self__, "event_type_id", event_type_id)
        if jms is not None:
            pulumi.set(__self__, "jms", jms)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if subscriber is not None:
            pulumi.set(__self__, "subscriber", subscriber)
        if subscriber_link is not None:
            pulumi.set(__self__, "subscriber_link", subscriber_link)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="eventSubscriptionId")
    def event_subscription_id(self) -> pulumi.Input[str]:
        """
        Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
        """
        return pulumi.get(self, "event_subscription_id")

    @event_subscription_id.setter
    def event_subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_subscription_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input['EventSubscriptionDestinationArgs']]:
        """
        Optional. The destination to hit when we receive an event
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input['EventSubscriptionDestinationArgs']]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="eventTypeId")
    def event_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Event type id of the event of current EventSubscription.
        """
        return pulumi.get(self, "event_type_id")

    @event_type_id.setter
    def event_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type_id", value)

    @property
    @pulumi.getter
    def jms(self) -> Optional[pulumi.Input['JMSArgs']]:
        """
        Optional. JMS is the source for the event listener.
        """
        return pulumi.get(self, "jms")

    @jms.setter
    def jms(self, value: Optional[pulumi.Input['JMSArgs']]):
        pulumi.set(self, "jms", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def subscriber(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. name of the Subscriber for the current EventSubscription.
        """
        return pulumi.get(self, "subscriber")

    @subscriber.setter
    def subscriber(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber", value)

    @property
    @pulumi.getter(name="subscriberLink")
    def subscriber_link(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Link for Subscriber of the current EventSubscription.
        """
        return pulumi.get(self, "subscriber_link")

    @subscriber_link.setter
    def subscriber_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_link", value)


class EventSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[pulumi.InputType['EventSubscriptionDestinationArgs']]] = None,
                 event_subscription_id: Optional[pulumi.Input[str]] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 jms: Optional[pulumi.Input[pulumi.InputType['JMSArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subscriber: Optional[pulumi.Input[str]] = None,
                 subscriber_link: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new EventSubscription in a given project,location and connection.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['EventSubscriptionDestinationArgs']] destinations: Optional. The destination to hit when we receive an event
        :param pulumi.Input[str] event_subscription_id: Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
        :param pulumi.Input[str] event_type_id: Optional. Event type id of the event of current EventSubscription.
        :param pulumi.Input[pulumi.InputType['JMSArgs']] jms: Optional. JMS is the source for the event listener.
        :param pulumi.Input[str] name: Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        :param pulumi.Input[str] subscriber: Optional. name of the Subscriber for the current EventSubscription.
        :param pulumi.Input[str] subscriber_link: Optional. Link for Subscriber of the current EventSubscription.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new EventSubscription in a given project,location and connection.

        :param str resource_name: The name of the resource.
        :param EventSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[pulumi.InputType['EventSubscriptionDestinationArgs']]] = None,
                 event_subscription_id: Optional[pulumi.Input[str]] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 jms: Optional[pulumi.Input[pulumi.InputType['JMSArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subscriber: Optional[pulumi.Input[str]] = None,
                 subscriber_link: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventSubscriptionArgs.__new__(EventSubscriptionArgs)

            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["destinations"] = destinations
            if event_subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'event_subscription_id'")
            __props__.__dict__["event_subscription_id"] = event_subscription_id
            __props__.__dict__["event_type_id"] = event_type_id
            __props__.__dict__["jms"] = jms
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["subscriber"] = subscriber
            __props__.__dict__["subscriber_link"] = subscriber_link
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["connectionId", "eventSubscriptionId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(EventSubscription, __self__).__init__(
            'google-native:connectors/v1:EventSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EventSubscription':
        """
        Get an existing EventSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EventSubscriptionArgs.__new__(EventSubscriptionArgs)

        __props__.__dict__["connection_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["destinations"] = None
        __props__.__dict__["event_subscription_id"] = None
        __props__.__dict__["event_type_id"] = None
        __props__.__dict__["jms"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["subscriber"] = None
        __props__.__dict__["subscriber_link"] = None
        __props__.__dict__["update_time"] = None
        return EventSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Created time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Output['outputs.EventSubscriptionDestinationResponse']:
        """
        Optional. The destination to hit when we receive an event
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="eventSubscriptionId")
    def event_subscription_id(self) -> pulumi.Output[str]:
        """
        Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
        """
        return pulumi.get(self, "event_subscription_id")

    @property
    @pulumi.getter(name="eventTypeId")
    def event_type_id(self) -> pulumi.Output[str]:
        """
        Optional. Event type id of the event of current EventSubscription.
        """
        return pulumi.get(self, "event_type_id")

    @property
    @pulumi.getter
    def jms(self) -> pulumi.Output['outputs.JMSResponse']:
        """
        Optional. JMS is the source for the event listener.
        """
        return pulumi.get(self, "jms")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.EventSubscriptionStatusResponse']:
        """
        Optional. Status indicates the status of the event subscription resource
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subscriber(self) -> pulumi.Output[str]:
        """
        Optional. name of the Subscriber for the current EventSubscription.
        """
        return pulumi.get(self, "subscriber")

    @property
    @pulumi.getter(name="subscriberLink")
    def subscriber_link(self) -> pulumi.Output[str]:
        """
        Optional. Link for Subscriber of the current EventSubscription.
        """
        return pulumi.get(self, "subscriber_link")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Updated time.
        """
        return pulumi.get(self, "update_time")

