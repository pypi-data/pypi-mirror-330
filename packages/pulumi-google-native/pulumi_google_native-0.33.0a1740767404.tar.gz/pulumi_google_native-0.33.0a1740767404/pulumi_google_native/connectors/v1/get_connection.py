# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    def __init__(__self__, auth_config=None, config_variables=None, connection_revision=None, connector_version=None, connector_version_infra_config=None, connector_version_launch_stage=None, create_time=None, description=None, destination_configs=None, envoy_image_location=None, eventing_config=None, eventing_enablement_type=None, eventing_runtime_data=None, image_location=None, is_trusted_tester=None, labels=None, lock_config=None, log_config=None, name=None, node_config=None, service_account=None, service_directory=None, ssl_config=None, status=None, subscription_type=None, suspended=None, update_time=None):
        if auth_config and not isinstance(auth_config, dict):
            raise TypeError("Expected argument 'auth_config' to be a dict")
        pulumi.set(__self__, "auth_config", auth_config)
        if config_variables and not isinstance(config_variables, list):
            raise TypeError("Expected argument 'config_variables' to be a list")
        pulumi.set(__self__, "config_variables", config_variables)
        if connection_revision and not isinstance(connection_revision, str):
            raise TypeError("Expected argument 'connection_revision' to be a str")
        pulumi.set(__self__, "connection_revision", connection_revision)
        if connector_version and not isinstance(connector_version, str):
            raise TypeError("Expected argument 'connector_version' to be a str")
        pulumi.set(__self__, "connector_version", connector_version)
        if connector_version_infra_config and not isinstance(connector_version_infra_config, dict):
            raise TypeError("Expected argument 'connector_version_infra_config' to be a dict")
        pulumi.set(__self__, "connector_version_infra_config", connector_version_infra_config)
        if connector_version_launch_stage and not isinstance(connector_version_launch_stage, str):
            raise TypeError("Expected argument 'connector_version_launch_stage' to be a str")
        pulumi.set(__self__, "connector_version_launch_stage", connector_version_launch_stage)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_configs and not isinstance(destination_configs, list):
            raise TypeError("Expected argument 'destination_configs' to be a list")
        pulumi.set(__self__, "destination_configs", destination_configs)
        if envoy_image_location and not isinstance(envoy_image_location, str):
            raise TypeError("Expected argument 'envoy_image_location' to be a str")
        pulumi.set(__self__, "envoy_image_location", envoy_image_location)
        if eventing_config and not isinstance(eventing_config, dict):
            raise TypeError("Expected argument 'eventing_config' to be a dict")
        pulumi.set(__self__, "eventing_config", eventing_config)
        if eventing_enablement_type and not isinstance(eventing_enablement_type, str):
            raise TypeError("Expected argument 'eventing_enablement_type' to be a str")
        pulumi.set(__self__, "eventing_enablement_type", eventing_enablement_type)
        if eventing_runtime_data and not isinstance(eventing_runtime_data, dict):
            raise TypeError("Expected argument 'eventing_runtime_data' to be a dict")
        pulumi.set(__self__, "eventing_runtime_data", eventing_runtime_data)
        if image_location and not isinstance(image_location, str):
            raise TypeError("Expected argument 'image_location' to be a str")
        pulumi.set(__self__, "image_location", image_location)
        if is_trusted_tester and not isinstance(is_trusted_tester, bool):
            raise TypeError("Expected argument 'is_trusted_tester' to be a bool")
        pulumi.set(__self__, "is_trusted_tester", is_trusted_tester)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if lock_config and not isinstance(lock_config, dict):
            raise TypeError("Expected argument 'lock_config' to be a dict")
        pulumi.set(__self__, "lock_config", lock_config)
        if log_config and not isinstance(log_config, dict):
            raise TypeError("Expected argument 'log_config' to be a dict")
        pulumi.set(__self__, "log_config", log_config)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_config and not isinstance(node_config, dict):
            raise TypeError("Expected argument 'node_config' to be a dict")
        pulumi.set(__self__, "node_config", node_config)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if service_directory and not isinstance(service_directory, str):
            raise TypeError("Expected argument 'service_directory' to be a str")
        pulumi.set(__self__, "service_directory", service_directory)
        if ssl_config and not isinstance(ssl_config, dict):
            raise TypeError("Expected argument 'ssl_config' to be a dict")
        pulumi.set(__self__, "ssl_config", ssl_config)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if subscription_type and not isinstance(subscription_type, str):
            raise TypeError("Expected argument 'subscription_type' to be a str")
        pulumi.set(__self__, "subscription_type", subscription_type)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> 'outputs.AuthConfigResponse':
        """
        Optional. Configuration for establishing the connection's authentication with an external system.
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> Sequence['outputs.ConfigVariableResponse']:
        """
        Optional. Configuration for configuring the connection with an external system.
        """
        return pulumi.get(self, "config_variables")

    @property
    @pulumi.getter(name="connectionRevision")
    def connection_revision(self) -> str:
        """
        Connection revision. This field is only updated when the connection is created or updated by User.
        """
        return pulumi.get(self, "connection_revision")

    @property
    @pulumi.getter(name="connectorVersion")
    def connector_version(self) -> str:
        """
        Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.
        """
        return pulumi.get(self, "connector_version")

    @property
    @pulumi.getter(name="connectorVersionInfraConfig")
    def connector_version_infra_config(self) -> 'outputs.ConnectorVersionInfraConfigResponse':
        """
        Infra configs supported by Connector Version.
        """
        return pulumi.get(self, "connector_version_infra_config")

    @property
    @pulumi.getter(name="connectorVersionLaunchStage")
    def connector_version_launch_stage(self) -> str:
        """
        Flag to mark the version indicating the launch stage.
        """
        return pulumi.get(self, "connector_version_launch_stage")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Created time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationConfigs")
    def destination_configs(self) -> Sequence['outputs.DestinationConfigResponse']:
        """
        Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).
        """
        return pulumi.get(self, "destination_configs")

    @property
    @pulumi.getter(name="envoyImageLocation")
    def envoy_image_location(self) -> str:
        """
        GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
        """
        return pulumi.get(self, "envoy_image_location")

    @property
    @pulumi.getter(name="eventingConfig")
    def eventing_config(self) -> 'outputs.EventingConfigResponse':
        """
        Optional. Eventing config of a connection
        """
        return pulumi.get(self, "eventing_config")

    @property
    @pulumi.getter(name="eventingEnablementType")
    def eventing_enablement_type(self) -> str:
        """
        Optional. Eventing enablement type. Will be nil if eventing is not enabled.
        """
        return pulumi.get(self, "eventing_enablement_type")

    @property
    @pulumi.getter(name="eventingRuntimeData")
    def eventing_runtime_data(self) -> 'outputs.EventingRuntimeDataResponse':
        """
        Eventing Runtime Data.
        """
        return pulumi.get(self, "eventing_runtime_data")

    @property
    @pulumi.getter(name="imageLocation")
    def image_location(self) -> str:
        """
        GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
        """
        return pulumi.get(self, "image_location")

    @property
    @pulumi.getter(name="isTrustedTester")
    def is_trusted_tester(self) -> bool:
        """
        Is trusted tester program enabled for the project.
        """
        return pulumi.get(self, "is_trusted_tester")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lockConfig")
    def lock_config(self) -> 'outputs.LockConfigResponse':
        """
        Optional. Configuration that indicates whether or not the Connection can be edited.
        """
        return pulumi.get(self, "lock_config")

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> 'outputs.ConnectorsLogConfigResponse':
        """
        Optional. Log configuration for the connection.
        """
        return pulumi.get(self, "log_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> 'outputs.NodeConfigResponse':
        """
        Optional. Node configuration for the connection.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Optional. Service account needed for runtime plane to access Google Cloud resources.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="serviceDirectory")
    def service_directory(self) -> str:
        """
        The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        """
        return pulumi.get(self, "service_directory")

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> 'outputs.SslConfigResponse':
        """
        Optional. Ssl config of a connection
        """
        return pulumi.get(self, "ssl_config")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ConnectionStatusResponse':
        """
        Current status of the connection.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionType")
    def subscription_type(self) -> str:
        """
        This subscription type enum states the subscription type of the project.
        """
        return pulumi.get(self, "subscription_type")

    @property
    @pulumi.getter
    def suspended(self) -> bool:
        """
        Optional. Suspended indicates if a user has suspended a connection or not.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Updated time.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            auth_config=self.auth_config,
            config_variables=self.config_variables,
            connection_revision=self.connection_revision,
            connector_version=self.connector_version,
            connector_version_infra_config=self.connector_version_infra_config,
            connector_version_launch_stage=self.connector_version_launch_stage,
            create_time=self.create_time,
            description=self.description,
            destination_configs=self.destination_configs,
            envoy_image_location=self.envoy_image_location,
            eventing_config=self.eventing_config,
            eventing_enablement_type=self.eventing_enablement_type,
            eventing_runtime_data=self.eventing_runtime_data,
            image_location=self.image_location,
            is_trusted_tester=self.is_trusted_tester,
            labels=self.labels,
            lock_config=self.lock_config,
            log_config=self.log_config,
            name=self.name,
            node_config=self.node_config,
            service_account=self.service_account,
            service_directory=self.service_directory,
            ssl_config=self.ssl_config,
            status=self.status,
            subscription_type=self.subscription_type,
            suspended=self.suspended,
            update_time=self.update_time)


def get_connection(connection_id: Optional[str] = None,
                   location: Optional[str] = None,
                   project: Optional[str] = None,
                   view: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    Gets details of a single Connection.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:connectors/v1:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        auth_config=pulumi.get(__ret__, 'auth_config'),
        config_variables=pulumi.get(__ret__, 'config_variables'),
        connection_revision=pulumi.get(__ret__, 'connection_revision'),
        connector_version=pulumi.get(__ret__, 'connector_version'),
        connector_version_infra_config=pulumi.get(__ret__, 'connector_version_infra_config'),
        connector_version_launch_stage=pulumi.get(__ret__, 'connector_version_launch_stage'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        destination_configs=pulumi.get(__ret__, 'destination_configs'),
        envoy_image_location=pulumi.get(__ret__, 'envoy_image_location'),
        eventing_config=pulumi.get(__ret__, 'eventing_config'),
        eventing_enablement_type=pulumi.get(__ret__, 'eventing_enablement_type'),
        eventing_runtime_data=pulumi.get(__ret__, 'eventing_runtime_data'),
        image_location=pulumi.get(__ret__, 'image_location'),
        is_trusted_tester=pulumi.get(__ret__, 'is_trusted_tester'),
        labels=pulumi.get(__ret__, 'labels'),
        lock_config=pulumi.get(__ret__, 'lock_config'),
        log_config=pulumi.get(__ret__, 'log_config'),
        name=pulumi.get(__ret__, 'name'),
        node_config=pulumi.get(__ret__, 'node_config'),
        service_account=pulumi.get(__ret__, 'service_account'),
        service_directory=pulumi.get(__ret__, 'service_directory'),
        ssl_config=pulumi.get(__ret__, 'ssl_config'),
        status=pulumi.get(__ret__, 'status'),
        subscription_type=pulumi.get(__ret__, 'subscription_type'),
        suspended=pulumi.get(__ret__, 'suspended'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_connection)
def get_connection_output(connection_id: Optional[pulumi.Input[str]] = None,
                          location: Optional[pulumi.Input[str]] = None,
                          project: Optional[pulumi.Input[Optional[str]]] = None,
                          view: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionResult]:
    """
    Gets details of a single Connection.
    """
    ...
