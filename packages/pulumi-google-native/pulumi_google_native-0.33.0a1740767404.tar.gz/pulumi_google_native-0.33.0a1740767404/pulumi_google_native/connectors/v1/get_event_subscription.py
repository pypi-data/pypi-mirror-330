# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEventSubscriptionResult',
    'AwaitableGetEventSubscriptionResult',
    'get_event_subscription',
    'get_event_subscription_output',
]

@pulumi.output_type
class GetEventSubscriptionResult:
    def __init__(__self__, create_time=None, destinations=None, event_type_id=None, jms=None, name=None, status=None, subscriber=None, subscriber_link=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if destinations and not isinstance(destinations, dict):
            raise TypeError("Expected argument 'destinations' to be a dict")
        pulumi.set(__self__, "destinations", destinations)
        if event_type_id and not isinstance(event_type_id, str):
            raise TypeError("Expected argument 'event_type_id' to be a str")
        pulumi.set(__self__, "event_type_id", event_type_id)
        if jms and not isinstance(jms, dict):
            raise TypeError("Expected argument 'jms' to be a dict")
        pulumi.set(__self__, "jms", jms)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if subscriber and not isinstance(subscriber, str):
            raise TypeError("Expected argument 'subscriber' to be a str")
        pulumi.set(__self__, "subscriber", subscriber)
        if subscriber_link and not isinstance(subscriber_link, str):
            raise TypeError("Expected argument 'subscriber_link' to be a str")
        pulumi.set(__self__, "subscriber_link", subscriber_link)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Created time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def destinations(self) -> 'outputs.EventSubscriptionDestinationResponse':
        """
        Optional. The destination to hit when we receive an event
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="eventTypeId")
    def event_type_id(self) -> str:
        """
        Optional. Event type id of the event of current EventSubscription.
        """
        return pulumi.get(self, "event_type_id")

    @property
    @pulumi.getter
    def jms(self) -> 'outputs.JMSResponse':
        """
        Optional. JMS is the source for the event listener.
        """
        return pulumi.get(self, "jms")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.EventSubscriptionStatusResponse':
        """
        Optional. Status indicates the status of the event subscription resource
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subscriber(self) -> str:
        """
        Optional. name of the Subscriber for the current EventSubscription.
        """
        return pulumi.get(self, "subscriber")

    @property
    @pulumi.getter(name="subscriberLink")
    def subscriber_link(self) -> str:
        """
        Optional. Link for Subscriber of the current EventSubscription.
        """
        return pulumi.get(self, "subscriber_link")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Updated time.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetEventSubscriptionResult(GetEventSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventSubscriptionResult(
            create_time=self.create_time,
            destinations=self.destinations,
            event_type_id=self.event_type_id,
            jms=self.jms,
            name=self.name,
            status=self.status,
            subscriber=self.subscriber,
            subscriber_link=self.subscriber_link,
            update_time=self.update_time)


def get_event_subscription(connection_id: Optional[str] = None,
                           event_subscription_id: Optional[str] = None,
                           location: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventSubscriptionResult:
    """
    Gets details of a single EventSubscription.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['eventSubscriptionId'] = event_subscription_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:connectors/v1:getEventSubscription', __args__, opts=opts, typ=GetEventSubscriptionResult).value

    return AwaitableGetEventSubscriptionResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        destinations=pulumi.get(__ret__, 'destinations'),
        event_type_id=pulumi.get(__ret__, 'event_type_id'),
        jms=pulumi.get(__ret__, 'jms'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        subscriber=pulumi.get(__ret__, 'subscriber'),
        subscriber_link=pulumi.get(__ret__, 'subscriber_link'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_event_subscription)
def get_event_subscription_output(connection_id: Optional[pulumi.Input[str]] = None,
                                  event_subscription_id: Optional[pulumi.Input[str]] = None,
                                  location: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEventSubscriptionResult]:
    """
    Gets details of a single EventSubscription.
    """
    ...
