# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSessionTemplateResult',
    'AwaitableGetSessionTemplateResult',
    'get_session_template',
    'get_session_template_output',
]

@pulumi.output_type
class GetSessionTemplateResult:
    def __init__(__self__, create_time=None, creator=None, description=None, environment_config=None, jupyter_session=None, labels=None, name=None, runtime_config=None, update_time=None, uuid=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_config and not isinstance(environment_config, dict):
            raise TypeError("Expected argument 'environment_config' to be a dict")
        pulumi.set(__self__, "environment_config", environment_config)
        if jupyter_session and not isinstance(jupyter_session, dict):
            raise TypeError("Expected argument 'jupyter_session' to be a dict")
        pulumi.set(__self__, "jupyter_session", jupyter_session)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if runtime_config and not isinstance(runtime_config, dict):
            raise TypeError("Expected argument 'runtime_config' to be a dict")
        pulumi.set(__self__, "runtime_config", runtime_config)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the template was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        """
        The email address of the user who created the template.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Brief description of the template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentConfig")
    def environment_config(self) -> 'outputs.EnvironmentConfigResponse':
        """
        Optional. Environment configuration for session execution.
        """
        return pulumi.get(self, "environment_config")

    @property
    @pulumi.getter(name="jupyterSession")
    def jupyter_session(self) -> 'outputs.JupyterConfigResponse':
        """
        Optional. Jupyter session config.
        """
        return pulumi.get(self, "jupyter_session")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the session template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> 'outputs.RuntimeConfigResponse':
        """
        Optional. Runtime configuration for session execution.
        """
        return pulumi.get(self, "runtime_config")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time the template was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
        """
        return pulumi.get(self, "uuid")


class AwaitableGetSessionTemplateResult(GetSessionTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSessionTemplateResult(
            create_time=self.create_time,
            creator=self.creator,
            description=self.description,
            environment_config=self.environment_config,
            jupyter_session=self.jupyter_session,
            labels=self.labels,
            name=self.name,
            runtime_config=self.runtime_config,
            update_time=self.update_time,
            uuid=self.uuid)


def get_session_template(location: Optional[str] = None,
                         project: Optional[str] = None,
                         session_template_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSessionTemplateResult:
    """
    Gets the resource representation for a session template.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['sessionTemplateId'] = session_template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dataproc/v1:getSessionTemplate', __args__, opts=opts, typ=GetSessionTemplateResult).value

    return AwaitableGetSessionTemplateResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        creator=pulumi.get(__ret__, 'creator'),
        description=pulumi.get(__ret__, 'description'),
        environment_config=pulumi.get(__ret__, 'environment_config'),
        jupyter_session=pulumi.get(__ret__, 'jupyter_session'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        runtime_config=pulumi.get(__ret__, 'runtime_config'),
        update_time=pulumi.get(__ret__, 'update_time'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_session_template)
def get_session_template_output(location: Optional[pulumi.Input[str]] = None,
                                project: Optional[pulumi.Input[Optional[str]]] = None,
                                session_template_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSessionTemplateResult]:
    """
    Gets the resource representation for a session template.
    """
    ...
