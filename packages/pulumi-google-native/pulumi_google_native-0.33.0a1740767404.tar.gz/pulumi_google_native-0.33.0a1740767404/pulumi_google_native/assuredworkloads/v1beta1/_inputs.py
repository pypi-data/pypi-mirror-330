# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsArgs',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsArgs',
]

@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsArgs:
    def __init__(__self__, *,
                 kms_settings: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']] = None):
        """
        Settings specific to resources needed for CJIS.
        :param pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs'] kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        if kms_settings is not None:
            pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]:
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")

    @kms_settings.setter
    def kms_settings(self, value: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]):
        pulumi.set(self, "kms_settings", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsArgs:
    def __init__(__self__, *,
                 kms_settings: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']] = None):
        """
        Settings specific to resources needed for FedRAMP High.
        :param pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs'] kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        if kms_settings is not None:
            pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]:
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")

    @kms_settings.setter
    def kms_settings(self, value: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]):
        pulumi.set(self, "kms_settings", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsArgs:
    def __init__(__self__, *,
                 kms_settings: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']] = None):
        """
        Settings specific to resources needed for FedRAMP Moderate.
        :param pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs'] kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        if kms_settings is not None:
            pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]:
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")

    @kms_settings.setter
    def kms_settings(self, value: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]):
        pulumi.set(self, "kms_settings", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsArgs:
    def __init__(__self__, *,
                 kms_settings: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']] = None):
        """
        Settings specific to resources needed for IL4.
        :param pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs'] kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        if kms_settings is not None:
            pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]:
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")

    @kms_settings.setter
    def kms_settings(self, value: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs']]):
        pulumi.set(self, "kms_settings", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsArgs:
    def __init__(__self__, *,
                 next_rotation_time: pulumi.Input[str],
                 rotation_period: pulumi.Input[str]):
        """
        Settings specific to the Key Management Service.
        :param pulumi.Input[str] next_rotation_time: Input only. Immutable. The time at which the Key Management Service will automatically create a new version of the crypto key and mark it as the primary.
        :param pulumi.Input[str] rotation_period: Input only. Immutable. [next_rotation_time] will be advanced by this period when the Key Management Service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours.
        """
        pulumi.set(__self__, "next_rotation_time", next_rotation_time)
        pulumi.set(__self__, "rotation_period", rotation_period)

    @property
    @pulumi.getter(name="nextRotationTime")
    def next_rotation_time(self) -> pulumi.Input[str]:
        """
        Input only. Immutable. The time at which the Key Management Service will automatically create a new version of the crypto key and mark it as the primary.
        """
        return pulumi.get(self, "next_rotation_time")

    @next_rotation_time.setter
    def next_rotation_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_rotation_time", value)

    @property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> pulumi.Input[str]:
        """
        Input only. Immutable. [next_rotation_time] will be advanced by this period when the Key Management Service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours.
        """
        return pulumi.get(self, "rotation_period")

    @rotation_period.setter
    def rotation_period(self, value: pulumi.Input[str]):
        pulumi.set(self, "rotation_period", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsArgs:
    def __init__(__self__, *,
                 assured_workloads_monitoring: Optional[pulumi.Input[bool]] = None,
                 data_logs_viewer: Optional[pulumi.Input[bool]] = None,
                 service_access_approver: Optional[pulumi.Input[bool]] = None):
        """
        Permissions granted to the AW Partner SA account for the customer workload
        :param pulumi.Input[bool] assured_workloads_monitoring: Optional. Allow partner to view violation alerts.
        :param pulumi.Input[bool] data_logs_viewer: Allow the partner to view inspectability logs and monitoring violations.
        :param pulumi.Input[bool] service_access_approver: Optional. Allow partner to view access approval logs.
        """
        if assured_workloads_monitoring is not None:
            pulumi.set(__self__, "assured_workloads_monitoring", assured_workloads_monitoring)
        if data_logs_viewer is not None:
            pulumi.set(__self__, "data_logs_viewer", data_logs_viewer)
        if service_access_approver is not None:
            pulumi.set(__self__, "service_access_approver", service_access_approver)

    @property
    @pulumi.getter(name="assuredWorkloadsMonitoring")
    def assured_workloads_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Allow partner to view violation alerts.
        """
        return pulumi.get(self, "assured_workloads_monitoring")

    @assured_workloads_monitoring.setter
    def assured_workloads_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assured_workloads_monitoring", value)

    @property
    @pulumi.getter(name="dataLogsViewer")
    def data_logs_viewer(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow the partner to view inspectability logs and monitoring violations.
        """
        return pulumi.get(self, "data_logs_viewer")

    @data_logs_viewer.setter
    def data_logs_viewer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_logs_viewer", value)

    @property
    @pulumi.getter(name="serviceAccessApprover")
    def service_access_approver(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Allow partner to view access approval logs.
        """
        return pulumi.get(self, "service_access_approver")

    @service_access_approver.setter
    def service_access_approver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_access_approver", value)


@pulumi.input_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResourceType']] = None):
        """
        Represent the custom settings for the resources to be created.
        :param pulumi.Input[str] display_name: User-assigned resource display name. If not empty it will be used to create a resource with the specified name.
        :param pulumi.Input[str] resource_id: Resource identifier. For a project this represents project_id. If the project is already taken, the workload creation will fail. For KeyRing, this represents the keyring_id. For a folder, don't set this value as folder_id is assigned by Google.
        :param pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResourceType'] resource_type: Indicates the type of resource. This field should be specified to correspond the id to the right project type (CONSUMER_PROJECT or ENCRYPTION_KEYS_PROJECT)
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-assigned resource display name. If not empty it will be used to create a resource with the specified name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource identifier. For a project this represents project_id. If the project is already taken, the workload creation will fail. For KeyRing, this represents the keyring_id. For a folder, don't set this value as folder_id is assigned by Google.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResourceType']]:
        """
        Indicates the type of resource. This field should be specified to correspond the id to the right project type (CONSUMER_PROJECT or ENCRYPTION_KEYS_PROJECT)
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input['GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResourceType']]):
        pulumi.set(self, "resource_type", value)


