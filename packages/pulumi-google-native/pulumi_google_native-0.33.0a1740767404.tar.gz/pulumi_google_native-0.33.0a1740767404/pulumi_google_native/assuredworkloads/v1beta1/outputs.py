# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadComplianceStatusResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadEkmProvisioningResponseResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadResourceInfoResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResponse',
    'GoogleCloudAssuredworkloadsV1beta1WorkloadSaaEnrollmentResponseResponse',
]

@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsResponse(dict):
    """
    Settings specific to resources needed for CJIS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsSettings":
            suggest = "kms_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadCJISSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_settings: 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse'):
        """
        Settings specific to resources needed for CJIS.
        :param 'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse' kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse':
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadComplianceStatusResponse(dict):
    """
    Represents the Compliance Status of this workload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acknowledgedResourceViolationCount":
            suggest = "acknowledged_resource_violation_count"
        elif key == "acknowledgedViolationCount":
            suggest = "acknowledged_violation_count"
        elif key == "activeResourceViolationCount":
            suggest = "active_resource_violation_count"
        elif key == "activeViolationCount":
            suggest = "active_violation_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadComplianceStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadComplianceStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadComplianceStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acknowledged_resource_violation_count: int,
                 acknowledged_violation_count: int,
                 active_resource_violation_count: int,
                 active_violation_count: int):
        """
        Represents the Compliance Status of this workload
        :param int acknowledged_resource_violation_count: Number of current resource violations which are not acknowledged.
        :param int acknowledged_violation_count: Number of current orgPolicy violations which are acknowledged.
        :param int active_resource_violation_count: Number of current resource violations which are acknowledged.
        :param int active_violation_count: Number of current orgPolicy violations which are not acknowledged.
        """
        pulumi.set(__self__, "acknowledged_resource_violation_count", acknowledged_resource_violation_count)
        pulumi.set(__self__, "acknowledged_violation_count", acknowledged_violation_count)
        pulumi.set(__self__, "active_resource_violation_count", active_resource_violation_count)
        pulumi.set(__self__, "active_violation_count", active_violation_count)

    @property
    @pulumi.getter(name="acknowledgedResourceViolationCount")
    def acknowledged_resource_violation_count(self) -> int:
        """
        Number of current resource violations which are not acknowledged.
        """
        return pulumi.get(self, "acknowledged_resource_violation_count")

    @property
    @pulumi.getter(name="acknowledgedViolationCount")
    def acknowledged_violation_count(self) -> int:
        """
        Number of current orgPolicy violations which are acknowledged.
        """
        return pulumi.get(self, "acknowledged_violation_count")

    @property
    @pulumi.getter(name="activeResourceViolationCount")
    def active_resource_violation_count(self) -> int:
        """
        Number of current resource violations which are acknowledged.
        """
        return pulumi.get(self, "active_resource_violation_count")

    @property
    @pulumi.getter(name="activeViolationCount")
    def active_violation_count(self) -> int:
        """
        Number of current orgPolicy violations which are not acknowledged.
        """
        return pulumi.get(self, "active_violation_count")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadEkmProvisioningResponseResponse(dict):
    """
    External key management systems(EKM) Provisioning response
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ekmProvisioningErrorDomain":
            suggest = "ekm_provisioning_error_domain"
        elif key == "ekmProvisioningErrorMapping":
            suggest = "ekm_provisioning_error_mapping"
        elif key == "ekmProvisioningState":
            suggest = "ekm_provisioning_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadEkmProvisioningResponseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadEkmProvisioningResponseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadEkmProvisioningResponseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ekm_provisioning_error_domain: str,
                 ekm_provisioning_error_mapping: str,
                 ekm_provisioning_state: str):
        """
        External key management systems(EKM) Provisioning response
        :param str ekm_provisioning_error_domain: Indicates Ekm provisioning error if any.
        :param str ekm_provisioning_error_mapping: Detailed error message if Ekm provisioning fails
        :param str ekm_provisioning_state: Indicates Ekm enrollment Provisioning of a given workload.
        """
        pulumi.set(__self__, "ekm_provisioning_error_domain", ekm_provisioning_error_domain)
        pulumi.set(__self__, "ekm_provisioning_error_mapping", ekm_provisioning_error_mapping)
        pulumi.set(__self__, "ekm_provisioning_state", ekm_provisioning_state)

    @property
    @pulumi.getter(name="ekmProvisioningErrorDomain")
    def ekm_provisioning_error_domain(self) -> str:
        """
        Indicates Ekm provisioning error if any.
        """
        return pulumi.get(self, "ekm_provisioning_error_domain")

    @property
    @pulumi.getter(name="ekmProvisioningErrorMapping")
    def ekm_provisioning_error_mapping(self) -> str:
        """
        Detailed error message if Ekm provisioning fails
        """
        return pulumi.get(self, "ekm_provisioning_error_mapping")

    @property
    @pulumi.getter(name="ekmProvisioningState")
    def ekm_provisioning_state(self) -> str:
        """
        Indicates Ekm enrollment Provisioning of a given workload.
        """
        return pulumi.get(self, "ekm_provisioning_state")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsResponse(dict):
    """
    Settings specific to resources needed for FedRAMP High.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsSettings":
            suggest = "kms_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampHighSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_settings: 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse'):
        """
        Settings specific to resources needed for FedRAMP High.
        :param 'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse' kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse':
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsResponse(dict):
    """
    Settings specific to resources needed for FedRAMP Moderate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsSettings":
            suggest = "kms_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadFedrampModerateSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_settings: 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse'):
        """
        Settings specific to resources needed for FedRAMP Moderate.
        :param 'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse' kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse':
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsResponse(dict):
    """
    Settings specific to resources needed for IL4.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsSettings":
            suggest = "kms_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadIL4SettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_settings: 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse'):
        """
        Settings specific to resources needed for IL4.
        :param 'GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse' kms_settings: Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        pulumi.set(__self__, "kms_settings", kms_settings)

    @property
    @pulumi.getter(name="kmsSettings")
    def kms_settings(self) -> 'outputs.GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse':
        """
        Input only. Immutable. Settings used to create a CMEK crypto key.
        """
        return pulumi.get(self, "kms_settings")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse(dict):
    """
    Settings specific to the Key Management Service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextRotationTime":
            suggest = "next_rotation_time"
        elif key == "rotationPeriod":
            suggest = "rotation_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadKMSSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_rotation_time: str,
                 rotation_period: str):
        """
        Settings specific to the Key Management Service.
        :param str next_rotation_time: Input only. Immutable. The time at which the Key Management Service will automatically create a new version of the crypto key and mark it as the primary.
        :param str rotation_period: Input only. Immutable. [next_rotation_time] will be advanced by this period when the Key Management Service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours.
        """
        pulumi.set(__self__, "next_rotation_time", next_rotation_time)
        pulumi.set(__self__, "rotation_period", rotation_period)

    @property
    @pulumi.getter(name="nextRotationTime")
    def next_rotation_time(self) -> str:
        """
        Input only. Immutable. The time at which the Key Management Service will automatically create a new version of the crypto key and mark it as the primary.
        """
        return pulumi.get(self, "next_rotation_time")

    @property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> str:
        """
        Input only. Immutable. [next_rotation_time] will be advanced by this period when the Key Management Service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours.
        """
        return pulumi.get(self, "rotation_period")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsResponse(dict):
    """
    Permissions granted to the AW Partner SA account for the customer workload
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assuredWorkloadsMonitoring":
            suggest = "assured_workloads_monitoring"
        elif key == "dataLogsViewer":
            suggest = "data_logs_viewer"
        elif key == "serviceAccessApprover":
            suggest = "service_access_approver"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadPartnerPermissionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assured_workloads_monitoring: bool,
                 data_logs_viewer: bool,
                 service_access_approver: bool):
        """
        Permissions granted to the AW Partner SA account for the customer workload
        :param bool assured_workloads_monitoring: Optional. Allow partner to view violation alerts.
        :param bool data_logs_viewer: Allow the partner to view inspectability logs and monitoring violations.
        :param bool service_access_approver: Optional. Allow partner to view access approval logs.
        """
        pulumi.set(__self__, "assured_workloads_monitoring", assured_workloads_monitoring)
        pulumi.set(__self__, "data_logs_viewer", data_logs_viewer)
        pulumi.set(__self__, "service_access_approver", service_access_approver)

    @property
    @pulumi.getter(name="assuredWorkloadsMonitoring")
    def assured_workloads_monitoring(self) -> bool:
        """
        Optional. Allow partner to view violation alerts.
        """
        return pulumi.get(self, "assured_workloads_monitoring")

    @property
    @pulumi.getter(name="dataLogsViewer")
    def data_logs_viewer(self) -> bool:
        """
        Allow the partner to view inspectability logs and monitoring violations.
        """
        return pulumi.get(self, "data_logs_viewer")

    @property
    @pulumi.getter(name="serviceAccessApprover")
    def service_access_approver(self) -> bool:
        """
        Optional. Allow partner to view access approval logs.
        """
        return pulumi.get(self, "service_access_approver")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadResourceInfoResponse(dict):
    """
    Represent the resources that are children of this Workload.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadResourceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadResourceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadResourceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        Represent the resources that are children of this Workload.
        :param str resource_id: Resource identifier. For a project this represents project_number.
        :param str resource_type: Indicates the type of resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Resource identifier. For a project this represents project_number.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Indicates the type of resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResponse(dict):
    """
    Represent the custom settings for the resources to be created.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadResourceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 resource_id: str,
                 resource_type: str):
        """
        Represent the custom settings for the resources to be created.
        :param str display_name: User-assigned resource display name. If not empty it will be used to create a resource with the specified name.
        :param str resource_id: Resource identifier. For a project this represents project_id. If the project is already taken, the workload creation will fail. For KeyRing, this represents the keyring_id. For a folder, don't set this value as folder_id is assigned by Google.
        :param str resource_type: Indicates the type of resource. This field should be specified to correspond the id to the right project type (CONSUMER_PROJECT or ENCRYPTION_KEYS_PROJECT)
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-assigned resource display name. If not empty it will be used to create a resource with the specified name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Resource identifier. For a project this represents project_id. If the project is already taken, the workload creation will fail. For KeyRing, this represents the keyring_id. For a folder, don't set this value as folder_id is assigned by Google.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Indicates the type of resource. This field should be specified to correspond the id to the right project type (CONSUMER_PROJECT or ENCRYPTION_KEYS_PROJECT)
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GoogleCloudAssuredworkloadsV1beta1WorkloadSaaEnrollmentResponseResponse(dict):
    """
    Signed Access Approvals (SAA) enrollment response.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "setupErrors":
            suggest = "setup_errors"
        elif key == "setupStatus":
            suggest = "setup_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudAssuredworkloadsV1beta1WorkloadSaaEnrollmentResponseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadSaaEnrollmentResponseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudAssuredworkloadsV1beta1WorkloadSaaEnrollmentResponseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 setup_errors: Sequence[str],
                 setup_status: str):
        """
        Signed Access Approvals (SAA) enrollment response.
        :param Sequence[str] setup_errors: Indicates SAA enrollment setup error if any.
        :param str setup_status: Indicates SAA enrollment status of a given workload.
        """
        pulumi.set(__self__, "setup_errors", setup_errors)
        pulumi.set(__self__, "setup_status", setup_status)

    @property
    @pulumi.getter(name="setupErrors")
    def setup_errors(self) -> Sequence[str]:
        """
        Indicates SAA enrollment setup error if any.
        """
        return pulumi.get(self, "setup_errors")

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> str:
        """
        Indicates SAA enrollment status of a given workload.
        """
        return pulumi.get(self, "setup_status")


