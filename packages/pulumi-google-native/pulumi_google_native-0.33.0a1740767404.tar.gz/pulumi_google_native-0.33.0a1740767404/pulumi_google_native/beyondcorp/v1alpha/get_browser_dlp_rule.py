# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetBrowserDlpRuleResult',
    'AwaitableGetBrowserDlpRuleResult',
    'get_browser_dlp_rule',
    'get_browser_dlp_rule_output',
]

@pulumi.output_type
class GetBrowserDlpRuleResult:
    def __init__(__self__, group=None, name=None, rule_setting=None):
        if group and not isinstance(group, dict):
            raise TypeError("Expected argument 'group' to be a dict")
        pulumi.set(__self__, "group", group)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rule_setting and not isinstance(rule_setting, dict):
            raise TypeError("Expected argument 'rule_setting' to be a dict")
        pulumi.set(__self__, "rule_setting", rule_setting)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponse':
        """
        The group to which this Rule should be applied to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique resource name. The name is ignored when creating BrowserDlpRule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleSetting")
    def rule_setting(self) -> 'outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponse':
        """
        The policy settings to apply.
        """
        return pulumi.get(self, "rule_setting")


class AwaitableGetBrowserDlpRuleResult(GetBrowserDlpRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrowserDlpRuleResult(
            group=self.group,
            name=self.name,
            rule_setting=self.rule_setting)


def get_browser_dlp_rule(browser_dlp_rule_id: Optional[str] = None,
                         organization_id: Optional[str] = None,
                         partner_tenant_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrowserDlpRuleResult:
    """
    Gets details of a single BrowserDlpRule.
    """
    __args__ = dict()
    __args__['browserDlpRuleId'] = browser_dlp_rule_id
    __args__['organizationId'] = organization_id
    __args__['partnerTenantId'] = partner_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:beyondcorp/v1alpha:getBrowserDlpRule', __args__, opts=opts, typ=GetBrowserDlpRuleResult).value

    return AwaitableGetBrowserDlpRuleResult(
        group=pulumi.get(__ret__, 'group'),
        name=pulumi.get(__ret__, 'name'),
        rule_setting=pulumi.get(__ret__, 'rule_setting'))


@_utilities.lift_output_func(get_browser_dlp_rule)
def get_browser_dlp_rule_output(browser_dlp_rule_id: Optional[pulumi.Input[str]] = None,
                                organization_id: Optional[pulumi.Input[str]] = None,
                                partner_tenant_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrowserDlpRuleResult]:
    """
    Gets details of a single BrowserDlpRule.
    """
    ...
