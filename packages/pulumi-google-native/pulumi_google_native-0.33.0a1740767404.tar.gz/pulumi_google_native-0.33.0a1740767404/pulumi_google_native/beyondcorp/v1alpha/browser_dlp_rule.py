# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BrowserDlpRuleArgs', 'BrowserDlpRule']

@pulumi.input_type
class BrowserDlpRuleArgs:
    def __init__(__self__, *,
                 group: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs'],
                 organization_id: pulumi.Input[str],
                 partner_tenant_id: pulumi.Input[str],
                 rule_setting: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs'],
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BrowserDlpRule resource.
        :param pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs'] group: The group to which this Rule should be applied to.
        :param pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs'] rule_setting: The policy settings to apply.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "partner_tenant_id", partner_tenant_id)
        pulumi.set(__self__, "rule_setting", rule_setting)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs']:
        """
        The group to which this Rule should be applied to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs']):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="partnerTenantId")
    def partner_tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "partner_tenant_id")

    @partner_tenant_id.setter
    def partner_tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "partner_tenant_id", value)

    @property
    @pulumi.getter(name="ruleSetting")
    def rule_setting(self) -> pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs']:
        """
        The policy settings to apply.
        """
        return pulumi.get(self, "rule_setting")

    @rule_setting.setter
    def rule_setting(self, value: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs']):
        pulumi.set(self, "rule_setting", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class BrowserDlpRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 partner_tenant_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rule_setting: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs']]] = None,
                 __props__=None):
        """
        Creates a new BrowserDlpRule in a given organization and PartnerTenant.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs']] group: The group to which this Rule should be applied to.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs']] rule_setting: The policy settings to apply.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BrowserDlpRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new BrowserDlpRule in a given organization and PartnerTenant.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param BrowserDlpRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrowserDlpRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaGroupArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 partner_tenant_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rule_setting: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrowserDlpRuleArgs.__new__(BrowserDlpRuleArgs)

            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if partner_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'partner_tenant_id'")
            __props__.__dict__["partner_tenant_id"] = partner_tenant_id
            __props__.__dict__["request_id"] = request_id
            if rule_setting is None and not opts.urn:
                raise TypeError("Missing required property 'rule_setting'")
            __props__.__dict__["rule_setting"] = rule_setting
            __props__.__dict__["name"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["organizationId", "partnerTenantId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BrowserDlpRule, __self__).__init__(
            'google-native:beyondcorp/v1alpha:BrowserDlpRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BrowserDlpRule':
        """
        Get an existing BrowserDlpRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BrowserDlpRuleArgs.__new__(BrowserDlpRuleArgs)

        __props__.__dict__["group"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["organization_id"] = None
        __props__.__dict__["partner_tenant_id"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["rule_setting"] = None
        return BrowserDlpRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output['outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponse']:
        """
        The group to which this Rule should be applied to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique resource name. The name is ignored when creating BrowserDlpRule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="partnerTenantId")
    def partner_tenant_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "partner_tenant_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="ruleSetting")
    def rule_setting(self) -> pulumi.Output['outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponse']:
        """
        The policy settings to apply.
        """
        return pulumi.get(self, "rule_setting")

