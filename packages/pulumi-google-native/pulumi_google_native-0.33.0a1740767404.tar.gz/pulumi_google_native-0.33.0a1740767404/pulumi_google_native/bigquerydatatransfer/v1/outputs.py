# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'EmailPreferencesResponse',
    'EncryptionConfigurationResponse',
    'ScheduleOptionsResponse',
    'UserInfoResponse',
]

@pulumi.output_type
class EmailPreferencesResponse(dict):
    """
    Represents preferences for sending email notifications for transfer run events.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableFailureEmail":
            suggest = "enable_failure_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_failure_email: bool):
        """
        Represents preferences for sending email notifications for transfer run events.
        :param bool enable_failure_email: If true, email notifications will be sent on transfer run failures.
        """
        pulumi.set(__self__, "enable_failure_email", enable_failure_email)

    @property
    @pulumi.getter(name="enableFailureEmail")
    def enable_failure_email(self) -> bool:
        """
        If true, email notifications will be sent on transfer run failures.
        """
        return pulumi.get(self, "enable_failure_email")


@pulumi.output_type
class EncryptionConfigurationResponse(dict):
    """
    Represents the encryption configuration for a transfer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: str):
        """
        Represents the encryption configuration for a transfer.
        :param str kms_key_name: The name of the KMS key used for encrypting BigQuery data.
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        The name of the KMS key used for encrypting BigQuery data.
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class ScheduleOptionsResponse(dict):
    """
    Options customizing the data transfer schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableAutoScheduling":
            suggest = "disable_auto_scheduling"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_auto_scheduling: bool,
                 end_time: str,
                 start_time: str):
        """
        Options customizing the data transfer schedule.
        :param bool disable_auto_scheduling: If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
        :param str end_time: Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
        :param str start_time: Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
        """
        pulumi.set(__self__, "disable_auto_scheduling", disable_auto_scheduling)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="disableAutoScheduling")
    def disable_auto_scheduling(self) -> bool:
        """
        If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
        """
        return pulumi.get(self, "disable_auto_scheduling")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class UserInfoResponse(dict):
    """
    Information about a user.
    """
    def __init__(__self__, *,
                 email: str):
        """
        Information about a user.
        :param str email: E-mail address of the user.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        E-mail address of the user.
        """
        return pulumi.get(self, "email")


