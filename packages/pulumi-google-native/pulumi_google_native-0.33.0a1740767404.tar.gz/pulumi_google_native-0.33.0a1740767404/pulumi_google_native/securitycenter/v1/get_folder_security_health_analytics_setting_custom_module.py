# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFolderSecurityHealthAnalyticsSettingCustomModuleResult',
    'AwaitableGetFolderSecurityHealthAnalyticsSettingCustomModuleResult',
    'get_folder_security_health_analytics_setting_custom_module',
    'get_folder_security_health_analytics_setting_custom_module_output',
]

@pulumi.output_type
class GetFolderSecurityHealthAnalyticsSettingCustomModuleResult:
    def __init__(__self__, ancestor_module=None, custom_config=None, display_name=None, enablement_state=None, last_editor=None, name=None, update_time=None):
        if ancestor_module and not isinstance(ancestor_module, str):
            raise TypeError("Expected argument 'ancestor_module' to be a str")
        pulumi.set(__self__, "ancestor_module", ancestor_module)
        if custom_config and not isinstance(custom_config, dict):
            raise TypeError("Expected argument 'custom_config' to be a dict")
        pulumi.set(__self__, "custom_config", custom_config)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if enablement_state and not isinstance(enablement_state, str):
            raise TypeError("Expected argument 'enablement_state' to be a str")
        pulumi.set(__self__, "enablement_state", enablement_state)
        if last_editor and not isinstance(last_editor, str):
            raise TypeError("Expected argument 'last_editor' to be a str")
        pulumi.set(__self__, "last_editor", last_editor)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="ancestorModule")
    def ancestor_module(self) -> str:
        """
        If empty, indicates that the custom module was created in the organization, folder, or project in which you are viewing the custom module. Otherwise, `ancestor_module` specifies the organization or folder from which the custom module is inherited.
        """
        return pulumi.get(self, "ancestor_module")

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> 'outputs.GoogleCloudSecuritycenterV1CustomConfigResponse':
        """
        The user specified custom configuration for the module.
        """
        return pulumi.get(self, "custom_config")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> str:
        """
        The enablement state of the custom module.
        """
        return pulumi.get(self, "enablement_state")

    @property
    @pulumi.getter(name="lastEditor")
    def last_editor(self) -> str:
        """
        The editor that last updated the custom module.
        """
        return pulumi.get(self, "last_editor")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of the custom module. Its format is "organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}", or "folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}", or "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time at which the custom module was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetFolderSecurityHealthAnalyticsSettingCustomModuleResult(GetFolderSecurityHealthAnalyticsSettingCustomModuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFolderSecurityHealthAnalyticsSettingCustomModuleResult(
            ancestor_module=self.ancestor_module,
            custom_config=self.custom_config,
            display_name=self.display_name,
            enablement_state=self.enablement_state,
            last_editor=self.last_editor,
            name=self.name,
            update_time=self.update_time)


def get_folder_security_health_analytics_setting_custom_module(custom_module_id: Optional[str] = None,
                                                               folder_id: Optional[str] = None,
                                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFolderSecurityHealthAnalyticsSettingCustomModuleResult:
    """
    Retrieves a SecurityHealthAnalyticsCustomModule.
    """
    __args__ = dict()
    __args__['customModuleId'] = custom_module_id
    __args__['folderId'] = folder_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:securitycenter/v1:getFolderSecurityHealthAnalyticsSettingCustomModule', __args__, opts=opts, typ=GetFolderSecurityHealthAnalyticsSettingCustomModuleResult).value

    return AwaitableGetFolderSecurityHealthAnalyticsSettingCustomModuleResult(
        ancestor_module=pulumi.get(__ret__, 'ancestor_module'),
        custom_config=pulumi.get(__ret__, 'custom_config'),
        display_name=pulumi.get(__ret__, 'display_name'),
        enablement_state=pulumi.get(__ret__, 'enablement_state'),
        last_editor=pulumi.get(__ret__, 'last_editor'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_folder_security_health_analytics_setting_custom_module)
def get_folder_security_health_analytics_setting_custom_module_output(custom_module_id: Optional[pulumi.Input[str]] = None,
                                                                      folder_id: Optional[pulumi.Input[str]] = None,
                                                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFolderSecurityHealthAnalyticsSettingCustomModuleResult]:
    """
    Retrieves a SecurityHealthAnalyticsCustomModule.
    """
    ...
