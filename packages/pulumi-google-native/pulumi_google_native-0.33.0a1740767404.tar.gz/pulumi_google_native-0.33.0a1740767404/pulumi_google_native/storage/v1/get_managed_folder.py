# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetManagedFolderResult',
    'AwaitableGetManagedFolderResult',
    'get_managed_folder',
    'get_managed_folder_output',
]

@pulumi.output_type
class GetManagedFolderResult:
    def __init__(__self__, bucket=None, create_time=None, kind=None, metageneration=None, name=None, self_link=None, update_time=None):
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        pulumi.set(__self__, "bucket", bucket)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if metageneration and not isinstance(metageneration, str):
            raise TypeError("Expected argument 'metageneration' to be a str")
        pulumi.set(__self__, "metageneration", metageneration)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the bucket containing this managed folder.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the managed folder in RFC 3339 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of item this is. For managed folders, this is always storage#managedFolder.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metageneration(self) -> str:
        """
        The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
        """
        return pulumi.get(self, "metageneration")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the managed folder. Required if not specified by URL parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> str:
        """
        The link to this managed folder.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last update time of the managed folder metadata in RFC 3339 format.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetManagedFolderResult(GetManagedFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedFolderResult(
            bucket=self.bucket,
            create_time=self.create_time,
            kind=self.kind,
            metageneration=self.metageneration,
            name=self.name,
            self_link=self.self_link,
            update_time=self.update_time)


def get_managed_folder(bucket: Optional[str] = None,
                       if_metageneration_match: Optional[str] = None,
                       if_metageneration_not_match: Optional[str] = None,
                       managed_folder: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedFolderResult:
    """
    Returns metadata of the specified managed folder.
    """
    __args__ = dict()
    __args__['bucket'] = bucket
    __args__['ifMetagenerationMatch'] = if_metageneration_match
    __args__['ifMetagenerationNotMatch'] = if_metageneration_not_match
    __args__['managedFolder'] = managed_folder
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:storage/v1:getManagedFolder', __args__, opts=opts, typ=GetManagedFolderResult).value

    return AwaitableGetManagedFolderResult(
        bucket=pulumi.get(__ret__, 'bucket'),
        create_time=pulumi.get(__ret__, 'create_time'),
        kind=pulumi.get(__ret__, 'kind'),
        metageneration=pulumi.get(__ret__, 'metageneration'),
        name=pulumi.get(__ret__, 'name'),
        self_link=pulumi.get(__ret__, 'self_link'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_managed_folder)
def get_managed_folder_output(bucket: Optional[pulumi.Input[str]] = None,
                              if_metageneration_match: Optional[pulumi.Input[Optional[str]]] = None,
                              if_metageneration_not_match: Optional[pulumi.Input[Optional[str]]] = None,
                              managed_folder: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedFolderResult]:
    """
    Returns metadata of the specified managed folder.
    """
    ...
