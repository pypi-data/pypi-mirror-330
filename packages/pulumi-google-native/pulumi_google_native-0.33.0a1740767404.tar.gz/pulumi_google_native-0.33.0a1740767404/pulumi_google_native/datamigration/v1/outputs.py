# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AlloyDbConnectionProfileResponse',
    'AlloyDbSettingsResponse',
    'ApplyHashResponse',
    'AssignSpecificValueResponse',
    'AuditConfigResponse',
    'AuditLogConfigResponse',
    'BindingResponse',
    'CloudSqlConnectionProfileResponse',
    'CloudSqlSettingsResponse',
    'ConditionalColumnSetValueResponse',
    'ConversionWorkspaceInfoResponse',
    'ConvertRowIdToColumnResponse',
    'DataCacheConfigResponse',
    'DatabaseEngineInfoResponse',
    'DatabaseTypeResponse',
    'DoubleComparisonFilterResponse',
    'DumpFlagResponse',
    'DumpFlagsResponse',
    'EmptyResponse',
    'EncryptionConfigResponse',
    'EntityMoveResponse',
    'ExprResponse',
    'FilterTableColumnsResponse',
    'ForwardSshTunnelConnectivityResponse',
    'IntComparisonFilterResponse',
    'MachineConfigResponse',
    'MappingRuleFilterResponse',
    'MultiColumnDatatypeChangeResponse',
    'MultiEntityRenameResponse',
    'MySqlConnectionProfileResponse',
    'OracleConnectionProfileResponse',
    'PerformanceConfigResponse',
    'PostgreSqlConnectionProfileResponse',
    'PrimaryInstanceSettingsResponse',
    'PrivateConnectivityResponse',
    'PrivateServiceConnectConnectivityResponse',
    'ReverseSshConnectivityResponse',
    'RoundToScaleResponse',
    'SetTablePrimaryKeyResponse',
    'SingleColumnChangeResponse',
    'SingleEntityRenameResponse',
    'SinglePackageChangeResponse',
    'SourceNumericFilterResponse',
    'SourceSqlChangeResponse',
    'SourceTextFilterResponse',
    'SqlAclEntryResponse',
    'SqlIpConfigResponse',
    'SslConfigResponse',
    'StaticIpConnectivityResponse',
    'StaticServiceIpConnectivityResponse',
    'StatusResponse',
    'UserPasswordResponse',
    'ValueListFilterResponse',
    'ValueTransformationResponse',
    'VpcPeeringConfigResponse',
    'VpcPeeringConnectivityResponse',
]

@pulumi.output_type
class AlloyDbConnectionProfileResponse(dict):
    """
    Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlloyDbConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlloyDbConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlloyDbConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 settings: 'outputs.AlloyDbSettingsResponse'):
        """
        Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
        :param str cluster_id: The AlloyDB cluster ID that this connection profile is associated with.
        :param 'AlloyDbSettingsResponse' settings: Immutable. Metadata used to create the destination AlloyDB cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The AlloyDB cluster ID that this connection profile is associated with.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.AlloyDbSettingsResponse':
        """
        Immutable. Metadata used to create the destination AlloyDB cluster.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class AlloyDbSettingsResponse(dict):
    """
    Settings for creating an AlloyDB cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseVersion":
            suggest = "database_version"
        elif key == "encryptionConfig":
            suggest = "encryption_config"
        elif key == "initialUser":
            suggest = "initial_user"
        elif key == "primaryInstanceSettings":
            suggest = "primary_instance_settings"
        elif key == "vpcNetwork":
            suggest = "vpc_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlloyDbSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlloyDbSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlloyDbSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_version: str,
                 encryption_config: 'outputs.EncryptionConfigResponse',
                 initial_user: 'outputs.UserPasswordResponse',
                 labels: Mapping[str, str],
                 primary_instance_settings: 'outputs.PrimaryInstanceSettingsResponse',
                 vpc_network: str):
        """
        Settings for creating an AlloyDB cluster.
        :param str database_version: Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
        :param 'EncryptionConfigResponse' encryption_config: Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        :param 'UserPasswordResponse' initial_user: Input only. Initial user to setup during cluster creation. Required.
        :param Mapping[str, str] labels: Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
        :param str vpc_network: The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
        """
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "initial_user", initial_user)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "primary_instance_settings", primary_instance_settings)
        pulumi.set(__self__, "vpc_network", vpc_network)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> 'outputs.EncryptionConfigResponse':
        """
        Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> 'outputs.UserPasswordResponse':
        """
        Input only. Initial user to setup during cluster creation. Required.
        """
        return pulumi.get(self, "initial_user")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="primaryInstanceSettings")
    def primary_instance_settings(self) -> 'outputs.PrimaryInstanceSettingsResponse':
        return pulumi.get(self, "primary_instance_settings")

    @property
    @pulumi.getter(name="vpcNetwork")
    def vpc_network(self) -> str:
        """
        The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
        """
        return pulumi.get(self, "vpc_network")


@pulumi.output_type
class ApplyHashResponse(dict):
    """
    Apply a hash function on the value.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uuidFromBytes":
            suggest = "uuid_from_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplyHashResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplyHashResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplyHashResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uuid_from_bytes: 'outputs.EmptyResponse'):
        """
        Apply a hash function on the value.
        :param 'EmptyResponse' uuid_from_bytes: Optional. Generate UUID from the data's byte array
        """
        pulumi.set(__self__, "uuid_from_bytes", uuid_from_bytes)

    @property
    @pulumi.getter(name="uuidFromBytes")
    def uuid_from_bytes(self) -> 'outputs.EmptyResponse':
        """
        Optional. Generate UUID from the data's byte array
        """
        return pulumi.get(self, "uuid_from_bytes")


@pulumi.output_type
class AssignSpecificValueResponse(dict):
    """
    Set to a specific value (value is converted to fit the target data type)
    """
    def __init__(__self__, *,
                 value: str):
        """
        Set to a specific value (value is converted to fit the target data type)
        :param str value: Specific value to be assigned
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Specific value to be assigned
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AuditConfigResponse(dict):
    """
    Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogConfigs":
            suggest = "audit_log_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_configs: Sequence['outputs.AuditLogConfigResponse'],
                 service: str):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param Sequence['AuditLogConfigResponse'] audit_log_configs: The configuration for logging of each type of permission.
        :param str service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Sequence['outputs.AuditLogConfigResponse']:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AuditLogConfigResponse(dict):
    """
    Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedMembers":
            suggest = "exempted_members"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exempted_members: Sequence[str],
                 log_type: str):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param Sequence[str] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param str log_type: The log type that this config enables.
        """
        pulumi.set(__self__, "exempted_members", exempted_members)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Sequence[str]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class CloudSqlConnectionProfileResponse(dict):
    """
    Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalPublicIp":
            suggest = "additional_public_ip"
        elif key == "cloudSqlId":
            suggest = "cloud_sql_id"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudSqlConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudSqlConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudSqlConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_public_ip: str,
                 cloud_sql_id: str,
                 private_ip: str,
                 public_ip: str,
                 settings: 'outputs.CloudSqlSettingsResponse'):
        """
        Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
        :param str additional_public_ip: The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        :param str cloud_sql_id: The Cloud SQL instance ID that this connection profile is associated with.
        :param str private_ip: The Cloud SQL database instance's private IP.
        :param str public_ip: The Cloud SQL database instance's public IP.
        :param 'CloudSqlSettingsResponse' settings: Immutable. Metadata used to create the destination Cloud SQL database.
        """
        pulumi.set(__self__, "additional_public_ip", additional_public_ip)
        pulumi.set(__self__, "cloud_sql_id", cloud_sql_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="additionalPublicIp")
    def additional_public_ip(self) -> str:
        """
        The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        """
        return pulumi.get(self, "additional_public_ip")

    @property
    @pulumi.getter(name="cloudSqlId")
    def cloud_sql_id(self) -> str:
        """
        The Cloud SQL instance ID that this connection profile is associated with.
        """
        return pulumi.get(self, "cloud_sql_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The Cloud SQL database instance's private IP.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The Cloud SQL database instance's public IP.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.CloudSqlSettingsResponse':
        """
        Immutable. Metadata used to create the destination Cloud SQL database.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class CloudSqlSettingsResponse(dict):
    """
    Settings for creating a Cloud SQL database instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationPolicy":
            suggest = "activation_policy"
        elif key == "autoStorageIncrease":
            suggest = "auto_storage_increase"
        elif key == "availabilityType":
            suggest = "availability_type"
        elif key == "cmekKeyName":
            suggest = "cmek_key_name"
        elif key == "dataCacheConfig":
            suggest = "data_cache_config"
        elif key == "dataDiskSizeGb":
            suggest = "data_disk_size_gb"
        elif key == "dataDiskType":
            suggest = "data_disk_type"
        elif key == "databaseFlags":
            suggest = "database_flags"
        elif key == "databaseVersion":
            suggest = "database_version"
        elif key == "ipConfig":
            suggest = "ip_config"
        elif key == "rootPassword":
            suggest = "root_password"
        elif key == "rootPasswordSet":
            suggest = "root_password_set"
        elif key == "secondaryZone":
            suggest = "secondary_zone"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "storageAutoResizeLimit":
            suggest = "storage_auto_resize_limit"
        elif key == "userLabels":
            suggest = "user_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudSqlSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudSqlSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudSqlSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_policy: str,
                 auto_storage_increase: bool,
                 availability_type: str,
                 cmek_key_name: str,
                 collation: str,
                 data_cache_config: 'outputs.DataCacheConfigResponse',
                 data_disk_size_gb: str,
                 data_disk_type: str,
                 database_flags: Mapping[str, str],
                 database_version: str,
                 edition: str,
                 ip_config: 'outputs.SqlIpConfigResponse',
                 root_password: str,
                 root_password_set: bool,
                 secondary_zone: str,
                 source_id: str,
                 storage_auto_resize_limit: str,
                 tier: str,
                 user_labels: Mapping[str, str],
                 zone: str):
        """
        Settings for creating a Cloud SQL database instance.
        :param str activation_policy: The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
        :param bool auto_storage_increase: [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
        :param str availability_type: Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
        :param str cmek_key_name: The KMS key name used for the csql instance.
        :param str collation: The Cloud SQL default instance level collation.
        :param 'DataCacheConfigResponse' data_cache_config: Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        :param str data_disk_size_gb: The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
        :param str data_disk_type: The type of storage: `PD_SSD` (default) or `PD_HDD`.
        :param Mapping[str, str] database_flags: The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        :param str database_version: The database engine type and version.
        :param str edition: Optional. The edition of the given Cloud SQL instance.
        :param 'SqlIpConfigResponse' ip_config: The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
        :param str root_password: Input only. Initial root password.
        :param bool root_password_set: Indicates If this connection profile root password is stored.
        :param str secondary_zone: Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        :param str source_id: The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
        :param str storage_auto_resize_limit: The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        :param str tier: The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
        :param Mapping[str, str] user_labels: The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
        :param str zone: The Google Cloud Platform zone where your Cloud SQL database instance is located.
        """
        pulumi.set(__self__, "activation_policy", activation_policy)
        pulumi.set(__self__, "auto_storage_increase", auto_storage_increase)
        pulumi.set(__self__, "availability_type", availability_type)
        pulumi.set(__self__, "cmek_key_name", cmek_key_name)
        pulumi.set(__self__, "collation", collation)
        pulumi.set(__self__, "data_cache_config", data_cache_config)
        pulumi.set(__self__, "data_disk_size_gb", data_disk_size_gb)
        pulumi.set(__self__, "data_disk_type", data_disk_type)
        pulumi.set(__self__, "database_flags", database_flags)
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "ip_config", ip_config)
        pulumi.set(__self__, "root_password", root_password)
        pulumi.set(__self__, "root_password_set", root_password_set)
        pulumi.set(__self__, "secondary_zone", secondary_zone)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "storage_auto_resize_limit", storage_auto_resize_limit)
        pulumi.set(__self__, "tier", tier)
        pulumi.set(__self__, "user_labels", user_labels)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="activationPolicy")
    def activation_policy(self) -> str:
        """
        The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
        """
        return pulumi.get(self, "activation_policy")

    @property
    @pulumi.getter(name="autoStorageIncrease")
    def auto_storage_increase(self) -> bool:
        """
        [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
        """
        return pulumi.get(self, "auto_storage_increase")

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> str:
        """
        Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
        """
        return pulumi.get(self, "availability_type")

    @property
    @pulumi.getter(name="cmekKeyName")
    def cmek_key_name(self) -> str:
        """
        The KMS key name used for the csql instance.
        """
        return pulumi.get(self, "cmek_key_name")

    @property
    @pulumi.getter
    def collation(self) -> str:
        """
        The Cloud SQL default instance level collation.
        """
        return pulumi.get(self, "collation")

    @property
    @pulumi.getter(name="dataCacheConfig")
    def data_cache_config(self) -> 'outputs.DataCacheConfigResponse':
        """
        Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        """
        return pulumi.get(self, "data_cache_config")

    @property
    @pulumi.getter(name="dataDiskSizeGb")
    def data_disk_size_gb(self) -> str:
        """
        The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
        """
        return pulumi.get(self, "data_disk_size_gb")

    @property
    @pulumi.getter(name="dataDiskType")
    def data_disk_type(self) -> str:
        """
        The type of storage: `PD_SSD` (default) or `PD_HDD`.
        """
        return pulumi.get(self, "data_disk_type")

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Mapping[str, str]:
        """
        The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        """
        return pulumi.get(self, "database_flags")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        The database engine type and version.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter
    def edition(self) -> str:
        """
        Optional. The edition of the given Cloud SQL instance.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> 'outputs.SqlIpConfigResponse':
        """
        The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> str:
        """
        Input only. Initial root password.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="rootPasswordSet")
    def root_password_set(self) -> bool:
        """
        Indicates If this connection profile root password is stored.
        """
        return pulumi.get(self, "root_password_set")

    @property
    @pulumi.getter(name="secondaryZone")
    def secondary_zone(self) -> str:
        """
        Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        """
        return pulumi.get(self, "secondary_zone")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="storageAutoResizeLimit")
    def storage_auto_resize_limit(self) -> str:
        """
        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        """
        return pulumi.get(self, "storage_auto_resize_limit")

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
        """
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Mapping[str, str]:
        """
        The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
        """
        return pulumi.get(self, "user_labels")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The Google Cloud Platform zone where your Cloud SQL database instance is located.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ConditionalColumnSetValueResponse(dict):
    """
    Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customFeatures":
            suggest = "custom_features"
        elif key == "sourceNumericFilter":
            suggest = "source_numeric_filter"
        elif key == "sourceTextFilter":
            suggest = "source_text_filter"
        elif key == "valueTransformation":
            suggest = "value_transformation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalColumnSetValueResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalColumnSetValueResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalColumnSetValueResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_features: Mapping[str, Any],
                 source_numeric_filter: 'outputs.SourceNumericFilterResponse',
                 source_text_filter: 'outputs.SourceTextFilterResponse',
                 value_transformation: 'outputs.ValueTransformationResponse'):
        """
        Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
        :param Mapping[str, Any] custom_features: Optional. Custom engine specific features.
        :param 'SourceNumericFilterResponse' source_numeric_filter: Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
        :param 'SourceTextFilterResponse' source_text_filter: Optional. Optional filter on source column length. Used for text based data types like varchar.
        :param 'ValueTransformationResponse' value_transformation: Description of data transformation during migration.
        """
        pulumi.set(__self__, "custom_features", custom_features)
        pulumi.set(__self__, "source_numeric_filter", source_numeric_filter)
        pulumi.set(__self__, "source_text_filter", source_text_filter)
        pulumi.set(__self__, "value_transformation", value_transformation)

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Mapping[str, Any]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @property
    @pulumi.getter(name="sourceNumericFilter")
    def source_numeric_filter(self) -> 'outputs.SourceNumericFilterResponse':
        """
        Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
        """
        return pulumi.get(self, "source_numeric_filter")

    @property
    @pulumi.getter(name="sourceTextFilter")
    def source_text_filter(self) -> 'outputs.SourceTextFilterResponse':
        """
        Optional. Optional filter on source column length. Used for text based data types like varchar.
        """
        return pulumi.get(self, "source_text_filter")

    @property
    @pulumi.getter(name="valueTransformation")
    def value_transformation(self) -> 'outputs.ValueTransformationResponse':
        """
        Description of data transformation during migration.
        """
        return pulumi.get(self, "value_transformation")


@pulumi.output_type
class ConversionWorkspaceInfoResponse(dict):
    """
    A conversion workspace's version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitId":
            suggest = "commit_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConversionWorkspaceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConversionWorkspaceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConversionWorkspaceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commit_id: str,
                 name: str):
        """
        A conversion workspace's version.
        :param str commit_id: The commit ID of the conversion workspace.
        :param str name: The resource name (URI) of the conversion workspace.
        """
        pulumi.set(__self__, "commit_id", commit_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> str:
        """
        The commit ID of the conversion workspace.
        """
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name (URI) of the conversion workspace.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConvertRowIdToColumnResponse(dict):
    """
    Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onlyIfNoPrimaryKey":
            suggest = "only_if_no_primary_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConvertRowIdToColumnResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConvertRowIdToColumnResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConvertRowIdToColumnResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 only_if_no_primary_key: bool):
        """
        Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
        :param bool only_if_no_primary_key: Only work on tables without primary key defined
        """
        pulumi.set(__self__, "only_if_no_primary_key", only_if_no_primary_key)

    @property
    @pulumi.getter(name="onlyIfNoPrimaryKey")
    def only_if_no_primary_key(self) -> bool:
        """
        Only work on tables without primary key defined
        """
        return pulumi.get(self, "only_if_no_primary_key")


@pulumi.output_type
class DataCacheConfigResponse(dict):
    """
    Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCacheEnabled":
            suggest = "data_cache_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCacheConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCacheConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCacheConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_cache_enabled: bool):
        """
        Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        :param bool data_cache_enabled: Optional. Whether data cache is enabled for the instance.
        """
        pulumi.set(__self__, "data_cache_enabled", data_cache_enabled)

    @property
    @pulumi.getter(name="dataCacheEnabled")
    def data_cache_enabled(self) -> bool:
        """
        Optional. Whether data cache is enabled for the instance.
        """
        return pulumi.get(self, "data_cache_enabled")


@pulumi.output_type
class DatabaseEngineInfoResponse(dict):
    """
    The type and version of a source or destination database.
    """
    def __init__(__self__, *,
                 engine: str,
                 version: str):
        """
        The type and version of a source or destination database.
        :param str engine: Engine type.
        :param str version: Engine version, for example "12.c.1".
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        Engine type.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Engine version, for example "12.c.1".
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DatabaseTypeResponse(dict):
    """
    A message defining the database engine and provider.
    """
    def __init__(__self__, *,
                 engine: str,
                 provider: str):
        """
        A message defining the database engine and provider.
        :param str engine: The database engine.
        :param str provider: The database provider.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        The database engine.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        The database provider.
        """
        return pulumi.get(self, "provider")


@pulumi.output_type
class DoubleComparisonFilterResponse(dict):
    """
    Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueComparison":
            suggest = "value_comparison"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DoubleComparisonFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DoubleComparisonFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DoubleComparisonFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: float,
                 value_comparison: str):
        """
        Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
        :param float value: Double compare value to be used
        :param str value_comparison: Relation between source value and compare value
        """
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_comparison", value_comparison)

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Double compare value to be used
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueComparison")
    def value_comparison(self) -> str:
        """
        Relation between source value and compare value
        """
        return pulumi.get(self, "value_comparison")


@pulumi.output_type
class DumpFlagResponse(dict):
    """
    Dump flag definition.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        Dump flag definition.
        :param str name: The name of the flag
        :param str value: The value of the flag.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the flag
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the flag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DumpFlagsResponse(dict):
    """
    Dump flags definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dumpFlags":
            suggest = "dump_flags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DumpFlagsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DumpFlagsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DumpFlagsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dump_flags: Sequence['outputs.DumpFlagResponse']):
        """
        Dump flags definition.
        :param Sequence['DumpFlagResponse'] dump_flags: The flags for the initial dump.
        """
        pulumi.set(__self__, "dump_flags", dump_flags)

    @property
    @pulumi.getter(name="dumpFlags")
    def dump_flags(self) -> Sequence['outputs.DumpFlagResponse']:
        """
        The flags for the initial dump.
        """
        return pulumi.get(self, "dump_flags")


@pulumi.output_type
class EmptyResponse(dict):
    """
    A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    """
    def __init__(__self__):
        """
        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
        """
        pass


@pulumi.output_type
class EncryptionConfigResponse(dict):
    """
    EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: str):
        """
        EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
        :param str kms_key_name: The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class EntityMoveResponse(dict):
    """
    Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newSchema":
            suggest = "new_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityMoveResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityMoveResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityMoveResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_schema: str):
        """
        Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
        :param str new_schema: The new schema
        """
        pulumi.set(__self__, "new_schema", new_schema)

    @property
    @pulumi.getter(name="newSchema")
    def new_schema(self) -> str:
        """
        The new schema
        """
        return pulumi.get(self, "new_schema")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class FilterTableColumnsResponse(dict):
    """
    Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeColumns":
            suggest = "exclude_columns"
        elif key == "includeColumns":
            suggest = "include_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterTableColumnsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterTableColumnsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterTableColumnsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_columns: Sequence[str],
                 include_columns: Sequence[str]):
        """
        Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
        :param Sequence[str] exclude_columns: Optional. List of columns to be excluded for a particular table.
        :param Sequence[str] include_columns: Optional. List of columns to be included for a particular table.
        """
        pulumi.set(__self__, "exclude_columns", exclude_columns)
        pulumi.set(__self__, "include_columns", include_columns)

    @property
    @pulumi.getter(name="excludeColumns")
    def exclude_columns(self) -> Sequence[str]:
        """
        Optional. List of columns to be excluded for a particular table.
        """
        return pulumi.get(self, "exclude_columns")

    @property
    @pulumi.getter(name="includeColumns")
    def include_columns(self) -> Sequence[str]:
        """
        Optional. List of columns to be included for a particular table.
        """
        return pulumi.get(self, "include_columns")


@pulumi.output_type
class ForwardSshTunnelConnectivityResponse(dict):
    """
    Forward SSH Tunnel connectivity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardSshTunnelConnectivityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardSshTunnelConnectivityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardSshTunnelConnectivityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 password: str,
                 port: int,
                 private_key: str,
                 username: str):
        """
        Forward SSH Tunnel connectivity.
        :param str hostname: Hostname for the SSH tunnel.
        :param str password: Input only. SSH password.
        :param int port: Port for the SSH tunnel, default value is 22.
        :param str private_key: Input only. SSH private key.
        :param str username: Username for the SSH tunnel.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname for the SSH tunnel.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. SSH password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for the SSH tunnel, default value is 22.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        """
        Input only. SSH private key.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for the SSH tunnel.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class IntComparisonFilterResponse(dict):
    """
    Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueComparison":
            suggest = "value_comparison"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntComparisonFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntComparisonFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntComparisonFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 value_comparison: str):
        """
        Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
        :param str value: Integer compare value to be used
        :param str value_comparison: Relation between source value and compare value
        """
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_comparison", value_comparison)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Integer compare value to be used
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueComparison")
    def value_comparison(self) -> str:
        """
        Relation between source value and compare value
        """
        return pulumi.get(self, "value_comparison")


@pulumi.output_type
class MachineConfigResponse(dict):
    """
    MachineConfig describes the configuration of a machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCount":
            suggest = "cpu_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_count: int):
        """
        MachineConfig describes the configuration of a machine.
        :param int cpu_count: The number of CPU's in the VM instance.
        """
        pulumi.set(__self__, "cpu_count", cpu_count)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> int:
        """
        The number of CPU's in the VM instance.
        """
        return pulumi.get(self, "cpu_count")


@pulumi.output_type
class MappingRuleFilterResponse(dict):
    """
    A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityNameContains":
            suggest = "entity_name_contains"
        elif key == "entityNamePrefix":
            suggest = "entity_name_prefix"
        elif key == "entityNameSuffix":
            suggest = "entity_name_suffix"
        elif key == "parentEntity":
            suggest = "parent_entity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MappingRuleFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MappingRuleFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MappingRuleFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entities: Sequence[str],
                 entity_name_contains: str,
                 entity_name_prefix: str,
                 entity_name_suffix: str,
                 parent_entity: str):
        """
        A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
        :param Sequence[str] entities: Optional. The rule should be applied to specific entities defined by their fully qualified names.
        :param str entity_name_contains: Optional. The rule should be applied to entities whose non-qualified name contains the given string.
        :param str entity_name_prefix: Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
        :param str entity_name_suffix: Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
        :param str parent_entity: Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
        """
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "entity_name_contains", entity_name_contains)
        pulumi.set(__self__, "entity_name_prefix", entity_name_prefix)
        pulumi.set(__self__, "entity_name_suffix", entity_name_suffix)
        pulumi.set(__self__, "parent_entity", parent_entity)

    @property
    @pulumi.getter
    def entities(self) -> Sequence[str]:
        """
        Optional. The rule should be applied to specific entities defined by their fully qualified names.
        """
        return pulumi.get(self, "entities")

    @property
    @pulumi.getter(name="entityNameContains")
    def entity_name_contains(self) -> str:
        """
        Optional. The rule should be applied to entities whose non-qualified name contains the given string.
        """
        return pulumi.get(self, "entity_name_contains")

    @property
    @pulumi.getter(name="entityNamePrefix")
    def entity_name_prefix(self) -> str:
        """
        Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
        """
        return pulumi.get(self, "entity_name_prefix")

    @property
    @pulumi.getter(name="entityNameSuffix")
    def entity_name_suffix(self) -> str:
        """
        Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
        """
        return pulumi.get(self, "entity_name_suffix")

    @property
    @pulumi.getter(name="parentEntity")
    def parent_entity(self) -> str:
        """
        Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
        """
        return pulumi.get(self, "parent_entity")


@pulumi.output_type
class MultiColumnDatatypeChangeResponse(dict):
    """
    Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customFeatures":
            suggest = "custom_features"
        elif key == "newDataType":
            suggest = "new_data_type"
        elif key == "overrideFractionalSecondsPrecision":
            suggest = "override_fractional_seconds_precision"
        elif key == "overrideLength":
            suggest = "override_length"
        elif key == "overridePrecision":
            suggest = "override_precision"
        elif key == "overrideScale":
            suggest = "override_scale"
        elif key == "sourceDataTypeFilter":
            suggest = "source_data_type_filter"
        elif key == "sourceNumericFilter":
            suggest = "source_numeric_filter"
        elif key == "sourceTextFilter":
            suggest = "source_text_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiColumnDatatypeChangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiColumnDatatypeChangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiColumnDatatypeChangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_features: Mapping[str, Any],
                 new_data_type: str,
                 override_fractional_seconds_precision: int,
                 override_length: str,
                 override_precision: int,
                 override_scale: int,
                 source_data_type_filter: str,
                 source_numeric_filter: 'outputs.SourceNumericFilterResponse',
                 source_text_filter: 'outputs.SourceTextFilterResponse'):
        """
        Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
        :param Mapping[str, Any] custom_features: Optional. Custom engine specific features.
        :param str new_data_type: New data type.
        :param int override_fractional_seconds_precision: Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
        :param str override_length: Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
        :param int override_precision: Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
        :param int override_scale: Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
        :param str source_data_type_filter: Filter on source data type.
        :param 'SourceNumericFilterResponse' source_numeric_filter: Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
        :param 'SourceTextFilterResponse' source_text_filter: Optional. Filter for text-based data types like varchar.
        """
        pulumi.set(__self__, "custom_features", custom_features)
        pulumi.set(__self__, "new_data_type", new_data_type)
        pulumi.set(__self__, "override_fractional_seconds_precision", override_fractional_seconds_precision)
        pulumi.set(__self__, "override_length", override_length)
        pulumi.set(__self__, "override_precision", override_precision)
        pulumi.set(__self__, "override_scale", override_scale)
        pulumi.set(__self__, "source_data_type_filter", source_data_type_filter)
        pulumi.set(__self__, "source_numeric_filter", source_numeric_filter)
        pulumi.set(__self__, "source_text_filter", source_text_filter)

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Mapping[str, Any]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @property
    @pulumi.getter(name="newDataType")
    def new_data_type(self) -> str:
        """
        New data type.
        """
        return pulumi.get(self, "new_data_type")

    @property
    @pulumi.getter(name="overrideFractionalSecondsPrecision")
    def override_fractional_seconds_precision(self) -> int:
        """
        Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
        """
        return pulumi.get(self, "override_fractional_seconds_precision")

    @property
    @pulumi.getter(name="overrideLength")
    def override_length(self) -> str:
        """
        Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
        """
        return pulumi.get(self, "override_length")

    @property
    @pulumi.getter(name="overridePrecision")
    def override_precision(self) -> int:
        """
        Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
        """
        return pulumi.get(self, "override_precision")

    @property
    @pulumi.getter(name="overrideScale")
    def override_scale(self) -> int:
        """
        Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
        """
        return pulumi.get(self, "override_scale")

    @property
    @pulumi.getter(name="sourceDataTypeFilter")
    def source_data_type_filter(self) -> str:
        """
        Filter on source data type.
        """
        return pulumi.get(self, "source_data_type_filter")

    @property
    @pulumi.getter(name="sourceNumericFilter")
    def source_numeric_filter(self) -> 'outputs.SourceNumericFilterResponse':
        """
        Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
        """
        return pulumi.get(self, "source_numeric_filter")

    @property
    @pulumi.getter(name="sourceTextFilter")
    def source_text_filter(self) -> 'outputs.SourceTextFilterResponse':
        """
        Optional. Filter for text-based data types like varchar.
        """
        return pulumi.get(self, "source_text_filter")


@pulumi.output_type
class MultiEntityRenameResponse(dict):
    """
    Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newNamePattern":
            suggest = "new_name_pattern"
        elif key == "sourceNameTransformation":
            suggest = "source_name_transformation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiEntityRenameResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiEntityRenameResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiEntityRenameResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name_pattern: str,
                 source_name_transformation: str):
        """
        Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
        :param str new_name_pattern: Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
        :param str source_name_transformation: Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
        """
        pulumi.set(__self__, "new_name_pattern", new_name_pattern)
        pulumi.set(__self__, "source_name_transformation", source_name_transformation)

    @property
    @pulumi.getter(name="newNamePattern")
    def new_name_pattern(self) -> str:
        """
        Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
        """
        return pulumi.get(self, "new_name_pattern")

    @property
    @pulumi.getter(name="sourceNameTransformation")
    def source_name_transformation(self) -> str:
        """
        Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
        """
        return pulumi.get(self, "source_name_transformation")


@pulumi.output_type
class MySqlConnectionProfileResponse(dict):
    """
    Specifies connection parameters required specifically for MySQL databases.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudSqlId":
            suggest = "cloud_sql_id"
        elif key == "passwordSet":
            suggest = "password_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MySqlConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MySqlConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MySqlConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_sql_id: str,
                 host: str,
                 password: str,
                 password_set: bool,
                 port: int,
                 ssl: 'outputs.SslConfigResponse',
                 username: str):
        """
        Specifies connection parameters required specifically for MySQL databases.
        :param str cloud_sql_id: If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        :param str host: The IP or hostname of the source MySQL database.
        :param str password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param bool password_set: Indicates If this connection profile password is stored.
        :param int port: The network port of the source MySQL database.
        :param 'SslConfigResponse' ssl: SSL configuration for the destination to connect to the source database.
        :param str username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        pulumi.set(__self__, "cloud_sql_id", cloud_sql_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_set", password_set)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="cloudSqlId")
    def cloud_sql_id(self) -> str:
        """
        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        """
        return pulumi.get(self, "cloud_sql_id")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The IP or hostname of the source MySQL database.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSet")
    def password_set(self) -> bool:
        """
        Indicates If this connection profile password is stored.
        """
        return pulumi.get(self, "password_set")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The network port of the source MySQL database.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def ssl(self) -> 'outputs.SslConfigResponse':
        """
        SSL configuration for the destination to connect to the source database.
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class OracleConnectionProfileResponse(dict):
    """
    Specifies connection parameters required specifically for Oracle databases.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseService":
            suggest = "database_service"
        elif key == "forwardSshConnectivity":
            suggest = "forward_ssh_connectivity"
        elif key == "passwordSet":
            suggest = "password_set"
        elif key == "privateConnectivity":
            suggest = "private_connectivity"
        elif key == "staticServiceIpConnectivity":
            suggest = "static_service_ip_connectivity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OracleConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OracleConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OracleConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_service: str,
                 forward_ssh_connectivity: 'outputs.ForwardSshTunnelConnectivityResponse',
                 host: str,
                 password: str,
                 password_set: bool,
                 port: int,
                 private_connectivity: 'outputs.PrivateConnectivityResponse',
                 ssl: 'outputs.SslConfigResponse',
                 static_service_ip_connectivity: 'outputs.StaticServiceIpConnectivityResponse',
                 username: str):
        """
        Specifies connection parameters required specifically for Oracle databases.
        :param str database_service: Database service for the Oracle connection.
        :param 'ForwardSshTunnelConnectivityResponse' forward_ssh_connectivity: Forward SSH tunnel connectivity.
        :param str host: The IP or hostname of the source Oracle database.
        :param str password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param bool password_set: Indicates whether a new password is included in the request.
        :param int port: The network port of the source Oracle database.
        :param 'PrivateConnectivityResponse' private_connectivity: Private connectivity.
        :param 'SslConfigResponse' ssl: SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
        :param 'StaticServiceIpConnectivityResponse' static_service_ip_connectivity: Static Service IP connectivity.
        :param str username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        pulumi.set(__self__, "database_service", database_service)
        pulumi.set(__self__, "forward_ssh_connectivity", forward_ssh_connectivity)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_set", password_set)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_connectivity", private_connectivity)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "static_service_ip_connectivity", static_service_ip_connectivity)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="databaseService")
    def database_service(self) -> str:
        """
        Database service for the Oracle connection.
        """
        return pulumi.get(self, "database_service")

    @property
    @pulumi.getter(name="forwardSshConnectivity")
    def forward_ssh_connectivity(self) -> 'outputs.ForwardSshTunnelConnectivityResponse':
        """
        Forward SSH tunnel connectivity.
        """
        return pulumi.get(self, "forward_ssh_connectivity")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The IP or hostname of the source Oracle database.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSet")
    def password_set(self) -> bool:
        """
        Indicates whether a new password is included in the request.
        """
        return pulumi.get(self, "password_set")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The network port of the source Oracle database.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateConnectivity")
    def private_connectivity(self) -> 'outputs.PrivateConnectivityResponse':
        """
        Private connectivity.
        """
        return pulumi.get(self, "private_connectivity")

    @property
    @pulumi.getter
    def ssl(self) -> 'outputs.SslConfigResponse':
        """
        SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="staticServiceIpConnectivity")
    def static_service_ip_connectivity(self) -> 'outputs.StaticServiceIpConnectivityResponse':
        """
        Static Service IP connectivity.
        """
        return pulumi.get(self, "static_service_ip_connectivity")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class PerformanceConfigResponse(dict):
    """
    Performance configuration definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dumpParallelLevel":
            suggest = "dump_parallel_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerformanceConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerformanceConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerformanceConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dump_parallel_level: str):
        """
        Performance configuration definition.
        :param str dump_parallel_level: Initial dump parallelism level.
        """
        pulumi.set(__self__, "dump_parallel_level", dump_parallel_level)

    @property
    @pulumi.getter(name="dumpParallelLevel")
    def dump_parallel_level(self) -> str:
        """
        Initial dump parallelism level.
        """
        return pulumi.get(self, "dump_parallel_level")


@pulumi.output_type
class PostgreSqlConnectionProfileResponse(dict):
    """
    Specifies connection parameters required specifically for PostgreSQL databases.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alloydbClusterId":
            suggest = "alloydb_cluster_id"
        elif key == "cloudSqlId":
            suggest = "cloud_sql_id"
        elif key == "networkArchitecture":
            suggest = "network_architecture"
        elif key == "passwordSet":
            suggest = "password_set"
        elif key == "privateServiceConnectConnectivity":
            suggest = "private_service_connect_connectivity"
        elif key == "staticIpConnectivity":
            suggest = "static_ip_connectivity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PostgreSqlConnectionProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PostgreSqlConnectionProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PostgreSqlConnectionProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alloydb_cluster_id: str,
                 cloud_sql_id: str,
                 host: str,
                 network_architecture: str,
                 password: str,
                 password_set: bool,
                 port: int,
                 private_service_connect_connectivity: 'outputs.PrivateServiceConnectConnectivityResponse',
                 ssl: 'outputs.SslConfigResponse',
                 static_ip_connectivity: 'outputs.StaticIpConnectivityResponse',
                 username: str):
        """
        Specifies connection parameters required specifically for PostgreSQL databases.
        :param str alloydb_cluster_id: Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
        :param str cloud_sql_id: If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        :param str host: The IP or hostname of the source PostgreSQL database.
        :param str network_architecture: If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
        :param str password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param bool password_set: Indicates If this connection profile password is stored.
        :param int port: The network port of the source PostgreSQL database.
        :param 'PrivateServiceConnectConnectivityResponse' private_service_connect_connectivity: Private service connect connectivity.
        :param 'SslConfigResponse' ssl: SSL configuration for the destination to connect to the source database.
        :param 'StaticIpConnectivityResponse' static_ip_connectivity: Static ip connectivity data (default, no additional details needed).
        :param str username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        pulumi.set(__self__, "alloydb_cluster_id", alloydb_cluster_id)
        pulumi.set(__self__, "cloud_sql_id", cloud_sql_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "network_architecture", network_architecture)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_set", password_set)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_service_connect_connectivity", private_service_connect_connectivity)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "static_ip_connectivity", static_ip_connectivity)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="alloydbClusterId")
    def alloydb_cluster_id(self) -> str:
        """
        Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
        """
        return pulumi.get(self, "alloydb_cluster_id")

    @property
    @pulumi.getter(name="cloudSqlId")
    def cloud_sql_id(self) -> str:
        """
        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        """
        return pulumi.get(self, "cloud_sql_id")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The IP or hostname of the source PostgreSQL database.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="networkArchitecture")
    def network_architecture(self) -> str:
        """
        If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
        """
        return pulumi.get(self, "network_architecture")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSet")
    def password_set(self) -> bool:
        """
        Indicates If this connection profile password is stored.
        """
        return pulumi.get(self, "password_set")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The network port of the source PostgreSQL database.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateServiceConnectConnectivity")
    def private_service_connect_connectivity(self) -> 'outputs.PrivateServiceConnectConnectivityResponse':
        """
        Private service connect connectivity.
        """
        return pulumi.get(self, "private_service_connect_connectivity")

    @property
    @pulumi.getter
    def ssl(self) -> 'outputs.SslConfigResponse':
        """
        SSL configuration for the destination to connect to the source database.
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="staticIpConnectivity")
    def static_ip_connectivity(self) -> 'outputs.StaticIpConnectivityResponse':
        """
        Static ip connectivity data (default, no additional details needed).
        """
        return pulumi.get(self, "static_ip_connectivity")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class PrimaryInstanceSettingsResponse(dict):
    """
    Settings for the cluster's primary instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseFlags":
            suggest = "database_flags"
        elif key == "machineConfig":
            suggest = "machine_config"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrimaryInstanceSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrimaryInstanceSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrimaryInstanceSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_flags: Mapping[str, str],
                 labels: Mapping[str, str],
                 machine_config: 'outputs.MachineConfigResponse',
                 private_ip: str):
        """
        Settings for the cluster's primary instance
        :param Mapping[str, str] database_flags: Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
        :param Mapping[str, str] labels: Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
        :param 'MachineConfigResponse' machine_config: Configuration for the machines that host the underlying database engine.
        :param str private_ip: The private IP address for the Instance. This is the connection endpoint for an end-user application.
        """
        pulumi.set(__self__, "database_flags", database_flags)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "machine_config", machine_config)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Mapping[str, str]:
        """
        Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
        """
        return pulumi.get(self, "database_flags")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> 'outputs.MachineConfigResponse':
        """
        Configuration for the machines that host the underlying database engine.
        """
        return pulumi.get(self, "machine_config")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP address for the Instance. This is the connection endpoint for an end-user application.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class PrivateConnectivityResponse(dict):
    """
    Private Connectivity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateConnection":
            suggest = "private_connection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateConnectivityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateConnectivityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateConnectivityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_connection: str):
        """
        Private Connectivity.
        :param str private_connection: The resource name (URI) of the private connection.
        """
        pulumi.set(__self__, "private_connection", private_connection)

    @property
    @pulumi.getter(name="privateConnection")
    def private_connection(self) -> str:
        """
        The resource name (URI) of the private connection.
        """
        return pulumi.get(self, "private_connection")


@pulumi.output_type
class PrivateServiceConnectConnectivityResponse(dict):
    """
    [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAttachment":
            suggest = "service_attachment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateServiceConnectConnectivityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateServiceConnectConnectivityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateServiceConnectConnectivityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_attachment: str):
        """
        [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
        :param str service_attachment: A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> str:
        """
        A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        return pulumi.get(self, "service_attachment")


@pulumi.output_type
class ReverseSshConnectivityResponse(dict):
    """
    The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmIp":
            suggest = "vm_ip"
        elif key == "vmPort":
            suggest = "vm_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReverseSshConnectivityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReverseSshConnectivityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReverseSshConnectivityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm: str,
                 vm_ip: str,
                 vm_port: int,
                 vpc: str):
        """
        The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
        :param str vm: The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param str vm_ip: The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param int vm_port: The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param str vpc: The name of the VPC to peer with the Cloud SQL private network.
        """
        pulumi.set(__self__, "vm", vm)
        pulumi.set(__self__, "vm_ip", vm_ip)
        pulumi.set(__self__, "vm_port", vm_port)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def vm(self) -> str:
        """
        The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm")

    @property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> str:
        """
        The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm_ip")

    @property
    @pulumi.getter(name="vmPort")
    def vm_port(self) -> int:
        """
        The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm_port")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        """
        The name of the VPC to peer with the Cloud SQL private network.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class RoundToScaleResponse(dict):
    """
    This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
    """
    def __init__(__self__, *,
                 scale: int):
        """
        This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
        :param int scale: Scale value to be used
        """
        pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def scale(self) -> int:
        """
        Scale value to be used
        """
        return pulumi.get(self, "scale")


@pulumi.output_type
class SetTablePrimaryKeyResponse(dict):
    """
    Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryKey":
            suggest = "primary_key"
        elif key == "primaryKeyColumns":
            suggest = "primary_key_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SetTablePrimaryKeyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SetTablePrimaryKeyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SetTablePrimaryKeyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_key: str,
                 primary_key_columns: Sequence[str]):
        """
        Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
        :param str primary_key: Optional. Name for the primary key
        :param Sequence[str] primary_key_columns: List of column names for the primary key
        """
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "primary_key_columns", primary_key_columns)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> str:
        """
        Optional. Name for the primary key
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter(name="primaryKeyColumns")
    def primary_key_columns(self) -> Sequence[str]:
        """
        List of column names for the primary key
        """
        return pulumi.get(self, "primary_key_columns")


@pulumi.output_type
class SingleColumnChangeResponse(dict):
    """
    Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayLength":
            suggest = "array_length"
        elif key == "autoGenerated":
            suggest = "auto_generated"
        elif key == "customFeatures":
            suggest = "custom_features"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "fractionalSecondsPrecision":
            suggest = "fractional_seconds_precision"
        elif key == "setValues":
            suggest = "set_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SingleColumnChangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SingleColumnChangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SingleColumnChangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array: bool,
                 array_length: int,
                 auto_generated: bool,
                 charset: str,
                 collation: str,
                 comment: str,
                 custom_features: Mapping[str, Any],
                 data_type: str,
                 fractional_seconds_precision: int,
                 length: str,
                 nullable: bool,
                 precision: int,
                 scale: int,
                 set_values: Sequence[str],
                 udt: bool):
        """
        Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
        :param bool array: Optional. Is the column of array type.
        :param int array_length: Optional. The length of the array, only relevant if the column type is an array.
        :param bool auto_generated: Optional. Is the column auto-generated/identity.
        :param str charset: Optional. Charset override - instead of table level charset.
        :param str collation: Optional. Collation override - instead of table level collation.
        :param str comment: Optional. Comment associated with the column.
        :param Mapping[str, Any] custom_features: Optional. Custom engine specific features.
        :param str data_type: Optional. Column data type name.
        :param int fractional_seconds_precision: Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
        :param str length: Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
        :param bool nullable: Optional. Is the column nullable.
        :param int precision: Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
        :param int scale: Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
        :param Sequence[str] set_values: Optional. Specifies the list of values allowed in the column.
        :param bool udt: Optional. Is the column a UDT (User-defined Type).
        """
        pulumi.set(__self__, "array", array)
        pulumi.set(__self__, "array_length", array_length)
        pulumi.set(__self__, "auto_generated", auto_generated)
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "collation", collation)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "custom_features", custom_features)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "fractional_seconds_precision", fractional_seconds_precision)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "nullable", nullable)
        pulumi.set(__self__, "precision", precision)
        pulumi.set(__self__, "scale", scale)
        pulumi.set(__self__, "set_values", set_values)
        pulumi.set(__self__, "udt", udt)

    @property
    @pulumi.getter
    def array(self) -> bool:
        """
        Optional. Is the column of array type.
        """
        return pulumi.get(self, "array")

    @property
    @pulumi.getter(name="arrayLength")
    def array_length(self) -> int:
        """
        Optional. The length of the array, only relevant if the column type is an array.
        """
        return pulumi.get(self, "array_length")

    @property
    @pulumi.getter(name="autoGenerated")
    def auto_generated(self) -> bool:
        """
        Optional. Is the column auto-generated/identity.
        """
        return pulumi.get(self, "auto_generated")

    @property
    @pulumi.getter
    def charset(self) -> str:
        """
        Optional. Charset override - instead of table level charset.
        """
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter
    def collation(self) -> str:
        """
        Optional. Collation override - instead of table level collation.
        """
        return pulumi.get(self, "collation")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Optional. Comment associated with the column.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Mapping[str, Any]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Optional. Column data type name.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="fractionalSecondsPrecision")
    def fractional_seconds_precision(self) -> int:
        """
        Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
        """
        return pulumi.get(self, "fractional_seconds_precision")

    @property
    @pulumi.getter
    def length(self) -> str:
        """
        Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def nullable(self) -> bool:
        """
        Optional. Is the column nullable.
        """
        return pulumi.get(self, "nullable")

    @property
    @pulumi.getter
    def precision(self) -> int:
        """
        Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def scale(self) -> int:
        """
        Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
        """
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Sequence[str]:
        """
        Optional. Specifies the list of values allowed in the column.
        """
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter
    def udt(self) -> bool:
        """
        Optional. Is the column a UDT (User-defined Type).
        """
        return pulumi.get(self, "udt")


@pulumi.output_type
class SingleEntityRenameResponse(dict):
    """
    Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SingleEntityRenameResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SingleEntityRenameResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SingleEntityRenameResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: str):
        """
        Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
        :param str new_name: The new name of the destination entity
        """
        pulumi.set(__self__, "new_name", new_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> str:
        """
        The new name of the destination entity
        """
        return pulumi.get(self, "new_name")


@pulumi.output_type
class SinglePackageChangeResponse(dict):
    """
    Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageBody":
            suggest = "package_body"
        elif key == "packageDescription":
            suggest = "package_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SinglePackageChangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SinglePackageChangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SinglePackageChangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_body: str,
                 package_description: str):
        """
        Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
        :param str package_body: Optional. Sql code for package body
        :param str package_description: Optional. Sql code for package description
        """
        pulumi.set(__self__, "package_body", package_body)
        pulumi.set(__self__, "package_description", package_description)

    @property
    @pulumi.getter(name="packageBody")
    def package_body(self) -> str:
        """
        Optional. Sql code for package body
        """
        return pulumi.get(self, "package_body")

    @property
    @pulumi.getter(name="packageDescription")
    def package_description(self) -> str:
        """
        Optional. Sql code for package description
        """
        return pulumi.get(self, "package_description")


@pulumi.output_type
class SourceNumericFilterResponse(dict):
    """
    Filter for fixed point number data types such as NUMERIC/NUMBER
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numericFilterOption":
            suggest = "numeric_filter_option"
        elif key == "sourceMaxPrecisionFilter":
            suggest = "source_max_precision_filter"
        elif key == "sourceMaxScaleFilter":
            suggest = "source_max_scale_filter"
        elif key == "sourceMinPrecisionFilter":
            suggest = "source_min_precision_filter"
        elif key == "sourceMinScaleFilter":
            suggest = "source_min_scale_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceNumericFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceNumericFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceNumericFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 numeric_filter_option: str,
                 source_max_precision_filter: int,
                 source_max_scale_filter: int,
                 source_min_precision_filter: int,
                 source_min_scale_filter: int):
        """
        Filter for fixed point number data types such as NUMERIC/NUMBER
        :param str numeric_filter_option: Enum to set the option defining the datatypes numeric filter has to be applied to
        :param int source_max_precision_filter: Optional. The filter will match columns with precision smaller than or equal to this number.
        :param int source_max_scale_filter: Optional. The filter will match columns with scale smaller than or equal to this number.
        :param int source_min_precision_filter: Optional. The filter will match columns with precision greater than or equal to this number.
        :param int source_min_scale_filter: Optional. The filter will match columns with scale greater than or equal to this number.
        """
        pulumi.set(__self__, "numeric_filter_option", numeric_filter_option)
        pulumi.set(__self__, "source_max_precision_filter", source_max_precision_filter)
        pulumi.set(__self__, "source_max_scale_filter", source_max_scale_filter)
        pulumi.set(__self__, "source_min_precision_filter", source_min_precision_filter)
        pulumi.set(__self__, "source_min_scale_filter", source_min_scale_filter)

    @property
    @pulumi.getter(name="numericFilterOption")
    def numeric_filter_option(self) -> str:
        """
        Enum to set the option defining the datatypes numeric filter has to be applied to
        """
        return pulumi.get(self, "numeric_filter_option")

    @property
    @pulumi.getter(name="sourceMaxPrecisionFilter")
    def source_max_precision_filter(self) -> int:
        """
        Optional. The filter will match columns with precision smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_precision_filter")

    @property
    @pulumi.getter(name="sourceMaxScaleFilter")
    def source_max_scale_filter(self) -> int:
        """
        Optional. The filter will match columns with scale smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_scale_filter")

    @property
    @pulumi.getter(name="sourceMinPrecisionFilter")
    def source_min_precision_filter(self) -> int:
        """
        Optional. The filter will match columns with precision greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_precision_filter")

    @property
    @pulumi.getter(name="sourceMinScaleFilter")
    def source_min_scale_filter(self) -> int:
        """
        Optional. The filter will match columns with scale greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_scale_filter")


@pulumi.output_type
class SourceSqlChangeResponse(dict):
    """
    Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqlCode":
            suggest = "sql_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSqlChangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSqlChangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSqlChangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sql_code: str):
        """
        Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
        :param str sql_code: Sql code for source (stored procedure, function, trigger or view)
        """
        pulumi.set(__self__, "sql_code", sql_code)

    @property
    @pulumi.getter(name="sqlCode")
    def sql_code(self) -> str:
        """
        Sql code for source (stored procedure, function, trigger or view)
        """
        return pulumi.get(self, "sql_code")


@pulumi.output_type
class SourceTextFilterResponse(dict):
    """
    Filter for text-based data types like varchar.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMaxLengthFilter":
            suggest = "source_max_length_filter"
        elif key == "sourceMinLengthFilter":
            suggest = "source_min_length_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceTextFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceTextFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceTextFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_max_length_filter: str,
                 source_min_length_filter: str):
        """
        Filter for text-based data types like varchar.
        :param str source_max_length_filter: Optional. The filter will match columns with length smaller than or equal to this number.
        :param str source_min_length_filter: Optional. The filter will match columns with length greater than or equal to this number.
        """
        pulumi.set(__self__, "source_max_length_filter", source_max_length_filter)
        pulumi.set(__self__, "source_min_length_filter", source_min_length_filter)

    @property
    @pulumi.getter(name="sourceMaxLengthFilter")
    def source_max_length_filter(self) -> str:
        """
        Optional. The filter will match columns with length smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_length_filter")

    @property
    @pulumi.getter(name="sourceMinLengthFilter")
    def source_min_length_filter(self) -> str:
        """
        Optional. The filter will match columns with length greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_length_filter")


@pulumi.output_type
class SqlAclEntryResponse(dict):
    """
    An entry for an Access Control list.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlAclEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlAclEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlAclEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_time: str,
                 label: str,
                 ttl: str,
                 value: str):
        """
        An entry for an Access Control list.
        :param str expire_time: The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
        :param str label: A label to identify this entry.
        :param str ttl: Input only. The time-to-leave of this access control entry.
        :param str value: The allowlisted value for the access control list.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A label to identify this entry.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        Input only. The time-to-leave of this access control entry.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The allowlisted value for the access control list.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlIpConfigResponse(dict):
    """
    IP Management configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedIpRange":
            suggest = "allocated_ip_range"
        elif key == "authorizedNetworks":
            suggest = "authorized_networks"
        elif key == "enableIpv4":
            suggest = "enable_ipv4"
        elif key == "privateNetwork":
            suggest = "private_network"
        elif key == "requireSsl":
            suggest = "require_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlIpConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlIpConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlIpConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_ip_range: str,
                 authorized_networks: Sequence['outputs.SqlAclEntryResponse'],
                 enable_ipv4: bool,
                 private_network: str,
                 require_ssl: bool):
        """
        IP Management configuration.
        :param str allocated_ip_range: Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
        :param Sequence['SqlAclEntryResponse'] authorized_networks: The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
        :param bool enable_ipv4: Whether the instance should be assigned an IPv4 address or not.
        :param str private_network: The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        :param bool require_ssl: Whether SSL connections over IP should be enforced or not.
        """
        pulumi.set(__self__, "allocated_ip_range", allocated_ip_range)
        pulumi.set(__self__, "authorized_networks", authorized_networks)
        pulumi.set(__self__, "enable_ipv4", enable_ipv4)
        pulumi.set(__self__, "private_network", private_network)
        pulumi.set(__self__, "require_ssl", require_ssl)

    @property
    @pulumi.getter(name="allocatedIpRange")
    def allocated_ip_range(self) -> str:
        """
        Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
        """
        return pulumi.get(self, "allocated_ip_range")

    @property
    @pulumi.getter(name="authorizedNetworks")
    def authorized_networks(self) -> Sequence['outputs.SqlAclEntryResponse']:
        """
        The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
        """
        return pulumi.get(self, "authorized_networks")

    @property
    @pulumi.getter(name="enableIpv4")
    def enable_ipv4(self) -> bool:
        """
        Whether the instance should be assigned an IPv4 address or not.
        """
        return pulumi.get(self, "enable_ipv4")

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> str:
        """
        The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        """
        return pulumi.get(self, "private_network")

    @property
    @pulumi.getter(name="requireSsl")
    def require_ssl(self) -> bool:
        """
        Whether SSL connections over IP should be enforced or not.
        """
        return pulumi.get(self, "require_ssl")


@pulumi.output_type
class SslConfigResponse(dict):
    """
    SSL configuration information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SslConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SslConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SslConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str,
                 type: str):
        """
        SSL configuration information.
        :param str ca_certificate: Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
        :param str client_certificate: Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
        :param str client_key: Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
        :param str type: The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
        """
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        """
        Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        """
        Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        """
        Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
        """
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class StaticIpConnectivityResponse(dict):
    """
    The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
    """
    def __init__(__self__):
        """
        The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
        """
        pass


@pulumi.output_type
class StaticServiceIpConnectivityResponse(dict):
    """
    Static IP address connectivity configured on service project.
    """
    def __init__(__self__):
        """
        Static IP address connectivity configured on service project.
        """
        pass


@pulumi.output_type
class StatusResponse(dict):
    """
    The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    """
    def __init__(__self__, *,
                 code: int,
                 details: Sequence[Mapping[str, Any]],
                 message: str):
        """
        The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
        :param int code: The status code, which should be an enum value of google.rpc.Code.
        :param Sequence[Mapping[str, Any]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param str message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence[Mapping[str, Any]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class UserPasswordResponse(dict):
    """
    The username/password for a database user. Used for specifying initial users at cluster creation time.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordSet":
            suggest = "password_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPasswordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPasswordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPasswordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 password_set: bool,
                 user: str):
        """
        The username/password for a database user. Used for specifying initial users at cluster creation time.
        :param str password: The initial password for the user.
        :param bool password_set: Indicates if the initial_user.password field has been set.
        :param str user: The database username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_set", password_set)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The initial password for the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordSet")
    def password_set(self) -> bool:
        """
        Indicates if the initial_user.password field has been set.
        """
        return pulumi.get(self, "password_set")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        The database username.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ValueListFilterResponse(dict):
    """
    A list of values to filter by in ConditionalColumnSetValue
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "valuePresentList":
            suggest = "value_present_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueListFilterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueListFilterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueListFilterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ignore_case: bool,
                 value_present_list: str,
                 values: Sequence[str]):
        """
        A list of values to filter by in ConditionalColumnSetValue
        :param bool ignore_case: Whether to ignore case when filtering by values. Defaults to false
        :param str value_present_list: Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
        :param Sequence[str] values: The list to be used to filter by
        """
        pulumi.set(__self__, "ignore_case", ignore_case)
        pulumi.set(__self__, "value_present_list", value_present_list)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> bool:
        """
        Whether to ignore case when filtering by values. Defaults to false
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="valuePresentList")
    def value_present_list(self) -> str:
        """
        Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
        """
        return pulumi.get(self, "value_present_list")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The list to be used to filter by
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ValueTransformationResponse(dict):
    """
    Description of data transformation during migration as part of the ConditionalColumnSetValue.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyHash":
            suggest = "apply_hash"
        elif key == "assignMaxValue":
            suggest = "assign_max_value"
        elif key == "assignMinValue":
            suggest = "assign_min_value"
        elif key == "assignNull":
            suggest = "assign_null"
        elif key == "assignSpecificValue":
            suggest = "assign_specific_value"
        elif key == "doubleComparison":
            suggest = "double_comparison"
        elif key == "intComparison":
            suggest = "int_comparison"
        elif key == "isNull":
            suggest = "is_null"
        elif key == "roundScale":
            suggest = "round_scale"
        elif key == "valueList":
            suggest = "value_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValueTransformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValueTransformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValueTransformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_hash: 'outputs.ApplyHashResponse',
                 assign_max_value: 'outputs.EmptyResponse',
                 assign_min_value: 'outputs.EmptyResponse',
                 assign_null: 'outputs.EmptyResponse',
                 assign_specific_value: 'outputs.AssignSpecificValueResponse',
                 double_comparison: 'outputs.DoubleComparisonFilterResponse',
                 int_comparison: 'outputs.IntComparisonFilterResponse',
                 is_null: 'outputs.EmptyResponse',
                 round_scale: 'outputs.RoundToScaleResponse',
                 value_list: 'outputs.ValueListFilterResponse'):
        """
        Description of data transformation during migration as part of the ConditionalColumnSetValue.
        :param 'ApplyHashResponse' apply_hash: Optional. Applies a hash function on the data
        :param 'EmptyResponse' assign_max_value: Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
        :param 'EmptyResponse' assign_min_value: Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
        :param 'EmptyResponse' assign_null: Optional. Set to null
        :param 'AssignSpecificValueResponse' assign_specific_value: Optional. Set to a specific value (value is converted to fit the target data type)
        :param 'DoubleComparisonFilterResponse' double_comparison: Optional. Filter on relation between source value and compare value of type double.
        :param 'IntComparisonFilterResponse' int_comparison: Optional. Filter on relation between source value and compare value of type integer.
        :param 'EmptyResponse' is_null: Optional. Value is null
        :param 'RoundToScaleResponse' round_scale: Optional. Allows the data to change scale
        :param 'ValueListFilterResponse' value_list: Optional. Value is found in the specified list.
        """
        pulumi.set(__self__, "apply_hash", apply_hash)
        pulumi.set(__self__, "assign_max_value", assign_max_value)
        pulumi.set(__self__, "assign_min_value", assign_min_value)
        pulumi.set(__self__, "assign_null", assign_null)
        pulumi.set(__self__, "assign_specific_value", assign_specific_value)
        pulumi.set(__self__, "double_comparison", double_comparison)
        pulumi.set(__self__, "int_comparison", int_comparison)
        pulumi.set(__self__, "is_null", is_null)
        pulumi.set(__self__, "round_scale", round_scale)
        pulumi.set(__self__, "value_list", value_list)

    @property
    @pulumi.getter(name="applyHash")
    def apply_hash(self) -> 'outputs.ApplyHashResponse':
        """
        Optional. Applies a hash function on the data
        """
        return pulumi.get(self, "apply_hash")

    @property
    @pulumi.getter(name="assignMaxValue")
    def assign_max_value(self) -> 'outputs.EmptyResponse':
        """
        Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
        """
        return pulumi.get(self, "assign_max_value")

    @property
    @pulumi.getter(name="assignMinValue")
    def assign_min_value(self) -> 'outputs.EmptyResponse':
        """
        Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
        """
        return pulumi.get(self, "assign_min_value")

    @property
    @pulumi.getter(name="assignNull")
    def assign_null(self) -> 'outputs.EmptyResponse':
        """
        Optional. Set to null
        """
        return pulumi.get(self, "assign_null")

    @property
    @pulumi.getter(name="assignSpecificValue")
    def assign_specific_value(self) -> 'outputs.AssignSpecificValueResponse':
        """
        Optional. Set to a specific value (value is converted to fit the target data type)
        """
        return pulumi.get(self, "assign_specific_value")

    @property
    @pulumi.getter(name="doubleComparison")
    def double_comparison(self) -> 'outputs.DoubleComparisonFilterResponse':
        """
        Optional. Filter on relation between source value and compare value of type double.
        """
        return pulumi.get(self, "double_comparison")

    @property
    @pulumi.getter(name="intComparison")
    def int_comparison(self) -> 'outputs.IntComparisonFilterResponse':
        """
        Optional. Filter on relation between source value and compare value of type integer.
        """
        return pulumi.get(self, "int_comparison")

    @property
    @pulumi.getter(name="isNull")
    def is_null(self) -> 'outputs.EmptyResponse':
        """
        Optional. Value is null
        """
        return pulumi.get(self, "is_null")

    @property
    @pulumi.getter(name="roundScale")
    def round_scale(self) -> 'outputs.RoundToScaleResponse':
        """
        Optional. Allows the data to change scale
        """
        return pulumi.get(self, "round_scale")

    @property
    @pulumi.getter(name="valueList")
    def value_list(self) -> 'outputs.ValueListFilterResponse':
        """
        Optional. Value is found in the specified list.
        """
        return pulumi.get(self, "value_list")


@pulumi.output_type
class VpcPeeringConfigResponse(dict):
    """
    The VPC peering configuration is used to create VPC peering with the consumer's VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcName":
            suggest = "vpc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcPeeringConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcPeeringConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcPeeringConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet: str,
                 vpc_name: str):
        """
        The VPC peering configuration is used to create VPC peering with the consumer's VPC.
        :param str subnet: A free subnet for peering. (CIDR of /29)
        :param str vpc_name: Fully qualified name of the VPC that Database Migration Service will peer to.
        """
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        A free subnet for peering. (CIDR of /29)
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        Fully qualified name of the VPC that Database Migration Service will peer to.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class VpcPeeringConnectivityResponse(dict):
    """
    The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
    """
    def __init__(__self__, *,
                 vpc: str):
        """
        The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
        :param str vpc: The name of the VPC network to peer with the Cloud SQL private network.
        """
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def vpc(self) -> str:
        """
        The name of the VPC network to peer with the Cloud SQL private network.
        """
        return pulumi.get(self, "vpc")


