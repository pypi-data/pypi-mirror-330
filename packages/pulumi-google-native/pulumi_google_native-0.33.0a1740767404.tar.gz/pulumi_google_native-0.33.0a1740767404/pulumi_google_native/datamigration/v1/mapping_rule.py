# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['MappingRuleArgs', 'MappingRule']

@pulumi.input_type
class MappingRuleArgs:
    def __init__(__self__, *,
                 conversion_workspace_id: pulumi.Input[str],
                 filter: pulumi.Input['MappingRuleFilterArgs'],
                 mapping_rule_id: pulumi.Input[str],
                 rule_order: pulumi.Input[str],
                 rule_scope: pulumi.Input['MappingRuleRuleScope'],
                 conditional_column_set_value: Optional[pulumi.Input['ConditionalColumnSetValueArgs']] = None,
                 convert_rowid_column: Optional[pulumi.Input['ConvertRowIdToColumnArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entity_move: Optional[pulumi.Input['EntityMoveArgs']] = None,
                 filter_table_columns: Optional[pulumi.Input['FilterTableColumnsArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 multi_column_data_type_change: Optional[pulumi.Input['MultiColumnDatatypeChangeArgs']] = None,
                 multi_entity_rename: Optional[pulumi.Input['MultiEntityRenameArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 set_table_primary_key: Optional[pulumi.Input['SetTablePrimaryKeyArgs']] = None,
                 single_column_change: Optional[pulumi.Input['SingleColumnChangeArgs']] = None,
                 single_entity_rename: Optional[pulumi.Input['SingleEntityRenameArgs']] = None,
                 single_package_change: Optional[pulumi.Input['SinglePackageChangeArgs']] = None,
                 source_sql_change: Optional[pulumi.Input['SourceSqlChangeArgs']] = None,
                 state: Optional[pulumi.Input['MappingRuleState']] = None):
        """
        The set of arguments for constructing a MappingRule resource.
        :param pulumi.Input['MappingRuleFilterArgs'] filter: The rule filter
        :param pulumi.Input[str] mapping_rule_id: Required. The ID of the rule to create.
        :param pulumi.Input[str] rule_order: The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        :param pulumi.Input['MappingRuleRuleScope'] rule_scope: The rule scope
        :param pulumi.Input['ConditionalColumnSetValueArgs'] conditional_column_set_value: Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        :param pulumi.Input['ConvertRowIdToColumnArgs'] convert_rowid_column: Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        :param pulumi.Input[str] display_name: Optional. A human readable name
        :param pulumi.Input['EntityMoveArgs'] entity_move: Optional. Rule to specify how multiple entities should be relocated into a different schema.
        :param pulumi.Input['FilterTableColumnsArgs'] filter_table_columns: Optional. Rule to specify the list of columns to include or exclude from a table.
        :param pulumi.Input['MultiColumnDatatypeChangeArgs'] multi_column_data_type_change: Optional. Rule to specify how multiple columns should be converted to a different data type.
        :param pulumi.Input['MultiEntityRenameArgs'] multi_entity_rename: Optional. Rule to specify how multiple entities should be renamed.
        :param pulumi.Input[str] name: Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        :param pulumi.Input[str] request_id: A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        :param pulumi.Input['SetTablePrimaryKeyArgs'] set_table_primary_key: Optional. Rule to specify the primary key for a table
        :param pulumi.Input['SingleColumnChangeArgs'] single_column_change: Optional. Rule to specify how a single column is converted.
        :param pulumi.Input['SingleEntityRenameArgs'] single_entity_rename: Optional. Rule to specify how a single entity should be renamed.
        :param pulumi.Input['SinglePackageChangeArgs'] single_package_change: Optional. Rule to specify how a single package is converted.
        :param pulumi.Input['SourceSqlChangeArgs'] source_sql_change: Optional. Rule to change the sql code for an entity, for example, function, procedure.
        :param pulumi.Input['MappingRuleState'] state: Optional. The mapping rule state
        """
        pulumi.set(__self__, "conversion_workspace_id", conversion_workspace_id)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "mapping_rule_id", mapping_rule_id)
        pulumi.set(__self__, "rule_order", rule_order)
        pulumi.set(__self__, "rule_scope", rule_scope)
        if conditional_column_set_value is not None:
            pulumi.set(__self__, "conditional_column_set_value", conditional_column_set_value)
        if convert_rowid_column is not None:
            pulumi.set(__self__, "convert_rowid_column", convert_rowid_column)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_move is not None:
            pulumi.set(__self__, "entity_move", entity_move)
        if filter_table_columns is not None:
            pulumi.set(__self__, "filter_table_columns", filter_table_columns)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if multi_column_data_type_change is not None:
            pulumi.set(__self__, "multi_column_data_type_change", multi_column_data_type_change)
        if multi_entity_rename is not None:
            pulumi.set(__self__, "multi_entity_rename", multi_entity_rename)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if set_table_primary_key is not None:
            pulumi.set(__self__, "set_table_primary_key", set_table_primary_key)
        if single_column_change is not None:
            pulumi.set(__self__, "single_column_change", single_column_change)
        if single_entity_rename is not None:
            pulumi.set(__self__, "single_entity_rename", single_entity_rename)
        if single_package_change is not None:
            pulumi.set(__self__, "single_package_change", single_package_change)
        if source_sql_change is not None:
            pulumi.set(__self__, "source_sql_change", source_sql_change)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="conversionWorkspaceId")
    def conversion_workspace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "conversion_workspace_id")

    @conversion_workspace_id.setter
    def conversion_workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "conversion_workspace_id", value)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['MappingRuleFilterArgs']:
        """
        The rule filter
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['MappingRuleFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="mappingRuleId")
    def mapping_rule_id(self) -> pulumi.Input[str]:
        """
        Required. The ID of the rule to create.
        """
        return pulumi.get(self, "mapping_rule_id")

    @mapping_rule_id.setter
    def mapping_rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mapping_rule_id", value)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> pulumi.Input[str]:
        """
        The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        """
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_order", value)

    @property
    @pulumi.getter(name="ruleScope")
    def rule_scope(self) -> pulumi.Input['MappingRuleRuleScope']:
        """
        The rule scope
        """
        return pulumi.get(self, "rule_scope")

    @rule_scope.setter
    def rule_scope(self, value: pulumi.Input['MappingRuleRuleScope']):
        pulumi.set(self, "rule_scope", value)

    @property
    @pulumi.getter(name="conditionalColumnSetValue")
    def conditional_column_set_value(self) -> Optional[pulumi.Input['ConditionalColumnSetValueArgs']]:
        """
        Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        """
        return pulumi.get(self, "conditional_column_set_value")

    @conditional_column_set_value.setter
    def conditional_column_set_value(self, value: Optional[pulumi.Input['ConditionalColumnSetValueArgs']]):
        pulumi.set(self, "conditional_column_set_value", value)

    @property
    @pulumi.getter(name="convertRowidColumn")
    def convert_rowid_column(self) -> Optional[pulumi.Input['ConvertRowIdToColumnArgs']]:
        """
        Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        """
        return pulumi.get(self, "convert_rowid_column")

    @convert_rowid_column.setter
    def convert_rowid_column(self, value: Optional[pulumi.Input['ConvertRowIdToColumnArgs']]):
        pulumi.set(self, "convert_rowid_column", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A human readable name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="entityMove")
    def entity_move(self) -> Optional[pulumi.Input['EntityMoveArgs']]:
        """
        Optional. Rule to specify how multiple entities should be relocated into a different schema.
        """
        return pulumi.get(self, "entity_move")

    @entity_move.setter
    def entity_move(self, value: Optional[pulumi.Input['EntityMoveArgs']]):
        pulumi.set(self, "entity_move", value)

    @property
    @pulumi.getter(name="filterTableColumns")
    def filter_table_columns(self) -> Optional[pulumi.Input['FilterTableColumnsArgs']]:
        """
        Optional. Rule to specify the list of columns to include or exclude from a table.
        """
        return pulumi.get(self, "filter_table_columns")

    @filter_table_columns.setter
    def filter_table_columns(self, value: Optional[pulumi.Input['FilterTableColumnsArgs']]):
        pulumi.set(self, "filter_table_columns", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="multiColumnDataTypeChange")
    def multi_column_data_type_change(self) -> Optional[pulumi.Input['MultiColumnDatatypeChangeArgs']]:
        """
        Optional. Rule to specify how multiple columns should be converted to a different data type.
        """
        return pulumi.get(self, "multi_column_data_type_change")

    @multi_column_data_type_change.setter
    def multi_column_data_type_change(self, value: Optional[pulumi.Input['MultiColumnDatatypeChangeArgs']]):
        pulumi.set(self, "multi_column_data_type_change", value)

    @property
    @pulumi.getter(name="multiEntityRename")
    def multi_entity_rename(self) -> Optional[pulumi.Input['MultiEntityRenameArgs']]:
        """
        Optional. Rule to specify how multiple entities should be renamed.
        """
        return pulumi.get(self, "multi_entity_rename")

    @multi_entity_rename.setter
    def multi_entity_rename(self, value: Optional[pulumi.Input['MultiEntityRenameArgs']]):
        pulumi.set(self, "multi_entity_rename", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="setTablePrimaryKey")
    def set_table_primary_key(self) -> Optional[pulumi.Input['SetTablePrimaryKeyArgs']]:
        """
        Optional. Rule to specify the primary key for a table
        """
        return pulumi.get(self, "set_table_primary_key")

    @set_table_primary_key.setter
    def set_table_primary_key(self, value: Optional[pulumi.Input['SetTablePrimaryKeyArgs']]):
        pulumi.set(self, "set_table_primary_key", value)

    @property
    @pulumi.getter(name="singleColumnChange")
    def single_column_change(self) -> Optional[pulumi.Input['SingleColumnChangeArgs']]:
        """
        Optional. Rule to specify how a single column is converted.
        """
        return pulumi.get(self, "single_column_change")

    @single_column_change.setter
    def single_column_change(self, value: Optional[pulumi.Input['SingleColumnChangeArgs']]):
        pulumi.set(self, "single_column_change", value)

    @property
    @pulumi.getter(name="singleEntityRename")
    def single_entity_rename(self) -> Optional[pulumi.Input['SingleEntityRenameArgs']]:
        """
        Optional. Rule to specify how a single entity should be renamed.
        """
        return pulumi.get(self, "single_entity_rename")

    @single_entity_rename.setter
    def single_entity_rename(self, value: Optional[pulumi.Input['SingleEntityRenameArgs']]):
        pulumi.set(self, "single_entity_rename", value)

    @property
    @pulumi.getter(name="singlePackageChange")
    def single_package_change(self) -> Optional[pulumi.Input['SinglePackageChangeArgs']]:
        """
        Optional. Rule to specify how a single package is converted.
        """
        return pulumi.get(self, "single_package_change")

    @single_package_change.setter
    def single_package_change(self, value: Optional[pulumi.Input['SinglePackageChangeArgs']]):
        pulumi.set(self, "single_package_change", value)

    @property
    @pulumi.getter(name="sourceSqlChange")
    def source_sql_change(self) -> Optional[pulumi.Input['SourceSqlChangeArgs']]:
        """
        Optional. Rule to change the sql code for an entity, for example, function, procedure.
        """
        return pulumi.get(self, "source_sql_change")

    @source_sql_change.setter
    def source_sql_change(self, value: Optional[pulumi.Input['SourceSqlChangeArgs']]):
        pulumi.set(self, "source_sql_change", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['MappingRuleState']]:
        """
        Optional. The mapping rule state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['MappingRuleState']]):
        pulumi.set(self, "state", value)


class MappingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_column_set_value: Optional[pulumi.Input[pulumi.InputType['ConditionalColumnSetValueArgs']]] = None,
                 conversion_workspace_id: Optional[pulumi.Input[str]] = None,
                 convert_rowid_column: Optional[pulumi.Input[pulumi.InputType['ConvertRowIdToColumnArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entity_move: Optional[pulumi.Input[pulumi.InputType['EntityMoveArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['MappingRuleFilterArgs']]] = None,
                 filter_table_columns: Optional[pulumi.Input[pulumi.InputType['FilterTableColumnsArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mapping_rule_id: Optional[pulumi.Input[str]] = None,
                 multi_column_data_type_change: Optional[pulumi.Input[pulumi.InputType['MultiColumnDatatypeChangeArgs']]] = None,
                 multi_entity_rename: Optional[pulumi.Input[pulumi.InputType['MultiEntityRenameArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rule_order: Optional[pulumi.Input[str]] = None,
                 rule_scope: Optional[pulumi.Input['MappingRuleRuleScope']] = None,
                 set_table_primary_key: Optional[pulumi.Input[pulumi.InputType['SetTablePrimaryKeyArgs']]] = None,
                 single_column_change: Optional[pulumi.Input[pulumi.InputType['SingleColumnChangeArgs']]] = None,
                 single_entity_rename: Optional[pulumi.Input[pulumi.InputType['SingleEntityRenameArgs']]] = None,
                 single_package_change: Optional[pulumi.Input[pulumi.InputType['SinglePackageChangeArgs']]] = None,
                 source_sql_change: Optional[pulumi.Input[pulumi.InputType['SourceSqlChangeArgs']]] = None,
                 state: Optional[pulumi.Input['MappingRuleState']] = None,
                 __props__=None):
        """
        Creates a new mapping rule for a given conversion workspace.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConditionalColumnSetValueArgs']] conditional_column_set_value: Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        :param pulumi.Input[pulumi.InputType['ConvertRowIdToColumnArgs']] convert_rowid_column: Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        :param pulumi.Input[str] display_name: Optional. A human readable name
        :param pulumi.Input[pulumi.InputType['EntityMoveArgs']] entity_move: Optional. Rule to specify how multiple entities should be relocated into a different schema.
        :param pulumi.Input[pulumi.InputType['MappingRuleFilterArgs']] filter: The rule filter
        :param pulumi.Input[pulumi.InputType['FilterTableColumnsArgs']] filter_table_columns: Optional. Rule to specify the list of columns to include or exclude from a table.
        :param pulumi.Input[str] mapping_rule_id: Required. The ID of the rule to create.
        :param pulumi.Input[pulumi.InputType['MultiColumnDatatypeChangeArgs']] multi_column_data_type_change: Optional. Rule to specify how multiple columns should be converted to a different data type.
        :param pulumi.Input[pulumi.InputType['MultiEntityRenameArgs']] multi_entity_rename: Optional. Rule to specify how multiple entities should be renamed.
        :param pulumi.Input[str] name: Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        :param pulumi.Input[str] request_id: A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        :param pulumi.Input[str] rule_order: The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        :param pulumi.Input['MappingRuleRuleScope'] rule_scope: The rule scope
        :param pulumi.Input[pulumi.InputType['SetTablePrimaryKeyArgs']] set_table_primary_key: Optional. Rule to specify the primary key for a table
        :param pulumi.Input[pulumi.InputType['SingleColumnChangeArgs']] single_column_change: Optional. Rule to specify how a single column is converted.
        :param pulumi.Input[pulumi.InputType['SingleEntityRenameArgs']] single_entity_rename: Optional. Rule to specify how a single entity should be renamed.
        :param pulumi.Input[pulumi.InputType['SinglePackageChangeArgs']] single_package_change: Optional. Rule to specify how a single package is converted.
        :param pulumi.Input[pulumi.InputType['SourceSqlChangeArgs']] source_sql_change: Optional. Rule to change the sql code for an entity, for example, function, procedure.
        :param pulumi.Input['MappingRuleState'] state: Optional. The mapping rule state
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MappingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new mapping rule for a given conversion workspace.

        :param str resource_name: The name of the resource.
        :param MappingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MappingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_column_set_value: Optional[pulumi.Input[pulumi.InputType['ConditionalColumnSetValueArgs']]] = None,
                 conversion_workspace_id: Optional[pulumi.Input[str]] = None,
                 convert_rowid_column: Optional[pulumi.Input[pulumi.InputType['ConvertRowIdToColumnArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entity_move: Optional[pulumi.Input[pulumi.InputType['EntityMoveArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['MappingRuleFilterArgs']]] = None,
                 filter_table_columns: Optional[pulumi.Input[pulumi.InputType['FilterTableColumnsArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mapping_rule_id: Optional[pulumi.Input[str]] = None,
                 multi_column_data_type_change: Optional[pulumi.Input[pulumi.InputType['MultiColumnDatatypeChangeArgs']]] = None,
                 multi_entity_rename: Optional[pulumi.Input[pulumi.InputType['MultiEntityRenameArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rule_order: Optional[pulumi.Input[str]] = None,
                 rule_scope: Optional[pulumi.Input['MappingRuleRuleScope']] = None,
                 set_table_primary_key: Optional[pulumi.Input[pulumi.InputType['SetTablePrimaryKeyArgs']]] = None,
                 single_column_change: Optional[pulumi.Input[pulumi.InputType['SingleColumnChangeArgs']]] = None,
                 single_entity_rename: Optional[pulumi.Input[pulumi.InputType['SingleEntityRenameArgs']]] = None,
                 single_package_change: Optional[pulumi.Input[pulumi.InputType['SinglePackageChangeArgs']]] = None,
                 source_sql_change: Optional[pulumi.Input[pulumi.InputType['SourceSqlChangeArgs']]] = None,
                 state: Optional[pulumi.Input['MappingRuleState']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MappingRuleArgs.__new__(MappingRuleArgs)

            __props__.__dict__["conditional_column_set_value"] = conditional_column_set_value
            if conversion_workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'conversion_workspace_id'")
            __props__.__dict__["conversion_workspace_id"] = conversion_workspace_id
            __props__.__dict__["convert_rowid_column"] = convert_rowid_column
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["entity_move"] = entity_move
            if filter is None and not opts.urn:
                raise TypeError("Missing required property 'filter'")
            __props__.__dict__["filter"] = filter
            __props__.__dict__["filter_table_columns"] = filter_table_columns
            __props__.__dict__["location"] = location
            if mapping_rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'mapping_rule_id'")
            __props__.__dict__["mapping_rule_id"] = mapping_rule_id
            __props__.__dict__["multi_column_data_type_change"] = multi_column_data_type_change
            __props__.__dict__["multi_entity_rename"] = multi_entity_rename
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            if rule_order is None and not opts.urn:
                raise TypeError("Missing required property 'rule_order'")
            __props__.__dict__["rule_order"] = rule_order
            if rule_scope is None and not opts.urn:
                raise TypeError("Missing required property 'rule_scope'")
            __props__.__dict__["rule_scope"] = rule_scope
            __props__.__dict__["set_table_primary_key"] = set_table_primary_key
            __props__.__dict__["single_column_change"] = single_column_change
            __props__.__dict__["single_entity_rename"] = single_entity_rename
            __props__.__dict__["single_package_change"] = single_package_change
            __props__.__dict__["source_sql_change"] = source_sql_change
            __props__.__dict__["state"] = state
            __props__.__dict__["revision_create_time"] = None
            __props__.__dict__["revision_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["conversionWorkspaceId", "location", "mappingRuleId", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(MappingRule, __self__).__init__(
            'google-native:datamigration/v1:MappingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MappingRule':
        """
        Get an existing MappingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MappingRuleArgs.__new__(MappingRuleArgs)

        __props__.__dict__["conditional_column_set_value"] = None
        __props__.__dict__["conversion_workspace_id"] = None
        __props__.__dict__["convert_rowid_column"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["entity_move"] = None
        __props__.__dict__["filter"] = None
        __props__.__dict__["filter_table_columns"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["mapping_rule_id"] = None
        __props__.__dict__["multi_column_data_type_change"] = None
        __props__.__dict__["multi_entity_rename"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["revision_create_time"] = None
        __props__.__dict__["revision_id"] = None
        __props__.__dict__["rule_order"] = None
        __props__.__dict__["rule_scope"] = None
        __props__.__dict__["set_table_primary_key"] = None
        __props__.__dict__["single_column_change"] = None
        __props__.__dict__["single_entity_rename"] = None
        __props__.__dict__["single_package_change"] = None
        __props__.__dict__["source_sql_change"] = None
        __props__.__dict__["state"] = None
        return MappingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="conditionalColumnSetValue")
    def conditional_column_set_value(self) -> pulumi.Output['outputs.ConditionalColumnSetValueResponse']:
        """
        Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        """
        return pulumi.get(self, "conditional_column_set_value")

    @property
    @pulumi.getter(name="conversionWorkspaceId")
    def conversion_workspace_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "conversion_workspace_id")

    @property
    @pulumi.getter(name="convertRowidColumn")
    def convert_rowid_column(self) -> pulumi.Output['outputs.ConvertRowIdToColumnResponse']:
        """
        Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        """
        return pulumi.get(self, "convert_rowid_column")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Optional. A human readable name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityMove")
    def entity_move(self) -> pulumi.Output['outputs.EntityMoveResponse']:
        """
        Optional. Rule to specify how multiple entities should be relocated into a different schema.
        """
        return pulumi.get(self, "entity_move")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output['outputs.MappingRuleFilterResponse']:
        """
        The rule filter
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterTableColumns")
    def filter_table_columns(self) -> pulumi.Output['outputs.FilterTableColumnsResponse']:
        """
        Optional. Rule to specify the list of columns to include or exclude from a table.
        """
        return pulumi.get(self, "filter_table_columns")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="mappingRuleId")
    def mapping_rule_id(self) -> pulumi.Output[str]:
        """
        Required. The ID of the rule to create.
        """
        return pulumi.get(self, "mapping_rule_id")

    @property
    @pulumi.getter(name="multiColumnDataTypeChange")
    def multi_column_data_type_change(self) -> pulumi.Output['outputs.MultiColumnDatatypeChangeResponse']:
        """
        Optional. Rule to specify how multiple columns should be converted to a different data type.
        """
        return pulumi.get(self, "multi_column_data_type_change")

    @property
    @pulumi.getter(name="multiEntityRename")
    def multi_entity_rename(self) -> pulumi.Output['outputs.MultiEntityRenameResponse']:
        """
        Optional. Rule to specify how multiple entities should be renamed.
        """
        return pulumi.get(self, "multi_entity_rename")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="revisionCreateTime")
    def revision_create_time(self) -> pulumi.Output[str]:
        """
        The timestamp that the revision was created.
        """
        return pulumi.get(self, "revision_create_time")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> pulumi.Output[str]:
        """
        The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
        """
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> pulumi.Output[str]:
        """
        The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        """
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="ruleScope")
    def rule_scope(self) -> pulumi.Output[str]:
        """
        The rule scope
        """
        return pulumi.get(self, "rule_scope")

    @property
    @pulumi.getter(name="setTablePrimaryKey")
    def set_table_primary_key(self) -> pulumi.Output['outputs.SetTablePrimaryKeyResponse']:
        """
        Optional. Rule to specify the primary key for a table
        """
        return pulumi.get(self, "set_table_primary_key")

    @property
    @pulumi.getter(name="singleColumnChange")
    def single_column_change(self) -> pulumi.Output['outputs.SingleColumnChangeResponse']:
        """
        Optional. Rule to specify how a single column is converted.
        """
        return pulumi.get(self, "single_column_change")

    @property
    @pulumi.getter(name="singleEntityRename")
    def single_entity_rename(self) -> pulumi.Output['outputs.SingleEntityRenameResponse']:
        """
        Optional. Rule to specify how a single entity should be renamed.
        """
        return pulumi.get(self, "single_entity_rename")

    @property
    @pulumi.getter(name="singlePackageChange")
    def single_package_change(self) -> pulumi.Output['outputs.SinglePackageChangeResponse']:
        """
        Optional. Rule to specify how a single package is converted.
        """
        return pulumi.get(self, "single_package_change")

    @property
    @pulumi.getter(name="sourceSqlChange")
    def source_sql_change(self) -> pulumi.Output['outputs.SourceSqlChangeResponse']:
        """
        Optional. Rule to change the sql code for an entity, for example, function, procedure.
        """
        return pulumi.get(self, "source_sql_change")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Optional. The mapping rule state
        """
        return pulumi.get(self, "state")

