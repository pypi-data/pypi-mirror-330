# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMappingRuleResult',
    'AwaitableGetMappingRuleResult',
    'get_mapping_rule',
    'get_mapping_rule_output',
]

@pulumi.output_type
class GetMappingRuleResult:
    def __init__(__self__, conditional_column_set_value=None, convert_rowid_column=None, display_name=None, entity_move=None, filter=None, filter_table_columns=None, multi_column_data_type_change=None, multi_entity_rename=None, name=None, revision_create_time=None, revision_id=None, rule_order=None, rule_scope=None, set_table_primary_key=None, single_column_change=None, single_entity_rename=None, single_package_change=None, source_sql_change=None, state=None):
        if conditional_column_set_value and not isinstance(conditional_column_set_value, dict):
            raise TypeError("Expected argument 'conditional_column_set_value' to be a dict")
        pulumi.set(__self__, "conditional_column_set_value", conditional_column_set_value)
        if convert_rowid_column and not isinstance(convert_rowid_column, dict):
            raise TypeError("Expected argument 'convert_rowid_column' to be a dict")
        pulumi.set(__self__, "convert_rowid_column", convert_rowid_column)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if entity_move and not isinstance(entity_move, dict):
            raise TypeError("Expected argument 'entity_move' to be a dict")
        pulumi.set(__self__, "entity_move", entity_move)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if filter_table_columns and not isinstance(filter_table_columns, dict):
            raise TypeError("Expected argument 'filter_table_columns' to be a dict")
        pulumi.set(__self__, "filter_table_columns", filter_table_columns)
        if multi_column_data_type_change and not isinstance(multi_column_data_type_change, dict):
            raise TypeError("Expected argument 'multi_column_data_type_change' to be a dict")
        pulumi.set(__self__, "multi_column_data_type_change", multi_column_data_type_change)
        if multi_entity_rename and not isinstance(multi_entity_rename, dict):
            raise TypeError("Expected argument 'multi_entity_rename' to be a dict")
        pulumi.set(__self__, "multi_entity_rename", multi_entity_rename)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if revision_create_time and not isinstance(revision_create_time, str):
            raise TypeError("Expected argument 'revision_create_time' to be a str")
        pulumi.set(__self__, "revision_create_time", revision_create_time)
        if revision_id and not isinstance(revision_id, str):
            raise TypeError("Expected argument 'revision_id' to be a str")
        pulumi.set(__self__, "revision_id", revision_id)
        if rule_order and not isinstance(rule_order, str):
            raise TypeError("Expected argument 'rule_order' to be a str")
        pulumi.set(__self__, "rule_order", rule_order)
        if rule_scope and not isinstance(rule_scope, str):
            raise TypeError("Expected argument 'rule_scope' to be a str")
        pulumi.set(__self__, "rule_scope", rule_scope)
        if set_table_primary_key and not isinstance(set_table_primary_key, dict):
            raise TypeError("Expected argument 'set_table_primary_key' to be a dict")
        pulumi.set(__self__, "set_table_primary_key", set_table_primary_key)
        if single_column_change and not isinstance(single_column_change, dict):
            raise TypeError("Expected argument 'single_column_change' to be a dict")
        pulumi.set(__self__, "single_column_change", single_column_change)
        if single_entity_rename and not isinstance(single_entity_rename, dict):
            raise TypeError("Expected argument 'single_entity_rename' to be a dict")
        pulumi.set(__self__, "single_entity_rename", single_entity_rename)
        if single_package_change and not isinstance(single_package_change, dict):
            raise TypeError("Expected argument 'single_package_change' to be a dict")
        pulumi.set(__self__, "single_package_change", single_package_change)
        if source_sql_change and not isinstance(source_sql_change, dict):
            raise TypeError("Expected argument 'source_sql_change' to be a dict")
        pulumi.set(__self__, "source_sql_change", source_sql_change)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="conditionalColumnSetValue")
    def conditional_column_set_value(self) -> 'outputs.ConditionalColumnSetValueResponse':
        """
        Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        """
        return pulumi.get(self, "conditional_column_set_value")

    @property
    @pulumi.getter(name="convertRowidColumn")
    def convert_rowid_column(self) -> 'outputs.ConvertRowIdToColumnResponse':
        """
        Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        """
        return pulumi.get(self, "convert_rowid_column")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. A human readable name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityMove")
    def entity_move(self) -> 'outputs.EntityMoveResponse':
        """
        Optional. Rule to specify how multiple entities should be relocated into a different schema.
        """
        return pulumi.get(self, "entity_move")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.MappingRuleFilterResponse':
        """
        The rule filter
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterTableColumns")
    def filter_table_columns(self) -> 'outputs.FilterTableColumnsResponse':
        """
        Optional. Rule to specify the list of columns to include or exclude from a table.
        """
        return pulumi.get(self, "filter_table_columns")

    @property
    @pulumi.getter(name="multiColumnDataTypeChange")
    def multi_column_data_type_change(self) -> 'outputs.MultiColumnDatatypeChangeResponse':
        """
        Optional. Rule to specify how multiple columns should be converted to a different data type.
        """
        return pulumi.get(self, "multi_column_data_type_change")

    @property
    @pulumi.getter(name="multiEntityRename")
    def multi_entity_rename(self) -> 'outputs.MultiEntityRenameResponse':
        """
        Optional. Rule to specify how multiple entities should be renamed.
        """
        return pulumi.get(self, "multi_entity_rename")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="revisionCreateTime")
    def revision_create_time(self) -> str:
        """
        The timestamp that the revision was created.
        """
        return pulumi.get(self, "revision_create_time")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> str:
        """
        The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
        """
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> str:
        """
        The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        """
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="ruleScope")
    def rule_scope(self) -> str:
        """
        The rule scope
        """
        return pulumi.get(self, "rule_scope")

    @property
    @pulumi.getter(name="setTablePrimaryKey")
    def set_table_primary_key(self) -> 'outputs.SetTablePrimaryKeyResponse':
        """
        Optional. Rule to specify the primary key for a table
        """
        return pulumi.get(self, "set_table_primary_key")

    @property
    @pulumi.getter(name="singleColumnChange")
    def single_column_change(self) -> 'outputs.SingleColumnChangeResponse':
        """
        Optional. Rule to specify how a single column is converted.
        """
        return pulumi.get(self, "single_column_change")

    @property
    @pulumi.getter(name="singleEntityRename")
    def single_entity_rename(self) -> 'outputs.SingleEntityRenameResponse':
        """
        Optional. Rule to specify how a single entity should be renamed.
        """
        return pulumi.get(self, "single_entity_rename")

    @property
    @pulumi.getter(name="singlePackageChange")
    def single_package_change(self) -> 'outputs.SinglePackageChangeResponse':
        """
        Optional. Rule to specify how a single package is converted.
        """
        return pulumi.get(self, "single_package_change")

    @property
    @pulumi.getter(name="sourceSqlChange")
    def source_sql_change(self) -> 'outputs.SourceSqlChangeResponse':
        """
        Optional. Rule to change the sql code for an entity, for example, function, procedure.
        """
        return pulumi.get(self, "source_sql_change")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Optional. The mapping rule state
        """
        return pulumi.get(self, "state")


class AwaitableGetMappingRuleResult(GetMappingRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMappingRuleResult(
            conditional_column_set_value=self.conditional_column_set_value,
            convert_rowid_column=self.convert_rowid_column,
            display_name=self.display_name,
            entity_move=self.entity_move,
            filter=self.filter,
            filter_table_columns=self.filter_table_columns,
            multi_column_data_type_change=self.multi_column_data_type_change,
            multi_entity_rename=self.multi_entity_rename,
            name=self.name,
            revision_create_time=self.revision_create_time,
            revision_id=self.revision_id,
            rule_order=self.rule_order,
            rule_scope=self.rule_scope,
            set_table_primary_key=self.set_table_primary_key,
            single_column_change=self.single_column_change,
            single_entity_rename=self.single_entity_rename,
            single_package_change=self.single_package_change,
            source_sql_change=self.source_sql_change,
            state=self.state)


def get_mapping_rule(conversion_workspace_id: Optional[str] = None,
                     location: Optional[str] = None,
                     mapping_rule_id: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMappingRuleResult:
    """
    Gets the details of a mapping rule.
    """
    __args__ = dict()
    __args__['conversionWorkspaceId'] = conversion_workspace_id
    __args__['location'] = location
    __args__['mappingRuleId'] = mapping_rule_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:datamigration/v1:getMappingRule', __args__, opts=opts, typ=GetMappingRuleResult).value

    return AwaitableGetMappingRuleResult(
        conditional_column_set_value=pulumi.get(__ret__, 'conditional_column_set_value'),
        convert_rowid_column=pulumi.get(__ret__, 'convert_rowid_column'),
        display_name=pulumi.get(__ret__, 'display_name'),
        entity_move=pulumi.get(__ret__, 'entity_move'),
        filter=pulumi.get(__ret__, 'filter'),
        filter_table_columns=pulumi.get(__ret__, 'filter_table_columns'),
        multi_column_data_type_change=pulumi.get(__ret__, 'multi_column_data_type_change'),
        multi_entity_rename=pulumi.get(__ret__, 'multi_entity_rename'),
        name=pulumi.get(__ret__, 'name'),
        revision_create_time=pulumi.get(__ret__, 'revision_create_time'),
        revision_id=pulumi.get(__ret__, 'revision_id'),
        rule_order=pulumi.get(__ret__, 'rule_order'),
        rule_scope=pulumi.get(__ret__, 'rule_scope'),
        set_table_primary_key=pulumi.get(__ret__, 'set_table_primary_key'),
        single_column_change=pulumi.get(__ret__, 'single_column_change'),
        single_entity_rename=pulumi.get(__ret__, 'single_entity_rename'),
        single_package_change=pulumi.get(__ret__, 'single_package_change'),
        source_sql_change=pulumi.get(__ret__, 'source_sql_change'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_mapping_rule)
def get_mapping_rule_output(conversion_workspace_id: Optional[pulumi.Input[str]] = None,
                            location: Optional[pulumi.Input[str]] = None,
                            mapping_rule_id: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMappingRuleResult]:
    """
    Gets the details of a mapping rule.
    """
    ...
