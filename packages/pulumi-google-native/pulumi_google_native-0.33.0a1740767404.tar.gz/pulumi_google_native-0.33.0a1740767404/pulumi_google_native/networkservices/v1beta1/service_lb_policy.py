# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ServiceLbPolicyArgs', 'ServiceLbPolicy']

@pulumi.input_type
class ServiceLbPolicyArgs:
    def __init__(__self__, *,
                 service_lb_policy_id: pulumi.Input[str],
                 auto_capacity_drain: Optional[pulumi.Input['ServiceLbPolicyAutoCapacityDrainArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 failover_config: Optional[pulumi.Input['ServiceLbPolicyFailoverConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_algorithm: Optional[pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceLbPolicy resource.
        :param pulumi.Input[str] service_lb_policy_id: Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
        :param pulumi.Input['ServiceLbPolicyAutoCapacityDrainArgs'] auto_capacity_drain: Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
        :param pulumi.Input[str] description: Optional. A free-text description of the resource. Max length 1024 characters.
        :param pulumi.Input['ServiceLbPolicyFailoverConfigArgs'] failover_config: Optional. Configuration related to health based failover.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Set of label tags associated with the ServiceLbPolicy resource.
        :param pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm'] load_balancing_algorithm: Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        :param pulumi.Input[str] name: Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        """
        pulumi.set(__self__, "service_lb_policy_id", service_lb_policy_id)
        if auto_capacity_drain is not None:
            pulumi.set(__self__, "auto_capacity_drain", auto_capacity_drain)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if failover_config is not None:
            pulumi.set(__self__, "failover_config", failover_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if load_balancing_algorithm is not None:
            pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="serviceLbPolicyId")
    def service_lb_policy_id(self) -> pulumi.Input[str]:
        """
        Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
        """
        return pulumi.get(self, "service_lb_policy_id")

    @service_lb_policy_id.setter
    def service_lb_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_lb_policy_id", value)

    @property
    @pulumi.getter(name="autoCapacityDrain")
    def auto_capacity_drain(self) -> Optional[pulumi.Input['ServiceLbPolicyAutoCapacityDrainArgs']]:
        """
        Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
        """
        return pulumi.get(self, "auto_capacity_drain")

    @auto_capacity_drain.setter
    def auto_capacity_drain(self, value: Optional[pulumi.Input['ServiceLbPolicyAutoCapacityDrainArgs']]):
        pulumi.set(self, "auto_capacity_drain", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A free-text description of the resource. Max length 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failoverConfig")
    def failover_config(self) -> Optional[pulumi.Input['ServiceLbPolicyFailoverConfigArgs']]:
        """
        Optional. Configuration related to health based failover.
        """
        return pulumi.get(self, "failover_config")

    @failover_config.setter
    def failover_config(self, value: Optional[pulumi.Input['ServiceLbPolicyFailoverConfigArgs']]):
        pulumi.set(self, "failover_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Set of label tags associated with the ServiceLbPolicy resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> Optional[pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm']]:
        """
        Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        """
        return pulumi.get(self, "load_balancing_algorithm")

    @load_balancing_algorithm.setter
    def load_balancing_algorithm(self, value: Optional[pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm']]):
        pulumi.set(self, "load_balancing_algorithm", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class ServiceLbPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_capacity_drain: Optional[pulumi.Input[pulumi.InputType['ServiceLbPolicyAutoCapacityDrainArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 failover_config: Optional[pulumi.Input[pulumi.InputType['ServiceLbPolicyFailoverConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_algorithm: Optional[pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_lb_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new ServiceLbPolicy in a given project and location.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServiceLbPolicyAutoCapacityDrainArgs']] auto_capacity_drain: Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
        :param pulumi.Input[str] description: Optional. A free-text description of the resource. Max length 1024 characters.
        :param pulumi.Input[pulumi.InputType['ServiceLbPolicyFailoverConfigArgs']] failover_config: Optional. Configuration related to health based failover.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Set of label tags associated with the ServiceLbPolicy resource.
        :param pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm'] load_balancing_algorithm: Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        :param pulumi.Input[str] name: Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        :param pulumi.Input[str] service_lb_policy_id: Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceLbPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new ServiceLbPolicy in a given project and location.

        :param str resource_name: The name of the resource.
        :param ServiceLbPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceLbPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_capacity_drain: Optional[pulumi.Input[pulumi.InputType['ServiceLbPolicyAutoCapacityDrainArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 failover_config: Optional[pulumi.Input[pulumi.InputType['ServiceLbPolicyFailoverConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_algorithm: Optional[pulumi.Input['ServiceLbPolicyLoadBalancingAlgorithm']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_lb_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceLbPolicyArgs.__new__(ServiceLbPolicyArgs)

            __props__.__dict__["auto_capacity_drain"] = auto_capacity_drain
            __props__.__dict__["description"] = description
            __props__.__dict__["failover_config"] = failover_config
            __props__.__dict__["labels"] = labels
            __props__.__dict__["load_balancing_algorithm"] = load_balancing_algorithm
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if service_lb_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_lb_policy_id'")
            __props__.__dict__["service_lb_policy_id"] = service_lb_policy_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project", "serviceLbPolicyId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ServiceLbPolicy, __self__).__init__(
            'google-native:networkservices/v1beta1:ServiceLbPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceLbPolicy':
        """
        Get an existing ServiceLbPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceLbPolicyArgs.__new__(ServiceLbPolicyArgs)

        __props__.__dict__["auto_capacity_drain"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["failover_config"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["load_balancing_algorithm"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["service_lb_policy_id"] = None
        __props__.__dict__["update_time"] = None
        return ServiceLbPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCapacityDrain")
    def auto_capacity_drain(self) -> pulumi.Output['outputs.ServiceLbPolicyAutoCapacityDrainResponse']:
        """
        Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
        """
        return pulumi.get(self, "auto_capacity_drain")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The timestamp when this resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional. A free-text description of the resource. Max length 1024 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failoverConfig")
    def failover_config(self) -> pulumi.Output['outputs.ServiceLbPolicyFailoverConfigResponse']:
        """
        Optional. Configuration related to health based failover.
        """
        return pulumi.get(self, "failover_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Optional. Set of label tags associated with the ServiceLbPolicy resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> pulumi.Output[str]:
        """
        Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        """
        return pulumi.get(self, "load_balancing_algorithm")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceLbPolicyId")
    def service_lb_policy_id(self) -> pulumi.Output[str]:
        """
        Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
        """
        return pulumi.get(self, "service_lb_policy_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The timestamp when this resource was last updated.
        """
        return pulumi.get(self, "update_time")

