# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetBackupScheduleResult',
    'AwaitableGetBackupScheduleResult',
    'get_backup_schedule',
    'get_backup_schedule_output',
]

@pulumi.output_type
class GetBackupScheduleResult:
    def __init__(__self__, create_time=None, daily_recurrence=None, name=None, retention=None, update_time=None, weekly_recurrence=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if daily_recurrence and not isinstance(daily_recurrence, dict):
            raise TypeError("Expected argument 'daily_recurrence' to be a dict")
        pulumi.set(__self__, "daily_recurrence", daily_recurrence)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if retention and not isinstance(retention, str):
            raise TypeError("Expected argument 'retention' to be a str")
        pulumi.set(__self__, "retention", retention)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if weekly_recurrence and not isinstance(weekly_recurrence, dict):
            raise TypeError("Expected argument 'weekly_recurrence' to be a dict")
        pulumi.set(__self__, "weekly_recurrence", weekly_recurrence)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dailyRecurrence")
    def daily_recurrence(self) -> 'outputs.GoogleFirestoreAdminV1DailyRecurrenceResponse':
        """
        For a schedule that runs daily at a specified time.
        """
        return pulumi.get(self, "daily_recurrence")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def retention(self) -> str:
        """
        At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
        """
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="weeklyRecurrence")
    def weekly_recurrence(self) -> 'outputs.GoogleFirestoreAdminV1WeeklyRecurrenceResponse':
        """
        For a schedule that runs weekly on a specific day and time.
        """
        return pulumi.get(self, "weekly_recurrence")


class AwaitableGetBackupScheduleResult(GetBackupScheduleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupScheduleResult(
            create_time=self.create_time,
            daily_recurrence=self.daily_recurrence,
            name=self.name,
            retention=self.retention,
            update_time=self.update_time,
            weekly_recurrence=self.weekly_recurrence)


def get_backup_schedule(backup_schedule_id: Optional[str] = None,
                        database_id: Optional[str] = None,
                        project: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupScheduleResult:
    """
    Gets information about a backup schedule.
    """
    __args__ = dict()
    __args__['backupScheduleId'] = backup_schedule_id
    __args__['databaseId'] = database_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firestore/v1:getBackupSchedule', __args__, opts=opts, typ=GetBackupScheduleResult).value

    return AwaitableGetBackupScheduleResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        daily_recurrence=pulumi.get(__ret__, 'daily_recurrence'),
        name=pulumi.get(__ret__, 'name'),
        retention=pulumi.get(__ret__, 'retention'),
        update_time=pulumi.get(__ret__, 'update_time'),
        weekly_recurrence=pulumi.get(__ret__, 'weekly_recurrence'))


@_utilities.lift_output_func(get_backup_schedule)
def get_backup_schedule_output(backup_schedule_id: Optional[pulumi.Input[str]] = None,
                               database_id: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupScheduleResult]:
    """
    Gets information about a backup schedule.
    """
    ...
