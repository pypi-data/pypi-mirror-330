# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPrivateCloudResult',
    'AwaitableGetPrivateCloudResult',
    'get_private_cloud',
    'get_private_cloud_output',
]

@pulumi.output_type
class GetPrivateCloudResult:
    def __init__(__self__, create_time=None, delete_time=None, description=None, expire_time=None, hcx=None, management_cluster=None, name=None, network_config=None, nsx=None, state=None, type=None, uid=None, update_time=None, vcenter=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if hcx and not isinstance(hcx, dict):
            raise TypeError("Expected argument 'hcx' to be a dict")
        pulumi.set(__self__, "hcx", hcx)
        if management_cluster and not isinstance(management_cluster, dict):
            raise TypeError("Expected argument 'management_cluster' to be a dict")
        pulumi.set(__self__, "management_cluster", management_cluster)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_config and not isinstance(network_config, dict):
            raise TypeError("Expected argument 'network_config' to be a dict")
        pulumi.set(__self__, "network_config", network_config)
        if nsx and not isinstance(nsx, dict):
            raise TypeError("Expected argument 'nsx' to be a dict")
        pulumi.set(__self__, "nsx", nsx)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vcenter and not isinstance(vcenter, dict):
            raise TypeError("Expected argument 'vcenter' to be a dict")
        pulumi.set(__self__, "vcenter", vcenter)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of this resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        Time when the resource was scheduled for deletion.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided description for this private cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Time when the resource will be irreversibly deleted.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def hcx(self) -> 'outputs.HcxResponse':
        """
        HCX appliance.
        """
        return pulumi.get(self, "hcx")

    @property
    @pulumi.getter(name="managementCluster")
    def management_cluster(self) -> 'outputs.ManagementClusterResponse':
        """
        Input only. The management cluster for this private cloud. This field is required during creation of the private cloud to provide details for the default cluster. The following fields can't be changed after private cloud creation: `ManagementCluster.clusterId`, `ManagementCluster.nodeTypeId`.
        """
        return pulumi.get(self, "management_cluster")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> 'outputs.NetworkConfigResponse':
        """
        Network configuration of the private cloud.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter
    def nsx(self) -> 'outputs.NsxResponse':
        """
        NSX appliance.
        """
        return pulumi.get(self, "nsx")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the resource. New values may be added to this enum when appropriate.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Optional. Type of the private cloud. Defaults to STANDARD.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-generated unique identifier for the resource.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update time of this resource.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def vcenter(self) -> 'outputs.VcenterResponse':
        """
        Vcenter appliance.
        """
        return pulumi.get(self, "vcenter")


class AwaitableGetPrivateCloudResult(GetPrivateCloudResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateCloudResult(
            create_time=self.create_time,
            delete_time=self.delete_time,
            description=self.description,
            expire_time=self.expire_time,
            hcx=self.hcx,
            management_cluster=self.management_cluster,
            name=self.name,
            network_config=self.network_config,
            nsx=self.nsx,
            state=self.state,
            type=self.type,
            uid=self.uid,
            update_time=self.update_time,
            vcenter=self.vcenter)


def get_private_cloud(location: Optional[str] = None,
                      private_cloud_id: Optional[str] = None,
                      project: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateCloudResult:
    """
    Retrieves a `PrivateCloud` resource by its resource name.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['privateCloudId'] = private_cloud_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmwareengine/v1:getPrivateCloud', __args__, opts=opts, typ=GetPrivateCloudResult).value

    return AwaitableGetPrivateCloudResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        description=pulumi.get(__ret__, 'description'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        hcx=pulumi.get(__ret__, 'hcx'),
        management_cluster=pulumi.get(__ret__, 'management_cluster'),
        name=pulumi.get(__ret__, 'name'),
        network_config=pulumi.get(__ret__, 'network_config'),
        nsx=pulumi.get(__ret__, 'nsx'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vcenter=pulumi.get(__ret__, 'vcenter'))


@_utilities.lift_output_func(get_private_cloud)
def get_private_cloud_output(location: Optional[pulumi.Input[str]] = None,
                             private_cloud_id: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrivateCloudResult]:
    """
    Retrieves a `PrivateCloud` resource by its resource name.
    """
    ...
