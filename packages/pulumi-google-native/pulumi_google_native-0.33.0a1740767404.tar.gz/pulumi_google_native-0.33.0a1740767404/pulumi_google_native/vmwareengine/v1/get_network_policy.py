# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNetworkPolicyResult',
    'AwaitableGetNetworkPolicyResult',
    'get_network_policy',
    'get_network_policy_output',
]

@pulumi.output_type
class GetNetworkPolicyResult:
    def __init__(__self__, create_time=None, description=None, edge_services_cidr=None, external_ip=None, internet_access=None, name=None, uid=None, update_time=None, vmware_engine_network=None, vmware_engine_network_canonical=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if edge_services_cidr and not isinstance(edge_services_cidr, str):
            raise TypeError("Expected argument 'edge_services_cidr' to be a str")
        pulumi.set(__self__, "edge_services_cidr", edge_services_cidr)
        if external_ip and not isinstance(external_ip, dict):
            raise TypeError("Expected argument 'external_ip' to be a dict")
        pulumi.set(__self__, "external_ip", external_ip)
        if internet_access and not isinstance(internet_access, dict):
            raise TypeError("Expected argument 'internet_access' to be a dict")
        pulumi.set(__self__, "internet_access", internet_access)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vmware_engine_network and not isinstance(vmware_engine_network, str):
            raise TypeError("Expected argument 'vmware_engine_network' to be a str")
        pulumi.set(__self__, "vmware_engine_network", vmware_engine_network)
        if vmware_engine_network_canonical and not isinstance(vmware_engine_network_canonical, str):
            raise TypeError("Expected argument 'vmware_engine_network_canonical' to be a str")
        pulumi.set(__self__, "vmware_engine_network_canonical", vmware_engine_network_canonical)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of this resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description for this network policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeServicesCidr")
    def edge_services_cidr(self) -> str:
        """
        IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
        """
        return pulumi.get(self, "edge_services_cidr")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> 'outputs.NetworkServiceResponse':
        """
        Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> 'outputs.NetworkServiceResponse':
        """
        Network service that allows VMware workloads to access the internet.
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-generated unique identifier for the resource.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update time of this resource.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vmwareEngineNetwork")
    def vmware_engine_network(self) -> str:
        """
        Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
        """
        return pulumi.get(self, "vmware_engine_network")

    @property
    @pulumi.getter(name="vmwareEngineNetworkCanonical")
    def vmware_engine_network_canonical(self) -> str:
        """
        The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
        """
        return pulumi.get(self, "vmware_engine_network_canonical")


class AwaitableGetNetworkPolicyResult(GetNetworkPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkPolicyResult(
            create_time=self.create_time,
            description=self.description,
            edge_services_cidr=self.edge_services_cidr,
            external_ip=self.external_ip,
            internet_access=self.internet_access,
            name=self.name,
            uid=self.uid,
            update_time=self.update_time,
            vmware_engine_network=self.vmware_engine_network,
            vmware_engine_network_canonical=self.vmware_engine_network_canonical)


def get_network_policy(location: Optional[str] = None,
                       network_policy_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkPolicyResult:
    """
    Retrieves a `NetworkPolicy` resource by its resource name.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['networkPolicyId'] = network_policy_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmwareengine/v1:getNetworkPolicy', __args__, opts=opts, typ=GetNetworkPolicyResult).value

    return AwaitableGetNetworkPolicyResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        edge_services_cidr=pulumi.get(__ret__, 'edge_services_cidr'),
        external_ip=pulumi.get(__ret__, 'external_ip'),
        internet_access=pulumi.get(__ret__, 'internet_access'),
        name=pulumi.get(__ret__, 'name'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vmware_engine_network=pulumi.get(__ret__, 'vmware_engine_network'),
        vmware_engine_network_canonical=pulumi.get(__ret__, 'vmware_engine_network_canonical'))


@_utilities.lift_output_func(get_network_policy)
def get_network_policy_output(location: Optional[pulumi.Input[str]] = None,
                              network_policy_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkPolicyResult]:
    """
    Retrieves a `NetworkPolicy` resource by its resource name.
    """
    ...
