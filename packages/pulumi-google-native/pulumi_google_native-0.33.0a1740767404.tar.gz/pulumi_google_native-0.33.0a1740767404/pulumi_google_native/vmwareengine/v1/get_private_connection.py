# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetPrivateConnectionResult',
    'AwaitableGetPrivateConnectionResult',
    'get_private_connection',
    'get_private_connection_output',
]

@pulumi.output_type
class GetPrivateConnectionResult:
    def __init__(__self__, create_time=None, description=None, name=None, peering_id=None, peering_state=None, routing_mode=None, service_network=None, state=None, type=None, uid=None, update_time=None, vmware_engine_network=None, vmware_engine_network_canonical=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peering_id and not isinstance(peering_id, str):
            raise TypeError("Expected argument 'peering_id' to be a str")
        pulumi.set(__self__, "peering_id", peering_id)
        if peering_state and not isinstance(peering_state, str):
            raise TypeError("Expected argument 'peering_state' to be a str")
        pulumi.set(__self__, "peering_state", peering_state)
        if routing_mode and not isinstance(routing_mode, str):
            raise TypeError("Expected argument 'routing_mode' to be a str")
        pulumi.set(__self__, "routing_mode", routing_mode)
        if service_network and not isinstance(service_network, str):
            raise TypeError("Expected argument 'service_network' to be a str")
        pulumi.set(__self__, "service_network", service_network)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vmware_engine_network and not isinstance(vmware_engine_network, str):
            raise TypeError("Expected argument 'vmware_engine_network' to be a str")
        pulumi.set(__self__, "vmware_engine_network", vmware_engine_network)
        if vmware_engine_network_canonical and not isinstance(vmware_engine_network_canonical, str):
            raise TypeError("Expected argument 'vmware_engine_network_canonical' to be a str")
        pulumi.set(__self__, "vmware_engine_network_canonical", vmware_engine_network_canonical)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of this resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description for this private connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peeringId")
    def peering_id(self) -> str:
        """
        VPC network peering id between given network VPC and VMwareEngineNetwork.
        """
        return pulumi.get(self, "peering_id")

    @property
    @pulumi.getter(name="peeringState")
    def peering_state(self) -> str:
        """
        Peering state between service network and VMware Engine network.
        """
        return pulumi.get(self, "peering_state")

    @property
    @pulumi.getter(name="routingMode")
    def routing_mode(self) -> str:
        """
        Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
        """
        return pulumi.get(self, "routing_mode")

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> str:
        """
        Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
        """
        return pulumi.get(self, "service_network")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the private connection.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Private connection type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-generated unique identifier for the resource.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update time of this resource.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vmwareEngineNetwork")
    def vmware_engine_network(self) -> str:
        """
        The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
        """
        return pulumi.get(self, "vmware_engine_network")

    @property
    @pulumi.getter(name="vmwareEngineNetworkCanonical")
    def vmware_engine_network_canonical(self) -> str:
        """
        The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
        """
        return pulumi.get(self, "vmware_engine_network_canonical")


class AwaitableGetPrivateConnectionResult(GetPrivateConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateConnectionResult(
            create_time=self.create_time,
            description=self.description,
            name=self.name,
            peering_id=self.peering_id,
            peering_state=self.peering_state,
            routing_mode=self.routing_mode,
            service_network=self.service_network,
            state=self.state,
            type=self.type,
            uid=self.uid,
            update_time=self.update_time,
            vmware_engine_network=self.vmware_engine_network,
            vmware_engine_network_canonical=self.vmware_engine_network_canonical)


def get_private_connection(location: Optional[str] = None,
                           private_connection_id: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateConnectionResult:
    """
    Retrieves a `PrivateConnection` resource by its resource name. The resource contains details of the private connection, such as connected network, routing mode and state.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['privateConnectionId'] = private_connection_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmwareengine/v1:getPrivateConnection', __args__, opts=opts, typ=GetPrivateConnectionResult).value

    return AwaitableGetPrivateConnectionResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        name=pulumi.get(__ret__, 'name'),
        peering_id=pulumi.get(__ret__, 'peering_id'),
        peering_state=pulumi.get(__ret__, 'peering_state'),
        routing_mode=pulumi.get(__ret__, 'routing_mode'),
        service_network=pulumi.get(__ret__, 'service_network'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vmware_engine_network=pulumi.get(__ret__, 'vmware_engine_network'),
        vmware_engine_network_canonical=pulumi.get(__ret__, 'vmware_engine_network_canonical'))


@_utilities.lift_output_func(get_private_connection)
def get_private_connection_output(location: Optional[pulumi.Input[str]] = None,
                                  private_connection_id: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrivateConnectionResult]:
    """
    Retrieves a `PrivateConnection` resource by its resource name. The resource contains details of the private connection, such as connected network, routing mode and state.
    """
    ...
