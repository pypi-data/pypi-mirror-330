# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AdminUserArgs',
    'InstanceConfigArgs',
    'SAMLParamsArgs',
]

@pulumi.input_type
class AdminUserArgs:
    def __init__(__self__, *,
                 family_name: Optional[pulumi.Input[str]] = None,
                 given_name: Optional[pulumi.Input[str]] = None):
        """
        Message storing info about the first admin user. Next ID: 3
        :param pulumi.Input[str] family_name: Optional. Last/family name of the first admin user.
        :param pulumi.Input[str] given_name: Optional. First/given name of the first admin user.
        """
        if family_name is not None:
            pulumi.set(__self__, "family_name", family_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Last/family name of the first admin user.
        """
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family_name", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. First/given name of the first admin user.
        """
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "given_name", value)


@pulumi.input_type
class InstanceConfigArgs:
    def __init__(__self__, *,
                 instance_size: Optional[pulumi.Input['InstanceConfigInstanceSize']] = None):
        """
        Message storing the instance configuration.
        :param pulumi.Input['InstanceConfigInstanceSize'] instance_size: The instance size of this the instance configuration.
        """
        if instance_size is not None:
            pulumi.set(__self__, "instance_size", instance_size)

    @property
    @pulumi.getter(name="instanceSize")
    def instance_size(self) -> Optional[pulumi.Input['InstanceConfigInstanceSize']]:
        """
        The instance size of this the instance configuration.
        """
        return pulumi.get(self, "instance_size")

    @instance_size.setter
    def instance_size(self, value: Optional[pulumi.Input['InstanceConfigInstanceSize']]):
        pulumi.set(self, "instance_size", value)


@pulumi.input_type
class SAMLParamsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 email_mapping: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 sso_uri: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        """
        Message storing SAML params to enable Google as IDP.
        :param pulumi.Input[str] certificate: SAML certificate
        :param pulumi.Input[str] email_mapping: IdP field that maps to the user’s email address
        :param pulumi.Input[str] entity_id: Entity id URL
        :param pulumi.Input[str] sso_uri: Single sign-on URL
        :param pulumi.Input[str] user_email: Email address of the first admin users.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if email_mapping is not None:
            pulumi.set(__self__, "email_mapping", email_mapping)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if sso_uri is not None:
            pulumi.set(__self__, "sso_uri", sso_uri)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        SAML certificate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="emailMapping")
    def email_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field that maps to the user’s email address
        """
        return pulumi.get(self, "email_mapping")

    @email_mapping.setter
    def email_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_mapping", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Entity id URL
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="ssoUri")
    def sso_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on URL
        """
        return pulumi.get(self, "sso_uri")

    @sso_uri.setter
    def sso_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_uri", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the first admin users.
        """
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


