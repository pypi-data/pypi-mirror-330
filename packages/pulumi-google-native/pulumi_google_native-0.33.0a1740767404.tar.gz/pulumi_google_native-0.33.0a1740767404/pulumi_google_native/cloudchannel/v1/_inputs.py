# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudChannelV1AssociationInfoArgs',
    'GoogleCloudChannelV1CommitmentSettingsArgs',
    'GoogleCloudChannelV1ConditionalOverrideArgs',
    'GoogleCloudChannelV1ContactInfoArgs',
    'GoogleCloudChannelV1ParameterArgs',
    'GoogleCloudChannelV1PercentageAdjustmentArgs',
    'GoogleCloudChannelV1PeriodArgs',
    'GoogleCloudChannelV1RenewalSettingsArgs',
    'GoogleCloudChannelV1RepricingAdjustmentArgs',
    'GoogleCloudChannelV1RepricingConditionArgs',
    'GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs',
    'GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs',
    'GoogleCloudChannelV1RepricingConfigArgs',
    'GoogleCloudChannelV1SkuGroupConditionArgs',
    'GoogleCloudChannelV1ValueArgs',
    'GoogleTypeDateArgs',
    'GoogleTypeDecimalArgs',
    'GoogleTypePostalAddressArgs',
]

@pulumi.input_type
class GoogleCloudChannelV1AssociationInfoArgs:
    def __init__(__self__, *,
                 base_entitlement: Optional[pulumi.Input[str]] = None):
        """
        Association links that an entitlement has to other entitlements.
        :param pulumi.Input[str] base_entitlement: The name of the base entitlement, for which this entitlement is an add-on.
        """
        if base_entitlement is not None:
            pulumi.set(__self__, "base_entitlement", base_entitlement)

    @property
    @pulumi.getter(name="baseEntitlement")
    def base_entitlement(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the base entitlement, for which this entitlement is an add-on.
        """
        return pulumi.get(self, "base_entitlement")

    @base_entitlement.setter
    def base_entitlement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_entitlement", value)


@pulumi.input_type
class GoogleCloudChannelV1CommitmentSettingsArgs:
    def __init__(__self__, *,
                 renewal_settings: Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsArgs']] = None):
        """
        Commitment settings for commitment-based offers.
        :param pulumi.Input['GoogleCloudChannelV1RenewalSettingsArgs'] renewal_settings: Optional. Renewal settings applicable for a commitment-based Offer.
        """
        if renewal_settings is not None:
            pulumi.set(__self__, "renewal_settings", renewal_settings)

    @property
    @pulumi.getter(name="renewalSettings")
    def renewal_settings(self) -> Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsArgs']]:
        """
        Optional. Renewal settings applicable for a commitment-based Offer.
        """
        return pulumi.get(self, "renewal_settings")

    @renewal_settings.setter
    def renewal_settings(self, value: Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsArgs']]):
        pulumi.set(self, "renewal_settings", value)


@pulumi.input_type
class GoogleCloudChannelV1ConditionalOverrideArgs:
    def __init__(__self__, *,
                 adjustment: pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs'],
                 rebilling_basis: pulumi.Input['GoogleCloudChannelV1ConditionalOverrideRebillingBasis'],
                 repricing_condition: pulumi.Input['GoogleCloudChannelV1RepricingConditionArgs']):
        """
        Specifies the override to conditionally apply.
        :param pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs'] adjustment: Information about the applied override's adjustment.
        :param pulumi.Input['GoogleCloudChannelV1ConditionalOverrideRebillingBasis'] rebilling_basis: The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.
        :param pulumi.Input['GoogleCloudChannelV1RepricingConditionArgs'] repricing_condition: Specifies the condition which, if met, will apply the override.
        """
        pulumi.set(__self__, "adjustment", adjustment)
        pulumi.set(__self__, "rebilling_basis", rebilling_basis)
        pulumi.set(__self__, "repricing_condition", repricing_condition)

    @property
    @pulumi.getter
    def adjustment(self) -> pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs']:
        """
        Information about the applied override's adjustment.
        """
        return pulumi.get(self, "adjustment")

    @adjustment.setter
    def adjustment(self, value: pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs']):
        pulumi.set(self, "adjustment", value)

    @property
    @pulumi.getter(name="rebillingBasis")
    def rebilling_basis(self) -> pulumi.Input['GoogleCloudChannelV1ConditionalOverrideRebillingBasis']:
        """
        The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.
        """
        return pulumi.get(self, "rebilling_basis")

    @rebilling_basis.setter
    def rebilling_basis(self, value: pulumi.Input['GoogleCloudChannelV1ConditionalOverrideRebillingBasis']):
        pulumi.set(self, "rebilling_basis", value)

    @property
    @pulumi.getter(name="repricingCondition")
    def repricing_condition(self) -> pulumi.Input['GoogleCloudChannelV1RepricingConditionArgs']:
        """
        Specifies the condition which, if met, will apply the override.
        """
        return pulumi.get(self, "repricing_condition")

    @repricing_condition.setter
    def repricing_condition(self, value: pulumi.Input['GoogleCloudChannelV1RepricingConditionArgs']):
        pulumi.set(self, "repricing_condition", value)


@pulumi.input_type
class GoogleCloudChannelV1ContactInfoArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Contact information for a customer account.
        :param pulumi.Input[str] email: The customer account's contact email. Required for entitlements that create admin.google.com accounts, and serves as the customer's username for those accounts. Use this email to invite Team customers.
        :param pulumi.Input[str] first_name: The customer account contact's first name. Optional for Team customers.
        :param pulumi.Input[str] last_name: The customer account contact's last name. Optional for Team customers.
        :param pulumi.Input[str] phone: The customer account's contact phone number.
        :param pulumi.Input[str] title: Optional. The customer account contact's job title.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The customer account's contact email. Required for entitlements that create admin.google.com accounts, and serves as the customer's username for those accounts. Use this email to invite Team customers.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        The customer account contact's first name. Optional for Team customers.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        The customer account contact's last name. Optional for Team customers.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        """
        The customer account's contact phone number.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The customer account contact's job title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudChannelV1ParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['GoogleCloudChannelV1ValueArgs']] = None):
        """
        Definition for extended entitlement parameters.
        :param pulumi.Input[str] name: Name of the parameter.
        :param pulumi.Input['GoogleCloudChannelV1ValueArgs'] value: Value of the parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['GoogleCloudChannelV1ValueArgs']]:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['GoogleCloudChannelV1ValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleCloudChannelV1PercentageAdjustmentArgs:
    def __init__(__self__, *,
                 percentage: Optional[pulumi.Input['GoogleTypeDecimalArgs']] = None):
        """
        An adjustment that applies a flat markup or markdown to an entire bill.
        :param pulumi.Input['GoogleTypeDecimalArgs'] percentage: The percentage of the bill to adjust. For example: Mark down by 1% => "-1.00" Mark up by 1% => "1.00" Pass-Through => "0.00"
        """
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input['GoogleTypeDecimalArgs']]:
        """
        The percentage of the bill to adjust. For example: Mark down by 1% => "-1.00" Mark up by 1% => "1.00" Pass-Through => "0.00"
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input['GoogleTypeDecimalArgs']]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class GoogleCloudChannelV1PeriodArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[int]] = None,
                 period_type: Optional[pulumi.Input['GoogleCloudChannelV1PeriodPeriodType']] = None):
        """
        Represents period in days/months/years.
        :param pulumi.Input[int] duration: Total duration of Period Type defined.
        :param pulumi.Input['GoogleCloudChannelV1PeriodPeriodType'] period_type: Period Type.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if period_type is not None:
            pulumi.set(__self__, "period_type", period_type)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        Total duration of Period Type defined.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="periodType")
    def period_type(self) -> Optional[pulumi.Input['GoogleCloudChannelV1PeriodPeriodType']]:
        """
        Period Type.
        """
        return pulumi.get(self, "period_type")

    @period_type.setter
    def period_type(self, value: Optional[pulumi.Input['GoogleCloudChannelV1PeriodPeriodType']]):
        pulumi.set(self, "period_type", value)


@pulumi.input_type
class GoogleCloudChannelV1RenewalSettingsArgs:
    def __init__(__self__, *,
                 enable_renewal: Optional[pulumi.Input[bool]] = None,
                 payment_cycle: Optional[pulumi.Input['GoogleCloudChannelV1PeriodArgs']] = None,
                 payment_plan: Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsPaymentPlan']] = None,
                 resize_unit_count: Optional[pulumi.Input[bool]] = None):
        """
        Renewal settings for renewable Offers.
        :param pulumi.Input[bool] enable_renewal: If false, the plan will be completed at the end date.
        :param pulumi.Input['GoogleCloudChannelV1PeriodArgs'] payment_cycle: Describes how frequently the reseller will be billed, such as once per month.
        :param pulumi.Input['GoogleCloudChannelV1RenewalSettingsPaymentPlan'] payment_plan: Describes how a reseller will be billed.
        :param pulumi.Input[bool] resize_unit_count: If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.
        """
        if enable_renewal is not None:
            pulumi.set(__self__, "enable_renewal", enable_renewal)
        if payment_cycle is not None:
            pulumi.set(__self__, "payment_cycle", payment_cycle)
        if payment_plan is not None:
            pulumi.set(__self__, "payment_plan", payment_plan)
        if resize_unit_count is not None:
            pulumi.set(__self__, "resize_unit_count", resize_unit_count)

    @property
    @pulumi.getter(name="enableRenewal")
    def enable_renewal(self) -> Optional[pulumi.Input[bool]]:
        """
        If false, the plan will be completed at the end date.
        """
        return pulumi.get(self, "enable_renewal")

    @enable_renewal.setter
    def enable_renewal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_renewal", value)

    @property
    @pulumi.getter(name="paymentCycle")
    def payment_cycle(self) -> Optional[pulumi.Input['GoogleCloudChannelV1PeriodArgs']]:
        """
        Describes how frequently the reseller will be billed, such as once per month.
        """
        return pulumi.get(self, "payment_cycle")

    @payment_cycle.setter
    def payment_cycle(self, value: Optional[pulumi.Input['GoogleCloudChannelV1PeriodArgs']]):
        pulumi.set(self, "payment_cycle", value)

    @property
    @pulumi.getter(name="paymentPlan")
    def payment_plan(self) -> Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsPaymentPlan']]:
        """
        Describes how a reseller will be billed.
        """
        return pulumi.get(self, "payment_plan")

    @payment_plan.setter
    def payment_plan(self, value: Optional[pulumi.Input['GoogleCloudChannelV1RenewalSettingsPaymentPlan']]):
        pulumi.set(self, "payment_plan", value)

    @property
    @pulumi.getter(name="resizeUnitCount")
    def resize_unit_count(self) -> Optional[pulumi.Input[bool]]:
        """
        If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.
        """
        return pulumi.get(self, "resize_unit_count")

    @resize_unit_count.setter
    def resize_unit_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resize_unit_count", value)


@pulumi.input_type
class GoogleCloudChannelV1RepricingAdjustmentArgs:
    def __init__(__self__, *,
                 percentage_adjustment: Optional[pulumi.Input['GoogleCloudChannelV1PercentageAdjustmentArgs']] = None):
        """
        A type that represents the various adjustments you can apply to a bill.
        :param pulumi.Input['GoogleCloudChannelV1PercentageAdjustmentArgs'] percentage_adjustment: Flat markup or markdown on an entire bill.
        """
        if percentage_adjustment is not None:
            pulumi.set(__self__, "percentage_adjustment", percentage_adjustment)

    @property
    @pulumi.getter(name="percentageAdjustment")
    def percentage_adjustment(self) -> Optional[pulumi.Input['GoogleCloudChannelV1PercentageAdjustmentArgs']]:
        """
        Flat markup or markdown on an entire bill.
        """
        return pulumi.get(self, "percentage_adjustment")

    @percentage_adjustment.setter
    def percentage_adjustment(self, value: Optional[pulumi.Input['GoogleCloudChannelV1PercentageAdjustmentArgs']]):
        pulumi.set(self, "percentage_adjustment", value)


@pulumi.input_type
class GoogleCloudChannelV1RepricingConditionArgs:
    def __init__(__self__, *,
                 sku_group_condition: Optional[pulumi.Input['GoogleCloudChannelV1SkuGroupConditionArgs']] = None):
        """
        Represents the various repricing conditions you can use for a conditional override.
        :param pulumi.Input['GoogleCloudChannelV1SkuGroupConditionArgs'] sku_group_condition: SKU Group condition for override.
        """
        if sku_group_condition is not None:
            pulumi.set(__self__, "sku_group_condition", sku_group_condition)

    @property
    @pulumi.getter(name="skuGroupCondition")
    def sku_group_condition(self) -> Optional[pulumi.Input['GoogleCloudChannelV1SkuGroupConditionArgs']]:
        """
        SKU Group condition for override.
        """
        return pulumi.get(self, "sku_group_condition")

    @sku_group_condition.setter
    def sku_group_condition(self, value: Optional[pulumi.Input['GoogleCloudChannelV1SkuGroupConditionArgs']]):
        pulumi.set(self, "sku_group_condition", value)


@pulumi.input_type
class GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs:
    def __init__(__self__):
        """
        Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object. Deprecated: This is no longer supported. Use RepricingConfig.EntitlementGranularity instead.
        """
        pass


@pulumi.input_type
class GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs:
    def __init__(__self__, *,
                 entitlement: Optional[pulumi.Input[str]] = None):
        """
        Applies the repricing configuration at the entitlement level.
        :param pulumi.Input[str] entitlement: Resource name of the entitlement. Format: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
        """
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)

    @property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name of the entitlement. Format: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entitlement", value)


@pulumi.input_type
class GoogleCloudChannelV1RepricingConfigArgs:
    def __init__(__self__, *,
                 adjustment: pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs'],
                 effective_invoice_month: pulumi.Input['GoogleTypeDateArgs'],
                 rebilling_basis: pulumi.Input['GoogleCloudChannelV1RepricingConfigRebillingBasis'],
                 channel_partner_granularity: Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs']] = None,
                 conditional_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudChannelV1ConditionalOverrideArgs']]]] = None,
                 entitlement_granularity: Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs']] = None):
        """
        Configuration for repricing a Google bill over a period of time.
        :param pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs'] adjustment: Information about the adjustment.
        :param pulumi.Input['GoogleTypeDateArgs'] effective_invoice_month: The YearMonth when these adjustments activate. The Day field needs to be "0" since we only accept YearMonth repricing boundaries.
        :param pulumi.Input['GoogleCloudChannelV1RepricingConfigRebillingBasis'] rebilling_basis: The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
        :param pulumi.Input['GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs'] channel_partner_granularity: Applies the repricing configuration at the channel partner level. Only ChannelPartnerRepricingConfig supports this value. Deprecated: This is no longer supported. Use RepricingConfig.entitlement_granularity instead.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudChannelV1ConditionalOverrideArgs']]] conditional_overrides: The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.
        :param pulumi.Input['GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs'] entitlement_granularity: Applies the repricing configuration at the entitlement level. Note: If a ChannelPartnerRepricingConfig using RepricingConfig.EntitlementGranularity becomes effective, then no existing or future RepricingConfig.ChannelPartnerGranularity will apply to the RepricingConfig.EntitlementGranularity.entitlement. This is the recommended value for both CustomerRepricingConfig and ChannelPartnerRepricingConfig.
        """
        pulumi.set(__self__, "adjustment", adjustment)
        pulumi.set(__self__, "effective_invoice_month", effective_invoice_month)
        pulumi.set(__self__, "rebilling_basis", rebilling_basis)
        if channel_partner_granularity is not None:
            warnings.warn("""Applies the repricing configuration at the channel partner level. Only ChannelPartnerRepricingConfig supports this value. Deprecated: This is no longer supported. Use RepricingConfig.entitlement_granularity instead.""", DeprecationWarning)
            pulumi.log.warn("""channel_partner_granularity is deprecated: Applies the repricing configuration at the channel partner level. Only ChannelPartnerRepricingConfig supports this value. Deprecated: This is no longer supported. Use RepricingConfig.entitlement_granularity instead.""")
        if channel_partner_granularity is not None:
            pulumi.set(__self__, "channel_partner_granularity", channel_partner_granularity)
        if conditional_overrides is not None:
            pulumi.set(__self__, "conditional_overrides", conditional_overrides)
        if entitlement_granularity is not None:
            pulumi.set(__self__, "entitlement_granularity", entitlement_granularity)

    @property
    @pulumi.getter
    def adjustment(self) -> pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs']:
        """
        Information about the adjustment.
        """
        return pulumi.get(self, "adjustment")

    @adjustment.setter
    def adjustment(self, value: pulumi.Input['GoogleCloudChannelV1RepricingAdjustmentArgs']):
        pulumi.set(self, "adjustment", value)

    @property
    @pulumi.getter(name="effectiveInvoiceMonth")
    def effective_invoice_month(self) -> pulumi.Input['GoogleTypeDateArgs']:
        """
        The YearMonth when these adjustments activate. The Day field needs to be "0" since we only accept YearMonth repricing boundaries.
        """
        return pulumi.get(self, "effective_invoice_month")

    @effective_invoice_month.setter
    def effective_invoice_month(self, value: pulumi.Input['GoogleTypeDateArgs']):
        pulumi.set(self, "effective_invoice_month", value)

    @property
    @pulumi.getter(name="rebillingBasis")
    def rebilling_basis(self) -> pulumi.Input['GoogleCloudChannelV1RepricingConfigRebillingBasis']:
        """
        The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
        """
        return pulumi.get(self, "rebilling_basis")

    @rebilling_basis.setter
    def rebilling_basis(self, value: pulumi.Input['GoogleCloudChannelV1RepricingConfigRebillingBasis']):
        pulumi.set(self, "rebilling_basis", value)

    @property
    @pulumi.getter(name="channelPartnerGranularity")
    @_utilities.deprecated("""Applies the repricing configuration at the channel partner level. Only ChannelPartnerRepricingConfig supports this value. Deprecated: This is no longer supported. Use RepricingConfig.entitlement_granularity instead.""")
    def channel_partner_granularity(self) -> Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs']]:
        """
        Applies the repricing configuration at the channel partner level. Only ChannelPartnerRepricingConfig supports this value. Deprecated: This is no longer supported. Use RepricingConfig.entitlement_granularity instead.
        """
        return pulumi.get(self, "channel_partner_granularity")

    @channel_partner_granularity.setter
    def channel_partner_granularity(self, value: Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs']]):
        pulumi.set(self, "channel_partner_granularity", value)

    @property
    @pulumi.getter(name="conditionalOverrides")
    def conditional_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudChannelV1ConditionalOverrideArgs']]]]:
        """
        The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.
        """
        return pulumi.get(self, "conditional_overrides")

    @conditional_overrides.setter
    def conditional_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudChannelV1ConditionalOverrideArgs']]]]):
        pulumi.set(self, "conditional_overrides", value)

    @property
    @pulumi.getter(name="entitlementGranularity")
    def entitlement_granularity(self) -> Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs']]:
        """
        Applies the repricing configuration at the entitlement level. Note: If a ChannelPartnerRepricingConfig using RepricingConfig.EntitlementGranularity becomes effective, then no existing or future RepricingConfig.ChannelPartnerGranularity will apply to the RepricingConfig.EntitlementGranularity.entitlement. This is the recommended value for both CustomerRepricingConfig and ChannelPartnerRepricingConfig.
        """
        return pulumi.get(self, "entitlement_granularity")

    @entitlement_granularity.setter
    def entitlement_granularity(self, value: Optional[pulumi.Input['GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs']]):
        pulumi.set(self, "entitlement_granularity", value)


@pulumi.input_type
class GoogleCloudChannelV1SkuGroupConditionArgs:
    def __init__(__self__, *,
                 sku_group: Optional[pulumi.Input[str]] = None):
        """
        A condition that applies the override if a line item SKU is found in the SKU group.
        :param pulumi.Input[str] sku_group: Specifies a SKU group (https://cloud.google.com/skus/sku-groups). Resource name of SKU group. Format: accounts/{account}/skuGroups/{sku_group}. Example: "accounts/C01234/skuGroups/3d50fd57-3157-4577-a5a9-a219b8490041".
        """
        if sku_group is not None:
            pulumi.set(__self__, "sku_group", sku_group)

    @property
    @pulumi.getter(name="skuGroup")
    def sku_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a SKU group (https://cloud.google.com/skus/sku-groups). Resource name of SKU group. Format: accounts/{account}/skuGroups/{sku_group}. Example: "accounts/C01234/skuGroups/3d50fd57-3157-4577-a5a9-a219b8490041".
        """
        return pulumi.get(self, "sku_group")

    @sku_group.setter
    def sku_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_group", value)


@pulumi.input_type
class GoogleCloudChannelV1ValueArgs:
    def __init__(__self__, *,
                 bool_value: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int64_value: Optional[pulumi.Input[str]] = None,
                 proto_value: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        Data type and value of a parameter.
        :param pulumi.Input[bool] bool_value: Represents a boolean value.
        :param pulumi.Input[float] double_value: Represents a double value.
        :param pulumi.Input[str] int64_value: Represents an int64 value.
        :param pulumi.Input[Mapping[str, Any]] proto_value: Represents an 'Any' proto value.
        :param pulumi.Input[str] string_value: Represents a string value.
        """
        if bool_value is not None:
            pulumi.set(__self__, "bool_value", bool_value)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int64_value is not None:
            pulumi.set(__self__, "int64_value", int64_value)
        if proto_value is not None:
            pulumi.set(__self__, "proto_value", proto_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="boolValue")
    def bool_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Represents a boolean value.
        """
        return pulumi.get(self, "bool_value")

    @bool_value.setter
    def bool_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bool_value", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        """
        Represents a double value.
        """
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="int64Value")
    def int64_value(self) -> Optional[pulumi.Input[str]]:
        """
        Represents an int64 value.
        """
        return pulumi.get(self, "int64_value")

    @int64_value.setter
    def int64_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "int64_value", value)

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Represents an 'Any' proto value.
        """
        return pulumi.get(self, "proto_value")

    @proto_value.setter
    def proto_value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "proto_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        Represents a string value.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class GoogleTypeDateArgs:
    def __init__(__self__, *,
                 day: Optional[pulumi.Input[int]] = None,
                 month: Optional[pulumi.Input[int]] = None,
                 year: Optional[pulumi.Input[int]] = None):
        """
        Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
        :param pulumi.Input[int] day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :param pulumi.Input[int] month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :param pulumi.Input[int] year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if year is not None:
            pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[int]]:
        """
        Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[int]]:
        """
        Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter
    def year(self) -> Optional[pulumi.Input[int]]:
        """
        Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "year", value)


@pulumi.input_type
class GoogleTypeDecimalArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[str]] = None):
        """
        A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's BigDecimal or Python's decimal.Decimal. [BigDecimal]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
        :param pulumi.Input[str] value: The decimal value, as a string. The string representation consists of an optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of zero or more decimal digits ("the integer"), optionally followed by a fraction, optionally followed by an exponent. An empty string **should** be interpreted as `0`. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one or more decimal digits. Services **should** normalize decimal values before storing them by: - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). - Coercing the exponent character to upper-case, with explicit sign (`2.5e8` -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` -> `2.5`). Services **may** perform additional normalization based on its own needs and the internal decimal implementation selected, such as shifting the decimal point and exponent value together (example: `2.5E-1` <-> `0.25`). Additionally, services **may** preserve trailing zeroes in the fraction to indicate increased precision, but are not required to do so. Note that only the `.` character is supported to divide the integer and the fraction; `,` **should not** be supported regardless of locale. Additionally, thousand separators **should not** be supported. If a service does support them, values **must** be normalized. The ENBF grammar is: DecimalString = '' | [Sign] Significand [Exponent]; Sign = '+' | '-'; Significand = Digits '.' | [Digits] '.' Digits; Exponent = ('e' | 'E') [Sign] Digits; Digits = { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }; Services **should** clearly document the range of supported values, the maximum supported precision (total number of digits), and, if applicable, the scale (number of digits after the decimal point), as well as how it behaves when receiving out-of-bounds values. Services **may** choose to accept values passed as input even when the value has a higher precision or scale than the service supports, and **should** round the value to fit the supported scale. Alternatively, the service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service receives a value outside of the supported range.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The decimal value, as a string. The string representation consists of an optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of zero or more decimal digits ("the integer"), optionally followed by a fraction, optionally followed by an exponent. An empty string **should** be interpreted as `0`. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one or more decimal digits. Services **should** normalize decimal values before storing them by: - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). - Coercing the exponent character to upper-case, with explicit sign (`2.5e8` -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` -> `2.5`). Services **may** perform additional normalization based on its own needs and the internal decimal implementation selected, such as shifting the decimal point and exponent value together (example: `2.5E-1` <-> `0.25`). Additionally, services **may** preserve trailing zeroes in the fraction to indicate increased precision, but are not required to do so. Note that only the `.` character is supported to divide the integer and the fraction; `,` **should not** be supported regardless of locale. Additionally, thousand separators **should not** be supported. If a service does support them, values **must** be normalized. The ENBF grammar is: DecimalString = '' | [Sign] Significand [Exponent]; Sign = '+' | '-'; Significand = Digits '.' | [Digits] '.' Digits; Exponent = ('e' | 'E') [Sign] Digits; Digits = { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }; Services **should** clearly document the range of supported values, the maximum supported precision (total number of digits), and, if applicable, the scale (number of digits after the decimal point), as well as how it behaves when receiving out-of-bounds values. Services **may** choose to accept values passed as input even when the value has a higher precision or scale than the service supports, and **should** round the value to fit the supported scale. Alternatively, the service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service receives a value outside of the supported range.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleTypePostalAddressArgs:
    def __init__(__self__, *,
                 region_code: pulumi.Input[str],
                 address_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 administrative_area: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 sorting_code: Optional[pulumi.Input[str]] = None,
                 sublocality: Optional[pulumi.Input[str]] = None):
        """
        Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
        :param pulumi.Input[str] region_code: CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lines: Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
        :param pulumi.Input[str] administrative_area: Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
        :param pulumi.Input[str] language_code: Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
        :param pulumi.Input[str] locality: Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
        :param pulumi.Input[str] organization: Optional. The name of the organization at the address.
        :param pulumi.Input[str] postal_code: Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
        :param pulumi.Input[int] revision: The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
        :param pulumi.Input[str] sorting_code: Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
        :param pulumi.Input[str] sublocality: Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
        """
        pulumi.set(__self__, "region_code", region_code)
        if address_lines is not None:
            pulumi.set(__self__, "address_lines", address_lines)
        if administrative_area is not None:
            pulumi.set(__self__, "administrative_area", administrative_area)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if sorting_code is not None:
            pulumi.set(__self__, "sorting_code", sorting_code)
        if sublocality is not None:
            pulumi.set(__self__, "sublocality", sublocality)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Input[str]:
        """
        CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
        """
        return pulumi.get(self, "address_lines")

    @address_lines.setter
    def address_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lines", value)

    @property
    @pulumi.getter(name="administrativeArea")
    def administrative_area(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
        """
        return pulumi.get(self, "administrative_area")

    @administrative_area.setter
    def administrative_area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrative_area", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the organization at the address.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter(name="sortingCode")
    def sorting_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
        """
        return pulumi.get(self, "sorting_code")

    @sorting_code.setter
    def sorting_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sorting_code", value)

    @property
    @pulumi.getter
    def sublocality(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
        """
        return pulumi.get(self, "sublocality")

    @sublocality.setter
    def sublocality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sublocality", value)


