# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 admin_settings: Optional[pulumi.Input['AdminSettingsArgs']] = None,
                 consumer_network: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input['CustomDomainArgs']] = None,
                 deny_maintenance_period: Optional[pulumi.Input['DenyMaintenancePeriodArgs']] = None,
                 encryption_config: Optional[pulumi.Input['EncryptionConfigArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_schedule: Optional[pulumi.Input['MaintenanceScheduleArgs']] = None,
                 maintenance_window: Optional[pulumi.Input['MaintenanceWindowArgs']] = None,
                 oauth_config: Optional[pulumi.Input['OAuthConfigArgs']] = None,
                 platform_edition: Optional[pulumi.Input['InstancePlatformEdition']] = None,
                 private_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 reserved_range: Optional[pulumi.Input[str]] = None,
                 user_metadata: Optional[pulumi.Input['UserMetadataArgs']] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] instance_id: Required. The unique instance identifier. Must contain only lowercase letters, numbers, or hyphens, with the first character a letter and the last a letter or a number. 63 characters maximum.
        :param pulumi.Input['AdminSettingsArgs'] admin_settings: Looker Instance Admin settings.
        :param pulumi.Input[str] consumer_network: Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
        :param pulumi.Input['DenyMaintenancePeriodArgs'] deny_maintenance_period: Maintenance denial period for this instance.
        :param pulumi.Input['EncryptionConfigArgs'] encryption_config: Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
        :param pulumi.Input['MaintenanceScheduleArgs'] maintenance_schedule: Maintenance schedule for this instance.
        :param pulumi.Input['MaintenanceWindowArgs'] maintenance_window: Maintenance window for this instance.
        :param pulumi.Input['OAuthConfigArgs'] oauth_config: Looker instance OAuth login settings.
        :param pulumi.Input['InstancePlatformEdition'] platform_edition: Platform edition.
        :param pulumi.Input[bool] private_ip_enabled: Whether private IP is enabled on the Looker instance.
        :param pulumi.Input[bool] public_ip_enabled: Whether public IP is enabled on the Looker instance.
        :param pulumi.Input[str] reserved_range: Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
        :param pulumi.Input['UserMetadataArgs'] user_metadata: User metadata.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if admin_settings is not None:
            pulumi.set(__self__, "admin_settings", admin_settings)
        if consumer_network is not None:
            pulumi.set(__self__, "consumer_network", consumer_network)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if deny_maintenance_period is not None:
            pulumi.set(__self__, "deny_maintenance_period", deny_maintenance_period)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_schedule is not None:
            pulumi.set(__self__, "maintenance_schedule", maintenance_schedule)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if oauth_config is not None:
            pulumi.set(__self__, "oauth_config", oauth_config)
        if platform_edition is not None:
            pulumi.set(__self__, "platform_edition", platform_edition)
        if private_ip_enabled is not None:
            pulumi.set(__self__, "private_ip_enabled", private_ip_enabled)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if public_ip_enabled is not None:
            pulumi.set(__self__, "public_ip_enabled", public_ip_enabled)
        if reserved_range is not None:
            pulumi.set(__self__, "reserved_range", reserved_range)
        if user_metadata is not None:
            pulumi.set(__self__, "user_metadata", user_metadata)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Required. The unique instance identifier. Must contain only lowercase letters, numbers, or hyphens, with the first character a letter and the last a letter or a number. 63 characters maximum.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="adminSettings")
    def admin_settings(self) -> Optional[pulumi.Input['AdminSettingsArgs']]:
        """
        Looker Instance Admin settings.
        """
        return pulumi.get(self, "admin_settings")

    @admin_settings.setter
    def admin_settings(self, value: Optional[pulumi.Input['AdminSettingsArgs']]):
        pulumi.set(self, "admin_settings", value)

    @property
    @pulumi.getter(name="consumerNetwork")
    def consumer_network(self) -> Optional[pulumi.Input[str]]:
        """
        Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
        """
        return pulumi.get(self, "consumer_network")

    @consumer_network.setter
    def consumer_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_network", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input['CustomDomainArgs']]:
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input['CustomDomainArgs']]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="denyMaintenancePeriod")
    def deny_maintenance_period(self) -> Optional[pulumi.Input['DenyMaintenancePeriodArgs']]:
        """
        Maintenance denial period for this instance.
        """
        return pulumi.get(self, "deny_maintenance_period")

    @deny_maintenance_period.setter
    def deny_maintenance_period(self, value: Optional[pulumi.Input['DenyMaintenancePeriodArgs']]):
        pulumi.set(self, "deny_maintenance_period", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['EncryptionConfigArgs']]:
        """
        Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['EncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceSchedule")
    def maintenance_schedule(self) -> Optional[pulumi.Input['MaintenanceScheduleArgs']]:
        """
        Maintenance schedule for this instance.
        """
        return pulumi.get(self, "maintenance_schedule")

    @maintenance_schedule.setter
    def maintenance_schedule(self, value: Optional[pulumi.Input['MaintenanceScheduleArgs']]):
        pulumi.set(self, "maintenance_schedule", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MaintenanceWindowArgs']]:
        """
        Maintenance window for this instance.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="oauthConfig")
    def oauth_config(self) -> Optional[pulumi.Input['OAuthConfigArgs']]:
        """
        Looker instance OAuth login settings.
        """
        return pulumi.get(self, "oauth_config")

    @oauth_config.setter
    def oauth_config(self, value: Optional[pulumi.Input['OAuthConfigArgs']]):
        pulumi.set(self, "oauth_config", value)

    @property
    @pulumi.getter(name="platformEdition")
    def platform_edition(self) -> Optional[pulumi.Input['InstancePlatformEdition']]:
        """
        Platform edition.
        """
        return pulumi.get(self, "platform_edition")

    @platform_edition.setter
    def platform_edition(self, value: Optional[pulumi.Input['InstancePlatformEdition']]):
        pulumi.set(self, "platform_edition", value)

    @property
    @pulumi.getter(name="privateIpEnabled")
    def private_ip_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether private IP is enabled on the Looker instance.
        """
        return pulumi.get(self, "private_ip_enabled")

    @private_ip_enabled.setter
    def private_ip_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_ip_enabled", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="publicIpEnabled")
    def public_ip_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether public IP is enabled on the Looker instance.
        """
        return pulumi.get(self, "public_ip_enabled")

    @public_ip_enabled.setter
    def public_ip_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_enabled", value)

    @property
    @pulumi.getter(name="reservedRange")
    def reserved_range(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
        """
        return pulumi.get(self, "reserved_range")

    @reserved_range.setter
    def reserved_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reserved_range", value)

    @property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> Optional[pulumi.Input['UserMetadataArgs']]:
        """
        User metadata.
        """
        return pulumi.get(self, "user_metadata")

    @user_metadata.setter
    def user_metadata(self, value: Optional[pulumi.Input['UserMetadataArgs']]):
        pulumi.set(self, "user_metadata", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_settings: Optional[pulumi.Input[pulumi.InputType['AdminSettingsArgs']]] = None,
                 consumer_network: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[pulumi.InputType['CustomDomainArgs']]] = None,
                 deny_maintenance_period: Optional[pulumi.Input[pulumi.InputType['DenyMaintenancePeriodArgs']]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['EncryptionConfigArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_schedule: Optional[pulumi.Input[pulumi.InputType['MaintenanceScheduleArgs']]] = None,
                 maintenance_window: Optional[pulumi.Input[pulumi.InputType['MaintenanceWindowArgs']]] = None,
                 oauth_config: Optional[pulumi.Input[pulumi.InputType['OAuthConfigArgs']]] = None,
                 platform_edition: Optional[pulumi.Input['InstancePlatformEdition']] = None,
                 private_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 reserved_range: Optional[pulumi.Input[str]] = None,
                 user_metadata: Optional[pulumi.Input[pulumi.InputType['UserMetadataArgs']]] = None,
                 __props__=None):
        """
        Creates a new Instance in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AdminSettingsArgs']] admin_settings: Looker Instance Admin settings.
        :param pulumi.Input[str] consumer_network: Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
        :param pulumi.Input[pulumi.InputType['DenyMaintenancePeriodArgs']] deny_maintenance_period: Maintenance denial period for this instance.
        :param pulumi.Input[pulumi.InputType['EncryptionConfigArgs']] encryption_config: Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
        :param pulumi.Input[str] instance_id: Required. The unique instance identifier. Must contain only lowercase letters, numbers, or hyphens, with the first character a letter and the last a letter or a number. 63 characters maximum.
        :param pulumi.Input[pulumi.InputType['MaintenanceScheduleArgs']] maintenance_schedule: Maintenance schedule for this instance.
        :param pulumi.Input[pulumi.InputType['MaintenanceWindowArgs']] maintenance_window: Maintenance window for this instance.
        :param pulumi.Input[pulumi.InputType['OAuthConfigArgs']] oauth_config: Looker instance OAuth login settings.
        :param pulumi.Input['InstancePlatformEdition'] platform_edition: Platform edition.
        :param pulumi.Input[bool] private_ip_enabled: Whether private IP is enabled on the Looker instance.
        :param pulumi.Input[bool] public_ip_enabled: Whether public IP is enabled on the Looker instance.
        :param pulumi.Input[str] reserved_range: Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
        :param pulumi.Input[pulumi.InputType['UserMetadataArgs']] user_metadata: User metadata.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new Instance in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_settings: Optional[pulumi.Input[pulumi.InputType['AdminSettingsArgs']]] = None,
                 consumer_network: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[pulumi.InputType['CustomDomainArgs']]] = None,
                 deny_maintenance_period: Optional[pulumi.Input[pulumi.InputType['DenyMaintenancePeriodArgs']]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['EncryptionConfigArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_schedule: Optional[pulumi.Input[pulumi.InputType['MaintenanceScheduleArgs']]] = None,
                 maintenance_window: Optional[pulumi.Input[pulumi.InputType['MaintenanceWindowArgs']]] = None,
                 oauth_config: Optional[pulumi.Input[pulumi.InputType['OAuthConfigArgs']]] = None,
                 platform_edition: Optional[pulumi.Input['InstancePlatformEdition']] = None,
                 private_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 reserved_range: Optional[pulumi.Input[str]] = None,
                 user_metadata: Optional[pulumi.Input[pulumi.InputType['UserMetadataArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["admin_settings"] = admin_settings
            __props__.__dict__["consumer_network"] = consumer_network
            __props__.__dict__["custom_domain"] = custom_domain
            __props__.__dict__["deny_maintenance_period"] = deny_maintenance_period
            __props__.__dict__["encryption_config"] = encryption_config
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_schedule"] = maintenance_schedule
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["oauth_config"] = oauth_config
            __props__.__dict__["platform_edition"] = platform_edition
            __props__.__dict__["private_ip_enabled"] = private_ip_enabled
            __props__.__dict__["project"] = project
            __props__.__dict__["public_ip_enabled"] = public_ip_enabled
            __props__.__dict__["reserved_range"] = reserved_range
            __props__.__dict__["user_metadata"] = user_metadata
            __props__.__dict__["create_time"] = None
            __props__.__dict__["egress_public_ip"] = None
            __props__.__dict__["ingress_private_ip"] = None
            __props__.__dict__["ingress_public_ip"] = None
            __props__.__dict__["last_deny_maintenance_period"] = None
            __props__.__dict__["looker_uri"] = None
            __props__.__dict__["looker_version"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["instanceId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Instance, __self__).__init__(
            'google-native:looker/v1:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InstanceArgs.__new__(InstanceArgs)

        __props__.__dict__["admin_settings"] = None
        __props__.__dict__["consumer_network"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["custom_domain"] = None
        __props__.__dict__["deny_maintenance_period"] = None
        __props__.__dict__["egress_public_ip"] = None
        __props__.__dict__["encryption_config"] = None
        __props__.__dict__["ingress_private_ip"] = None
        __props__.__dict__["ingress_public_ip"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["last_deny_maintenance_period"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["looker_uri"] = None
        __props__.__dict__["looker_version"] = None
        __props__.__dict__["maintenance_schedule"] = None
        __props__.__dict__["maintenance_window"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["oauth_config"] = None
        __props__.__dict__["platform_edition"] = None
        __props__.__dict__["private_ip_enabled"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["public_ip_enabled"] = None
        __props__.__dict__["reserved_range"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["user_metadata"] = None
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminSettings")
    def admin_settings(self) -> pulumi.Output['outputs.AdminSettingsResponse']:
        """
        Looker Instance Admin settings.
        """
        return pulumi.get(self, "admin_settings")

    @property
    @pulumi.getter(name="consumerNetwork")
    def consumer_network(self) -> pulumi.Output[str]:
        """
        Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
        """
        return pulumi.get(self, "consumer_network")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time when the Looker instance provisioning was first requested.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> pulumi.Output['outputs.CustomDomainResponse']:
        return pulumi.get(self, "custom_domain")

    @property
    @pulumi.getter(name="denyMaintenancePeriod")
    def deny_maintenance_period(self) -> pulumi.Output['outputs.DenyMaintenancePeriodResponse']:
        """
        Maintenance denial period for this instance.
        """
        return pulumi.get(self, "deny_maintenance_period")

    @property
    @pulumi.getter(name="egressPublicIp")
    def egress_public_ip(self) -> pulumi.Output[str]:
        """
        Public Egress IP (IPv4).
        """
        return pulumi.get(self, "egress_public_ip")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Output['outputs.EncryptionConfigResponse']:
        """
        Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="ingressPrivateIp")
    def ingress_private_ip(self) -> pulumi.Output[str]:
        """
        Private Ingress IP (IPv4).
        """
        return pulumi.get(self, "ingress_private_ip")

    @property
    @pulumi.getter(name="ingressPublicIp")
    def ingress_public_ip(self) -> pulumi.Output[str]:
        """
        Public Ingress IP (IPv4).
        """
        return pulumi.get(self, "ingress_public_ip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Required. The unique instance identifier. Must contain only lowercase letters, numbers, or hyphens, with the first character a letter and the last a letter or a number. 63 characters maximum.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="lastDenyMaintenancePeriod")
    def last_deny_maintenance_period(self) -> pulumi.Output['outputs.DenyMaintenancePeriodResponse']:
        """
        Last computed maintenance denial period for this instance.
        """
        return pulumi.get(self, "last_deny_maintenance_period")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="lookerUri")
    def looker_uri(self) -> pulumi.Output[str]:
        """
        Looker instance URI which can be used to access the Looker Instance UI.
        """
        return pulumi.get(self, "looker_uri")

    @property
    @pulumi.getter(name="lookerVersion")
    def looker_version(self) -> pulumi.Output[str]:
        """
        The Looker version that the instance is using.
        """
        return pulumi.get(self, "looker_version")

    @property
    @pulumi.getter(name="maintenanceSchedule")
    def maintenance_schedule(self) -> pulumi.Output['outputs.MaintenanceScheduleResponse']:
        """
        Maintenance schedule for this instance.
        """
        return pulumi.get(self, "maintenance_schedule")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.MaintenanceWindowResponse']:
        """
        Maintenance window for this instance.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Format: `projects/{project}/locations/{location}/instances/{instance}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthConfig")
    def oauth_config(self) -> pulumi.Output['outputs.OAuthConfigResponse']:
        """
        Looker instance OAuth login settings.
        """
        return pulumi.get(self, "oauth_config")

    @property
    @pulumi.getter(name="platformEdition")
    def platform_edition(self) -> pulumi.Output[str]:
        """
        Platform edition.
        """
        return pulumi.get(self, "platform_edition")

    @property
    @pulumi.getter(name="privateIpEnabled")
    def private_ip_enabled(self) -> pulumi.Output[bool]:
        """
        Whether private IP is enabled on the Looker instance.
        """
        return pulumi.get(self, "private_ip_enabled")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="publicIpEnabled")
    def public_ip_enabled(self) -> pulumi.Output[bool]:
        """
        Whether public IP is enabled on the Looker instance.
        """
        return pulumi.get(self, "public_ip_enabled")

    @property
    @pulumi.getter(name="reservedRange")
    def reserved_range(self) -> pulumi.Output[str]:
        """
        Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
        """
        return pulumi.get(self, "reserved_range")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time when the Looker instance was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> pulumi.Output['outputs.UserMetadataResponse']:
        """
        User metadata.
        """
        return pulumi.get(self, "user_metadata")

