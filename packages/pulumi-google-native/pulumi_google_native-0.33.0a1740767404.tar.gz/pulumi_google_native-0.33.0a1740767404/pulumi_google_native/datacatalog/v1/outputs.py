# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BindingResponse',
    'ExprResponse',
    'GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse',
    'GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse',
    'GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse',
    'GoogleCloudDatacatalogV1BigQueryTableSpecResponse',
    'GoogleCloudDatacatalogV1BusinessContextResponse',
    'GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse',
    'GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse',
    'GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse',
    'GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse',
    'GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecResponse',
    'GoogleCloudDatacatalogV1ColumnSchemaResponse',
    'GoogleCloudDatacatalogV1CommonUsageStatsResponse',
    'GoogleCloudDatacatalogV1ContactsPersonResponse',
    'GoogleCloudDatacatalogV1ContactsResponse',
    'GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse',
    'GoogleCloudDatacatalogV1DataSourceResponse',
    'GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse',
    'GoogleCloudDatacatalogV1DatabaseTableSpecResponse',
    'GoogleCloudDatacatalogV1DataplexExternalTableResponse',
    'GoogleCloudDatacatalogV1DataplexFilesetSpecResponse',
    'GoogleCloudDatacatalogV1DataplexSpecResponse',
    'GoogleCloudDatacatalogV1DataplexTableSpecResponse',
    'GoogleCloudDatacatalogV1DatasetSpecResponse',
    'GoogleCloudDatacatalogV1EntryOverviewResponse',
    'GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse',
    'GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse',
    'GoogleCloudDatacatalogV1FieldTypeResponse',
    'GoogleCloudDatacatalogV1FilesetSpecResponse',
    'GoogleCloudDatacatalogV1GcsFileSpecResponse',
    'GoogleCloudDatacatalogV1GcsFilesetSpecResponse',
    'GoogleCloudDatacatalogV1LookerSystemSpecResponse',
    'GoogleCloudDatacatalogV1ModelSpecResponse',
    'GoogleCloudDatacatalogV1PersonalDetailsResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaResponse',
    'GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse',
    'GoogleCloudDatacatalogV1RoutineSpecArgumentResponse',
    'GoogleCloudDatacatalogV1RoutineSpecResponse',
    'GoogleCloudDatacatalogV1SchemaResponse',
    'GoogleCloudDatacatalogV1ServiceSpecResponse',
    'GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse',
    'GoogleCloudDatacatalogV1StoragePropertiesResponse',
    'GoogleCloudDatacatalogV1SystemTimestampsResponse',
    'GoogleCloudDatacatalogV1TableSpecResponse',
    'GoogleCloudDatacatalogV1TagTemplateFieldResponse',
    'GoogleCloudDatacatalogV1TaxonomyServiceResponse',
    'GoogleCloudDatacatalogV1UsageSignalResponse',
    'GoogleCloudDatacatalogV1UsageStatsResponse',
    'GoogleCloudDatacatalogV1VertexDatasetSpecResponse',
    'GoogleCloudDatacatalogV1VertexModelSourceInfoResponse',
    'GoogleCloudDatacatalogV1VertexModelSpecResponse',
    'GoogleCloudDatacatalogV1ViewSpecResponse',
]

@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse(dict):
    """
    Specification for the BigQuery connection.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudSql":
            suggest = "cloud_sql"
        elif key == "connectionType":
            suggest = "connection_type"
        elif key == "hasCredential":
            suggest = "has_credential"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_sql: 'outputs.GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse',
                 connection_type: str,
                 has_credential: bool):
        """
        Specification for the BigQuery connection.
        :param 'GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse' cloud_sql: Specification for the BigQuery connection to a Cloud SQL instance.
        :param str connection_type: The type of the BigQuery connection.
        :param bool has_credential: True if there are credentials attached to the BigQuery connection; false otherwise.
        """
        pulumi.set(__self__, "cloud_sql", cloud_sql)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "has_credential", has_credential)

    @property
    @pulumi.getter(name="cloudSql")
    def cloud_sql(self) -> 'outputs.GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse':
        """
        Specification for the BigQuery connection to a Cloud SQL instance.
        """
        return pulumi.get(self, "cloud_sql")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The type of the BigQuery connection.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="hasCredential")
    def has_credential(self) -> bool:
        """
        True if there are credentials attached to the BigQuery connection; false otherwise.
        """
        return pulumi.get(self, "has_credential")


@pulumi.output_type
class GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse(dict):
    """
    Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestShardResource":
            suggest = "latest_shard_resource"
        elif key == "shardCount":
            suggest = "shard_count"
        elif key == "tablePrefix":
            suggest = "table_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: str,
                 latest_shard_resource: str,
                 shard_count: str,
                 table_prefix: str):
        """
        Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
        :param str dataset: The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
        :param str latest_shard_resource: BigQuery resource name of the latest shard.
        :param str shard_count: Total number of shards.
        :param str table_prefix: The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
        """
        pulumi.set(__self__, "dataset", dataset)
        pulumi.set(__self__, "latest_shard_resource", latest_shard_resource)
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "table_prefix", table_prefix)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        """
        The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
        """
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="latestShardResource")
    def latest_shard_resource(self) -> str:
        """
        BigQuery resource name of the latest shard.
        """
        return pulumi.get(self, "latest_shard_resource")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> str:
        """
        Total number of shards.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="tablePrefix")
    def table_prefix(self) -> str:
        """
        The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
        """
        return pulumi.get(self, "table_prefix")


@pulumi.output_type
class GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse(dict):
    """
    Fields specific for BigQuery routines.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importedLibraries":
            suggest = "imported_libraries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 imported_libraries: Sequence[str]):
        """
        Fields specific for BigQuery routines.
        :param Sequence[str] imported_libraries: Paths of the imported libraries.
        """
        pulumi.set(__self__, "imported_libraries", imported_libraries)

    @property
    @pulumi.getter(name="importedLibraries")
    def imported_libraries(self) -> Sequence[str]:
        """
        Paths of the imported libraries.
        """
        return pulumi.get(self, "imported_libraries")


@pulumi.output_type
class GoogleCloudDatacatalogV1BigQueryTableSpecResponse(dict):
    """
    Describes a BigQuery table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableSourceType":
            suggest = "table_source_type"
        elif key == "tableSpec":
            suggest = "table_spec"
        elif key == "viewSpec":
            suggest = "view_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1BigQueryTableSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1BigQueryTableSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1BigQueryTableSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table_source_type: str,
                 table_spec: 'outputs.GoogleCloudDatacatalogV1TableSpecResponse',
                 view_spec: 'outputs.GoogleCloudDatacatalogV1ViewSpecResponse'):
        """
        Describes a BigQuery table.
        :param str table_source_type: The table source type.
        :param 'GoogleCloudDatacatalogV1TableSpecResponse' table_spec: Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
        :param 'GoogleCloudDatacatalogV1ViewSpecResponse' view_spec: Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
        """
        pulumi.set(__self__, "table_source_type", table_source_type)
        pulumi.set(__self__, "table_spec", table_spec)
        pulumi.set(__self__, "view_spec", view_spec)

    @property
    @pulumi.getter(name="tableSourceType")
    def table_source_type(self) -> str:
        """
        The table source type.
        """
        return pulumi.get(self, "table_source_type")

    @property
    @pulumi.getter(name="tableSpec")
    def table_spec(self) -> 'outputs.GoogleCloudDatacatalogV1TableSpecResponse':
        """
        Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
        """
        return pulumi.get(self, "table_spec")

    @property
    @pulumi.getter(name="viewSpec")
    def view_spec(self) -> 'outputs.GoogleCloudDatacatalogV1ViewSpecResponse':
        """
        Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
        """
        return pulumi.get(self, "view_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1BusinessContextResponse(dict):
    """
    Business Context of the entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryOverview":
            suggest = "entry_overview"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1BusinessContextResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1BusinessContextResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1BusinessContextResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contacts: 'outputs.GoogleCloudDatacatalogV1ContactsResponse',
                 entry_overview: 'outputs.GoogleCloudDatacatalogV1EntryOverviewResponse'):
        """
        Business Context of the entry.
        :param 'GoogleCloudDatacatalogV1ContactsResponse' contacts: Contact people for the entry.
        :param 'GoogleCloudDatacatalogV1EntryOverviewResponse' entry_overview: Entry overview fields for rich text descriptions of entries.
        """
        pulumi.set(__self__, "contacts", contacts)
        pulumi.set(__self__, "entry_overview", entry_overview)

    @property
    @pulumi.getter
    def contacts(self) -> 'outputs.GoogleCloudDatacatalogV1ContactsResponse':
        """
        Contact people for the entry.
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="entryOverview")
    def entry_overview(self) -> 'outputs.GoogleCloudDatacatalogV1EntryOverviewResponse':
        """
        Entry overview fields for rich text descriptions of entries.
        """
        return pulumi.get(self, "entry_overview")


@pulumi.output_type
class GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse(dict):
    """
    Spec that applies to clusters of an Instance of Cloud Bigtable.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "linkedResource":
            suggest = "linked_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 linked_resource: str,
                 location: str,
                 type: str):
        """
        Spec that applies to clusters of an Instance of Cloud Bigtable.
        :param str display_name: Name of the cluster.
        :param str linked_resource: A link back to the parent resource, in this case Instance.
        :param str location: Location of the cluster, typically a Cloud zone.
        :param str type: Type of the resource. For a cluster this would be "CLUSTER".
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "linked_resource", linked_resource)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="linkedResource")
    def linked_resource(self) -> str:
        """
        A link back to the parent resource, in this case Instance.
        """
        return pulumi.get(self, "linked_resource")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the cluster, typically a Cloud zone.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the resource. For a cluster this would be "CLUSTER".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse(dict):
    """
    Specification that applies to Instance entries that are part of `CLOUD_BIGTABLE` system. (user_specified_type)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudBigtableClusterSpecs":
            suggest = "cloud_bigtable_cluster_specs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_bigtable_cluster_specs: Sequence['outputs.GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse']):
        """
        Specification that applies to Instance entries that are part of `CLOUD_BIGTABLE` system. (user_specified_type)
        :param Sequence['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse'] cloud_bigtable_cluster_specs: The list of clusters for the Instance.
        """
        pulumi.set(__self__, "cloud_bigtable_cluster_specs", cloud_bigtable_cluster_specs)

    @property
    @pulumi.getter(name="cloudBigtableClusterSpecs")
    def cloud_bigtable_cluster_specs(self) -> Sequence['outputs.GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecResponse']:
        """
        The list of clusters for the Instance.
        """
        return pulumi.get(self, "cloud_bigtable_cluster_specs")


@pulumi.output_type
class GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse(dict):
    """
    Specification that applies to all entries that are part of `CLOUD_BIGTABLE` system (user_specified_type)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceDisplayName":
            suggest = "instance_display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_display_name: str):
        """
        Specification that applies to all entries that are part of `CLOUD_BIGTABLE` system (user_specified_type)
        :param str instance_display_name: Display name of the Instance. This is user specified and different from the resource name.
        """
        pulumi.set(__self__, "instance_display_name", instance_display_name)

    @property
    @pulumi.getter(name="instanceDisplayName")
    def instance_display_name(self) -> str:
        """
        Display name of the Instance. This is user specified and different from the resource name.
        """
        return pulumi.get(self, "instance_display_name")


@pulumi.output_type
class GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse(dict):
    """
    Specification for the BigQuery connection to a Cloud SQL instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 instance_id: str,
                 type: str):
        """
        Specification for the BigQuery connection to a Cloud SQL instance.
        :param str database: Database name.
        :param str instance_id: Cloud SQL instance ID in the format of `project:location:instance`.
        :param str type: Type of the Cloud SQL database.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Cloud SQL instance ID in the format of `project:location:instance`.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Cloud SQL database.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecResponse(dict):
    """
    Column info specific to Looker System.
    """
    def __init__(__self__, *,
                 type: str):
        """
        Column info specific to Looker System.
        :param str type: Looker specific column type of this column.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Looker specific column type of this column.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1ColumnSchemaResponse(dict):
    """
    A column within a schema. Columns can be nested inside other columns.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "gcRule":
            suggest = "gc_rule"
        elif key == "highestIndexingType":
            suggest = "highest_indexing_type"
        elif key == "lookerColumnSpec":
            suggest = "looker_column_spec"
        elif key == "ordinalPosition":
            suggest = "ordinal_position"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1ColumnSchemaResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1ColumnSchemaResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1ColumnSchemaResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: str,
                 default_value: str,
                 description: str,
                 gc_rule: str,
                 highest_indexing_type: str,
                 looker_column_spec: 'outputs.GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecResponse',
                 mode: str,
                 ordinal_position: int,
                 subcolumns: Sequence['outputs.GoogleCloudDatacatalogV1ColumnSchemaResponse'],
                 type: str):
        """
        A column within a schema. Columns can be nested inside other columns.
        :param str column: Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
        :param str default_value: Optional. Default value for the column.
        :param str description: Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
        :param str gc_rule: Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
        :param str highest_indexing_type: Optional. Most important inclusion of this column.
        :param 'GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecResponse' looker_column_spec: Looker specific column info of this column.
        :param str mode: Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
        :param int ordinal_position: Optional. Ordinal position
        :param Sequence['GoogleCloudDatacatalogV1ColumnSchemaResponse'] subcolumns: Optional. Schema of sub-columns. A column can have zero or more sub-columns.
        :param str type: Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gc_rule", gc_rule)
        pulumi.set(__self__, "highest_indexing_type", highest_indexing_type)
        pulumi.set(__self__, "looker_column_spec", looker_column_spec)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "ordinal_position", ordinal_position)
        pulumi.set(__self__, "subcolumns", subcolumns)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def column(self) -> str:
        """
        Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
        """
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Optional. Default value for the column.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gcRule")
    def gc_rule(self) -> str:
        """
        Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
        """
        return pulumi.get(self, "gc_rule")

    @property
    @pulumi.getter(name="highestIndexingType")
    def highest_indexing_type(self) -> str:
        """
        Optional. Most important inclusion of this column.
        """
        return pulumi.get(self, "highest_indexing_type")

    @property
    @pulumi.getter(name="lookerColumnSpec")
    def looker_column_spec(self) -> 'outputs.GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecResponse':
        """
        Looker specific column info of this column.
        """
        return pulumi.get(self, "looker_column_spec")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="ordinalPosition")
    def ordinal_position(self) -> int:
        """
        Optional. Ordinal position
        """
        return pulumi.get(self, "ordinal_position")

    @property
    @pulumi.getter
    def subcolumns(self) -> Sequence['outputs.GoogleCloudDatacatalogV1ColumnSchemaResponse']:
        """
        Optional. Schema of sub-columns. A column can have zero or more sub-columns.
        """
        return pulumi.get(self, "subcolumns")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1CommonUsageStatsResponse(dict):
    """
    Common statistics on the entry's usage. They can be set on any system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewCount":
            suggest = "view_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1CommonUsageStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1CommonUsageStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1CommonUsageStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view_count: str):
        """
        Common statistics on the entry's usage. They can be set on any system.
        :param str view_count: View count in source system.
        """
        pulumi.set(__self__, "view_count", view_count)

    @property
    @pulumi.getter(name="viewCount")
    def view_count(self) -> str:
        """
        View count in source system.
        """
        return pulumi.get(self, "view_count")


@pulumi.output_type
class GoogleCloudDatacatalogV1ContactsPersonResponse(dict):
    """
    A contact person for the entry.
    """
    def __init__(__self__, *,
                 designation: str,
                 email: str):
        """
        A contact person for the entry.
        :param str designation: Designation of the person, for example, Data Steward.
        :param str email: Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
        """
        pulumi.set(__self__, "designation", designation)
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def designation(self) -> str:
        """
        Designation of the person, for example, Data Steward.
        """
        return pulumi.get(self, "designation")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GoogleCloudDatacatalogV1ContactsResponse(dict):
    """
    Contact people for the entry.
    """
    def __init__(__self__, *,
                 people: Sequence['outputs.GoogleCloudDatacatalogV1ContactsPersonResponse']):
        """
        Contact people for the entry.
        :param Sequence['GoogleCloudDatacatalogV1ContactsPersonResponse'] people: The list of contact people for the entry.
        """
        pulumi.set(__self__, "people", people)

    @property
    @pulumi.getter
    def people(self) -> Sequence['outputs.GoogleCloudDatacatalogV1ContactsPersonResponse']:
        """
        The list of contact people for the entry.
        """
        return pulumi.get(self, "people")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse(dict):
    """
    Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bigqueryConnectionSpec":
            suggest = "bigquery_connection_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bigquery_connection_spec: 'outputs.GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse'):
        """
        Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.
        :param 'GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse' bigquery_connection_spec: Fields specific to BigQuery connections.
        """
        pulumi.set(__self__, "bigquery_connection_spec", bigquery_connection_spec)

    @property
    @pulumi.getter(name="bigqueryConnectionSpec")
    def bigquery_connection_spec(self) -> 'outputs.GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse':
        """
        Fields specific to BigQuery connections.
        """
        return pulumi.get(self, "bigquery_connection_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataSourceResponse(dict):
    """
    Physical location of an entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceEntry":
            suggest = "source_entry"
        elif key == "storageProperties":
            suggest = "storage_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataSourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataSourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataSourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: str,
                 service: str,
                 source_entry: str,
                 storage_properties: 'outputs.GoogleCloudDatacatalogV1StoragePropertiesResponse'):
        """
        Physical location of an entry.
        :param str resource: Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
        :param str service: Service that physically stores the data.
        :param str source_entry: Data Catalog entry name, if applicable.
        :param 'GoogleCloudDatacatalogV1StoragePropertiesResponse' storage_properties: Detailed properties of the underlying storage.
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "source_entry", source_entry)
        pulumi.set(__self__, "storage_properties", storage_properties)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Service that physically stores the data.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sourceEntry")
    def source_entry(self) -> str:
        """
        Data Catalog entry name, if applicable.
        """
        return pulumi.get(self, "source_entry")

    @property
    @pulumi.getter(name="storageProperties")
    def storage_properties(self) -> 'outputs.GoogleCloudDatacatalogV1StoragePropertiesResponse':
        """
        Detailed properties of the underlying storage.
        """
        return pulumi.get(self, "storage_properties")


@pulumi.output_type
class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse(dict):
    """
    Specification that applies to database view.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseTable":
            suggest = "base_table"
        elif key == "sqlQuery":
            suggest = "sql_query"
        elif key == "viewType":
            suggest = "view_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_table: str,
                 sql_query: str,
                 view_type: str):
        """
        Specification that applies to database view.
        :param str base_table: Name of a singular table this view reflects one to one.
        :param str sql_query: SQL query used to generate this view.
        :param str view_type: Type of this view.
        """
        pulumi.set(__self__, "base_table", base_table)
        pulumi.set(__self__, "sql_query", sql_query)
        pulumi.set(__self__, "view_type", view_type)

    @property
    @pulumi.getter(name="baseTable")
    def base_table(self) -> str:
        """
        Name of a singular table this view reflects one to one.
        """
        return pulumi.get(self, "base_table")

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> str:
        """
        SQL query used to generate this view.
        """
        return pulumi.get(self, "sql_query")

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> str:
        """
        Type of this view.
        """
        return pulumi.get(self, "view_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1DatabaseTableSpecResponse(dict):
    """
    Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseViewSpec":
            suggest = "database_view_spec"
        elif key == "dataplexTable":
            suggest = "dataplex_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DatabaseTableSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DatabaseTableSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DatabaseTableSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_view_spec: 'outputs.GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse',
                 dataplex_table: 'outputs.GoogleCloudDatacatalogV1DataplexTableSpecResponse',
                 type: str):
        """
        Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
        :param 'GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse' database_view_spec: Spec what aplies to tables that are actually views. Not set for "real" tables.
        :param 'GoogleCloudDatacatalogV1DataplexTableSpecResponse' dataplex_table: Fields specific to a Dataplex table and present only in the Dataplex table entries.
        :param str type: Type of this table.
        """
        pulumi.set(__self__, "database_view_spec", database_view_spec)
        pulumi.set(__self__, "dataplex_table", dataplex_table)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="databaseViewSpec")
    def database_view_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecResponse':
        """
        Spec what aplies to tables that are actually views. Not set for "real" tables.
        """
        return pulumi.get(self, "database_view_spec")

    @property
    @pulumi.getter(name="dataplexTable")
    def dataplex_table(self) -> 'outputs.GoogleCloudDatacatalogV1DataplexTableSpecResponse':
        """
        Fields specific to a Dataplex table and present only in the Dataplex table entries.
        """
        return pulumi.get(self, "dataplex_table")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this table.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataplexExternalTableResponse(dict):
    """
    External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them "external tables". External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCatalogEntry":
            suggest = "data_catalog_entry"
        elif key == "fullyQualifiedName":
            suggest = "fully_qualified_name"
        elif key == "googleCloudResource":
            suggest = "google_cloud_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataplexExternalTableResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataplexExternalTableResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataplexExternalTableResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_catalog_entry: str,
                 fully_qualified_name: str,
                 google_cloud_resource: str,
                 system: str):
        """
        External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them "external tables". External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.
        :param str data_catalog_entry: Name of the Data Catalog entry representing the external table.
        :param str fully_qualified_name: Fully qualified name (FQN) of the external table.
        :param str google_cloud_resource: Google Cloud resource name of the external table.
        :param str system: Service in which the external table is registered.
        """
        pulumi.set(__self__, "data_catalog_entry", data_catalog_entry)
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        pulumi.set(__self__, "google_cloud_resource", google_cloud_resource)
        pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter(name="dataCatalogEntry")
    def data_catalog_entry(self) -> str:
        """
        Name of the Data Catalog entry representing the external table.
        """
        return pulumi.get(self, "data_catalog_entry")

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> str:
        """
        Fully qualified name (FQN) of the external table.
        """
        return pulumi.get(self, "fully_qualified_name")

    @property
    @pulumi.getter(name="googleCloudResource")
    def google_cloud_resource(self) -> str:
        """
        Google Cloud resource name of the external table.
        """
        return pulumi.get(self, "google_cloud_resource")

    @property
    @pulumi.getter
    def system(self) -> str:
        """
        Service in which the external table is registered.
        """
        return pulumi.get(self, "system")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataplexFilesetSpecResponse(dict):
    """
    Entry specyfication for a Dataplex fileset.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataplexSpec":
            suggest = "dataplex_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataplexFilesetSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataplexFilesetSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataplexFilesetSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplex_spec: 'outputs.GoogleCloudDatacatalogV1DataplexSpecResponse'):
        """
        Entry specyfication for a Dataplex fileset.
        :param 'GoogleCloudDatacatalogV1DataplexSpecResponse' dataplex_spec: Common Dataplex fields.
        """
        pulumi.set(__self__, "dataplex_spec", dataplex_spec)

    @property
    @pulumi.getter(name="dataplexSpec")
    def dataplex_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DataplexSpecResponse':
        """
        Common Dataplex fields.
        """
        return pulumi.get(self, "dataplex_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataplexSpecResponse(dict):
    """
    Common Dataplex fields.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionFormat":
            suggest = "compression_format"
        elif key == "dataFormat":
            suggest = "data_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataplexSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataplexSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataplexSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asset: str,
                 compression_format: str,
                 data_format: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaResponse',
                 project: str):
        """
        Common Dataplex fields.
        :param str asset: Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
        :param str compression_format: Compression format of the data, e.g., zip, gzip etc.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaResponse' data_format: Format of the data.
        :param str project: Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
        """
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "compression_format", compression_format)
        pulumi.set(__self__, "data_format", data_format)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def asset(self) -> str:
        """
        Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> str:
        """
        Compression format of the data, e.g., zip, gzip etc.
        """
        return pulumi.get(self, "compression_format")

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaResponse':
        """
        Format of the data.
        """
        return pulumi.get(self, "data_format")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class GoogleCloudDatacatalogV1DataplexTableSpecResponse(dict):
    """
    Entry specification for a Dataplex table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataplexSpec":
            suggest = "dataplex_spec"
        elif key == "externalTables":
            suggest = "external_tables"
        elif key == "userManaged":
            suggest = "user_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DataplexTableSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DataplexTableSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DataplexTableSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplex_spec: 'outputs.GoogleCloudDatacatalogV1DataplexSpecResponse',
                 external_tables: Sequence['outputs.GoogleCloudDatacatalogV1DataplexExternalTableResponse'],
                 user_managed: bool):
        """
        Entry specification for a Dataplex table.
        :param 'GoogleCloudDatacatalogV1DataplexSpecResponse' dataplex_spec: Common Dataplex fields.
        :param Sequence['GoogleCloudDatacatalogV1DataplexExternalTableResponse'] external_tables: List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.
        :param bool user_managed: Indicates if the table schema is managed by the user or not.
        """
        pulumi.set(__self__, "dataplex_spec", dataplex_spec)
        pulumi.set(__self__, "external_tables", external_tables)
        pulumi.set(__self__, "user_managed", user_managed)

    @property
    @pulumi.getter(name="dataplexSpec")
    def dataplex_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DataplexSpecResponse':
        """
        Common Dataplex fields.
        """
        return pulumi.get(self, "dataplex_spec")

    @property
    @pulumi.getter(name="externalTables")
    def external_tables(self) -> Sequence['outputs.GoogleCloudDatacatalogV1DataplexExternalTableResponse']:
        """
        List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.
        """
        return pulumi.get(self, "external_tables")

    @property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> bool:
        """
        Indicates if the table schema is managed by the user or not.
        """
        return pulumi.get(self, "user_managed")


@pulumi.output_type
class GoogleCloudDatacatalogV1DatasetSpecResponse(dict):
    """
    Specification that applies to a dataset. Valid only for entries with the `DATASET` type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vertexDatasetSpec":
            suggest = "vertex_dataset_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1DatasetSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1DatasetSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1DatasetSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vertex_dataset_spec: 'outputs.GoogleCloudDatacatalogV1VertexDatasetSpecResponse'):
        """
        Specification that applies to a dataset. Valid only for entries with the `DATASET` type.
        :param 'GoogleCloudDatacatalogV1VertexDatasetSpecResponse' vertex_dataset_spec: Vertex AI Dataset specific fields
        """
        pulumi.set(__self__, "vertex_dataset_spec", vertex_dataset_spec)

    @property
    @pulumi.getter(name="vertexDatasetSpec")
    def vertex_dataset_spec(self) -> 'outputs.GoogleCloudDatacatalogV1VertexDatasetSpecResponse':
        """
        Vertex AI Dataset specific fields
        """
        return pulumi.get(self, "vertex_dataset_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1EntryOverviewResponse(dict):
    """
    Entry overview fields for rich text descriptions of entries.
    """
    def __init__(__self__, *,
                 overview: str):
        """
        Entry overview fields for rich text descriptions of entries.
        :param str overview: Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
        """
        pulumi.set(__self__, "overview", overview)

    @property
    @pulumi.getter
    def overview(self) -> str:
        """
        Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
        """
        return pulumi.get(self, "overview")


@pulumi.output_type
class GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str):
        """
        :param str display_name: The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValues":
            suggest = "allowed_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_values: Sequence['outputs.GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse']):
        """
        :param Sequence['GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse'] allowed_values: The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence['outputs.GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueResponse']:
        """
        The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.
        """
        return pulumi.get(self, "allowed_values")


@pulumi.output_type
class GoogleCloudDatacatalogV1FieldTypeResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumType":
            suggest = "enum_type"
        elif key == "primitiveType":
            suggest = "primitive_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1FieldTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1FieldTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1FieldTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enum_type: 'outputs.GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse',
                 primitive_type: str):
        """
        :param 'GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse' enum_type: An enum type.
        :param str primitive_type: Primitive types, such as string, boolean, etc.
        """
        pulumi.set(__self__, "enum_type", enum_type)
        pulumi.set(__self__, "primitive_type", primitive_type)

    @property
    @pulumi.getter(name="enumType")
    def enum_type(self) -> 'outputs.GoogleCloudDatacatalogV1FieldTypeEnumTypeResponse':
        """
        An enum type.
        """
        return pulumi.get(self, "enum_type")

    @property
    @pulumi.getter(name="primitiveType")
    def primitive_type(self) -> str:
        """
        Primitive types, such as string, boolean, etc.
        """
        return pulumi.get(self, "primitive_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1FilesetSpecResponse(dict):
    """
    Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataplexFileset":
            suggest = "dataplex_fileset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1FilesetSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1FilesetSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1FilesetSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplex_fileset: 'outputs.GoogleCloudDatacatalogV1DataplexFilesetSpecResponse'):
        """
        Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.
        :param 'GoogleCloudDatacatalogV1DataplexFilesetSpecResponse' dataplex_fileset: Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
        """
        pulumi.set(__self__, "dataplex_fileset", dataplex_fileset)

    @property
    @pulumi.getter(name="dataplexFileset")
    def dataplex_fileset(self) -> 'outputs.GoogleCloudDatacatalogV1DataplexFilesetSpecResponse':
        """
        Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
        """
        return pulumi.get(self, "dataplex_fileset")


@pulumi.output_type
class GoogleCloudDatacatalogV1GcsFileSpecResponse(dict):
    """
    Specification of a single file in Cloud Storage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePath":
            suggest = "file_path"
        elif key == "gcsTimestamps":
            suggest = "gcs_timestamps"
        elif key == "sizeBytes":
            suggest = "size_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1GcsFileSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1GcsFileSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1GcsFileSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_path: str,
                 gcs_timestamps: 'outputs.GoogleCloudDatacatalogV1SystemTimestampsResponse',
                 size_bytes: str):
        """
        Specification of a single file in Cloud Storage.
        :param str file_path: Full file path. Example: `gs://bucket_name/a/b.txt`.
        :param 'GoogleCloudDatacatalogV1SystemTimestampsResponse' gcs_timestamps: Creation, modification, and expiration timestamps of a Cloud Storage file.
        :param str size_bytes: File size in bytes.
        """
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "gcs_timestamps", gcs_timestamps)
        pulumi.set(__self__, "size_bytes", size_bytes)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> str:
        """
        Full file path. Example: `gs://bucket_name/a/b.txt`.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="gcsTimestamps")
    def gcs_timestamps(self) -> 'outputs.GoogleCloudDatacatalogV1SystemTimestampsResponse':
        """
        Creation, modification, and expiration timestamps of a Cloud Storage file.
        """
        return pulumi.get(self, "gcs_timestamps")

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> str:
        """
        File size in bytes.
        """
        return pulumi.get(self, "size_bytes")


@pulumi.output_type
class GoogleCloudDatacatalogV1GcsFilesetSpecResponse(dict):
    """
    Describes a Cloud Storage fileset entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePatterns":
            suggest = "file_patterns"
        elif key == "sampleGcsFileSpecs":
            suggest = "sample_gcs_file_specs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1GcsFilesetSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1GcsFilesetSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1GcsFilesetSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_patterns: Sequence[str],
                 sample_gcs_file_specs: Sequence['outputs.GoogleCloudDatacatalogV1GcsFileSpecResponse']):
        """
        Describes a Cloud Storage fileset entry.
        :param Sequence[str] file_patterns: Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
        :param Sequence['GoogleCloudDatacatalogV1GcsFileSpecResponse'] sample_gcs_file_specs: Sample files contained in this fileset, not all files contained in this fileset are represented here.
        """
        pulumi.set(__self__, "file_patterns", file_patterns)
        pulumi.set(__self__, "sample_gcs_file_specs", sample_gcs_file_specs)

    @property
    @pulumi.getter(name="filePatterns")
    def file_patterns(self) -> Sequence[str]:
        """
        Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
        """
        return pulumi.get(self, "file_patterns")

    @property
    @pulumi.getter(name="sampleGcsFileSpecs")
    def sample_gcs_file_specs(self) -> Sequence['outputs.GoogleCloudDatacatalogV1GcsFileSpecResponse']:
        """
        Sample files contained in this fileset, not all files contained in this fileset are represented here.
        """
        return pulumi.get(self, "sample_gcs_file_specs")


@pulumi.output_type
class GoogleCloudDatacatalogV1LookerSystemSpecResponse(dict):
    """
    Specification that applies to entries that are part `LOOKER` system (user_specified_type)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentInstanceDisplayName":
            suggest = "parent_instance_display_name"
        elif key == "parentInstanceId":
            suggest = "parent_instance_id"
        elif key == "parentModelDisplayName":
            suggest = "parent_model_display_name"
        elif key == "parentModelId":
            suggest = "parent_model_id"
        elif key == "parentViewDisplayName":
            suggest = "parent_view_display_name"
        elif key == "parentViewId":
            suggest = "parent_view_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1LookerSystemSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1LookerSystemSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1LookerSystemSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent_instance_display_name: str,
                 parent_instance_id: str,
                 parent_model_display_name: str,
                 parent_model_id: str,
                 parent_view_display_name: str,
                 parent_view_id: str):
        """
        Specification that applies to entries that are part `LOOKER` system (user_specified_type)
        :param str parent_instance_display_name: Name of the parent Looker Instance. Empty if it does not exist.
        :param str parent_instance_id: ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`
        :param str parent_model_display_name: Name of the parent Model. Empty if it does not exist.
        :param str parent_model_id: ID of the parent Model. Empty if it does not exist.
        :param str parent_view_display_name: Name of the parent View. Empty if it does not exist.
        :param str parent_view_id: ID of the parent View. Empty if it does not exist.
        """
        pulumi.set(__self__, "parent_instance_display_name", parent_instance_display_name)
        pulumi.set(__self__, "parent_instance_id", parent_instance_id)
        pulumi.set(__self__, "parent_model_display_name", parent_model_display_name)
        pulumi.set(__self__, "parent_model_id", parent_model_id)
        pulumi.set(__self__, "parent_view_display_name", parent_view_display_name)
        pulumi.set(__self__, "parent_view_id", parent_view_id)

    @property
    @pulumi.getter(name="parentInstanceDisplayName")
    def parent_instance_display_name(self) -> str:
        """
        Name of the parent Looker Instance. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_instance_display_name")

    @property
    @pulumi.getter(name="parentInstanceId")
    def parent_instance_id(self) -> str:
        """
        ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`
        """
        return pulumi.get(self, "parent_instance_id")

    @property
    @pulumi.getter(name="parentModelDisplayName")
    def parent_model_display_name(self) -> str:
        """
        Name of the parent Model. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_model_display_name")

    @property
    @pulumi.getter(name="parentModelId")
    def parent_model_id(self) -> str:
        """
        ID of the parent Model. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_model_id")

    @property
    @pulumi.getter(name="parentViewDisplayName")
    def parent_view_display_name(self) -> str:
        """
        Name of the parent View. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_view_display_name")

    @property
    @pulumi.getter(name="parentViewId")
    def parent_view_id(self) -> str:
        """
        ID of the parent View. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_view_id")


@pulumi.output_type
class GoogleCloudDatacatalogV1ModelSpecResponse(dict):
    """
    Specification that applies to a model. Valid only for entries with the `MODEL` type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vertexModelSpec":
            suggest = "vertex_model_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1ModelSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1ModelSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1ModelSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vertex_model_spec: 'outputs.GoogleCloudDatacatalogV1VertexModelSpecResponse'):
        """
        Specification that applies to a model. Valid only for entries with the `MODEL` type.
        :param 'GoogleCloudDatacatalogV1VertexModelSpecResponse' vertex_model_spec: Specification for vertex model resources.
        """
        pulumi.set(__self__, "vertex_model_spec", vertex_model_spec)

    @property
    @pulumi.getter(name="vertexModelSpec")
    def vertex_model_spec(self) -> 'outputs.GoogleCloudDatacatalogV1VertexModelSpecResponse':
        """
        Specification for vertex model resources.
        """
        return pulumi.get(self, "vertex_model_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1PersonalDetailsResponse(dict):
    """
    Entry metadata relevant only to the user and private to them.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "starTime":
            suggest = "star_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1PersonalDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1PersonalDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1PersonalDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 star_time: str,
                 starred: bool):
        """
        Entry metadata relevant only to the user and private to them.
        :param str star_time: Set if the entry is starred; unset otherwise.
        :param bool starred: True if the entry is starred by the user; false otherwise.
        """
        pulumi.set(__self__, "star_time", star_time)
        pulumi.set(__self__, "starred", starred)

    @property
    @pulumi.getter(name="starTime")
    def star_time(self) -> str:
        """
        Set if the entry is starred; unset otherwise.
        """
        return pulumi.get(self, "star_time")

    @property
    @pulumi.getter
    def starred(self) -> bool:
        """
        True if the entry is starred by the user; false otherwise.
        """
        return pulumi.get(self, "starred")


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse(dict):
    """
    Schema in Avro JSON format.
    """
    def __init__(__self__, *,
                 text: str):
        """
        Schema in Avro JSON format.
        :param str text: JSON source of the Avro schema.
        """
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        JSON source of the Avro schema.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse(dict):
    """
    Marks a CSV-encoded data source.
    """
    def __init__(__self__):
        """
        Marks a CSV-encoded data source.
        """
        pass


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse(dict):
    """
    Marks an ORC-encoded data source.
    """
    def __init__(__self__):
        """
        Marks an ORC-encoded data source.
        """
        pass


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse(dict):
    """
    Marks a Parquet-encoded data source.
    """
    def __init__(__self__):
        """
        Marks a Parquet-encoded data source.
        """
        pass


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse(dict):
    """
    Schema in protocol buffer format.
    """
    def __init__(__self__, *,
                 text: str):
        """
        Schema in protocol buffer format.
        :param str text: Protocol buffer source of the schema.
        """
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Protocol buffer source of the schema.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaResponse(dict):
    """
    Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
    """
    def __init__(__self__, *,
                 avro: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse',
                 csv: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse',
                 orc: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse',
                 parquet: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse',
                 protobuf: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse',
                 thrift: 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse'):
        """
        Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse' avro: Schema in Avro JSON format.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse' csv: Marks a CSV-encoded data source.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse' orc: Marks an ORC-encoded data source.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse' parquet: Marks a Parquet-encoded data source.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse' protobuf: Schema in protocol buffer format.
        :param 'GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse' thrift: Schema in Thrift format.
        """
        pulumi.set(__self__, "avro", avro)
        pulumi.set(__self__, "csv", csv)
        pulumi.set(__self__, "orc", orc)
        pulumi.set(__self__, "parquet", parquet)
        pulumi.set(__self__, "protobuf", protobuf)
        pulumi.set(__self__, "thrift", thrift)

    @property
    @pulumi.getter
    def avro(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse':
        """
        Schema in Avro JSON format.
        """
        return pulumi.get(self, "avro")

    @property
    @pulumi.getter
    def csv(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse':
        """
        Marks a CSV-encoded data source.
        """
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def orc(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse':
        """
        Marks an ORC-encoded data source.
        """
        return pulumi.get(self, "orc")

    @property
    @pulumi.getter
    def parquet(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse':
        """
        Marks a Parquet-encoded data source.
        """
        return pulumi.get(self, "parquet")

    @property
    @pulumi.getter
    def protobuf(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse':
        """
        Schema in protocol buffer format.
        """
        return pulumi.get(self, "protobuf")

    @property
    @pulumi.getter
    def thrift(self) -> 'outputs.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse':
        """
        Schema in Thrift format.
        """
        return pulumi.get(self, "thrift")


@pulumi.output_type
class GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse(dict):
    """
    Schema in Thrift format.
    """
    def __init__(__self__, *,
                 text: str):
        """
        Schema in Thrift format.
        :param str text: Thrift IDL source of the schema.
        """
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Thrift IDL source of the schema.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GoogleCloudDatacatalogV1RoutineSpecArgumentResponse(dict):
    """
    Input or output argument of a function or stored procedure.
    """
    def __init__(__self__, *,
                 mode: str,
                 name: str,
                 type: str):
        """
        Input or output argument of a function or stored procedure.
        :param str mode: Specifies whether the argument is input or output.
        :param str name: The name of the argument. A return argument of a function might not have a name.
        :param str type: Type of the argument. The exact value depends on the source system and the language.
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Specifies whether the argument is input or output.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the argument. A return argument of a function might not have a name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the argument. The exact value depends on the source system and the language.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1RoutineSpecResponse(dict):
    """
    Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bigqueryRoutineSpec":
            suggest = "bigquery_routine_spec"
        elif key == "definitionBody":
            suggest = "definition_body"
        elif key == "returnType":
            suggest = "return_type"
        elif key == "routineArguments":
            suggest = "routine_arguments"
        elif key == "routineType":
            suggest = "routine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1RoutineSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1RoutineSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1RoutineSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bigquery_routine_spec: 'outputs.GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse',
                 definition_body: str,
                 language: str,
                 return_type: str,
                 routine_arguments: Sequence['outputs.GoogleCloudDatacatalogV1RoutineSpecArgumentResponse'],
                 routine_type: str):
        """
        Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
        :param 'GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse' bigquery_routine_spec: Fields specific for BigQuery routines.
        :param str definition_body: The body of the routine.
        :param str language: The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
        :param str return_type: Return type of the argument. The exact value depends on the source system and the language.
        :param Sequence['GoogleCloudDatacatalogV1RoutineSpecArgumentResponse'] routine_arguments: Arguments of the routine.
        :param str routine_type: The type of the routine.
        """
        pulumi.set(__self__, "bigquery_routine_spec", bigquery_routine_spec)
        pulumi.set(__self__, "definition_body", definition_body)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "routine_arguments", routine_arguments)
        pulumi.set(__self__, "routine_type", routine_type)

    @property
    @pulumi.getter(name="bigqueryRoutineSpec")
    def bigquery_routine_spec(self) -> 'outputs.GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse':
        """
        Fields specific for BigQuery routines.
        """
        return pulumi.get(self, "bigquery_routine_spec")

    @property
    @pulumi.getter(name="definitionBody")
    def definition_body(self) -> str:
        """
        The body of the routine.
        """
        return pulumi.get(self, "definition_body")

    @property
    @pulumi.getter
    def language(self) -> str:
        """
        The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> str:
        """
        Return type of the argument. The exact value depends on the source system and the language.
        """
        return pulumi.get(self, "return_type")

    @property
    @pulumi.getter(name="routineArguments")
    def routine_arguments(self) -> Sequence['outputs.GoogleCloudDatacatalogV1RoutineSpecArgumentResponse']:
        """
        Arguments of the routine.
        """
        return pulumi.get(self, "routine_arguments")

    @property
    @pulumi.getter(name="routineType")
    def routine_type(self) -> str:
        """
        The type of the routine.
        """
        return pulumi.get(self, "routine_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1SchemaResponse(dict):
    """
    Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
    """
    def __init__(__self__, *,
                 columns: Sequence['outputs.GoogleCloudDatacatalogV1ColumnSchemaResponse']):
        """
        Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
        :param Sequence['GoogleCloudDatacatalogV1ColumnSchemaResponse'] columns: The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
        """
        pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GoogleCloudDatacatalogV1ColumnSchemaResponse']:
        """
        The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
        """
        return pulumi.get(self, "columns")


@pulumi.output_type
class GoogleCloudDatacatalogV1ServiceSpecResponse(dict):
    """
    Specification that applies to a Service resource. Valid only for entries with the `SERVICE` type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudBigtableInstanceSpec":
            suggest = "cloud_bigtable_instance_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1ServiceSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1ServiceSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1ServiceSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_bigtable_instance_spec: 'outputs.GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse'):
        """
        Specification that applies to a Service resource. Valid only for entries with the `SERVICE` type.
        :param 'GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse' cloud_bigtable_instance_spec: Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.
        """
        pulumi.set(__self__, "cloud_bigtable_instance_spec", cloud_bigtable_instance_spec)

    @property
    @pulumi.getter(name="cloudBigtableInstanceSpec")
    def cloud_bigtable_instance_spec(self) -> 'outputs.GoogleCloudDatacatalogV1CloudBigtableInstanceSpecResponse':
        """
        Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.
        """
        return pulumi.get(self, "cloud_bigtable_instance_spec")


@pulumi.output_type
class GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse(dict):
    """
    Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseVersion":
            suggest = "database_version"
        elif key == "instanceHost":
            suggest = "instance_host"
        elif key == "sqlEngine":
            suggest = "sql_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_version: str,
                 instance_host: str,
                 sql_engine: str):
        """
        Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)
        :param str database_version: Version of the database engine.
        :param str instance_host: Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.
        :param str sql_engine: SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.
        """
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "instance_host", instance_host)
        pulumi.set(__self__, "sql_engine", sql_engine)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        Version of the database engine.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="instanceHost")
    def instance_host(self) -> str:
        """
        Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.
        """
        return pulumi.get(self, "instance_host")

    @property
    @pulumi.getter(name="sqlEngine")
    def sql_engine(self) -> str:
        """
        SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.
        """
        return pulumi.get(self, "sql_engine")


@pulumi.output_type
class GoogleCloudDatacatalogV1StoragePropertiesResponse(dict):
    """
    Details the properties of the underlying storage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePattern":
            suggest = "file_pattern"
        elif key == "fileType":
            suggest = "file_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1StoragePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1StoragePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1StoragePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_pattern: Sequence[str],
                 file_type: str):
        """
        Details the properties of the underlying storage.
        :param Sequence[str] file_pattern: Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`
        :param str file_type: File type in MIME format, for example, `text/plain`.
        """
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "file_type", file_type)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Sequence[str]:
        """
        Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`
        """
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        """
        File type in MIME format, for example, `text/plain`.
        """
        return pulumi.get(self, "file_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1SystemTimestampsResponse(dict):
    """
    Timestamps associated with this resource in a particular system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "expireTime":
            suggest = "expire_time"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1SystemTimestampsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1SystemTimestampsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1SystemTimestampsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: str,
                 expire_time: str,
                 update_time: str):
        """
        Timestamps associated with this resource in a particular system.
        :param str create_time: Creation timestamp of the resource within the given system.
        :param str expire_time: Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
        :param str update_time: Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation timestamp of the resource within the given system.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GoogleCloudDatacatalogV1TableSpecResponse(dict):
    """
    Normal BigQuery table specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupedEntry":
            suggest = "grouped_entry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1TableSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1TableSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1TableSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grouped_entry: str):
        """
        Normal BigQuery table specification.
        :param str grouped_entry: If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
        """
        pulumi.set(__self__, "grouped_entry", grouped_entry)

    @property
    @pulumi.getter(name="groupedEntry")
    def grouped_entry(self) -> str:
        """
        If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
        """
        return pulumi.get(self, "grouped_entry")


@pulumi.output_type
class GoogleCloudDatacatalogV1TagTemplateFieldResponse(dict):
    """
    The template for an individual field within a tag template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1TagTemplateFieldResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1TagTemplateFieldResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1TagTemplateFieldResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 is_required: bool,
                 name: str,
                 order: int,
                 type: 'outputs.GoogleCloudDatacatalogV1FieldTypeResponse'):
        """
        The template for an individual field within a tag template.
        :param str description: The description for this field. Defaults to an empty string.
        :param str display_name: The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        :param bool is_required: If true, this field is required. Defaults to false.
        :param str name: The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.
        :param int order: The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.
        :param 'GoogleCloudDatacatalogV1FieldTypeResponse' type: The type of value this tag field can contain.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description for this field. Defaults to an empty string.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        If true, this field is required. Defaults to false.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> int:
        """
        The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def type(self) -> 'outputs.GoogleCloudDatacatalogV1FieldTypeResponse':
        """
        The type of value this tag field can contain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudDatacatalogV1TaxonomyServiceResponse(dict):
    """
    The source system of the Taxonomy.
    """
    def __init__(__self__, *,
                 identity: str,
                 name: str):
        """
        The source system of the Taxonomy.
        :param str identity: The service agent for the service.
        :param str name: The Google Cloud service name.
        """
        pulumi.set(__self__, "identity", identity)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        The service agent for the service.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Google Cloud service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GoogleCloudDatacatalogV1UsageSignalResponse(dict):
    """
    The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonUsageWithinTimeRange":
            suggest = "common_usage_within_time_range"
        elif key == "favoriteCount":
            suggest = "favorite_count"
        elif key == "updateTime":
            suggest = "update_time"
        elif key == "usageWithinTimeRange":
            suggest = "usage_within_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1UsageSignalResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1UsageSignalResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1UsageSignalResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_usage_within_time_range: Mapping[str, 'outputs.GoogleCloudDatacatalogV1CommonUsageStatsResponse'],
                 favorite_count: str,
                 update_time: str,
                 usage_within_time_range: Mapping[str, 'outputs.GoogleCloudDatacatalogV1UsageStatsResponse']):
        """
        The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
        :param Mapping[str, 'GoogleCloudDatacatalogV1CommonUsageStatsResponse'] common_usage_within_time_range: Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
        :param str favorite_count: Favorite count in the source system.
        :param str update_time: The end timestamp of the duration of usage statistics.
        :param Mapping[str, 'GoogleCloudDatacatalogV1UsageStatsResponse'] usage_within_time_range: BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
        """
        pulumi.set(__self__, "common_usage_within_time_range", common_usage_within_time_range)
        pulumi.set(__self__, "favorite_count", favorite_count)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "usage_within_time_range", usage_within_time_range)

    @property
    @pulumi.getter(name="commonUsageWithinTimeRange")
    def common_usage_within_time_range(self) -> Mapping[str, 'outputs.GoogleCloudDatacatalogV1CommonUsageStatsResponse']:
        """
        Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
        """
        return pulumi.get(self, "common_usage_within_time_range")

    @property
    @pulumi.getter(name="favoriteCount")
    def favorite_count(self) -> str:
        """
        Favorite count in the source system.
        """
        return pulumi.get(self, "favorite_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The end timestamp of the duration of usage statistics.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="usageWithinTimeRange")
    def usage_within_time_range(self) -> Mapping[str, 'outputs.GoogleCloudDatacatalogV1UsageStatsResponse']:
        """
        BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
        """
        return pulumi.get(self, "usage_within_time_range")


@pulumi.output_type
class GoogleCloudDatacatalogV1UsageStatsResponse(dict):
    """
    Detailed statistics on the entry's usage. Usage statistics have the following limitations: - Only BigQuery tables have them. - They only include BigQuery query jobs. - They might be underestimated because wildcard table references are not yet counted. For more information, see [Querying multiple tables using a wildcard table] (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalCancellations":
            suggest = "total_cancellations"
        elif key == "totalCompletions":
            suggest = "total_completions"
        elif key == "totalExecutionTimeForCompletionsMillis":
            suggest = "total_execution_time_for_completions_millis"
        elif key == "totalFailures":
            suggest = "total_failures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1UsageStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1UsageStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1UsageStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_cancellations: float,
                 total_completions: float,
                 total_execution_time_for_completions_millis: float,
                 total_failures: float):
        """
        Detailed statistics on the entry's usage. Usage statistics have the following limitations: - Only BigQuery tables have them. - They only include BigQuery query jobs. - They might be underestimated because wildcard table references are not yet counted. For more information, see [Querying multiple tables using a wildcard table] (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)
        :param float total_cancellations: The number of cancelled attempts to use the underlying entry.
        :param float total_completions: The number of successful uses of the underlying entry.
        :param float total_execution_time_for_completions_millis: Total time spent only on successful uses, in milliseconds.
        :param float total_failures: The number of failed attempts to use the underlying entry.
        """
        pulumi.set(__self__, "total_cancellations", total_cancellations)
        pulumi.set(__self__, "total_completions", total_completions)
        pulumi.set(__self__, "total_execution_time_for_completions_millis", total_execution_time_for_completions_millis)
        pulumi.set(__self__, "total_failures", total_failures)

    @property
    @pulumi.getter(name="totalCancellations")
    def total_cancellations(self) -> float:
        """
        The number of cancelled attempts to use the underlying entry.
        """
        return pulumi.get(self, "total_cancellations")

    @property
    @pulumi.getter(name="totalCompletions")
    def total_completions(self) -> float:
        """
        The number of successful uses of the underlying entry.
        """
        return pulumi.get(self, "total_completions")

    @property
    @pulumi.getter(name="totalExecutionTimeForCompletionsMillis")
    def total_execution_time_for_completions_millis(self) -> float:
        """
        Total time spent only on successful uses, in milliseconds.
        """
        return pulumi.get(self, "total_execution_time_for_completions_millis")

    @property
    @pulumi.getter(name="totalFailures")
    def total_failures(self) -> float:
        """
        The number of failed attempts to use the underlying entry.
        """
        return pulumi.get(self, "total_failures")


@pulumi.output_type
class GoogleCloudDatacatalogV1VertexDatasetSpecResponse(dict):
    """
    Specification for vertex dataset resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataItemCount":
            suggest = "data_item_count"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1VertexDatasetSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1VertexDatasetSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1VertexDatasetSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_item_count: str,
                 data_type: str):
        """
        Specification for vertex dataset resources.
        :param str data_item_count: The number of DataItems in this Dataset. Only apply for non-structured Dataset.
        :param str data_type: Type of the dataset.
        """
        pulumi.set(__self__, "data_item_count", data_item_count)
        pulumi.set(__self__, "data_type", data_type)

    @property
    @pulumi.getter(name="dataItemCount")
    def data_item_count(self) -> str:
        """
        The number of DataItems in this Dataset. Only apply for non-structured Dataset.
        """
        return pulumi.get(self, "data_item_count")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Type of the dataset.
        """
        return pulumi.get(self, "data_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1VertexModelSourceInfoResponse(dict):
    """
    Detail description of the source information of a Vertex model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1VertexModelSourceInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1VertexModelSourceInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1VertexModelSourceInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 copy: bool,
                 source_type: str):
        """
        Detail description of the source information of a Vertex model.
        :param bool copy: If this Model is copy of another Model. If true then source_type pertains to the original.
        :param str source_type: Type of the model source.
        """
        pulumi.set(__self__, "copy", copy)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def copy(self) -> bool:
        """
        If this Model is copy of another Model. If true then source_type pertains to the original.
        """
        return pulumi.get(self, "copy")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Type of the model source.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GoogleCloudDatacatalogV1VertexModelSpecResponse(dict):
    """
    Specification for vertex model resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImageUri":
            suggest = "container_image_uri"
        elif key == "versionAliases":
            suggest = "version_aliases"
        elif key == "versionDescription":
            suggest = "version_description"
        elif key == "versionId":
            suggest = "version_id"
        elif key == "vertexModelSourceInfo":
            suggest = "vertex_model_source_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1VertexModelSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1VertexModelSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1VertexModelSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_image_uri: str,
                 version_aliases: Sequence[str],
                 version_description: str,
                 version_id: str,
                 vertex_model_source_info: 'outputs.GoogleCloudDatacatalogV1VertexModelSourceInfoResponse'):
        """
        Specification for vertex model resources.
        :param str container_image_uri: URI of the Docker image to be used as the custom container for serving predictions.
        :param Sequence[str] version_aliases: User provided version aliases so that a model version can be referenced via alias
        :param str version_description: The description of this version.
        :param str version_id: The version ID of the model.
        :param 'GoogleCloudDatacatalogV1VertexModelSourceInfoResponse' vertex_model_source_info: Source of a Vertex model.
        """
        pulumi.set(__self__, "container_image_uri", container_image_uri)
        pulumi.set(__self__, "version_aliases", version_aliases)
        pulumi.set(__self__, "version_description", version_description)
        pulumi.set(__self__, "version_id", version_id)
        pulumi.set(__self__, "vertex_model_source_info", vertex_model_source_info)

    @property
    @pulumi.getter(name="containerImageUri")
    def container_image_uri(self) -> str:
        """
        URI of the Docker image to be used as the custom container for serving predictions.
        """
        return pulumi.get(self, "container_image_uri")

    @property
    @pulumi.getter(name="versionAliases")
    def version_aliases(self) -> Sequence[str]:
        """
        User provided version aliases so that a model version can be referenced via alias
        """
        return pulumi.get(self, "version_aliases")

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> str:
        """
        The description of this version.
        """
        return pulumi.get(self, "version_description")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        The version ID of the model.
        """
        return pulumi.get(self, "version_id")

    @property
    @pulumi.getter(name="vertexModelSourceInfo")
    def vertex_model_source_info(self) -> 'outputs.GoogleCloudDatacatalogV1VertexModelSourceInfoResponse':
        """
        Source of a Vertex model.
        """
        return pulumi.get(self, "vertex_model_source_info")


@pulumi.output_type
class GoogleCloudDatacatalogV1ViewSpecResponse(dict):
    """
    Table view specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewQuery":
            suggest = "view_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogV1ViewSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogV1ViewSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogV1ViewSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view_query: str):
        """
        Table view specification.
        :param str view_query: The query that defines the table view.
        """
        pulumi.set(__self__, "view_query", view_query)

    @property
    @pulumi.getter(name="viewQuery")
    def view_query(self) -> str:
        """
        The query that defines the table view.
        """
        return pulumi.get(self, "view_query")


