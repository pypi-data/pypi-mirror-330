# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'BindingArgs',
    'ExprArgs',
    'GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs',
    'GoogleCloudDatacatalogV1BusinessContextArgs',
    'GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs',
    'GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs',
    'GoogleCloudDatacatalogV1CloudBigtableSystemSpecArgs',
    'GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs',
    'GoogleCloudDatacatalogV1ColumnSchemaArgs',
    'GoogleCloudDatacatalogV1CommonUsageStatsArgs',
    'GoogleCloudDatacatalogV1ContactsPersonArgs',
    'GoogleCloudDatacatalogV1ContactsArgs',
    'GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs',
    'GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs',
    'GoogleCloudDatacatalogV1DatabaseTableSpecArgs',
    'GoogleCloudDatacatalogV1DataplexFilesetSpecArgs',
    'GoogleCloudDatacatalogV1DataplexSpecArgs',
    'GoogleCloudDatacatalogV1DatasetSpecArgs',
    'GoogleCloudDatacatalogV1EntryOverviewArgs',
    'GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs',
    'GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs',
    'GoogleCloudDatacatalogV1FieldTypeArgs',
    'GoogleCloudDatacatalogV1FilesetSpecArgs',
    'GoogleCloudDatacatalogV1GcsFilesetSpecArgs',
    'GoogleCloudDatacatalogV1LookerSystemSpecArgs',
    'GoogleCloudDatacatalogV1ModelSpecArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs',
    'GoogleCloudDatacatalogV1PhysicalSchemaArgs',
    'GoogleCloudDatacatalogV1RoutineSpecArgumentArgs',
    'GoogleCloudDatacatalogV1RoutineSpecArgs',
    'GoogleCloudDatacatalogV1SchemaArgs',
    'GoogleCloudDatacatalogV1ServiceSpecArgs',
    'GoogleCloudDatacatalogV1SqlDatabaseSystemSpecArgs',
    'GoogleCloudDatacatalogV1SystemTimestampsArgs',
    'GoogleCloudDatacatalogV1TagTemplateFieldArgs',
    'GoogleCloudDatacatalogV1UsageSignalArgs',
    'GoogleCloudDatacatalogV1VertexDatasetSpecArgs',
    'GoogleCloudDatacatalogV1VertexModelSourceInfoArgs',
    'GoogleCloudDatacatalogV1VertexModelSpecArgs',
]

@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs:
    def __init__(__self__, *,
                 imported_libraries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Fields specific for BigQuery routines.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] imported_libraries: Paths of the imported libraries.
        """
        if imported_libraries is not None:
            pulumi.set(__self__, "imported_libraries", imported_libraries)

    @property
    @pulumi.getter(name="importedLibraries")
    def imported_libraries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Paths of the imported libraries.
        """
        return pulumi.get(self, "imported_libraries")

    @imported_libraries.setter
    def imported_libraries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "imported_libraries", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1BusinessContextArgs:
    def __init__(__self__, *,
                 contacts: Optional[pulumi.Input['GoogleCloudDatacatalogV1ContactsArgs']] = None,
                 entry_overview: Optional[pulumi.Input['GoogleCloudDatacatalogV1EntryOverviewArgs']] = None):
        """
        Business Context of the entry.
        :param pulumi.Input['GoogleCloudDatacatalogV1ContactsArgs'] contacts: Contact people for the entry.
        :param pulumi.Input['GoogleCloudDatacatalogV1EntryOverviewArgs'] entry_overview: Entry overview fields for rich text descriptions of entries.
        """
        if contacts is not None:
            pulumi.set(__self__, "contacts", contacts)
        if entry_overview is not None:
            pulumi.set(__self__, "entry_overview", entry_overview)

    @property
    @pulumi.getter
    def contacts(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1ContactsArgs']]:
        """
        Contact people for the entry.
        """
        return pulumi.get(self, "contacts")

    @contacts.setter
    def contacts(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1ContactsArgs']]):
        pulumi.set(self, "contacts", value)

    @property
    @pulumi.getter(name="entryOverview")
    def entry_overview(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1EntryOverviewArgs']]:
        """
        Entry overview fields for rich text descriptions of entries.
        """
        return pulumi.get(self, "entry_overview")

    @entry_overview.setter
    def entry_overview(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1EntryOverviewArgs']]):
        pulumi.set(self, "entry_overview", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 linked_resource: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Spec that applies to clusters of an Instance of Cloud Bigtable.
        :param pulumi.Input[str] display_name: Name of the cluster.
        :param pulumi.Input[str] linked_resource: A link back to the parent resource, in this case Instance.
        :param pulumi.Input[str] location: Location of the cluster, typically a Cloud zone.
        :param pulumi.Input[str] type: Type of the resource. For a cluster this would be "CLUSTER".
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if linked_resource is not None:
            pulumi.set(__self__, "linked_resource", linked_resource)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="linkedResource")
    def linked_resource(self) -> Optional[pulumi.Input[str]]:
        """
        A link back to the parent resource, in this case Instance.
        """
        return pulumi.get(self, "linked_resource")

    @linked_resource.setter
    def linked_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_resource", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the cluster, typically a Cloud zone.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource. For a cluster this would be "CLUSTER".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs:
    def __init__(__self__, *,
                 cloud_bigtable_cluster_specs: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs']]]] = None):
        """
        Specification that applies to Instance entries that are part of `CLOUD_BIGTABLE` system. (user_specified_type)
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs']]] cloud_bigtable_cluster_specs: The list of clusters for the Instance.
        """
        if cloud_bigtable_cluster_specs is not None:
            pulumi.set(__self__, "cloud_bigtable_cluster_specs", cloud_bigtable_cluster_specs)

    @property
    @pulumi.getter(name="cloudBigtableClusterSpecs")
    def cloud_bigtable_cluster_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs']]]]:
        """
        The list of clusters for the Instance.
        """
        return pulumi.get(self, "cloud_bigtable_cluster_specs")

    @cloud_bigtable_cluster_specs.setter
    def cloud_bigtable_cluster_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpecArgs']]]]):
        pulumi.set(self, "cloud_bigtable_cluster_specs", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1CloudBigtableSystemSpecArgs:
    def __init__(__self__, *,
                 instance_display_name: Optional[pulumi.Input[str]] = None):
        """
        Specification that applies to all entries that are part of `CLOUD_BIGTABLE` system (user_specified_type)
        :param pulumi.Input[str] instance_display_name: Display name of the Instance. This is user specified and different from the resource name.
        """
        if instance_display_name is not None:
            pulumi.set(__self__, "instance_display_name", instance_display_name)

    @property
    @pulumi.getter(name="instanceDisplayName")
    def instance_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the Instance. This is user specified and different from the resource name.
        """
        return pulumi.get(self, "instance_display_name")

    @instance_display_name.setter
    def instance_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_display_name", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecType']] = None):
        """
        Column info specific to Looker System.
        :param pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecType'] type: Looker specific column type of this column.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecType']]:
        """
        Looker specific column type of this column.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ColumnSchemaArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gc_rule: Optional[pulumi.Input[str]] = None,
                 highest_indexing_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaHighestIndexingType']] = None,
                 looker_column_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 ordinal_position: Optional[pulumi.Input[int]] = None,
                 subcolumns: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]] = None):
        """
        A column within a schema. Columns can be nested inside other columns.
        :param pulumi.Input[str] column: Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
        :param pulumi.Input[str] type: Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
        :param pulumi.Input[str] default_value: Optional. Default value for the column.
        :param pulumi.Input[str] description: Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
        :param pulumi.Input[str] gc_rule: Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
        :param pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaHighestIndexingType'] highest_indexing_type: Optional. Most important inclusion of this column.
        :param pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs'] looker_column_spec: Looker specific column info of this column.
        :param pulumi.Input[str] mode: Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
        :param pulumi.Input[int] ordinal_position: Optional. Ordinal position
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]] subcolumns: Optional. Schema of sub-columns. A column can have zero or more sub-columns.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gc_rule is not None:
            pulumi.set(__self__, "gc_rule", gc_rule)
        if highest_indexing_type is not None:
            pulumi.set(__self__, "highest_indexing_type", highest_indexing_type)
        if looker_column_spec is not None:
            pulumi.set(__self__, "looker_column_spec", looker_column_spec)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if ordinal_position is not None:
            pulumi.set(__self__, "ordinal_position", ordinal_position)
        if subcolumns is not None:
            pulumi.set(__self__, "subcolumns", subcolumns)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Default value for the column.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gcRule")
    def gc_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
        """
        return pulumi.get(self, "gc_rule")

    @gc_rule.setter
    def gc_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gc_rule", value)

    @property
    @pulumi.getter(name="highestIndexingType")
    def highest_indexing_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaHighestIndexingType']]:
        """
        Optional. Most important inclusion of this column.
        """
        return pulumi.get(self, "highest_indexing_type")

    @highest_indexing_type.setter
    def highest_indexing_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaHighestIndexingType']]):
        pulumi.set(self, "highest_indexing_type", value)

    @property
    @pulumi.getter(name="lookerColumnSpec")
    def looker_column_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs']]:
        """
        Looker specific column info of this column.
        """
        return pulumi.get(self, "looker_column_spec")

    @looker_column_spec.setter
    def looker_column_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpecArgs']]):
        pulumi.set(self, "looker_column_spec", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="ordinalPosition")
    def ordinal_position(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Ordinal position
        """
        return pulumi.get(self, "ordinal_position")

    @ordinal_position.setter
    def ordinal_position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ordinal_position", value)

    @property
    @pulumi.getter
    def subcolumns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]]:
        """
        Optional. Schema of sub-columns. A column can have zero or more sub-columns.
        """
        return pulumi.get(self, "subcolumns")

    @subcolumns.setter
    def subcolumns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]]):
        pulumi.set(self, "subcolumns", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1CommonUsageStatsArgs:
    def __init__(__self__, *,
                 view_count: Optional[pulumi.Input[str]] = None):
        """
        Common statistics on the entry's usage. They can be set on any system.
        :param pulumi.Input[str] view_count: View count in source system.
        """
        if view_count is not None:
            pulumi.set(__self__, "view_count", view_count)

    @property
    @pulumi.getter(name="viewCount")
    def view_count(self) -> Optional[pulumi.Input[str]]:
        """
        View count in source system.
        """
        return pulumi.get(self, "view_count")

    @view_count.setter
    def view_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_count", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ContactsPersonArgs:
    def __init__(__self__, *,
                 designation: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None):
        """
        A contact person for the entry.
        :param pulumi.Input[str] designation: Designation of the person, for example, Data Steward.
        :param pulumi.Input[str] email: Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
        """
        if designation is not None:
            pulumi.set(__self__, "designation", designation)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def designation(self) -> Optional[pulumi.Input[str]]:
        """
        Designation of the person, for example, Data Steward.
        """
        return pulumi.get(self, "designation")

    @designation.setter
    def designation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "designation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ContactsArgs:
    def __init__(__self__, *,
                 people: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ContactsPersonArgs']]]] = None):
        """
        Contact people for the entry.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ContactsPersonArgs']]] people: The list of contact people for the entry.
        """
        if people is not None:
            pulumi.set(__self__, "people", people)

    @property
    @pulumi.getter
    def people(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ContactsPersonArgs']]]]:
        """
        The list of contact people for the entry.
        """
        return pulumi.get(self, "people")

    @people.setter
    def people(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ContactsPersonArgs']]]]):
        pulumi.set(self, "people", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs:
    def __init__(__self__):
        """
        Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.
        """
        pass


@pulumi.input_type
class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs:
    def __init__(__self__, *,
                 base_table: Optional[pulumi.Input[str]] = None,
                 sql_query: Optional[pulumi.Input[str]] = None,
                 view_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecViewType']] = None):
        """
        Specification that applies to database view.
        :param pulumi.Input[str] base_table: Name of a singular table this view reflects one to one.
        :param pulumi.Input[str] sql_query: SQL query used to generate this view.
        :param pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecViewType'] view_type: Type of this view.
        """
        if base_table is not None:
            pulumi.set(__self__, "base_table", base_table)
        if sql_query is not None:
            pulumi.set(__self__, "sql_query", sql_query)
        if view_type is not None:
            pulumi.set(__self__, "view_type", view_type)

    @property
    @pulumi.getter(name="baseTable")
    def base_table(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a singular table this view reflects one to one.
        """
        return pulumi.get(self, "base_table")

    @base_table.setter
    def base_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_table", value)

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> Optional[pulumi.Input[str]]:
        """
        SQL query used to generate this view.
        """
        return pulumi.get(self, "sql_query")

    @sql_query.setter
    def sql_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_query", value)

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecViewType']]:
        """
        Type of this view.
        """
        return pulumi.get(self, "view_type")

    @view_type.setter
    def view_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecViewType']]):
        pulumi.set(self, "view_type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1DatabaseTableSpecArgs:
    def __init__(__self__, *,
                 database_view_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs']] = None,
                 type: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecType']] = None):
        """
        Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
        :param pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs'] database_view_spec: Spec what aplies to tables that are actually views. Not set for "real" tables.
        :param pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecType'] type: Type of this table.
        """
        if database_view_spec is not None:
            pulumi.set(__self__, "database_view_spec", database_view_spec)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="databaseViewSpec")
    def database_view_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs']]:
        """
        Spec what aplies to tables that are actually views. Not set for "real" tables.
        """
        return pulumi.get(self, "database_view_spec")

    @database_view_spec.setter
    def database_view_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpecArgs']]):
        pulumi.set(self, "database_view_spec", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecType']]:
        """
        Type of this table.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1DatabaseTableSpecType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1DataplexFilesetSpecArgs:
    def __init__(__self__, *,
                 dataplex_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexSpecArgs']] = None):
        """
        Entry specyfication for a Dataplex fileset.
        :param pulumi.Input['GoogleCloudDatacatalogV1DataplexSpecArgs'] dataplex_spec: Common Dataplex fields.
        """
        if dataplex_spec is not None:
            pulumi.set(__self__, "dataplex_spec", dataplex_spec)

    @property
    @pulumi.getter(name="dataplexSpec")
    def dataplex_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexSpecArgs']]:
        """
        Common Dataplex fields.
        """
        return pulumi.get(self, "dataplex_spec")

    @dataplex_spec.setter
    def dataplex_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexSpecArgs']]):
        pulumi.set(self, "dataplex_spec", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1DataplexSpecArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 compression_format: Optional[pulumi.Input[str]] = None,
                 data_format: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        Common Dataplex fields.
        :param pulumi.Input[str] asset: Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
        :param pulumi.Input[str] compression_format: Compression format of the data, e.g., zip, gzip etc.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaArgs'] data_format: Format of the data.
        :param pulumi.Input[str] project: Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if compression_format is not None:
            pulumi.set(__self__, "compression_format", compression_format)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[pulumi.Input[str]]:
        """
        Compression format of the data, e.g., zip, gzip etc.
        """
        return pulumi.get(self, "compression_format")

    @compression_format.setter
    def compression_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_format", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaArgs']]:
        """
        Format of the data.
        """
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaArgs']]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1DatasetSpecArgs:
    def __init__(__self__, *,
                 vertex_dataset_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecArgs']] = None):
        """
        Specification that applies to a dataset. Valid only for entries with the `DATASET` type.
        :param pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecArgs'] vertex_dataset_spec: Vertex AI Dataset specific fields
        """
        if vertex_dataset_spec is not None:
            pulumi.set(__self__, "vertex_dataset_spec", vertex_dataset_spec)

    @property
    @pulumi.getter(name="vertexDatasetSpec")
    def vertex_dataset_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecArgs']]:
        """
        Vertex AI Dataset specific fields
        """
        return pulumi.get(self, "vertex_dataset_spec")

    @vertex_dataset_spec.setter
    def vertex_dataset_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecArgs']]):
        pulumi.set(self, "vertex_dataset_spec", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1EntryOverviewArgs:
    def __init__(__self__, *,
                 overview: Optional[pulumi.Input[str]] = None):
        """
        Entry overview fields for rich text descriptions of entries.
        :param pulumi.Input[str] overview: Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
        """
        if overview is not None:
            pulumi.set(__self__, "overview", overview)

    @property
    @pulumi.getter
    def overview(self) -> Optional[pulumi.Input[str]]:
        """
        Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
        """
        return pulumi.get(self, "overview")

    @overview.setter
    def overview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overview", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] display_name: The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs:
    def __init__(__self__, *,
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs']]] allowed_values: The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.
        """
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs']]]]:
        """
        The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.
        """
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValueArgs']]]]):
        pulumi.set(self, "allowed_values", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1FieldTypeArgs:
    def __init__(__self__, *,
                 enum_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs']] = None,
                 primitive_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypePrimitiveType']] = None):
        """
        :param pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs'] enum_type: An enum type.
        :param pulumi.Input['GoogleCloudDatacatalogV1FieldTypePrimitiveType'] primitive_type: Primitive types, such as string, boolean, etc.
        """
        if enum_type is not None:
            pulumi.set(__self__, "enum_type", enum_type)
        if primitive_type is not None:
            pulumi.set(__self__, "primitive_type", primitive_type)

    @property
    @pulumi.getter(name="enumType")
    def enum_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs']]:
        """
        An enum type.
        """
        return pulumi.get(self, "enum_type")

    @enum_type.setter
    def enum_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypeEnumTypeArgs']]):
        pulumi.set(self, "enum_type", value)

    @property
    @pulumi.getter(name="primitiveType")
    def primitive_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypePrimitiveType']]:
        """
        Primitive types, such as string, boolean, etc.
        """
        return pulumi.get(self, "primitive_type")

    @primitive_type.setter
    def primitive_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1FieldTypePrimitiveType']]):
        pulumi.set(self, "primitive_type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1FilesetSpecArgs:
    def __init__(__self__, *,
                 dataplex_fileset: Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexFilesetSpecArgs']] = None):
        """
        Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.
        :param pulumi.Input['GoogleCloudDatacatalogV1DataplexFilesetSpecArgs'] dataplex_fileset: Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
        """
        if dataplex_fileset is not None:
            pulumi.set(__self__, "dataplex_fileset", dataplex_fileset)

    @property
    @pulumi.getter(name="dataplexFileset")
    def dataplex_fileset(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexFilesetSpecArgs']]:
        """
        Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
        """
        return pulumi.get(self, "dataplex_fileset")

    @dataplex_fileset.setter
    def dataplex_fileset(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1DataplexFilesetSpecArgs']]):
        pulumi.set(self, "dataplex_fileset", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1GcsFilesetSpecArgs:
    def __init__(__self__, *,
                 file_patterns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Describes a Cloud Storage fileset entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_patterns: Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
        """
        pulumi.set(__self__, "file_patterns", file_patterns)

    @property
    @pulumi.getter(name="filePatterns")
    def file_patterns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
        """
        return pulumi.get(self, "file_patterns")

    @file_patterns.setter
    def file_patterns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_patterns", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1LookerSystemSpecArgs:
    def __init__(__self__, *,
                 parent_instance_display_name: Optional[pulumi.Input[str]] = None,
                 parent_instance_id: Optional[pulumi.Input[str]] = None,
                 parent_model_display_name: Optional[pulumi.Input[str]] = None,
                 parent_model_id: Optional[pulumi.Input[str]] = None,
                 parent_view_display_name: Optional[pulumi.Input[str]] = None,
                 parent_view_id: Optional[pulumi.Input[str]] = None):
        """
        Specification that applies to entries that are part `LOOKER` system (user_specified_type)
        :param pulumi.Input[str] parent_instance_display_name: Name of the parent Looker Instance. Empty if it does not exist.
        :param pulumi.Input[str] parent_instance_id: ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`
        :param pulumi.Input[str] parent_model_display_name: Name of the parent Model. Empty if it does not exist.
        :param pulumi.Input[str] parent_model_id: ID of the parent Model. Empty if it does not exist.
        :param pulumi.Input[str] parent_view_display_name: Name of the parent View. Empty if it does not exist.
        :param pulumi.Input[str] parent_view_id: ID of the parent View. Empty if it does not exist.
        """
        if parent_instance_display_name is not None:
            pulumi.set(__self__, "parent_instance_display_name", parent_instance_display_name)
        if parent_instance_id is not None:
            pulumi.set(__self__, "parent_instance_id", parent_instance_id)
        if parent_model_display_name is not None:
            pulumi.set(__self__, "parent_model_display_name", parent_model_display_name)
        if parent_model_id is not None:
            pulumi.set(__self__, "parent_model_id", parent_model_id)
        if parent_view_display_name is not None:
            pulumi.set(__self__, "parent_view_display_name", parent_view_display_name)
        if parent_view_id is not None:
            pulumi.set(__self__, "parent_view_id", parent_view_id)

    @property
    @pulumi.getter(name="parentInstanceDisplayName")
    def parent_instance_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parent Looker Instance. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_instance_display_name")

    @parent_instance_display_name.setter
    def parent_instance_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_instance_display_name", value)

    @property
    @pulumi.getter(name="parentInstanceId")
    def parent_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`
        """
        return pulumi.get(self, "parent_instance_id")

    @parent_instance_id.setter
    def parent_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_instance_id", value)

    @property
    @pulumi.getter(name="parentModelDisplayName")
    def parent_model_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parent Model. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_model_display_name")

    @parent_model_display_name.setter
    def parent_model_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_model_display_name", value)

    @property
    @pulumi.getter(name="parentModelId")
    def parent_model_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the parent Model. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_model_id")

    @parent_model_id.setter
    def parent_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_model_id", value)

    @property
    @pulumi.getter(name="parentViewDisplayName")
    def parent_view_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parent View. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_view_display_name")

    @parent_view_display_name.setter
    def parent_view_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_view_display_name", value)

    @property
    @pulumi.getter(name="parentViewId")
    def parent_view_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the parent View. Empty if it does not exist.
        """
        return pulumi.get(self, "parent_view_id")

    @parent_view_id.setter
    def parent_view_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_view_id", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ModelSpecArgs:
    def __init__(__self__, *,
                 vertex_model_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSpecArgs']] = None):
        """
        Specification that applies to a model. Valid only for entries with the `MODEL` type.
        :param pulumi.Input['GoogleCloudDatacatalogV1VertexModelSpecArgs'] vertex_model_spec: Specification for vertex model resources.
        """
        if vertex_model_spec is not None:
            pulumi.set(__self__, "vertex_model_spec", vertex_model_spec)

    @property
    @pulumi.getter(name="vertexModelSpec")
    def vertex_model_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSpecArgs']]:
        """
        Specification for vertex model resources.
        """
        return pulumi.get(self, "vertex_model_spec")

    @vertex_model_spec.setter
    def vertex_model_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSpecArgs']]):
        pulumi.set(self, "vertex_model_spec", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        Schema in Avro JSON format.
        :param pulumi.Input[str] text: JSON source of the Avro schema.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        JSON source of the Avro schema.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs:
    def __init__(__self__):
        """
        Marks a CSV-encoded data source.
        """
        pass


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs:
    def __init__(__self__):
        """
        Marks an ORC-encoded data source.
        """
        pass


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs:
    def __init__(__self__):
        """
        Marks a Parquet-encoded data source.
        """
        pass


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        Schema in protocol buffer format.
        :param pulumi.Input[str] text: Protocol buffer source of the schema.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol buffer source of the schema.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        Schema in Thrift format.
        :param pulumi.Input[str] text: Thrift IDL source of the schema.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Thrift IDL source of the schema.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1PhysicalSchemaArgs:
    def __init__(__self__, *,
                 avro: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs']] = None,
                 csv: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs']] = None,
                 orc: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs']] = None,
                 parquet: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs']] = None,
                 protobuf: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs']] = None,
                 thrift: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs']] = None):
        """
        Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs'] avro: Schema in Avro JSON format.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs'] csv: Marks a CSV-encoded data source.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs'] orc: Marks an ORC-encoded data source.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs'] parquet: Marks a Parquet-encoded data source.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs'] protobuf: Schema in protocol buffer format.
        :param pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs'] thrift: Schema in Thrift format.
        """
        if avro is not None:
            pulumi.set(__self__, "avro", avro)
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if orc is not None:
            pulumi.set(__self__, "orc", orc)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)
        if protobuf is not None:
            pulumi.set(__self__, "protobuf", protobuf)
        if thrift is not None:
            pulumi.set(__self__, "thrift", thrift)

    @property
    @pulumi.getter
    def avro(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs']]:
        """
        Schema in Avro JSON format.
        """
        return pulumi.get(self, "avro")

    @avro.setter
    def avro(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaArgs']]):
        pulumi.set(self, "avro", value)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs']]:
        """
        Marks a CSV-encoded data source.
        """
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def orc(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs']]:
        """
        Marks an ORC-encoded data source.
        """
        return pulumi.get(self, "orc")

    @orc.setter
    def orc(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaArgs']]):
        pulumi.set(self, "orc", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs']]:
        """
        Marks a Parquet-encoded data source.
        """
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaArgs']]):
        pulumi.set(self, "parquet", value)

    @property
    @pulumi.getter
    def protobuf(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs']]:
        """
        Schema in protocol buffer format.
        """
        return pulumi.get(self, "protobuf")

    @protobuf.setter
    def protobuf(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaArgs']]):
        pulumi.set(self, "protobuf", value)

    @property
    @pulumi.getter
    def thrift(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs']]:
        """
        Schema in Thrift format.
        """
        return pulumi.get(self, "thrift")

    @thrift.setter
    def thrift(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaArgs']]):
        pulumi.set(self, "thrift", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1RoutineSpecArgumentArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentMode']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input or output argument of a function or stored procedure.
        :param pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentMode'] mode: Specifies whether the argument is input or output.
        :param pulumi.Input[str] name: The name of the argument. A return argument of a function might not have a name.
        :param pulumi.Input[str] type: Type of the argument. The exact value depends on the source system and the language.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentMode']]:
        """
        Specifies whether the argument is input or output.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentMode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the argument. A return argument of a function might not have a name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the argument. The exact value depends on the source system and the language.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1RoutineSpecArgs:
    def __init__(__self__, *,
                 bigquery_routine_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs']] = None,
                 definition_body: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 return_type: Optional[pulumi.Input[str]] = None,
                 routine_arguments: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentArgs']]]] = None,
                 routine_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecRoutineType']] = None):
        """
        Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
        :param pulumi.Input['GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs'] bigquery_routine_spec: Fields specific for BigQuery routines.
        :param pulumi.Input[str] definition_body: The body of the routine.
        :param pulumi.Input[str] language: The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
        :param pulumi.Input[str] return_type: Return type of the argument. The exact value depends on the source system and the language.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentArgs']]] routine_arguments: Arguments of the routine.
        :param pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecRoutineType'] routine_type: The type of the routine.
        """
        if bigquery_routine_spec is not None:
            pulumi.set(__self__, "bigquery_routine_spec", bigquery_routine_spec)
        if definition_body is not None:
            pulumi.set(__self__, "definition_body", definition_body)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if return_type is not None:
            pulumi.set(__self__, "return_type", return_type)
        if routine_arguments is not None:
            pulumi.set(__self__, "routine_arguments", routine_arguments)
        if routine_type is not None:
            pulumi.set(__self__, "routine_type", routine_type)

    @property
    @pulumi.getter(name="bigqueryRoutineSpec")
    def bigquery_routine_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs']]:
        """
        Fields specific for BigQuery routines.
        """
        return pulumi.get(self, "bigquery_routine_spec")

    @bigquery_routine_spec.setter
    def bigquery_routine_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs']]):
        pulumi.set(self, "bigquery_routine_spec", value)

    @property
    @pulumi.getter(name="definitionBody")
    def definition_body(self) -> Optional[pulumi.Input[str]]:
        """
        The body of the routine.
        """
        return pulumi.get(self, "definition_body")

    @definition_body.setter
    def definition_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "definition_body", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> Optional[pulumi.Input[str]]:
        """
        Return type of the argument. The exact value depends on the source system and the language.
        """
        return pulumi.get(self, "return_type")

    @return_type.setter
    def return_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_type", value)

    @property
    @pulumi.getter(name="routineArguments")
    def routine_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentArgs']]]]:
        """
        Arguments of the routine.
        """
        return pulumi.get(self, "routine_arguments")

    @routine_arguments.setter
    def routine_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecArgumentArgs']]]]):
        pulumi.set(self, "routine_arguments", value)

    @property
    @pulumi.getter(name="routineType")
    def routine_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecRoutineType']]:
        """
        The type of the routine.
        """
        return pulumi.get(self, "routine_type")

    @routine_type.setter
    def routine_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1RoutineSpecRoutineType']]):
        pulumi.set(self, "routine_type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1SchemaArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]] = None):
        """
        Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]] columns: The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]]:
        """
        The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDatacatalogV1ColumnSchemaArgs']]]]):
        pulumi.set(self, "columns", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1ServiceSpecArgs:
    def __init__(__self__, *,
                 cloud_bigtable_instance_spec: Optional[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs']] = None):
        """
        Specification that applies to a Service resource. Valid only for entries with the `SERVICE` type.
        :param pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs'] cloud_bigtable_instance_spec: Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.
        """
        if cloud_bigtable_instance_spec is not None:
            pulumi.set(__self__, "cloud_bigtable_instance_spec", cloud_bigtable_instance_spec)

    @property
    @pulumi.getter(name="cloudBigtableInstanceSpec")
    def cloud_bigtable_instance_spec(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs']]:
        """
        Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.
        """
        return pulumi.get(self, "cloud_bigtable_instance_spec")

    @cloud_bigtable_instance_spec.setter
    def cloud_bigtable_instance_spec(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1CloudBigtableInstanceSpecArgs']]):
        pulumi.set(self, "cloud_bigtable_instance_spec", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1SqlDatabaseSystemSpecArgs:
    def __init__(__self__, *,
                 database_version: Optional[pulumi.Input[str]] = None,
                 instance_host: Optional[pulumi.Input[str]] = None,
                 sql_engine: Optional[pulumi.Input[str]] = None):
        """
        Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)
        :param pulumi.Input[str] database_version: Version of the database engine.
        :param pulumi.Input[str] instance_host: Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.
        :param pulumi.Input[str] sql_engine: SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.
        """
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if instance_host is not None:
            pulumi.set(__self__, "instance_host", instance_host)
        if sql_engine is not None:
            pulumi.set(__self__, "sql_engine", sql_engine)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the database engine.
        """
        return pulumi.get(self, "database_version")

    @database_version.setter
    def database_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_version", value)

    @property
    @pulumi.getter(name="instanceHost")
    def instance_host(self) -> Optional[pulumi.Input[str]]:
        """
        Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.
        """
        return pulumi.get(self, "instance_host")

    @instance_host.setter
    def instance_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_host", value)

    @property
    @pulumi.getter(name="sqlEngine")
    def sql_engine(self) -> Optional[pulumi.Input[str]]:
        """
        SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.
        """
        return pulumi.get(self, "sql_engine")

    @sql_engine.setter
    def sql_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_engine", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1SystemTimestampsArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Timestamps associated with this resource in a particular system.
        :param pulumi.Input[str] create_time: Creation timestamp of the resource within the given system.
        :param pulumi.Input[str] update_time: Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation timestamp of the resource within the given system.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1TagTemplateFieldArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['GoogleCloudDatacatalogV1FieldTypeArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None):
        """
        The template for an individual field within a tag template.
        :param pulumi.Input['GoogleCloudDatacatalogV1FieldTypeArgs'] type: The type of value this tag field can contain.
        :param pulumi.Input[str] description: The description for this field. Defaults to an empty string.
        :param pulumi.Input[str] display_name: The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        :param pulumi.Input[bool] is_required: If true, this field is required. Defaults to false.
        :param pulumi.Input[int] order: The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['GoogleCloudDatacatalogV1FieldTypeArgs']:
        """
        The type of value this tag field can contain.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['GoogleCloudDatacatalogV1FieldTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for this field. Defaults to an empty string.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, this field is required. Defaults to false.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1UsageSignalArgs:
    def __init__(__self__, *,
                 common_usage_within_time_range: Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudDatacatalogV1CommonUsageStatsArgs']]]] = None,
                 favorite_count: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
        :param pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudDatacatalogV1CommonUsageStatsArgs']]] common_usage_within_time_range: Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
        :param pulumi.Input[str] favorite_count: Favorite count in the source system.
        :param pulumi.Input[str] update_time: The end timestamp of the duration of usage statistics.
        """
        if common_usage_within_time_range is not None:
            pulumi.set(__self__, "common_usage_within_time_range", common_usage_within_time_range)
        if favorite_count is not None:
            pulumi.set(__self__, "favorite_count", favorite_count)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="commonUsageWithinTimeRange")
    def common_usage_within_time_range(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudDatacatalogV1CommonUsageStatsArgs']]]]:
        """
        Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
        """
        return pulumi.get(self, "common_usage_within_time_range")

    @common_usage_within_time_range.setter
    def common_usage_within_time_range(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudDatacatalogV1CommonUsageStatsArgs']]]]):
        pulumi.set(self, "common_usage_within_time_range", value)

    @property
    @pulumi.getter(name="favoriteCount")
    def favorite_count(self) -> Optional[pulumi.Input[str]]:
        """
        Favorite count in the source system.
        """
        return pulumi.get(self, "favorite_count")

    @favorite_count.setter
    def favorite_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favorite_count", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The end timestamp of the duration of usage statistics.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1VertexDatasetSpecArgs:
    def __init__(__self__, *,
                 data_item_count: Optional[pulumi.Input[str]] = None,
                 data_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecDataType']] = None):
        """
        Specification for vertex dataset resources.
        :param pulumi.Input[str] data_item_count: The number of DataItems in this Dataset. Only apply for non-structured Dataset.
        :param pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecDataType'] data_type: Type of the dataset.
        """
        if data_item_count is not None:
            pulumi.set(__self__, "data_item_count", data_item_count)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)

    @property
    @pulumi.getter(name="dataItemCount")
    def data_item_count(self) -> Optional[pulumi.Input[str]]:
        """
        The number of DataItems in this Dataset. Only apply for non-structured Dataset.
        """
        return pulumi.get(self, "data_item_count")

    @data_item_count.setter
    def data_item_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_item_count", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecDataType']]:
        """
        Type of the dataset.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexDatasetSpecDataType']]):
        pulumi.set(self, "data_type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1VertexModelSourceInfoArgs:
    def __init__(__self__, *,
                 copy: Optional[pulumi.Input[bool]] = None,
                 source_type: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoSourceType']] = None):
        """
        Detail description of the source information of a Vertex model.
        :param pulumi.Input[bool] copy: If this Model is copy of another Model. If true then source_type pertains to the original.
        :param pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoSourceType'] source_type: Type of the model source.
        """
        if copy is not None:
            pulumi.set(__self__, "copy", copy)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def copy(self) -> Optional[pulumi.Input[bool]]:
        """
        If this Model is copy of another Model. If true then source_type pertains to the original.
        """
        return pulumi.get(self, "copy")

    @copy.setter
    def copy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoSourceType']]:
        """
        Type of the model source.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoSourceType']]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class GoogleCloudDatacatalogV1VertexModelSpecArgs:
    def __init__(__self__, *,
                 container_image_uri: Optional[pulumi.Input[str]] = None,
                 version_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version_description: Optional[pulumi.Input[str]] = None,
                 version_id: Optional[pulumi.Input[str]] = None,
                 vertex_model_source_info: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoArgs']] = None):
        """
        Specification for vertex model resources.
        :param pulumi.Input[str] container_image_uri: URI of the Docker image to be used as the custom container for serving predictions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] version_aliases: User provided version aliases so that a model version can be referenced via alias
        :param pulumi.Input[str] version_description: The description of this version.
        :param pulumi.Input[str] version_id: The version ID of the model.
        :param pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoArgs'] vertex_model_source_info: Source of a Vertex model.
        """
        if container_image_uri is not None:
            pulumi.set(__self__, "container_image_uri", container_image_uri)
        if version_aliases is not None:
            pulumi.set(__self__, "version_aliases", version_aliases)
        if version_description is not None:
            pulumi.set(__self__, "version_description", version_description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if vertex_model_source_info is not None:
            pulumi.set(__self__, "vertex_model_source_info", vertex_model_source_info)

    @property
    @pulumi.getter(name="containerImageUri")
    def container_image_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the Docker image to be used as the custom container for serving predictions.
        """
        return pulumi.get(self, "container_image_uri")

    @container_image_uri.setter
    def container_image_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_image_uri", value)

    @property
    @pulumi.getter(name="versionAliases")
    def version_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User provided version aliases so that a model version can be referenced via alias
        """
        return pulumi.get(self, "version_aliases")

    @version_aliases.setter
    def version_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "version_aliases", value)

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this version.
        """
        return pulumi.get(self, "version_description")

    @version_description.setter
    def version_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_description", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        The version ID of the model.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)

    @property
    @pulumi.getter(name="vertexModelSourceInfo")
    def vertex_model_source_info(self) -> Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoArgs']]:
        """
        Source of a Vertex model.
        """
        return pulumi.get(self, "vertex_model_source_info")

    @vertex_model_source_info.setter
    def vertex_model_source_info(self, value: Optional[pulumi.Input['GoogleCloudDatacatalogV1VertexModelSourceInfoArgs']]):
        pulumi.set(self, "vertex_model_source_info", value)


