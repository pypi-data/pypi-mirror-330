# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ComputeEnginePreferencesResponse',
    'ExecutionReportResponse',
    'FileValidationReportResponse',
    'GCSPayloadInfoResponse',
    'ImportErrorResponse',
    'ImportRowErrorResponse',
    'InlinePayloadInfoResponse',
    'MachinePreferencesResponse',
    'MachineSeriesResponse',
    'MoneyResponse',
    'PayloadFileResponse',
    'RegionPreferencesResponse',
    'ReportConfigGroupPreferenceSetAssignmentResponse',
    'ReportSummaryAssetAggregateStatsResponse',
    'ReportSummaryChartDataDataPointResponse',
    'ReportSummaryChartDataResponse',
    'ReportSummaryGroupFindingResponse',
    'ReportSummaryGroupPreferenceSetFindingResponse',
    'ReportSummaryHistogramChartDataBucketResponse',
    'ReportSummaryHistogramChartDataResponse',
    'ReportSummaryMachineFindingResponse',
    'ReportSummaryMachineSeriesAllocationResponse',
    'ReportSummaryResponse',
    'ReportSummarySoleTenantFindingResponse',
    'ReportSummarySoleTenantNodeAllocationResponse',
    'ReportSummaryUtilizationChartDataResponse',
    'ReportSummaryVMWareEngineFindingResponse',
    'ReportSummaryVMWareNodeAllocationResponse',
    'ReportSummaryVMWareNodeResponse',
    'SoleTenancyPreferencesResponse',
    'SoleTenantNodeTypeResponse',
    'UploadFileInfoResponse',
    'ValidationReportResponse',
    'VirtualMachinePreferencesNetworkCostParametersResponse',
    'VirtualMachinePreferencesResponse',
    'VirtualMachinePreferencesSizingOptimizationCustomParametersResponse',
    'VmwareEnginePreferencesResponse',
]

@pulumi.output_type
class ComputeEnginePreferencesResponse(dict):
    """
    The user preferences relating to Compute Engine target platform.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseType":
            suggest = "license_type"
        elif key == "machinePreferences":
            suggest = "machine_preferences"
        elif key == "persistentDiskType":
            suggest = "persistent_disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEnginePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEnginePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEnginePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_type: str,
                 machine_preferences: 'outputs.MachinePreferencesResponse',
                 persistent_disk_type: str):
        """
        The user preferences relating to Compute Engine target platform.
        :param str license_type: License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
        :param 'MachinePreferencesResponse' machine_preferences: Preferences concerning the machine types to consider on Compute Engine.
        :param str persistent_disk_type: Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
        """
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "machine_preferences", machine_preferences)
        pulumi.set(__self__, "persistent_disk_type", persistent_disk_type)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="machinePreferences")
    def machine_preferences(self) -> 'outputs.MachinePreferencesResponse':
        """
        Preferences concerning the machine types to consider on Compute Engine.
        """
        return pulumi.get(self, "machine_preferences")

    @property
    @pulumi.getter(name="persistentDiskType")
    def persistent_disk_type(self) -> str:
        """
        Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
        """
        return pulumi.get(self, "persistent_disk_type")


@pulumi.output_type
class ExecutionReportResponse(dict):
    """
    A resource that reports result of the import job execution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionErrors":
            suggest = "execution_errors"
        elif key == "framesReported":
            suggest = "frames_reported"
        elif key == "jobErrors":
            suggest = "job_errors"
        elif key == "totalRowsCount":
            suggest = "total_rows_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExecutionReportResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExecutionReportResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExecutionReportResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_errors: 'outputs.ValidationReportResponse',
                 frames_reported: int,
                 job_errors: Sequence['outputs.ImportErrorResponse'],
                 total_rows_count: int):
        """
        A resource that reports result of the import job execution.
        :param 'ValidationReportResponse' execution_errors: Validation errors encountered during the execution of the import job.
        :param int frames_reported: Total number of asset frames reported for the import job.
        :param Sequence['ImportErrorResponse'] job_errors: List of job-level errors. Deprecated, use the job errors under execution_errors instead.
        :param int total_rows_count: Total number of rows in the import job.
        """
        pulumi.set(__self__, "execution_errors", execution_errors)
        pulumi.set(__self__, "frames_reported", frames_reported)
        pulumi.set(__self__, "job_errors", job_errors)
        pulumi.set(__self__, "total_rows_count", total_rows_count)

    @property
    @pulumi.getter(name="executionErrors")
    def execution_errors(self) -> 'outputs.ValidationReportResponse':
        """
        Validation errors encountered during the execution of the import job.
        """
        return pulumi.get(self, "execution_errors")

    @property
    @pulumi.getter(name="framesReported")
    def frames_reported(self) -> int:
        """
        Total number of asset frames reported for the import job.
        """
        return pulumi.get(self, "frames_reported")

    @property
    @pulumi.getter(name="jobErrors")
    @_utilities.deprecated("""List of job-level errors. Deprecated, use the job errors under execution_errors instead.""")
    def job_errors(self) -> Sequence['outputs.ImportErrorResponse']:
        """
        List of job-level errors. Deprecated, use the job errors under execution_errors instead.
        """
        return pulumi.get(self, "job_errors")

    @property
    @pulumi.getter(name="totalRowsCount")
    def total_rows_count(self) -> int:
        """
        Total number of rows in the import job.
        """
        return pulumi.get(self, "total_rows_count")


@pulumi.output_type
class FileValidationReportResponse(dict):
    """
    A resource that aggregates the validation errors found in an import job file.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileErrors":
            suggest = "file_errors"
        elif key == "fileName":
            suggest = "file_name"
        elif key == "partialReport":
            suggest = "partial_report"
        elif key == "rowErrors":
            suggest = "row_errors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileValidationReportResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileValidationReportResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileValidationReportResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_errors: Sequence['outputs.ImportErrorResponse'],
                 file_name: str,
                 partial_report: bool,
                 row_errors: Sequence['outputs.ImportRowErrorResponse']):
        """
        A resource that aggregates the validation errors found in an import job file.
        :param Sequence['ImportErrorResponse'] file_errors: List of file level errors.
        :param str file_name: The name of the file.
        :param bool partial_report: Flag indicating that processing was aborted due to maximum number of errors.
        :param Sequence['ImportRowErrorResponse'] row_errors: Partial list of rows that encountered validation error.
        """
        pulumi.set(__self__, "file_errors", file_errors)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "partial_report", partial_report)
        pulumi.set(__self__, "row_errors", row_errors)

    @property
    @pulumi.getter(name="fileErrors")
    def file_errors(self) -> Sequence['outputs.ImportErrorResponse']:
        """
        List of file level errors.
        """
        return pulumi.get(self, "file_errors")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        The name of the file.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="partialReport")
    def partial_report(self) -> bool:
        """
        Flag indicating that processing was aborted due to maximum number of errors.
        """
        return pulumi.get(self, "partial_report")

    @property
    @pulumi.getter(name="rowErrors")
    def row_errors(self) -> Sequence['outputs.ImportRowErrorResponse']:
        """
        Partial list of rows that encountered validation error.
        """
        return pulumi.get(self, "row_errors")


@pulumi.output_type
class GCSPayloadInfoResponse(dict):
    """
    A resource that represents a payload hosted on Google Cloud Storage.
    """
    def __init__(__self__, *,
                 format: str,
                 path: str):
        """
        A resource that represents a payload hosted on Google Cloud Storage.
        :param str format: The import job format.
        :param str path: The payload path in Google Cloud Storage.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The import job format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The payload path in Google Cloud Storage.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ImportErrorResponse(dict):
    """
    A resource that reports the errors encountered while processing an import job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDetails":
            suggest = "error_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImportErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImportErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImportErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_details: str,
                 severity: str):
        """
        A resource that reports the errors encountered while processing an import job.
        :param str error_details: The error information.
        :param str severity: The severity of the error.
        """
        pulumi.set(__self__, "error_details", error_details)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="errorDetails")
    def error_details(self) -> str:
        """
        The error information.
        """
        return pulumi.get(self, "error_details")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        The severity of the error.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ImportRowErrorResponse(dict):
    """
    A resource that reports the import job errors at row level.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowNumber":
            suggest = "row_number"
        elif key == "vmName":
            suggest = "vm_name"
        elif key == "vmUuid":
            suggest = "vm_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImportRowErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImportRowErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImportRowErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 errors: Sequence['outputs.ImportErrorResponse'],
                 row_number: int,
                 vm_name: str,
                 vm_uuid: str):
        """
        A resource that reports the import job errors at row level.
        :param Sequence['ImportErrorResponse'] errors: The list of errors detected in the row.
        :param int row_number: The row number where the error was detected.
        :param str vm_name: The name of the VM in the row.
        :param str vm_uuid: The VM UUID.
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "row_number", row_number)
        pulumi.set(__self__, "vm_name", vm_name)
        pulumi.set(__self__, "vm_uuid", vm_uuid)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.ImportErrorResponse']:
        """
        The list of errors detected in the row.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="rowNumber")
    def row_number(self) -> int:
        """
        The row number where the error was detected.
        """
        return pulumi.get(self, "row_number")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        The name of the VM in the row.
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter(name="vmUuid")
    def vm_uuid(self) -> str:
        """
        The VM UUID.
        """
        return pulumi.get(self, "vm_uuid")


@pulumi.output_type
class InlinePayloadInfoResponse(dict):
    """
    A resource that represents the inline import job payload.
    """
    def __init__(__self__, *,
                 format: str,
                 payload: Sequence['outputs.PayloadFileResponse']):
        """
        A resource that represents the inline import job payload.
        :param str format: The import job format.
        :param Sequence['PayloadFileResponse'] payload: List of payload files.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The import job format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def payload(self) -> Sequence['outputs.PayloadFileResponse']:
        """
        List of payload files.
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class MachinePreferencesResponse(dict):
    """
    The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMachineSeries":
            suggest = "allowed_machine_series"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_machine_series: Sequence['outputs.MachineSeriesResponse']):
        """
        The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
        :param Sequence['MachineSeriesResponse'] allowed_machine_series: Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
        """
        pulumi.set(__self__, "allowed_machine_series", allowed_machine_series)

    @property
    @pulumi.getter(name="allowedMachineSeries")
    def allowed_machine_series(self) -> Sequence['outputs.MachineSeriesResponse']:
        """
        Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
        """
        return pulumi.get(self, "allowed_machine_series")


@pulumi.output_type
class MachineSeriesResponse(dict):
    """
    A Compute Engine machine series.
    """
    def __init__(__self__, *,
                 code: str):
        """
        A Compute Engine machine series.
        :param str code: Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class MoneyResponse(dict):
    """
    Represents an amount of money with its currency type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currencyCode":
            suggest = "currency_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MoneyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MoneyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MoneyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 currency_code: str,
                 nanos: int,
                 units: str):
        """
        Represents an amount of money with its currency type.
        :param str currency_code: The three-letter currency code defined in ISO 4217.
        :param int nanos: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
        :param str units: The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        """
        The three-letter currency code defined in ISO 4217.
        """
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def nanos(self) -> int:
        """
        Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def units(self) -> str:
        """
        The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        """
        return pulumi.get(self, "units")


@pulumi.output_type
class PayloadFileResponse(dict):
    """
    Payload file for inline import job payload.
    """
    def __init__(__self__, *,
                 data: str,
                 name: str):
        """
        Payload file for inline import job payload.
        :param str data: The file data.
        :param str name: The file name.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The file data.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The file name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RegionPreferencesResponse(dict):
    """
    The user preferences relating to target regions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredRegions":
            suggest = "preferred_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegionPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegionPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegionPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_regions: Sequence[str]):
        """
        The user preferences relating to target regions.
        :param Sequence[str] preferred_regions: A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
        """
        pulumi.set(__self__, "preferred_regions", preferred_regions)

    @property
    @pulumi.getter(name="preferredRegions")
    def preferred_regions(self) -> Sequence[str]:
        """
        A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
        """
        return pulumi.get(self, "preferred_regions")


@pulumi.output_type
class ReportConfigGroupPreferenceSetAssignmentResponse(dict):
    """
    Represents a combination of a group with a preference set.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceSet":
            suggest = "preference_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportConfigGroupPreferenceSetAssignmentResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportConfigGroupPreferenceSetAssignmentResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportConfigGroupPreferenceSetAssignmentResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 preference_set: str):
        """
        Represents a combination of a group with a preference set.
        :param str group: Name of the group.
        :param str preference_set: Name of the Preference Set.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "preference_set", preference_set)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Name of the group.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="preferenceSet")
    def preference_set(self) -> str:
        """
        Name of the Preference Set.
        """
        return pulumi.get(self, "preference_set")


@pulumi.output_type
class ReportSummaryAssetAggregateStatsResponse(dict):
    """
    Aggregate statistics for a collection of assets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetAge":
            suggest = "asset_age"
        elif key == "coreCountHistogram":
            suggest = "core_count_histogram"
        elif key == "memoryBytesHistogram":
            suggest = "memory_bytes_histogram"
        elif key == "memoryUtilization":
            suggest = "memory_utilization"
        elif key == "memoryUtilizationChart":
            suggest = "memory_utilization_chart"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "storageBytesHistogram":
            suggest = "storage_bytes_histogram"
        elif key == "storageUtilization":
            suggest = "storage_utilization"
        elif key == "storageUtilizationChart":
            suggest = "storage_utilization_chart"
        elif key == "totalAssets":
            suggest = "total_assets"
        elif key == "totalCores":
            suggest = "total_cores"
        elif key == "totalMemoryBytes":
            suggest = "total_memory_bytes"
        elif key == "totalStorageBytes":
            suggest = "total_storage_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryAssetAggregateStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryAssetAggregateStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryAssetAggregateStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asset_age: 'outputs.ReportSummaryChartDataResponse',
                 core_count_histogram: 'outputs.ReportSummaryHistogramChartDataResponse',
                 memory_bytes_histogram: 'outputs.ReportSummaryHistogramChartDataResponse',
                 memory_utilization: 'outputs.ReportSummaryChartDataResponse',
                 memory_utilization_chart: 'outputs.ReportSummaryUtilizationChartDataResponse',
                 operating_system: 'outputs.ReportSummaryChartDataResponse',
                 storage_bytes_histogram: 'outputs.ReportSummaryHistogramChartDataResponse',
                 storage_utilization: 'outputs.ReportSummaryChartDataResponse',
                 storage_utilization_chart: 'outputs.ReportSummaryUtilizationChartDataResponse',
                 total_assets: str,
                 total_cores: str,
                 total_memory_bytes: str,
                 total_storage_bytes: str):
        """
        Aggregate statistics for a collection of assets.
        :param 'ReportSummaryChartDataResponse' asset_age: Count of assets grouped by age.
        :param 'ReportSummaryHistogramChartDataResponse' core_count_histogram: Histogram showing a distribution of CPU core counts.
        :param 'ReportSummaryHistogramChartDataResponse' memory_bytes_histogram: Histogram showing a distribution of memory sizes.
        :param 'ReportSummaryChartDataResponse' memory_utilization: Total memory split into Used/Free buckets.
        :param 'ReportSummaryUtilizationChartDataResponse' memory_utilization_chart: Total memory split into Used/Free buckets.
        :param 'ReportSummaryChartDataResponse' operating_system: Count of assets grouped by Operating System families.
        :param 'ReportSummaryHistogramChartDataResponse' storage_bytes_histogram: Histogram showing a distribution of memory sizes.
        :param 'ReportSummaryChartDataResponse' storage_utilization: Total storage split into Used/Free buckets.
        :param 'ReportSummaryUtilizationChartDataResponse' storage_utilization_chart: Total memory split into Used/Free buckets.
        :param str total_assets: Count of the number of unique assets in this collection.
        :param str total_cores: Sum of the CPU core count of all the assets in this collection.
        :param str total_memory_bytes: Sum of the memory in bytes of all the assets in this collection.
        :param str total_storage_bytes: Sum of persistent storage in bytes of all the assets in this collection.
        """
        pulumi.set(__self__, "asset_age", asset_age)
        pulumi.set(__self__, "core_count_histogram", core_count_histogram)
        pulumi.set(__self__, "memory_bytes_histogram", memory_bytes_histogram)
        pulumi.set(__self__, "memory_utilization", memory_utilization)
        pulumi.set(__self__, "memory_utilization_chart", memory_utilization_chart)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "storage_bytes_histogram", storage_bytes_histogram)
        pulumi.set(__self__, "storage_utilization", storage_utilization)
        pulumi.set(__self__, "storage_utilization_chart", storage_utilization_chart)
        pulumi.set(__self__, "total_assets", total_assets)
        pulumi.set(__self__, "total_cores", total_cores)
        pulumi.set(__self__, "total_memory_bytes", total_memory_bytes)
        pulumi.set(__self__, "total_storage_bytes", total_storage_bytes)

    @property
    @pulumi.getter(name="assetAge")
    def asset_age(self) -> 'outputs.ReportSummaryChartDataResponse':
        """
        Count of assets grouped by age.
        """
        return pulumi.get(self, "asset_age")

    @property
    @pulumi.getter(name="coreCountHistogram")
    def core_count_histogram(self) -> 'outputs.ReportSummaryHistogramChartDataResponse':
        """
        Histogram showing a distribution of CPU core counts.
        """
        return pulumi.get(self, "core_count_histogram")

    @property
    @pulumi.getter(name="memoryBytesHistogram")
    def memory_bytes_histogram(self) -> 'outputs.ReportSummaryHistogramChartDataResponse':
        """
        Histogram showing a distribution of memory sizes.
        """
        return pulumi.get(self, "memory_bytes_histogram")

    @property
    @pulumi.getter(name="memoryUtilization")
    def memory_utilization(self) -> 'outputs.ReportSummaryChartDataResponse':
        """
        Total memory split into Used/Free buckets.
        """
        return pulumi.get(self, "memory_utilization")

    @property
    @pulumi.getter(name="memoryUtilizationChart")
    def memory_utilization_chart(self) -> 'outputs.ReportSummaryUtilizationChartDataResponse':
        """
        Total memory split into Used/Free buckets.
        """
        return pulumi.get(self, "memory_utilization_chart")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> 'outputs.ReportSummaryChartDataResponse':
        """
        Count of assets grouped by Operating System families.
        """
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="storageBytesHistogram")
    def storage_bytes_histogram(self) -> 'outputs.ReportSummaryHistogramChartDataResponse':
        """
        Histogram showing a distribution of memory sizes.
        """
        return pulumi.get(self, "storage_bytes_histogram")

    @property
    @pulumi.getter(name="storageUtilization")
    def storage_utilization(self) -> 'outputs.ReportSummaryChartDataResponse':
        """
        Total storage split into Used/Free buckets.
        """
        return pulumi.get(self, "storage_utilization")

    @property
    @pulumi.getter(name="storageUtilizationChart")
    def storage_utilization_chart(self) -> 'outputs.ReportSummaryUtilizationChartDataResponse':
        """
        Total memory split into Used/Free buckets.
        """
        return pulumi.get(self, "storage_utilization_chart")

    @property
    @pulumi.getter(name="totalAssets")
    def total_assets(self) -> str:
        """
        Count of the number of unique assets in this collection.
        """
        return pulumi.get(self, "total_assets")

    @property
    @pulumi.getter(name="totalCores")
    def total_cores(self) -> str:
        """
        Sum of the CPU core count of all the assets in this collection.
        """
        return pulumi.get(self, "total_cores")

    @property
    @pulumi.getter(name="totalMemoryBytes")
    def total_memory_bytes(self) -> str:
        """
        Sum of the memory in bytes of all the assets in this collection.
        """
        return pulumi.get(self, "total_memory_bytes")

    @property
    @pulumi.getter(name="totalStorageBytes")
    def total_storage_bytes(self) -> str:
        """
        Sum of persistent storage in bytes of all the assets in this collection.
        """
        return pulumi.get(self, "total_storage_bytes")


@pulumi.output_type
class ReportSummaryChartDataDataPointResponse(dict):
    """
    Describes a single data point in the Chart.
    """
    def __init__(__self__, *,
                 label: str,
                 value: float):
        """
        Describes a single data point in the Chart.
        :param str label: The X-axis label for this data point.
        :param float value: The Y-axis value for this data point.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The X-axis label for this data point.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The Y-axis value for this data point.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReportSummaryChartDataResponse(dict):
    """
    Describes a collection of data points rendered as a Chart.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPoints":
            suggest = "data_points"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryChartDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryChartDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryChartDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_points: Sequence['outputs.ReportSummaryChartDataDataPointResponse']):
        """
        Describes a collection of data points rendered as a Chart.
        :param Sequence['ReportSummaryChartDataDataPointResponse'] data_points: Each data point in the chart is represented as a name-value pair with the name being the x-axis label, and the value being the y-axis value.
        """
        pulumi.set(__self__, "data_points", data_points)

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Sequence['outputs.ReportSummaryChartDataDataPointResponse']:
        """
        Each data point in the chart is represented as a name-value pair with the name being the x-axis label, and the value being the y-axis value.
        """
        return pulumi.get(self, "data_points")


@pulumi.output_type
class ReportSummaryGroupFindingResponse(dict):
    """
    Summary Findings for a specific Group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetAggregateStats":
            suggest = "asset_aggregate_stats"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "overlappingAssetCount":
            suggest = "overlapping_asset_count"
        elif key == "preferenceSetFindings":
            suggest = "preference_set_findings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryGroupFindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryGroupFindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryGroupFindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asset_aggregate_stats: 'outputs.ReportSummaryAssetAggregateStatsResponse',
                 description: str,
                 display_name: str,
                 overlapping_asset_count: str,
                 preference_set_findings: Sequence['outputs.ReportSummaryGroupPreferenceSetFindingResponse']):
        """
        Summary Findings for a specific Group.
        :param 'ReportSummaryAssetAggregateStatsResponse' asset_aggregate_stats: Summary statistics for all the assets in this group.
        :param str description: Description for the Group.
        :param str display_name: Display Name for the Group.
        :param str overlapping_asset_count: This field is deprecated, do not rely on it having a value.
        :param Sequence['ReportSummaryGroupPreferenceSetFindingResponse'] preference_set_findings: Findings for each of the PreferenceSets for this group.
        """
        pulumi.set(__self__, "asset_aggregate_stats", asset_aggregate_stats)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "overlapping_asset_count", overlapping_asset_count)
        pulumi.set(__self__, "preference_set_findings", preference_set_findings)

    @property
    @pulumi.getter(name="assetAggregateStats")
    def asset_aggregate_stats(self) -> 'outputs.ReportSummaryAssetAggregateStatsResponse':
        """
        Summary statistics for all the assets in this group.
        """
        return pulumi.get(self, "asset_aggregate_stats")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description for the Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the Group.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="overlappingAssetCount")
    @_utilities.deprecated("""This field is deprecated, do not rely on it having a value.""")
    def overlapping_asset_count(self) -> str:
        """
        This field is deprecated, do not rely on it having a value.
        """
        return pulumi.get(self, "overlapping_asset_count")

    @property
    @pulumi.getter(name="preferenceSetFindings")
    def preference_set_findings(self) -> Sequence['outputs.ReportSummaryGroupPreferenceSetFindingResponse']:
        """
        Findings for each of the PreferenceSets for this group.
        """
        return pulumi.get(self, "preference_set_findings")


@pulumi.output_type
class ReportSummaryGroupPreferenceSetFindingResponse(dict):
    """
    Summary Findings for a specific Group/PreferenceSet combination.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "machineFinding":
            suggest = "machine_finding"
        elif key == "machinePreferences":
            suggest = "machine_preferences"
        elif key == "monthlyCostCompute":
            suggest = "monthly_cost_compute"
        elif key == "monthlyCostNetworkEgress":
            suggest = "monthly_cost_network_egress"
        elif key == "monthlyCostOsLicense":
            suggest = "monthly_cost_os_license"
        elif key == "monthlyCostOther":
            suggest = "monthly_cost_other"
        elif key == "monthlyCostStorage":
            suggest = "monthly_cost_storage"
        elif key == "monthlyCostTotal":
            suggest = "monthly_cost_total"
        elif key == "preferredRegion":
            suggest = "preferred_region"
        elif key == "pricingTrack":
            suggest = "pricing_track"
        elif key == "soleTenantFinding":
            suggest = "sole_tenant_finding"
        elif key == "topPriority":
            suggest = "top_priority"
        elif key == "vmwareEngineFinding":
            suggest = "vmware_engine_finding"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryGroupPreferenceSetFindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryGroupPreferenceSetFindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryGroupPreferenceSetFindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 machine_finding: 'outputs.ReportSummaryMachineFindingResponse',
                 machine_preferences: 'outputs.VirtualMachinePreferencesResponse',
                 monthly_cost_compute: 'outputs.MoneyResponse',
                 monthly_cost_network_egress: 'outputs.MoneyResponse',
                 monthly_cost_os_license: 'outputs.MoneyResponse',
                 monthly_cost_other: 'outputs.MoneyResponse',
                 monthly_cost_storage: 'outputs.MoneyResponse',
                 monthly_cost_total: 'outputs.MoneyResponse',
                 preferred_region: str,
                 pricing_track: str,
                 sole_tenant_finding: 'outputs.ReportSummarySoleTenantFindingResponse',
                 top_priority: str,
                 vmware_engine_finding: 'outputs.ReportSummaryVMWareEngineFindingResponse'):
        """
        Summary Findings for a specific Group/PreferenceSet combination.
        :param str description: Description for the Preference Set.
        :param str display_name: Display Name of the Preference Set
        :param 'ReportSummaryMachineFindingResponse' machine_finding: A set of findings that applies to all machines in the input.
        :param 'VirtualMachinePreferencesResponse' machine_preferences: A set of preferences that applies to all machines in the context.
        :param 'MoneyResponse' monthly_cost_compute: Compute monthly cost for this preference set.
        :param 'MoneyResponse' monthly_cost_network_egress: Network Egress monthly cost for this preference set.
        :param 'MoneyResponse' monthly_cost_os_license: Licensing monthly cost for this preference set.
        :param 'MoneyResponse' monthly_cost_other: Miscellaneous monthly cost for this preference set.
        :param 'MoneyResponse' monthly_cost_storage: Storage monthly cost for this preference set.
        :param 'MoneyResponse' monthly_cost_total: Total monthly cost for this preference set.
        :param str preferred_region: Target region for this Preference Set
        :param str pricing_track: Text describing the pricing track specified for this Preference Set
        :param 'ReportSummarySoleTenantFindingResponse' sole_tenant_finding: A set of findings that applies to Stole-Tenant machines in the input.
        :param str top_priority: Text describing the business priority specified for this Preference Set
        :param 'ReportSummaryVMWareEngineFindingResponse' vmware_engine_finding: A set of findings that applies to VMWare machines in the input.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "machine_finding", machine_finding)
        pulumi.set(__self__, "machine_preferences", machine_preferences)
        pulumi.set(__self__, "monthly_cost_compute", monthly_cost_compute)
        pulumi.set(__self__, "monthly_cost_network_egress", monthly_cost_network_egress)
        pulumi.set(__self__, "monthly_cost_os_license", monthly_cost_os_license)
        pulumi.set(__self__, "monthly_cost_other", monthly_cost_other)
        pulumi.set(__self__, "monthly_cost_storage", monthly_cost_storage)
        pulumi.set(__self__, "monthly_cost_total", monthly_cost_total)
        pulumi.set(__self__, "preferred_region", preferred_region)
        pulumi.set(__self__, "pricing_track", pricing_track)
        pulumi.set(__self__, "sole_tenant_finding", sole_tenant_finding)
        pulumi.set(__self__, "top_priority", top_priority)
        pulumi.set(__self__, "vmware_engine_finding", vmware_engine_finding)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description for the Preference Set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name of the Preference Set
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="machineFinding")
    def machine_finding(self) -> 'outputs.ReportSummaryMachineFindingResponse':
        """
        A set of findings that applies to all machines in the input.
        """
        return pulumi.get(self, "machine_finding")

    @property
    @pulumi.getter(name="machinePreferences")
    def machine_preferences(self) -> 'outputs.VirtualMachinePreferencesResponse':
        """
        A set of preferences that applies to all machines in the context.
        """
        return pulumi.get(self, "machine_preferences")

    @property
    @pulumi.getter(name="monthlyCostCompute")
    def monthly_cost_compute(self) -> 'outputs.MoneyResponse':
        """
        Compute monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_compute")

    @property
    @pulumi.getter(name="monthlyCostNetworkEgress")
    def monthly_cost_network_egress(self) -> 'outputs.MoneyResponse':
        """
        Network Egress monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_network_egress")

    @property
    @pulumi.getter(name="monthlyCostOsLicense")
    def monthly_cost_os_license(self) -> 'outputs.MoneyResponse':
        """
        Licensing monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_os_license")

    @property
    @pulumi.getter(name="monthlyCostOther")
    def monthly_cost_other(self) -> 'outputs.MoneyResponse':
        """
        Miscellaneous monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_other")

    @property
    @pulumi.getter(name="monthlyCostStorage")
    def monthly_cost_storage(self) -> 'outputs.MoneyResponse':
        """
        Storage monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_storage")

    @property
    @pulumi.getter(name="monthlyCostTotal")
    def monthly_cost_total(self) -> 'outputs.MoneyResponse':
        """
        Total monthly cost for this preference set.
        """
        return pulumi.get(self, "monthly_cost_total")

    @property
    @pulumi.getter(name="preferredRegion")
    def preferred_region(self) -> str:
        """
        Target region for this Preference Set
        """
        return pulumi.get(self, "preferred_region")

    @property
    @pulumi.getter(name="pricingTrack")
    def pricing_track(self) -> str:
        """
        Text describing the pricing track specified for this Preference Set
        """
        return pulumi.get(self, "pricing_track")

    @property
    @pulumi.getter(name="soleTenantFinding")
    def sole_tenant_finding(self) -> 'outputs.ReportSummarySoleTenantFindingResponse':
        """
        A set of findings that applies to Stole-Tenant machines in the input.
        """
        return pulumi.get(self, "sole_tenant_finding")

    @property
    @pulumi.getter(name="topPriority")
    def top_priority(self) -> str:
        """
        Text describing the business priority specified for this Preference Set
        """
        return pulumi.get(self, "top_priority")

    @property
    @pulumi.getter(name="vmwareEngineFinding")
    def vmware_engine_finding(self) -> 'outputs.ReportSummaryVMWareEngineFindingResponse':
        """
        A set of findings that applies to VMWare machines in the input.
        """
        return pulumi.get(self, "vmware_engine_finding")


@pulumi.output_type
class ReportSummaryHistogramChartDataBucketResponse(dict):
    """
    A histogram bucket with a lower and upper bound, and a count of items with a field value between those bounds. The lower bound is inclusive and the upper bound is exclusive. Lower bound may be -infinity and upper bound may be infinity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerBound":
            suggest = "lower_bound"
        elif key == "upperBound":
            suggest = "upper_bound"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryHistogramChartDataBucketResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryHistogramChartDataBucketResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryHistogramChartDataBucketResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: str,
                 lower_bound: str,
                 upper_bound: str):
        """
        A histogram bucket with a lower and upper bound, and a count of items with a field value between those bounds. The lower bound is inclusive and the upper bound is exclusive. Lower bound may be -infinity and upper bound may be infinity.
        :param str count: Count of items in the bucket.
        :param str lower_bound: Lower bound - inclusive.
        :param str upper_bound: Upper bound - exclusive.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "lower_bound", lower_bound)
        pulumi.set(__self__, "upper_bound", upper_bound)

    @property
    @pulumi.getter
    def count(self) -> str:
        """
        Count of items in the bucket.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> str:
        """
        Lower bound - inclusive.
        """
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> str:
        """
        Upper bound - exclusive.
        """
        return pulumi.get(self, "upper_bound")


@pulumi.output_type
class ReportSummaryHistogramChartDataResponse(dict):
    """
    A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
    """
    def __init__(__self__, *,
                 buckets: Sequence['outputs.ReportSummaryHistogramChartDataBucketResponse']):
        """
        A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
        :param Sequence['ReportSummaryHistogramChartDataBucketResponse'] buckets: Buckets in the histogram. There will be `n+1` buckets matching `n` lower bounds in the request. The first bucket will be from -infinity to the first bound. Subsequent buckets will be between one bound and the next. The final bucket will be from the final bound to infinity.
        """
        pulumi.set(__self__, "buckets", buckets)

    @property
    @pulumi.getter
    def buckets(self) -> Sequence['outputs.ReportSummaryHistogramChartDataBucketResponse']:
        """
        Buckets in the histogram. There will be `n+1` buckets matching `n` lower bounds in the request. The first bucket will be from -infinity to the first bound. Subsequent buckets will be between one bound and the next. The final bucket will be from the final bound to infinity.
        """
        return pulumi.get(self, "buckets")


@pulumi.output_type
class ReportSummaryMachineFindingResponse(dict):
    """
    A set of findings that applies to assets of type Virtual/Physical Machine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "allocatedDiskTypes":
            suggest = "allocated_disk_types"
        elif key == "allocatedRegions":
            suggest = "allocated_regions"
        elif key == "machineSeriesAllocations":
            suggest = "machine_series_allocations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryMachineFindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryMachineFindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryMachineFindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 allocated_disk_types: Sequence[str],
                 allocated_regions: Sequence[str],
                 machine_series_allocations: Sequence['outputs.ReportSummaryMachineSeriesAllocationResponse']):
        """
        A set of findings that applies to assets of type Virtual/Physical Machine.
        :param str allocated_asset_count: Count of assets which were allocated.
        :param Sequence[str] allocated_disk_types: Set of disk types allocated to assets.
        :param Sequence[str] allocated_regions: Set of regions in which the assets were allocated.
        :param Sequence['ReportSummaryMachineSeriesAllocationResponse'] machine_series_allocations: Distribution of assets based on the Machine Series.
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "allocated_disk_types", allocated_disk_types)
        pulumi.set(__self__, "allocated_regions", allocated_regions)
        pulumi.set(__self__, "machine_series_allocations", machine_series_allocations)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets which were allocated.
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter(name="allocatedDiskTypes")
    def allocated_disk_types(self) -> Sequence[str]:
        """
        Set of disk types allocated to assets.
        """
        return pulumi.get(self, "allocated_disk_types")

    @property
    @pulumi.getter(name="allocatedRegions")
    def allocated_regions(self) -> Sequence[str]:
        """
        Set of regions in which the assets were allocated.
        """
        return pulumi.get(self, "allocated_regions")

    @property
    @pulumi.getter(name="machineSeriesAllocations")
    def machine_series_allocations(self) -> Sequence['outputs.ReportSummaryMachineSeriesAllocationResponse']:
        """
        Distribution of assets based on the Machine Series.
        """
        return pulumi.get(self, "machine_series_allocations")


@pulumi.output_type
class ReportSummaryMachineSeriesAllocationResponse(dict):
    """
    Represents a data point tracking the count of assets allocated for a specific Machine Series.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "machineSeries":
            suggest = "machine_series"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryMachineSeriesAllocationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryMachineSeriesAllocationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryMachineSeriesAllocationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 machine_series: 'outputs.MachineSeriesResponse'):
        """
        Represents a data point tracking the count of assets allocated for a specific Machine Series.
        :param str allocated_asset_count: Count of assets allocated to this machine series.
        :param 'MachineSeriesResponse' machine_series: The Machine Series (e.g. "E2", "N2")
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "machine_series", machine_series)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets allocated to this machine series.
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter(name="machineSeries")
    def machine_series(self) -> 'outputs.MachineSeriesResponse':
        """
        The Machine Series (e.g. "E2", "N2")
        """
        return pulumi.get(self, "machine_series")


@pulumi.output_type
class ReportSummaryResponse(dict):
    """
    Describes the Summary view of a Report, which contains aggregated values for all the groups and preference sets included in this Report.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allAssetsStats":
            suggest = "all_assets_stats"
        elif key == "groupFindings":
            suggest = "group_findings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_assets_stats: 'outputs.ReportSummaryAssetAggregateStatsResponse',
                 group_findings: Sequence['outputs.ReportSummaryGroupFindingResponse']):
        """
        Describes the Summary view of a Report, which contains aggregated values for all the groups and preference sets included in this Report.
        :param 'ReportSummaryAssetAggregateStatsResponse' all_assets_stats: Aggregate statistics for all the assets across all the groups.
        :param Sequence['ReportSummaryGroupFindingResponse'] group_findings: Findings for each Group included in this report.
        """
        pulumi.set(__self__, "all_assets_stats", all_assets_stats)
        pulumi.set(__self__, "group_findings", group_findings)

    @property
    @pulumi.getter(name="allAssetsStats")
    def all_assets_stats(self) -> 'outputs.ReportSummaryAssetAggregateStatsResponse':
        """
        Aggregate statistics for all the assets across all the groups.
        """
        return pulumi.get(self, "all_assets_stats")

    @property
    @pulumi.getter(name="groupFindings")
    def group_findings(self) -> Sequence['outputs.ReportSummaryGroupFindingResponse']:
        """
        Findings for each Group included in this report.
        """
        return pulumi.get(self, "group_findings")


@pulumi.output_type
class ReportSummarySoleTenantFindingResponse(dict):
    """
    A set of findings that applies to assets destined for Sole-Tenant nodes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "allocatedRegions":
            suggest = "allocated_regions"
        elif key == "nodeAllocations":
            suggest = "node_allocations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummarySoleTenantFindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummarySoleTenantFindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummarySoleTenantFindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 allocated_regions: Sequence[str],
                 node_allocations: Sequence['outputs.ReportSummarySoleTenantNodeAllocationResponse']):
        """
        A set of findings that applies to assets destined for Sole-Tenant nodes.
        :param str allocated_asset_count: Count of assets which are allocated
        :param Sequence[str] allocated_regions: Set of regions in which the assets are allocated
        :param Sequence['ReportSummarySoleTenantNodeAllocationResponse'] node_allocations: Set of per-nodetype allocation records
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "allocated_regions", allocated_regions)
        pulumi.set(__self__, "node_allocations", node_allocations)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets which are allocated
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter(name="allocatedRegions")
    def allocated_regions(self) -> Sequence[str]:
        """
        Set of regions in which the assets are allocated
        """
        return pulumi.get(self, "allocated_regions")

    @property
    @pulumi.getter(name="nodeAllocations")
    def node_allocations(self) -> Sequence['outputs.ReportSummarySoleTenantNodeAllocationResponse']:
        """
        Set of per-nodetype allocation records
        """
        return pulumi.get(self, "node_allocations")


@pulumi.output_type
class ReportSummarySoleTenantNodeAllocationResponse(dict):
    """
    Represents the assets allocated to a specific Sole-Tenant node type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "nodeCount":
            suggest = "node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummarySoleTenantNodeAllocationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummarySoleTenantNodeAllocationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummarySoleTenantNodeAllocationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 node: 'outputs.SoleTenantNodeTypeResponse',
                 node_count: str):
        """
        Represents the assets allocated to a specific Sole-Tenant node type.
        :param str allocated_asset_count: Count of assets allocated to these nodes
        :param 'SoleTenantNodeTypeResponse' node: Sole Tenant node type, e.g. "m3-node-128-3904"
        :param str node_count: Count of this node type to be provisioned
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "node_count", node_count)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets allocated to these nodes
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter
    def node(self) -> 'outputs.SoleTenantNodeTypeResponse':
        """
        Sole Tenant node type, e.g. "m3-node-128-3904"
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> str:
        """
        Count of this node type to be provisioned
        """
        return pulumi.get(self, "node_count")


@pulumi.output_type
class ReportSummaryUtilizationChartDataResponse(dict):
    """
    Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
    """
    def __init__(__self__, *,
                 free: str,
                 used: str):
        """
        Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
        :param str free: Aggregate value which falls into the "Free" bucket.
        :param str used: Aggregate value which falls into the "Used" bucket.
        """
        pulumi.set(__self__, "free", free)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def free(self) -> str:
        """
        Aggregate value which falls into the "Free" bucket.
        """
        return pulumi.get(self, "free")

    @property
    @pulumi.getter
    def used(self) -> str:
        """
        Aggregate value which falls into the "Used" bucket.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class ReportSummaryVMWareEngineFindingResponse(dict):
    """
    A set of findings that applies to assets destined for VMWare Engine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "allocatedRegions":
            suggest = "allocated_regions"
        elif key == "nodeAllocations":
            suggest = "node_allocations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryVMWareEngineFindingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryVMWareEngineFindingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryVMWareEngineFindingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 allocated_regions: Sequence[str],
                 node_allocations: Sequence['outputs.ReportSummaryVMWareNodeAllocationResponse']):
        """
        A set of findings that applies to assets destined for VMWare Engine.
        :param str allocated_asset_count: Count of assets which are allocated
        :param Sequence[str] allocated_regions: Set of regions in which the assets were allocated
        :param Sequence['ReportSummaryVMWareNodeAllocationResponse'] node_allocations: Set of per-nodetype allocation records
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "allocated_regions", allocated_regions)
        pulumi.set(__self__, "node_allocations", node_allocations)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets which are allocated
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter(name="allocatedRegions")
    def allocated_regions(self) -> Sequence[str]:
        """
        Set of regions in which the assets were allocated
        """
        return pulumi.get(self, "allocated_regions")

    @property
    @pulumi.getter(name="nodeAllocations")
    def node_allocations(self) -> Sequence['outputs.ReportSummaryVMWareNodeAllocationResponse']:
        """
        Set of per-nodetype allocation records
        """
        return pulumi.get(self, "node_allocations")


@pulumi.output_type
class ReportSummaryVMWareNodeAllocationResponse(dict):
    """
    Represents assets allocated to a specific VMWare Node type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocatedAssetCount":
            suggest = "allocated_asset_count"
        elif key == "nodeCount":
            suggest = "node_count"
        elif key == "vmwareNode":
            suggest = "vmware_node"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSummaryVMWareNodeAllocationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSummaryVMWareNodeAllocationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSummaryVMWareNodeAllocationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocated_asset_count: str,
                 node_count: str,
                 vmware_node: 'outputs.ReportSummaryVMWareNodeResponse'):
        """
        Represents assets allocated to a specific VMWare Node type.
        :param str allocated_asset_count: Count of assets allocated to these nodes
        :param str node_count: Count of this node type to be provisioned
        :param 'ReportSummaryVMWareNodeResponse' vmware_node: VMWare node type, e.g. "ve1-standard-72"
        """
        pulumi.set(__self__, "allocated_asset_count", allocated_asset_count)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "vmware_node", vmware_node)

    @property
    @pulumi.getter(name="allocatedAssetCount")
    def allocated_asset_count(self) -> str:
        """
        Count of assets allocated to these nodes
        """
        return pulumi.get(self, "allocated_asset_count")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> str:
        """
        Count of this node type to be provisioned
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="vmwareNode")
    def vmware_node(self) -> 'outputs.ReportSummaryVMWareNodeResponse':
        """
        VMWare node type, e.g. "ve1-standard-72"
        """
        return pulumi.get(self, "vmware_node")


@pulumi.output_type
class ReportSummaryVMWareNodeResponse(dict):
    """
    A VMWare Engine Node
    """
    def __init__(__self__, *,
                 code: str):
        """
        A VMWare Engine Node
        :param str code: Code to identify VMware Engine node series, e.g. "ve1-standard-72". Based on the displayName of cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.nodeTypes
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code to identify VMware Engine node series, e.g. "ve1-standard-72". Based on the displayName of cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.nodeTypes
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class SoleTenancyPreferencesResponse(dict):
    """
    Preferences concerning Sole Tenancy nodes and VMs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitmentPlan":
            suggest = "commitment_plan"
        elif key == "cpuOvercommitRatio":
            suggest = "cpu_overcommit_ratio"
        elif key == "hostMaintenancePolicy":
            suggest = "host_maintenance_policy"
        elif key == "nodeTypes":
            suggest = "node_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoleTenancyPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoleTenancyPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoleTenancyPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commitment_plan: str,
                 cpu_overcommit_ratio: float,
                 host_maintenance_policy: str,
                 node_types: Sequence['outputs.SoleTenantNodeTypeResponse']):
        """
        Preferences concerning Sole Tenancy nodes and VMs.
        :param str commitment_plan: Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        :param float cpu_overcommit_ratio: CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
        :param str host_maintenance_policy: Sole Tenancy nodes maintenance policy.
        :param Sequence['SoleTenantNodeTypeResponse'] node_types: A list of sole tenant node types. An empty list means that all possible node types will be considered.
        """
        pulumi.set(__self__, "commitment_plan", commitment_plan)
        pulumi.set(__self__, "cpu_overcommit_ratio", cpu_overcommit_ratio)
        pulumi.set(__self__, "host_maintenance_policy", host_maintenance_policy)
        pulumi.set(__self__, "node_types", node_types)

    @property
    @pulumi.getter(name="commitmentPlan")
    def commitment_plan(self) -> str:
        """
        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        """
        return pulumi.get(self, "commitment_plan")

    @property
    @pulumi.getter(name="cpuOvercommitRatio")
    def cpu_overcommit_ratio(self) -> float:
        """
        CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
        """
        return pulumi.get(self, "cpu_overcommit_ratio")

    @property
    @pulumi.getter(name="hostMaintenancePolicy")
    def host_maintenance_policy(self) -> str:
        """
        Sole Tenancy nodes maintenance policy.
        """
        return pulumi.get(self, "host_maintenance_policy")

    @property
    @pulumi.getter(name="nodeTypes")
    def node_types(self) -> Sequence['outputs.SoleTenantNodeTypeResponse']:
        """
        A list of sole tenant node types. An empty list means that all possible node types will be considered.
        """
        return pulumi.get(self, "node_types")


@pulumi.output_type
class SoleTenantNodeTypeResponse(dict):
    """
    A Sole Tenant node type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoleTenantNodeTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoleTenantNodeTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoleTenantNodeTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_name: str):
        """
        A Sole Tenant node type.
        :param str node_name: Name of the Sole Tenant node. Consult https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes
        """
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        Name of the Sole Tenant node. Consult https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes
        """
        return pulumi.get(self, "node_name")


@pulumi.output_type
class UploadFileInfoResponse(dict):
    """
    A resource that contains a URI to which a data file can be uploaded.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signedUri":
            suggest = "signed_uri"
        elif key == "uriExpirationTime":
            suggest = "uri_expiration_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UploadFileInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UploadFileInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UploadFileInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 headers: Mapping[str, str],
                 signed_uri: str,
                 uri_expiration_time: str):
        """
        A resource that contains a URI to which a data file can be uploaded.
        :param Mapping[str, str] headers: The headers that were used to sign the URL.
        :param str signed_uri: Upload URI for the file.
        :param str uri_expiration_time: Expiration time of the upload URI.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "signed_uri", signed_uri)
        pulumi.set(__self__, "uri_expiration_time", uri_expiration_time)

    @property
    @pulumi.getter
    def headers(self) -> Mapping[str, str]:
        """
        The headers that were used to sign the URL.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="signedUri")
    def signed_uri(self) -> str:
        """
        Upload URI for the file.
        """
        return pulumi.get(self, "signed_uri")

    @property
    @pulumi.getter(name="uriExpirationTime")
    def uri_expiration_time(self) -> str:
        """
        Expiration time of the upload URI.
        """
        return pulumi.get(self, "uri_expiration_time")


@pulumi.output_type
class ValidationReportResponse(dict):
    """
    A resource that aggregates errors across import job files.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileValidations":
            suggest = "file_validations"
        elif key == "jobErrors":
            suggest = "job_errors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ValidationReportResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ValidationReportResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ValidationReportResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_validations: Sequence['outputs.FileValidationReportResponse'],
                 job_errors: Sequence['outputs.ImportErrorResponse']):
        """
        A resource that aggregates errors across import job files.
        :param Sequence['FileValidationReportResponse'] file_validations: List of errors found in files.
        :param Sequence['ImportErrorResponse'] job_errors: List of job level errors.
        """
        pulumi.set(__self__, "file_validations", file_validations)
        pulumi.set(__self__, "job_errors", job_errors)

    @property
    @pulumi.getter(name="fileValidations")
    def file_validations(self) -> Sequence['outputs.FileValidationReportResponse']:
        """
        List of errors found in files.
        """
        return pulumi.get(self, "file_validations")

    @property
    @pulumi.getter(name="jobErrors")
    def job_errors(self) -> Sequence['outputs.ImportErrorResponse']:
        """
        List of job level errors.
        """
        return pulumi.get(self, "job_errors")


@pulumi.output_type
class VirtualMachinePreferencesNetworkCostParametersResponse(dict):
    """
    Parameters that affect network cost estimations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "estimatedEgressTrafficPercentage":
            suggest = "estimated_egress_traffic_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePreferencesNetworkCostParametersResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePreferencesNetworkCostParametersResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePreferencesNetworkCostParametersResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 estimated_egress_traffic_percentage: int):
        """
        Parameters that affect network cost estimations.
        :param int estimated_egress_traffic_percentage: Optional. An estimated percentage of priced outbound traffic (egress traffic) from the measured outbound traffic. Must be in the interval [0, 100].
        """
        pulumi.set(__self__, "estimated_egress_traffic_percentage", estimated_egress_traffic_percentage)

    @property
    @pulumi.getter(name="estimatedEgressTrafficPercentage")
    def estimated_egress_traffic_percentage(self) -> int:
        """
        Optional. An estimated percentage of priced outbound traffic (egress traffic) from the measured outbound traffic. Must be in the interval [0, 100].
        """
        return pulumi.get(self, "estimated_egress_traffic_percentage")


@pulumi.output_type
class VirtualMachinePreferencesResponse(dict):
    """
    VirtualMachinePreferences enables you to create sets of preferences, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitmentPlan":
            suggest = "commitment_plan"
        elif key == "computeEnginePreferences":
            suggest = "compute_engine_preferences"
        elif key == "networkCostParameters":
            suggest = "network_cost_parameters"
        elif key == "regionPreferences":
            suggest = "region_preferences"
        elif key == "sizingOptimizationCustomParameters":
            suggest = "sizing_optimization_custom_parameters"
        elif key == "sizingOptimizationStrategy":
            suggest = "sizing_optimization_strategy"
        elif key == "soleTenancyPreferences":
            suggest = "sole_tenancy_preferences"
        elif key == "targetProduct":
            suggest = "target_product"
        elif key == "vmwareEnginePreferences":
            suggest = "vmware_engine_preferences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commitment_plan: str,
                 compute_engine_preferences: 'outputs.ComputeEnginePreferencesResponse',
                 network_cost_parameters: 'outputs.VirtualMachinePreferencesNetworkCostParametersResponse',
                 region_preferences: 'outputs.RegionPreferencesResponse',
                 sizing_optimization_custom_parameters: 'outputs.VirtualMachinePreferencesSizingOptimizationCustomParametersResponse',
                 sizing_optimization_strategy: str,
                 sole_tenancy_preferences: 'outputs.SoleTenancyPreferencesResponse',
                 target_product: str,
                 vmware_engine_preferences: 'outputs.VmwareEnginePreferencesResponse'):
        """
        VirtualMachinePreferences enables you to create sets of preferences, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
        :param str commitment_plan: Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        :param 'ComputeEnginePreferencesResponse' compute_engine_preferences: Compute Engine preferences concern insights and recommendations for Compute Engine target.
        :param 'VirtualMachinePreferencesNetworkCostParametersResponse' network_cost_parameters: Optional. Parameters that affect network cost estimations. If not set, default values will be used for the parameters.
        :param 'RegionPreferencesResponse' region_preferences: Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with. If PreferenceSet.RegionPreferences is specified, it overrides this field.
        :param 'VirtualMachinePreferencesSizingOptimizationCustomParametersResponse' sizing_optimization_custom_parameters: Optional. Custom data to use for sizing optimizations. Relevant when SizingOptimizationStrategy is set to "custom".
        :param str sizing_optimization_strategy: Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
        :param 'SoleTenancyPreferencesResponse' sole_tenancy_preferences: Preferences concerning Sole Tenant nodes and virtual machines.
        :param str target_product: Target product for assets using this preference set. Specify either target product or business goal, but not both.
        :param 'VmwareEnginePreferencesResponse' vmware_engine_preferences: Preferences concerning insights and recommendations for Google Cloud VMware Engine.
        """
        pulumi.set(__self__, "commitment_plan", commitment_plan)
        pulumi.set(__self__, "compute_engine_preferences", compute_engine_preferences)
        pulumi.set(__self__, "network_cost_parameters", network_cost_parameters)
        pulumi.set(__self__, "region_preferences", region_preferences)
        pulumi.set(__self__, "sizing_optimization_custom_parameters", sizing_optimization_custom_parameters)
        pulumi.set(__self__, "sizing_optimization_strategy", sizing_optimization_strategy)
        pulumi.set(__self__, "sole_tenancy_preferences", sole_tenancy_preferences)
        pulumi.set(__self__, "target_product", target_product)
        pulumi.set(__self__, "vmware_engine_preferences", vmware_engine_preferences)

    @property
    @pulumi.getter(name="commitmentPlan")
    def commitment_plan(self) -> str:
        """
        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        """
        return pulumi.get(self, "commitment_plan")

    @property
    @pulumi.getter(name="computeEnginePreferences")
    def compute_engine_preferences(self) -> 'outputs.ComputeEnginePreferencesResponse':
        """
        Compute Engine preferences concern insights and recommendations for Compute Engine target.
        """
        return pulumi.get(self, "compute_engine_preferences")

    @property
    @pulumi.getter(name="networkCostParameters")
    def network_cost_parameters(self) -> 'outputs.VirtualMachinePreferencesNetworkCostParametersResponse':
        """
        Optional. Parameters that affect network cost estimations. If not set, default values will be used for the parameters.
        """
        return pulumi.get(self, "network_cost_parameters")

    @property
    @pulumi.getter(name="regionPreferences")
    def region_preferences(self) -> 'outputs.RegionPreferencesResponse':
        """
        Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with. If PreferenceSet.RegionPreferences is specified, it overrides this field.
        """
        return pulumi.get(self, "region_preferences")

    @property
    @pulumi.getter(name="sizingOptimizationCustomParameters")
    def sizing_optimization_custom_parameters(self) -> 'outputs.VirtualMachinePreferencesSizingOptimizationCustomParametersResponse':
        """
        Optional. Custom data to use for sizing optimizations. Relevant when SizingOptimizationStrategy is set to "custom".
        """
        return pulumi.get(self, "sizing_optimization_custom_parameters")

    @property
    @pulumi.getter(name="sizingOptimizationStrategy")
    def sizing_optimization_strategy(self) -> str:
        """
        Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
        """
        return pulumi.get(self, "sizing_optimization_strategy")

    @property
    @pulumi.getter(name="soleTenancyPreferences")
    def sole_tenancy_preferences(self) -> 'outputs.SoleTenancyPreferencesResponse':
        """
        Preferences concerning Sole Tenant nodes and virtual machines.
        """
        return pulumi.get(self, "sole_tenancy_preferences")

    @property
    @pulumi.getter(name="targetProduct")
    def target_product(self) -> str:
        """
        Target product for assets using this preference set. Specify either target product or business goal, but not both.
        """
        return pulumi.get(self, "target_product")

    @property
    @pulumi.getter(name="vmwareEnginePreferences")
    def vmware_engine_preferences(self) -> 'outputs.VmwareEnginePreferencesResponse':
        """
        Preferences concerning insights and recommendations for Google Cloud VMware Engine.
        """
        return pulumi.get(self, "vmware_engine_preferences")


@pulumi.output_type
class VirtualMachinePreferencesSizingOptimizationCustomParametersResponse(dict):
    """
    Custom data to use for sizing optimizations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationMethod":
            suggest = "aggregation_method"
        elif key == "cpuUsagePercentage":
            suggest = "cpu_usage_percentage"
        elif key == "memoryUsagePercentage":
            suggest = "memory_usage_percentage"
        elif key == "storageMultiplier":
            suggest = "storage_multiplier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualMachinePreferencesSizingOptimizationCustomParametersResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualMachinePreferencesSizingOptimizationCustomParametersResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualMachinePreferencesSizingOptimizationCustomParametersResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_method: str,
                 cpu_usage_percentage: int,
                 memory_usage_percentage: int,
                 storage_multiplier: float):
        """
        Custom data to use for sizing optimizations.
        :param str aggregation_method: Optional. Type of statistical aggregation of a resource utilization data, on which to base the sizing metrics.
        :param int cpu_usage_percentage: Optional. Desired percentage of CPU usage. Must be in the interval [1, 100] (or 0 for default value).
        :param int memory_usage_percentage: Optional. Desired percentage of memory usage. Must be in the interval [1, 100] (or 0 for default value).
        :param float storage_multiplier: Optional. Desired increase factor of storage, relative to currently used storage. Must be in the interval [1.0, 2.0] (or 0 for default value).
        """
        pulumi.set(__self__, "aggregation_method", aggregation_method)
        pulumi.set(__self__, "cpu_usage_percentage", cpu_usage_percentage)
        pulumi.set(__self__, "memory_usage_percentage", memory_usage_percentage)
        pulumi.set(__self__, "storage_multiplier", storage_multiplier)

    @property
    @pulumi.getter(name="aggregationMethod")
    def aggregation_method(self) -> str:
        """
        Optional. Type of statistical aggregation of a resource utilization data, on which to base the sizing metrics.
        """
        return pulumi.get(self, "aggregation_method")

    @property
    @pulumi.getter(name="cpuUsagePercentage")
    def cpu_usage_percentage(self) -> int:
        """
        Optional. Desired percentage of CPU usage. Must be in the interval [1, 100] (or 0 for default value).
        """
        return pulumi.get(self, "cpu_usage_percentage")

    @property
    @pulumi.getter(name="memoryUsagePercentage")
    def memory_usage_percentage(self) -> int:
        """
        Optional. Desired percentage of memory usage. Must be in the interval [1, 100] (or 0 for default value).
        """
        return pulumi.get(self, "memory_usage_percentage")

    @property
    @pulumi.getter(name="storageMultiplier")
    def storage_multiplier(self) -> float:
        """
        Optional. Desired increase factor of storage, relative to currently used storage. Must be in the interval [1.0, 2.0] (or 0 for default value).
        """
        return pulumi.get(self, "storage_multiplier")


@pulumi.output_type
class VmwareEnginePreferencesResponse(dict):
    """
    The user preferences relating to Google Cloud VMware Engine target platform.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitmentPlan":
            suggest = "commitment_plan"
        elif key == "cpuOvercommitRatio":
            suggest = "cpu_overcommit_ratio"
        elif key == "memoryOvercommitRatio":
            suggest = "memory_overcommit_ratio"
        elif key == "storageDeduplicationCompressionRatio":
            suggest = "storage_deduplication_compression_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareEnginePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareEnginePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareEnginePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commitment_plan: str,
                 cpu_overcommit_ratio: float,
                 memory_overcommit_ratio: float,
                 storage_deduplication_compression_ratio: float):
        """
        The user preferences relating to Google Cloud VMware Engine target platform.
        :param str commitment_plan: Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        :param float cpu_overcommit_ratio: CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
        :param float memory_overcommit_ratio: Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
        :param float storage_deduplication_compression_ratio: The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
        """
        pulumi.set(__self__, "commitment_plan", commitment_plan)
        pulumi.set(__self__, "cpu_overcommit_ratio", cpu_overcommit_ratio)
        pulumi.set(__self__, "memory_overcommit_ratio", memory_overcommit_ratio)
        pulumi.set(__self__, "storage_deduplication_compression_ratio", storage_deduplication_compression_ratio)

    @property
    @pulumi.getter(name="commitmentPlan")
    def commitment_plan(self) -> str:
        """
        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
        """
        return pulumi.get(self, "commitment_plan")

    @property
    @pulumi.getter(name="cpuOvercommitRatio")
    def cpu_overcommit_ratio(self) -> float:
        """
        CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
        """
        return pulumi.get(self, "cpu_overcommit_ratio")

    @property
    @pulumi.getter(name="memoryOvercommitRatio")
    def memory_overcommit_ratio(self) -> float:
        """
        Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
        """
        return pulumi.get(self, "memory_overcommit_ratio")

    @property
    @pulumi.getter(name="storageDeduplicationCompressionRatio")
    def storage_deduplication_compression_ratio(self) -> float:
        """
        The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
        """
        return pulumi.get(self, "storage_deduplication_compression_ratio")


