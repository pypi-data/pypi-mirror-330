# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetReportConfigResult',
    'AwaitableGetReportConfigResult',
    'get_report_config',
    'get_report_config_output',
]

@pulumi.output_type
class GetReportConfigResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, group_preferenceset_assignments=None, name=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if group_preferenceset_assignments and not isinstance(group_preferenceset_assignments, list):
            raise TypeError("Expected argument 'group_preferenceset_assignments' to be a list")
        pulumi.set(__self__, "group_preferenceset_assignments", group_preferenceset_assignments)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Free-text description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name. Maximum length is 63 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupPreferencesetAssignments")
    def group_preferenceset_assignments(self) -> Sequence['outputs.ReportConfigGroupPreferenceSetAssignmentResponse']:
        """
        Collection of combinations of groups and preference sets.
        """
        return pulumi.get(self, "group_preferenceset_assignments")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when the resource was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetReportConfigResult(GetReportConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReportConfigResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            group_preferenceset_assignments=self.group_preferenceset_assignments,
            name=self.name,
            update_time=self.update_time)


def get_report_config(location: Optional[str] = None,
                      project: Optional[str] = None,
                      report_config_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReportConfigResult:
    """
    Gets details of a single ReportConfig.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['reportConfigId'] = report_config_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1alpha1:getReportConfig', __args__, opts=opts, typ=GetReportConfigResult).value

    return AwaitableGetReportConfigResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        group_preferenceset_assignments=pulumi.get(__ret__, 'group_preferenceset_assignments'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_report_config)
def get_report_config_output(location: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             report_config_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReportConfigResult]:
    """
    Gets details of a single ReportConfig.
    """
    ...
