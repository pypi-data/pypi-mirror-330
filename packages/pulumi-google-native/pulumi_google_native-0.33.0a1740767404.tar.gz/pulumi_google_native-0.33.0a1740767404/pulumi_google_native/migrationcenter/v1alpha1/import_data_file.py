# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ImportDataFileArgs', 'ImportDataFile']

@pulumi.input_type
class ImportDataFileArgs:
    def __init__(__self__, *,
                 format: pulumi.Input['ImportDataFileFormat'],
                 import_data_file_id: pulumi.Input[str],
                 import_job_id: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 upload_file_info: Optional[pulumi.Input['UploadFileInfoArgs']] = None):
        """
        The set of arguments for constructing a ImportDataFile resource.
        :param pulumi.Input['ImportDataFileFormat'] format: The payload format.
        :param pulumi.Input[str] import_data_file_id: Required. The ID of the new data file.
        :param pulumi.Input[str] display_name: Optional. User-friendly display name. Maximum length is 256 characters.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input['UploadFileInfoArgs'] upload_file_info: Information about a file that is uploaded to a storage service.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "import_data_file_id", import_data_file_id)
        pulumi.set(__self__, "import_job_id", import_job_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if upload_file_info is not None:
            pulumi.set(__self__, "upload_file_info", upload_file_info)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['ImportDataFileFormat']:
        """
        The payload format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['ImportDataFileFormat']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="importDataFileId")
    def import_data_file_id(self) -> pulumi.Input[str]:
        """
        Required. The ID of the new data file.
        """
        return pulumi.get(self, "import_data_file_id")

    @import_data_file_id.setter
    def import_data_file_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "import_data_file_id", value)

    @property
    @pulumi.getter(name="importJobId")
    def import_job_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "import_job_id")

    @import_job_id.setter
    def import_job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "import_job_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-friendly display name. Maximum length is 256 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="uploadFileInfo")
    def upload_file_info(self) -> Optional[pulumi.Input['UploadFileInfoArgs']]:
        """
        Information about a file that is uploaded to a storage service.
        """
        return pulumi.get(self, "upload_file_info")

    @upload_file_info.setter
    def upload_file_info(self, value: Optional[pulumi.Input['UploadFileInfoArgs']]):
        pulumi.set(self, "upload_file_info", value)


class ImportDataFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input['ImportDataFileFormat']] = None,
                 import_data_file_id: Optional[pulumi.Input[str]] = None,
                 import_job_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 upload_file_info: Optional[pulumi.Input[pulumi.InputType['UploadFileInfoArgs']]] = None,
                 __props__=None):
        """
        Creates an import data file.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: Optional. User-friendly display name. Maximum length is 256 characters.
        :param pulumi.Input['ImportDataFileFormat'] format: The payload format.
        :param pulumi.Input[str] import_data_file_id: Required. The ID of the new data file.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['UploadFileInfoArgs']] upload_file_info: Information about a file that is uploaded to a storage service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImportDataFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an import data file.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ImportDataFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImportDataFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input['ImportDataFileFormat']] = None,
                 import_data_file_id: Optional[pulumi.Input[str]] = None,
                 import_job_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 upload_file_info: Optional[pulumi.Input[pulumi.InputType['UploadFileInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImportDataFileArgs.__new__(ImportDataFileArgs)

            __props__.__dict__["display_name"] = display_name
            if format is None and not opts.urn:
                raise TypeError("Missing required property 'format'")
            __props__.__dict__["format"] = format
            if import_data_file_id is None and not opts.urn:
                raise TypeError("Missing required property 'import_data_file_id'")
            __props__.__dict__["import_data_file_id"] = import_data_file_id
            if import_job_id is None and not opts.urn:
                raise TypeError("Missing required property 'import_job_id'")
            __props__.__dict__["import_job_id"] = import_job_id
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["upload_file_info"] = upload_file_info
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["importDataFileId", "importJobId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ImportDataFile, __self__).__init__(
            'google-native:migrationcenter/v1alpha1:ImportDataFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ImportDataFile':
        """
        Get an existing ImportDataFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ImportDataFileArgs.__new__(ImportDataFileArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["format"] = None
        __props__.__dict__["import_data_file_id"] = None
        __props__.__dict__["import_job_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["upload_file_info"] = None
        return ImportDataFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The timestamp when the file was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Optional. User-friendly display name. Maximum length is 256 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        The payload format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="importDataFileId")
    def import_data_file_id(self) -> pulumi.Output[str]:
        """
        Required. The ID of the new data file.
        """
        return pulumi.get(self, "import_data_file_id")

    @property
    @pulumi.getter(name="importJobId")
    def import_job_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "import_job_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the import data file.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="uploadFileInfo")
    def upload_file_info(self) -> pulumi.Output['outputs.UploadFileInfoResponse']:
        """
        Information about a file that is uploaded to a storage service.
        """
        return pulumi.get(self, "upload_file_info")

