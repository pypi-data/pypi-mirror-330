# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetImportJobResult',
    'AwaitableGetImportJobResult',
    'get_import_job',
    'get_import_job_output',
]

@pulumi.output_type
class GetImportJobResult:
    def __init__(__self__, asset_source=None, complete_time=None, create_time=None, display_name=None, execution_report=None, gcs_payload=None, inline_payload=None, labels=None, name=None, state=None, update_time=None, validation_report=None):
        if asset_source and not isinstance(asset_source, str):
            raise TypeError("Expected argument 'asset_source' to be a str")
        pulumi.set(__self__, "asset_source", asset_source)
        if complete_time and not isinstance(complete_time, str):
            raise TypeError("Expected argument 'complete_time' to be a str")
        pulumi.set(__self__, "complete_time", complete_time)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if execution_report and not isinstance(execution_report, dict):
            raise TypeError("Expected argument 'execution_report' to be a dict")
        pulumi.set(__self__, "execution_report", execution_report)
        if gcs_payload and not isinstance(gcs_payload, dict):
            raise TypeError("Expected argument 'gcs_payload' to be a dict")
        pulumi.set(__self__, "gcs_payload", gcs_payload)
        if inline_payload and not isinstance(inline_payload, dict):
            raise TypeError("Expected argument 'inline_payload' to be a dict")
        pulumi.set(__self__, "inline_payload", inline_payload)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if validation_report and not isinstance(validation_report, dict):
            raise TypeError("Expected argument 'validation_report' to be a dict")
        pulumi.set(__self__, "validation_report", validation_report)

    @property
    @pulumi.getter(name="assetSource")
    def asset_source(self) -> str:
        """
        Reference to a source.
        """
        return pulumi.get(self, "asset_source")

    @property
    @pulumi.getter(name="completeTime")
    def complete_time(self) -> str:
        """
        The timestamp when the import job was completed.
        """
        return pulumi.get(self, "complete_time")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the import job was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name. Maximum length is 63 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionReport")
    def execution_report(self) -> 'outputs.ExecutionReportResponse':
        """
        The report with the results of running the import job.
        """
        return pulumi.get(self, "execution_report")

    @property
    @pulumi.getter(name="gcsPayload")
    def gcs_payload(self) -> 'outputs.GCSPayloadInfoResponse':
        """
        The payload is in Google Cloud Storage.
        """
        return pulumi.get(self, "gcs_payload")

    @property
    @pulumi.getter(name="inlinePayload")
    def inline_payload(self) -> 'outputs.InlinePayloadInfoResponse':
        """
        The payload is included in the request, mainly used for small import jobs.
        """
        return pulumi.get(self, "inline_payload")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels as key value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The full name of the import job.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when the import job was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="validationReport")
    def validation_report(self) -> 'outputs.ValidationReportResponse':
        """
        The report with the validation results of the import job.
        """
        return pulumi.get(self, "validation_report")


class AwaitableGetImportJobResult(GetImportJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportJobResult(
            asset_source=self.asset_source,
            complete_time=self.complete_time,
            create_time=self.create_time,
            display_name=self.display_name,
            execution_report=self.execution_report,
            gcs_payload=self.gcs_payload,
            inline_payload=self.inline_payload,
            labels=self.labels,
            name=self.name,
            state=self.state,
            update_time=self.update_time,
            validation_report=self.validation_report)


def get_import_job(import_job_id: Optional[str] = None,
                   location: Optional[str] = None,
                   project: Optional[str] = None,
                   view: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportJobResult:
    """
    Gets the details of an import job.
    """
    __args__ = dict()
    __args__['importJobId'] = import_job_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1alpha1:getImportJob', __args__, opts=opts, typ=GetImportJobResult).value

    return AwaitableGetImportJobResult(
        asset_source=pulumi.get(__ret__, 'asset_source'),
        complete_time=pulumi.get(__ret__, 'complete_time'),
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        execution_report=pulumi.get(__ret__, 'execution_report'),
        gcs_payload=pulumi.get(__ret__, 'gcs_payload'),
        inline_payload=pulumi.get(__ret__, 'inline_payload'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'),
        validation_report=pulumi.get(__ret__, 'validation_report'))


@_utilities.lift_output_func(get_import_job)
def get_import_job_output(import_job_id: Optional[pulumi.Input[str]] = None,
                          location: Optional[pulumi.Input[str]] = None,
                          project: Optional[pulumi.Input[Optional[str]]] = None,
                          view: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportJobResult]:
    """
    Gets the details of an import job.
    """
    ...
