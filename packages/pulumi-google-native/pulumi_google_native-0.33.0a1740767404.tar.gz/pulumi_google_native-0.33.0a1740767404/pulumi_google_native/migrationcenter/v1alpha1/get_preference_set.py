# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPreferenceSetResult',
    'AwaitableGetPreferenceSetResult',
    'get_preference_set',
    'get_preference_set_output',
]

@pulumi.output_type
class GetPreferenceSetResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, name=None, update_time=None, virtual_machine_preferences=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if virtual_machine_preferences and not isinstance(virtual_machine_preferences, dict):
            raise TypeError("Expected argument 'virtual_machine_preferences' to be a dict")
        pulumi.set(__self__, "virtual_machine_preferences", virtual_machine_preferences)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the preference set was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the preference set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name. Maximum length is 63 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the preference set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when the preference set was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="virtualMachinePreferences")
    def virtual_machine_preferences(self) -> 'outputs.VirtualMachinePreferencesResponse':
        """
        A set of preferences that applies to all virtual machines in the context.
        """
        return pulumi.get(self, "virtual_machine_preferences")


class AwaitableGetPreferenceSetResult(GetPreferenceSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPreferenceSetResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            name=self.name,
            update_time=self.update_time,
            virtual_machine_preferences=self.virtual_machine_preferences)


def get_preference_set(location: Optional[str] = None,
                       preference_set_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPreferenceSetResult:
    """
    Gets the details of a preference set.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['preferenceSetId'] = preference_set_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1alpha1:getPreferenceSet', __args__, opts=opts, typ=GetPreferenceSetResult).value

    return AwaitableGetPreferenceSetResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'),
        virtual_machine_preferences=pulumi.get(__ret__, 'virtual_machine_preferences'))


@_utilities.lift_output_func(get_preference_set)
def get_preference_set_output(location: Optional[pulumi.Input[str]] = None,
                              preference_set_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPreferenceSetResult]:
    """
    Gets the details of a preference set.
    """
    ...
