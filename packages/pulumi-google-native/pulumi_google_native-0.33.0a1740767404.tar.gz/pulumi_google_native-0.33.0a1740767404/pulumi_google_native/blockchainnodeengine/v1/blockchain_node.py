# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['BlockchainNodeArgs', 'BlockchainNode']

@pulumi.input_type
class BlockchainNodeArgs:
    def __init__(__self__, *,
                 blockchain_node_id: pulumi.Input[str],
                 blockchain_type: Optional[pulumi.Input['BlockchainNodeBlockchainType']] = None,
                 ethereum_details: Optional[pulumi.Input['EthereumDetailsArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 private_service_connect_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BlockchainNode resource.
        :param pulumi.Input[str] blockchain_node_id: Required. ID of the requesting object.
        :param pulumi.Input['BlockchainNodeBlockchainType'] blockchain_type: Immutable. The blockchain type of the node.
        :param pulumi.Input['EthereumDetailsArgs'] ethereum_details: Ethereum-specific blockchain node details.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-provided key-value pairs.
        :param pulumi.Input[bool] private_service_connect_enabled: Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        pulumi.set(__self__, "blockchain_node_id", blockchain_node_id)
        if blockchain_type is not None:
            pulumi.set(__self__, "blockchain_type", blockchain_type)
        if ethereum_details is not None:
            pulumi.set(__self__, "ethereum_details", ethereum_details)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if private_service_connect_enabled is not None:
            pulumi.set(__self__, "private_service_connect_enabled", private_service_connect_enabled)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="blockchainNodeId")
    def blockchain_node_id(self) -> pulumi.Input[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "blockchain_node_id")

    @blockchain_node_id.setter
    def blockchain_node_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "blockchain_node_id", value)

    @property
    @pulumi.getter(name="blockchainType")
    def blockchain_type(self) -> Optional[pulumi.Input['BlockchainNodeBlockchainType']]:
        """
        Immutable. The blockchain type of the node.
        """
        return pulumi.get(self, "blockchain_type")

    @blockchain_type.setter
    def blockchain_type(self, value: Optional[pulumi.Input['BlockchainNodeBlockchainType']]):
        pulumi.set(self, "blockchain_type", value)

    @property
    @pulumi.getter(name="ethereumDetails")
    def ethereum_details(self) -> Optional[pulumi.Input['EthereumDetailsArgs']]:
        """
        Ethereum-specific blockchain node details.
        """
        return pulumi.get(self, "ethereum_details")

    @ethereum_details.setter
    def ethereum_details(self, value: Optional[pulumi.Input['EthereumDetailsArgs']]):
        pulumi.set(self, "ethereum_details", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-provided key-value pairs.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="privateServiceConnectEnabled")
    def private_service_connect_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        """
        return pulumi.get(self, "private_service_connect_enabled")

    @private_service_connect_enabled.setter
    def private_service_connect_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_service_connect_enabled", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class BlockchainNode(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blockchain_node_id: Optional[pulumi.Input[str]] = None,
                 blockchain_type: Optional[pulumi.Input['BlockchainNodeBlockchainType']] = None,
                 ethereum_details: Optional[pulumi.Input[pulumi.InputType['EthereumDetailsArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 private_service_connect_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new blockchain node in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] blockchain_node_id: Required. ID of the requesting object.
        :param pulumi.Input['BlockchainNodeBlockchainType'] blockchain_type: Immutable. The blockchain type of the node.
        :param pulumi.Input[pulumi.InputType['EthereumDetailsArgs']] ethereum_details: Ethereum-specific blockchain node details.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-provided key-value pairs.
        :param pulumi.Input[bool] private_service_connect_enabled: Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlockchainNodeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new blockchain node in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param BlockchainNodeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlockchainNodeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blockchain_node_id: Optional[pulumi.Input[str]] = None,
                 blockchain_type: Optional[pulumi.Input['BlockchainNodeBlockchainType']] = None,
                 ethereum_details: Optional[pulumi.Input[pulumi.InputType['EthereumDetailsArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 private_service_connect_enabled: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlockchainNodeArgs.__new__(BlockchainNodeArgs)

            if blockchain_node_id is None and not opts.urn:
                raise TypeError("Missing required property 'blockchain_node_id'")
            __props__.__dict__["blockchain_node_id"] = blockchain_node_id
            __props__.__dict__["blockchain_type"] = blockchain_type
            __props__.__dict__["ethereum_details"] = ethereum_details
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["private_service_connect_enabled"] = private_service_connect_enabled
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["connection_info"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["blockchainNodeId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BlockchainNode, __self__).__init__(
            'google-native:blockchainnodeengine/v1:BlockchainNode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BlockchainNode':
        """
        Get an existing BlockchainNode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BlockchainNodeArgs.__new__(BlockchainNodeArgs)

        __props__.__dict__["blockchain_node_id"] = None
        __props__.__dict__["blockchain_type"] = None
        __props__.__dict__["connection_info"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["ethereum_details"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["private_service_connect_enabled"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["update_time"] = None
        return BlockchainNode(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blockchainNodeId")
    def blockchain_node_id(self) -> pulumi.Output[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "blockchain_node_id")

    @property
    @pulumi.getter(name="blockchainType")
    def blockchain_type(self) -> pulumi.Output[str]:
        """
        Immutable. The blockchain type of the node.
        """
        return pulumi.get(self, "blockchain_type")

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> pulumi.Output['outputs.ConnectionInfoResponse']:
        """
        The connection information used to interact with a blockchain node.
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The timestamp at which the blockchain node was first created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="ethereumDetails")
    def ethereum_details(self) -> pulumi.Output['outputs.EthereumDetailsResponse']:
        """
        Ethereum-specific blockchain node details.
        """
        return pulumi.get(self, "ethereum_details")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        User-provided key-value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateServiceConnectEnabled")
    def private_service_connect_enabled(self) -> pulumi.Output[bool]:
        """
        Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        """
        return pulumi.get(self, "private_service_connect_enabled")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        A status representing the state of the node.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The timestamp at which the blockchain node was last updated.
        """
        return pulumi.get(self, "update_time")

