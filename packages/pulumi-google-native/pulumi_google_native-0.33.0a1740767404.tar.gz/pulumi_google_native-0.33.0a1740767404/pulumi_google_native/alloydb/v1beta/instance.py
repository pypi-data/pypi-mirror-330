# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 instance_type: pulumi.Input['InstanceInstanceType'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 availability_type: Optional[pulumi.Input['InstanceAvailabilityType']] = None,
                 client_connection_config: Optional[pulumi.Input['ClientConnectionConfigArgs']] = None,
                 database_flags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 gce_zone: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 machine_config: Optional[pulumi.Input['MachineConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_insights_config: Optional[pulumi.Input['QueryInsightsInstanceConfigArgs']] = None,
                 read_pool_config: Optional[pulumi.Input['ReadPoolConfigArgs']] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input['UpdatePolicyArgs']] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] instance_id: Required. ID of the requesting object.
        :param pulumi.Input['InstanceInstanceType'] instance_type: The type of the instance. Specified at creation time.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        :param pulumi.Input['InstanceAvailabilityType'] availability_type: Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
        :param pulumi.Input['ClientConnectionConfigArgs'] client_connection_config: Optional. Client connection specific configurations
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_flags: Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Instance.
        :param pulumi.Input[str] etag: For Resource freshness validation (https://google.aip.dev/154)
        :param pulumi.Input[str] gce_zone: The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs
        :param pulumi.Input['MachineConfigArgs'] machine_config: Configurations for the machines that host the underlying database engine.
        :param pulumi.Input['QueryInsightsInstanceConfigArgs'] query_insights_config: Configuration for query insights.
        :param pulumi.Input['ReadPoolConfigArgs'] read_pool_config: Read pool instance configuration. This is required if the value of instanceType is READ_POOL.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input['UpdatePolicyArgs'] update_policy: Update policy that will be applied during instance update. This field is not persisted when you update the instance. To use a non-default update policy, you must specify explicitly specify the value in each update request.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if availability_type is not None:
            pulumi.set(__self__, "availability_type", availability_type)
        if client_connection_config is not None:
            pulumi.set(__self__, "client_connection_config", client_connection_config)
        if database_flags is not None:
            pulumi.set(__self__, "database_flags", database_flags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if gce_zone is not None:
            pulumi.set(__self__, "gce_zone", gce_zone)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if machine_config is not None:
            pulumi.set(__self__, "machine_config", machine_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if query_insights_config is not None:
            pulumi.set(__self__, "query_insights_config", query_insights_config)
        if read_pool_config is not None:
            pulumi.set(__self__, "read_pool_config", read_pool_config)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if update_policy is not None:
            pulumi.set(__self__, "update_policy", update_policy)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input['InstanceInstanceType']:
        """
        The type of the instance. Specified at creation time.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input['InstanceInstanceType']):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> Optional[pulumi.Input['InstanceAvailabilityType']]:
        """
        Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
        """
        return pulumi.get(self, "availability_type")

    @availability_type.setter
    def availability_type(self, value: Optional[pulumi.Input['InstanceAvailabilityType']]):
        pulumi.set(self, "availability_type", value)

    @property
    @pulumi.getter(name="clientConnectionConfig")
    def client_connection_config(self) -> Optional[pulumi.Input['ClientConnectionConfigArgs']]:
        """
        Optional. Client connection specific configurations
        """
        return pulumi.get(self, "client_connection_config")

    @client_connection_config.setter
    def client_connection_config(self, value: Optional[pulumi.Input['ClientConnectionConfigArgs']]):
        pulumi.set(self, "client_connection_config", value)

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
        """
        return pulumi.get(self, "database_flags")

    @database_flags.setter
    def database_flags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_flags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-settable and human-readable display name for the Instance.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="gceZone")
    def gce_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
        """
        return pulumi.get(self, "gce_zone")

    @gce_zone.setter
    def gce_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gce_zone", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> Optional[pulumi.Input['MachineConfigArgs']]:
        """
        Configurations for the machines that host the underlying database engine.
        """
        return pulumi.get(self, "machine_config")

    @machine_config.setter
    def machine_config(self, value: Optional[pulumi.Input['MachineConfigArgs']]):
        pulumi.set(self, "machine_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="queryInsightsConfig")
    def query_insights_config(self) -> Optional[pulumi.Input['QueryInsightsInstanceConfigArgs']]:
        """
        Configuration for query insights.
        """
        return pulumi.get(self, "query_insights_config")

    @query_insights_config.setter
    def query_insights_config(self, value: Optional[pulumi.Input['QueryInsightsInstanceConfigArgs']]):
        pulumi.set(self, "query_insights_config", value)

    @property
    @pulumi.getter(name="readPoolConfig")
    def read_pool_config(self) -> Optional[pulumi.Input['ReadPoolConfigArgs']]:
        """
        Read pool instance configuration. This is required if the value of instanceType is READ_POOL.
        """
        return pulumi.get(self, "read_pool_config")

    @read_pool_config.setter
    def read_pool_config(self, value: Optional[pulumi.Input['ReadPoolConfigArgs']]):
        pulumi.set(self, "read_pool_config", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> Optional[pulumi.Input['UpdatePolicyArgs']]:
        """
        Update policy that will be applied during instance update. This field is not persisted when you update the instance. To use a non-default update policy, you must specify explicitly specify the value in each update request.
        """
        return pulumi.get(self, "update_policy")

    @update_policy.setter
    def update_policy(self, value: Optional[pulumi.Input['UpdatePolicyArgs']]):
        pulumi.set(self, "update_policy", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 availability_type: Optional[pulumi.Input['InstanceAvailabilityType']] = None,
                 client_connection_config: Optional[pulumi.Input[pulumi.InputType['ClientConnectionConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 database_flags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 gce_zone: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input['InstanceInstanceType']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 machine_config: Optional[pulumi.Input[pulumi.InputType['MachineConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_insights_config: Optional[pulumi.Input[pulumi.InputType['QueryInsightsInstanceConfigArgs']]] = None,
                 read_pool_config: Optional[pulumi.Input[pulumi.InputType['ReadPoolConfigArgs']]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[pulumi.InputType['UpdatePolicyArgs']]] = None,
                 __props__=None):
        """
        Creates a new Instance in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        :param pulumi.Input['InstanceAvailabilityType'] availability_type: Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
        :param pulumi.Input[pulumi.InputType['ClientConnectionConfigArgs']] client_connection_config: Optional. Client connection specific configurations
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_flags: Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Instance.
        :param pulumi.Input[str] etag: For Resource freshness validation (https://google.aip.dev/154)
        :param pulumi.Input[str] gce_zone: The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
        :param pulumi.Input[str] instance_id: Required. ID of the requesting object.
        :param pulumi.Input['InstanceInstanceType'] instance_type: The type of the instance. Specified at creation time.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs
        :param pulumi.Input[pulumi.InputType['MachineConfigArgs']] machine_config: Configurations for the machines that host the underlying database engine.
        :param pulumi.Input[pulumi.InputType['QueryInsightsInstanceConfigArgs']] query_insights_config: Configuration for query insights.
        :param pulumi.Input[pulumi.InputType['ReadPoolConfigArgs']] read_pool_config: Read pool instance configuration. This is required if the value of instanceType is READ_POOL.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['UpdatePolicyArgs']] update_policy: Update policy that will be applied during instance update. This field is not persisted when you update the instance. To use a non-default update policy, you must specify explicitly specify the value in each update request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new Instance in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 availability_type: Optional[pulumi.Input['InstanceAvailabilityType']] = None,
                 client_connection_config: Optional[pulumi.Input[pulumi.InputType['ClientConnectionConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 database_flags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 gce_zone: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input['InstanceInstanceType']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 machine_config: Optional[pulumi.Input[pulumi.InputType['MachineConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 query_insights_config: Optional[pulumi.Input[pulumi.InputType['QueryInsightsInstanceConfigArgs']]] = None,
                 read_pool_config: Optional[pulumi.Input[pulumi.InputType['ReadPoolConfigArgs']]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 update_policy: Optional[pulumi.Input[pulumi.InputType['UpdatePolicyArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["availability_type"] = availability_type
            __props__.__dict__["client_connection_config"] = client_connection_config
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["database_flags"] = database_flags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["etag"] = etag
            __props__.__dict__["gce_zone"] = gce_zone
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["machine_config"] = machine_config
            __props__.__dict__["project"] = project
            __props__.__dict__["query_insights_config"] = query_insights_config
            __props__.__dict__["read_pool_config"] = read_pool_config
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["update_policy"] = update_policy
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["writable_node"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["clusterId", "instanceId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Instance, __self__).__init__(
            'google-native:alloydb/v1beta:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InstanceArgs.__new__(InstanceArgs)

        __props__.__dict__["annotations"] = None
        __props__.__dict__["availability_type"] = None
        __props__.__dict__["client_connection_config"] = None
        __props__.__dict__["cluster_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["database_flags"] = None
        __props__.__dict__["delete_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["gce_zone"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["instance_type"] = None
        __props__.__dict__["ip_address"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["machine_config"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["nodes"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["query_insights_config"] = None
        __props__.__dict__["read_pool_config"] = None
        __props__.__dict__["reconciling"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["uid"] = None
        __props__.__dict__["update_policy"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["writable_node"] = None
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> pulumi.Output[str]:
        """
        Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
        """
        return pulumi.get(self, "availability_type")

    @property
    @pulumi.getter(name="clientConnectionConfig")
    def client_connection_config(self) -> pulumi.Output['outputs.ClientConnectionConfigResponse']:
        """
        Optional. Client connection specific configurations
        """
        return pulumi.get(self, "client_connection_config")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
        """
        return pulumi.get(self, "database_flags")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        Delete time stamp
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        User-settable and human-readable display name for the Instance.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="gceZone")
    def gce_zone(self) -> pulumi.Output[str]:
        """
        The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
        """
        return pulumi.get(self, "gce_zone")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        The type of the instance. Specified at creation time.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        The IP address for the Instance. This is the connection endpoint for an end-user application.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> pulumi.Output['outputs.MachineConfigResponse']:
        """
        Configurations for the machines that host the underlying database engine.
        """
        return pulumi.get(self, "machine_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.NodeResponse']]:
        """
        List of available read-only VMs in this instance, including the standby for a PRIMARY instance.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="queryInsightsConfig")
    def query_insights_config(self) -> pulumi.Output['outputs.QueryInsightsInstanceConfigResponse']:
        """
        Configuration for query insights.
        """
        return pulumi.get(self, "query_insights_config")

    @property
    @pulumi.getter(name="readPoolConfig")
    def read_pool_config(self) -> pulumi.Output['outputs.ReadPoolConfigResponse']:
        """
        Read pool instance configuration. This is required if the value of instanceType is READ_POOL.
        """
        return pulumi.get(self, "read_pool_config")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current serving state of the instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> pulumi.Output['outputs.UpdatePolicyResponse']:
        """
        Update policy that will be applied during instance update. This field is not persisted when you update the instance. To use a non-default update policy, you must specify explicitly specify the value in each update request.
        """
        return pulumi.get(self, "update_policy")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="writableNode")
    def writable_node(self) -> pulumi.Output['outputs.NodeResponse']:
        """
        This is set for the read-write VM of the PRIMARY instance only.
        """
        return pulumi.get(self, "writable_node")

