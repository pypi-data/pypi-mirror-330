# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    def __init__(__self__, annotations=None, availability_type=None, client_connection_config=None, create_time=None, database_flags=None, delete_time=None, display_name=None, etag=None, gce_zone=None, instance_type=None, ip_address=None, labels=None, machine_config=None, name=None, nodes=None, query_insights_config=None, read_pool_config=None, reconciling=None, satisfies_pzs=None, state=None, uid=None, update_policy=None, update_time=None, writable_node=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if availability_type and not isinstance(availability_type, str):
            raise TypeError("Expected argument 'availability_type' to be a str")
        pulumi.set(__self__, "availability_type", availability_type)
        if client_connection_config and not isinstance(client_connection_config, dict):
            raise TypeError("Expected argument 'client_connection_config' to be a dict")
        pulumi.set(__self__, "client_connection_config", client_connection_config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if database_flags and not isinstance(database_flags, dict):
            raise TypeError("Expected argument 'database_flags' to be a dict")
        pulumi.set(__self__, "database_flags", database_flags)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if gce_zone and not isinstance(gce_zone, str):
            raise TypeError("Expected argument 'gce_zone' to be a str")
        pulumi.set(__self__, "gce_zone", gce_zone)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if machine_config and not isinstance(machine_config, dict):
            raise TypeError("Expected argument 'machine_config' to be a dict")
        pulumi.set(__self__, "machine_config", machine_config)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if query_insights_config and not isinstance(query_insights_config, dict):
            raise TypeError("Expected argument 'query_insights_config' to be a dict")
        pulumi.set(__self__, "query_insights_config", query_insights_config)
        if read_pool_config and not isinstance(read_pool_config, dict):
            raise TypeError("Expected argument 'read_pool_config' to be a dict")
        pulumi.set(__self__, "read_pool_config", read_pool_config)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if satisfies_pzs and not isinstance(satisfies_pzs, bool):
            raise TypeError("Expected argument 'satisfies_pzs' to be a bool")
        pulumi.set(__self__, "satisfies_pzs", satisfies_pzs)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_policy and not isinstance(update_policy, dict):
            raise TypeError("Expected argument 'update_policy' to be a dict")
        pulumi.set(__self__, "update_policy", update_policy)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if writable_node and not isinstance(writable_node, dict):
            raise TypeError("Expected argument 'writable_node' to be a dict")
        pulumi.set(__self__, "writable_node", writable_node)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> str:
        """
        Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
        """
        return pulumi.get(self, "availability_type")

    @property
    @pulumi.getter(name="clientConnectionConfig")
    def client_connection_config(self) -> 'outputs.ClientConnectionConfigResponse':
        """
        Optional. Client connection specific configurations
        """
        return pulumi.get(self, "client_connection_config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Mapping[str, str]:
        """
        Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
        """
        return pulumi.get(self, "database_flags")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        Delete time stamp
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-settable and human-readable display name for the Instance.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="gceZone")
    def gce_zone(self) -> str:
        """
        The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
        """
        return pulumi.get(self, "gce_zone")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The type of the instance. Specified at creation time.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The IP address for the Instance. This is the connection endpoint for an end-user application.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> 'outputs.MachineConfigResponse':
        """
        Configurations for the machines that host the underlying database engine.
        """
        return pulumi.get(self, "machine_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.NodeResponse']:
        """
        List of available read-only VMs in this instance, including the standby for a PRIMARY instance.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="queryInsightsConfig")
    def query_insights_config(self) -> 'outputs.QueryInsightsInstanceConfigResponse':
        """
        Configuration for query insights.
        """
        return pulumi.get(self, "query_insights_config")

    @property
    @pulumi.getter(name="readPoolConfig")
    def read_pool_config(self) -> 'outputs.ReadPoolConfigResponse':
        """
        Read pool instance configuration. This is required if the value of instanceType is READ_POOL.
        """
        return pulumi.get(self, "read_pool_config")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="satisfiesPzs")
    def satisfies_pzs(self) -> bool:
        """
        Reserved for future use.
        """
        return pulumi.get(self, "satisfies_pzs")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current serving state of the instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updatePolicy")
    def update_policy(self) -> 'outputs.UpdatePolicyResponse':
        """
        Update policy that will be applied during instance update. This field is not persisted when you update the instance. To use a non-default update policy, you must specify explicitly specify the value in each update request.
        """
        return pulumi.get(self, "update_policy")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="writableNode")
    def writable_node(self) -> 'outputs.NodeResponse':
        """
        This is set for the read-write VM of the PRIMARY instance only.
        """
        return pulumi.get(self, "writable_node")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            annotations=self.annotations,
            availability_type=self.availability_type,
            client_connection_config=self.client_connection_config,
            create_time=self.create_time,
            database_flags=self.database_flags,
            delete_time=self.delete_time,
            display_name=self.display_name,
            etag=self.etag,
            gce_zone=self.gce_zone,
            instance_type=self.instance_type,
            ip_address=self.ip_address,
            labels=self.labels,
            machine_config=self.machine_config,
            name=self.name,
            nodes=self.nodes,
            query_insights_config=self.query_insights_config,
            read_pool_config=self.read_pool_config,
            reconciling=self.reconciling,
            satisfies_pzs=self.satisfies_pzs,
            state=self.state,
            uid=self.uid,
            update_policy=self.update_policy,
            update_time=self.update_time,
            writable_node=self.writable_node)


def get_instance(cluster_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 location: Optional[str] = None,
                 project: Optional[str] = None,
                 view: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Gets details of a single Instance.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:alloydb/v1alpha:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        availability_type=pulumi.get(__ret__, 'availability_type'),
        client_connection_config=pulumi.get(__ret__, 'client_connection_config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        database_flags=pulumi.get(__ret__, 'database_flags'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        gce_zone=pulumi.get(__ret__, 'gce_zone'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        labels=pulumi.get(__ret__, 'labels'),
        machine_config=pulumi.get(__ret__, 'machine_config'),
        name=pulumi.get(__ret__, 'name'),
        nodes=pulumi.get(__ret__, 'nodes'),
        query_insights_config=pulumi.get(__ret__, 'query_insights_config'),
        read_pool_config=pulumi.get(__ret__, 'read_pool_config'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        satisfies_pzs=pulumi.get(__ret__, 'satisfies_pzs'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'),
        update_policy=pulumi.get(__ret__, 'update_policy'),
        update_time=pulumi.get(__ret__, 'update_time'),
        writable_node=pulumi.get(__ret__, 'writable_node'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(cluster_id: Optional[pulumi.Input[str]] = None,
                        instance_id: Optional[pulumi.Input[str]] = None,
                        location: Optional[pulumi.Input[str]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        view: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Gets details of a single Instance.
    """
    ...
