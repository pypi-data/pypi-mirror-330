# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPipelineJobResult',
    'AwaitableGetPipelineJobResult',
    'get_pipeline_job',
    'get_pipeline_job_output',
]

@pulumi.output_type
class GetPipelineJobResult:
    def __init__(__self__, create_time=None, display_name=None, encryption_spec=None, end_time=None, error=None, job_detail=None, labels=None, name=None, network=None, pipeline_spec=None, reserved_ip_ranges=None, runtime_config=None, schedule_name=None, service_account=None, start_time=None, state=None, template_metadata=None, template_uri=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if job_detail and not isinstance(job_detail, dict):
            raise TypeError("Expected argument 'job_detail' to be a dict")
        pulumi.set(__self__, "job_detail", job_detail)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if pipeline_spec and not isinstance(pipeline_spec, dict):
            raise TypeError("Expected argument 'pipeline_spec' to be a dict")
        pulumi.set(__self__, "pipeline_spec", pipeline_spec)
        if reserved_ip_ranges and not isinstance(reserved_ip_ranges, list):
            raise TypeError("Expected argument 'reserved_ip_ranges' to be a list")
        pulumi.set(__self__, "reserved_ip_ranges", reserved_ip_ranges)
        if runtime_config and not isinstance(runtime_config, dict):
            raise TypeError("Expected argument 'runtime_config' to be a dict")
        pulumi.set(__self__, "runtime_config", runtime_config)
        if schedule_name and not isinstance(schedule_name, str):
            raise TypeError("Expected argument 'schedule_name' to be a str")
        pulumi.set(__self__, "schedule_name", schedule_name)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if template_metadata and not isinstance(template_metadata, dict):
            raise TypeError("Expected argument 'template_metadata' to be a dict")
        pulumi.set(__self__, "template_metadata", template_metadata)
        if template_uri and not isinstance(template_uri, str):
            raise TypeError("Expected argument 'template_uri' to be a str")
        pulumi.set(__self__, "template_uri", template_uri)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Pipeline creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for a pipelineJob. If set, this PipelineJob and all of its sub-resources will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Pipeline end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.GoogleRpcStatusResponse':
        """
        The error that occurred during pipeline execution. Only populated when the pipeline's state is FAILED or CANCELLED.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="jobDetail")
    def job_detail(self) -> 'outputs.GoogleCloudAiplatformV1beta1PipelineJobDetailResponse':
        """
        The details of pipeline run. Not available in the list view.
        """
        return pulumi.get(self, "job_detail")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the PipelineJob.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="pipelineSpec")
    def pipeline_spec(self) -> Mapping[str, Any]:
        """
        The spec of the pipeline.
        """
        return pulumi.get(self, "pipeline_spec")

    @property
    @pulumi.getter(name="reservedIpRanges")
    def reserved_ip_ranges(self) -> Sequence[str]:
        """
        A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
        """
        return pulumi.get(self, "reserved_ip_ranges")

    @property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigResponse':
        """
        Runtime config of the pipeline.
        """
        return pulumi.get(self, "runtime_config")

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> str:
        """
        The schedule resource name. Only returned if the Pipeline is created by Schedule API.
        """
        return pulumi.get(self, "schedule_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Pipeline start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The detailed state of the job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="templateMetadata")
    def template_metadata(self) -> 'outputs.GoogleCloudAiplatformV1beta1PipelineTemplateMetadataResponse':
        """
        Pipeline template metadata. Will fill up fields if PipelineJob.template_uri is from supported template registry.
        """
        return pulumi.get(self, "template_metadata")

    @property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> str:
        """
        A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.
        """
        return pulumi.get(self, "template_uri")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this PipelineJob was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetPipelineJobResult(GetPipelineJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineJobResult(
            create_time=self.create_time,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            end_time=self.end_time,
            error=self.error,
            job_detail=self.job_detail,
            labels=self.labels,
            name=self.name,
            network=self.network,
            pipeline_spec=self.pipeline_spec,
            reserved_ip_ranges=self.reserved_ip_ranges,
            runtime_config=self.runtime_config,
            schedule_name=self.schedule_name,
            service_account=self.service_account,
            start_time=self.start_time,
            state=self.state,
            template_metadata=self.template_metadata,
            template_uri=self.template_uri,
            update_time=self.update_time)


def get_pipeline_job(location: Optional[str] = None,
                     pipeline_job_id: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineJobResult:
    """
    Gets a PipelineJob.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['pipelineJobId'] = pipeline_job_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getPipelineJob', __args__, opts=opts, typ=GetPipelineJobResult).value

    return AwaitableGetPipelineJobResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        job_detail=pulumi.get(__ret__, 'job_detail'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        pipeline_spec=pulumi.get(__ret__, 'pipeline_spec'),
        reserved_ip_ranges=pulumi.get(__ret__, 'reserved_ip_ranges'),
        runtime_config=pulumi.get(__ret__, 'runtime_config'),
        schedule_name=pulumi.get(__ret__, 'schedule_name'),
        service_account=pulumi.get(__ret__, 'service_account'),
        start_time=pulumi.get(__ret__, 'start_time'),
        state=pulumi.get(__ret__, 'state'),
        template_metadata=pulumi.get(__ret__, 'template_metadata'),
        template_uri=pulumi.get(__ret__, 'template_uri'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_pipeline_job)
def get_pipeline_job_output(location: Optional[pulumi.Input[str]] = None,
                            pipeline_job_id: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPipelineJobResult]:
    """
    Gets a PipelineJob.
    """
    ...
