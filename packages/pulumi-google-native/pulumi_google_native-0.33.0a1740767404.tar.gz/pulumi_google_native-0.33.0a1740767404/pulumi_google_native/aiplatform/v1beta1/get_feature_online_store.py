# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFeatureOnlineStoreResult',
    'AwaitableGetFeatureOnlineStoreResult',
    'get_feature_online_store',
    'get_feature_online_store_output',
]

@pulumi.output_type
class GetFeatureOnlineStoreResult:
    def __init__(__self__, bigtable=None, create_time=None, dedicated_serving_endpoint=None, embedding_management=None, etag=None, labels=None, name=None, optimized=None, state=None, update_time=None):
        if bigtable and not isinstance(bigtable, dict):
            raise TypeError("Expected argument 'bigtable' to be a dict")
        pulumi.set(__self__, "bigtable", bigtable)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if dedicated_serving_endpoint and not isinstance(dedicated_serving_endpoint, dict):
            raise TypeError("Expected argument 'dedicated_serving_endpoint' to be a dict")
        pulumi.set(__self__, "dedicated_serving_endpoint", dedicated_serving_endpoint)
        if embedding_management and not isinstance(embedding_management, dict):
            raise TypeError("Expected argument 'embedding_management' to be a dict")
        pulumi.set(__self__, "embedding_management", embedding_management)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if optimized and not isinstance(optimized, dict):
            raise TypeError("Expected argument 'optimized' to be a dict")
        pulumi.set(__self__, "optimized", optimized)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def bigtable(self) -> 'outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableResponse':
        """
        Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
        """
        return pulumi.get(self, "bigtable")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this FeatureOnlineStore was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedServingEndpoint")
    def dedicated_serving_endpoint(self) -> 'outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointResponse':
        """
        Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
        """
        return pulumi.get(self, "dedicated_serving_endpoint")

    @property
    @pulumi.getter(name="embeddingManagement")
    def embedding_management(self) -> 'outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementResponse':
        """
        Optional. The settings for embedding management in FeatureOnlineStore.
        """
        return pulumi.get(self, "embedding_management")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the FeatureOnlineStore. Format: `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optimized(self) -> 'outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedResponse':
        """
        Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
        """
        return pulumi.get(self, "optimized")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the featureOnlineStore.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this FeatureOnlineStore was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetFeatureOnlineStoreResult(GetFeatureOnlineStoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureOnlineStoreResult(
            bigtable=self.bigtable,
            create_time=self.create_time,
            dedicated_serving_endpoint=self.dedicated_serving_endpoint,
            embedding_management=self.embedding_management,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            optimized=self.optimized,
            state=self.state,
            update_time=self.update_time)


def get_feature_online_store(feature_online_store_id: Optional[str] = None,
                             location: Optional[str] = None,
                             project: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureOnlineStoreResult:
    """
    Gets details of a single FeatureOnlineStore.
    """
    __args__ = dict()
    __args__['featureOnlineStoreId'] = feature_online_store_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getFeatureOnlineStore', __args__, opts=opts, typ=GetFeatureOnlineStoreResult).value

    return AwaitableGetFeatureOnlineStoreResult(
        bigtable=pulumi.get(__ret__, 'bigtable'),
        create_time=pulumi.get(__ret__, 'create_time'),
        dedicated_serving_endpoint=pulumi.get(__ret__, 'dedicated_serving_endpoint'),
        embedding_management=pulumi.get(__ret__, 'embedding_management'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        optimized=pulumi.get(__ret__, 'optimized'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_feature_online_store)
def get_feature_online_store_output(feature_online_store_id: Optional[pulumi.Input[str]] = None,
                                    location: Optional[pulumi.Input[str]] = None,
                                    project: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFeatureOnlineStoreResult]:
    """
    Gets details of a single FeatureOnlineStore.
    """
    ...
