# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMetadataStoreResult',
    'AwaitableGetMetadataStoreResult',
    'get_metadata_store',
    'get_metadata_store_output',
]

@pulumi.output_type
class GetMetadataStoreResult:
    def __init__(__self__, create_time=None, description=None, encryption_spec=None, name=None, state=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, dict):
            raise TypeError("Expected argument 'state' to be a dict")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this MetadataStore was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the MetadataStore.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the MetadataStore instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> 'outputs.GoogleCloudAiplatformV1beta1MetadataStoreMetadataStoreStateResponse':
        """
        State information of the MetadataStore.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this MetadataStore was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetMetadataStoreResult(GetMetadataStoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataStoreResult(
            create_time=self.create_time,
            description=self.description,
            encryption_spec=self.encryption_spec,
            name=self.name,
            state=self.state,
            update_time=self.update_time)


def get_metadata_store(location: Optional[str] = None,
                       metadata_store_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataStoreResult:
    """
    Retrieves a specific MetadataStore.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['metadataStoreId'] = metadata_store_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getMetadataStore', __args__, opts=opts, typ=GetMetadataStoreResult).value

    return AwaitableGetMetadataStoreResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_metadata_store)
def get_metadata_store_output(location: Optional[pulumi.Input[str]] = None,
                              metadata_store_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataStoreResult]:
    """
    Retrieves a specific MetadataStore.
    """
    ...
