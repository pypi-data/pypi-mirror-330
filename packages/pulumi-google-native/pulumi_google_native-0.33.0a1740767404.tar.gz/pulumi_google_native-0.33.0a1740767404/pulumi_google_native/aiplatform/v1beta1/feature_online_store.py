# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FeatureOnlineStoreArgs', 'FeatureOnlineStore']

@pulumi.input_type
class FeatureOnlineStoreArgs:
    def __init__(__self__, *,
                 feature_online_store_id: pulumi.Input[str],
                 bigtable: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']] = None,
                 dedicated_serving_endpoint: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']] = None,
                 embedding_management: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 optimized: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FeatureOnlineStore resource.
        :param pulumi.Input[str] feature_online_store_id: Required. The ID to use for this FeatureOnlineStore, which will become the final component of the FeatureOnlineStore's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within the project and location.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs'] bigtable: Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs'] dedicated_serving_endpoint: Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs'] embedding_management: Optional. The settings for embedding management in FeatureOnlineStore.
        :param pulumi.Input[str] etag: Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs'] optimized: Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
        """
        pulumi.set(__self__, "feature_online_store_id", feature_online_store_id)
        if bigtable is not None:
            pulumi.set(__self__, "bigtable", bigtable)
        if dedicated_serving_endpoint is not None:
            pulumi.set(__self__, "dedicated_serving_endpoint", dedicated_serving_endpoint)
        if embedding_management is not None:
            pulumi.set(__self__, "embedding_management", embedding_management)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if optimized is not None:
            pulumi.set(__self__, "optimized", optimized)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="featureOnlineStoreId")
    def feature_online_store_id(self) -> pulumi.Input[str]:
        """
        Required. The ID to use for this FeatureOnlineStore, which will become the final component of the FeatureOnlineStore's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within the project and location.
        """
        return pulumi.get(self, "feature_online_store_id")

    @feature_online_store_id.setter
    def feature_online_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "feature_online_store_id", value)

    @property
    @pulumi.getter
    def bigtable(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']]:
        """
        Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
        """
        return pulumi.get(self, "bigtable")

    @bigtable.setter
    def bigtable(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']]):
        pulumi.set(self, "bigtable", value)

    @property
    @pulumi.getter(name="dedicatedServingEndpoint")
    def dedicated_serving_endpoint(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']]:
        """
        Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
        """
        return pulumi.get(self, "dedicated_serving_endpoint")

    @dedicated_serving_endpoint.setter
    def dedicated_serving_endpoint(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']]):
        pulumi.set(self, "dedicated_serving_endpoint", value)

    @property
    @pulumi.getter(name="embeddingManagement")
    def embedding_management(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']]:
        """
        Optional. The settings for embedding management in FeatureOnlineStore.
        """
        return pulumi.get(self, "embedding_management")

    @embedding_management.setter
    def embedding_management(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']]):
        pulumi.set(self, "embedding_management", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def optimized(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']]:
        """
        Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
        """
        return pulumi.get(self, "optimized")

    @optimized.setter
    def optimized(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']]):
        pulumi.set(self, "optimized", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class FeatureOnlineStore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bigtable: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']]] = None,
                 dedicated_serving_endpoint: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']]] = None,
                 embedding_management: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 feature_online_store_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 optimized: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new FeatureOnlineStore in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']] bigtable: Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']] dedicated_serving_endpoint: Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']] embedding_management: Optional. The settings for embedding management in FeatureOnlineStore.
        :param pulumi.Input[str] etag: Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input[str] feature_online_store_id: Required. The ID to use for this FeatureOnlineStore, which will become the final component of the FeatureOnlineStore's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within the project and location.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']] optimized: Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FeatureOnlineStoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new FeatureOnlineStore in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param FeatureOnlineStoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FeatureOnlineStoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bigtable: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableArgs']]] = None,
                 dedicated_serving_endpoint: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointArgs']]] = None,
                 embedding_management: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 feature_online_store_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 optimized: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FeatureOnlineStoreArgs.__new__(FeatureOnlineStoreArgs)

            __props__.__dict__["bigtable"] = bigtable
            __props__.__dict__["dedicated_serving_endpoint"] = dedicated_serving_endpoint
            __props__.__dict__["embedding_management"] = embedding_management
            __props__.__dict__["etag"] = etag
            if feature_online_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_online_store_id'")
            __props__.__dict__["feature_online_store_id"] = feature_online_store_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["optimized"] = optimized
            __props__.__dict__["project"] = project
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["featureOnlineStoreId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(FeatureOnlineStore, __self__).__init__(
            'google-native:aiplatform/v1beta1:FeatureOnlineStore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FeatureOnlineStore':
        """
        Get an existing FeatureOnlineStore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FeatureOnlineStoreArgs.__new__(FeatureOnlineStoreArgs)

        __props__.__dict__["bigtable"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["dedicated_serving_endpoint"] = None
        __props__.__dict__["embedding_management"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["feature_online_store_id"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["optimized"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["update_time"] = None
        return FeatureOnlineStore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bigtable(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtableResponse']:
        """
        Contains settings for the Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
        """
        return pulumi.get(self, "bigtable")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this FeatureOnlineStore was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedServingEndpoint")
    def dedicated_serving_endpoint(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpointResponse']:
        """
        Optional. The dedicated serving endpoint for this FeatureOnlineStore, which is different from common Vertex service endpoint.
        """
        return pulumi.get(self, "dedicated_serving_endpoint")

    @property
    @pulumi.getter(name="embeddingManagement")
    def embedding_management(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagementResponse']:
        """
        Optional. The settings for embedding management in FeatureOnlineStore.
        """
        return pulumi.get(self, "embedding_management")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="featureOnlineStoreId")
    def feature_online_store_id(self) -> pulumi.Output[str]:
        """
        Required. The ID to use for this FeatureOnlineStore, which will become the final component of the FeatureOnlineStore's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within the project and location.
        """
        return pulumi.get(self, "feature_online_store_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the FeatureOnlineStore. Format: `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optimized(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureOnlineStoreOptimizedResponse']:
        """
        Contains settings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore. When choose Optimized storage type, need to set PrivateServiceConnectConfig.enable_private_service_connect to use private endpoint. Otherwise will use public endpoint by default.
        """
        return pulumi.get(self, "optimized")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the featureOnlineStore.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this FeatureOnlineStore was last updated.
        """
        return pulumi.get(self, "update_time")

