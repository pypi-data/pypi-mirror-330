# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPersistentResourceResult',
    'AwaitableGetPersistentResourceResult',
    'get_persistent_resource',
    'get_persistent_resource_output',
]

@pulumi.output_type
class GetPersistentResourceResult:
    def __init__(__self__, create_time=None, display_name=None, encryption_spec=None, error=None, labels=None, name=None, network=None, reserved_ip_ranges=None, resource_pools=None, resource_runtime=None, resource_runtime_spec=None, start_time=None, state=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if reserved_ip_ranges and not isinstance(reserved_ip_ranges, list):
            raise TypeError("Expected argument 'reserved_ip_ranges' to be a list")
        pulumi.set(__self__, "reserved_ip_ranges", reserved_ip_ranges)
        if resource_pools and not isinstance(resource_pools, list):
            raise TypeError("Expected argument 'resource_pools' to be a list")
        pulumi.set(__self__, "resource_pools", resource_pools)
        if resource_runtime and not isinstance(resource_runtime, dict):
            raise TypeError("Expected argument 'resource_runtime' to be a dict")
        pulumi.set(__self__, "resource_runtime", resource_runtime)
        if resource_runtime_spec and not isinstance(resource_runtime_spec, dict):
            raise TypeError("Expected argument 'resource_runtime_spec' to be a dict")
        pulumi.set(__self__, "resource_runtime_spec", resource_runtime_spec)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the PersistentResource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Optional. Customer-managed encryption key spec for a PersistentResource. If set, this PersistentResource and all sub-resources of this PersistentResource will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.GoogleRpcStatusResponse':
        """
        Only populated when persistent resource's state is `STOPPING` or `ERROR`.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Resource name of a PersistentResource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="reservedIpRanges")
    def reserved_ip_ranges(self) -> Sequence[str]:
        """
        Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
        """
        return pulumi.get(self, "reserved_ip_ranges")

    @property
    @pulumi.getter(name="resourcePools")
    def resource_pools(self) -> Sequence['outputs.GoogleCloudAiplatformV1beta1ResourcePoolResponse']:
        """
        The spec of the pools of different resources.
        """
        return pulumi.get(self, "resource_pools")

    @property
    @pulumi.getter(name="resourceRuntime")
    def resource_runtime(self) -> 'outputs.GoogleCloudAiplatformV1beta1ResourceRuntimeResponse':
        """
        Runtime information of the Persistent Resource.
        """
        return pulumi.get(self, "resource_runtime")

    @property
    @pulumi.getter(name="resourceRuntimeSpec")
    def resource_runtime_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1ResourceRuntimeSpecResponse':
        """
        Optional. Persistent Resource runtime spec. For example, used for Ray cluster configuration.
        """
        return pulumi.get(self, "resource_runtime_spec")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Time when the PersistentResource for the first time entered the `RUNNING` state.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The detailed state of a Study.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the PersistentResource was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetPersistentResourceResult(GetPersistentResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPersistentResourceResult(
            create_time=self.create_time,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            error=self.error,
            labels=self.labels,
            name=self.name,
            network=self.network,
            reserved_ip_ranges=self.reserved_ip_ranges,
            resource_pools=self.resource_pools,
            resource_runtime=self.resource_runtime,
            resource_runtime_spec=self.resource_runtime_spec,
            start_time=self.start_time,
            state=self.state,
            update_time=self.update_time)


def get_persistent_resource(location: Optional[str] = None,
                            persistent_resource_id: Optional[str] = None,
                            project: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPersistentResourceResult:
    """
    Gets a PersistentResource.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['persistentResourceId'] = persistent_resource_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getPersistentResource', __args__, opts=opts, typ=GetPersistentResourceResult).value

    return AwaitableGetPersistentResourceResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        error=pulumi.get(__ret__, 'error'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        reserved_ip_ranges=pulumi.get(__ret__, 'reserved_ip_ranges'),
        resource_pools=pulumi.get(__ret__, 'resource_pools'),
        resource_runtime=pulumi.get(__ret__, 'resource_runtime'),
        resource_runtime_spec=pulumi.get(__ret__, 'resource_runtime_spec'),
        start_time=pulumi.get(__ret__, 'start_time'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_persistent_resource)
def get_persistent_resource_output(location: Optional[pulumi.Input[str]] = None,
                                   persistent_resource_id: Optional[pulumi.Input[str]] = None,
                                   project: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPersistentResourceResult]:
    """
    Gets a PersistentResource.
    """
    ...
