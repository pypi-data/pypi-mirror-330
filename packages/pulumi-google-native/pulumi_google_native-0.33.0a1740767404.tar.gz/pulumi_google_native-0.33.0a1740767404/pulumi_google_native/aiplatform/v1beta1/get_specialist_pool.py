# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetSpecialistPoolResult',
    'AwaitableGetSpecialistPoolResult',
    'get_specialist_pool',
    'get_specialist_pool_output',
]

@pulumi.output_type
class GetSpecialistPoolResult:
    def __init__(__self__, display_name=None, name=None, pending_data_labeling_jobs=None, specialist_manager_emails=None, specialist_managers_count=None, specialist_worker_emails=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pending_data_labeling_jobs and not isinstance(pending_data_labeling_jobs, list):
            raise TypeError("Expected argument 'pending_data_labeling_jobs' to be a list")
        pulumi.set(__self__, "pending_data_labeling_jobs", pending_data_labeling_jobs)
        if specialist_manager_emails and not isinstance(specialist_manager_emails, list):
            raise TypeError("Expected argument 'specialist_manager_emails' to be a list")
        pulumi.set(__self__, "specialist_manager_emails", specialist_manager_emails)
        if specialist_managers_count and not isinstance(specialist_managers_count, int):
            raise TypeError("Expected argument 'specialist_managers_count' to be a int")
        pulumi.set(__self__, "specialist_managers_count", specialist_managers_count)
        if specialist_worker_emails and not isinstance(specialist_worker_emails, list):
            raise TypeError("Expected argument 'specialist_worker_emails' to be a list")
        pulumi.set(__self__, "specialist_worker_emails", specialist_worker_emails)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the SpecialistPool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pendingDataLabelingJobs")
    def pending_data_labeling_jobs(self) -> Sequence[str]:
        """
        The resource name of the pending data labeling jobs.
        """
        return pulumi.get(self, "pending_data_labeling_jobs")

    @property
    @pulumi.getter(name="specialistManagerEmails")
    def specialist_manager_emails(self) -> Sequence[str]:
        """
        The email addresses of the managers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_manager_emails")

    @property
    @pulumi.getter(name="specialistManagersCount")
    def specialist_managers_count(self) -> int:
        """
        The number of managers in this SpecialistPool.
        """
        return pulumi.get(self, "specialist_managers_count")

    @property
    @pulumi.getter(name="specialistWorkerEmails")
    def specialist_worker_emails(self) -> Sequence[str]:
        """
        The email addresses of workers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_worker_emails")


class AwaitableGetSpecialistPoolResult(GetSpecialistPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpecialistPoolResult(
            display_name=self.display_name,
            name=self.name,
            pending_data_labeling_jobs=self.pending_data_labeling_jobs,
            specialist_manager_emails=self.specialist_manager_emails,
            specialist_managers_count=self.specialist_managers_count,
            specialist_worker_emails=self.specialist_worker_emails)


def get_specialist_pool(location: Optional[str] = None,
                        project: Optional[str] = None,
                        specialist_pool_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSpecialistPoolResult:
    """
    Gets a SpecialistPool.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['specialistPoolId'] = specialist_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getSpecialistPool', __args__, opts=opts, typ=GetSpecialistPoolResult).value

    return AwaitableGetSpecialistPoolResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        name=pulumi.get(__ret__, 'name'),
        pending_data_labeling_jobs=pulumi.get(__ret__, 'pending_data_labeling_jobs'),
        specialist_manager_emails=pulumi.get(__ret__, 'specialist_manager_emails'),
        specialist_managers_count=pulumi.get(__ret__, 'specialist_managers_count'),
        specialist_worker_emails=pulumi.get(__ret__, 'specialist_worker_emails'))


@_utilities.lift_output_func(get_specialist_pool)
def get_specialist_pool_output(location: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               specialist_pool_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSpecialistPoolResult]:
    """
    Gets a SpecialistPool.
    """
    ...
