# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetIndexEndpointResult',
    'AwaitableGetIndexEndpointResult',
    'get_index_endpoint',
    'get_index_endpoint_output',
]

@pulumi.output_type
class GetIndexEndpointResult:
    def __init__(__self__, create_time=None, deployed_indexes=None, description=None, display_name=None, enable_private_service_connect=None, encryption_spec=None, etag=None, labels=None, name=None, network=None, private_service_connect_config=None, public_endpoint_domain_name=None, public_endpoint_enabled=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deployed_indexes and not isinstance(deployed_indexes, list):
            raise TypeError("Expected argument 'deployed_indexes' to be a list")
        pulumi.set(__self__, "deployed_indexes", deployed_indexes)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if enable_private_service_connect and not isinstance(enable_private_service_connect, bool):
            raise TypeError("Expected argument 'enable_private_service_connect' to be a bool")
        pulumi.set(__self__, "enable_private_service_connect", enable_private_service_connect)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if private_service_connect_config and not isinstance(private_service_connect_config, dict):
            raise TypeError("Expected argument 'private_service_connect_config' to be a dict")
        pulumi.set(__self__, "private_service_connect_config", private_service_connect_config)
        if public_endpoint_domain_name and not isinstance(public_endpoint_domain_name, str):
            raise TypeError("Expected argument 'public_endpoint_domain_name' to be a str")
        pulumi.set(__self__, "public_endpoint_domain_name", public_endpoint_domain_name)
        if public_endpoint_enabled and not isinstance(public_endpoint_enabled, bool):
            raise TypeError("Expected argument 'public_endpoint_enabled' to be a bool")
        pulumi.set(__self__, "public_endpoint_enabled", public_endpoint_enabled)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this IndexEndpoint was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployedIndexes")
    def deployed_indexes(self) -> Sequence['outputs.GoogleCloudAiplatformV1beta1DeployedIndexResponse']:
        """
        The indexes deployed in this endpoint.
        """
        return pulumi.get(self, "deployed_indexes")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the IndexEndpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the IndexEndpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enablePrivateServiceConnect")
    @_utilities.deprecated("""Optional. Deprecated: If true, expose the IndexEndpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.""")
    def enable_private_service_connect(self) -> bool:
        """
        Optional. Deprecated: If true, expose the IndexEndpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.
        """
        return pulumi.get(self, "enable_private_service_connect")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Immutable. Customer-managed encryption key spec for an IndexEndpoint. If set, this IndexEndpoint and all sub-resources of this IndexEndpoint will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize your IndexEndpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the IndexEndpoint.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the IndexEndpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. network and private_service_connect_config are mutually exclusive. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in '12345', and {network} is network name.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="privateServiceConnectConfig")
    def private_service_connect_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1PrivateServiceConnectConfigResponse':
        """
        Optional. Configuration for private service connect. network and private_service_connect_config are mutually exclusive.
        """
        return pulumi.get(self, "private_service_connect_config")

    @property
    @pulumi.getter(name="publicEndpointDomainName")
    def public_endpoint_domain_name(self) -> str:
        """
        If public_endpoint_enabled is true, this field will be populated with the domain name to use for this index endpoint.
        """
        return pulumi.get(self, "public_endpoint_domain_name")

    @property
    @pulumi.getter(name="publicEndpointEnabled")
    def public_endpoint_enabled(self) -> bool:
        """
        Optional. If true, the deployed index will be accessible through public endpoint.
        """
        return pulumi.get(self, "public_endpoint_enabled")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this IndexEndpoint was last updated. This timestamp is not updated when the endpoint's DeployedIndexes are updated, e.g. due to updates of the original Indexes they are the deployments of.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetIndexEndpointResult(GetIndexEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndexEndpointResult(
            create_time=self.create_time,
            deployed_indexes=self.deployed_indexes,
            description=self.description,
            display_name=self.display_name,
            enable_private_service_connect=self.enable_private_service_connect,
            encryption_spec=self.encryption_spec,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            network=self.network,
            private_service_connect_config=self.private_service_connect_config,
            public_endpoint_domain_name=self.public_endpoint_domain_name,
            public_endpoint_enabled=self.public_endpoint_enabled,
            update_time=self.update_time)


def get_index_endpoint(index_endpoint_id: Optional[str] = None,
                       location: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndexEndpointResult:
    """
    Gets an IndexEndpoint.
    """
    __args__ = dict()
    __args__['indexEndpointId'] = index_endpoint_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getIndexEndpoint', __args__, opts=opts, typ=GetIndexEndpointResult).value

    return AwaitableGetIndexEndpointResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        deployed_indexes=pulumi.get(__ret__, 'deployed_indexes'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        enable_private_service_connect=pulumi.get(__ret__, 'enable_private_service_connect'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        private_service_connect_config=pulumi.get(__ret__, 'private_service_connect_config'),
        public_endpoint_domain_name=pulumi.get(__ret__, 'public_endpoint_domain_name'),
        public_endpoint_enabled=pulumi.get(__ret__, 'public_endpoint_enabled'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_index_endpoint)
def get_index_endpoint_output(index_endpoint_id: Optional[pulumi.Input[str]] = None,
                              location: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIndexEndpointResult]:
    """
    Gets an IndexEndpoint.
    """
    ...
