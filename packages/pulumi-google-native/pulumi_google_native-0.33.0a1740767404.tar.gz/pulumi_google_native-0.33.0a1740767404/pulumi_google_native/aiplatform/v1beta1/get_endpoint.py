# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEndpointResult',
    'AwaitableGetEndpointResult',
    'get_endpoint',
    'get_endpoint_output',
]

@pulumi.output_type
class GetEndpointResult:
    def __init__(__self__, create_time=None, deployed_models=None, description=None, display_name=None, enable_private_service_connect=None, encryption_spec=None, etag=None, labels=None, model_deployment_monitoring_job=None, name=None, network=None, predict_request_response_logging_config=None, traffic_split=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deployed_models and not isinstance(deployed_models, list):
            raise TypeError("Expected argument 'deployed_models' to be a list")
        pulumi.set(__self__, "deployed_models", deployed_models)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if enable_private_service_connect and not isinstance(enable_private_service_connect, bool):
            raise TypeError("Expected argument 'enable_private_service_connect' to be a bool")
        pulumi.set(__self__, "enable_private_service_connect", enable_private_service_connect)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if model_deployment_monitoring_job and not isinstance(model_deployment_monitoring_job, str):
            raise TypeError("Expected argument 'model_deployment_monitoring_job' to be a str")
        pulumi.set(__self__, "model_deployment_monitoring_job", model_deployment_monitoring_job)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if predict_request_response_logging_config and not isinstance(predict_request_response_logging_config, dict):
            raise TypeError("Expected argument 'predict_request_response_logging_config' to be a dict")
        pulumi.set(__self__, "predict_request_response_logging_config", predict_request_response_logging_config)
        if traffic_split and not isinstance(traffic_split, dict):
            raise TypeError("Expected argument 'traffic_split' to be a dict")
        pulumi.set(__self__, "traffic_split", traffic_split)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this Endpoint was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployedModels")
    def deployed_models(self) -> Sequence['outputs.GoogleCloudAiplatformV1beta1DeployedModelResponse']:
        """
        The models deployed in this Endpoint. To add or remove DeployedModels use EndpointService.DeployModel and EndpointService.UndeployModel respectively.
        """
        return pulumi.get(self, "deployed_models")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enablePrivateServiceConnect")
    @_utilities.deprecated("""Deprecated: If true, expose the Endpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.""")
    def enable_private_service_connect(self) -> bool:
        """
        Deprecated: If true, expose the Endpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.
        """
        return pulumi.get(self, "enable_private_service_connect")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize your Endpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="modelDeploymentMonitoringJob")
    def model_deployment_monitoring_job(self) -> str:
        """
        Resource name of the Model Monitoring job associated with this Endpoint if monitoring is enabled by JobService.CreateModelDeploymentMonitoringJob. Format: `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
        """
        return pulumi.get(self, "model_deployment_monitoring_job")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the Endpoint.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Optional. The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the Endpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. Only one of the fields, network or enable_private_service_connect, can be set. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="predictRequestResponseLoggingConfig")
    def predict_request_response_logging_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1PredictRequestResponseLoggingConfigResponse':
        """
        Configures the request-response logging for online prediction.
        """
        return pulumi.get(self, "predict_request_response_logging_config")

    @property
    @pulumi.getter(name="trafficSplit")
    def traffic_split(self) -> Mapping[str, int]:
        """
        A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
        """
        return pulumi.get(self, "traffic_split")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this Endpoint was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetEndpointResult(GetEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEndpointResult(
            create_time=self.create_time,
            deployed_models=self.deployed_models,
            description=self.description,
            display_name=self.display_name,
            enable_private_service_connect=self.enable_private_service_connect,
            encryption_spec=self.encryption_spec,
            etag=self.etag,
            labels=self.labels,
            model_deployment_monitoring_job=self.model_deployment_monitoring_job,
            name=self.name,
            network=self.network,
            predict_request_response_logging_config=self.predict_request_response_logging_config,
            traffic_split=self.traffic_split,
            update_time=self.update_time)


def get_endpoint(endpoint_id: Optional[str] = None,
                 location: Optional[str] = None,
                 project: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEndpointResult:
    """
    Gets an Endpoint.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getEndpoint', __args__, opts=opts, typ=GetEndpointResult).value

    return AwaitableGetEndpointResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        deployed_models=pulumi.get(__ret__, 'deployed_models'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        enable_private_service_connect=pulumi.get(__ret__, 'enable_private_service_connect'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        model_deployment_monitoring_job=pulumi.get(__ret__, 'model_deployment_monitoring_job'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        predict_request_response_logging_config=pulumi.get(__ret__, 'predict_request_response_logging_config'),
        traffic_split=pulumi.get(__ret__, 'traffic_split'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_endpoint)
def get_endpoint_output(endpoint_id: Optional[pulumi.Input[str]] = None,
                        location: Optional[pulumi.Input[str]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEndpointResult]:
    """
    Gets an Endpoint.
    """
    ...
