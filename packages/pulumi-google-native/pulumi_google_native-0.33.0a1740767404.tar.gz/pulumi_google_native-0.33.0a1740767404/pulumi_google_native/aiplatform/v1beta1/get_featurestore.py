# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFeaturestoreResult',
    'AwaitableGetFeaturestoreResult',
    'get_featurestore',
    'get_featurestore_output',
]

@pulumi.output_type
class GetFeaturestoreResult:
    def __init__(__self__, create_time=None, encryption_spec=None, etag=None, labels=None, name=None, online_serving_config=None, online_storage_ttl_days=None, state=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if online_serving_config and not isinstance(online_serving_config, dict):
            raise TypeError("Expected argument 'online_serving_config' to be a dict")
        pulumi.set(__self__, "online_serving_config", online_serving_config)
        if online_storage_ttl_days and not isinstance(online_storage_ttl_days, int):
            raise TypeError("Expected argument 'online_storage_ttl_days' to be a int")
        pulumi.set(__self__, "online_storage_ttl_days", online_storage_ttl_days)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this Featurestore was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Optional. Customer-managed encryption key spec for data storage. If set, both of the online and offline data storage will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. The labels with user-defined metadata to organize your Featurestore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Featurestore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Featurestore. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlineServingConfig")
    def online_serving_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1FeaturestoreOnlineServingConfigResponse':
        """
        Optional. Config for online storage resources. The field should not co-exist with the field of `OnlineStoreReplicationConfig`. If both of it and OnlineStoreReplicationConfig are unset, the feature store will not have an online store and cannot be used for online serving.
        """
        return pulumi.get(self, "online_serving_config")

    @property
    @pulumi.getter(name="onlineStorageTtlDays")
    def online_storage_ttl_days(self) -> int:
        """
        Optional. TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage periodically removes obsolete feature values older than `online_storage_ttl_days` since the feature generation time. Note that `online_storage_ttl_days` should be less than or equal to `offline_storage_ttl_days` for each EntityType under a featurestore. If not set, default to 4000 days
        """
        return pulumi.get(self, "online_storage_ttl_days")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the featurestore.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this Featurestore was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetFeaturestoreResult(GetFeaturestoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeaturestoreResult(
            create_time=self.create_time,
            encryption_spec=self.encryption_spec,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            online_serving_config=self.online_serving_config,
            online_storage_ttl_days=self.online_storage_ttl_days,
            state=self.state,
            update_time=self.update_time)


def get_featurestore(featurestore_id: Optional[str] = None,
                     location: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeaturestoreResult:
    """
    Gets details of a single Featurestore.
    """
    __args__ = dict()
    __args__['featurestoreId'] = featurestore_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getFeaturestore', __args__, opts=opts, typ=GetFeaturestoreResult).value

    return AwaitableGetFeaturestoreResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        online_serving_config=pulumi.get(__ret__, 'online_serving_config'),
        online_storage_ttl_days=pulumi.get(__ret__, 'online_storage_ttl_days'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_featurestore)
def get_featurestore_output(featurestore_id: Optional[pulumi.Input[str]] = None,
                            location: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFeaturestoreResult]:
    """
    Gets details of a single Featurestore.
    """
    ...
