# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['HyperparameterTuningJobArgs', 'HyperparameterTuningJob']

@pulumi.input_type
class HyperparameterTuningJobArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 max_trial_count: pulumi.Input[int],
                 parallel_trial_count: pulumi.Input[int],
                 study_spec: pulumi.Input['GoogleCloudAiplatformV1StudySpecArgs'],
                 trial_job_spec: pulumi.Input['GoogleCloudAiplatformV1CustomJobSpecArgs'],
                 encryption_spec: Optional[pulumi.Input['GoogleCloudAiplatformV1EncryptionSpecArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_failed_trial_count: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a HyperparameterTuningJob resource.
        :param pulumi.Input[str] display_name: The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        :param pulumi.Input[int] max_trial_count: The desired total number of Trials.
        :param pulumi.Input[int] parallel_trial_count: The desired number of Trials to run in parallel.
        :param pulumi.Input['GoogleCloudAiplatformV1StudySpecArgs'] study_spec: Study configuration of the HyperparameterTuningJob.
        :param pulumi.Input['GoogleCloudAiplatformV1CustomJobSpecArgs'] trial_job_spec: The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
        :param pulumi.Input['GoogleCloudAiplatformV1EncryptionSpecArgs'] encryption_spec: Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        :param pulumi.Input[int] max_failed_trial_count: The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_trial_count", max_trial_count)
        pulumi.set(__self__, "parallel_trial_count", parallel_trial_count)
        pulumi.set(__self__, "study_spec", study_spec)
        pulumi.set(__self__, "trial_job_spec", trial_job_spec)
        if encryption_spec is not None:
            pulumi.set(__self__, "encryption_spec", encryption_spec)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if max_failed_trial_count is not None:
            pulumi.set(__self__, "max_failed_trial_count", max_failed_trial_count)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="maxTrialCount")
    def max_trial_count(self) -> pulumi.Input[int]:
        """
        The desired total number of Trials.
        """
        return pulumi.get(self, "max_trial_count")

    @max_trial_count.setter
    def max_trial_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_trial_count", value)

    @property
    @pulumi.getter(name="parallelTrialCount")
    def parallel_trial_count(self) -> pulumi.Input[int]:
        """
        The desired number of Trials to run in parallel.
        """
        return pulumi.get(self, "parallel_trial_count")

    @parallel_trial_count.setter
    def parallel_trial_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "parallel_trial_count", value)

    @property
    @pulumi.getter(name="studySpec")
    def study_spec(self) -> pulumi.Input['GoogleCloudAiplatformV1StudySpecArgs']:
        """
        Study configuration of the HyperparameterTuningJob.
        """
        return pulumi.get(self, "study_spec")

    @study_spec.setter
    def study_spec(self, value: pulumi.Input['GoogleCloudAiplatformV1StudySpecArgs']):
        pulumi.set(self, "study_spec", value)

    @property
    @pulumi.getter(name="trialJobSpec")
    def trial_job_spec(self) -> pulumi.Input['GoogleCloudAiplatformV1CustomJobSpecArgs']:
        """
        The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
        """
        return pulumi.get(self, "trial_job_spec")

    @trial_job_spec.setter
    def trial_job_spec(self, value: pulumi.Input['GoogleCloudAiplatformV1CustomJobSpecArgs']):
        pulumi.set(self, "trial_job_spec", value)

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1EncryptionSpecArgs']]:
        """
        Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
        """
        return pulumi.get(self, "encryption_spec")

    @encryption_spec.setter
    def encryption_spec(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1EncryptionSpecArgs']]):
        pulumi.set(self, "encryption_spec", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maxFailedTrialCount")
    def max_failed_trial_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
        """
        return pulumi.get(self, "max_failed_trial_count")

    @max_failed_trial_count.setter
    def max_failed_trial_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_failed_trial_count", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class HyperparameterTuningJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1EncryptionSpecArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_failed_trial_count: Optional[pulumi.Input[int]] = None,
                 max_trial_count: Optional[pulumi.Input[int]] = None,
                 parallel_trial_count: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 study_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1StudySpecArgs']]] = None,
                 trial_job_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1CustomJobSpecArgs']]] = None,
                 __props__=None):
        """
        Creates a HyperparameterTuningJob
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1EncryptionSpecArgs']] encryption_spec: Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        :param pulumi.Input[int] max_failed_trial_count: The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
        :param pulumi.Input[int] max_trial_count: The desired total number of Trials.
        :param pulumi.Input[int] parallel_trial_count: The desired number of Trials to run in parallel.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1StudySpecArgs']] study_spec: Study configuration of the HyperparameterTuningJob.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1CustomJobSpecArgs']] trial_job_spec: The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HyperparameterTuningJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a HyperparameterTuningJob
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param HyperparameterTuningJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HyperparameterTuningJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1EncryptionSpecArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_failed_trial_count: Optional[pulumi.Input[int]] = None,
                 max_trial_count: Optional[pulumi.Input[int]] = None,
                 parallel_trial_count: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 study_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1StudySpecArgs']]] = None,
                 trial_job_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1CustomJobSpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HyperparameterTuningJobArgs.__new__(HyperparameterTuningJobArgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["encryption_spec"] = encryption_spec
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["max_failed_trial_count"] = max_failed_trial_count
            if max_trial_count is None and not opts.urn:
                raise TypeError("Missing required property 'max_trial_count'")
            __props__.__dict__["max_trial_count"] = max_trial_count
            if parallel_trial_count is None and not opts.urn:
                raise TypeError("Missing required property 'parallel_trial_count'")
            __props__.__dict__["parallel_trial_count"] = parallel_trial_count
            __props__.__dict__["project"] = project
            if study_spec is None and not opts.urn:
                raise TypeError("Missing required property 'study_spec'")
            __props__.__dict__["study_spec"] = study_spec
            if trial_job_spec is None and not opts.urn:
                raise TypeError("Missing required property 'trial_job_spec'")
            __props__.__dict__["trial_job_spec"] = trial_job_spec
            __props__.__dict__["create_time"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["error"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["trials"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(HyperparameterTuningJob, __self__).__init__(
            'google-native:aiplatform/v1:HyperparameterTuningJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'HyperparameterTuningJob':
        """
        Get an existing HyperparameterTuningJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = HyperparameterTuningJobArgs.__new__(HyperparameterTuningJobArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["encryption_spec"] = None
        __props__.__dict__["end_time"] = None
        __props__.__dict__["error"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["max_failed_trial_count"] = None
        __props__.__dict__["max_trial_count"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["parallel_trial_count"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["start_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["study_spec"] = None
        __props__.__dict__["trial_job_spec"] = None
        __props__.__dict__["trials"] = None
        __props__.__dict__["update_time"] = None
        return HyperparameterTuningJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when the HyperparameterTuningJob was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1EncryptionSpecResponse']:
        """
        Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> pulumi.Output['outputs.GoogleRpcStatusResponse']:
        """
        Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maxFailedTrialCount")
    def max_failed_trial_count(self) -> pulumi.Output[int]:
        """
        The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
        """
        return pulumi.get(self, "max_failed_trial_count")

    @property
    @pulumi.getter(name="maxTrialCount")
    def max_trial_count(self) -> pulumi.Output[int]:
        """
        The desired total number of Trials.
        """
        return pulumi.get(self, "max_trial_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name of the HyperparameterTuningJob.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parallelTrialCount")
    def parallel_trial_count(self) -> pulumi.Output[int]:
        """
        The desired number of Trials to run in parallel.
        """
        return pulumi.get(self, "parallel_trial_count")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The detailed state of the job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="studySpec")
    def study_spec(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1StudySpecResponse']:
        """
        Study configuration of the HyperparameterTuningJob.
        """
        return pulumi.get(self, "study_spec")

    @property
    @pulumi.getter(name="trialJobSpec")
    def trial_job_spec(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1CustomJobSpecResponse']:
        """
        The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
        """
        return pulumi.get(self, "trial_job_spec")

    @property
    @pulumi.getter
    def trials(self) -> pulumi.Output[Sequence['outputs.GoogleCloudAiplatformV1TrialResponse']]:
        """
        Trials of the HyperparameterTuningJob.
        """
        return pulumi.get(self, "trials")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time when the HyperparameterTuningJob was most recently updated.
        """
        return pulumi.get(self, "update_time")

