# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetScheduleResult',
    'AwaitableGetScheduleResult',
    'get_schedule',
    'get_schedule_output',
]

@pulumi.output_type
class GetScheduleResult:
    def __init__(__self__, allow_queueing=None, catch_up=None, create_pipeline_job_request=None, create_time=None, cron=None, display_name=None, end_time=None, last_pause_time=None, last_resume_time=None, last_scheduled_run_response=None, max_concurrent_run_count=None, max_run_count=None, name=None, next_run_time=None, start_time=None, started_run_count=None, state=None, update_time=None):
        if allow_queueing and not isinstance(allow_queueing, bool):
            raise TypeError("Expected argument 'allow_queueing' to be a bool")
        pulumi.set(__self__, "allow_queueing", allow_queueing)
        if catch_up and not isinstance(catch_up, bool):
            raise TypeError("Expected argument 'catch_up' to be a bool")
        pulumi.set(__self__, "catch_up", catch_up)
        if create_pipeline_job_request and not isinstance(create_pipeline_job_request, dict):
            raise TypeError("Expected argument 'create_pipeline_job_request' to be a dict")
        pulumi.set(__self__, "create_pipeline_job_request", create_pipeline_job_request)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if cron and not isinstance(cron, str):
            raise TypeError("Expected argument 'cron' to be a str")
        pulumi.set(__self__, "cron", cron)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if last_pause_time and not isinstance(last_pause_time, str):
            raise TypeError("Expected argument 'last_pause_time' to be a str")
        pulumi.set(__self__, "last_pause_time", last_pause_time)
        if last_resume_time and not isinstance(last_resume_time, str):
            raise TypeError("Expected argument 'last_resume_time' to be a str")
        pulumi.set(__self__, "last_resume_time", last_resume_time)
        if last_scheduled_run_response and not isinstance(last_scheduled_run_response, dict):
            raise TypeError("Expected argument 'last_scheduled_run_response' to be a dict")
        pulumi.set(__self__, "last_scheduled_run_response", last_scheduled_run_response)
        if max_concurrent_run_count and not isinstance(max_concurrent_run_count, str):
            raise TypeError("Expected argument 'max_concurrent_run_count' to be a str")
        pulumi.set(__self__, "max_concurrent_run_count", max_concurrent_run_count)
        if max_run_count and not isinstance(max_run_count, str):
            raise TypeError("Expected argument 'max_run_count' to be a str")
        pulumi.set(__self__, "max_run_count", max_run_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_run_time and not isinstance(next_run_time, str):
            raise TypeError("Expected argument 'next_run_time' to be a str")
        pulumi.set(__self__, "next_run_time", next_run_time)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if started_run_count and not isinstance(started_run_count, str):
            raise TypeError("Expected argument 'started_run_count' to be a str")
        pulumi.set(__self__, "started_run_count", started_run_count)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="allowQueueing")
    def allow_queueing(self) -> bool:
        """
        Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
        """
        return pulumi.get(self, "allow_queueing")

    @property
    @pulumi.getter(name="catchUp")
    def catch_up(self) -> bool:
        """
        Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
        """
        return pulumi.get(self, "catch_up")

    @property
    @pulumi.getter(name="createPipelineJobRequest")
    def create_pipeline_job_request(self) -> 'outputs.GoogleCloudAiplatformV1CreatePipelineJobRequestResponse':
        """
        Request for PipelineService.CreatePipelineJob. CreatePipelineJobRequest.parent field is required (format: projects/{project}/locations/{location}).
        """
        return pulumi.get(self, "create_pipeline_job_request")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this Schedule was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def cron(self) -> str:
        """
        Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
        """
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="lastPauseTime")
    def last_pause_time(self) -> str:
        """
        Timestamp when this Schedule was last paused. Unset if never paused.
        """
        return pulumi.get(self, "last_pause_time")

    @property
    @pulumi.getter(name="lastResumeTime")
    def last_resume_time(self) -> str:
        """
        Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
        """
        return pulumi.get(self, "last_resume_time")

    @property
    @pulumi.getter(name="lastScheduledRunResponse")
    def last_scheduled_run_response(self) -> 'outputs.GoogleCloudAiplatformV1ScheduleRunResponseResponse':
        """
        Response of the last scheduled run. This is the response for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable). Unset if no run has been scheduled yet.
        """
        return pulumi.get(self, "last_scheduled_run_response")

    @property
    @pulumi.getter(name="maxConcurrentRunCount")
    def max_concurrent_run_count(self) -> str:
        """
        Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
        """
        return pulumi.get(self, "max_concurrent_run_count")

    @property
    @pulumi.getter(name="maxRunCount")
    def max_run_count(self) -> str:
        """
        Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
        """
        return pulumi.get(self, "max_run_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of the Schedule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRunTime")
    def next_run_time(self) -> str:
        """
        Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
        """
        return pulumi.get(self, "next_run_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="startedRunCount")
    def started_run_count(self) -> str:
        """
        The number of runs started by this schedule.
        """
        return pulumi.get(self, "started_run_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of this Schedule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this Schedule was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetScheduleResult(GetScheduleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScheduleResult(
            allow_queueing=self.allow_queueing,
            catch_up=self.catch_up,
            create_pipeline_job_request=self.create_pipeline_job_request,
            create_time=self.create_time,
            cron=self.cron,
            display_name=self.display_name,
            end_time=self.end_time,
            last_pause_time=self.last_pause_time,
            last_resume_time=self.last_resume_time,
            last_scheduled_run_response=self.last_scheduled_run_response,
            max_concurrent_run_count=self.max_concurrent_run_count,
            max_run_count=self.max_run_count,
            name=self.name,
            next_run_time=self.next_run_time,
            start_time=self.start_time,
            started_run_count=self.started_run_count,
            state=self.state,
            update_time=self.update_time)


def get_schedule(location: Optional[str] = None,
                 project: Optional[str] = None,
                 schedule_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScheduleResult:
    """
    Gets a Schedule.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['scheduleId'] = schedule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getSchedule', __args__, opts=opts, typ=GetScheduleResult).value

    return AwaitableGetScheduleResult(
        allow_queueing=pulumi.get(__ret__, 'allow_queueing'),
        catch_up=pulumi.get(__ret__, 'catch_up'),
        create_pipeline_job_request=pulumi.get(__ret__, 'create_pipeline_job_request'),
        create_time=pulumi.get(__ret__, 'create_time'),
        cron=pulumi.get(__ret__, 'cron'),
        display_name=pulumi.get(__ret__, 'display_name'),
        end_time=pulumi.get(__ret__, 'end_time'),
        last_pause_time=pulumi.get(__ret__, 'last_pause_time'),
        last_resume_time=pulumi.get(__ret__, 'last_resume_time'),
        last_scheduled_run_response=pulumi.get(__ret__, 'last_scheduled_run_response'),
        max_concurrent_run_count=pulumi.get(__ret__, 'max_concurrent_run_count'),
        max_run_count=pulumi.get(__ret__, 'max_run_count'),
        name=pulumi.get(__ret__, 'name'),
        next_run_time=pulumi.get(__ret__, 'next_run_time'),
        start_time=pulumi.get(__ret__, 'start_time'),
        started_run_count=pulumi.get(__ret__, 'started_run_count'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_schedule)
def get_schedule_output(location: Optional[pulumi.Input[str]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        schedule_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScheduleResult]:
    """
    Gets a Schedule.
    """
    ...
