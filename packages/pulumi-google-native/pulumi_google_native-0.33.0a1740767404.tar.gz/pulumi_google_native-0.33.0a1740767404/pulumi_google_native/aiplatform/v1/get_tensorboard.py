# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTensorboardResult',
    'AwaitableGetTensorboardResult',
    'get_tensorboard',
    'get_tensorboard_output',
]

@pulumi.output_type
class GetTensorboardResult:
    def __init__(__self__, blob_storage_path_prefix=None, create_time=None, description=None, display_name=None, encryption_spec=None, etag=None, is_default=None, labels=None, name=None, run_count=None, update_time=None):
        if blob_storage_path_prefix and not isinstance(blob_storage_path_prefix, str):
            raise TypeError("Expected argument 'blob_storage_path_prefix' to be a str")
        pulumi.set(__self__, "blob_storage_path_prefix", blob_storage_path_prefix)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if run_count and not isinstance(run_count, int):
            raise TypeError("Expected argument 'run_count' to be a int")
        pulumi.set(__self__, "run_count", run_count)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="blobStoragePathPrefix")
    def blob_storage_path_prefix(self) -> str:
        """
        Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not end with a '/'.
        """
        return pulumi.get(self, "blob_storage_path_prefix")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this Tensorboard was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of this Tensorboard.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User provided name of this Tensorboard.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Used to indicate if the TensorBoard instance is the default one. Each project & region can have at most one default TensorBoard instance. Creation of a default TensorBoard instance and updating an existing TensorBoard instance to be default will mark all other TensorBoard instances (if any) as non default.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize your Tensorboards. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Tensorboard (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Tensorboard. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runCount")
    def run_count(self) -> int:
        """
        The number of Runs stored in this Tensorboard.
        """
        return pulumi.get(self, "run_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this Tensorboard was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetTensorboardResult(GetTensorboardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTensorboardResult(
            blob_storage_path_prefix=self.blob_storage_path_prefix,
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            etag=self.etag,
            is_default=self.is_default,
            labels=self.labels,
            name=self.name,
            run_count=self.run_count,
            update_time=self.update_time)


def get_tensorboard(location: Optional[str] = None,
                    project: Optional[str] = None,
                    tensorboard_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTensorboardResult:
    """
    Gets a Tensorboard.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['tensorboardId'] = tensorboard_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getTensorboard', __args__, opts=opts, typ=GetTensorboardResult).value

    return AwaitableGetTensorboardResult(
        blob_storage_path_prefix=pulumi.get(__ret__, 'blob_storage_path_prefix'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        etag=pulumi.get(__ret__, 'etag'),
        is_default=pulumi.get(__ret__, 'is_default'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        run_count=pulumi.get(__ret__, 'run_count'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_tensorboard)
def get_tensorboard_output(location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           tensorboard_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTensorboardResult]:
    """
    Gets a Tensorboard.
    """
    ...
