# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AccessKeyCredentialsArgs',
    'AwsSourceDetailsArgs',
    'AzureSourceDetailsArgs',
    'BootDiskDefaultsArgs',
    'ClientSecretCredentialsArgs',
    'ComputeEngineDisksTargetDefaultsArgs',
    'ComputeEngineTargetDefaultsArgs',
    'ComputeSchedulingArgs',
    'DiskImageDefaultsArgs',
    'DisksMigrationDisksTargetDefaultsArgs',
    'DisksMigrationVmTargetDefaultsArgs',
    'EncryptionArgs',
    'NetworkInterfaceArgs',
    'PersistentDiskDefaultsArgs',
    'SchedulePolicyArgs',
    'SchedulingNodeAffinityArgs',
    'TagArgs',
    'TargetVMDetailsArgs',
    'VmAttachmentDetailsArgs',
    'VmUtilizationInfoArgs',
    'VmUtilizationMetricsArgs',
    'VmwareSourceDetailsArgs',
    'VmwareVmDetailsArgs',
]

@pulumi.input_type
class AccessKeyCredentialsArgs:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None):
        """
        Message describing AWS Credentials using access key id and secret.
        :param pulumi.Input[str] access_key_id: AWS access key ID.
        :param pulumi.Input[str] secret_access_key: Input only. AWS secret access key.
        :param pulumi.Input[str] session_token: Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. AWS secret access key.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)


@pulumi.input_type
class AwsSourceDetailsArgs:
    def __init__(__self__, *,
                 access_key_creds: Optional[pulumi.Input['AccessKeyCredentialsArgs']] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 inventory_security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 inventory_tag_list: Optional[pulumi.Input[Sequence[pulumi.Input['TagArgs']]]] = None,
                 migration_resources_user_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        AwsSourceDetails message describes a specific source details for the AWS source type.
        :param pulumi.Input['AccessKeyCredentialsArgs'] access_key_creds: AWS Credentials using access key id and secret.
        :param pulumi.Input[str] aws_region: Immutable. The AWS region that the source VMs will be migrated from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inventory_security_group_names: AWS security group names to limit the scope of the source inventory.
        :param pulumi.Input[Sequence[pulumi.Input['TagArgs']]] inventory_tag_list: AWS resource tags to limit the scope of the source inventory.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_resources_user_tags: User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
        """
        if access_key_creds is not None:
            pulumi.set(__self__, "access_key_creds", access_key_creds)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if inventory_security_group_names is not None:
            pulumi.set(__self__, "inventory_security_group_names", inventory_security_group_names)
        if inventory_tag_list is not None:
            pulumi.set(__self__, "inventory_tag_list", inventory_tag_list)
        if migration_resources_user_tags is not None:
            pulumi.set(__self__, "migration_resources_user_tags", migration_resources_user_tags)

    @property
    @pulumi.getter(name="accessKeyCreds")
    def access_key_creds(self) -> Optional[pulumi.Input['AccessKeyCredentialsArgs']]:
        """
        AWS Credentials using access key id and secret.
        """
        return pulumi.get(self, "access_key_creds")

    @access_key_creds.setter
    def access_key_creds(self, value: Optional[pulumi.Input['AccessKeyCredentialsArgs']]):
        pulumi.set(self, "access_key_creds", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The AWS region that the source VMs will be migrated from.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="inventorySecurityGroupNames")
    def inventory_security_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        AWS security group names to limit the scope of the source inventory.
        """
        return pulumi.get(self, "inventory_security_group_names")

    @inventory_security_group_names.setter
    def inventory_security_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inventory_security_group_names", value)

    @property
    @pulumi.getter(name="inventoryTagList")
    def inventory_tag_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagArgs']]]]:
        """
        AWS resource tags to limit the scope of the source inventory.
        """
        return pulumi.get(self, "inventory_tag_list")

    @inventory_tag_list.setter
    def inventory_tag_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagArgs']]]]):
        pulumi.set(self, "inventory_tag_list", value)

    @property
    @pulumi.getter(name="migrationResourcesUserTags")
    def migration_resources_user_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
        """
        return pulumi.get(self, "migration_resources_user_tags")

    @migration_resources_user_tags.setter
    def migration_resources_user_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_resources_user_tags", value)


@pulumi.input_type
class AzureSourceDetailsArgs:
    def __init__(__self__, *,
                 azure_location: Optional[pulumi.Input[str]] = None,
                 client_secret_creds: Optional[pulumi.Input['ClientSecretCredentialsArgs']] = None,
                 migration_resources_user_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        AzureSourceDetails message describes a specific source details for the Azure source type.
        :param pulumi.Input[str] azure_location: Immutable. The Azure location (region) that the source VMs will be migrated from.
        :param pulumi.Input['ClientSecretCredentialsArgs'] client_secret_creds: Azure Credentials using tenant ID, client ID and secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] migration_resources_user_tags: User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
        :param pulumi.Input[str] subscription_id: Immutable. Azure subscription ID.
        """
        if azure_location is not None:
            pulumi.set(__self__, "azure_location", azure_location)
        if client_secret_creds is not None:
            pulumi.set(__self__, "client_secret_creds", client_secret_creds)
        if migration_resources_user_tags is not None:
            pulumi.set(__self__, "migration_resources_user_tags", migration_resources_user_tags)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The Azure location (region) that the source VMs will be migrated from.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_location", value)

    @property
    @pulumi.getter(name="clientSecretCreds")
    def client_secret_creds(self) -> Optional[pulumi.Input['ClientSecretCredentialsArgs']]:
        """
        Azure Credentials using tenant ID, client ID and secret.
        """
        return pulumi.get(self, "client_secret_creds")

    @client_secret_creds.setter
    def client_secret_creds(self, value: Optional[pulumi.Input['ClientSecretCredentialsArgs']]):
        pulumi.set(self, "client_secret_creds", value)

    @property
    @pulumi.getter(name="migrationResourcesUserTags")
    def migration_resources_user_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
        """
        return pulumi.get(self, "migration_resources_user_tags")

    @migration_resources_user_tags.setter
    def migration_resources_user_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "migration_resources_user_tags", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Azure subscription ID.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class BootDiskDefaultsArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input['BootDiskDefaultsDiskType']] = None,
                 encryption: Optional[pulumi.Input['EncryptionArgs']] = None,
                 image: Optional[pulumi.Input['DiskImageDefaultsArgs']] = None):
        """
        BootDiskDefaults hold information about the boot disk of a VM.
        :param pulumi.Input[str] device_name: Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        :param pulumi.Input[str] disk_name: Optional. The name of the disk.
        :param pulumi.Input['BootDiskDefaultsDiskType'] disk_type: Optional. The type of disk provisioning to use for the VM.
        :param pulumi.Input['EncryptionArgs'] encryption: Optional. The encryption to apply to the boot disk.
        :param pulumi.Input['DiskImageDefaultsArgs'] image: The image to use when creating the disk.
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the disk.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input['BootDiskDefaultsDiskType']]:
        """
        Optional. The type of disk provisioning to use for the VM.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input['BootDiskDefaultsDiskType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionArgs']]:
        """
        Optional. The encryption to apply to the boot disk.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['DiskImageDefaultsArgs']]:
        """
        The image to use when creating the disk.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['DiskImageDefaultsArgs']]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClientSecretCredentialsArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Message describing Azure Credentials using tenant ID, client ID and secret.
        :param pulumi.Input[str] client_id: Azure client ID.
        :param pulumi.Input[str] client_secret: Input only. Azure client secret.
        :param pulumi.Input[str] tenant_id: Azure tenant ID.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure client ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Azure client secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure tenant ID.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ComputeEngineDisksTargetDefaultsArgs:
    def __init__(__self__, *,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['PersistentDiskDefaultsArgs']]]] = None,
                 disks_target_defaults: Optional[pulumi.Input['DisksMigrationDisksTargetDefaultsArgs']] = None,
                 target_project: Optional[pulumi.Input[str]] = None,
                 vm_target_defaults: Optional[pulumi.Input['DisksMigrationVmTargetDefaultsArgs']] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
        :param pulumi.Input[Sequence[pulumi.Input['PersistentDiskDefaultsArgs']]] disks: The details of each Persistent Disk to create.
        :param pulumi.Input['DisksMigrationDisksTargetDefaultsArgs'] disks_target_defaults: Details of the disk only migration target.
        :param pulumi.Input[str] target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
        :param pulumi.Input['DisksMigrationVmTargetDefaultsArgs'] vm_target_defaults: Details of the VM migration target.
        :param pulumi.Input[str] zone: The zone in which to create the Persistent Disks.
        """
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if disks_target_defaults is not None:
            pulumi.set(__self__, "disks_target_defaults", disks_target_defaults)
        if target_project is not None:
            pulumi.set(__self__, "target_project", target_project)
        if vm_target_defaults is not None:
            pulumi.set(__self__, "vm_target_defaults", vm_target_defaults)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PersistentDiskDefaultsArgs']]]]:
        """
        The details of each Persistent Disk to create.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PersistentDiskDefaultsArgs']]]]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter(name="disksTargetDefaults")
    def disks_target_defaults(self) -> Optional[pulumi.Input['DisksMigrationDisksTargetDefaultsArgs']]:
        """
        Details of the disk only migration target.
        """
        return pulumi.get(self, "disks_target_defaults")

    @disks_target_defaults.setter
    def disks_target_defaults(self, value: Optional[pulumi.Input['DisksMigrationDisksTargetDefaultsArgs']]):
        pulumi.set(self, "disks_target_defaults", value)

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> Optional[pulumi.Input[str]]:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
        """
        return pulumi.get(self, "target_project")

    @target_project.setter
    def target_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_project", value)

    @property
    @pulumi.getter(name="vmTargetDefaults")
    def vm_target_defaults(self) -> Optional[pulumi.Input['DisksMigrationVmTargetDefaultsArgs']]:
        """
        Details of the VM migration target.
        """
        return pulumi.get(self, "vm_target_defaults")

    @vm_target_defaults.setter
    def vm_target_defaults(self, value: Optional[pulumi.Input['DisksMigrationVmTargetDefaultsArgs']]):
        pulumi.set(self, "vm_target_defaults", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone in which to create the Persistent Disks.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ComputeEngineTargetDefaultsArgs:
    def __init__(__self__, *,
                 additional_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compute_scheduling: Optional[pulumi.Input['ComputeSchedulingArgs']] = None,
                 disk_type: Optional[pulumi.Input['ComputeEngineTargetDefaultsDiskType']] = None,
                 encryption: Optional[pulumi.Input['EncryptionArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 license_type: Optional[pulumi.Input['ComputeEngineTargetDefaultsLicenseType']] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 machine_type_series: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]] = None,
                 network_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_boot: Optional[pulumi.Input[bool]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 target_project: Optional[pulumi.Input[str]] = None,
                 vm_name: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_licenses: Additional licenses to assign to the VM.
        :param pulumi.Input['ComputeSchedulingArgs'] compute_scheduling: Compute instance scheduling information (if empty default is used).
        :param pulumi.Input['ComputeEngineTargetDefaultsDiskType'] disk_type: The disk type to use in the VM.
        :param pulumi.Input['EncryptionArgs'] encryption: Optional. Immutable. The encryption to apply to the VM disks.
        :param pulumi.Input[str] hostname: The hostname to assign to the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of labels to associate with the VM.
        :param pulumi.Input['ComputeEngineTargetDefaultsLicenseType'] license_type: The license type to use in OS adaptation.
        :param pulumi.Input[str] machine_type: The machine type to create the VM with.
        :param pulumi.Input[str] machine_type_series: The machine type series to create the VM with.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: The metadata key/value pairs to assign to the VM.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]] network_interfaces: List of NICs connected to this VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_tags: A list of network tags to associate with the VM.
        :param pulumi.Input[bool] secure_boot: Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        :param pulumi.Input[str] service_account: The service account to associate the VM with.
        :param pulumi.Input[str] target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        :param pulumi.Input[str] vm_name: The name of the VM to create.
        :param pulumi.Input[str] zone: The zone in which to create the VM.
        """
        if additional_licenses is not None:
            pulumi.set(__self__, "additional_licenses", additional_licenses)
        if compute_scheduling is not None:
            pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if machine_type_series is not None:
            pulumi.set(__self__, "machine_type_series", machine_type_series)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if secure_boot is not None:
            pulumi.set(__self__, "secure_boot", secure_boot)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if target_project is not None:
            pulumi.set(__self__, "target_project", target_project)
        if vm_name is not None:
            pulumi.set(__self__, "vm_name", vm_name)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="additionalLicenses")
    def additional_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional licenses to assign to the VM.
        """
        return pulumi.get(self, "additional_licenses")

    @additional_licenses.setter
    def additional_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_licenses", value)

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> Optional[pulumi.Input['ComputeSchedulingArgs']]:
        """
        Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @compute_scheduling.setter
    def compute_scheduling(self, value: Optional[pulumi.Input['ComputeSchedulingArgs']]):
        pulumi.set(self, "compute_scheduling", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input['ComputeEngineTargetDefaultsDiskType']]:
        """
        The disk type to use in the VM.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input['ComputeEngineTargetDefaultsDiskType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionArgs']]:
        """
        Optional. Immutable. The encryption to apply to the VM disks.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname to assign to the VM.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input['ComputeEngineTargetDefaultsLicenseType']]:
        """
        The license type to use in OS adaptation.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input['ComputeEngineTargetDefaultsLicenseType']]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type series to create the VM with.
        """
        return pulumi.get(self, "machine_type_series")

    @machine_type_series.setter
    def machine_type_series(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type_series", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]:
        """
        List of NICs connected to this VM.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @network_tags.setter
    def network_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_tags", value)

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @secure_boot.setter
    def secure_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure_boot", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> Optional[pulumi.Input[str]]:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        """
        return pulumi.get(self, "target_project")

    @target_project.setter
    def target_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_project", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone in which to create the VM.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ComputeSchedulingArgs:
    def __init__(__self__, *,
                 automatic_restart: Optional[pulumi.Input[bool]] = None,
                 min_node_cpus: Optional[pulumi.Input[int]] = None,
                 node_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['SchedulingNodeAffinityArgs']]]] = None,
                 on_host_maintenance: Optional[pulumi.Input['ComputeSchedulingOnHostMaintenance']] = None,
                 restart_type: Optional[pulumi.Input['ComputeSchedulingRestartType']] = None):
        """
        Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
        :param pulumi.Input[int] min_node_cpus: The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
        :param pulumi.Input[Sequence[pulumi.Input['SchedulingNodeAffinityArgs']]] node_affinities: A set of node affinity and anti-affinity configurations for sole tenant nodes.
        :param pulumi.Input['ComputeSchedulingOnHostMaintenance'] on_host_maintenance: How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
        :param pulumi.Input['ComputeSchedulingRestartType'] restart_type: Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
        """
        if automatic_restart is not None:
            pulumi.set(__self__, "automatic_restart", automatic_restart)
        if min_node_cpus is not None:
            pulumi.set(__self__, "min_node_cpus", min_node_cpus)
        if node_affinities is not None:
            pulumi.set(__self__, "node_affinities", node_affinities)
        if on_host_maintenance is not None:
            pulumi.set(__self__, "on_host_maintenance", on_host_maintenance)
        if restart_type is not None:
            pulumi.set(__self__, "restart_type", restart_type)

    @property
    @pulumi.getter(name="automaticRestart")
    def automatic_restart(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automatic_restart")

    @automatic_restart.setter
    def automatic_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_restart", value)

    @property
    @pulumi.getter(name="minNodeCpus")
    def min_node_cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
        """
        return pulumi.get(self, "min_node_cpus")

    @min_node_cpus.setter
    def min_node_cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_cpus", value)

    @property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchedulingNodeAffinityArgs']]]]:
        """
        A set of node affinity and anti-affinity configurations for sole tenant nodes.
        """
        return pulumi.get(self, "node_affinities")

    @node_affinities.setter
    def node_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchedulingNodeAffinityArgs']]]]):
        pulumi.set(self, "node_affinities", value)

    @property
    @pulumi.getter(name="onHostMaintenance")
    def on_host_maintenance(self) -> Optional[pulumi.Input['ComputeSchedulingOnHostMaintenance']]:
        """
        How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
        """
        return pulumi.get(self, "on_host_maintenance")

    @on_host_maintenance.setter
    def on_host_maintenance(self, value: Optional[pulumi.Input['ComputeSchedulingOnHostMaintenance']]):
        pulumi.set(self, "on_host_maintenance", value)

    @property
    @pulumi.getter(name="restartType")
    def restart_type(self) -> Optional[pulumi.Input['ComputeSchedulingRestartType']]:
        """
        Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
        """
        return pulumi.get(self, "restart_type")

    @restart_type.setter
    def restart_type(self, value: Optional[pulumi.Input['ComputeSchedulingRestartType']]):
        pulumi.set(self, "restart_type", value)


@pulumi.input_type
class DiskImageDefaultsArgs:
    def __init__(__self__, *,
                 source_image: pulumi.Input[str]):
        """
        Contains details about the image source used to create the disk.
        :param pulumi.Input[str] source_image: The Image resource used when creating the disk.
        """
        pulumi.set(__self__, "source_image", source_image)

    @property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> pulumi.Input[str]:
        """
        The Image resource used when creating the disk.
        """
        return pulumi.get(self, "source_image")

    @source_image.setter
    def source_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_image", value)


@pulumi.input_type
class DisksMigrationDisksTargetDefaultsArgs:
    def __init__(__self__):
        """
        Details for a disk only migration.
        """
        pass


@pulumi.input_type
class DisksMigrationVmTargetDefaultsArgs:
    def __init__(__self__, *,
                 machine_type: pulumi.Input[str],
                 vm_name: pulumi.Input[str],
                 additional_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 boot_disk_defaults: Optional[pulumi.Input['BootDiskDefaultsArgs']] = None,
                 compute_scheduling: Optional[pulumi.Input['ComputeSchedulingArgs']] = None,
                 encryption: Optional[pulumi.Input['EncryptionArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 machine_type_series: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]] = None,
                 network_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_boot: Optional[pulumi.Input[bool]] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        """
        Details for creation of a VM that migrated data disks will be attached to.
        :param pulumi.Input[str] machine_type: The machine type to create the VM with.
        :param pulumi.Input[str] vm_name: The name of the VM to create.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_licenses: Optional. Additional licenses to assign to the VM.
        :param pulumi.Input['BootDiskDefaultsArgs'] boot_disk_defaults: Optional. Details of the boot disk of the VM.
        :param pulumi.Input['ComputeSchedulingArgs'] compute_scheduling: Optional. Compute instance scheduling information (if empty default is used).
        :param pulumi.Input['EncryptionArgs'] encryption: Optional. The encryption to apply to the VM.
        :param pulumi.Input[str] hostname: Optional. The hostname to assign to the VM.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. A map of labels to associate with the VM.
        :param pulumi.Input[str] machine_type_series: Optional. The machine type series to create the VM with. For presentation only.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Optional. The metadata key/value pairs to assign to the VM.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]] network_interfaces: Optional. NICs to attach to the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_tags: Optional. A list of network tags to associate with the VM.
        :param pulumi.Input[bool] secure_boot: Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        :param pulumi.Input[str] service_account: Optional. The service account to associate the VM with.
        """
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "vm_name", vm_name)
        if additional_licenses is not None:
            pulumi.set(__self__, "additional_licenses", additional_licenses)
        if boot_disk_defaults is not None:
            pulumi.set(__self__, "boot_disk_defaults", boot_disk_defaults)
        if compute_scheduling is not None:
            pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type_series is not None:
            pulumi.set(__self__, "machine_type_series", machine_type_series)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if secure_boot is not None:
            pulumi.set(__self__, "secure_boot", secure_boot)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Input[str]:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter(name="additionalLicenses")
    def additional_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. Additional licenses to assign to the VM.
        """
        return pulumi.get(self, "additional_licenses")

    @additional_licenses.setter
    def additional_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_licenses", value)

    @property
    @pulumi.getter(name="bootDiskDefaults")
    def boot_disk_defaults(self) -> Optional[pulumi.Input['BootDiskDefaultsArgs']]:
        """
        Optional. Details of the boot disk of the VM.
        """
        return pulumi.get(self, "boot_disk_defaults")

    @boot_disk_defaults.setter
    def boot_disk_defaults(self, value: Optional[pulumi.Input['BootDiskDefaultsArgs']]):
        pulumi.set(self, "boot_disk_defaults", value)

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> Optional[pulumi.Input['ComputeSchedulingArgs']]:
        """
        Optional. Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @compute_scheduling.setter
    def compute_scheduling(self, value: Optional[pulumi.Input['ComputeSchedulingArgs']]):
        pulumi.set(self, "compute_scheduling", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionArgs']]:
        """
        Optional. The encryption to apply to the VM.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The hostname to assign to the VM.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The machine type series to create the VM with. For presentation only.
        """
        return pulumi.get(self, "machine_type_series")

    @machine_type_series.setter
    def machine_type_series(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type_series", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]:
        """
        Optional. NICs to attach to the VM.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @network_tags.setter
    def network_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_tags", value)

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @secure_boot.setter
    def secure_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure_boot", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


@pulumi.input_type
class EncryptionArgs:
    def __init__(__self__, *,
                 kms_key: pulumi.Input[str]):
        """
        Encryption message describes the details of the applied encryption.
        :param pulumi.Input[str] kms_key: The name of the encryption key that is stored in Google Cloud KMS.
        """
        pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> pulumi.Input[str]:
        """
        The name of the encryption key that is stored in Google Cloud KMS.
        """
        return pulumi.get(self, "kms_key")

    @kms_key.setter
    def kms_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_key", value)


@pulumi.input_type
class NetworkInterfaceArgs:
    def __init__(__self__, *,
                 external_ip: Optional[pulumi.Input[str]] = None,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None):
        """
        NetworkInterface represents a NIC of a VM.
        :param pulumi.Input[str] external_ip: The external IP to define in the NIC.
        :param pulumi.Input[str] internal_ip: The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        :param pulumi.Input[str] network: The network to connect the NIC to.
        :param pulumi.Input[str] subnetwork: The subnetwork to connect the NIC to.
        """
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The external IP to define in the NIC.
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        """
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The network to connect the NIC to.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The subnetwork to connect the NIC to.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)


@pulumi.input_type
class PersistentDiskDefaultsArgs:
    def __init__(__self__, *,
                 source_disk_number: pulumi.Input[int],
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input['PersistentDiskDefaultsDiskType']] = None,
                 encryption: Optional[pulumi.Input['EncryptionArgs']] = None,
                 vm_attachment_details: Optional[pulumi.Input['VmAttachmentDetailsArgs']] = None):
        """
        Details for creation of a Persistent Disk.
        :param pulumi.Input[int] source_disk_number: The ordinal number of the source VM disk.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_labels: A map of labels to associate with the Persistent Disk.
        :param pulumi.Input[str] disk_name: Optional. The name of the Persistent Disk to create.
        :param pulumi.Input['PersistentDiskDefaultsDiskType'] disk_type: The disk type to use.
        :param pulumi.Input['EncryptionArgs'] encryption: Optional. The encryption to apply to the disk.
        :param pulumi.Input['VmAttachmentDetailsArgs'] vm_attachment_details: Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
        """
        pulumi.set(__self__, "source_disk_number", source_disk_number)
        if additional_labels is not None:
            pulumi.set(__self__, "additional_labels", additional_labels)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if vm_attachment_details is not None:
            pulumi.set(__self__, "vm_attachment_details", vm_attachment_details)

    @property
    @pulumi.getter(name="sourceDiskNumber")
    def source_disk_number(self) -> pulumi.Input[int]:
        """
        The ordinal number of the source VM disk.
        """
        return pulumi.get(self, "source_disk_number")

    @source_disk_number.setter
    def source_disk_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_disk_number", value)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of labels to associate with the Persistent Disk.
        """
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the Persistent Disk to create.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input['PersistentDiskDefaultsDiskType']]:
        """
        The disk type to use.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input['PersistentDiskDefaultsDiskType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionArgs']]:
        """
        Optional. The encryption to apply to the disk.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="vmAttachmentDetails")
    def vm_attachment_details(self) -> Optional[pulumi.Input['VmAttachmentDetailsArgs']]:
        """
        Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
        """
        return pulumi.get(self, "vm_attachment_details")

    @vm_attachment_details.setter
    def vm_attachment_details(self, value: Optional[pulumi.Input['VmAttachmentDetailsArgs']]):
        pulumi.set(self, "vm_attachment_details", value)


@pulumi.input_type
class SchedulePolicyArgs:
    def __init__(__self__, *,
                 idle_duration: Optional[pulumi.Input[str]] = None,
                 skip_os_adaptation: Optional[pulumi.Input[bool]] = None):
        """
        A policy for scheduling replications.
        :param pulumi.Input[str] idle_duration: The idle duration between replication stages.
        :param pulumi.Input[bool] skip_os_adaptation: A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
        """
        if idle_duration is not None:
            pulumi.set(__self__, "idle_duration", idle_duration)
        if skip_os_adaptation is not None:
            pulumi.set(__self__, "skip_os_adaptation", skip_os_adaptation)

    @property
    @pulumi.getter(name="idleDuration")
    def idle_duration(self) -> Optional[pulumi.Input[str]]:
        """
        The idle duration between replication stages.
        """
        return pulumi.get(self, "idle_duration")

    @idle_duration.setter
    def idle_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_duration", value)

    @property
    @pulumi.getter(name="skipOsAdaptation")
    def skip_os_adaptation(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
        """
        return pulumi.get(self, "skip_os_adaptation")

    @skip_os_adaptation.setter
    def skip_os_adaptation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_os_adaptation", value)


@pulumi.input_type
class SchedulingNodeAffinityArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input['SchedulingNodeAffinityOperator']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
        :param pulumi.Input[str] key: The label key of Node resource to reference.
        :param pulumi.Input['SchedulingNodeAffinityOperator'] operator: The operator to use for the node resources specified in the `values` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Corresponds to the label values of Node resource.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The label key of Node resource to reference.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input['SchedulingNodeAffinityOperator']]:
        """
        The operator to use for the node resources specified in the `values` parameter.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input['SchedulingNodeAffinityOperator']]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Corresponds to the label values of Node resource.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Tag is an AWS tag representation.
        :param pulumi.Input[str] key: Key of tag.
        :param pulumi.Input[str] value: Value of tag.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TargetVMDetailsArgs:
    def __init__(__self__, *,
                 compute_scheduling: Optional[pulumi.Input['ComputeSchedulingArgs']] = None,
                 disk_type: Optional[pulumi.Input['TargetVMDetailsDiskType']] = None,
                 external_ip: Optional[pulumi.Input[str]] = None,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 license_type: Optional[pulumi.Input['TargetVMDetailsLicenseType']] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 machine_type_series: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]] = None,
                 network_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_boot: Optional[pulumi.Input[bool]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 target_project: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
        :param pulumi.Input['ComputeSchedulingArgs'] compute_scheduling: Compute instance scheduling information (if empty default is used).
        :param pulumi.Input['TargetVMDetailsDiskType'] disk_type: The disk type to use in the VM.
        :param pulumi.Input[str] external_ip: The external IP to define in the VM.
        :param pulumi.Input[str] internal_ip: The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of labels to associate with the VM.
        :param pulumi.Input['TargetVMDetailsLicenseType'] license_type: The license type to use in OS adaptation.
        :param pulumi.Input[str] machine_type: The machine type to create the VM with.
        :param pulumi.Input[str] machine_type_series: The machine type series to create the VM with.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: The metadata key/value pairs to assign to the VM.
        :param pulumi.Input[str] name: The name of the VM to create.
        :param pulumi.Input[str] network: The network to connect the VM to.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]] network_interfaces: List of NICs connected to this VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_tags: A list of network tags to associate with the VM.
        :param pulumi.Input[bool] secure_boot: Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
        :param pulumi.Input[str] service_account: The service account to associate the VM with.
        :param pulumi.Input[str] subnetwork: The subnetwork to connect the VM to.
        :param pulumi.Input[str] target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        :param pulumi.Input[str] zone: The zone in which to create the VM.
        """
        if compute_scheduling is not None:
            pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if machine_type_series is not None:
            pulumi.set(__self__, "machine_type_series", machine_type_series)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if secure_boot is not None:
            pulumi.set(__self__, "secure_boot", secure_boot)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)
        if target_project is not None:
            pulumi.set(__self__, "target_project", target_project)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> Optional[pulumi.Input['ComputeSchedulingArgs']]:
        """
        Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @compute_scheduling.setter
    def compute_scheduling(self, value: Optional[pulumi.Input['ComputeSchedulingArgs']]):
        pulumi.set(self, "compute_scheduling", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input['TargetVMDetailsDiskType']]:
        """
        The disk type to use in the VM.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input['TargetVMDetailsDiskType']]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The external IP to define in the VM.
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        """
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input['TargetVMDetailsLicenseType']]:
        """
        The license type to use in OS adaptation.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input['TargetVMDetailsLicenseType']]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type series to create the VM with.
        """
        return pulumi.get(self, "machine_type_series")

    @machine_type_series.setter
    def machine_type_series(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type_series", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The network to connect the VM to.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]:
        """
        List of NICs connected to this VM.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @network_tags.setter
    def network_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_tags", value)

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @secure_boot.setter
    def secure_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure_boot", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The subnetwork to connect the VM to.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> Optional[pulumi.Input[str]]:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        """
        return pulumi.get(self, "target_project")

    @target_project.setter
    def target_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_project", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone in which to create the VM.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class VmAttachmentDetailsArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[str]] = None):
        """
        Details for attachment of the disk to a VM.
        :param pulumi.Input[str] device_name: Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)


@pulumi.input_type
class VmUtilizationInfoArgs:
    def __init__(__self__, *,
                 utilization: Optional[pulumi.Input['VmUtilizationMetricsArgs']] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vmware_vm_details: Optional[pulumi.Input['VmwareVmDetailsArgs']] = None):
        """
        Utilization information of a single VM.
        :param pulumi.Input['VmUtilizationMetricsArgs'] utilization: Utilization metrics for this VM.
        :param pulumi.Input[str] vm_id: The VM's ID in the source.
        :param pulumi.Input['VmwareVmDetailsArgs'] vmware_vm_details: The description of the VM in a Source of type Vmware.
        """
        if utilization is not None:
            pulumi.set(__self__, "utilization", utilization)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vmware_vm_details is not None:
            pulumi.set(__self__, "vmware_vm_details", vmware_vm_details)

    @property
    @pulumi.getter
    def utilization(self) -> Optional[pulumi.Input['VmUtilizationMetricsArgs']]:
        """
        Utilization metrics for this VM.
        """
        return pulumi.get(self, "utilization")

    @utilization.setter
    def utilization(self, value: Optional[pulumi.Input['VmUtilizationMetricsArgs']]):
        pulumi.set(self, "utilization", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VM's ID in the source.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmwareVmDetails")
    def vmware_vm_details(self) -> Optional[pulumi.Input['VmwareVmDetailsArgs']]:
        """
        The description of the VM in a Source of type Vmware.
        """
        return pulumi.get(self, "vmware_vm_details")

    @vmware_vm_details.setter
    def vmware_vm_details(self, value: Optional[pulumi.Input['VmwareVmDetailsArgs']]):
        pulumi.set(self, "vmware_vm_details", value)


@pulumi.input_type
class VmUtilizationMetricsArgs:
    def __init__(__self__, *,
                 cpu_average: Optional[pulumi.Input[int]] = None,
                 cpu_average_percent: Optional[pulumi.Input[int]] = None,
                 cpu_max: Optional[pulumi.Input[int]] = None,
                 cpu_max_percent: Optional[pulumi.Input[int]] = None,
                 disk_io_rate_average: Optional[pulumi.Input[str]] = None,
                 disk_io_rate_average_kbps: Optional[pulumi.Input[str]] = None,
                 disk_io_rate_max: Optional[pulumi.Input[str]] = None,
                 disk_io_rate_max_kbps: Optional[pulumi.Input[str]] = None,
                 memory_average: Optional[pulumi.Input[int]] = None,
                 memory_average_percent: Optional[pulumi.Input[int]] = None,
                 memory_max: Optional[pulumi.Input[int]] = None,
                 memory_max_percent: Optional[pulumi.Input[int]] = None,
                 network_throughput_average: Optional[pulumi.Input[str]] = None,
                 network_throughput_average_kbps: Optional[pulumi.Input[str]] = None,
                 network_throughput_max: Optional[pulumi.Input[str]] = None,
                 network_throughput_max_kbps: Optional[pulumi.Input[str]] = None):
        """
        Utilization metrics values for a single VM.
        :param pulumi.Input[int] cpu_average: Average CPU usage, percent.
        :param pulumi.Input[int] cpu_average_percent: Average CPU usage, percent.
        :param pulumi.Input[int] cpu_max: Max CPU usage, percent.
        :param pulumi.Input[int] cpu_max_percent: Max CPU usage, percent.
        :param pulumi.Input[str] disk_io_rate_average: Average disk IO rate, in kilobytes per second.
        :param pulumi.Input[str] disk_io_rate_average_kbps: Average disk IO rate, in kilobytes per second.
        :param pulumi.Input[str] disk_io_rate_max: Max disk IO rate, in kilobytes per second.
        :param pulumi.Input[str] disk_io_rate_max_kbps: Max disk IO rate, in kilobytes per second.
        :param pulumi.Input[int] memory_average: Average memory usage, percent.
        :param pulumi.Input[int] memory_average_percent: Average memory usage, percent.
        :param pulumi.Input[int] memory_max: Max memory usage, percent.
        :param pulumi.Input[int] memory_max_percent: Max memory usage, percent.
        :param pulumi.Input[str] network_throughput_average: Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param pulumi.Input[str] network_throughput_average_kbps: Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param pulumi.Input[str] network_throughput_max: Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param pulumi.Input[str] network_throughput_max_kbps: Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        if cpu_average is not None:
            pulumi.set(__self__, "cpu_average", cpu_average)
        if cpu_average_percent is not None:
            pulumi.set(__self__, "cpu_average_percent", cpu_average_percent)
        if cpu_max is not None:
            pulumi.set(__self__, "cpu_max", cpu_max)
        if cpu_max_percent is not None:
            pulumi.set(__self__, "cpu_max_percent", cpu_max_percent)
        if disk_io_rate_average is not None:
            pulumi.set(__self__, "disk_io_rate_average", disk_io_rate_average)
        if disk_io_rate_average_kbps is not None:
            pulumi.set(__self__, "disk_io_rate_average_kbps", disk_io_rate_average_kbps)
        if disk_io_rate_max is not None:
            pulumi.set(__self__, "disk_io_rate_max", disk_io_rate_max)
        if disk_io_rate_max_kbps is not None:
            pulumi.set(__self__, "disk_io_rate_max_kbps", disk_io_rate_max_kbps)
        if memory_average is not None:
            pulumi.set(__self__, "memory_average", memory_average)
        if memory_average_percent is not None:
            pulumi.set(__self__, "memory_average_percent", memory_average_percent)
        if memory_max is not None:
            pulumi.set(__self__, "memory_max", memory_max)
        if memory_max_percent is not None:
            pulumi.set(__self__, "memory_max_percent", memory_max_percent)
        if network_throughput_average is not None:
            pulumi.set(__self__, "network_throughput_average", network_throughput_average)
        if network_throughput_average_kbps is not None:
            pulumi.set(__self__, "network_throughput_average_kbps", network_throughput_average_kbps)
        if network_throughput_max is not None:
            pulumi.set(__self__, "network_throughput_max", network_throughput_max)
        if network_throughput_max_kbps is not None:
            pulumi.set(__self__, "network_throughput_max_kbps", network_throughput_max_kbps)

    @property
    @pulumi.getter(name="cpuAverage")
    def cpu_average(self) -> Optional[pulumi.Input[int]]:
        """
        Average CPU usage, percent.
        """
        return pulumi.get(self, "cpu_average")

    @cpu_average.setter
    def cpu_average(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_average", value)

    @property
    @pulumi.getter(name="cpuAveragePercent")
    def cpu_average_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Average CPU usage, percent.
        """
        return pulumi.get(self, "cpu_average_percent")

    @cpu_average_percent.setter
    def cpu_average_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_average_percent", value)

    @property
    @pulumi.getter(name="cpuMax")
    def cpu_max(self) -> Optional[pulumi.Input[int]]:
        """
        Max CPU usage, percent.
        """
        return pulumi.get(self, "cpu_max")

    @cpu_max.setter
    def cpu_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_max", value)

    @property
    @pulumi.getter(name="cpuMaxPercent")
    def cpu_max_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Max CPU usage, percent.
        """
        return pulumi.get(self, "cpu_max_percent")

    @cpu_max_percent.setter
    def cpu_max_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_max_percent", value)

    @property
    @pulumi.getter(name="diskIoRateAverage")
    def disk_io_rate_average(self) -> Optional[pulumi.Input[str]]:
        """
        Average disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_average")

    @disk_io_rate_average.setter
    def disk_io_rate_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_io_rate_average", value)

    @property
    @pulumi.getter(name="diskIoRateAverageKbps")
    def disk_io_rate_average_kbps(self) -> Optional[pulumi.Input[str]]:
        """
        Average disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_average_kbps")

    @disk_io_rate_average_kbps.setter
    def disk_io_rate_average_kbps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_io_rate_average_kbps", value)

    @property
    @pulumi.getter(name="diskIoRateMax")
    def disk_io_rate_max(self) -> Optional[pulumi.Input[str]]:
        """
        Max disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_max")

    @disk_io_rate_max.setter
    def disk_io_rate_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_io_rate_max", value)

    @property
    @pulumi.getter(name="diskIoRateMaxKbps")
    def disk_io_rate_max_kbps(self) -> Optional[pulumi.Input[str]]:
        """
        Max disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_max_kbps")

    @disk_io_rate_max_kbps.setter
    def disk_io_rate_max_kbps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_io_rate_max_kbps", value)

    @property
    @pulumi.getter(name="memoryAverage")
    def memory_average(self) -> Optional[pulumi.Input[int]]:
        """
        Average memory usage, percent.
        """
        return pulumi.get(self, "memory_average")

    @memory_average.setter
    def memory_average(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_average", value)

    @property
    @pulumi.getter(name="memoryAveragePercent")
    def memory_average_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Average memory usage, percent.
        """
        return pulumi.get(self, "memory_average_percent")

    @memory_average_percent.setter
    def memory_average_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_average_percent", value)

    @property
    @pulumi.getter(name="memoryMax")
    def memory_max(self) -> Optional[pulumi.Input[int]]:
        """
        Max memory usage, percent.
        """
        return pulumi.get(self, "memory_max")

    @memory_max.setter
    def memory_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_max", value)

    @property
    @pulumi.getter(name="memoryMaxPercent")
    def memory_max_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Max memory usage, percent.
        """
        return pulumi.get(self, "memory_max_percent")

    @memory_max_percent.setter
    def memory_max_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_max_percent", value)

    @property
    @pulumi.getter(name="networkThroughputAverage")
    def network_throughput_average(self) -> Optional[pulumi.Input[str]]:
        """
        Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_average")

    @network_throughput_average.setter
    def network_throughput_average(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_throughput_average", value)

    @property
    @pulumi.getter(name="networkThroughputAverageKbps")
    def network_throughput_average_kbps(self) -> Optional[pulumi.Input[str]]:
        """
        Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_average_kbps")

    @network_throughput_average_kbps.setter
    def network_throughput_average_kbps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_throughput_average_kbps", value)

    @property
    @pulumi.getter(name="networkThroughputMax")
    def network_throughput_max(self) -> Optional[pulumi.Input[str]]:
        """
        Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_max")

    @network_throughput_max.setter
    def network_throughput_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_throughput_max", value)

    @property
    @pulumi.getter(name="networkThroughputMaxKbps")
    def network_throughput_max_kbps(self) -> Optional[pulumi.Input[str]]:
        """
        Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_max_kbps")

    @network_throughput_max_kbps.setter
    def network_throughput_max_kbps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_throughput_max_kbps", value)


@pulumi.input_type
class VmwareSourceDetailsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 resolved_vcenter_host: Optional[pulumi.Input[str]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vcenter_ip: Optional[pulumi.Input[str]] = None):
        """
        VmwareSourceDetails message describes a specific source details for the vmware source type.
        :param pulumi.Input[str] password: Input only. The credentials password. This is write only and can not be read in a GET operation.
        :param pulumi.Input[str] resolved_vcenter_host: The hostname of the vcenter.
        :param pulumi.Input[str] thumbprint: The thumbprint representing the certificate for the vcenter.
        :param pulumi.Input[str] username: The credentials username.
        :param pulumi.Input[str] vcenter_ip: The ip address of the vcenter this Source represents.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if resolved_vcenter_host is not None:
            pulumi.set(__self__, "resolved_vcenter_host", resolved_vcenter_host)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vcenter_ip is not None:
            pulumi.set(__self__, "vcenter_ip", vcenter_ip)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. The credentials password. This is write only and can not be read in a GET operation.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="resolvedVcenterHost")
    def resolved_vcenter_host(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the vcenter.
        """
        return pulumi.get(self, "resolved_vcenter_host")

    @resolved_vcenter_host.setter
    def resolved_vcenter_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolved_vcenter_host", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        """
        The thumbprint representing the certificate for the vcenter.
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vcenterIp")
    def vcenter_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The ip address of the vcenter this Source represents.
        """
        return pulumi.get(self, "vcenter_ip")

    @vcenter_ip.setter
    def vcenter_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_ip", value)


@pulumi.input_type
class VmwareVmDetailsArgs:
    def __init__(__self__, *,
                 committed_storage: Optional[pulumi.Input[str]] = None,
                 committed_storage_mb: Optional[pulumi.Input[str]] = None,
                 cpu_count: Optional[pulumi.Input[int]] = None,
                 datacenter_description: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 disk_count: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 guest_description: Optional[pulumi.Input[str]] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 power_state: Optional[pulumi.Input['VmwareVmDetailsPowerState']] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        """
        VmwareVmDetails describes a VM in vCenter.
        :param pulumi.Input[str] committed_storage: The total size of the storage allocated to the VM in MB.
        :param pulumi.Input[str] committed_storage_mb: The total size of the storage allocated to the VM in MB.
        :param pulumi.Input[int] cpu_count: The number of cpus in the VM.
        :param pulumi.Input[str] datacenter_description: The descriptive name of the vCenter's datacenter this VM is contained in.
        :param pulumi.Input[str] datacenter_id: The id of the vCenter's datacenter this VM is contained in.
        :param pulumi.Input[int] disk_count: The number of disks the VM has.
        :param pulumi.Input[str] display_name: The display name of the VM. Note that this is not necessarily unique.
        :param pulumi.Input[str] guest_description: The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
        :param pulumi.Input[int] memory_mb: The size of the memory of the VM in MB.
        :param pulumi.Input['VmwareVmDetailsPowerState'] power_state: The power state of the VM at the moment list was taken.
        :param pulumi.Input[str] uuid: The unique identifier of the VM in vCenter.
        :param pulumi.Input[str] vm_id: The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
        """
        if committed_storage is not None:
            pulumi.set(__self__, "committed_storage", committed_storage)
        if committed_storage_mb is not None:
            pulumi.set(__self__, "committed_storage_mb", committed_storage_mb)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if datacenter_description is not None:
            pulumi.set(__self__, "datacenter_description", datacenter_description)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if guest_description is not None:
            pulumi.set(__self__, "guest_description", guest_description)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="committedStorage")
    def committed_storage(self) -> Optional[pulumi.Input[str]]:
        """
        The total size of the storage allocated to the VM in MB.
        """
        return pulumi.get(self, "committed_storage")

    @committed_storage.setter
    def committed_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "committed_storage", value)

    @property
    @pulumi.getter(name="committedStorageMb")
    def committed_storage_mb(self) -> Optional[pulumi.Input[str]]:
        """
        The total size of the storage allocated to the VM in MB.
        """
        return pulumi.get(self, "committed_storage_mb")

    @committed_storage_mb.setter
    def committed_storage_mb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "committed_storage_mb", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of cpus in the VM.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="datacenterDescription")
    def datacenter_description(self) -> Optional[pulumi.Input[str]]:
        """
        The descriptive name of the vCenter's datacenter this VM is contained in.
        """
        return pulumi.get(self, "datacenter_description")

    @datacenter_description.setter
    def datacenter_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_description", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vCenter's datacenter this VM is contained in.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of disks the VM has.
        """
        return pulumi.get(self, "disk_count")

    @disk_count.setter
    def disk_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_count", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the VM. Note that this is not necessarily unique.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="guestDescription")
    def guest_description(self) -> Optional[pulumi.Input[str]]:
        """
        The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
        """
        return pulumi.get(self, "guest_description")

    @guest_description.setter
    def guest_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_description", value)

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the memory of the VM in MB.
        """
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[pulumi.Input['VmwareVmDetailsPowerState']]:
        """
        The power state of the VM at the moment list was taken.
        """
        return pulumi.get(self, "power_state")

    @power_state.setter
    def power_state(self, value: Optional[pulumi.Input['VmwareVmDetailsPowerState']]):
        pulumi.set(self, "power_state", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the VM in vCenter.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


