# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSecurityProfileResult',
    'AwaitableGetSecurityProfileResult',
    'get_security_profile',
    'get_security_profile_output',
]

@pulumi.output_type
class GetSecurityProfileResult:
    def __init__(__self__, description=None, display_name=None, environments=None, max_score=None, min_score=None, name=None, profile_config=None, revision_create_time=None, revision_id=None, revision_publish_time=None, revision_update_time=None, scoring_configs=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if max_score and not isinstance(max_score, int):
            raise TypeError("Expected argument 'max_score' to be a int")
        pulumi.set(__self__, "max_score", max_score)
        if min_score and not isinstance(min_score, int):
            raise TypeError("Expected argument 'min_score' to be a int")
        pulumi.set(__self__, "min_score", min_score)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profile_config and not isinstance(profile_config, dict):
            raise TypeError("Expected argument 'profile_config' to be a dict")
        pulumi.set(__self__, "profile_config", profile_config)
        if revision_create_time and not isinstance(revision_create_time, str):
            raise TypeError("Expected argument 'revision_create_time' to be a str")
        pulumi.set(__self__, "revision_create_time", revision_create_time)
        if revision_id and not isinstance(revision_id, str):
            raise TypeError("Expected argument 'revision_id' to be a str")
        pulumi.set(__self__, "revision_id", revision_id)
        if revision_publish_time and not isinstance(revision_publish_time, str):
            raise TypeError("Expected argument 'revision_publish_time' to be a str")
        pulumi.set(__self__, "revision_publish_time", revision_publish_time)
        if revision_update_time and not isinstance(revision_update_time, str):
            raise TypeError("Expected argument 'revision_update_time' to be a str")
        pulumi.set(__self__, "revision_update_time", revision_update_time)
        if scoring_configs and not isinstance(scoring_configs, list):
            raise TypeError("Expected argument 'scoring_configs' to be a list")
        pulumi.set(__self__, "scoring_configs", scoring_configs)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the security profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    @_utilities.deprecated("""DEPRECATED: DO NOT USE Display name of the security profile.""")
    def display_name(self) -> str:
        """
        DEPRECATED: DO NOT USE Display name of the security profile.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GoogleCloudApigeeV1SecurityProfileEnvironmentResponse']:
        """
        List of environments attached to security profile.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="maxScore")
    def max_score(self) -> int:
        """
        Maximum security score that can be generated by this profile.
        """
        return pulumi.get(self, "max_score")

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> int:
        """
        Minimum security score that can be generated by this profile.
        """
        return pulumi.get(self, "min_score")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Name of the security profile resource. Format: organizations/{org}/securityProfiles/{profile}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileConfig")
    def profile_config(self) -> 'outputs.GoogleCloudApigeeV1ProfileConfigResponse':
        """
        Customized profile configuration that computes the security score.
        """
        return pulumi.get(self, "profile_config")

    @property
    @pulumi.getter(name="revisionCreateTime")
    def revision_create_time(self) -> str:
        """
        The time when revision was created.
        """
        return pulumi.get(self, "revision_create_time")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> str:
        """
        Revision ID of the security profile.
        """
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter(name="revisionPublishTime")
    @_utilities.deprecated("""Output only. DEPRECATED: DO NOT USE The time when revision was published. Once published, the security profile revision cannot be updated further and can be attached to environments.""")
    def revision_publish_time(self) -> str:
        """
        DEPRECATED: DO NOT USE The time when revision was published. Once published, the security profile revision cannot be updated further and can be attached to environments.
        """
        return pulumi.get(self, "revision_publish_time")

    @property
    @pulumi.getter(name="revisionUpdateTime")
    def revision_update_time(self) -> str:
        """
        The time when revision was updated.
        """
        return pulumi.get(self, "revision_update_time")

    @property
    @pulumi.getter(name="scoringConfigs")
    def scoring_configs(self) -> Sequence['outputs.GoogleCloudApigeeV1SecurityProfileScoringConfigResponse']:
        """
        List of profile scoring configs in this revision.
        """
        return pulumi.get(self, "scoring_configs")


class AwaitableGetSecurityProfileResult(GetSecurityProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityProfileResult(
            description=self.description,
            display_name=self.display_name,
            environments=self.environments,
            max_score=self.max_score,
            min_score=self.min_score,
            name=self.name,
            profile_config=self.profile_config,
            revision_create_time=self.revision_create_time,
            revision_id=self.revision_id,
            revision_publish_time=self.revision_publish_time,
            revision_update_time=self.revision_update_time,
            scoring_configs=self.scoring_configs)


def get_security_profile(organization_id: Optional[str] = None,
                         security_profile_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityProfileResult:
    """
    GetSecurityProfile gets the specified security profile. Returns NOT_FOUND if security profile is not present for the specified organization.
    """
    __args__ = dict()
    __args__['organizationId'] = organization_id
    __args__['securityProfileId'] = security_profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getSecurityProfile', __args__, opts=opts, typ=GetSecurityProfileResult).value

    return AwaitableGetSecurityProfileResult(
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        environments=pulumi.get(__ret__, 'environments'),
        max_score=pulumi.get(__ret__, 'max_score'),
        min_score=pulumi.get(__ret__, 'min_score'),
        name=pulumi.get(__ret__, 'name'),
        profile_config=pulumi.get(__ret__, 'profile_config'),
        revision_create_time=pulumi.get(__ret__, 'revision_create_time'),
        revision_id=pulumi.get(__ret__, 'revision_id'),
        revision_publish_time=pulumi.get(__ret__, 'revision_publish_time'),
        revision_update_time=pulumi.get(__ret__, 'revision_update_time'),
        scoring_configs=pulumi.get(__ret__, 'scoring_configs'))


@_utilities.lift_output_func(get_security_profile)
def get_security_profile_output(organization_id: Optional[pulumi.Input[str]] = None,
                                security_profile_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityProfileResult]:
    """
    GetSecurityProfile gets the specified security profile. Returns NOT_FOUND if security profile is not present for the specified organization.
    """
    ...
