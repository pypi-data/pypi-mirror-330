# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GooglePrivacyDlpV2ActionArgs',
    'GooglePrivacyDlpV2AllInfoTypesArgs',
    'GooglePrivacyDlpV2AllOtherBigQueryTablesArgs',
    'GooglePrivacyDlpV2AllTextArgs',
    'GooglePrivacyDlpV2AuxiliaryTableArgs',
    'GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs',
    'GooglePrivacyDlpV2BigQueryFieldArgs',
    'GooglePrivacyDlpV2BigQueryOptionsArgs',
    'GooglePrivacyDlpV2BigQueryRegexesArgs',
    'GooglePrivacyDlpV2BigQueryRegexArgs',
    'GooglePrivacyDlpV2BigQueryTableCollectionArgs',
    'GooglePrivacyDlpV2BigQueryTableTypesArgs',
    'GooglePrivacyDlpV2BigQueryTableArgs',
    'GooglePrivacyDlpV2BucketingConfigArgs',
    'GooglePrivacyDlpV2BucketArgs',
    'GooglePrivacyDlpV2CategoricalStatsConfigArgs',
    'GooglePrivacyDlpV2CharacterMaskConfigArgs',
    'GooglePrivacyDlpV2CharsToIgnoreArgs',
    'GooglePrivacyDlpV2CloudStorageFileSetArgs',
    'GooglePrivacyDlpV2CloudStorageOptionsArgs',
    'GooglePrivacyDlpV2CloudStoragePathArgs',
    'GooglePrivacyDlpV2CloudStorageRegexFileSetArgs',
    'GooglePrivacyDlpV2ColorArgs',
    'GooglePrivacyDlpV2ConditionsArgs',
    'GooglePrivacyDlpV2ConditionArgs',
    'GooglePrivacyDlpV2CryptoDeterministicConfigArgs',
    'GooglePrivacyDlpV2CryptoHashConfigArgs',
    'GooglePrivacyDlpV2CryptoKeyArgs',
    'GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs',
    'GooglePrivacyDlpV2CustomInfoTypeArgs',
    'GooglePrivacyDlpV2DataProfileActionArgs',
    'GooglePrivacyDlpV2DataProfilePubSubConditionArgs',
    'GooglePrivacyDlpV2DatastoreOptionsArgs',
    'GooglePrivacyDlpV2DateShiftConfigArgs',
    'GooglePrivacyDlpV2DeidentifyConfigArgs',
    'GooglePrivacyDlpV2DeidentifyArgs',
    'GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs',
    'GooglePrivacyDlpV2DetectionRuleArgs',
    'GooglePrivacyDlpV2DictionaryArgs',
    'GooglePrivacyDlpV2DisabledArgs',
    'GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs',
    'GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs',
    'GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs',
    'GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs',
    'GooglePrivacyDlpV2DiscoveryStartingLocationArgs',
    'GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs',
    'GooglePrivacyDlpV2DiscoveryTargetArgs',
    'GooglePrivacyDlpV2EntityIdArgs',
    'GooglePrivacyDlpV2ExcludeByHotwordArgs',
    'GooglePrivacyDlpV2ExcludeInfoTypesArgs',
    'GooglePrivacyDlpV2ExclusionRuleArgs',
    'GooglePrivacyDlpV2ExportArgs',
    'GooglePrivacyDlpV2ExpressionsArgs',
    'GooglePrivacyDlpV2FieldIdArgs',
    'GooglePrivacyDlpV2FieldTransformationArgs',
    'GooglePrivacyDlpV2FileSetArgs',
    'GooglePrivacyDlpV2FindingLimitsArgs',
    'GooglePrivacyDlpV2FixedSizeBucketingConfigArgs',
    'GooglePrivacyDlpV2HotwordRuleArgs',
    'GooglePrivacyDlpV2HybridOptionsArgs',
    'GooglePrivacyDlpV2ImageTransformationsArgs',
    'GooglePrivacyDlpV2ImageTransformationArgs',
    'GooglePrivacyDlpV2InfoTypeLikelihoodArgs',
    'GooglePrivacyDlpV2InfoTypeLimitArgs',
    'GooglePrivacyDlpV2InfoTypeTransformationsArgs',
    'GooglePrivacyDlpV2InfoTypeTransformationArgs',
    'GooglePrivacyDlpV2InfoTypeArgs',
    'GooglePrivacyDlpV2InspectConfigArgs',
    'GooglePrivacyDlpV2InspectJobConfigArgs',
    'GooglePrivacyDlpV2InspectionRuleSetArgs',
    'GooglePrivacyDlpV2InspectionRuleArgs',
    'GooglePrivacyDlpV2JobNotificationEmailsArgs',
    'GooglePrivacyDlpV2KAnonymityConfigArgs',
    'GooglePrivacyDlpV2KMapEstimationConfigArgs',
    'GooglePrivacyDlpV2KindExpressionArgs',
    'GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs',
    'GooglePrivacyDlpV2LDiversityConfigArgs',
    'GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs',
    'GooglePrivacyDlpV2LeaveUntransformedArgs',
    'GooglePrivacyDlpV2LikelihoodAdjustmentArgs',
    'GooglePrivacyDlpV2ManualArgs',
    'GooglePrivacyDlpV2NumericalStatsConfigArgs',
    'GooglePrivacyDlpV2OrConditionsArgs',
    'GooglePrivacyDlpV2OrgConfigArgs',
    'GooglePrivacyDlpV2OutputStorageConfigArgs',
    'GooglePrivacyDlpV2PartitionIdArgs',
    'GooglePrivacyDlpV2PrimitiveTransformationArgs',
    'GooglePrivacyDlpV2PrivacyMetricArgs',
    'GooglePrivacyDlpV2ProximityArgs',
    'GooglePrivacyDlpV2PubSubConditionArgs',
    'GooglePrivacyDlpV2PubSubExpressionsArgs',
    'GooglePrivacyDlpV2PubSubNotificationArgs',
    'GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs',
    'GooglePrivacyDlpV2PublishSummaryToCsccArgs',
    'GooglePrivacyDlpV2PublishToPubSubArgs',
    'GooglePrivacyDlpV2PublishToStackdriverArgs',
    'GooglePrivacyDlpV2QuasiIdFieldArgs',
    'GooglePrivacyDlpV2QuasiIdentifierFieldArgs',
    'GooglePrivacyDlpV2QuasiIdArgs',
    'GooglePrivacyDlpV2RecordConditionArgs',
    'GooglePrivacyDlpV2RecordSuppressionArgs',
    'GooglePrivacyDlpV2RecordTransformationsArgs',
    'GooglePrivacyDlpV2RedactConfigArgs',
    'GooglePrivacyDlpV2RegexArgs',
    'GooglePrivacyDlpV2ReplaceDictionaryConfigArgs',
    'GooglePrivacyDlpV2ReplaceValueConfigArgs',
    'GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs',
    'GooglePrivacyDlpV2RiskAnalysisJobConfigArgs',
    'GooglePrivacyDlpV2SaveFindingsArgs',
    'GooglePrivacyDlpV2ScheduleArgs',
    'GooglePrivacyDlpV2SelectedInfoTypesArgs',
    'GooglePrivacyDlpV2SensitivityScoreArgs',
    'GooglePrivacyDlpV2StatisticalTableArgs',
    'GooglePrivacyDlpV2StorageConfigArgs',
    'GooglePrivacyDlpV2StoredInfoTypeConfigArgs',
    'GooglePrivacyDlpV2StoredTypeArgs',
    'GooglePrivacyDlpV2SurrogateTypeArgs',
    'GooglePrivacyDlpV2TableOptionsArgs',
    'GooglePrivacyDlpV2TaggedFieldArgs',
    'GooglePrivacyDlpV2ThrowErrorArgs',
    'GooglePrivacyDlpV2TimePartConfigArgs',
    'GooglePrivacyDlpV2TimespanConfigArgs',
    'GooglePrivacyDlpV2TransformationConfigArgs',
    'GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs',
    'GooglePrivacyDlpV2TransformationErrorHandlingArgs',
    'GooglePrivacyDlpV2TransientCryptoKeyArgs',
    'GooglePrivacyDlpV2TriggerArgs',
    'GooglePrivacyDlpV2UnwrappedCryptoKeyArgs',
    'GooglePrivacyDlpV2ValueArgs',
    'GooglePrivacyDlpV2WordListArgs',
    'GoogleProtobufEmptyArgs',
    'GoogleTypeDateArgs',
    'GoogleTypeTimeOfDayArgs',
]

@pulumi.input_type
class GooglePrivacyDlpV2ActionArgs:
    def __init__(__self__, *,
                 deidentify: Optional[pulumi.Input['GooglePrivacyDlpV2DeidentifyArgs']] = None,
                 job_notification_emails: Optional[pulumi.Input['GooglePrivacyDlpV2JobNotificationEmailsArgs']] = None,
                 pub_sub: Optional[pulumi.Input['GooglePrivacyDlpV2PublishToPubSubArgs']] = None,
                 publish_findings_to_cloud_data_catalog: Optional[pulumi.Input['GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs']] = None,
                 publish_summary_to_cscc: Optional[pulumi.Input['GooglePrivacyDlpV2PublishSummaryToCsccArgs']] = None,
                 publish_to_stackdriver: Optional[pulumi.Input['GooglePrivacyDlpV2PublishToStackdriverArgs']] = None,
                 save_findings: Optional[pulumi.Input['GooglePrivacyDlpV2SaveFindingsArgs']] = None):
        """
        A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
        :param pulumi.Input['GooglePrivacyDlpV2DeidentifyArgs'] deidentify: Create a de-identified copy of the input data.
        :param pulumi.Input['GooglePrivacyDlpV2JobNotificationEmailsArgs'] job_notification_emails: Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
        :param pulumi.Input['GooglePrivacyDlpV2PublishToPubSubArgs'] pub_sub: Publish a notification to a Pub/Sub topic.
        :param pulumi.Input['GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs'] publish_findings_to_cloud_data_catalog: Publish findings to Cloud Datahub.
        :param pulumi.Input['GooglePrivacyDlpV2PublishSummaryToCsccArgs'] publish_summary_to_cscc: Publish summary to Cloud Security Command Center (Alpha).
        :param pulumi.Input['GooglePrivacyDlpV2PublishToStackdriverArgs'] publish_to_stackdriver: Enable Stackdriver metric dlp.googleapis.com/finding_count.
        :param pulumi.Input['GooglePrivacyDlpV2SaveFindingsArgs'] save_findings: Save resulting findings in a provided location.
        """
        if deidentify is not None:
            pulumi.set(__self__, "deidentify", deidentify)
        if job_notification_emails is not None:
            pulumi.set(__self__, "job_notification_emails", job_notification_emails)
        if pub_sub is not None:
            pulumi.set(__self__, "pub_sub", pub_sub)
        if publish_findings_to_cloud_data_catalog is not None:
            pulumi.set(__self__, "publish_findings_to_cloud_data_catalog", publish_findings_to_cloud_data_catalog)
        if publish_summary_to_cscc is not None:
            pulumi.set(__self__, "publish_summary_to_cscc", publish_summary_to_cscc)
        if publish_to_stackdriver is not None:
            pulumi.set(__self__, "publish_to_stackdriver", publish_to_stackdriver)
        if save_findings is not None:
            pulumi.set(__self__, "save_findings", save_findings)

    @property
    @pulumi.getter
    def deidentify(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DeidentifyArgs']]:
        """
        Create a de-identified copy of the input data.
        """
        return pulumi.get(self, "deidentify")

    @deidentify.setter
    def deidentify(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DeidentifyArgs']]):
        pulumi.set(self, "deidentify", value)

    @property
    @pulumi.getter(name="jobNotificationEmails")
    def job_notification_emails(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2JobNotificationEmailsArgs']]:
        """
        Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
        """
        return pulumi.get(self, "job_notification_emails")

    @job_notification_emails.setter
    def job_notification_emails(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2JobNotificationEmailsArgs']]):
        pulumi.set(self, "job_notification_emails", value)

    @property
    @pulumi.getter(name="pubSub")
    def pub_sub(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PublishToPubSubArgs']]:
        """
        Publish a notification to a Pub/Sub topic.
        """
        return pulumi.get(self, "pub_sub")

    @pub_sub.setter
    def pub_sub(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PublishToPubSubArgs']]):
        pulumi.set(self, "pub_sub", value)

    @property
    @pulumi.getter(name="publishFindingsToCloudDataCatalog")
    def publish_findings_to_cloud_data_catalog(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs']]:
        """
        Publish findings to Cloud Datahub.
        """
        return pulumi.get(self, "publish_findings_to_cloud_data_catalog")

    @publish_findings_to_cloud_data_catalog.setter
    def publish_findings_to_cloud_data_catalog(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs']]):
        pulumi.set(self, "publish_findings_to_cloud_data_catalog", value)

    @property
    @pulumi.getter(name="publishSummaryToCscc")
    def publish_summary_to_cscc(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PublishSummaryToCsccArgs']]:
        """
        Publish summary to Cloud Security Command Center (Alpha).
        """
        return pulumi.get(self, "publish_summary_to_cscc")

    @publish_summary_to_cscc.setter
    def publish_summary_to_cscc(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PublishSummaryToCsccArgs']]):
        pulumi.set(self, "publish_summary_to_cscc", value)

    @property
    @pulumi.getter(name="publishToStackdriver")
    def publish_to_stackdriver(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PublishToStackdriverArgs']]:
        """
        Enable Stackdriver metric dlp.googleapis.com/finding_count.
        """
        return pulumi.get(self, "publish_to_stackdriver")

    @publish_to_stackdriver.setter
    def publish_to_stackdriver(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PublishToStackdriverArgs']]):
        pulumi.set(self, "publish_to_stackdriver", value)

    @property
    @pulumi.getter(name="saveFindings")
    def save_findings(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SaveFindingsArgs']]:
        """
        Save resulting findings in a provided location.
        """
        return pulumi.get(self, "save_findings")

    @save_findings.setter
    def save_findings(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SaveFindingsArgs']]):
        pulumi.set(self, "save_findings", value)


@pulumi.input_type
class GooglePrivacyDlpV2AllInfoTypesArgs:
    def __init__(__self__):
        """
        Apply transformation to all findings.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2AllOtherBigQueryTablesArgs:
    def __init__(__self__):
        """
        Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2AllTextArgs:
    def __init__(__self__):
        """
        Apply to all text.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2AuxiliaryTableArgs:
    def __init__(__self__, *,
                 quasi_ids: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdFieldArgs']]],
                 relative_frequency: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'],
                 table: pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']):
        """
        An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdFieldArgs']]] quasi_ids: Quasi-identifier columns.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] relative_frequency: The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table: Auxiliary table location.
        """
        pulumi.set(__self__, "quasi_ids", quasi_ids)
        pulumi.set(__self__, "relative_frequency", relative_frequency)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdFieldArgs']]]:
        """
        Quasi-identifier columns.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdFieldArgs']]]):
        pulumi.set(self, "quasi_ids", value)

    @property
    @pulumi.getter(name="relativeFrequency")
    def relative_frequency(self) -> pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']:
        """
        The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
        """
        return pulumi.get(self, "relative_frequency")

    @relative_frequency.setter
    def relative_frequency(self, value: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']):
        pulumi.set(self, "relative_frequency", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']:
        """
        Auxiliary table location.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']):
        pulumi.set(self, "table", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs'],
                 cadence: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs']] = None,
                 conditions: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs']] = None,
                 disabled: Optional[pulumi.Input['GooglePrivacyDlpV2DisabledArgs']] = None):
        """
        Target used to match against for discovery with BigQuery tables
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs'] filter: The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs'] cadence: How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs'] conditions: In addition to matching the filter, these conditions must be true before a profile is generated.
        :param pulumi.Input['GooglePrivacyDlpV2DisabledArgs'] disabled: Tables that match this filter will not have profiles created.
        """
        pulumi.set(__self__, "filter", filter)
        if cadence is not None:
            pulumi.set(__self__, "cadence", cadence)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs']:
        """
        The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def cadence(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs']]:
        """
        How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
        """
        return pulumi.get(self, "cadence")

    @cadence.setter
    def cadence(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs']]):
        pulumi.set(self, "cadence", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs']]:
        """
        In addition to matching the filter, these conditions must be true before a profile is generated.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DisabledArgs']]:
        """
        Tables that match this filter will not have profiles created.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DisabledArgs']]):
        pulumi.set(self, "disabled", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryFieldArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None,
                 table: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        Message defining a field of a BigQuery table.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Designated field in the BigQuery table.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table: Source table of the field.
        """
        if field is not None:
            pulumi.set(__self__, "field", field)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Designated field in the BigQuery table.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        Source table of the field.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryOptionsArgs:
    def __init__(__self__, *,
                 excluded_fields: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None,
                 identifying_fields: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None,
                 included_fields: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None,
                 rows_limit: Optional[pulumi.Input[str]] = None,
                 rows_limit_percent: Optional[pulumi.Input[int]] = None,
                 sample_method: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsSampleMethod']] = None,
                 table_reference: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        Options defining BigQuery table and row identifiers.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] excluded_fields: References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] identifying_fields: Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] included_fields: Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
        :param pulumi.Input[str] rows_limit: Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
        :param pulumi.Input[int] rows_limit_percent: Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table_reference: Complete BigQuery table reference.
        """
        if excluded_fields is not None:
            pulumi.set(__self__, "excluded_fields", excluded_fields)
        if identifying_fields is not None:
            pulumi.set(__self__, "identifying_fields", identifying_fields)
        if included_fields is not None:
            pulumi.set(__self__, "included_fields", included_fields)
        if rows_limit is not None:
            pulumi.set(__self__, "rows_limit", rows_limit)
        if rows_limit_percent is not None:
            pulumi.set(__self__, "rows_limit_percent", rows_limit_percent)
        if sample_method is not None:
            pulumi.set(__self__, "sample_method", sample_method)
        if table_reference is not None:
            pulumi.set(__self__, "table_reference", table_reference)

    @property
    @pulumi.getter(name="excludedFields")
    def excluded_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
        """
        return pulumi.get(self, "excluded_fields")

    @excluded_fields.setter
    def excluded_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "excluded_fields", value)

    @property
    @pulumi.getter(name="identifyingFields")
    def identifying_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
        """
        return pulumi.get(self, "identifying_fields")

    @identifying_fields.setter
    def identifying_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "identifying_fields", value)

    @property
    @pulumi.getter(name="includedFields")
    def included_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
        """
        return pulumi.get(self, "included_fields")

    @included_fields.setter
    def included_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "included_fields", value)

    @property
    @pulumi.getter(name="rowsLimit")
    def rows_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
        """
        return pulumi.get(self, "rows_limit")

    @rows_limit.setter
    def rows_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rows_limit", value)

    @property
    @pulumi.getter(name="rowsLimitPercent")
    def rows_limit_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
        """
        return pulumi.get(self, "rows_limit_percent")

    @rows_limit_percent.setter
    def rows_limit_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rows_limit_percent", value)

    @property
    @pulumi.getter(name="sampleMethod")
    def sample_method(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsSampleMethod']]:
        return pulumi.get(self, "sample_method")

    @sample_method.setter
    def sample_method(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsSampleMethod']]):
        pulumi.set(self, "sample_method", value)

    @property
    @pulumi.getter(name="tableReference")
    def table_reference(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        Complete BigQuery table reference.
        """
        return pulumi.get(self, "table_reference")

    @table_reference.setter
    def table_reference(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "table_reference", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryRegexesArgs:
    def __init__(__self__, *,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexArgs']]]] = None):
        """
        A collection of regular expressions to determine what tables to match against.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexArgs']]] patterns: A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
        """
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexArgs']]]]:
        """
        A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexArgs']]]]):
        pulumi.set(self, "patterns", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryRegexArgs:
    def __init__(__self__, *,
                 dataset_id_regex: Optional[pulumi.Input[str]] = None,
                 project_id_regex: Optional[pulumi.Input[str]] = None,
                 table_id_regex: Optional[pulumi.Input[str]] = None):
        """
        A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
        :param pulumi.Input[str] dataset_id_regex: If unset, this property matches all datasets.
        :param pulumi.Input[str] project_id_regex: For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
        :param pulumi.Input[str] table_id_regex: If unset, this property matches all tables.
        """
        if dataset_id_regex is not None:
            pulumi.set(__self__, "dataset_id_regex", dataset_id_regex)
        if project_id_regex is not None:
            pulumi.set(__self__, "project_id_regex", project_id_regex)
        if table_id_regex is not None:
            pulumi.set(__self__, "table_id_regex", table_id_regex)

    @property
    @pulumi.getter(name="datasetIdRegex")
    def dataset_id_regex(self) -> Optional[pulumi.Input[str]]:
        """
        If unset, this property matches all datasets.
        """
        return pulumi.get(self, "dataset_id_regex")

    @dataset_id_regex.setter
    def dataset_id_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id_regex", value)

    @property
    @pulumi.getter(name="projectIdRegex")
    def project_id_regex(self) -> Optional[pulumi.Input[str]]:
        """
        For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
        """
        return pulumi.get(self, "project_id_regex")

    @project_id_regex.setter
    def project_id_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id_regex", value)

    @property
    @pulumi.getter(name="tableIdRegex")
    def table_id_regex(self) -> Optional[pulumi.Input[str]]:
        """
        If unset, this property matches all tables.
        """
        return pulumi.get(self, "table_id_regex")

    @table_id_regex.setter
    def table_id_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_id_regex", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryTableCollectionArgs:
    def __init__(__self__, *,
                 include_regexes: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexesArgs']] = None):
        """
        Specifies a collection of BigQuery tables. Used for Discovery.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryRegexesArgs'] include_regexes: A collection of regular expressions to match a BigQuery table against.
        """
        if include_regexes is not None:
            pulumi.set(__self__, "include_regexes", include_regexes)

    @property
    @pulumi.getter(name="includeRegexes")
    def include_regexes(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexesArgs']]:
        """
        A collection of regular expressions to match a BigQuery table against.
        """
        return pulumi.get(self, "include_regexes")

    @include_regexes.setter
    def include_regexes(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryRegexesArgs']]):
        pulumi.set(self, "include_regexes", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryTableTypesArgs:
    def __init__(__self__, *,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesTypesItem']]]] = None):
        """
        The types of BigQuery tables supported by Cloud DLP.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesTypesItem']]] types: A set of BigQuery table types.
        """
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesTypesItem']]]]:
        """
        A set of BigQuery table types.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesTypesItem']]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class GooglePrivacyDlpV2BigQueryTableArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 table_id: Optional[pulumi.Input[str]] = None):
        """
        Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
        :param pulumi.Input[str] dataset_id: Dataset ID of the table.
        :param pulumi.Input[str] project: The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
        :param pulumi.Input[str] table_id: Name of the table.
        """
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dataset ID of the table.
        """
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the table.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_id", value)


@pulumi.input_type
class GooglePrivacyDlpV2BucketingConfigArgs:
    def __init__(__self__, *,
                 buckets: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BucketArgs']]]] = None):
        """
        Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BucketArgs']]] buckets: Set of buckets. Ranges must be non-overlapping.
        """
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BucketArgs']]]]:
        """
        Set of buckets. Ranges must be non-overlapping.
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2BucketArgs']]]]):
        pulumi.set(self, "buckets", value)


@pulumi.input_type
class GooglePrivacyDlpV2BucketArgs:
    def __init__(__self__, *,
                 replacement_value: pulumi.Input['GooglePrivacyDlpV2ValueArgs'],
                 max: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']] = None,
                 min: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']] = None):
        """
        Bucket is represented as a range, along with replacement values.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] replacement_value: Replacement value for this bucket.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] max: Upper bound of the range, exclusive; type must match min.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] min: Lower bound of the range, inclusive. Type should be the same as max if used.
        """
        pulumi.set(__self__, "replacement_value", replacement_value)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> pulumi.Input['GooglePrivacyDlpV2ValueArgs']:
        """
        Replacement value for this bucket.
        """
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: pulumi.Input['GooglePrivacyDlpV2ValueArgs']):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]:
        """
        Upper bound of the range, exclusive; type must match min.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]:
        """
        Lower bound of the range, inclusive. Type should be the same as max if used.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class GooglePrivacyDlpV2CategoricalStatsConfigArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        Compute numerical stats over an individual column, including number of distinct values and value count distribution.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
        """
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class GooglePrivacyDlpV2CharacterMaskConfigArgs:
    def __init__(__self__, *,
                 characters_to_ignore: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreArgs']]]] = None,
                 masking_character: Optional[pulumi.Input[str]] = None,
                 number_to_mask: Optional[pulumi.Input[int]] = None,
                 reverse_order: Optional[pulumi.Input[bool]] = None):
        """
        Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreArgs']]] characters_to_ignore: When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
        :param pulumi.Input[str] masking_character: Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
        :param pulumi.Input[int] number_to_mask: Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
        :param pulumi.Input[bool] reverse_order: Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
        """
        if characters_to_ignore is not None:
            pulumi.set(__self__, "characters_to_ignore", characters_to_ignore)
        if masking_character is not None:
            pulumi.set(__self__, "masking_character", masking_character)
        if number_to_mask is not None:
            pulumi.set(__self__, "number_to_mask", number_to_mask)
        if reverse_order is not None:
            pulumi.set(__self__, "reverse_order", reverse_order)

    @property
    @pulumi.getter(name="charactersToIgnore")
    def characters_to_ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreArgs']]]]:
        """
        When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
        """
        return pulumi.get(self, "characters_to_ignore")

    @characters_to_ignore.setter
    def characters_to_ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreArgs']]]]):
        pulumi.set(self, "characters_to_ignore", value)

    @property
    @pulumi.getter(name="maskingCharacter")
    def masking_character(self) -> Optional[pulumi.Input[str]]:
        """
        Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
        """
        return pulumi.get(self, "masking_character")

    @masking_character.setter
    def masking_character(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "masking_character", value)

    @property
    @pulumi.getter(name="numberToMask")
    def number_to_mask(self) -> Optional[pulumi.Input[int]]:
        """
        Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
        """
        return pulumi.get(self, "number_to_mask")

    @number_to_mask.setter
    def number_to_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_to_mask", value)

    @property
    @pulumi.getter(name="reverseOrder")
    def reverse_order(self) -> Optional[pulumi.Input[bool]]:
        """
        Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
        """
        return pulumi.get(self, "reverse_order")

    @reverse_order.setter
    def reverse_order(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reverse_order", value)


@pulumi.input_type
class GooglePrivacyDlpV2CharsToIgnoreArgs:
    def __init__(__self__, *,
                 characters_to_skip: Optional[pulumi.Input[str]] = None,
                 common_characters_to_ignore: Optional[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore']] = None):
        """
        Characters to skip when doing deidentification of a value. These will be left alone and skipped.
        :param pulumi.Input[str] characters_to_skip: Characters to not transform when masking.
        :param pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore'] common_characters_to_ignore: Common characters to not transform when masking. Useful to avoid removing punctuation.
        """
        if characters_to_skip is not None:
            pulumi.set(__self__, "characters_to_skip", characters_to_skip)
        if common_characters_to_ignore is not None:
            pulumi.set(__self__, "common_characters_to_ignore", common_characters_to_ignore)

    @property
    @pulumi.getter(name="charactersToSkip")
    def characters_to_skip(self) -> Optional[pulumi.Input[str]]:
        """
        Characters to not transform when masking.
        """
        return pulumi.get(self, "characters_to_skip")

    @characters_to_skip.setter
    def characters_to_skip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "characters_to_skip", value)

    @property
    @pulumi.getter(name="commonCharactersToIgnore")
    def common_characters_to_ignore(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore']]:
        """
        Common characters to not transform when masking. Useful to avoid removing punctuation.
        """
        return pulumi.get(self, "common_characters_to_ignore")

    @common_characters_to_ignore.setter
    def common_characters_to_ignore(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore']]):
        pulumi.set(self, "common_characters_to_ignore", value)


@pulumi.input_type
class GooglePrivacyDlpV2CloudStorageFileSetArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Message representing a set of files in Cloud Storage.
        :param pulumi.Input[str] url: The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GooglePrivacyDlpV2CloudStorageOptionsArgs:
    def __init__(__self__, *,
                 bytes_limit_per_file: Optional[pulumi.Input[str]] = None,
                 bytes_limit_per_file_percent: Optional[pulumi.Input[int]] = None,
                 file_set: Optional[pulumi.Input['GooglePrivacyDlpV2FileSetArgs']] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem']]]] = None,
                 files_limit_percent: Optional[pulumi.Input[int]] = None,
                 sample_method: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsSampleMethod']] = None):
        """
        Options defining a file or a set of files within a Cloud Storage bucket.
        :param pulumi.Input[str] bytes_limit_per_file: Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
        :param pulumi.Input[int] bytes_limit_per_file_percent: Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
        :param pulumi.Input['GooglePrivacyDlpV2FileSetArgs'] file_set: The set of one or more files to scan.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem']]] file_types: List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
        :param pulumi.Input[int] files_limit_percent: Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
        """
        if bytes_limit_per_file is not None:
            pulumi.set(__self__, "bytes_limit_per_file", bytes_limit_per_file)
        if bytes_limit_per_file_percent is not None:
            pulumi.set(__self__, "bytes_limit_per_file_percent", bytes_limit_per_file_percent)
        if file_set is not None:
            pulumi.set(__self__, "file_set", file_set)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if files_limit_percent is not None:
            pulumi.set(__self__, "files_limit_percent", files_limit_percent)
        if sample_method is not None:
            pulumi.set(__self__, "sample_method", sample_method)

    @property
    @pulumi.getter(name="bytesLimitPerFile")
    def bytes_limit_per_file(self) -> Optional[pulumi.Input[str]]:
        """
        Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
        """
        return pulumi.get(self, "bytes_limit_per_file")

    @bytes_limit_per_file.setter
    def bytes_limit_per_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bytes_limit_per_file", value)

    @property
    @pulumi.getter(name="bytesLimitPerFilePercent")
    def bytes_limit_per_file_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
        """
        return pulumi.get(self, "bytes_limit_per_file_percent")

    @bytes_limit_per_file_percent.setter
    def bytes_limit_per_file_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes_limit_per_file_percent", value)

    @property
    @pulumi.getter(name="fileSet")
    def file_set(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FileSetArgs']]:
        """
        The set of one or more files to scan.
        """
        return pulumi.get(self, "file_set")

    @file_set.setter
    def file_set(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FileSetArgs']]):
        pulumi.set(self, "file_set", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem']]]]:
        """
        List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter(name="filesLimitPercent")
    def files_limit_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
        """
        return pulumi.get(self, "files_limit_percent")

    @files_limit_percent.setter
    def files_limit_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "files_limit_percent", value)

    @property
    @pulumi.getter(name="sampleMethod")
    def sample_method(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsSampleMethod']]:
        return pulumi.get(self, "sample_method")

    @sample_method.setter
    def sample_method(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsSampleMethod']]):
        pulumi.set(self, "sample_method", value)


@pulumi.input_type
class GooglePrivacyDlpV2CloudStoragePathArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None):
        """
        Message representing a single file or path in Cloud Storage.
        :param pulumi.Input[str] path: A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class GooglePrivacyDlpV2CloudStorageRegexFileSetArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 exclude_regex: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_regex: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
        :param pulumi.Input[str] bucket_name: The name of a Cloud Storage bucket. Required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_regex: A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_regex: A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if exclude_regex is not None:
            pulumi.set(__self__, "exclude_regex", exclude_regex)
        if include_regex is not None:
            pulumi.set(__self__, "include_regex", include_regex)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a Cloud Storage bucket. Required.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="excludeRegex")
    def exclude_regex(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "exclude_regex")

    @exclude_regex.setter
    def exclude_regex(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_regex", value)

    @property
    @pulumi.getter(name="includeRegex")
    def include_regex(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "include_regex")

    @include_regex.setter
    def include_regex(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_regex", value)


@pulumi.input_type
class GooglePrivacyDlpV2ColorArgs:
    def __init__(__self__, *,
                 blue: Optional[pulumi.Input[float]] = None,
                 green: Optional[pulumi.Input[float]] = None,
                 red: Optional[pulumi.Input[float]] = None):
        """
        Represents a color in the RGB color space.
        :param pulumi.Input[float] blue: The amount of blue in the color as a value in the interval [0, 1].
        :param pulumi.Input[float] green: The amount of green in the color as a value in the interval [0, 1].
        :param pulumi.Input[float] red: The amount of red in the color as a value in the interval [0, 1].
        """
        if blue is not None:
            pulumi.set(__self__, "blue", blue)
        if green is not None:
            pulumi.set(__self__, "green", green)
        if red is not None:
            pulumi.set(__self__, "red", red)

    @property
    @pulumi.getter
    def blue(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of blue in the color as a value in the interval [0, 1].
        """
        return pulumi.get(self, "blue")

    @blue.setter
    def blue(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "blue", value)

    @property
    @pulumi.getter
    def green(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of green in the color as a value in the interval [0, 1].
        """
        return pulumi.get(self, "green")

    @green.setter
    def green(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "green", value)

    @property
    @pulumi.getter
    def red(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of red in the color as a value in the interval [0, 1].
        """
        return pulumi.get(self, "red")

    @red.setter
    def red(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "red", value)


@pulumi.input_type
class GooglePrivacyDlpV2ConditionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ConditionArgs']]]] = None):
        """
        A collection of conditions.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ConditionArgs']]] conditions: A collection of conditions.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ConditionArgs']]]]:
        """
        A collection of conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class GooglePrivacyDlpV2ConditionArgs:
    def __init__(__self__, *,
                 field: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'],
                 operator: pulumi.Input['GooglePrivacyDlpV2ConditionOperator'],
                 value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']] = None):
        """
        The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Field within the record this condition is evaluated against.
        :param pulumi.Input['GooglePrivacyDlpV2ConditionOperator'] operator: Operator used to compare the field or infoType to the value.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] value: Value to compare against. [Mandatory, except for `EXISTS` tests.]
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']:
        """
        Field within the record this condition is evaluated against.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input['GooglePrivacyDlpV2ConditionOperator']:
        """
        Operator used to compare the field or infoType to the value.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input['GooglePrivacyDlpV2ConditionOperator']):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]:
        """
        Value to compare against. [Mandatory, except for `EXISTS` tests.]
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GooglePrivacyDlpV2CryptoDeterministicConfigArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None,
                 crypto_key: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']] = None,
                 surrogate_info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None):
        """
        Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] context: A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
        :param pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs'] crypto_key: The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] surrogate_info_type: The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if crypto_key is not None:
            pulumi.set(__self__, "crypto_key", crypto_key)
        if surrogate_info_type is not None:
            pulumi.set(__self__, "surrogate_info_type", surrogate_info_type)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]:
        """
        The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]):
        pulumi.set(self, "crypto_key", value)

    @property
    @pulumi.getter(name="surrogateInfoType")
    def surrogate_info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
        """
        return pulumi.get(self, "surrogate_info_type")

    @surrogate_info_type.setter
    def surrogate_info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "surrogate_info_type", value)


@pulumi.input_type
class GooglePrivacyDlpV2CryptoHashConfigArgs:
    def __init__(__self__, *,
                 crypto_key: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']] = None):
        """
        Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
        :param pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs'] crypto_key: The key used by the hash function.
        """
        if crypto_key is not None:
            pulumi.set(__self__, "crypto_key", crypto_key)

    @property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]:
        """
        The key used by the hash function.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]):
        pulumi.set(self, "crypto_key", value)


@pulumi.input_type
class GooglePrivacyDlpV2CryptoKeyArgs:
    def __init__(__self__, *,
                 kms_wrapped: Optional[pulumi.Input['GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs']] = None,
                 transient: Optional[pulumi.Input['GooglePrivacyDlpV2TransientCryptoKeyArgs']] = None,
                 unwrapped: Optional[pulumi.Input['GooglePrivacyDlpV2UnwrappedCryptoKeyArgs']] = None):
        """
        This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
        :param pulumi.Input['GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs'] kms_wrapped: Key wrapped using Cloud KMS
        :param pulumi.Input['GooglePrivacyDlpV2TransientCryptoKeyArgs'] transient: Transient crypto key
        :param pulumi.Input['GooglePrivacyDlpV2UnwrappedCryptoKeyArgs'] unwrapped: Unwrapped crypto key
        """
        if kms_wrapped is not None:
            pulumi.set(__self__, "kms_wrapped", kms_wrapped)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)
        if unwrapped is not None:
            pulumi.set(__self__, "unwrapped", unwrapped)

    @property
    @pulumi.getter(name="kmsWrapped")
    def kms_wrapped(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs']]:
        """
        Key wrapped using Cloud KMS
        """
        return pulumi.get(self, "kms_wrapped")

    @kms_wrapped.setter
    def kms_wrapped(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs']]):
        pulumi.set(self, "kms_wrapped", value)

    @property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TransientCryptoKeyArgs']]:
        """
        Transient crypto key
        """
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TransientCryptoKeyArgs']]):
        pulumi.set(self, "transient", value)

    @property
    @pulumi.getter
    def unwrapped(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2UnwrappedCryptoKeyArgs']]:
        """
        Unwrapped crypto key
        """
        return pulumi.get(self, "unwrapped")

    @unwrapped.setter
    def unwrapped(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2UnwrappedCryptoKeyArgs']]):
        pulumi.set(self, "unwrapped", value)


@pulumi.input_type
class GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs:
    def __init__(__self__, *,
                 crypto_key: pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs'],
                 common_alphabet: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet']] = None,
                 context: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None,
                 custom_alphabet: Optional[pulumi.Input[str]] = None,
                 radix: Optional[pulumi.Input[int]] = None,
                 surrogate_info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None):
        """
        Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
        :param pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs'] crypto_key: The key used by the encryption algorithm.
        :param pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet'] common_alphabet: Common alphabets.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] context: The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
        :param pulumi.Input[str] custom_alphabet: This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;"'<,>.?/
        :param pulumi.Input[int] radix: The native way to select the alphabet. Must be in the range [2, 95].
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] surrogate_info_type: The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
        """
        pulumi.set(__self__, "crypto_key", crypto_key)
        if common_alphabet is not None:
            pulumi.set(__self__, "common_alphabet", common_alphabet)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if custom_alphabet is not None:
            pulumi.set(__self__, "custom_alphabet", custom_alphabet)
        if radix is not None:
            pulumi.set(__self__, "radix", radix)
        if surrogate_info_type is not None:
            pulumi.set(__self__, "surrogate_info_type", surrogate_info_type)

    @property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']:
        """
        The key used by the encryption algorithm.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']):
        pulumi.set(self, "crypto_key", value)

    @property
    @pulumi.getter(name="commonAlphabet")
    def common_alphabet(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet']]:
        """
        Common alphabets.
        """
        return pulumi.get(self, "common_alphabet")

    @common_alphabet.setter
    def common_alphabet(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet']]):
        pulumi.set(self, "common_alphabet", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="customAlphabet")
    def custom_alphabet(self) -> Optional[pulumi.Input[str]]:
        """
        This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;"'<,>.?/
        """
        return pulumi.get(self, "custom_alphabet")

    @custom_alphabet.setter
    def custom_alphabet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_alphabet", value)

    @property
    @pulumi.getter
    def radix(self) -> Optional[pulumi.Input[int]]:
        """
        The native way to select the alphabet. Must be in the range [2, 95].
        """
        return pulumi.get(self, "radix")

    @radix.setter
    def radix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radix", value)

    @property
    @pulumi.getter(name="surrogateInfoType")
    def surrogate_info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
        """
        return pulumi.get(self, "surrogate_info_type")

    @surrogate_info_type.setter
    def surrogate_info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "surrogate_info_type", value)


@pulumi.input_type
class GooglePrivacyDlpV2CustomInfoTypeArgs:
    def __init__(__self__, *,
                 detection_rules: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DetectionRuleArgs']]]] = None,
                 dictionary: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']] = None,
                 exclusion_type: Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeExclusionType']] = None,
                 info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None,
                 likelihood: Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeLikelihood']] = None,
                 regex: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']] = None,
                 sensitivity_score: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']] = None,
                 stored_type: Optional[pulumi.Input['GooglePrivacyDlpV2StoredTypeArgs']] = None,
                 surrogate_type: Optional[pulumi.Input['GooglePrivacyDlpV2SurrogateTypeArgs']] = None):
        """
        Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DetectionRuleArgs']]] detection_rules: Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
        :param pulumi.Input['GooglePrivacyDlpV2DictionaryArgs'] dictionary: A list of phrases to detect as a CustomInfoType.
        :param pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeExclusionType'] exclusion_type: If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] info_type: CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
        :param pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeLikelihood'] likelihood: Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
        :param pulumi.Input['GooglePrivacyDlpV2RegexArgs'] regex: Regular expression based CustomInfoType.
        :param pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs'] sensitivity_score: Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
        :param pulumi.Input['GooglePrivacyDlpV2StoredTypeArgs'] stored_type: Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
        :param pulumi.Input['GooglePrivacyDlpV2SurrogateTypeArgs'] surrogate_type: Message for detecting output from deidentification transformations that support reversing.
        """
        if detection_rules is not None:
            pulumi.set(__self__, "detection_rules", detection_rules)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if exclusion_type is not None:
            pulumi.set(__self__, "exclusion_type", exclusion_type)
        if info_type is not None:
            pulumi.set(__self__, "info_type", info_type)
        if likelihood is not None:
            pulumi.set(__self__, "likelihood", likelihood)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if sensitivity_score is not None:
            pulumi.set(__self__, "sensitivity_score", sensitivity_score)
        if stored_type is not None:
            pulumi.set(__self__, "stored_type", stored_type)
        if surrogate_type is not None:
            pulumi.set(__self__, "surrogate_type", surrogate_type)

    @property
    @pulumi.getter(name="detectionRules")
    def detection_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DetectionRuleArgs']]]]:
        """
        Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
        """
        return pulumi.get(self, "detection_rules")

    @detection_rules.setter
    def detection_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DetectionRuleArgs']]]]):
        pulumi.set(self, "detection_rules", value)

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]:
        """
        A list of phrases to detect as a CustomInfoType.
        """
        return pulumi.get(self, "dictionary")

    @dictionary.setter
    def dictionary(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]):
        pulumi.set(self, "dictionary", value)

    @property
    @pulumi.getter(name="exclusionType")
    def exclusion_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeExclusionType']]:
        """
        If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
        """
        return pulumi.get(self, "exclusion_type")

    @exclusion_type.setter
    def exclusion_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeExclusionType']]):
        pulumi.set(self, "exclusion_type", value)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
        """
        return pulumi.get(self, "info_type")

    @info_type.setter
    def info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "info_type", value)

    @property
    @pulumi.getter
    def likelihood(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeLikelihood']]:
        """
        Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
        """
        return pulumi.get(self, "likelihood")

    @likelihood.setter
    def likelihood(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeLikelihood']]):
        pulumi.set(self, "likelihood", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]:
        """
        Regular expression based CustomInfoType.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="sensitivityScore")
    def sensitivity_score(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']]:
        """
        Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
        """
        return pulumi.get(self, "sensitivity_score")

    @sensitivity_score.setter
    def sensitivity_score(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']]):
        pulumi.set(self, "sensitivity_score", value)

    @property
    @pulumi.getter(name="storedType")
    def stored_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2StoredTypeArgs']]:
        """
        Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
        """
        return pulumi.get(self, "stored_type")

    @stored_type.setter
    def stored_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2StoredTypeArgs']]):
        pulumi.set(self, "stored_type", value)

    @property
    @pulumi.getter(name="surrogateType")
    def surrogate_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SurrogateTypeArgs']]:
        """
        Message for detecting output from deidentification transformations that support reversing.
        """
        return pulumi.get(self, "surrogate_type")

    @surrogate_type.setter
    def surrogate_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SurrogateTypeArgs']]):
        pulumi.set(self, "surrogate_type", value)


@pulumi.input_type
class GooglePrivacyDlpV2DataProfileActionArgs:
    def __init__(__self__, *,
                 export_data: Optional[pulumi.Input['GooglePrivacyDlpV2ExportArgs']] = None,
                 pub_sub_notification: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationArgs']] = None):
        """
        A task to execute when a data profile has been generated.
        :param pulumi.Input['GooglePrivacyDlpV2ExportArgs'] export_data: Export data profiles into a provided location.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubNotificationArgs'] pub_sub_notification: Publish a message into the Pub/Sub topic.
        """
        if export_data is not None:
            pulumi.set(__self__, "export_data", export_data)
        if pub_sub_notification is not None:
            pulumi.set(__self__, "pub_sub_notification", pub_sub_notification)

    @property
    @pulumi.getter(name="exportData")
    def export_data(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExportArgs']]:
        """
        Export data profiles into a provided location.
        """
        return pulumi.get(self, "export_data")

    @export_data.setter
    def export_data(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExportArgs']]):
        pulumi.set(self, "export_data", value)

    @property
    @pulumi.getter(name="pubSubNotification")
    def pub_sub_notification(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationArgs']]:
        """
        Publish a message into the Pub/Sub topic.
        """
        return pulumi.get(self, "pub_sub_notification")

    @pub_sub_notification.setter
    def pub_sub_notification(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationArgs']]):
        pulumi.set(self, "pub_sub_notification", value)


@pulumi.input_type
class GooglePrivacyDlpV2DataProfilePubSubConditionArgs:
    def __init__(__self__, *,
                 expressions: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsArgs']] = None):
        """
        A condition for determining whether a Pub/Sub should be triggered.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsArgs'] expressions: An expression.
        """
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsArgs']]:
        """
        An expression.
        """
        return pulumi.get(self, "expressions")

    @expressions.setter
    def expressions(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsArgs']]):
        pulumi.set(self, "expressions", value)


@pulumi.input_type
class GooglePrivacyDlpV2DatastoreOptionsArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input['GooglePrivacyDlpV2KindExpressionArgs']] = None,
                 partition_id: Optional[pulumi.Input['GooglePrivacyDlpV2PartitionIdArgs']] = None):
        """
        Options defining a data set within Google Cloud Datastore.
        :param pulumi.Input['GooglePrivacyDlpV2KindExpressionArgs'] kind: The kind to process.
        :param pulumi.Input['GooglePrivacyDlpV2PartitionIdArgs'] partition_id: A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if partition_id is not None:
            pulumi.set(__self__, "partition_id", partition_id)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2KindExpressionArgs']]:
        """
        The kind to process.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2KindExpressionArgs']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PartitionIdArgs']]:
        """
        A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
        """
        return pulumi.get(self, "partition_id")

    @partition_id.setter
    def partition_id(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PartitionIdArgs']]):
        pulumi.set(self, "partition_id", value)


@pulumi.input_type
class GooglePrivacyDlpV2DateShiftConfigArgs:
    def __init__(__self__, *,
                 lower_bound_days: pulumi.Input[int],
                 upper_bound_days: pulumi.Input[int],
                 context: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None,
                 crypto_key: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']] = None):
        """
        Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
        :param pulumi.Input[int] lower_bound_days: For example, -5 means shift date to at most 5 days back in the past.
        :param pulumi.Input[int] upper_bound_days: Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] context: Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
        :param pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs'] crypto_key: Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
        """
        pulumi.set(__self__, "lower_bound_days", lower_bound_days)
        pulumi.set(__self__, "upper_bound_days", upper_bound_days)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if crypto_key is not None:
            pulumi.set(__self__, "crypto_key", crypto_key)

    @property
    @pulumi.getter(name="lowerBoundDays")
    def lower_bound_days(self) -> pulumi.Input[int]:
        """
        For example, -5 means shift date to at most 5 days back in the past.
        """
        return pulumi.get(self, "lower_bound_days")

    @lower_bound_days.setter
    def lower_bound_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "lower_bound_days", value)

    @property
    @pulumi.getter(name="upperBoundDays")
    def upper_bound_days(self) -> pulumi.Input[int]:
        """
        Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
        """
        return pulumi.get(self, "upper_bound_days")

    @upper_bound_days.setter
    def upper_bound_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "upper_bound_days", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]:
        """
        Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoKeyArgs']]):
        pulumi.set(self, "crypto_key", value)


@pulumi.input_type
class GooglePrivacyDlpV2DeidentifyConfigArgs:
    def __init__(__self__, *,
                 image_transformations: Optional[pulumi.Input['GooglePrivacyDlpV2ImageTransformationsArgs']] = None,
                 info_type_transformations: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']] = None,
                 record_transformations: Optional[pulumi.Input['GooglePrivacyDlpV2RecordTransformationsArgs']] = None,
                 transformation_error_handling: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationErrorHandlingArgs']] = None):
        """
        The configuration that controls how the data will change.
        :param pulumi.Input['GooglePrivacyDlpV2ImageTransformationsArgs'] image_transformations: Treat the dataset as an image and redact.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs'] info_type_transformations: Treat the dataset as free-form text and apply the same free text transformation everywhere.
        :param pulumi.Input['GooglePrivacyDlpV2RecordTransformationsArgs'] record_transformations: Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
        :param pulumi.Input['GooglePrivacyDlpV2TransformationErrorHandlingArgs'] transformation_error_handling: Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
        """
        if image_transformations is not None:
            pulumi.set(__self__, "image_transformations", image_transformations)
        if info_type_transformations is not None:
            pulumi.set(__self__, "info_type_transformations", info_type_transformations)
        if record_transformations is not None:
            pulumi.set(__self__, "record_transformations", record_transformations)
        if transformation_error_handling is not None:
            pulumi.set(__self__, "transformation_error_handling", transformation_error_handling)

    @property
    @pulumi.getter(name="imageTransformations")
    def image_transformations(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ImageTransformationsArgs']]:
        """
        Treat the dataset as an image and redact.
        """
        return pulumi.get(self, "image_transformations")

    @image_transformations.setter
    def image_transformations(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ImageTransformationsArgs']]):
        pulumi.set(self, "image_transformations", value)

    @property
    @pulumi.getter(name="infoTypeTransformations")
    def info_type_transformations(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']]:
        """
        Treat the dataset as free-form text and apply the same free text transformation everywhere.
        """
        return pulumi.get(self, "info_type_transformations")

    @info_type_transformations.setter
    def info_type_transformations(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']]):
        pulumi.set(self, "info_type_transformations", value)

    @property
    @pulumi.getter(name="recordTransformations")
    def record_transformations(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RecordTransformationsArgs']]:
        """
        Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
        """
        return pulumi.get(self, "record_transformations")

    @record_transformations.setter
    def record_transformations(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RecordTransformationsArgs']]):
        pulumi.set(self, "record_transformations", value)

    @property
    @pulumi.getter(name="transformationErrorHandling")
    def transformation_error_handling(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TransformationErrorHandlingArgs']]:
        """
        Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
        """
        return pulumi.get(self, "transformation_error_handling")

    @transformation_error_handling.setter
    def transformation_error_handling(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationErrorHandlingArgs']]):
        pulumi.set(self, "transformation_error_handling", value)


@pulumi.input_type
class GooglePrivacyDlpV2DeidentifyArgs:
    def __init__(__self__, *,
                 cloud_storage_output: pulumi.Input[str],
                 file_types_to_transform: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem']]]] = None,
                 transformation_config: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationConfigArgs']] = None,
                 transformation_details_storage_config: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs']] = None):
        """
        Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
        :param pulumi.Input[str] cloud_storage_output: User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem']]] file_types_to_transform: List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
        :param pulumi.Input['GooglePrivacyDlpV2TransformationConfigArgs'] transformation_config: User specified deidentify templates and configs for structured, unstructured, and image files.
        :param pulumi.Input['GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs'] transformation_details_storage_config: Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
        """
        pulumi.set(__self__, "cloud_storage_output", cloud_storage_output)
        if file_types_to_transform is not None:
            pulumi.set(__self__, "file_types_to_transform", file_types_to_transform)
        if transformation_config is not None:
            pulumi.set(__self__, "transformation_config", transformation_config)
        if transformation_details_storage_config is not None:
            pulumi.set(__self__, "transformation_details_storage_config", transformation_details_storage_config)

    @property
    @pulumi.getter(name="cloudStorageOutput")
    def cloud_storage_output(self) -> pulumi.Input[str]:
        """
        User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
        """
        return pulumi.get(self, "cloud_storage_output")

    @cloud_storage_output.setter
    def cloud_storage_output(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_storage_output", value)

    @property
    @pulumi.getter(name="fileTypesToTransform")
    def file_types_to_transform(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem']]]]:
        """
        List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
        """
        return pulumi.get(self, "file_types_to_transform")

    @file_types_to_transform.setter
    def file_types_to_transform(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem']]]]):
        pulumi.set(self, "file_types_to_transform", value)

    @property
    @pulumi.getter(name="transformationConfig")
    def transformation_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TransformationConfigArgs']]:
        """
        User specified deidentify templates and configs for structured, unstructured, and image files.
        """
        return pulumi.get(self, "transformation_config")

    @transformation_config.setter
    def transformation_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationConfigArgs']]):
        pulumi.set(self, "transformation_config", value)

    @property
    @pulumi.getter(name="transformationDetailsStorageConfig")
    def transformation_details_storage_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs']]:
        """
        Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
        """
        return pulumi.get(self, "transformation_details_storage_config")

    @transformation_details_storage_config.setter
    def transformation_details_storage_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs']]):
        pulumi.set(self, "transformation_details_storage_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs:
    def __init__(__self__, *,
                 quasi_ids: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdArgs']]],
                 auxiliary_tables: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2StatisticalTableArgs']]]] = None,
                 region_code: Optional[pulumi.Input[str]] = None):
        """
        δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdArgs']]] quasi_ids: Fields considered to be quasi-identifiers. No two fields can have the same tag.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2StatisticalTableArgs']]] auxiliary_tables: Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
        :param pulumi.Input[str] region_code: ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
        """
        pulumi.set(__self__, "quasi_ids", quasi_ids)
        if auxiliary_tables is not None:
            pulumi.set(__self__, "auxiliary_tables", auxiliary_tables)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdArgs']]]:
        """
        Fields considered to be quasi-identifiers. No two fields can have the same tag.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdArgs']]]):
        pulumi.set(self, "quasi_ids", value)

    @property
    @pulumi.getter(name="auxiliaryTables")
    def auxiliary_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2StatisticalTableArgs']]]]:
        """
        Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
        """
        return pulumi.get(self, "auxiliary_tables")

    @auxiliary_tables.setter
    def auxiliary_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2StatisticalTableArgs']]]]):
        pulumi.set(self, "auxiliary_tables", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)


@pulumi.input_type
class GooglePrivacyDlpV2DetectionRuleArgs:
    def __init__(__self__, *,
                 hotword_rule: Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']] = None):
        """
        Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
        :param pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs'] hotword_rule: Hotword-based detection rule.
        """
        if hotword_rule is not None:
            pulumi.set(__self__, "hotword_rule", hotword_rule)

    @property
    @pulumi.getter(name="hotwordRule")
    def hotword_rule(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']]:
        """
        Hotword-based detection rule.
        """
        return pulumi.get(self, "hotword_rule")

    @hotword_rule.setter
    def hotword_rule(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']]):
        pulumi.set(self, "hotword_rule", value)


@pulumi.input_type
class GooglePrivacyDlpV2DictionaryArgs:
    def __init__(__self__, *,
                 cloud_storage_path: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']] = None,
                 word_list: Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']] = None):
        """
        Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
        :param pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs'] cloud_storage_path: Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
        :param pulumi.Input['GooglePrivacyDlpV2WordListArgs'] word_list: List of words or phrases to search for.
        """
        if cloud_storage_path is not None:
            pulumi.set(__self__, "cloud_storage_path", cloud_storage_path)
        if word_list is not None:
            pulumi.set(__self__, "word_list", word_list)

    @property
    @pulumi.getter(name="cloudStoragePath")
    def cloud_storage_path(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']]:
        """
        Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
        """
        return pulumi.get(self, "cloud_storage_path")

    @cloud_storage_path.setter
    def cloud_storage_path(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']]):
        pulumi.set(self, "cloud_storage_path", value)

    @property
    @pulumi.getter(name="wordList")
    def word_list(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']]:
        """
        List of words or phrases to search for.
        """
        return pulumi.get(self, "word_list")

    @word_list.setter
    def word_list(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']]):
        pulumi.set(self, "word_list", value)


@pulumi.input_type
class GooglePrivacyDlpV2DisabledArgs:
    def __init__(__self__):
        """
        Do not profile the tables.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs:
    def __init__(__self__, *,
                 created_after: Optional[pulumi.Input[str]] = None,
                 or_conditions: Optional[pulumi.Input['GooglePrivacyDlpV2OrConditionsArgs']] = None,
                 type_collection: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection']] = None,
                 types: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesArgs']] = None):
        """
        Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
        :param pulumi.Input[str] created_after: BigQuery table must have been created after this date. Used to avoid backfilling.
        :param pulumi.Input['GooglePrivacyDlpV2OrConditionsArgs'] or_conditions: At least one of the conditions must be true for a table to be scanned.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection'] type_collection: Restrict discovery to categories of table types.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesArgs'] types: Restrict discovery to specific table types.
        """
        if created_after is not None:
            pulumi.set(__self__, "created_after", created_after)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)
        if type_collection is not None:
            pulumi.set(__self__, "type_collection", type_collection)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="createdAfter")
    def created_after(self) -> Optional[pulumi.Input[str]]:
        """
        BigQuery table must have been created after this date. Used to avoid backfilling.
        """
        return pulumi.get(self, "created_after")

    @created_after.setter
    def created_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_after", value)

    @property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2OrConditionsArgs']]:
        """
        At least one of the conditions must be true for a table to be scanned.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2OrConditionsArgs']]):
        pulumi.set(self, "or_conditions", value)

    @property
    @pulumi.getter(name="typeCollection")
    def type_collection(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection']]:
        """
        Restrict discovery to categories of table types.
        """
        return pulumi.get(self, "type_collection")

    @type_collection.setter
    def type_collection(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection']]):
        pulumi.set(self, "type_collection", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesArgs']]:
        """
        Restrict discovery to specific table types.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableTypesArgs']]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs:
    def __init__(__self__, *,
                 other_tables: Optional[pulumi.Input['GooglePrivacyDlpV2AllOtherBigQueryTablesArgs']] = None,
                 tables: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableCollectionArgs']] = None):
        """
        Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
        :param pulumi.Input['GooglePrivacyDlpV2AllOtherBigQueryTablesArgs'] other_tables: Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableCollectionArgs'] tables: A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
        """
        if other_tables is not None:
            pulumi.set(__self__, "other_tables", other_tables)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter(name="otherTables")
    def other_tables(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2AllOtherBigQueryTablesArgs']]:
        """
        Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
        """
        return pulumi.get(self, "other_tables")

    @other_tables.setter
    def other_tables(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2AllOtherBigQueryTablesArgs']]):
        pulumi.set(self, "other_tables", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableCollectionArgs']]:
        """
        A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableCollectionArgs']]):
        pulumi.set(self, "tables", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs:
    def __init__(__self__, *,
                 schema_modified_cadence: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs']] = None,
                 table_modified_cadence: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs']] = None):
        """
        What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs'] schema_modified_cadence: Governs when to update data profiles when a schema is modified.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs'] table_modified_cadence: Governs when to update data profiles when a table is modified.
        """
        if schema_modified_cadence is not None:
            pulumi.set(__self__, "schema_modified_cadence", schema_modified_cadence)
        if table_modified_cadence is not None:
            pulumi.set(__self__, "table_modified_cadence", table_modified_cadence)

    @property
    @pulumi.getter(name="schemaModifiedCadence")
    def schema_modified_cadence(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs']]:
        """
        Governs when to update data profiles when a schema is modified.
        """
        return pulumi.get(self, "schema_modified_cadence")

    @schema_modified_cadence.setter
    def schema_modified_cadence(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs']]):
        pulumi.set(self, "schema_modified_cadence", value)

    @property
    @pulumi.getter(name="tableModifiedCadence")
    def table_modified_cadence(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs']]:
        """
        Governs when to update data profiles when a table is modified.
        """
        return pulumi.get(self, "table_modified_cadence")

    @table_modified_cadence.setter
    def table_modified_cadence(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs']]):
        pulumi.set(self, "table_modified_cadence", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency']] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem']]]] = None):
        """
        The cadence at which to update data profiles when a schema is modified.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency'] frequency: How frequently profiles may be updated when schemas are modified. Defaults to monthly.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem']]] types: The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency']]:
        """
        How frequently profiles may be updated when schemas are modified. Defaults to monthly.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency']]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem']]]]:
        """
        The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem']]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryStartingLocationArgs:
    def __init__(__self__, *,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None):
        """
        The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
        :param pulumi.Input[str] folder_id: The ID of the Folder within an organization to scan.
        :param pulumi.Input[str] organization_id: The ID of an organization to scan.
        """
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Folder within an organization to scan.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an organization to scan.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency']] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem']]]] = None):
        """
        The cadence at which to update data profiles when a table is modified.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency'] frequency: How frequently data profiles can be updated when tables are modified. Defaults to never.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem']]] types: The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency']]:
        """
        How frequently data profiles can be updated when tables are modified. Defaults to never.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency']]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem']]]]:
        """
        The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem']]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class GooglePrivacyDlpV2DiscoveryTargetArgs:
    def __init__(__self__, *,
                 big_query_target: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs']] = None):
        """
        Target used to match against for Discovery.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs'] big_query_target: BigQuery target for Discovery. The first target to match a table will be the one applied.
        """
        if big_query_target is not None:
            pulumi.set(__self__, "big_query_target", big_query_target)

    @property
    @pulumi.getter(name="bigQueryTarget")
    def big_query_target(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs']]:
        """
        BigQuery target for Discovery. The first target to match a table will be the one applied.
        """
        return pulumi.get(self, "big_query_target")

    @big_query_target.setter
    def big_query_target(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs']]):
        pulumi.set(self, "big_query_target", value)


@pulumi.input_type
class GooglePrivacyDlpV2EntityIdArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Composite key indicating which field contains the entity identifier.
        """
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Composite key indicating which field contains the entity identifier.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class GooglePrivacyDlpV2ExcludeByHotwordArgs:
    def __init__(__self__, *,
                 hotword_regex: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']] = None,
                 proximity: Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']] = None):
        """
        The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
        :param pulumi.Input['GooglePrivacyDlpV2RegexArgs'] hotword_regex: Regular expression pattern defining what qualifies as a hotword.
        :param pulumi.Input['GooglePrivacyDlpV2ProximityArgs'] proximity: Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
        """
        if hotword_regex is not None:
            pulumi.set(__self__, "hotword_regex", hotword_regex)
        if proximity is not None:
            pulumi.set(__self__, "proximity", proximity)

    @property
    @pulumi.getter(name="hotwordRegex")
    def hotword_regex(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]:
        """
        Regular expression pattern defining what qualifies as a hotword.
        """
        return pulumi.get(self, "hotword_regex")

    @hotword_regex.setter
    def hotword_regex(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]):
        pulumi.set(self, "hotword_regex", value)

    @property
    @pulumi.getter
    def proximity(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']]:
        """
        Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
        """
        return pulumi.get(self, "proximity")

    @proximity.setter
    def proximity(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']]):
        pulumi.set(self, "proximity", value)


@pulumi.input_type
class GooglePrivacyDlpV2ExcludeInfoTypesArgs:
    def __init__(__self__, *,
                 info_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]] = None):
        """
        List of excluded infoTypes.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]] info_types: InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and `exclusion_rule` containing `exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
        """
        if info_types is not None:
            pulumi.set(__self__, "info_types", info_types)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]:
        """
        InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and `exclusion_rule` containing `exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
        """
        return pulumi.get(self, "info_types")

    @info_types.setter
    def info_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]):
        pulumi.set(self, "info_types", value)


@pulumi.input_type
class GooglePrivacyDlpV2ExclusionRuleArgs:
    def __init__(__self__, *,
                 dictionary: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']] = None,
                 exclude_by_hotword: Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeByHotwordArgs']] = None,
                 exclude_info_types: Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeInfoTypesArgs']] = None,
                 matching_type: Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleMatchingType']] = None,
                 regex: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']] = None):
        """
        The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
        :param pulumi.Input['GooglePrivacyDlpV2DictionaryArgs'] dictionary: Dictionary which defines the rule.
        :param pulumi.Input['GooglePrivacyDlpV2ExcludeByHotwordArgs'] exclude_by_hotword: Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
        :param pulumi.Input['GooglePrivacyDlpV2ExcludeInfoTypesArgs'] exclude_info_types: Set of infoTypes for which findings would affect this rule.
        :param pulumi.Input['GooglePrivacyDlpV2ExclusionRuleMatchingType'] matching_type: How the rule is applied, see MatchingType documentation for details.
        :param pulumi.Input['GooglePrivacyDlpV2RegexArgs'] regex: Regular expression which defines the rule.
        """
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if exclude_by_hotword is not None:
            pulumi.set(__self__, "exclude_by_hotword", exclude_by_hotword)
        if exclude_info_types is not None:
            pulumi.set(__self__, "exclude_info_types", exclude_info_types)
        if matching_type is not None:
            pulumi.set(__self__, "matching_type", matching_type)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]:
        """
        Dictionary which defines the rule.
        """
        return pulumi.get(self, "dictionary")

    @dictionary.setter
    def dictionary(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]):
        pulumi.set(self, "dictionary", value)

    @property
    @pulumi.getter(name="excludeByHotword")
    def exclude_by_hotword(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeByHotwordArgs']]:
        """
        Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
        """
        return pulumi.get(self, "exclude_by_hotword")

    @exclude_by_hotword.setter
    def exclude_by_hotword(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeByHotwordArgs']]):
        pulumi.set(self, "exclude_by_hotword", value)

    @property
    @pulumi.getter(name="excludeInfoTypes")
    def exclude_info_types(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeInfoTypesArgs']]:
        """
        Set of infoTypes for which findings would affect this rule.
        """
        return pulumi.get(self, "exclude_info_types")

    @exclude_info_types.setter
    def exclude_info_types(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExcludeInfoTypesArgs']]):
        pulumi.set(self, "exclude_info_types", value)

    @property
    @pulumi.getter(name="matchingType")
    def matching_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleMatchingType']]:
        """
        How the rule is applied, see MatchingType documentation for details.
        """
        return pulumi.get(self, "matching_type")

    @matching_type.setter
    def matching_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleMatchingType']]):
        pulumi.set(self, "matching_type", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]:
        """
        Regular expression which defines the rule.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GooglePrivacyDlpV2ExportArgs:
    def __init__(__self__, *,
                 profile_table: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] profile_table: Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
        """
        if profile_table is not None:
            pulumi.set(__self__, "profile_table", profile_table)

    @property
    @pulumi.getter(name="profileTable")
    def profile_table(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
        """
        return pulumi.get(self, "profile_table")

    @profile_table.setter
    def profile_table(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "profile_table", value)


@pulumi.input_type
class GooglePrivacyDlpV2ExpressionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input['GooglePrivacyDlpV2ConditionsArgs']] = None,
                 logical_operator: Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsLogicalOperator']] = None):
        """
        An expression, consisting of an operator and conditions.
        :param pulumi.Input['GooglePrivacyDlpV2ConditionsArgs'] conditions: Conditions to apply to the expression.
        :param pulumi.Input['GooglePrivacyDlpV2ExpressionsLogicalOperator'] logical_operator: The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logical_operator is not None:
            pulumi.set(__self__, "logical_operator", logical_operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ConditionsArgs']]:
        """
        Conditions to apply to the expression.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="logicalOperator")
    def logical_operator(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsLogicalOperator']]:
        """
        The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
        """
        return pulumi.get(self, "logical_operator")

    @logical_operator.setter
    def logical_operator(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsLogicalOperator']]):
        pulumi.set(self, "logical_operator", value)


@pulumi.input_type
class GooglePrivacyDlpV2FieldIdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        General identifier of a data field in a storage service.
        :param pulumi.Input[str] name: Name describing the field.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name describing the field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GooglePrivacyDlpV2FieldTransformationArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]],
                 condition: Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']] = None,
                 info_type_transformations: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']] = None,
                 primitive_transformation: Optional[pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs']] = None):
        """
        The transformation to apply to the field.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] fields: Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
        :param pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs'] condition: Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs'] info_type_transformations: Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
        :param pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs'] primitive_transformation: Apply the transformation to the entire field.
        """
        pulumi.set(__self__, "fields", fields)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if info_type_transformations is not None:
            pulumi.set(__self__, "info_type_transformations", info_type_transformations)
        if primitive_transformation is not None:
            pulumi.set(__self__, "primitive_transformation", primitive_transformation)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]:
        """
        Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']]:
        """
        Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="infoTypeTransformations")
    def info_type_transformations(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']]:
        """
        Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
        """
        return pulumi.get(self, "info_type_transformations")

    @info_type_transformations.setter
    def info_type_transformations(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationsArgs']]):
        pulumi.set(self, "info_type_transformations", value)

    @property
    @pulumi.getter(name="primitiveTransformation")
    def primitive_transformation(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs']]:
        """
        Apply the transformation to the entire field.
        """
        return pulumi.get(self, "primitive_transformation")

    @primitive_transformation.setter
    def primitive_transformation(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs']]):
        pulumi.set(self, "primitive_transformation", value)


@pulumi.input_type
class GooglePrivacyDlpV2FileSetArgs:
    def __init__(__self__, *,
                 regex_file_set: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageRegexFileSetArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Set of files to scan.
        :param pulumi.Input['GooglePrivacyDlpV2CloudStorageRegexFileSetArgs'] regex_file_set: The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
        :param pulumi.Input[str] url: The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
        """
        if regex_file_set is not None:
            pulumi.set(__self__, "regex_file_set", regex_file_set)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="regexFileSet")
    def regex_file_set(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageRegexFileSetArgs']]:
        """
        The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
        """
        return pulumi.get(self, "regex_file_set")

    @regex_file_set.setter
    def regex_file_set(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageRegexFileSetArgs']]):
        pulumi.set(self, "regex_file_set", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GooglePrivacyDlpV2FindingLimitsArgs:
    def __init__(__self__, *,
                 max_findings_per_info_type: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLimitArgs']]]] = None,
                 max_findings_per_item: Optional[pulumi.Input[int]] = None,
                 max_findings_per_request: Optional[pulumi.Input[int]] = None):
        """
        Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLimitArgs']]] max_findings_per_info_type: Configuration of findings limit given for specified infoTypes.
        :param pulumi.Input[int] max_findings_per_item: Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
        :param pulumi.Input[int] max_findings_per_request: Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
        """
        if max_findings_per_info_type is not None:
            pulumi.set(__self__, "max_findings_per_info_type", max_findings_per_info_type)
        if max_findings_per_item is not None:
            pulumi.set(__self__, "max_findings_per_item", max_findings_per_item)
        if max_findings_per_request is not None:
            pulumi.set(__self__, "max_findings_per_request", max_findings_per_request)

    @property
    @pulumi.getter(name="maxFindingsPerInfoType")
    def max_findings_per_info_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLimitArgs']]]]:
        """
        Configuration of findings limit given for specified infoTypes.
        """
        return pulumi.get(self, "max_findings_per_info_type")

    @max_findings_per_info_type.setter
    def max_findings_per_info_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLimitArgs']]]]):
        pulumi.set(self, "max_findings_per_info_type", value)

    @property
    @pulumi.getter(name="maxFindingsPerItem")
    def max_findings_per_item(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
        """
        return pulumi.get(self, "max_findings_per_item")

    @max_findings_per_item.setter
    def max_findings_per_item(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_findings_per_item", value)

    @property
    @pulumi.getter(name="maxFindingsPerRequest")
    def max_findings_per_request(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
        """
        return pulumi.get(self, "max_findings_per_request")

    @max_findings_per_request.setter
    def max_findings_per_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_findings_per_request", value)


@pulumi.input_type
class GooglePrivacyDlpV2FixedSizeBucketingConfigArgs:
    def __init__(__self__, *,
                 bucket_size: pulumi.Input[float],
                 lower_bound: pulumi.Input['GooglePrivacyDlpV2ValueArgs'],
                 upper_bound: pulumi.Input['GooglePrivacyDlpV2ValueArgs']):
        """
        Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
        :param pulumi.Input[float] bucket_size: Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] lower_bound: Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] upper_bound: Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
        """
        pulumi.set(__self__, "bucket_size", bucket_size)
        pulumi.set(__self__, "lower_bound", lower_bound)
        pulumi.set(__self__, "upper_bound", upper_bound)

    @property
    @pulumi.getter(name="bucketSize")
    def bucket_size(self) -> pulumi.Input[float]:
        """
        Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
        """
        return pulumi.get(self, "bucket_size")

    @bucket_size.setter
    def bucket_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "bucket_size", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> pulumi.Input['GooglePrivacyDlpV2ValueArgs']:
        """
        Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
        """
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: pulumi.Input['GooglePrivacyDlpV2ValueArgs']):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> pulumi.Input['GooglePrivacyDlpV2ValueArgs']:
        """
        Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
        """
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: pulumi.Input['GooglePrivacyDlpV2ValueArgs']):
        pulumi.set(self, "upper_bound", value)


@pulumi.input_type
class GooglePrivacyDlpV2HotwordRuleArgs:
    def __init__(__self__, *,
                 hotword_regex: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']] = None,
                 likelihood_adjustment: Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentArgs']] = None,
                 proximity: Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']] = None):
        """
        The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
        :param pulumi.Input['GooglePrivacyDlpV2RegexArgs'] hotword_regex: Regular expression pattern defining what qualifies as a hotword.
        :param pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentArgs'] likelihood_adjustment: Likelihood adjustment to apply to all matching findings.
        :param pulumi.Input['GooglePrivacyDlpV2ProximityArgs'] proximity: Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\\(\\d{3}\\) \\d{3}-\\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\\(xxx\\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
        """
        if hotword_regex is not None:
            pulumi.set(__self__, "hotword_regex", hotword_regex)
        if likelihood_adjustment is not None:
            pulumi.set(__self__, "likelihood_adjustment", likelihood_adjustment)
        if proximity is not None:
            pulumi.set(__self__, "proximity", proximity)

    @property
    @pulumi.getter(name="hotwordRegex")
    def hotword_regex(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]:
        """
        Regular expression pattern defining what qualifies as a hotword.
        """
        return pulumi.get(self, "hotword_regex")

    @hotword_regex.setter
    def hotword_regex(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]):
        pulumi.set(self, "hotword_regex", value)

    @property
    @pulumi.getter(name="likelihoodAdjustment")
    def likelihood_adjustment(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentArgs']]:
        """
        Likelihood adjustment to apply to all matching findings.
        """
        return pulumi.get(self, "likelihood_adjustment")

    @likelihood_adjustment.setter
    def likelihood_adjustment(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentArgs']]):
        pulumi.set(self, "likelihood_adjustment", value)

    @property
    @pulumi.getter
    def proximity(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']]:
        """
        Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\\(\\d{3}\\) \\d{3}-\\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\\(xxx\\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
        """
        return pulumi.get(self, "proximity")

    @proximity.setter
    def proximity(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ProximityArgs']]):
        pulumi.set(self, "proximity", value)


@pulumi.input_type
class GooglePrivacyDlpV2HybridOptionsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 required_finding_label_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 table_options: Optional[pulumi.Input['GooglePrivacyDlpV2TableOptionsArgs']] = None):
        """
        Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
        :param pulumi.Input[str] description: A short description of where the data is coming from. Will be stored once in the job. 256 max length.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] required_finding_label_keys: These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
        :param pulumi.Input['GooglePrivacyDlpV2TableOptionsArgs'] table_options: If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if required_finding_label_keys is not None:
            pulumi.set(__self__, "required_finding_label_keys", required_finding_label_keys)
        if table_options is not None:
            pulumi.set(__self__, "table_options", table_options)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A short description of where the data is coming from. Will be stored once in the job. 256 max length.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="requiredFindingLabelKeys")
    def required_finding_label_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
        """
        return pulumi.get(self, "required_finding_label_keys")

    @required_finding_label_keys.setter
    def required_finding_label_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required_finding_label_keys", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TableOptionsArgs']]:
        """
        If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
        """
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TableOptionsArgs']]):
        pulumi.set(self, "table_options", value)


@pulumi.input_type
class GooglePrivacyDlpV2ImageTransformationsArgs:
    def __init__(__self__, *,
                 transforms: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ImageTransformationArgs']]]] = None):
        """
        A type of transformation that is applied over images.
        """
        if transforms is not None:
            pulumi.set(__self__, "transforms", transforms)

    @property
    @pulumi.getter
    def transforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ImageTransformationArgs']]]]:
        return pulumi.get(self, "transforms")

    @transforms.setter
    def transforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ImageTransformationArgs']]]]):
        pulumi.set(self, "transforms", value)


@pulumi.input_type
class GooglePrivacyDlpV2ImageTransformationArgs:
    def __init__(__self__, *,
                 all_info_types: Optional[pulumi.Input['GooglePrivacyDlpV2AllInfoTypesArgs']] = None,
                 all_text: Optional[pulumi.Input['GooglePrivacyDlpV2AllTextArgs']] = None,
                 redaction_color: Optional[pulumi.Input['GooglePrivacyDlpV2ColorArgs']] = None,
                 selected_info_types: Optional[pulumi.Input['GooglePrivacyDlpV2SelectedInfoTypesArgs']] = None):
        """
        Configuration for determining how redaction of images should occur.
        :param pulumi.Input['GooglePrivacyDlpV2AllInfoTypesArgs'] all_info_types: Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
        :param pulumi.Input['GooglePrivacyDlpV2AllTextArgs'] all_text: Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
        :param pulumi.Input['GooglePrivacyDlpV2ColorArgs'] redaction_color: The color to use when redacting content from an image. If not specified, the default is black.
        :param pulumi.Input['GooglePrivacyDlpV2SelectedInfoTypesArgs'] selected_info_types: Apply transformation to the selected info_types.
        """
        if all_info_types is not None:
            pulumi.set(__self__, "all_info_types", all_info_types)
        if all_text is not None:
            pulumi.set(__self__, "all_text", all_text)
        if redaction_color is not None:
            pulumi.set(__self__, "redaction_color", redaction_color)
        if selected_info_types is not None:
            pulumi.set(__self__, "selected_info_types", selected_info_types)

    @property
    @pulumi.getter(name="allInfoTypes")
    def all_info_types(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2AllInfoTypesArgs']]:
        """
        Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
        """
        return pulumi.get(self, "all_info_types")

    @all_info_types.setter
    def all_info_types(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2AllInfoTypesArgs']]):
        pulumi.set(self, "all_info_types", value)

    @property
    @pulumi.getter(name="allText")
    def all_text(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2AllTextArgs']]:
        """
        Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
        """
        return pulumi.get(self, "all_text")

    @all_text.setter
    def all_text(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2AllTextArgs']]):
        pulumi.set(self, "all_text", value)

    @property
    @pulumi.getter(name="redactionColor")
    def redaction_color(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ColorArgs']]:
        """
        The color to use when redacting content from an image. If not specified, the default is black.
        """
        return pulumi.get(self, "redaction_color")

    @redaction_color.setter
    def redaction_color(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ColorArgs']]):
        pulumi.set(self, "redaction_color", value)

    @property
    @pulumi.getter(name="selectedInfoTypes")
    def selected_info_types(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SelectedInfoTypesArgs']]:
        """
        Apply transformation to the selected info_types.
        """
        return pulumi.get(self, "selected_info_types")

    @selected_info_types.setter
    def selected_info_types(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SelectedInfoTypesArgs']]):
        pulumi.set(self, "selected_info_types", value)


@pulumi.input_type
class GooglePrivacyDlpV2InfoTypeLikelihoodArgs:
    def __init__(__self__, *,
                 info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None,
                 min_likelihood: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood']] = None):
        """
        Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] info_type: Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood'] min_likelihood: Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
        """
        if info_type is not None:
            pulumi.set(__self__, "info_type", info_type)
        if min_likelihood is not None:
            pulumi.set(__self__, "min_likelihood", min_likelihood)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
        """
        return pulumi.get(self, "info_type")

    @info_type.setter
    def info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "info_type", value)

    @property
    @pulumi.getter(name="minLikelihood")
    def min_likelihood(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood']]:
        """
        Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
        """
        return pulumi.get(self, "min_likelihood")

    @min_likelihood.setter
    def min_likelihood(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood']]):
        pulumi.set(self, "min_likelihood", value)


@pulumi.input_type
class GooglePrivacyDlpV2InfoTypeLimitArgs:
    def __init__(__self__, *,
                 info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None,
                 max_findings: Optional[pulumi.Input[int]] = None):
        """
        Max findings configuration per infoType, per content item or long running DlpJob.
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] info_type: Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
        :param pulumi.Input[int] max_findings: Max findings limit for the given infoType.
        """
        if info_type is not None:
            pulumi.set(__self__, "info_type", info_type)
        if max_findings is not None:
            pulumi.set(__self__, "max_findings", max_findings)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
        """
        return pulumi.get(self, "info_type")

    @info_type.setter
    def info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "info_type", value)

    @property
    @pulumi.getter(name="maxFindings")
    def max_findings(self) -> Optional[pulumi.Input[int]]:
        """
        Max findings limit for the given infoType.
        """
        return pulumi.get(self, "max_findings")

    @max_findings.setter
    def max_findings(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_findings", value)


@pulumi.input_type
class GooglePrivacyDlpV2InfoTypeTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationArgs']]]):
        """
        A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationArgs']]] transformations: Transformation for each infoType. Cannot specify more than one for a given infoType.
        """
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationArgs']]]:
        """
        Transformation for each infoType. Cannot specify more than one for a given infoType.
        """
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class GooglePrivacyDlpV2InfoTypeTransformationArgs:
    def __init__(__self__, *,
                 primitive_transformation: pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs'],
                 info_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]] = None):
        """
        A transformation to apply to text that is identified as a specific info_type.
        :param pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs'] primitive_transformation: Primitive transformation to apply to the infoType.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]] info_types: InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
        """
        pulumi.set(__self__, "primitive_transformation", primitive_transformation)
        if info_types is not None:
            pulumi.set(__self__, "info_types", info_types)

    @property
    @pulumi.getter(name="primitiveTransformation")
    def primitive_transformation(self) -> pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs']:
        """
        Primitive transformation to apply to the infoType.
        """
        return pulumi.get(self, "primitive_transformation")

    @primitive_transformation.setter
    def primitive_transformation(self, value: pulumi.Input['GooglePrivacyDlpV2PrimitiveTransformationArgs']):
        pulumi.set(self, "primitive_transformation", value)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]:
        """
        InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
        """
        return pulumi.get(self, "info_types")

    @info_types.setter
    def info_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]):
        pulumi.set(self, "info_types", value)


@pulumi.input_type
class GooglePrivacyDlpV2InfoTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 sensitivity_score: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Type of information detected by the API.
        :param pulumi.Input[str] name: Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
        :param pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs'] sensitivity_score: Optional custom sensitivity for this InfoType. This only applies to data profiling.
        :param pulumi.Input[str] version: Optional version name for this InfoType.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sensitivity_score is not None:
            pulumi.set(__self__, "sensitivity_score", sensitivity_score)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sensitivityScore")
    def sensitivity_score(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']]:
        """
        Optional custom sensitivity for this InfoType. This only applies to data profiling.
        """
        return pulumi.get(self, "sensitivity_score")

    @sensitivity_score.setter
    def sensitivity_score(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreArgs']]):
        pulumi.set(self, "sensitivity_score", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional version name for this InfoType.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GooglePrivacyDlpV2InspectConfigArgs:
    def __init__(__self__, *,
                 content_options: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectConfigContentOptionsItem']]]] = None,
                 custom_info_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeArgs']]]] = None,
                 exclude_info_types: Optional[pulumi.Input[bool]] = None,
                 include_quote: Optional[pulumi.Input[bool]] = None,
                 info_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]] = None,
                 limits: Optional[pulumi.Input['GooglePrivacyDlpV2FindingLimitsArgs']] = None,
                 min_likelihood: Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigMinLikelihood']] = None,
                 min_likelihood_per_info_type: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodArgs']]]] = None,
                 rule_set: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleSetArgs']]]] = None):
        """
        Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectConfigContentOptionsItem']]] content_options: Deprecated and unused.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeArgs']]] custom_info_types: CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
        :param pulumi.Input[bool] exclude_info_types: When true, excludes type information of the findings. This is not used for data profiling.
        :param pulumi.Input[bool] include_quote: When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]] info_types: Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
        :param pulumi.Input['GooglePrivacyDlpV2FindingLimitsArgs'] limits: Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
        :param pulumi.Input['GooglePrivacyDlpV2InspectConfigMinLikelihood'] min_likelihood: Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodArgs']]] min_likelihood_per_info_type: Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleSetArgs']]] rule_set: Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
        """
        if content_options is not None:
            warnings.warn("""Deprecated and unused.""", DeprecationWarning)
            pulumi.log.warn("""content_options is deprecated: Deprecated and unused.""")
        if content_options is not None:
            pulumi.set(__self__, "content_options", content_options)
        if custom_info_types is not None:
            pulumi.set(__self__, "custom_info_types", custom_info_types)
        if exclude_info_types is not None:
            pulumi.set(__self__, "exclude_info_types", exclude_info_types)
        if include_quote is not None:
            pulumi.set(__self__, "include_quote", include_quote)
        if info_types is not None:
            pulumi.set(__self__, "info_types", info_types)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if min_likelihood is not None:
            pulumi.set(__self__, "min_likelihood", min_likelihood)
        if min_likelihood_per_info_type is not None:
            pulumi.set(__self__, "min_likelihood_per_info_type", min_likelihood_per_info_type)
        if rule_set is not None:
            pulumi.set(__self__, "rule_set", rule_set)

    @property
    @pulumi.getter(name="contentOptions")
    @_utilities.deprecated("""Deprecated and unused.""")
    def content_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectConfigContentOptionsItem']]]]:
        """
        Deprecated and unused.
        """
        return pulumi.get(self, "content_options")

    @content_options.setter
    def content_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectConfigContentOptionsItem']]]]):
        pulumi.set(self, "content_options", value)

    @property
    @pulumi.getter(name="customInfoTypes")
    def custom_info_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeArgs']]]]:
        """
        CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
        """
        return pulumi.get(self, "custom_info_types")

    @custom_info_types.setter
    def custom_info_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2CustomInfoTypeArgs']]]]):
        pulumi.set(self, "custom_info_types", value)

    @property
    @pulumi.getter(name="excludeInfoTypes")
    def exclude_info_types(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, excludes type information of the findings. This is not used for data profiling.
        """
        return pulumi.get(self, "exclude_info_types")

    @exclude_info_types.setter
    def exclude_info_types(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_info_types", value)

    @property
    @pulumi.getter(name="includeQuote")
    def include_quote(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
        """
        return pulumi.get(self, "include_quote")

    @include_quote.setter
    def include_quote(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_quote", value)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]:
        """
        Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
        """
        return pulumi.get(self, "info_types")

    @info_types.setter
    def info_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]):
        pulumi.set(self, "info_types", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FindingLimitsArgs']]:
        """
        Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FindingLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter(name="minLikelihood")
    def min_likelihood(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigMinLikelihood']]:
        """
        Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
        """
        return pulumi.get(self, "min_likelihood")

    @min_likelihood.setter
    def min_likelihood(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigMinLikelihood']]):
        pulumi.set(self, "min_likelihood", value)

    @property
    @pulumi.getter(name="minLikelihoodPerInfoType")
    def min_likelihood_per_info_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodArgs']]]]:
        """
        Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
        """
        return pulumi.get(self, "min_likelihood_per_info_type")

    @min_likelihood_per_info_type.setter
    def min_likelihood_per_info_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeLikelihoodArgs']]]]):
        pulumi.set(self, "min_likelihood_per_info_type", value)

    @property
    @pulumi.getter(name="ruleSet")
    def rule_set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleSetArgs']]]]:
        """
        Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
        """
        return pulumi.get(self, "rule_set")

    @rule_set.setter
    def rule_set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleSetArgs']]]]):
        pulumi.set(self, "rule_set", value)


@pulumi.input_type
class GooglePrivacyDlpV2InspectJobConfigArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]] = None,
                 inspect_config: Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigArgs']] = None,
                 inspect_template_name: Optional[pulumi.Input[str]] = None,
                 storage_config: Optional[pulumi.Input['GooglePrivacyDlpV2StorageConfigArgs']] = None):
        """
        Controls what and how to inspect for findings.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]] actions: Actions to execute at the completion of the job.
        :param pulumi.Input['GooglePrivacyDlpV2InspectConfigArgs'] inspect_config: How and what to scan for.
        :param pulumi.Input[str] inspect_template_name: If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
        :param pulumi.Input['GooglePrivacyDlpV2StorageConfigArgs'] storage_config: The data to scan.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if inspect_config is not None:
            pulumi.set(__self__, "inspect_config", inspect_config)
        if inspect_template_name is not None:
            pulumi.set(__self__, "inspect_template_name", inspect_template_name)
        if storage_config is not None:
            pulumi.set(__self__, "storage_config", storage_config)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]]:
        """
        Actions to execute at the completion of the job.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="inspectConfig")
    def inspect_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigArgs']]:
        """
        How and what to scan for.
        """
        return pulumi.get(self, "inspect_config")

    @inspect_config.setter
    def inspect_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InspectConfigArgs']]):
        pulumi.set(self, "inspect_config", value)

    @property
    @pulumi.getter(name="inspectTemplateName")
    def inspect_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
        """
        return pulumi.get(self, "inspect_template_name")

    @inspect_template_name.setter
    def inspect_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_template_name", value)

    @property
    @pulumi.getter(name="storageConfig")
    def storage_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2StorageConfigArgs']]:
        """
        The data to scan.
        """
        return pulumi.get(self, "storage_config")

    @storage_config.setter
    def storage_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2StorageConfigArgs']]):
        pulumi.set(self, "storage_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2InspectionRuleSetArgs:
    def __init__(__self__, *,
                 info_types: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleArgs']]]] = None):
        """
        Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]] info_types: List of infoTypes this rule set is applied to.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleArgs']]] rules: Set of rules to be applied to infoTypes. The rules are applied in order.
        """
        if info_types is not None:
            pulumi.set(__self__, "info_types", info_types)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]:
        """
        List of infoTypes this rule set is applied to.
        """
        return pulumi.get(self, "info_types")

    @info_types.setter
    def info_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]]):
        pulumi.set(self, "info_types", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleArgs']]]]:
        """
        Set of rules to be applied to infoTypes. The rules are applied in order.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InspectionRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class GooglePrivacyDlpV2InspectionRuleArgs:
    def __init__(__self__, *,
                 exclusion_rule: Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleArgs']] = None,
                 hotword_rule: Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']] = None):
        """
        A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
        :param pulumi.Input['GooglePrivacyDlpV2ExclusionRuleArgs'] exclusion_rule: Exclusion rule.
        :param pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs'] hotword_rule: Hotword-based detection rule.
        """
        if exclusion_rule is not None:
            pulumi.set(__self__, "exclusion_rule", exclusion_rule)
        if hotword_rule is not None:
            pulumi.set(__self__, "hotword_rule", hotword_rule)

    @property
    @pulumi.getter(name="exclusionRule")
    def exclusion_rule(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleArgs']]:
        """
        Exclusion rule.
        """
        return pulumi.get(self, "exclusion_rule")

    @exclusion_rule.setter
    def exclusion_rule(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExclusionRuleArgs']]):
        pulumi.set(self, "exclusion_rule", value)

    @property
    @pulumi.getter(name="hotwordRule")
    def hotword_rule(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']]:
        """
        Hotword-based detection rule.
        """
        return pulumi.get(self, "hotword_rule")

    @hotword_rule.setter
    def hotword_rule(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2HotwordRuleArgs']]):
        pulumi.set(self, "hotword_rule", value)


@pulumi.input_type
class GooglePrivacyDlpV2JobNotificationEmailsArgs:
    def __init__(__self__):
        """
        Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2KAnonymityConfigArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input['GooglePrivacyDlpV2EntityIdArgs']] = None,
                 quasi_ids: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None):
        """
        k-anonymity metric, used for analysis of reidentification risk.
        :param pulumi.Input['GooglePrivacyDlpV2EntityIdArgs'] entity_id: Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] quasi_ids: Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if quasi_ids is not None:
            pulumi.set(__self__, "quasi_ids", quasi_ids)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2EntityIdArgs']]:
        """
        Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2EntityIdArgs']]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "quasi_ids", value)


@pulumi.input_type
class GooglePrivacyDlpV2KMapEstimationConfigArgs:
    def __init__(__self__, *,
                 quasi_ids: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2TaggedFieldArgs']]],
                 auxiliary_tables: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2AuxiliaryTableArgs']]]] = None,
                 region_code: Optional[pulumi.Input[str]] = None):
        """
        Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2TaggedFieldArgs']]] quasi_ids: Fields considered to be quasi-identifiers. No two columns can have the same tag.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2AuxiliaryTableArgs']]] auxiliary_tables: Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
        :param pulumi.Input[str] region_code: ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
        """
        pulumi.set(__self__, "quasi_ids", quasi_ids)
        if auxiliary_tables is not None:
            pulumi.set(__self__, "auxiliary_tables", auxiliary_tables)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2TaggedFieldArgs']]]:
        """
        Fields considered to be quasi-identifiers. No two columns can have the same tag.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2TaggedFieldArgs']]]):
        pulumi.set(self, "quasi_ids", value)

    @property
    @pulumi.getter(name="auxiliaryTables")
    def auxiliary_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2AuxiliaryTableArgs']]]]:
        """
        Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
        """
        return pulumi.get(self, "auxiliary_tables")

    @auxiliary_tables.setter
    def auxiliary_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2AuxiliaryTableArgs']]]]):
        pulumi.set(self, "auxiliary_tables", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)


@pulumi.input_type
class GooglePrivacyDlpV2KindExpressionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        A representation of a Datastore kind.
        :param pulumi.Input[str] name: The name of the kind.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the kind.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs:
    def __init__(__self__, *,
                 crypto_key_name: pulumi.Input[str],
                 wrapped_key: pulumi.Input[str]):
        """
        Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
        :param pulumi.Input[str] crypto_key_name: The resource name of the KMS CryptoKey to use for unwrapping.
        :param pulumi.Input[str] wrapped_key: The wrapped data crypto key.
        """
        pulumi.set(__self__, "crypto_key_name", crypto_key_name)
        pulumi.set(__self__, "wrapped_key", wrapped_key)

    @property
    @pulumi.getter(name="cryptoKeyName")
    def crypto_key_name(self) -> pulumi.Input[str]:
        """
        The resource name of the KMS CryptoKey to use for unwrapping.
        """
        return pulumi.get(self, "crypto_key_name")

    @crypto_key_name.setter
    def crypto_key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "crypto_key_name", value)

    @property
    @pulumi.getter(name="wrappedKey")
    def wrapped_key(self) -> pulumi.Input[str]:
        """
        The wrapped data crypto key.
        """
        return pulumi.get(self, "wrapped_key")

    @wrapped_key.setter
    def wrapped_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "wrapped_key", value)


@pulumi.input_type
class GooglePrivacyDlpV2LDiversityConfigArgs:
    def __init__(__self__, *,
                 quasi_ids: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None,
                 sensitive_attribute: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        l-diversity metric, used for analysis of reidentification risk.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] quasi_ids: Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] sensitive_attribute: Sensitive field for computing the l-value.
        """
        if quasi_ids is not None:
            pulumi.set(__self__, "quasi_ids", quasi_ids)
        if sensitive_attribute is not None:
            pulumi.set(__self__, "sensitive_attribute", sensitive_attribute)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "quasi_ids", value)

    @property
    @pulumi.getter(name="sensitiveAttribute")
    def sensitive_attribute(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Sensitive field for computing the l-value.
        """
        return pulumi.get(self, "sensitive_attribute")

    @sensitive_attribute.setter
    def sensitive_attribute(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "sensitive_attribute", value)


@pulumi.input_type
class GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs:
    def __init__(__self__, *,
                 big_query_field: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryFieldArgs']] = None,
                 cloud_storage_file_set: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageFileSetArgs']] = None,
                 output_path: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']] = None):
        """
        Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryFieldArgs'] big_query_field: Field in a BigQuery table where each cell represents a dictionary phrase.
        :param pulumi.Input['GooglePrivacyDlpV2CloudStorageFileSetArgs'] cloud_storage_file_set: Set of files containing newline-delimited lists of dictionary phrases.
        :param pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs'] output_path: Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
        """
        if big_query_field is not None:
            pulumi.set(__self__, "big_query_field", big_query_field)
        if cloud_storage_file_set is not None:
            pulumi.set(__self__, "cloud_storage_file_set", cloud_storage_file_set)
        if output_path is not None:
            pulumi.set(__self__, "output_path", output_path)

    @property
    @pulumi.getter(name="bigQueryField")
    def big_query_field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryFieldArgs']]:
        """
        Field in a BigQuery table where each cell represents a dictionary phrase.
        """
        return pulumi.get(self, "big_query_field")

    @big_query_field.setter
    def big_query_field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryFieldArgs']]):
        pulumi.set(self, "big_query_field", value)

    @property
    @pulumi.getter(name="cloudStorageFileSet")
    def cloud_storage_file_set(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageFileSetArgs']]:
        """
        Set of files containing newline-delimited lists of dictionary phrases.
        """
        return pulumi.get(self, "cloud_storage_file_set")

    @cloud_storage_file_set.setter
    def cloud_storage_file_set(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageFileSetArgs']]):
        pulumi.set(self, "cloud_storage_file_set", value)

    @property
    @pulumi.getter(name="outputPath")
    def output_path(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']]:
        """
        Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
        """
        return pulumi.get(self, "output_path")

    @output_path.setter
    def output_path(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStoragePathArgs']]):
        pulumi.set(self, "output_path", value)


@pulumi.input_type
class GooglePrivacyDlpV2LeaveUntransformedArgs:
    def __init__(__self__):
        """
        Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2LikelihoodAdjustmentArgs:
    def __init__(__self__, *,
                 fixed_likelihood: Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood']] = None,
                 relative_likelihood: Optional[pulumi.Input[int]] = None):
        """
        Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
        :param pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood'] fixed_likelihood: Set the likelihood of a finding to a fixed value.
        :param pulumi.Input[int] relative_likelihood: Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
        """
        if fixed_likelihood is not None:
            pulumi.set(__self__, "fixed_likelihood", fixed_likelihood)
        if relative_likelihood is not None:
            pulumi.set(__self__, "relative_likelihood", relative_likelihood)

    @property
    @pulumi.getter(name="fixedLikelihood")
    def fixed_likelihood(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood']]:
        """
        Set the likelihood of a finding to a fixed value.
        """
        return pulumi.get(self, "fixed_likelihood")

    @fixed_likelihood.setter
    def fixed_likelihood(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood']]):
        pulumi.set(self, "fixed_likelihood", value)

    @property
    @pulumi.getter(name="relativeLikelihood")
    def relative_likelihood(self) -> Optional[pulumi.Input[int]]:
        """
        Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
        """
        return pulumi.get(self, "relative_likelihood")

    @relative_likelihood.setter
    def relative_likelihood(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "relative_likelihood", value)


@pulumi.input_type
class GooglePrivacyDlpV2ManualArgs:
    def __init__(__self__):
        """
        Job trigger option for hybrid jobs. Jobs must be manually created and finished.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2NumericalStatsConfigArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        Compute numerical stats over an individual column, including min, max, and quantiles.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
        """
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class GooglePrivacyDlpV2OrConditionsArgs:
    def __init__(__self__, *,
                 min_age: Optional[pulumi.Input[str]] = None,
                 min_row_count: Optional[pulumi.Input[int]] = None):
        """
        There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
        :param pulumi.Input[str] min_age: Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
        :param pulumi.Input[int] min_row_count: Minimum number of rows that should be present before Cloud DLP profiles a table
        """
        if min_age is not None:
            pulumi.set(__self__, "min_age", min_age)
        if min_row_count is not None:
            pulumi.set(__self__, "min_row_count", min_row_count)

    @property
    @pulumi.getter(name="minAge")
    def min_age(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
        """
        return pulumi.get(self, "min_age")

    @min_age.setter
    def min_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_age", value)

    @property
    @pulumi.getter(name="minRowCount")
    def min_row_count(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of rows that should be present before Cloud DLP profiles a table
        """
        return pulumi.get(self, "min_row_count")

    @min_row_count.setter
    def min_row_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_row_count", value)


@pulumi.input_type
class GooglePrivacyDlpV2OrgConfigArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryStartingLocationArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        Project and scan location information. Only set when the parent is an org.
        :param pulumi.Input['GooglePrivacyDlpV2DiscoveryStartingLocationArgs'] location: The data to scan: folder, org, or project
        :param pulumi.Input[str] project: The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryStartingLocationArgs']]:
        """
        The data to scan: folder, org, or project
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DiscoveryStartingLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class GooglePrivacyDlpV2OutputStorageConfigArgs:
    def __init__(__self__, *,
                 output_schema: Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigOutputSchema']] = None,
                 table: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        Cloud repository for storing output.
        :param pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigOutputSchema'] output_schema: Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table: Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
        """
        if output_schema is not None:
            pulumi.set(__self__, "output_schema", output_schema)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigOutputSchema']]:
        """
        Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
        """
        return pulumi.get(self, "output_schema")

    @output_schema.setter
    def output_schema(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigOutputSchema']]):
        pulumi.set(self, "output_schema", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class GooglePrivacyDlpV2PartitionIdArgs:
    def __init__(__self__, *,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
        :param pulumi.Input[str] namespace_id: If not empty, the ID of the namespace to which the entities belong.
        :param pulumi.Input[str] project: The ID of the project to which the entities belong.
        """
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        If not empty, the ID of the namespace to which the entities belong.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project to which the entities belong.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class GooglePrivacyDlpV2PrimitiveTransformationArgs:
    def __init__(__self__, *,
                 bucketing_config: Optional[pulumi.Input['GooglePrivacyDlpV2BucketingConfigArgs']] = None,
                 character_mask_config: Optional[pulumi.Input['GooglePrivacyDlpV2CharacterMaskConfigArgs']] = None,
                 crypto_deterministic_config: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoDeterministicConfigArgs']] = None,
                 crypto_hash_config: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoHashConfigArgs']] = None,
                 crypto_replace_ffx_fpe_config: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs']] = None,
                 date_shift_config: Optional[pulumi.Input['GooglePrivacyDlpV2DateShiftConfigArgs']] = None,
                 fixed_size_bucketing_config: Optional[pulumi.Input['GooglePrivacyDlpV2FixedSizeBucketingConfigArgs']] = None,
                 redact_config: Optional[pulumi.Input['GooglePrivacyDlpV2RedactConfigArgs']] = None,
                 replace_config: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceValueConfigArgs']] = None,
                 replace_dictionary_config: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceDictionaryConfigArgs']] = None,
                 replace_with_info_type_config: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs']] = None,
                 time_part_config: Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigArgs']] = None):
        """
        A rule for transforming a value.
        :param pulumi.Input['GooglePrivacyDlpV2BucketingConfigArgs'] bucketing_config: Bucketing
        :param pulumi.Input['GooglePrivacyDlpV2CharacterMaskConfigArgs'] character_mask_config: Mask
        :param pulumi.Input['GooglePrivacyDlpV2CryptoDeterministicConfigArgs'] crypto_deterministic_config: Deterministic Crypto
        :param pulumi.Input['GooglePrivacyDlpV2CryptoHashConfigArgs'] crypto_hash_config: Crypto
        :param pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs'] crypto_replace_ffx_fpe_config: Ffx-Fpe
        :param pulumi.Input['GooglePrivacyDlpV2DateShiftConfigArgs'] date_shift_config: Date Shift
        :param pulumi.Input['GooglePrivacyDlpV2FixedSizeBucketingConfigArgs'] fixed_size_bucketing_config: Fixed size bucketing
        :param pulumi.Input['GooglePrivacyDlpV2RedactConfigArgs'] redact_config: Redact
        :param pulumi.Input['GooglePrivacyDlpV2ReplaceValueConfigArgs'] replace_config: Replace with a specified value.
        :param pulumi.Input['GooglePrivacyDlpV2ReplaceDictionaryConfigArgs'] replace_dictionary_config: Replace with a value randomly drawn (with replacement) from a dictionary.
        :param pulumi.Input['GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs'] replace_with_info_type_config: Replace with infotype
        :param pulumi.Input['GooglePrivacyDlpV2TimePartConfigArgs'] time_part_config: Time extraction
        """
        if bucketing_config is not None:
            pulumi.set(__self__, "bucketing_config", bucketing_config)
        if character_mask_config is not None:
            pulumi.set(__self__, "character_mask_config", character_mask_config)
        if crypto_deterministic_config is not None:
            pulumi.set(__self__, "crypto_deterministic_config", crypto_deterministic_config)
        if crypto_hash_config is not None:
            pulumi.set(__self__, "crypto_hash_config", crypto_hash_config)
        if crypto_replace_ffx_fpe_config is not None:
            pulumi.set(__self__, "crypto_replace_ffx_fpe_config", crypto_replace_ffx_fpe_config)
        if date_shift_config is not None:
            pulumi.set(__self__, "date_shift_config", date_shift_config)
        if fixed_size_bucketing_config is not None:
            pulumi.set(__self__, "fixed_size_bucketing_config", fixed_size_bucketing_config)
        if redact_config is not None:
            pulumi.set(__self__, "redact_config", redact_config)
        if replace_config is not None:
            pulumi.set(__self__, "replace_config", replace_config)
        if replace_dictionary_config is not None:
            pulumi.set(__self__, "replace_dictionary_config", replace_dictionary_config)
        if replace_with_info_type_config is not None:
            pulumi.set(__self__, "replace_with_info_type_config", replace_with_info_type_config)
        if time_part_config is not None:
            pulumi.set(__self__, "time_part_config", time_part_config)

    @property
    @pulumi.getter(name="bucketingConfig")
    def bucketing_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BucketingConfigArgs']]:
        """
        Bucketing
        """
        return pulumi.get(self, "bucketing_config")

    @bucketing_config.setter
    def bucketing_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BucketingConfigArgs']]):
        pulumi.set(self, "bucketing_config", value)

    @property
    @pulumi.getter(name="characterMaskConfig")
    def character_mask_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CharacterMaskConfigArgs']]:
        """
        Mask
        """
        return pulumi.get(self, "character_mask_config")

    @character_mask_config.setter
    def character_mask_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CharacterMaskConfigArgs']]):
        pulumi.set(self, "character_mask_config", value)

    @property
    @pulumi.getter(name="cryptoDeterministicConfig")
    def crypto_deterministic_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoDeterministicConfigArgs']]:
        """
        Deterministic Crypto
        """
        return pulumi.get(self, "crypto_deterministic_config")

    @crypto_deterministic_config.setter
    def crypto_deterministic_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoDeterministicConfigArgs']]):
        pulumi.set(self, "crypto_deterministic_config", value)

    @property
    @pulumi.getter(name="cryptoHashConfig")
    def crypto_hash_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoHashConfigArgs']]:
        """
        Crypto
        """
        return pulumi.get(self, "crypto_hash_config")

    @crypto_hash_config.setter
    def crypto_hash_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoHashConfigArgs']]):
        pulumi.set(self, "crypto_hash_config", value)

    @property
    @pulumi.getter(name="cryptoReplaceFfxFpeConfig")
    def crypto_replace_ffx_fpe_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs']]:
        """
        Ffx-Fpe
        """
        return pulumi.get(self, "crypto_replace_ffx_fpe_config")

    @crypto_replace_ffx_fpe_config.setter
    def crypto_replace_ffx_fpe_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs']]):
        pulumi.set(self, "crypto_replace_ffx_fpe_config", value)

    @property
    @pulumi.getter(name="dateShiftConfig")
    def date_shift_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DateShiftConfigArgs']]:
        """
        Date Shift
        """
        return pulumi.get(self, "date_shift_config")

    @date_shift_config.setter
    def date_shift_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DateShiftConfigArgs']]):
        pulumi.set(self, "date_shift_config", value)

    @property
    @pulumi.getter(name="fixedSizeBucketingConfig")
    def fixed_size_bucketing_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FixedSizeBucketingConfigArgs']]:
        """
        Fixed size bucketing
        """
        return pulumi.get(self, "fixed_size_bucketing_config")

    @fixed_size_bucketing_config.setter
    def fixed_size_bucketing_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FixedSizeBucketingConfigArgs']]):
        pulumi.set(self, "fixed_size_bucketing_config", value)

    @property
    @pulumi.getter(name="redactConfig")
    def redact_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RedactConfigArgs']]:
        """
        Redact
        """
        return pulumi.get(self, "redact_config")

    @redact_config.setter
    def redact_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RedactConfigArgs']]):
        pulumi.set(self, "redact_config", value)

    @property
    @pulumi.getter(name="replaceConfig")
    def replace_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceValueConfigArgs']]:
        """
        Replace with a specified value.
        """
        return pulumi.get(self, "replace_config")

    @replace_config.setter
    def replace_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceValueConfigArgs']]):
        pulumi.set(self, "replace_config", value)

    @property
    @pulumi.getter(name="replaceDictionaryConfig")
    def replace_dictionary_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceDictionaryConfigArgs']]:
        """
        Replace with a value randomly drawn (with replacement) from a dictionary.
        """
        return pulumi.get(self, "replace_dictionary_config")

    @replace_dictionary_config.setter
    def replace_dictionary_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceDictionaryConfigArgs']]):
        pulumi.set(self, "replace_dictionary_config", value)

    @property
    @pulumi.getter(name="replaceWithInfoTypeConfig")
    def replace_with_info_type_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs']]:
        """
        Replace with infotype
        """
        return pulumi.get(self, "replace_with_info_type_config")

    @replace_with_info_type_config.setter
    def replace_with_info_type_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs']]):
        pulumi.set(self, "replace_with_info_type_config", value)

    @property
    @pulumi.getter(name="timePartConfig")
    def time_part_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigArgs']]:
        """
        Time extraction
        """
        return pulumi.get(self, "time_part_config")

    @time_part_config.setter
    def time_part_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigArgs']]):
        pulumi.set(self, "time_part_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2PrivacyMetricArgs:
    def __init__(__self__, *,
                 categorical_stats_config: Optional[pulumi.Input['GooglePrivacyDlpV2CategoricalStatsConfigArgs']] = None,
                 delta_presence_estimation_config: Optional[pulumi.Input['GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs']] = None,
                 k_anonymity_config: Optional[pulumi.Input['GooglePrivacyDlpV2KAnonymityConfigArgs']] = None,
                 k_map_estimation_config: Optional[pulumi.Input['GooglePrivacyDlpV2KMapEstimationConfigArgs']] = None,
                 l_diversity_config: Optional[pulumi.Input['GooglePrivacyDlpV2LDiversityConfigArgs']] = None,
                 numerical_stats_config: Optional[pulumi.Input['GooglePrivacyDlpV2NumericalStatsConfigArgs']] = None):
        """
        Privacy metric to compute for reidentification risk analysis.
        :param pulumi.Input['GooglePrivacyDlpV2CategoricalStatsConfigArgs'] categorical_stats_config: Categorical stats
        :param pulumi.Input['GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs'] delta_presence_estimation_config: delta-presence
        :param pulumi.Input['GooglePrivacyDlpV2KAnonymityConfigArgs'] k_anonymity_config: K-anonymity
        :param pulumi.Input['GooglePrivacyDlpV2KMapEstimationConfigArgs'] k_map_estimation_config: k-map
        :param pulumi.Input['GooglePrivacyDlpV2LDiversityConfigArgs'] l_diversity_config: l-diversity
        :param pulumi.Input['GooglePrivacyDlpV2NumericalStatsConfigArgs'] numerical_stats_config: Numerical stats
        """
        if categorical_stats_config is not None:
            pulumi.set(__self__, "categorical_stats_config", categorical_stats_config)
        if delta_presence_estimation_config is not None:
            pulumi.set(__self__, "delta_presence_estimation_config", delta_presence_estimation_config)
        if k_anonymity_config is not None:
            pulumi.set(__self__, "k_anonymity_config", k_anonymity_config)
        if k_map_estimation_config is not None:
            pulumi.set(__self__, "k_map_estimation_config", k_map_estimation_config)
        if l_diversity_config is not None:
            pulumi.set(__self__, "l_diversity_config", l_diversity_config)
        if numerical_stats_config is not None:
            pulumi.set(__self__, "numerical_stats_config", numerical_stats_config)

    @property
    @pulumi.getter(name="categoricalStatsConfig")
    def categorical_stats_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CategoricalStatsConfigArgs']]:
        """
        Categorical stats
        """
        return pulumi.get(self, "categorical_stats_config")

    @categorical_stats_config.setter
    def categorical_stats_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CategoricalStatsConfigArgs']]):
        pulumi.set(self, "categorical_stats_config", value)

    @property
    @pulumi.getter(name="deltaPresenceEstimationConfig")
    def delta_presence_estimation_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs']]:
        """
        delta-presence
        """
        return pulumi.get(self, "delta_presence_estimation_config")

    @delta_presence_estimation_config.setter
    def delta_presence_estimation_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs']]):
        pulumi.set(self, "delta_presence_estimation_config", value)

    @property
    @pulumi.getter(name="kAnonymityConfig")
    def k_anonymity_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2KAnonymityConfigArgs']]:
        """
        K-anonymity
        """
        return pulumi.get(self, "k_anonymity_config")

    @k_anonymity_config.setter
    def k_anonymity_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2KAnonymityConfigArgs']]):
        pulumi.set(self, "k_anonymity_config", value)

    @property
    @pulumi.getter(name="kMapEstimationConfig")
    def k_map_estimation_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2KMapEstimationConfigArgs']]:
        """
        k-map
        """
        return pulumi.get(self, "k_map_estimation_config")

    @k_map_estimation_config.setter
    def k_map_estimation_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2KMapEstimationConfigArgs']]):
        pulumi.set(self, "k_map_estimation_config", value)

    @property
    @pulumi.getter(name="lDiversityConfig")
    def l_diversity_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2LDiversityConfigArgs']]:
        """
        l-diversity
        """
        return pulumi.get(self, "l_diversity_config")

    @l_diversity_config.setter
    def l_diversity_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2LDiversityConfigArgs']]):
        pulumi.set(self, "l_diversity_config", value)

    @property
    @pulumi.getter(name="numericalStatsConfig")
    def numerical_stats_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2NumericalStatsConfigArgs']]:
        """
        Numerical stats
        """
        return pulumi.get(self, "numerical_stats_config")

    @numerical_stats_config.setter
    def numerical_stats_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2NumericalStatsConfigArgs']]):
        pulumi.set(self, "numerical_stats_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2ProximityArgs:
    def __init__(__self__, *,
                 window_after: Optional[pulumi.Input[int]] = None,
                 window_before: Optional[pulumi.Input[int]] = None):
        """
        Message for specifying a window around a finding to apply a detection rule.
        :param pulumi.Input[int] window_after: Number of characters after the finding to consider.
        :param pulumi.Input[int] window_before: Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
        """
        if window_after is not None:
            pulumi.set(__self__, "window_after", window_after)
        if window_before is not None:
            pulumi.set(__self__, "window_before", window_before)

    @property
    @pulumi.getter(name="windowAfter")
    def window_after(self) -> Optional[pulumi.Input[int]]:
        """
        Number of characters after the finding to consider.
        """
        return pulumi.get(self, "window_after")

    @window_after.setter
    def window_after(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_after", value)

    @property
    @pulumi.getter(name="windowBefore")
    def window_before(self) -> Optional[pulumi.Input[int]]:
        """
        Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
        """
        return pulumi.get(self, "window_before")

    @window_before.setter
    def window_before(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_before", value)


@pulumi.input_type
class GooglePrivacyDlpV2PubSubConditionArgs:
    def __init__(__self__, *,
                 minimum_risk_score: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumRiskScore']] = None,
                 minimum_sensitivity_score: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore']] = None):
        """
        A condition consisting of a value.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumRiskScore'] minimum_risk_score: The minimum data risk score that triggers the condition.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore'] minimum_sensitivity_score: The minimum sensitivity level that triggers the condition.
        """
        if minimum_risk_score is not None:
            pulumi.set(__self__, "minimum_risk_score", minimum_risk_score)
        if minimum_sensitivity_score is not None:
            pulumi.set(__self__, "minimum_sensitivity_score", minimum_sensitivity_score)

    @property
    @pulumi.getter(name="minimumRiskScore")
    def minimum_risk_score(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumRiskScore']]:
        """
        The minimum data risk score that triggers the condition.
        """
        return pulumi.get(self, "minimum_risk_score")

    @minimum_risk_score.setter
    def minimum_risk_score(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumRiskScore']]):
        pulumi.set(self, "minimum_risk_score", value)

    @property
    @pulumi.getter(name="minimumSensitivityScore")
    def minimum_sensitivity_score(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore']]:
        """
        The minimum sensitivity level that triggers the condition.
        """
        return pulumi.get(self, "minimum_sensitivity_score")

    @minimum_sensitivity_score.setter
    def minimum_sensitivity_score(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore']]):
        pulumi.set(self, "minimum_sensitivity_score", value)


@pulumi.input_type
class GooglePrivacyDlpV2PubSubExpressionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2PubSubConditionArgs']]]] = None,
                 logical_operator: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsLogicalOperator']] = None):
        """
        An expression, consisting of an operator and conditions.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2PubSubConditionArgs']]] conditions: Conditions to apply to the expression.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsLogicalOperator'] logical_operator: The operator to apply to the collection of conditions.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if logical_operator is not None:
            pulumi.set(__self__, "logical_operator", logical_operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2PubSubConditionArgs']]]]:
        """
        Conditions to apply to the expression.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2PubSubConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="logicalOperator")
    def logical_operator(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsLogicalOperator']]:
        """
        The operator to apply to the collection of conditions.
        """
        return pulumi.get(self, "logical_operator")

    @logical_operator.setter
    def logical_operator(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubExpressionsLogicalOperator']]):
        pulumi.set(self, "logical_operator", value)


@pulumi.input_type
class GooglePrivacyDlpV2PubSubNotificationArgs:
    def __init__(__self__, *,
                 detail_of_message: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationDetailOfMessage']] = None,
                 event: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationEvent']] = None,
                 pubsub_condition: Optional[pulumi.Input['GooglePrivacyDlpV2DataProfilePubSubConditionArgs']] = None,
                 topic: Optional[pulumi.Input[str]] = None):
        """
        Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
        :param pulumi.Input['GooglePrivacyDlpV2PubSubNotificationDetailOfMessage'] detail_of_message: How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
        :param pulumi.Input['GooglePrivacyDlpV2PubSubNotificationEvent'] event: The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
        :param pulumi.Input['GooglePrivacyDlpV2DataProfilePubSubConditionArgs'] pubsub_condition: Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
        :param pulumi.Input[str] topic: Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
        """
        if detail_of_message is not None:
            pulumi.set(__self__, "detail_of_message", detail_of_message)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if pubsub_condition is not None:
            pulumi.set(__self__, "pubsub_condition", pubsub_condition)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="detailOfMessage")
    def detail_of_message(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationDetailOfMessage']]:
        """
        How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
        """
        return pulumi.get(self, "detail_of_message")

    @detail_of_message.setter
    def detail_of_message(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationDetailOfMessage']]):
        pulumi.set(self, "detail_of_message", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationEvent']]:
        """
        The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PubSubNotificationEvent']]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="pubsubCondition")
    def pubsub_condition(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DataProfilePubSubConditionArgs']]:
        """
        Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
        """
        return pulumi.get(self, "pubsub_condition")

    @pubsub_condition.setter
    def pubsub_condition(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DataProfilePubSubConditionArgs']]):
        pulumi.set(self, "pubsub_condition", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)


@pulumi.input_type
class GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs:
    def __init__(__self__):
        """
        Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2PublishSummaryToCsccArgs:
    def __init__(__self__):
        """
        Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2PublishToPubSubArgs:
    def __init__(__self__, *,
                 topic: Optional[pulumi.Input[str]] = None):
        """
        Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
        :param pulumi.Input[str] topic: Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
        """
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)


@pulumi.input_type
class GooglePrivacyDlpV2PublishToStackdriverArgs:
    def __init__(__self__):
        """
        Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2QuasiIdFieldArgs:
    def __init__(__self__, *,
                 custom_tag: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
        :param pulumi.Input[str] custom_tag: A auxiliary field.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Identifies the column.
        """
        if custom_tag is not None:
            pulumi.set(__self__, "custom_tag", custom_tag)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter(name="customTag")
    def custom_tag(self) -> Optional[pulumi.Input[str]]:
        """
        A auxiliary field.
        """
        return pulumi.get(self, "custom_tag")

    @custom_tag.setter
    def custom_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_tag", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Identifies the column.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class GooglePrivacyDlpV2QuasiIdentifierFieldArgs:
    def __init__(__self__, *,
                 custom_tag: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
        :param pulumi.Input[str] custom_tag: A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Identifies the column.
        """
        if custom_tag is not None:
            pulumi.set(__self__, "custom_tag", custom_tag)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter(name="customTag")
    def custom_tag(self) -> Optional[pulumi.Input[str]]:
        """
        A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        """
        return pulumi.get(self, "custom_tag")

    @custom_tag.setter
    def custom_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_tag", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Identifies the column.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class GooglePrivacyDlpV2QuasiIdArgs:
    def __init__(__self__, *,
                 field: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'],
                 custom_tag: Optional[pulumi.Input[str]] = None,
                 inferred: Optional[pulumi.Input['GoogleProtobufEmptyArgs']] = None,
                 info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None):
        """
        A column with a semantic tag attached.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Identifies the column.
        :param pulumi.Input[str] custom_tag: A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        :param pulumi.Input['GoogleProtobufEmptyArgs'] inferred: If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] info_type: A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
        """
        pulumi.set(__self__, "field", field)
        if custom_tag is not None:
            pulumi.set(__self__, "custom_tag", custom_tag)
        if inferred is not None:
            pulumi.set(__self__, "inferred", inferred)
        if info_type is not None:
            pulumi.set(__self__, "info_type", info_type)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']:
        """
        Identifies the column.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="customTag")
    def custom_tag(self) -> Optional[pulumi.Input[str]]:
        """
        A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        """
        return pulumi.get(self, "custom_tag")

    @custom_tag.setter
    def custom_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_tag", value)

    @property
    @pulumi.getter
    def inferred(self) -> Optional[pulumi.Input['GoogleProtobufEmptyArgs']]:
        """
        If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
        """
        return pulumi.get(self, "inferred")

    @inferred.setter
    def inferred(self, value: Optional[pulumi.Input['GoogleProtobufEmptyArgs']]):
        pulumi.set(self, "inferred", value)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
        """
        return pulumi.get(self, "info_type")

    @info_type.setter
    def info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "info_type", value)


@pulumi.input_type
class GooglePrivacyDlpV2RecordConditionArgs:
    def __init__(__self__, *,
                 expressions: Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsArgs']] = None):
        """
        A condition for determining whether a transformation should be applied to a field.
        :param pulumi.Input['GooglePrivacyDlpV2ExpressionsArgs'] expressions: An expression.
        """
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsArgs']]:
        """
        An expression.
        """
        return pulumi.get(self, "expressions")

    @expressions.setter
    def expressions(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ExpressionsArgs']]):
        pulumi.set(self, "expressions", value)


@pulumi.input_type
class GooglePrivacyDlpV2RecordSuppressionArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']] = None):
        """
        Configuration to suppress records whose suppression conditions evaluate to true.
        :param pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs'] condition: A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']]:
        """
        A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RecordConditionArgs']]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class GooglePrivacyDlpV2RecordTransformationsArgs:
    def __init__(__self__, *,
                 field_transformations: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldTransformationArgs']]]] = None,
                 record_suppressions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2RecordSuppressionArgs']]]] = None):
        """
        A type of transformation that is applied over structured data such as a table.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldTransformationArgs']]] field_transformations: Transform the record by applying various field transformations.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2RecordSuppressionArgs']]] record_suppressions: Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
        """
        if field_transformations is not None:
            pulumi.set(__self__, "field_transformations", field_transformations)
        if record_suppressions is not None:
            pulumi.set(__self__, "record_suppressions", record_suppressions)

    @property
    @pulumi.getter(name="fieldTransformations")
    def field_transformations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldTransformationArgs']]]]:
        """
        Transform the record by applying various field transformations.
        """
        return pulumi.get(self, "field_transformations")

    @field_transformations.setter
    def field_transformations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldTransformationArgs']]]]):
        pulumi.set(self, "field_transformations", value)

    @property
    @pulumi.getter(name="recordSuppressions")
    def record_suppressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2RecordSuppressionArgs']]]]:
        """
        Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
        """
        return pulumi.get(self, "record_suppressions")

    @record_suppressions.setter
    def record_suppressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2RecordSuppressionArgs']]]]):
        pulumi.set(self, "record_suppressions", value)


@pulumi.input_type
class GooglePrivacyDlpV2RedactConfigArgs:
    def __init__(__self__):
        """
        Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2RegexArgs:
    def __init__(__self__, *,
                 group_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        Message defining a custom regular expression.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] group_indexes: The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        :param pulumi.Input[str] pattern: Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        """
        if group_indexes is not None:
            pulumi.set(__self__, "group_indexes", group_indexes)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="groupIndexes")
    def group_indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
        """
        return pulumi.get(self, "group_indexes")

    @group_indexes.setter
    def group_indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "group_indexes", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class GooglePrivacyDlpV2ReplaceDictionaryConfigArgs:
    def __init__(__self__, *,
                 word_list: Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']] = None):
        """
        Replace each input value with a value randomly selected from the dictionary.
        :param pulumi.Input['GooglePrivacyDlpV2WordListArgs'] word_list: A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
        """
        if word_list is not None:
            pulumi.set(__self__, "word_list", word_list)

    @property
    @pulumi.getter(name="wordList")
    def word_list(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']]:
        """
        A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
        """
        return pulumi.get(self, "word_list")

    @word_list.setter
    def word_list(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2WordListArgs']]):
        pulumi.set(self, "word_list", value)


@pulumi.input_type
class GooglePrivacyDlpV2ReplaceValueConfigArgs:
    def __init__(__self__, *,
                 new_value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']] = None):
        """
        Replace each input value with a given `Value`.
        :param pulumi.Input['GooglePrivacyDlpV2ValueArgs'] new_value: Value to replace it with.
        """
        if new_value is not None:
            pulumi.set(__self__, "new_value", new_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]:
        """
        Value to replace it with.
        """
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueArgs']]):
        pulumi.set(self, "new_value", value)


@pulumi.input_type
class GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs:
    def __init__(__self__):
        """
        Replace each matching finding with the name of the info_type.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2RiskAnalysisJobConfigArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]] = None,
                 privacy_metric: Optional[pulumi.Input['GooglePrivacyDlpV2PrivacyMetricArgs']] = None,
                 source_table: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]] actions: Actions to execute at the completion of the job. Are executed in the order provided.
        :param pulumi.Input['GooglePrivacyDlpV2PrivacyMetricArgs'] privacy_metric: Privacy metric to compute.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] source_table: Input dataset to compute metrics over.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if privacy_metric is not None:
            pulumi.set(__self__, "privacy_metric", privacy_metric)
        if source_table is not None:
            pulumi.set(__self__, "source_table", source_table)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]]:
        """
        Actions to execute at the completion of the job. Are executed in the order provided.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2ActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="privacyMetric")
    def privacy_metric(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2PrivacyMetricArgs']]:
        """
        Privacy metric to compute.
        """
        return pulumi.get(self, "privacy_metric")

    @privacy_metric.setter
    def privacy_metric(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2PrivacyMetricArgs']]):
        pulumi.set(self, "privacy_metric", value)

    @property
    @pulumi.getter(name="sourceTable")
    def source_table(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        Input dataset to compute metrics over.
        """
        return pulumi.get(self, "source_table")

    @source_table.setter
    def source_table(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "source_table", value)


@pulumi.input_type
class GooglePrivacyDlpV2SaveFindingsArgs:
    def __init__(__self__, *,
                 output_config: Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigArgs']] = None):
        """
        If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
        :param pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigArgs'] output_config: Location to store findings outside of DLP.
        """
        if output_config is not None:
            pulumi.set(__self__, "output_config", output_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigArgs']]:
        """
        Location to store findings outside of DLP.
        """
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2OutputStorageConfigArgs']]):
        pulumi.set(self, "output_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2ScheduleArgs:
    def __init__(__self__, *,
                 recurrence_period_duration: Optional[pulumi.Input[str]] = None):
        """
        Schedule for inspect job triggers.
        :param pulumi.Input[str] recurrence_period_duration: With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
        """
        if recurrence_period_duration is not None:
            pulumi.set(__self__, "recurrence_period_duration", recurrence_period_duration)

    @property
    @pulumi.getter(name="recurrencePeriodDuration")
    def recurrence_period_duration(self) -> Optional[pulumi.Input[str]]:
        """
        With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
        """
        return pulumi.get(self, "recurrence_period_duration")

    @recurrence_period_duration.setter
    def recurrence_period_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrence_period_duration", value)


@pulumi.input_type
class GooglePrivacyDlpV2SelectedInfoTypesArgs:
    def __init__(__self__, *,
                 info_types: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]):
        """
        Apply transformation to the selected info_types.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]] info_types: InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
        """
        pulumi.set(__self__, "info_types", info_types)

    @property
    @pulumi.getter(name="infoTypes")
    def info_types(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]:
        """
        InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
        """
        return pulumi.get(self, "info_types")

    @info_types.setter
    def info_types(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]]):
        pulumi.set(self, "info_types", value)


@pulumi.input_type
class GooglePrivacyDlpV2SensitivityScoreArgs:
    def __init__(__self__, *,
                 score: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreScore']] = None):
        """
        Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
        :param pulumi.Input['GooglePrivacyDlpV2SensitivityScoreScore'] score: The sensitivity score applied to the resource.
        """
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreScore']]:
        """
        The sensitivity score applied to the resource.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2SensitivityScoreScore']]):
        pulumi.set(self, "score", value)


@pulumi.input_type
class GooglePrivacyDlpV2StatisticalTableArgs:
    def __init__(__self__, *,
                 quasi_ids: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdentifierFieldArgs']]],
                 relative_frequency: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'],
                 table: pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']):
        """
        An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdentifierFieldArgs']]] quasi_ids: Quasi-identifier columns.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] relative_frequency: The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table: Auxiliary table location.
        """
        pulumi.set(__self__, "quasi_ids", quasi_ids)
        pulumi.set(__self__, "relative_frequency", relative_frequency)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="quasiIds")
    def quasi_ids(self) -> pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdentifierFieldArgs']]]:
        """
        Quasi-identifier columns.
        """
        return pulumi.get(self, "quasi_ids")

    @quasi_ids.setter
    def quasi_ids(self, value: pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2QuasiIdentifierFieldArgs']]]):
        pulumi.set(self, "quasi_ids", value)

    @property
    @pulumi.getter(name="relativeFrequency")
    def relative_frequency(self) -> pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']:
        """
        The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
        """
        return pulumi.get(self, "relative_frequency")

    @relative_frequency.setter
    def relative_frequency(self, value: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']):
        pulumi.set(self, "relative_frequency", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']:
        """
        Auxiliary table location.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']):
        pulumi.set(self, "table", value)


@pulumi.input_type
class GooglePrivacyDlpV2StorageConfigArgs:
    def __init__(__self__, *,
                 big_query_options: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsArgs']] = None,
                 cloud_storage_options: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsArgs']] = None,
                 datastore_options: Optional[pulumi.Input['GooglePrivacyDlpV2DatastoreOptionsArgs']] = None,
                 hybrid_options: Optional[pulumi.Input['GooglePrivacyDlpV2HybridOptionsArgs']] = None,
                 timespan_config: Optional[pulumi.Input['GooglePrivacyDlpV2TimespanConfigArgs']] = None):
        """
        Shared message indicating Cloud storage type.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsArgs'] big_query_options: BigQuery options.
        :param pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsArgs'] cloud_storage_options: Cloud Storage options.
        :param pulumi.Input['GooglePrivacyDlpV2DatastoreOptionsArgs'] datastore_options: Google Cloud Datastore options.
        :param pulumi.Input['GooglePrivacyDlpV2HybridOptionsArgs'] hybrid_options: Hybrid inspection options.
        """
        if big_query_options is not None:
            pulumi.set(__self__, "big_query_options", big_query_options)
        if cloud_storage_options is not None:
            pulumi.set(__self__, "cloud_storage_options", cloud_storage_options)
        if datastore_options is not None:
            pulumi.set(__self__, "datastore_options", datastore_options)
        if hybrid_options is not None:
            pulumi.set(__self__, "hybrid_options", hybrid_options)
        if timespan_config is not None:
            pulumi.set(__self__, "timespan_config", timespan_config)

    @property
    @pulumi.getter(name="bigQueryOptions")
    def big_query_options(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsArgs']]:
        """
        BigQuery options.
        """
        return pulumi.get(self, "big_query_options")

    @big_query_options.setter
    def big_query_options(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryOptionsArgs']]):
        pulumi.set(self, "big_query_options", value)

    @property
    @pulumi.getter(name="cloudStorageOptions")
    def cloud_storage_options(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsArgs']]:
        """
        Cloud Storage options.
        """
        return pulumi.get(self, "cloud_storage_options")

    @cloud_storage_options.setter
    def cloud_storage_options(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2CloudStorageOptionsArgs']]):
        pulumi.set(self, "cloud_storage_options", value)

    @property
    @pulumi.getter(name="datastoreOptions")
    def datastore_options(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DatastoreOptionsArgs']]:
        """
        Google Cloud Datastore options.
        """
        return pulumi.get(self, "datastore_options")

    @datastore_options.setter
    def datastore_options(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DatastoreOptionsArgs']]):
        pulumi.set(self, "datastore_options", value)

    @property
    @pulumi.getter(name="hybridOptions")
    def hybrid_options(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2HybridOptionsArgs']]:
        """
        Hybrid inspection options.
        """
        return pulumi.get(self, "hybrid_options")

    @hybrid_options.setter
    def hybrid_options(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2HybridOptionsArgs']]):
        pulumi.set(self, "hybrid_options", value)

    @property
    @pulumi.getter(name="timespanConfig")
    def timespan_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TimespanConfigArgs']]:
        return pulumi.get(self, "timespan_config")

    @timespan_config.setter
    def timespan_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TimespanConfigArgs']]):
        pulumi.set(self, "timespan_config", value)


@pulumi.input_type
class GooglePrivacyDlpV2StoredInfoTypeConfigArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dictionary: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 large_custom_dictionary: Optional[pulumi.Input['GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs']] = None,
                 regex: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']] = None):
        """
        Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
        :param pulumi.Input[str] description: Description of the StoredInfoType (max 256 characters).
        :param pulumi.Input['GooglePrivacyDlpV2DictionaryArgs'] dictionary: Store dictionary-based CustomInfoType.
        :param pulumi.Input[str] display_name: Display name of the StoredInfoType (max 256 characters).
        :param pulumi.Input['GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs'] large_custom_dictionary: StoredInfoType where findings are defined by a dictionary of phrases.
        :param pulumi.Input['GooglePrivacyDlpV2RegexArgs'] regex: Store regular expression-based StoredInfoType.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if large_custom_dictionary is not None:
            pulumi.set(__self__, "large_custom_dictionary", large_custom_dictionary)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the StoredInfoType (max 256 characters).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]:
        """
        Store dictionary-based CustomInfoType.
        """
        return pulumi.get(self, "dictionary")

    @dictionary.setter
    def dictionary(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2DictionaryArgs']]):
        pulumi.set(self, "dictionary", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the StoredInfoType (max 256 characters).
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="largeCustomDictionary")
    def large_custom_dictionary(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs']]:
        """
        StoredInfoType where findings are defined by a dictionary of phrases.
        """
        return pulumi.get(self, "large_custom_dictionary")

    @large_custom_dictionary.setter
    def large_custom_dictionary(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs']]):
        pulumi.set(self, "large_custom_dictionary", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]:
        """
        Store regular expression-based StoredInfoType.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2RegexArgs']]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GooglePrivacyDlpV2StoredTypeArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        A reference to a StoredInfoType to use with scanning.
        :param pulumi.Input[str] create_time: Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
        :param pulumi.Input[str] name: Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GooglePrivacyDlpV2SurrogateTypeArgs:
    def __init__(__self__):
        """
        Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2TableOptionsArgs:
    def __init__(__self__, *,
                 identifying_fields: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]] = None):
        """
        Instructions regarding the table content being inspected.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]] identifying_fields: The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
        """
        if identifying_fields is not None:
            pulumi.set(__self__, "identifying_fields", identifying_fields)

    @property
    @pulumi.getter(name="identifyingFields")
    def identifying_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]:
        """
        The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
        """
        return pulumi.get(self, "identifying_fields")

    @identifying_fields.setter
    def identifying_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]]]):
        pulumi.set(self, "identifying_fields", value)


@pulumi.input_type
class GooglePrivacyDlpV2TaggedFieldArgs:
    def __init__(__self__, *,
                 field: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'],
                 custom_tag: Optional[pulumi.Input[str]] = None,
                 inferred: Optional[pulumi.Input['GoogleProtobufEmptyArgs']] = None,
                 info_type: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']] = None):
        """
        A column with a semantic tag attached.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] field: Identifies the column.
        :param pulumi.Input[str] custom_tag: A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        :param pulumi.Input['GoogleProtobufEmptyArgs'] inferred: If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
        :param pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs'] info_type: A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
        """
        pulumi.set(__self__, "field", field)
        if custom_tag is not None:
            pulumi.set(__self__, "custom_tag", custom_tag)
        if inferred is not None:
            pulumi.set(__self__, "inferred", inferred)
        if info_type is not None:
            pulumi.set(__self__, "info_type", info_type)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']:
        """
        Identifies the column.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="customTag")
    def custom_tag(self) -> Optional[pulumi.Input[str]]:
        """
        A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
        """
        return pulumi.get(self, "custom_tag")

    @custom_tag.setter
    def custom_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_tag", value)

    @property
    @pulumi.getter
    def inferred(self) -> Optional[pulumi.Input['GoogleProtobufEmptyArgs']]:
        """
        If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
        """
        return pulumi.get(self, "inferred")

    @inferred.setter
    def inferred(self, value: Optional[pulumi.Input['GoogleProtobufEmptyArgs']]):
        pulumi.set(self, "inferred", value)

    @property
    @pulumi.getter(name="infoType")
    def info_type(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]:
        """
        A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
        """
        return pulumi.get(self, "info_type")

    @info_type.setter
    def info_type(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2InfoTypeArgs']]):
        pulumi.set(self, "info_type", value)


@pulumi.input_type
class GooglePrivacyDlpV2ThrowErrorArgs:
    def __init__(__self__):
        """
        Throw an error and fail the request when a transformation error occurs.
        """
        pass


@pulumi.input_type
class GooglePrivacyDlpV2TimePartConfigArgs:
    def __init__(__self__, *,
                 part_to_extract: Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigPartToExtract']] = None):
        """
        For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
        :param pulumi.Input['GooglePrivacyDlpV2TimePartConfigPartToExtract'] part_to_extract: The part of the time to keep.
        """
        if part_to_extract is not None:
            pulumi.set(__self__, "part_to_extract", part_to_extract)

    @property
    @pulumi.getter(name="partToExtract")
    def part_to_extract(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigPartToExtract']]:
        """
        The part of the time to keep.
        """
        return pulumi.get(self, "part_to_extract")

    @part_to_extract.setter
    def part_to_extract(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2TimePartConfigPartToExtract']]):
        pulumi.set(self, "part_to_extract", value)


@pulumi.input_type
class GooglePrivacyDlpV2TimespanConfigArgs:
    def __init__(__self__, *,
                 enable_auto_population_of_timespan_config: Optional[pulumi.Input[bool]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 timestamp_field: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']] = None):
        """
        Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
        :param pulumi.Input[bool] enable_auto_population_of_timespan_config: When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
        :param pulumi.Input[str] end_time: Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
        :param pulumi.Input[str] start_time: Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
        :param pulumi.Input['GooglePrivacyDlpV2FieldIdArgs'] timestamp_field: Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
        """
        if enable_auto_population_of_timespan_config is not None:
            pulumi.set(__self__, "enable_auto_population_of_timespan_config", enable_auto_population_of_timespan_config)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timestamp_field is not None:
            pulumi.set(__self__, "timestamp_field", timestamp_field)

    @property
    @pulumi.getter(name="enableAutoPopulationOfTimespanConfig")
    def enable_auto_population_of_timespan_config(self) -> Optional[pulumi.Input[bool]]:
        """
        When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
        """
        return pulumi.get(self, "enable_auto_population_of_timespan_config")

    @enable_auto_population_of_timespan_config.setter
    def enable_auto_population_of_timespan_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_population_of_timespan_config", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timestampField")
    def timestamp_field(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]:
        """
        Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
        """
        return pulumi.get(self, "timestamp_field")

    @timestamp_field.setter
    def timestamp_field(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2FieldIdArgs']]):
        pulumi.set(self, "timestamp_field", value)


@pulumi.input_type
class GooglePrivacyDlpV2TransformationConfigArgs:
    def __init__(__self__, *,
                 deidentify_template: Optional[pulumi.Input[str]] = None,
                 image_redact_template: Optional[pulumi.Input[str]] = None,
                 structured_deidentify_template: Optional[pulumi.Input[str]] = None):
        """
        User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
        :param pulumi.Input[str] deidentify_template: De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
        :param pulumi.Input[str] image_redact_template: Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
        :param pulumi.Input[str] structured_deidentify_template: Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
        """
        if deidentify_template is not None:
            pulumi.set(__self__, "deidentify_template", deidentify_template)
        if image_redact_template is not None:
            pulumi.set(__self__, "image_redact_template", image_redact_template)
        if structured_deidentify_template is not None:
            pulumi.set(__self__, "structured_deidentify_template", structured_deidentify_template)

    @property
    @pulumi.getter(name="deidentifyTemplate")
    def deidentify_template(self) -> Optional[pulumi.Input[str]]:
        """
        De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
        """
        return pulumi.get(self, "deidentify_template")

    @deidentify_template.setter
    def deidentify_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deidentify_template", value)

    @property
    @pulumi.getter(name="imageRedactTemplate")
    def image_redact_template(self) -> Optional[pulumi.Input[str]]:
        """
        Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
        """
        return pulumi.get(self, "image_redact_template")

    @image_redact_template.setter
    def image_redact_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_redact_template", value)

    @property
    @pulumi.getter(name="structuredDeidentifyTemplate")
    def structured_deidentify_template(self) -> Optional[pulumi.Input[str]]:
        """
        Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
        """
        return pulumi.get(self, "structured_deidentify_template")

    @structured_deidentify_template.setter
    def structured_deidentify_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "structured_deidentify_template", value)


@pulumi.input_type
class GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs:
    def __init__(__self__, *,
                 table: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']] = None):
        """
        Config for storing transformation details.
        :param pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs'] table: The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
        """
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]:
        """
        The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2BigQueryTableArgs']]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class GooglePrivacyDlpV2TransformationErrorHandlingArgs:
    def __init__(__self__, *,
                 leave_untransformed: Optional[pulumi.Input['GooglePrivacyDlpV2LeaveUntransformedArgs']] = None,
                 throw_error: Optional[pulumi.Input['GooglePrivacyDlpV2ThrowErrorArgs']] = None):
        """
        How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
        :param pulumi.Input['GooglePrivacyDlpV2LeaveUntransformedArgs'] leave_untransformed: Ignore errors
        :param pulumi.Input['GooglePrivacyDlpV2ThrowErrorArgs'] throw_error: Throw an error
        """
        if leave_untransformed is not None:
            pulumi.set(__self__, "leave_untransformed", leave_untransformed)
        if throw_error is not None:
            pulumi.set(__self__, "throw_error", throw_error)

    @property
    @pulumi.getter(name="leaveUntransformed")
    def leave_untransformed(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2LeaveUntransformedArgs']]:
        """
        Ignore errors
        """
        return pulumi.get(self, "leave_untransformed")

    @leave_untransformed.setter
    def leave_untransformed(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2LeaveUntransformedArgs']]):
        pulumi.set(self, "leave_untransformed", value)

    @property
    @pulumi.getter(name="throwError")
    def throw_error(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ThrowErrorArgs']]:
        """
        Throw an error
        """
        return pulumi.get(self, "throw_error")

    @throw_error.setter
    def throw_error(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ThrowErrorArgs']]):
        pulumi.set(self, "throw_error", value)


@pulumi.input_type
class GooglePrivacyDlpV2TransientCryptoKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Use this to have a random data crypto key generated. It will be discarded after the request finishes.
        :param pulumi.Input[str] name: Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GooglePrivacyDlpV2TriggerArgs:
    def __init__(__self__, *,
                 manual: Optional[pulumi.Input['GooglePrivacyDlpV2ManualArgs']] = None,
                 schedule: Optional[pulumi.Input['GooglePrivacyDlpV2ScheduleArgs']] = None):
        """
        What event needs to occur for a new job to be started.
        :param pulumi.Input['GooglePrivacyDlpV2ManualArgs'] manual: For use with hybrid jobs. Jobs must be manually created and finished.
        :param pulumi.Input['GooglePrivacyDlpV2ScheduleArgs'] schedule: Create a job on a repeating basis based on the elapse of time.
        """
        if manual is not None:
            pulumi.set(__self__, "manual", manual)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ManualArgs']]:
        """
        For use with hybrid jobs. Jobs must be manually created and finished.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ManualArgs']]):
        pulumi.set(self, "manual", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ScheduleArgs']]:
        """
        Create a job on a repeating basis based on the elapse of time.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ScheduleArgs']]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class GooglePrivacyDlpV2UnwrappedCryptoKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
        :param pulumi.Input[str] key: A 128/192/256 bit key.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A 128/192/256 bit key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GooglePrivacyDlpV2ValueArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 date_value: Optional[pulumi.Input['GoogleTypeDateArgs']] = None,
                 day_of_week_value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueDayOfWeekValue']] = None,
                 float_value: Optional[pulumi.Input[float]] = None,
                 integer_value: Optional[pulumi.Input[str]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 time_value: Optional[pulumi.Input['GoogleTypeTimeOfDayArgs']] = None,
                 timestamp_value: Optional[pulumi.Input[str]] = None):
        """
        Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
        :param pulumi.Input[bool] boolean_value: boolean
        :param pulumi.Input['GoogleTypeDateArgs'] date_value: date
        :param pulumi.Input['GooglePrivacyDlpV2ValueDayOfWeekValue'] day_of_week_value: day of week
        :param pulumi.Input[float] float_value: float
        :param pulumi.Input[str] integer_value: integer
        :param pulumi.Input[str] string_value: string
        :param pulumi.Input['GoogleTypeTimeOfDayArgs'] time_value: time of day
        :param pulumi.Input[str] timestamp_value: timestamp
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if date_value is not None:
            pulumi.set(__self__, "date_value", date_value)
        if day_of_week_value is not None:
            pulumi.set(__self__, "day_of_week_value", day_of_week_value)
        if float_value is not None:
            pulumi.set(__self__, "float_value", float_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)
        if time_value is not None:
            pulumi.set(__self__, "time_value", time_value)
        if timestamp_value is not None:
            pulumi.set(__self__, "timestamp_value", timestamp_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        boolean
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="dateValue")
    def date_value(self) -> Optional[pulumi.Input['GoogleTypeDateArgs']]:
        """
        date
        """
        return pulumi.get(self, "date_value")

    @date_value.setter
    def date_value(self, value: Optional[pulumi.Input['GoogleTypeDateArgs']]):
        pulumi.set(self, "date_value", value)

    @property
    @pulumi.getter(name="dayOfWeekValue")
    def day_of_week_value(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2ValueDayOfWeekValue']]:
        """
        day of week
        """
        return pulumi.get(self, "day_of_week_value")

    @day_of_week_value.setter
    def day_of_week_value(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2ValueDayOfWeekValue']]):
        pulumi.set(self, "day_of_week_value", value)

    @property
    @pulumi.getter(name="floatValue")
    def float_value(self) -> Optional[pulumi.Input[float]]:
        """
        float
        """
        return pulumi.get(self, "float_value")

    @float_value.setter
    def float_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "float_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[str]]:
        """
        integer
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        string
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)

    @property
    @pulumi.getter(name="timeValue")
    def time_value(self) -> Optional[pulumi.Input['GoogleTypeTimeOfDayArgs']]:
        """
        time of day
        """
        return pulumi.get(self, "time_value")

    @time_value.setter
    def time_value(self, value: Optional[pulumi.Input['GoogleTypeTimeOfDayArgs']]):
        pulumi.set(self, "time_value", value)

    @property
    @pulumi.getter(name="timestampValue")
    def timestamp_value(self) -> Optional[pulumi.Input[str]]:
        """
        timestamp
        """
        return pulumi.get(self, "timestamp_value")

    @timestamp_value.setter
    def timestamp_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_value", value)


@pulumi.input_type
class GooglePrivacyDlpV2WordListArgs:
    def __init__(__self__, *,
                 words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Message defining a list of words or phrases to search for in the data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] words: Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
        """
        if words is not None:
            pulumi.set(__self__, "words", words)

    @property
    @pulumi.getter
    def words(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
        """
        return pulumi.get(self, "words")

    @words.setter
    def words(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "words", value)


@pulumi.input_type
class GoogleProtobufEmptyArgs:
    def __init__(__self__):
        """
        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
        """
        pass


@pulumi.input_type
class GoogleTypeDateArgs:
    def __init__(__self__, *,
                 day: Optional[pulumi.Input[int]] = None,
                 month: Optional[pulumi.Input[int]] = None,
                 year: Optional[pulumi.Input[int]] = None):
        """
        Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
        :param pulumi.Input[int] day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :param pulumi.Input[int] month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :param pulumi.Input[int] year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if year is not None:
            pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[int]]:
        """
        Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[int]]:
        """
        Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter
    def year(self) -> Optional[pulumi.Input[int]]:
        """
        Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "year", value)


@pulumi.input_type
class GoogleTypeTimeOfDayArgs:
    def __init__(__self__, *,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        """
        Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
        :param pulumi.Input[int] hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        :param pulumi.Input[int] minutes: Minutes of hour of day. Must be from 0 to 59.
        :param pulumi.Input[int] nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param pulumi.Input[int] seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


