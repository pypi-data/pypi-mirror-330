# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DiscoveryConfigArgs', 'DiscoveryConfig']

@pulumi.input_type
class DiscoveryConfigArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['DiscoveryConfigStatus'],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DataProfileActionArgs']]]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inspect_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_config: Optional[pulumi.Input['GooglePrivacyDlpV2OrgConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTargetArgs']]]] = None):
        """
        The set of arguments for constructing a DiscoveryConfig resource.
        :param pulumi.Input['DiscoveryConfigStatus'] status: A status for this configuration.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DataProfileActionArgs']]] actions: Actions to execute at the completion of scanning.
        :param pulumi.Input[str] config_id: The config ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
        :param pulumi.Input[str] display_name: Display name (max 100 chars)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inspect_templates: Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including "global"). Each region is scanned using the applicable template. If no region-specific template is specified, but a "global" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/dlp/docs/data-profiles#data-residency.
        :param pulumi.Input[str] name: Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
        :param pulumi.Input['GooglePrivacyDlpV2OrgConfigArgs'] org_config: Only set when the parent is an org.
        :param pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTargetArgs']]] targets: Target to match against for determining what to scan and how frequently.
        """
        pulumi.set(__self__, "status", status)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if inspect_templates is not None:
            pulumi.set(__self__, "inspect_templates", inspect_templates)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_config is not None:
            pulumi.set(__self__, "org_config", org_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['DiscoveryConfigStatus']:
        """
        A status for this configuration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['DiscoveryConfigStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DataProfileActionArgs']]]]:
        """
        Actions to execute at the completion of scanning.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DataProfileActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[str]]:
        """
        The config ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name (max 100 chars)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="inspectTemplates")
    def inspect_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including "global"). Each region is scanned using the applicable template. If no region-specific template is specified, but a "global" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/dlp/docs/data-profiles#data-residency.
        """
        return pulumi.get(self, "inspect_templates")

    @inspect_templates.setter
    def inspect_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inspect_templates", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgConfig")
    def org_config(self) -> Optional[pulumi.Input['GooglePrivacyDlpV2OrgConfigArgs']]:
        """
        Only set when the parent is an org.
        """
        return pulumi.get(self, "org_config")

    @org_config.setter
    def org_config(self, value: Optional[pulumi.Input['GooglePrivacyDlpV2OrgConfigArgs']]):
        pulumi.set(self, "org_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTargetArgs']]]]:
        """
        Target to match against for determining what to scan and how frequently.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GooglePrivacyDlpV2DiscoveryTargetArgs']]]]):
        pulumi.set(self, "targets", value)


class DiscoveryConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DataProfileActionArgs']]]]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inspect_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_config: Optional[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2OrgConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['DiscoveryConfigStatus']] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DiscoveryTargetArgs']]]]] = None,
                 __props__=None):
        """
        Creates a config for discovery to scan and profile storage.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DataProfileActionArgs']]]] actions: Actions to execute at the completion of scanning.
        :param pulumi.Input[str] config_id: The config ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
        :param pulumi.Input[str] display_name: Display name (max 100 chars)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inspect_templates: Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including "global"). Each region is scanned using the applicable template. If no region-specific template is specified, but a "global" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/dlp/docs/data-profiles#data-residency.
        :param pulumi.Input[str] name: Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
        :param pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2OrgConfigArgs']] org_config: Only set when the parent is an org.
        :param pulumi.Input['DiscoveryConfigStatus'] status: A status for this configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DiscoveryTargetArgs']]]] targets: Target to match against for determining what to scan and how frequently.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiscoveryConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a config for discovery to scan and profile storage.

        :param str resource_name: The name of the resource.
        :param DiscoveryConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiscoveryConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DataProfileActionArgs']]]]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 inspect_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_config: Optional[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2OrgConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['DiscoveryConfigStatus']] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GooglePrivacyDlpV2DiscoveryTargetArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiscoveryConfigArgs.__new__(DiscoveryConfigArgs)

            __props__.__dict__["actions"] = actions
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["inspect_templates"] = inspect_templates
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["org_config"] = org_config
            __props__.__dict__["project"] = project
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["targets"] = targets
            __props__.__dict__["create_time"] = None
            __props__.__dict__["errors"] = None
            __props__.__dict__["last_run_time"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DiscoveryConfig, __self__).__init__(
            'google-native:dlp/v2:DiscoveryConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DiscoveryConfig':
        """
        Get an existing DiscoveryConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DiscoveryConfigArgs.__new__(DiscoveryConfigArgs)

        __props__.__dict__["actions"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["errors"] = None
        __props__.__dict__["inspect_templates"] = None
        __props__.__dict__["last_run_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["org_config"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["targets"] = None
        __props__.__dict__["update_time"] = None
        return DiscoveryConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Sequence['outputs.GooglePrivacyDlpV2DataProfileActionResponse']]:
        """
        Actions to execute at the completion of scanning.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The creation timestamp of a DiscoveryConfig.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Display name (max 100 chars)
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Output[Sequence['outputs.GooglePrivacyDlpV2ErrorResponse']]:
        """
        A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="inspectTemplates")
    def inspect_templates(self) -> pulumi.Output[Sequence[str]]:
        """
        Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including "global"). Each region is scanned using the applicable template. If no region-specific template is specified, but a "global" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/dlp/docs/data-profiles#data-residency.
        """
        return pulumi.get(self, "inspect_templates")

    @property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> pulumi.Output[str]:
        """
        The timestamp of the last time this config was executed.
        """
        return pulumi.get(self, "last_run_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgConfig")
    def org_config(self) -> pulumi.Output['outputs.GooglePrivacyDlpV2OrgConfigResponse']:
        """
        Only set when the parent is an org.
        """
        return pulumi.get(self, "org_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        A status for this configuration.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.GooglePrivacyDlpV2DiscoveryTargetResponse']]:
        """
        Target to match against for determining what to scan and how frequently.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The last update timestamp of a DiscoveryConfig.
        """
        return pulumi.get(self, "update_time")

