# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetProvisioningConfigResult',
    'AwaitableGetProvisioningConfigResult',
    'get_provisioning_config',
    'get_provisioning_config_output',
]

@pulumi.output_type
class GetProvisioningConfigResult:
    def __init__(__self__, cloud_console_uri=None, custom_id=None, email=None, handover_service_account=None, instances=None, location=None, name=None, networks=None, pod=None, state=None, status_message=None, ticket_id=None, update_time=None, volumes=None, vpc_sc_enabled=None):
        if cloud_console_uri and not isinstance(cloud_console_uri, str):
            raise TypeError("Expected argument 'cloud_console_uri' to be a str")
        pulumi.set(__self__, "cloud_console_uri", cloud_console_uri)
        if custom_id and not isinstance(custom_id, str):
            raise TypeError("Expected argument 'custom_id' to be a str")
        pulumi.set(__self__, "custom_id", custom_id)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if handover_service_account and not isinstance(handover_service_account, str):
            raise TypeError("Expected argument 'handover_service_account' to be a str")
        pulumi.set(__self__, "handover_service_account", handover_service_account)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if pod and not isinstance(pod, str):
            raise TypeError("Expected argument 'pod' to be a str")
        pulumi.set(__self__, "pod", pod)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if ticket_id and not isinstance(ticket_id, str):
            raise TypeError("Expected argument 'ticket_id' to be a str")
        pulumi.set(__self__, "ticket_id", ticket_id)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)
        if vpc_sc_enabled and not isinstance(vpc_sc_enabled, bool):
            raise TypeError("Expected argument 'vpc_sc_enabled' to be a bool")
        pulumi.set(__self__, "vpc_sc_enabled", vpc_sc_enabled)

    @property
    @pulumi.getter(name="cloudConsoleUri")
    def cloud_console_uri(self) -> str:
        """
        URI to Cloud Console UI view of this provisioning config.
        """
        return pulumi.get(self, "cloud_console_uri")

    @property
    @pulumi.getter(name="customId")
    def custom_id(self) -> str:
        """
        Optional. The user-defined identifier of the provisioning config.
        """
        return pulumi.get(self, "custom_id")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.""")
    def email(self) -> str:
        """
        Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="handoverServiceAccount")
    def handover_service_account(self) -> str:
        """
        A service account to enable customers to access instance credentials upon handover.
        """
        return pulumi.get(self, "handover_service_account")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.InstanceConfigResponse']:
        """
        Instances to be created.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The system-generated name of the provisioning config. This follows the UUID format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.NetworkConfigResponse']:
        """
        Networks to be created.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def pod(self) -> str:
        """
        Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.
        """
        return pulumi.get(self, "pod")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of ProvisioningConfig.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Optional status messages associated with the FAILED state.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> str:
        """
        A generated ticket id to track provisioning request.
        """
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update timestamp.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.VolumeConfigResponse']:
        """
        Volumes to be created.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="vpcScEnabled")
    def vpc_sc_enabled(self) -> bool:
        """
        If true, VPC SC is enabled for the cluster.
        """
        return pulumi.get(self, "vpc_sc_enabled")


class AwaitableGetProvisioningConfigResult(GetProvisioningConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProvisioningConfigResult(
            cloud_console_uri=self.cloud_console_uri,
            custom_id=self.custom_id,
            email=self.email,
            handover_service_account=self.handover_service_account,
            instances=self.instances,
            location=self.location,
            name=self.name,
            networks=self.networks,
            pod=self.pod,
            state=self.state,
            status_message=self.status_message,
            ticket_id=self.ticket_id,
            update_time=self.update_time,
            volumes=self.volumes,
            vpc_sc_enabled=self.vpc_sc_enabled)


def get_provisioning_config(location: Optional[str] = None,
                            project: Optional[str] = None,
                            provisioning_config_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProvisioningConfigResult:
    """
    Get ProvisioningConfig by name.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['provisioningConfigId'] = provisioning_config_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:baremetalsolution/v2:getProvisioningConfig', __args__, opts=opts, typ=GetProvisioningConfigResult).value

    return AwaitableGetProvisioningConfigResult(
        cloud_console_uri=pulumi.get(__ret__, 'cloud_console_uri'),
        custom_id=pulumi.get(__ret__, 'custom_id'),
        email=pulumi.get(__ret__, 'email'),
        handover_service_account=pulumi.get(__ret__, 'handover_service_account'),
        instances=pulumi.get(__ret__, 'instances'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        networks=pulumi.get(__ret__, 'networks'),
        pod=pulumi.get(__ret__, 'pod'),
        state=pulumi.get(__ret__, 'state'),
        status_message=pulumi.get(__ret__, 'status_message'),
        ticket_id=pulumi.get(__ret__, 'ticket_id'),
        update_time=pulumi.get(__ret__, 'update_time'),
        volumes=pulumi.get(__ret__, 'volumes'),
        vpc_sc_enabled=pulumi.get(__ret__, 'vpc_sc_enabled'))


@_utilities.lift_output_func(get_provisioning_config)
def get_provisioning_config_output(location: Optional[pulumi.Input[str]] = None,
                                   project: Optional[pulumi.Input[Optional[str]]] = None,
                                   provisioning_config_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProvisioningConfigResult]:
    """
    Get ProvisioningConfig by name.
    """
    ...
