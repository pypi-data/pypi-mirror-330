# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GuestOsScanResponse',
    'VSphereScanResponse',
]

@pulumi.output_type
class GuestOsScanResponse(dict):
    """
    Message describing a MC Source of type Guest OS Scan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreSource":
            suggest = "core_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuestOsScanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuestOsScanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuestOsScanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_source: str):
        """
        Message describing a MC Source of type Guest OS Scan.
        :param str core_source: reference to the corresponding Guest OS Scan in MC Source.
        """
        pulumi.set(__self__, "core_source", core_source)

    @property
    @pulumi.getter(name="coreSource")
    def core_source(self) -> str:
        """
        reference to the corresponding Guest OS Scan in MC Source.
        """
        return pulumi.get(self, "core_source")


@pulumi.output_type
class VSphereScanResponse(dict):
    """
    Message describing a MC Source of type VSphere Scan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreSource":
            suggest = "core_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VSphereScanResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VSphereScanResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VSphereScanResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_source: str):
        """
        Message describing a MC Source of type VSphere Scan.
        :param str core_source: reference to the corresponding VSphere Scan in MC Source.
        """
        pulumi.set(__self__, "core_source", core_source)

    @property
    @pulumi.getter(name="coreSource")
    def core_source(self) -> str:
        """
        reference to the corresponding VSphere Scan in MC Source.
        """
        return pulumi.get(self, "core_source")


