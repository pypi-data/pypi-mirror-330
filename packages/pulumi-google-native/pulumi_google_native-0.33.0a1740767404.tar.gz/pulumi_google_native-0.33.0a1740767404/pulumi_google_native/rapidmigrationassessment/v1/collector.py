# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = ['CollectorArgs', 'Collector']

@pulumi.input_type
class CollectorArgs:
    def __init__(__self__, *,
                 collector_id: pulumi.Input[str],
                 collection_days: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eula_uri: Optional[pulumi.Input[str]] = None,
                 expected_asset_count: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Collector resource.
        :param pulumi.Input[str] collector_id: Required. Id of the requesting object.
        :param pulumi.Input[int] collection_days: How many days to collect data.
        :param pulumi.Input[str] description: User specified description of the Collector.
        :param pulumi.Input[str] display_name: User specified name of the Collector.
        :param pulumi.Input[str] eula_uri: Uri for EULA (End User License Agreement) from customer.
        :param pulumi.Input[str] expected_asset_count: User specified expected asset count.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs.
        :param pulumi.Input[str] name: name of resource.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests.
        :param pulumi.Input[str] service_account: Service Account email used to ingest data to this Collector.
        """
        pulumi.set(__self__, "collector_id", collector_id)
        if collection_days is not None:
            pulumi.set(__self__, "collection_days", collection_days)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if eula_uri is not None:
            pulumi.set(__self__, "eula_uri", eula_uri)
        if expected_asset_count is not None:
            pulumi.set(__self__, "expected_asset_count", expected_asset_count)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="collectorId")
    def collector_id(self) -> pulumi.Input[str]:
        """
        Required. Id of the requesting object.
        """
        return pulumi.get(self, "collector_id")

    @collector_id.setter
    def collector_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "collector_id", value)

    @property
    @pulumi.getter(name="collectionDays")
    def collection_days(self) -> Optional[pulumi.Input[int]]:
        """
        How many days to collect data.
        """
        return pulumi.get(self, "collection_days")

    @collection_days.setter
    def collection_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collection_days", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User specified description of the Collector.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User specified name of the Collector.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="eulaUri")
    def eula_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Uri for EULA (End User License Agreement) from customer.
        """
        return pulumi.get(self, "eula_uri")

    @eula_uri.setter
    def eula_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eula_uri", value)

    @property
    @pulumi.getter(name="expectedAssetCount")
    def expected_asset_count(self) -> Optional[pulumi.Input[str]]:
        """
        User specified expected asset count.
        """
        return pulumi.get(self, "expected_asset_count")

    @expected_asset_count.setter
    def expected_asset_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_asset_count", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests.
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Service Account email used to ingest data to this Collector.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


class Collector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_days: Optional[pulumi.Input[int]] = None,
                 collector_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eula_uri: Optional[pulumi.Input[str]] = None,
                 expected_asset_count: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Collector to manage the on-prem appliance which collects information about Customer assets.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] collection_days: How many days to collect data.
        :param pulumi.Input[str] collector_id: Required. Id of the requesting object.
        :param pulumi.Input[str] description: User specified description of the Collector.
        :param pulumi.Input[str] display_name: User specified name of the Collector.
        :param pulumi.Input[str] eula_uri: Uri for EULA (End User License Agreement) from customer.
        :param pulumi.Input[str] expected_asset_count: User specified expected asset count.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs.
        :param pulumi.Input[str] name: name of resource.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests.
        :param pulumi.Input[str] service_account: Service Account email used to ingest data to this Collector.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CollectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Collector to manage the on-prem appliance which collects information about Customer assets.

        :param str resource_name: The name of the resource.
        :param CollectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CollectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_days: Optional[pulumi.Input[int]] = None,
                 collector_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eula_uri: Optional[pulumi.Input[str]] = None,
                 expected_asset_count: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CollectorArgs.__new__(CollectorArgs)

            __props__.__dict__["collection_days"] = collection_days
            if collector_id is None and not opts.urn:
                raise TypeError("Missing required property 'collector_id'")
            __props__.__dict__["collector_id"] = collector_id
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["eula_uri"] = eula_uri
            __props__.__dict__["expected_asset_count"] = expected_asset_count
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["bucket"] = None
            __props__.__dict__["client_version"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["guest_os_scan"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["vsphere_scan"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["collectorId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Collector, __self__).__init__(
            'google-native:rapidmigrationassessment/v1:Collector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Collector':
        """
        Get an existing Collector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CollectorArgs.__new__(CollectorArgs)

        __props__.__dict__["bucket"] = None
        __props__.__dict__["client_version"] = None
        __props__.__dict__["collection_days"] = None
        __props__.__dict__["collector_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["eula_uri"] = None
        __props__.__dict__["expected_asset_count"] = None
        __props__.__dict__["guest_os_scan"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["service_account"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["vsphere_scan"] = None
        return Collector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Store cloud storage bucket name (which is a guid) created with this Collector.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> pulumi.Output[str]:
        """
        Client version.
        """
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="collectionDays")
    def collection_days(self) -> pulumi.Output[int]:
        """
        How many days to collect data.
        """
        return pulumi.get(self, "collection_days")

    @property
    @pulumi.getter(name="collectorId")
    def collector_id(self) -> pulumi.Output[str]:
        """
        Required. Id of the requesting object.
        """
        return pulumi.get(self, "collector_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time stamp.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        User specified description of the Collector.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        User specified name of the Collector.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="eulaUri")
    def eula_uri(self) -> pulumi.Output[str]:
        """
        Uri for EULA (End User License Agreement) from customer.
        """
        return pulumi.get(self, "eula_uri")

    @property
    @pulumi.getter(name="expectedAssetCount")
    def expected_asset_count(self) -> pulumi.Output[str]:
        """
        User specified expected asset count.
        """
        return pulumi.get(self, "expected_asset_count")

    @property
    @pulumi.getter(name="guestOsScan")
    def guest_os_scan(self) -> pulumi.Output['outputs.GuestOsScanResponse']:
        """
        Reference to MC Source Guest Os Scan.
        """
        return pulumi.get(self, "guest_os_scan")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels as key value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[str]:
        """
        Service Account email used to ingest data to this Collector.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the Collector.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time stamp.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vsphereScan")
    def vsphere_scan(self) -> pulumi.Output['outputs.VSphereScanResponse']:
        """
        Reference to MC Source vsphere_scan.
        """
        return pulumi.get(self, "vsphere_scan")

