# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCollectorResult',
    'AwaitableGetCollectorResult',
    'get_collector',
    'get_collector_output',
]

@pulumi.output_type
class GetCollectorResult:
    def __init__(__self__, bucket=None, client_version=None, collection_days=None, create_time=None, description=None, display_name=None, eula_uri=None, expected_asset_count=None, guest_os_scan=None, labels=None, name=None, service_account=None, state=None, update_time=None, vsphere_scan=None):
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        pulumi.set(__self__, "bucket", bucket)
        if client_version and not isinstance(client_version, str):
            raise TypeError("Expected argument 'client_version' to be a str")
        pulumi.set(__self__, "client_version", client_version)
        if collection_days and not isinstance(collection_days, int):
            raise TypeError("Expected argument 'collection_days' to be a int")
        pulumi.set(__self__, "collection_days", collection_days)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if eula_uri and not isinstance(eula_uri, str):
            raise TypeError("Expected argument 'eula_uri' to be a str")
        pulumi.set(__self__, "eula_uri", eula_uri)
        if expected_asset_count and not isinstance(expected_asset_count, str):
            raise TypeError("Expected argument 'expected_asset_count' to be a str")
        pulumi.set(__self__, "expected_asset_count", expected_asset_count)
        if guest_os_scan and not isinstance(guest_os_scan, dict):
            raise TypeError("Expected argument 'guest_os_scan' to be a dict")
        pulumi.set(__self__, "guest_os_scan", guest_os_scan)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vsphere_scan and not isinstance(vsphere_scan, dict):
            raise TypeError("Expected argument 'vsphere_scan' to be a dict")
        pulumi.set(__self__, "vsphere_scan", vsphere_scan)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Store cloud storage bucket name (which is a guid) created with this Collector.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> str:
        """
        Client version.
        """
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="collectionDays")
    def collection_days(self) -> int:
        """
        How many days to collect data.
        """
        return pulumi.get(self, "collection_days")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User specified description of the Collector.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User specified name of the Collector.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="eulaUri")
    def eula_uri(self) -> str:
        """
        Uri for EULA (End User License Agreement) from customer.
        """
        return pulumi.get(self, "eula_uri")

    @property
    @pulumi.getter(name="expectedAssetCount")
    def expected_asset_count(self) -> str:
        """
        User specified expected asset count.
        """
        return pulumi.get(self, "expected_asset_count")

    @property
    @pulumi.getter(name="guestOsScan")
    def guest_os_scan(self) -> 'outputs.GuestOsScanResponse':
        """
        Reference to MC Source Guest Os Scan.
        """
        return pulumi.get(self, "guest_os_scan")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels as key value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Service Account email used to ingest data to this Collector.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the Collector.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time stamp.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vsphereScan")
    def vsphere_scan(self) -> 'outputs.VSphereScanResponse':
        """
        Reference to MC Source vsphere_scan.
        """
        return pulumi.get(self, "vsphere_scan")


class AwaitableGetCollectorResult(GetCollectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCollectorResult(
            bucket=self.bucket,
            client_version=self.client_version,
            collection_days=self.collection_days,
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            eula_uri=self.eula_uri,
            expected_asset_count=self.expected_asset_count,
            guest_os_scan=self.guest_os_scan,
            labels=self.labels,
            name=self.name,
            service_account=self.service_account,
            state=self.state,
            update_time=self.update_time,
            vsphere_scan=self.vsphere_scan)


def get_collector(collector_id: Optional[str] = None,
                  location: Optional[str] = None,
                  project: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCollectorResult:
    """
    Gets details of a single Collector.
    """
    __args__ = dict()
    __args__['collectorId'] = collector_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:rapidmigrationassessment/v1:getCollector', __args__, opts=opts, typ=GetCollectorResult).value

    return AwaitableGetCollectorResult(
        bucket=pulumi.get(__ret__, 'bucket'),
        client_version=pulumi.get(__ret__, 'client_version'),
        collection_days=pulumi.get(__ret__, 'collection_days'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        eula_uri=pulumi.get(__ret__, 'eula_uri'),
        expected_asset_count=pulumi.get(__ret__, 'expected_asset_count'),
        guest_os_scan=pulumi.get(__ret__, 'guest_os_scan'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        service_account=pulumi.get(__ret__, 'service_account'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vsphere_scan=pulumi.get(__ret__, 'vsphere_scan'))


@_utilities.lift_output_func(get_collector)
def get_collector_output(collector_id: Optional[pulumi.Input[str]] = None,
                         location: Optional[pulumi.Input[str]] = None,
                         project: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCollectorResult]:
    """
    Gets details of a single Collector.
    """
    ...
