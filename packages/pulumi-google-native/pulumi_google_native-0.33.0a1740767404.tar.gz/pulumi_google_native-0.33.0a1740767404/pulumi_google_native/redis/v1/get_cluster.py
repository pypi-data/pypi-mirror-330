# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    def __init__(__self__, authorization_mode=None, create_time=None, discovery_endpoints=None, name=None, psc_configs=None, psc_connections=None, replica_count=None, shard_count=None, size_gb=None, state=None, state_info=None, transit_encryption_mode=None, uid=None):
        if authorization_mode and not isinstance(authorization_mode, str):
            raise TypeError("Expected argument 'authorization_mode' to be a str")
        pulumi.set(__self__, "authorization_mode", authorization_mode)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if discovery_endpoints and not isinstance(discovery_endpoints, list):
            raise TypeError("Expected argument 'discovery_endpoints' to be a list")
        pulumi.set(__self__, "discovery_endpoints", discovery_endpoints)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if psc_configs and not isinstance(psc_configs, list):
            raise TypeError("Expected argument 'psc_configs' to be a list")
        pulumi.set(__self__, "psc_configs", psc_configs)
        if psc_connections and not isinstance(psc_connections, list):
            raise TypeError("Expected argument 'psc_connections' to be a list")
        pulumi.set(__self__, "psc_connections", psc_connections)
        if replica_count and not isinstance(replica_count, int):
            raise TypeError("Expected argument 'replica_count' to be a int")
        pulumi.set(__self__, "replica_count", replica_count)
        if shard_count and not isinstance(shard_count, int):
            raise TypeError("Expected argument 'shard_count' to be a int")
        pulumi.set(__self__, "shard_count", shard_count)
        if size_gb and not isinstance(size_gb, int):
            raise TypeError("Expected argument 'size_gb' to be a int")
        pulumi.set(__self__, "size_gb", size_gb)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_info and not isinstance(state_info, dict):
            raise TypeError("Expected argument 'state_info' to be a dict")
        pulumi.set(__self__, "state_info", state_info)
        if transit_encryption_mode and not isinstance(transit_encryption_mode, str):
            raise TypeError("Expected argument 'transit_encryption_mode' to be a str")
        pulumi.set(__self__, "transit_encryption_mode", transit_encryption_mode)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> str:
        """
        Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
        """
        return pulumi.get(self, "authorization_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp associated with the cluster creation request.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="discoveryEndpoints")
    def discovery_endpoints(self) -> Sequence['outputs.DiscoveryEndpointResponse']:
        """
        Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
        """
        return pulumi.get(self, "discovery_endpoints")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pscConfigs")
    def psc_configs(self) -> Sequence['outputs.PscConfigResponse']:
        """
        Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
        """
        return pulumi.get(self, "psc_configs")

    @property
    @pulumi.getter(name="pscConnections")
    def psc_connections(self) -> Sequence['outputs.PscConnectionResponse']:
        """
        PSC connections for discovery of the cluster topology and accessing the cluster.
        """
        return pulumi.get(self, "psc_connections")

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> int:
        """
        Optional. The number of replica nodes per shard.
        """
        return pulumi.get(self, "replica_count")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        """
        Number of shards for the Redis cluster.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> int:
        """
        Redis memory size in GB for the entire cluster.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInfo")
    def state_info(self) -> 'outputs.StateInfoResponse':
        """
        Additional information about the current state of the cluster.
        """
        return pulumi.get(self, "state_info")

    @property
    @pulumi.getter(name="transitEncryptionMode")
    def transit_encryption_mode(self) -> str:
        """
        Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
        """
        return pulumi.get(self, "transit_encryption_mode")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System assigned, unique identifier for the cluster.
        """
        return pulumi.get(self, "uid")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            authorization_mode=self.authorization_mode,
            create_time=self.create_time,
            discovery_endpoints=self.discovery_endpoints,
            name=self.name,
            psc_configs=self.psc_configs,
            psc_connections=self.psc_connections,
            replica_count=self.replica_count,
            shard_count=self.shard_count,
            size_gb=self.size_gb,
            state=self.state,
            state_info=self.state_info,
            transit_encryption_mode=self.transit_encryption_mode,
            uid=self.uid)


def get_cluster(cluster_id: Optional[str] = None,
                location: Optional[str] = None,
                project: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Gets the details of a specific Redis cluster.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:redis/v1:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        authorization_mode=pulumi.get(__ret__, 'authorization_mode'),
        create_time=pulumi.get(__ret__, 'create_time'),
        discovery_endpoints=pulumi.get(__ret__, 'discovery_endpoints'),
        name=pulumi.get(__ret__, 'name'),
        psc_configs=pulumi.get(__ret__, 'psc_configs'),
        psc_connections=pulumi.get(__ret__, 'psc_connections'),
        replica_count=pulumi.get(__ret__, 'replica_count'),
        shard_count=pulumi.get(__ret__, 'shard_count'),
        size_gb=pulumi.get(__ret__, 'size_gb'),
        state=pulumi.get(__ret__, 'state'),
        state_info=pulumi.get(__ret__, 'state_info'),
        transit_encryption_mode=pulumi.get(__ret__, 'transit_encryption_mode'),
        uid=pulumi.get(__ret__, 'uid'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(cluster_id: Optional[pulumi.Input[str]] = None,
                       location: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Gets the details of a specific Redis cluster.
    """
    ...
