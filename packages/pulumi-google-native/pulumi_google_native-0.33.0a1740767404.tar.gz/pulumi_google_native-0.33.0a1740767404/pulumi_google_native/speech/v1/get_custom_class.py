# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCustomClassResult',
    'AwaitableGetCustomClassResult',
    'get_custom_class',
    'get_custom_class_output',
]

@pulumi.output_type
class GetCustomClassResult:
    def __init__(__self__, annotations=None, custom_class_id=None, delete_time=None, display_name=None, etag=None, expire_time=None, items=None, kms_key_name=None, kms_key_version_name=None, name=None, reconciling=None, state=None, uid=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if custom_class_id and not isinstance(custom_class_id, str):
            raise TypeError("Expected argument 'custom_class_id' to be a str")
        pulumi.set(__self__, "custom_class_id", custom_class_id)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if kms_key_name and not isinstance(kms_key_name, str):
            raise TypeError("Expected argument 'kms_key_name' to be a str")
        pulumi.set(__self__, "kms_key_name", kms_key_name)
        if kms_key_version_name and not isinstance(kms_key_version_name, str):
            raise TypeError("Expected argument 'kms_key_version_name' to be a str")
        pulumi.set(__self__, "kms_key_version_name", kms_key_version_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="customClassId")
    def custom_class_id(self) -> str:
        """
        If this custom class is a resource, the custom_class_id is the resource id of the CustomClass. Case sensitive.
        """
        return pulumi.get(self, "custom_class_id")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        The time at which this resource was requested for deletion. This field is not used.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-settable, human-readable name for the CustomClass. Must be 63 characters or less. This field is not used.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The time at which this resource will be purged. This field is not used.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.ClassItemResponse']:
        """
        A collection of class items.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
        """
        return pulumi.get(self, "kms_key_name")

    @property
    @pulumi.getter(name="kmsKeyVersionName")
    def kms_key_version_name(self) -> str:
        """
        The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
        """
        return pulumi.get(self, "kms_key_version_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the custom class.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Whether or not this CustomClass is in the process of being updated. This field is not used.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The CustomClass lifecycle state. This field is not used.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-assigned unique identifier for the CustomClass. This field is not used.
        """
        return pulumi.get(self, "uid")


class AwaitableGetCustomClassResult(GetCustomClassResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomClassResult(
            annotations=self.annotations,
            custom_class_id=self.custom_class_id,
            delete_time=self.delete_time,
            display_name=self.display_name,
            etag=self.etag,
            expire_time=self.expire_time,
            items=self.items,
            kms_key_name=self.kms_key_name,
            kms_key_version_name=self.kms_key_version_name,
            name=self.name,
            reconciling=self.reconciling,
            state=self.state,
            uid=self.uid)


def get_custom_class(custom_class_id: Optional[str] = None,
                     location: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomClassResult:
    """
    Get a custom class.
    """
    __args__ = dict()
    __args__['customClassId'] = custom_class_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:speech/v1:getCustomClass', __args__, opts=opts, typ=GetCustomClassResult).value

    return AwaitableGetCustomClassResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        custom_class_id=pulumi.get(__ret__, 'custom_class_id'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        items=pulumi.get(__ret__, 'items'),
        kms_key_name=pulumi.get(__ret__, 'kms_key_name'),
        kms_key_version_name=pulumi.get(__ret__, 'kms_key_version_name'),
        name=pulumi.get(__ret__, 'name'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'))


@_utilities.lift_output_func(get_custom_class)
def get_custom_class_output(custom_class_id: Optional[pulumi.Input[str]] = None,
                            location: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomClassResult]:
    """
    Get a custom class.
    """
    ...
