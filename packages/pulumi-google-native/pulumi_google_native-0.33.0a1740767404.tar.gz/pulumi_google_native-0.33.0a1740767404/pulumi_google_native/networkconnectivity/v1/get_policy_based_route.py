# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPolicyBasedRouteResult',
    'AwaitableGetPolicyBasedRouteResult',
    'get_policy_based_route',
    'get_policy_based_route_output',
]

@pulumi.output_type
class GetPolicyBasedRouteResult:
    def __init__(__self__, create_time=None, description=None, filter=None, interconnect_attachment=None, kind=None, labels=None, name=None, network=None, next_hop_ilb_ip=None, next_hop_other_routes=None, priority=None, self_link=None, update_time=None, virtual_machine=None, warnings=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if interconnect_attachment and not isinstance(interconnect_attachment, dict):
            raise TypeError("Expected argument 'interconnect_attachment' to be a dict")
        pulumi.set(__self__, "interconnect_attachment", interconnect_attachment)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if next_hop_ilb_ip and not isinstance(next_hop_ilb_ip, str):
            raise TypeError("Expected argument 'next_hop_ilb_ip' to be a str")
        pulumi.set(__self__, "next_hop_ilb_ip", next_hop_ilb_ip)
        if next_hop_other_routes and not isinstance(next_hop_other_routes, str):
            raise TypeError("Expected argument 'next_hop_other_routes' to be a str")
        pulumi.set(__self__, "next_hop_other_routes", next_hop_other_routes)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if virtual_machine and not isinstance(virtual_machine, dict):
            raise TypeError("Expected argument 'virtual_machine' to be a dict")
        pulumi.set(__self__, "virtual_machine", virtual_machine)
        if warnings and not isinstance(warnings, list):
            raise TypeError("Expected argument 'warnings' to be a list")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the policy-based route was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. An optional description of this resource. Provide this field when you create the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.FilterResponse':
        """
        The filter to match L4 traffic.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="interconnectAttachment")
    def interconnect_attachment(self) -> 'outputs.InterconnectAttachmentResponse':
        """
        Optional. The interconnect attachments that this policy-based route applies to.
        """
        return pulumi.get(self, "interconnect_attachment")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="nextHopIlbIp")
    def next_hop_ilb_ip(self) -> str:
        """
        Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
        """
        return pulumi.get(self, "next_hop_ilb_ip")

    @property
    @pulumi.getter(name="nextHopOtherRoutes")
    def next_hop_other_routes(self) -> str:
        """
        Optional. Other routes that will be referenced to determine the next hop of the packet.
        """
        return pulumi.get(self, "next_hop_other_routes")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> str:
        """
        Server-defined fully-qualified URL for this resource.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the policy-based route was updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> 'outputs.VirtualMachineResponse':
        """
        Optional. VM instances to which this policy-based route applies to.
        """
        return pulumi.get(self, "virtual_machine")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.WarningsResponse']:
        """
        If potential misconfigurations are detected for this route, this field will be populated with warning messages.
        """
        return pulumi.get(self, "warnings")


class AwaitableGetPolicyBasedRouteResult(GetPolicyBasedRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyBasedRouteResult(
            create_time=self.create_time,
            description=self.description,
            filter=self.filter,
            interconnect_attachment=self.interconnect_attachment,
            kind=self.kind,
            labels=self.labels,
            name=self.name,
            network=self.network,
            next_hop_ilb_ip=self.next_hop_ilb_ip,
            next_hop_other_routes=self.next_hop_other_routes,
            priority=self.priority,
            self_link=self.self_link,
            update_time=self.update_time,
            virtual_machine=self.virtual_machine,
            warnings=self.warnings)


def get_policy_based_route(policy_based_route_id: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyBasedRouteResult:
    """
    Gets details of a single policy-based route.
    """
    __args__ = dict()
    __args__['policyBasedRouteId'] = policy_based_route_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networkconnectivity/v1:getPolicyBasedRoute', __args__, opts=opts, typ=GetPolicyBasedRouteResult).value

    return AwaitableGetPolicyBasedRouteResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        filter=pulumi.get(__ret__, 'filter'),
        interconnect_attachment=pulumi.get(__ret__, 'interconnect_attachment'),
        kind=pulumi.get(__ret__, 'kind'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        next_hop_ilb_ip=pulumi.get(__ret__, 'next_hop_ilb_ip'),
        next_hop_other_routes=pulumi.get(__ret__, 'next_hop_other_routes'),
        priority=pulumi.get(__ret__, 'priority'),
        self_link=pulumi.get(__ret__, 'self_link'),
        update_time=pulumi.get(__ret__, 'update_time'),
        virtual_machine=pulumi.get(__ret__, 'virtual_machine'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_policy_based_route)
def get_policy_based_route_output(policy_based_route_id: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyBasedRouteResult]:
    """
    Gets details of a single policy-based route.
    """
    ...
