# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetServiceConnectionMapResult',
    'AwaitableGetServiceConnectionMapResult',
    'get_service_connection_map',
    'get_service_connection_map_output',
]

@pulumi.output_type
class GetServiceConnectionMapResult:
    def __init__(__self__, consumer_psc_configs=None, consumer_psc_connections=None, create_time=None, description=None, etag=None, infrastructure=None, labels=None, name=None, producer_psc_configs=None, service_class=None, service_class_uri=None, token=None, update_time=None):
        if consumer_psc_configs and not isinstance(consumer_psc_configs, list):
            raise TypeError("Expected argument 'consumer_psc_configs' to be a list")
        pulumi.set(__self__, "consumer_psc_configs", consumer_psc_configs)
        if consumer_psc_connections and not isinstance(consumer_psc_connections, list):
            raise TypeError("Expected argument 'consumer_psc_connections' to be a list")
        pulumi.set(__self__, "consumer_psc_connections", consumer_psc_connections)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if infrastructure and not isinstance(infrastructure, str):
            raise TypeError("Expected argument 'infrastructure' to be a str")
        pulumi.set(__self__, "infrastructure", infrastructure)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if producer_psc_configs and not isinstance(producer_psc_configs, list):
            raise TypeError("Expected argument 'producer_psc_configs' to be a list")
        pulumi.set(__self__, "producer_psc_configs", producer_psc_configs)
        if service_class and not isinstance(service_class, str):
            raise TypeError("Expected argument 'service_class' to be a str")
        pulumi.set(__self__, "service_class", service_class)
        if service_class_uri and not isinstance(service_class_uri, str):
            raise TypeError("Expected argument 'service_class_uri' to be a str")
        pulumi.set(__self__, "service_class_uri", service_class_uri)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="consumerPscConfigs")
    def consumer_psc_configs(self) -> Sequence['outputs.ConsumerPscConfigResponse']:
        """
        The PSC configurations on consumer side.
        """
        return pulumi.get(self, "consumer_psc_configs")

    @property
    @pulumi.getter(name="consumerPscConnections")
    def consumer_psc_connections(self) -> Sequence['outputs.ConsumerPscConnectionResponse']:
        """
        PSC connection details on consumer side.
        """
        return pulumi.get(self, "consumer_psc_connections")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the ServiceConnectionMap was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of this resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def infrastructure(self) -> str:
        """
        The infrastructure used for connections between consumers/producers.
        """
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="producerPscConfigs")
    def producer_psc_configs(self) -> Sequence['outputs.ProducerPscConfigResponse']:
        """
        The PSC configurations on producer side.
        """
        return pulumi.get(self, "producer_psc_configs")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        """
        The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        """
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="serviceClassUri")
    def service_class_uri(self) -> str:
        """
        The service class uri this ServiceConnectionMap is for.
        """
        return pulumi.get(self, "service_class_uri")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the ServiceConnectionMap was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetServiceConnectionMapResult(GetServiceConnectionMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceConnectionMapResult(
            consumer_psc_configs=self.consumer_psc_configs,
            consumer_psc_connections=self.consumer_psc_connections,
            create_time=self.create_time,
            description=self.description,
            etag=self.etag,
            infrastructure=self.infrastructure,
            labels=self.labels,
            name=self.name,
            producer_psc_configs=self.producer_psc_configs,
            service_class=self.service_class,
            service_class_uri=self.service_class_uri,
            token=self.token,
            update_time=self.update_time)


def get_service_connection_map(location: Optional[str] = None,
                               project: Optional[str] = None,
                               service_connection_map_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceConnectionMapResult:
    """
    Gets details of a single ServiceConnectionMap.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['serviceConnectionMapId'] = service_connection_map_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networkconnectivity/v1:getServiceConnectionMap', __args__, opts=opts, typ=GetServiceConnectionMapResult).value

    return AwaitableGetServiceConnectionMapResult(
        consumer_psc_configs=pulumi.get(__ret__, 'consumer_psc_configs'),
        consumer_psc_connections=pulumi.get(__ret__, 'consumer_psc_connections'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        etag=pulumi.get(__ret__, 'etag'),
        infrastructure=pulumi.get(__ret__, 'infrastructure'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        producer_psc_configs=pulumi.get(__ret__, 'producer_psc_configs'),
        service_class=pulumi.get(__ret__, 'service_class'),
        service_class_uri=pulumi.get(__ret__, 'service_class_uri'),
        token=pulumi.get(__ret__, 'token'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_service_connection_map)
def get_service_connection_map_output(location: Optional[pulumi.Input[str]] = None,
                                      project: Optional[pulumi.Input[Optional[str]]] = None,
                                      service_connection_map_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceConnectionMapResult]:
    """
    Gets details of a single ServiceConnectionMap.
    """
    ...
