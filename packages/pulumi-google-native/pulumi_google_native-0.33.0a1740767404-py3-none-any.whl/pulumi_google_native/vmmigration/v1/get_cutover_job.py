# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCutoverJobResult',
    'AwaitableGetCutoverJobResult',
    'get_cutover_job',
    'get_cutover_job_output',
]

@pulumi.output_type
class GetCutoverJobResult:
    def __init__(__self__, compute_engine_disks_target_details=None, compute_engine_target_details=None, create_time=None, end_time=None, error=None, name=None, progress_percent=None, state=None, state_message=None, state_time=None, steps=None):
        if compute_engine_disks_target_details and not isinstance(compute_engine_disks_target_details, dict):
            raise TypeError("Expected argument 'compute_engine_disks_target_details' to be a dict")
        pulumi.set(__self__, "compute_engine_disks_target_details", compute_engine_disks_target_details)
        if compute_engine_target_details and not isinstance(compute_engine_target_details, dict):
            raise TypeError("Expected argument 'compute_engine_target_details' to be a dict")
        pulumi.set(__self__, "compute_engine_target_details", compute_engine_target_details)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if progress_percent and not isinstance(progress_percent, int):
            raise TypeError("Expected argument 'progress_percent' to be a int")
        pulumi.set(__self__, "progress_percent", progress_percent)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_message and not isinstance(state_message, str):
            raise TypeError("Expected argument 'state_message' to be a str")
        pulumi.set(__self__, "state_message", state_message)
        if state_time and not isinstance(state_time, str):
            raise TypeError("Expected argument 'state_time' to be a str")
        pulumi.set(__self__, "state_time", state_time)
        if steps and not isinstance(steps, list):
            raise TypeError("Expected argument 'steps' to be a list")
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter(name="computeEngineDisksTargetDetails")
    def compute_engine_disks_target_details(self) -> 'outputs.ComputeEngineDisksTargetDetailsResponse':
        """
        Details of the target Persistent Disks in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_disks_target_details")

    @property
    @pulumi.getter(name="computeEngineTargetDetails")
    def compute_engine_target_details(self) -> 'outputs.ComputeEngineTargetDetailsResponse':
        """
        Details of the target VM in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_target_details")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time the cutover job was created (as an API call, not when it was actually created in the target).
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the cutover job had finished.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details for the errors that led to the Cutover Job's state.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cutover job.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="progressPercent")
    def progress_percent(self) -> int:
        """
        The current progress in percentage of the cutover job.
        """
        return pulumi.get(self, "progress_percent")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the cutover job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        A message providing possible extra details about the current state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="stateTime")
    def state_time(self) -> str:
        """
        The time the state was last updated.
        """
        return pulumi.get(self, "state_time")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.CutoverStepResponse']:
        """
        The cutover steps list representing its progress.
        """
        return pulumi.get(self, "steps")


class AwaitableGetCutoverJobResult(GetCutoverJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCutoverJobResult(
            compute_engine_disks_target_details=self.compute_engine_disks_target_details,
            compute_engine_target_details=self.compute_engine_target_details,
            create_time=self.create_time,
            end_time=self.end_time,
            error=self.error,
            name=self.name,
            progress_percent=self.progress_percent,
            state=self.state,
            state_message=self.state_message,
            state_time=self.state_time,
            steps=self.steps)


def get_cutover_job(cutover_job_id: Optional[str] = None,
                    location: Optional[str] = None,
                    migrating_vm_id: Optional[str] = None,
                    project: Optional[str] = None,
                    source_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCutoverJobResult:
    """
    Gets details of a single CutoverJob.
    """
    __args__ = dict()
    __args__['cutoverJobId'] = cutover_job_id
    __args__['location'] = location
    __args__['migratingVmId'] = migrating_vm_id
    __args__['project'] = project
    __args__['sourceId'] = source_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmmigration/v1:getCutoverJob', __args__, opts=opts, typ=GetCutoverJobResult).value

    return AwaitableGetCutoverJobResult(
        compute_engine_disks_target_details=pulumi.get(__ret__, 'compute_engine_disks_target_details'),
        compute_engine_target_details=pulumi.get(__ret__, 'compute_engine_target_details'),
        create_time=pulumi.get(__ret__, 'create_time'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        name=pulumi.get(__ret__, 'name'),
        progress_percent=pulumi.get(__ret__, 'progress_percent'),
        state=pulumi.get(__ret__, 'state'),
        state_message=pulumi.get(__ret__, 'state_message'),
        state_time=pulumi.get(__ret__, 'state_time'),
        steps=pulumi.get(__ret__, 'steps'))


@_utilities.lift_output_func(get_cutover_job)
def get_cutover_job_output(cutover_job_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           migrating_vm_id: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           source_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCutoverJobResult]:
    """
    Gets details of a single CutoverJob.
    """
    ...
