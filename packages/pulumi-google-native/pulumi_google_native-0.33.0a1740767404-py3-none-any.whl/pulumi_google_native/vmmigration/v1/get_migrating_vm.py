# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMigratingVmResult',
    'AwaitableGetMigratingVmResult',
    'get_migrating_vm',
    'get_migrating_vm_output',
]

@pulumi.output_type
class GetMigratingVmResult:
    def __init__(__self__, aws_source_vm_details=None, azure_source_vm_details=None, compute_engine_disks_target_defaults=None, compute_engine_target_defaults=None, create_time=None, current_sync_info=None, cutover_forecast=None, description=None, display_name=None, error=None, group=None, labels=None, last_replication_cycle=None, last_sync=None, name=None, policy=None, recent_clone_jobs=None, recent_cutover_jobs=None, source_vm_id=None, state=None, state_time=None, update_time=None, vmware_source_vm_details=None):
        if aws_source_vm_details and not isinstance(aws_source_vm_details, dict):
            raise TypeError("Expected argument 'aws_source_vm_details' to be a dict")
        pulumi.set(__self__, "aws_source_vm_details", aws_source_vm_details)
        if azure_source_vm_details and not isinstance(azure_source_vm_details, dict):
            raise TypeError("Expected argument 'azure_source_vm_details' to be a dict")
        pulumi.set(__self__, "azure_source_vm_details", azure_source_vm_details)
        if compute_engine_disks_target_defaults and not isinstance(compute_engine_disks_target_defaults, dict):
            raise TypeError("Expected argument 'compute_engine_disks_target_defaults' to be a dict")
        pulumi.set(__self__, "compute_engine_disks_target_defaults", compute_engine_disks_target_defaults)
        if compute_engine_target_defaults and not isinstance(compute_engine_target_defaults, dict):
            raise TypeError("Expected argument 'compute_engine_target_defaults' to be a dict")
        pulumi.set(__self__, "compute_engine_target_defaults", compute_engine_target_defaults)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if current_sync_info and not isinstance(current_sync_info, dict):
            raise TypeError("Expected argument 'current_sync_info' to be a dict")
        pulumi.set(__self__, "current_sync_info", current_sync_info)
        if cutover_forecast and not isinstance(cutover_forecast, dict):
            raise TypeError("Expected argument 'cutover_forecast' to be a dict")
        pulumi.set(__self__, "cutover_forecast", cutover_forecast)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if group and not isinstance(group, str):
            raise TypeError("Expected argument 'group' to be a str")
        pulumi.set(__self__, "group", group)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_replication_cycle and not isinstance(last_replication_cycle, dict):
            raise TypeError("Expected argument 'last_replication_cycle' to be a dict")
        pulumi.set(__self__, "last_replication_cycle", last_replication_cycle)
        if last_sync and not isinstance(last_sync, dict):
            raise TypeError("Expected argument 'last_sync' to be a dict")
        pulumi.set(__self__, "last_sync", last_sync)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)
        if recent_clone_jobs and not isinstance(recent_clone_jobs, list):
            raise TypeError("Expected argument 'recent_clone_jobs' to be a list")
        pulumi.set(__self__, "recent_clone_jobs", recent_clone_jobs)
        if recent_cutover_jobs and not isinstance(recent_cutover_jobs, list):
            raise TypeError("Expected argument 'recent_cutover_jobs' to be a list")
        pulumi.set(__self__, "recent_cutover_jobs", recent_cutover_jobs)
        if source_vm_id and not isinstance(source_vm_id, str):
            raise TypeError("Expected argument 'source_vm_id' to be a str")
        pulumi.set(__self__, "source_vm_id", source_vm_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_time and not isinstance(state_time, str):
            raise TypeError("Expected argument 'state_time' to be a str")
        pulumi.set(__self__, "state_time", state_time)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vmware_source_vm_details and not isinstance(vmware_source_vm_details, dict):
            raise TypeError("Expected argument 'vmware_source_vm_details' to be a dict")
        pulumi.set(__self__, "vmware_source_vm_details", vmware_source_vm_details)

    @property
    @pulumi.getter(name="awsSourceVmDetails")
    def aws_source_vm_details(self) -> 'outputs.AwsSourceVmDetailsResponse':
        """
        Details of the VM from an AWS source.
        """
        return pulumi.get(self, "aws_source_vm_details")

    @property
    @pulumi.getter(name="azureSourceVmDetails")
    def azure_source_vm_details(self) -> 'outputs.AzureSourceVmDetailsResponse':
        """
        Details of the VM from an Azure source.
        """
        return pulumi.get(self, "azure_source_vm_details")

    @property
    @pulumi.getter(name="computeEngineDisksTargetDefaults")
    def compute_engine_disks_target_defaults(self) -> 'outputs.ComputeEngineDisksTargetDefaultsResponse':
        """
        Details of the target Persistent Disks in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_disks_target_defaults")

    @property
    @pulumi.getter(name="computeEngineTargetDefaults")
    def compute_engine_target_defaults(self) -> 'outputs.ComputeEngineTargetDefaultsResponse':
        """
        Details of the target VM in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_target_defaults")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentSyncInfo")
    def current_sync_info(self) -> 'outputs.ReplicationCycleResponse':
        """
        Details of the current running replication cycle.
        """
        return pulumi.get(self, "current_sync_info")

    @property
    @pulumi.getter(name="cutoverForecast")
    def cutover_forecast(self) -> 'outputs.CutoverForecastResponse':
        """
        Provides details of future CutoverJobs of a MigratingVm. Set to empty when cutover forecast is unavailable.
        """
        return pulumi.get(self, "cutover_forecast")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description attached to the migrating VM by the user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name attached to the MigratingVm by the user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details on the state of the Migrating VM in case of an error in replication.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels of the migrating VM.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastReplicationCycle")
    def last_replication_cycle(self) -> 'outputs.ReplicationCycleResponse':
        """
        Details of the last replication cycle. This will be updated whenever a replication cycle is finished and is not to be confused with last_sync which is only updated on successful replication cycles.
        """
        return pulumi.get(self, "last_replication_cycle")

    @property
    @pulumi.getter(name="lastSync")
    def last_sync(self) -> 'outputs.ReplicationSyncResponse':
        """
        The most updated snapshot created time in the source that finished replication.
        """
        return pulumi.get(self, "last_sync")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The identifier of the MigratingVm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> 'outputs.SchedulePolicyResponse':
        """
        The replication schedule policy.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="recentCloneJobs")
    def recent_clone_jobs(self) -> Sequence['outputs.CloneJobResponse']:
        """
        The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
        """
        return pulumi.get(self, "recent_clone_jobs")

    @property
    @pulumi.getter(name="recentCutoverJobs")
    def recent_cutover_jobs(self) -> Sequence['outputs.CutoverJobResponse']:
        """
        The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
        """
        return pulumi.get(self, "recent_cutover_jobs")

    @property
    @pulumi.getter(name="sourceVmId")
    def source_vm_id(self) -> str:
        """
        The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
        """
        return pulumi.get(self, "source_vm_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the MigratingVm.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateTime")
    def state_time(self) -> str:
        """
        The last time the migrating VM state was updated.
        """
        return pulumi.get(self, "state_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last time the migrating VM resource was updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vmwareSourceVmDetails")
    def vmware_source_vm_details(self) -> 'outputs.VmwareSourceVmDetailsResponse':
        """
        Details of the VM from a Vmware source.
        """
        return pulumi.get(self, "vmware_source_vm_details")


class AwaitableGetMigratingVmResult(GetMigratingVmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigratingVmResult(
            aws_source_vm_details=self.aws_source_vm_details,
            azure_source_vm_details=self.azure_source_vm_details,
            compute_engine_disks_target_defaults=self.compute_engine_disks_target_defaults,
            compute_engine_target_defaults=self.compute_engine_target_defaults,
            create_time=self.create_time,
            current_sync_info=self.current_sync_info,
            cutover_forecast=self.cutover_forecast,
            description=self.description,
            display_name=self.display_name,
            error=self.error,
            group=self.group,
            labels=self.labels,
            last_replication_cycle=self.last_replication_cycle,
            last_sync=self.last_sync,
            name=self.name,
            policy=self.policy,
            recent_clone_jobs=self.recent_clone_jobs,
            recent_cutover_jobs=self.recent_cutover_jobs,
            source_vm_id=self.source_vm_id,
            state=self.state,
            state_time=self.state_time,
            update_time=self.update_time,
            vmware_source_vm_details=self.vmware_source_vm_details)


def get_migrating_vm(location: Optional[str] = None,
                     migrating_vm_id: Optional[str] = None,
                     project: Optional[str] = None,
                     source_id: Optional[str] = None,
                     view: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigratingVmResult:
    """
    Gets details of a single MigratingVm.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['migratingVmId'] = migrating_vm_id
    __args__['project'] = project
    __args__['sourceId'] = source_id
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmmigration/v1:getMigratingVm', __args__, opts=opts, typ=GetMigratingVmResult).value

    return AwaitableGetMigratingVmResult(
        aws_source_vm_details=pulumi.get(__ret__, 'aws_source_vm_details'),
        azure_source_vm_details=pulumi.get(__ret__, 'azure_source_vm_details'),
        compute_engine_disks_target_defaults=pulumi.get(__ret__, 'compute_engine_disks_target_defaults'),
        compute_engine_target_defaults=pulumi.get(__ret__, 'compute_engine_target_defaults'),
        create_time=pulumi.get(__ret__, 'create_time'),
        current_sync_info=pulumi.get(__ret__, 'current_sync_info'),
        cutover_forecast=pulumi.get(__ret__, 'cutover_forecast'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        error=pulumi.get(__ret__, 'error'),
        group=pulumi.get(__ret__, 'group'),
        labels=pulumi.get(__ret__, 'labels'),
        last_replication_cycle=pulumi.get(__ret__, 'last_replication_cycle'),
        last_sync=pulumi.get(__ret__, 'last_sync'),
        name=pulumi.get(__ret__, 'name'),
        policy=pulumi.get(__ret__, 'policy'),
        recent_clone_jobs=pulumi.get(__ret__, 'recent_clone_jobs'),
        recent_cutover_jobs=pulumi.get(__ret__, 'recent_cutover_jobs'),
        source_vm_id=pulumi.get(__ret__, 'source_vm_id'),
        state=pulumi.get(__ret__, 'state'),
        state_time=pulumi.get(__ret__, 'state_time'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vmware_source_vm_details=pulumi.get(__ret__, 'vmware_source_vm_details'))


@_utilities.lift_output_func(get_migrating_vm)
def get_migrating_vm_output(location: Optional[pulumi.Input[str]] = None,
                            migrating_vm_id: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            source_id: Optional[pulumi.Input[str]] = None,
                            view: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMigratingVmResult]:
    """
    Gets details of a single MigratingVm.
    """
    ...
