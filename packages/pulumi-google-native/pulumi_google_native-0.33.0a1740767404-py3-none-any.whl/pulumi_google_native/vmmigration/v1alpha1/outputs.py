# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccessKeyCredentialsResponse',
    'AdaptingOSStepResponse',
    'ApplianceVersionResponse',
    'AppliedLicenseResponse',
    'AvailableUpdatesResponse',
    'AwsDiskDetailsResponse',
    'AwsSourceDetailsResponse',
    'AwsSourceVmDetailsResponse',
    'AzureDiskDetailsResponse',
    'AzureSourceDetailsResponse',
    'AzureSourceVmDetailsResponse',
    'BootDiskDefaultsResponse',
    'ClientSecretCredentialsResponse',
    'CloneJobResponse',
    'CloneStepResponse',
    'ComputeEngineDisksTargetDefaultsResponse',
    'ComputeEngineDisksTargetDetailsResponse',
    'ComputeEngineTargetDefaultsResponse',
    'ComputeEngineTargetDetailsResponse',
    'ComputeSchedulingResponse',
    'CutoverForecastResponse',
    'CutoverJobResponse',
    'CutoverStepResponse',
    'CycleStepResponse',
    'DiskImageDefaultsResponse',
    'DisksMigrationDisksTargetDefaultsResponse',
    'DisksMigrationDisksTargetDetailsResponse',
    'DisksMigrationVmTargetDefaultsResponse',
    'DisksMigrationVmTargetDetailsResponse',
    'EncryptionResponse',
    'InitializingReplicationStepResponse',
    'InstantiatingMigratedVMStepResponse',
    'LinkResponse',
    'LocalizedMessageResponse',
    'MigrationWarningResponse',
    'NetworkInterfaceResponse',
    'PersistentDiskDefaultsResponse',
    'PersistentDiskResponse',
    'PostProcessingStepResponse',
    'PreparingVMDisksStepResponse',
    'ReplicatingStepResponse',
    'ReplicationCycleResponse',
    'ReplicationSyncResponse',
    'SchedulePolicyResponse',
    'SchedulingNodeAffinityResponse',
    'ShuttingDownSourceVMStepResponse',
    'StatusResponse',
    'TagResponse',
    'TargetVMDetailsResponse',
    'UpgradeStatusResponse',
    'VmAttachmentDetailsResponse',
    'VmCapabilitiesResponse',
    'VmUtilizationInfoResponse',
    'VmUtilizationMetricsResponse',
    'VmwareDiskDetailsResponse',
    'VmwareSourceDetailsResponse',
    'VmwareSourceVmDetailsResponse',
    'VmwareVmDetailsResponse',
]

@pulumi.output_type
class AccessKeyCredentialsResponse(dict):
    """
    Message describing AWS Credentials using access key id and secret.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "sessionToken":
            suggest = "session_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessKeyCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessKeyCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessKeyCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str,
                 session_token: str):
        """
        Message describing AWS Credentials using access key id and secret.
        :param str access_key_id: AWS access key ID.
        :param str secret_access_key: Input only. AWS secret access key.
        :param str session_token: Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        AWS access key ID.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        Input only. AWS secret access key.
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> str:
        """
        Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.
        """
        return pulumi.get(self, "session_token")


@pulumi.output_type
class AdaptingOSStepResponse(dict):
    """
    AdaptingOSStep contains specific step details.
    """
    def __init__(__self__):
        """
        AdaptingOSStep contains specific step details.
        """
        pass


@pulumi.output_type
class ApplianceVersionResponse(dict):
    """
    Describes an appliance version.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "releaseNotesUri":
            suggest = "release_notes_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVersionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVersionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVersionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 critical: bool,
                 release_notes_uri: str,
                 uri: str,
                 version: str):
        """
        Describes an appliance version.
        :param bool critical: Determine whether it's critical to upgrade the appliance to this version.
        :param str release_notes_uri: Link to a page that contains the version release notes.
        :param str uri: A link for downloading the version.
        :param str version: The appliance version.
        """
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "release_notes_uri", release_notes_uri)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def critical(self) -> bool:
        """
        Determine whether it's critical to upgrade the appliance to this version.
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter(name="releaseNotesUri")
    def release_notes_uri(self) -> str:
        """
        Link to a page that contains the version release notes.
        """
        return pulumi.get(self, "release_notes_uri")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        A link for downloading the version.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The appliance version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class AppliedLicenseResponse(dict):
    """
    AppliedLicense holds the license data returned by adaptation module report.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osLicense":
            suggest = "os_license"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppliedLicenseResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppliedLicenseResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppliedLicenseResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 os_license: str,
                 type: str):
        """
        AppliedLicense holds the license data returned by adaptation module report.
        :param str os_license: The OS license returned from the adaptation module's report.
        :param str type: The license type that was used in OS adaptation.
        """
        pulumi.set(__self__, "os_license", os_license)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="osLicense")
    def os_license(self) -> str:
        """
        The OS license returned from the adaptation module's report.
        """
        return pulumi.get(self, "os_license")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The license type that was used in OS adaptation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AvailableUpdatesResponse(dict):
    """
    Holds informatiom about the available versions for upgrade.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inPlaceUpdate":
            suggest = "in_place_update"
        elif key == "newDeployableAppliance":
            suggest = "new_deployable_appliance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AvailableUpdatesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AvailableUpdatesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AvailableUpdatesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_place_update: 'outputs.ApplianceVersionResponse',
                 new_deployable_appliance: 'outputs.ApplianceVersionResponse'):
        """
        Holds informatiom about the available versions for upgrade.
        :param 'ApplianceVersionResponse' in_place_update: The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
        :param 'ApplianceVersionResponse' new_deployable_appliance: The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
        """
        pulumi.set(__self__, "in_place_update", in_place_update)
        pulumi.set(__self__, "new_deployable_appliance", new_deployable_appliance)

    @property
    @pulumi.getter(name="inPlaceUpdate")
    def in_place_update(self) -> 'outputs.ApplianceVersionResponse':
        """
        The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
        """
        return pulumi.get(self, "in_place_update")

    @property
    @pulumi.getter(name="newDeployableAppliance")
    def new_deployable_appliance(self) -> 'outputs.ApplianceVersionResponse':
        """
        The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
        """
        return pulumi.get(self, "new_deployable_appliance")


@pulumi.output_type
class AwsDiskDetailsResponse(dict):
    """
    The details of an AWS instance disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskNumber":
            suggest = "disk_number"
        elif key == "sizeGb":
            suggest = "size_gb"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsDiskDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsDiskDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsDiskDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_number: int,
                 size_gb: str,
                 volume_id: str):
        """
        The details of an AWS instance disk.
        :param int disk_number: The ordinal number of the disk.
        :param str size_gb: Size in GB.
        :param str volume_id: AWS volume ID.
        """
        pulumi.set(__self__, "disk_number", disk_number)
        pulumi.set(__self__, "size_gb", size_gb)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskNumber")
    def disk_number(self) -> int:
        """
        The ordinal number of the disk.
        """
        return pulumi.get(self, "disk_number")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> str:
        """
        Size in GB.
        """
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        """
        AWS volume ID.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class AwsSourceDetailsResponse(dict):
    """
    AwsSourceDetails message describes a specific source details for the AWS source type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyCreds":
            suggest = "access_key_creds"
        elif key == "awsRegion":
            suggest = "aws_region"
        elif key == "inventorySecurityGroupNames":
            suggest = "inventory_security_group_names"
        elif key == "inventoryTagList":
            suggest = "inventory_tag_list"
        elif key == "migrationResourcesUserTags":
            suggest = "migration_resources_user_tags"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsSourceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsSourceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsSourceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_creds: 'outputs.AccessKeyCredentialsResponse',
                 aws_region: str,
                 error: 'outputs.StatusResponse',
                 inventory_security_group_names: Sequence[str],
                 inventory_tag_list: Sequence['outputs.TagResponse'],
                 migration_resources_user_tags: Mapping[str, str],
                 public_ip: str,
                 state: str):
        """
        AwsSourceDetails message describes a specific source details for the AWS source type.
        :param 'AccessKeyCredentialsResponse' access_key_creds: AWS Credentials using access key id and secret.
        :param str aws_region: Immutable. The AWS region that the source VMs will be migrated from.
        :param 'StatusResponse' error: Provides details on the state of the Source in case of an error.
        :param Sequence[str] inventory_security_group_names: AWS security group names to limit the scope of the source inventory.
        :param Sequence['TagResponse'] inventory_tag_list: AWS resource tags to limit the scope of the source inventory.
        :param Mapping[str, str] migration_resources_user_tags: User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
        :param str public_ip: The source's public IP. All communication initiated by this source will originate from this IP.
        :param str state: State of the source as determined by the health check.
        """
        pulumi.set(__self__, "access_key_creds", access_key_creds)
        pulumi.set(__self__, "aws_region", aws_region)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "inventory_security_group_names", inventory_security_group_names)
        pulumi.set(__self__, "inventory_tag_list", inventory_tag_list)
        pulumi.set(__self__, "migration_resources_user_tags", migration_resources_user_tags)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="accessKeyCreds")
    def access_key_creds(self) -> 'outputs.AccessKeyCredentialsResponse':
        """
        AWS Credentials using access key id and secret.
        """
        return pulumi.get(self, "access_key_creds")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> str:
        """
        Immutable. The AWS region that the source VMs will be migrated from.
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details on the state of the Source in case of an error.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="inventorySecurityGroupNames")
    def inventory_security_group_names(self) -> Sequence[str]:
        """
        AWS security group names to limit the scope of the source inventory.
        """
        return pulumi.get(self, "inventory_security_group_names")

    @property
    @pulumi.getter(name="inventoryTagList")
    def inventory_tag_list(self) -> Sequence['outputs.TagResponse']:
        """
        AWS resource tags to limit the scope of the source inventory.
        """
        return pulumi.get(self, "inventory_tag_list")

    @property
    @pulumi.getter(name="migrationResourcesUserTags")
    def migration_resources_user_tags(self) -> Mapping[str, str]:
        """
        User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.
        """
        return pulumi.get(self, "migration_resources_user_tags")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The source's public IP. All communication initiated by this source will originate from this IP.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the source as determined by the health check.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class AwsSourceVmDetailsResponse(dict):
    """
    Represent the source AWS VM details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "committedStorageBytes":
            suggest = "committed_storage_bytes"
        elif key == "vmCapabilitiesInfo":
            suggest = "vm_capabilities_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsSourceVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsSourceVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsSourceVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 committed_storage_bytes: str,
                 disks: Sequence['outputs.AwsDiskDetailsResponse'],
                 firmware: str,
                 vm_capabilities_info: 'outputs.VmCapabilitiesResponse'):
        """
        Represent the source AWS VM details.
        :param str committed_storage_bytes: The total size of the disks being migrated in bytes.
        :param Sequence['AwsDiskDetailsResponse'] disks: The disks attached to the source VM.
        :param str firmware: The firmware type of the source VM.
        :param 'VmCapabilitiesResponse' vm_capabilities_info: Information about VM capabilities needed for some Compute Engine features.
        """
        pulumi.set(__self__, "committed_storage_bytes", committed_storage_bytes)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "vm_capabilities_info", vm_capabilities_info)

    @property
    @pulumi.getter(name="committedStorageBytes")
    def committed_storage_bytes(self) -> str:
        """
        The total size of the disks being migrated in bytes.
        """
        return pulumi.get(self, "committed_storage_bytes")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.AwsDiskDetailsResponse']:
        """
        The disks attached to the source VM.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        The firmware type of the source VM.
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="vmCapabilitiesInfo")
    def vm_capabilities_info(self) -> 'outputs.VmCapabilitiesResponse':
        """
        Information about VM capabilities needed for some Compute Engine features.
        """
        return pulumi.get(self, "vm_capabilities_info")


@pulumi.output_type
class AzureDiskDetailsResponse(dict):
    """
    The details of an Azure VM disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskNumber":
            suggest = "disk_number"
        elif key == "sizeGb":
            suggest = "size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureDiskDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureDiskDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureDiskDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: str,
                 disk_number: int,
                 size_gb: str):
        """
        The details of an Azure VM disk.
        :param str disk_id: Azure disk ID.
        :param int disk_number: The ordinal number of the disk.
        :param str size_gb: Size in GB.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_number", disk_number)
        pulumi.set(__self__, "size_gb", size_gb)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        Azure disk ID.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskNumber")
    def disk_number(self) -> int:
        """
        The ordinal number of the disk.
        """
        return pulumi.get(self, "disk_number")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> str:
        """
        Size in GB.
        """
        return pulumi.get(self, "size_gb")


@pulumi.output_type
class AzureSourceDetailsResponse(dict):
    """
    AzureSourceDetails message describes a specific source details for the Azure source type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureLocation":
            suggest = "azure_location"
        elif key == "clientSecretCreds":
            suggest = "client_secret_creds"
        elif key == "migrationResourcesUserTags":
            suggest = "migration_resources_user_tags"
        elif key == "resourceGroupId":
            suggest = "resource_group_id"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureSourceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureSourceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureSourceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_location: str,
                 client_secret_creds: 'outputs.ClientSecretCredentialsResponse',
                 error: 'outputs.StatusResponse',
                 migration_resources_user_tags: Mapping[str, str],
                 resource_group_id: str,
                 state: str,
                 subscription_id: str):
        """
        AzureSourceDetails message describes a specific source details for the Azure source type.
        :param str azure_location: Immutable. The Azure location (region) that the source VMs will be migrated from.
        :param 'ClientSecretCredentialsResponse' client_secret_creds: Azure Credentials using tenant ID, client ID and secret.
        :param 'StatusResponse' error: Provides details on the state of the Source in case of an error.
        :param Mapping[str, str] migration_resources_user_tags: User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
        :param str resource_group_id: The ID of the Azure resource group that contains all resources related to the migration process of this source.
        :param str state: State of the source as determined by the health check.
        :param str subscription_id: Immutable. Azure subscription ID.
        """
        pulumi.set(__self__, "azure_location", azure_location)
        pulumi.set(__self__, "client_secret_creds", client_secret_creds)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "migration_resources_user_tags", migration_resources_user_tags)
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> str:
        """
        Immutable. The Azure location (region) that the source VMs will be migrated from.
        """
        return pulumi.get(self, "azure_location")

    @property
    @pulumi.getter(name="clientSecretCreds")
    def client_secret_creds(self) -> 'outputs.ClientSecretCredentialsResponse':
        """
        Azure Credentials using tenant ID, client ID and secret.
        """
        return pulumi.get(self, "client_secret_creds")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details on the state of the Source in case of an error.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="migrationResourcesUserTags")
    def migration_resources_user_tags(self) -> Mapping[str, str]:
        """
        User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.
        """
        return pulumi.get(self, "migration_resources_user_tags")

    @property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> str:
        """
        The ID of the Azure resource group that contains all resources related to the migration process of this source.
        """
        return pulumi.get(self, "resource_group_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the source as determined by the health check.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Immutable. Azure subscription ID.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class AzureSourceVmDetailsResponse(dict):
    """
    Represent the source Azure VM details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "committedStorageBytes":
            suggest = "committed_storage_bytes"
        elif key == "vmCapabilitiesInfo":
            suggest = "vm_capabilities_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureSourceVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureSourceVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureSourceVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 committed_storage_bytes: str,
                 disks: Sequence['outputs.AzureDiskDetailsResponse'],
                 firmware: str,
                 vm_capabilities_info: 'outputs.VmCapabilitiesResponse'):
        """
        Represent the source Azure VM details.
        :param str committed_storage_bytes: The total size of the disks being migrated in bytes.
        :param Sequence['AzureDiskDetailsResponse'] disks: The disks attached to the source VM.
        :param str firmware: The firmware type of the source VM.
        :param 'VmCapabilitiesResponse' vm_capabilities_info: Information about VM capabilities needed for some Compute Engine features.
        """
        pulumi.set(__self__, "committed_storage_bytes", committed_storage_bytes)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "vm_capabilities_info", vm_capabilities_info)

    @property
    @pulumi.getter(name="committedStorageBytes")
    def committed_storage_bytes(self) -> str:
        """
        The total size of the disks being migrated in bytes.
        """
        return pulumi.get(self, "committed_storage_bytes")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.AzureDiskDetailsResponse']:
        """
        The disks attached to the source VM.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        The firmware type of the source VM.
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="vmCapabilitiesInfo")
    def vm_capabilities_info(self) -> 'outputs.VmCapabilitiesResponse':
        """
        Information about VM capabilities needed for some Compute Engine features.
        """
        return pulumi.get(self, "vm_capabilities_info")


@pulumi.output_type
class BootDiskDefaultsResponse(dict):
    """
    BootDiskDefaults hold information about the boot disk of a VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "diskName":
            suggest = "disk_name"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootDiskDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootDiskDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootDiskDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: str,
                 disk_name: str,
                 disk_type: str,
                 encryption: 'outputs.EncryptionResponse',
                 image: 'outputs.DiskImageDefaultsResponse'):
        """
        BootDiskDefaults hold information about the boot disk of a VM.
        :param str device_name: Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        :param str disk_name: Optional. The name of the disk.
        :param str disk_type: Optional. The type of disk provisioning to use for the VM.
        :param 'EncryptionResponse' encryption: Optional. The encryption to apply to the boot disk.
        :param 'DiskImageDefaultsResponse' image: The image to use when creating the disk.
        """
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        """
        Optional. The name of the disk.
        """
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Optional. The type of disk provisioning to use for the VM.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Optional. The encryption to apply to the boot disk.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def image(self) -> 'outputs.DiskImageDefaultsResponse':
        """
        The image to use when creating the disk.
        """
        return pulumi.get(self, "image")


@pulumi.output_type
class ClientSecretCredentialsResponse(dict):
    """
    Message describing Azure Credentials using tenant ID, client ID and secret.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientSecretCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientSecretCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientSecretCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 tenant_id: str):
        """
        Message describing Azure Credentials using tenant ID, client ID and secret.
        :param str client_id: Azure client ID.
        :param str client_secret: Input only. Azure client secret.
        :param str tenant_id: Azure tenant ID.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Azure client ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        Input only. Azure client secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Azure tenant ID.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class CloneJobResponse(dict):
    """
    CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeEngineDisksTargetDetails":
            suggest = "compute_engine_disks_target_details"
        elif key == "computeEngineTargetDetails":
            suggest = "compute_engine_target_details"
        elif key == "computeEngineVmDetails":
            suggest = "compute_engine_vm_details"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "stateTime":
            suggest = "state_time"
        elif key == "targetDetails":
            suggest = "target_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloneJobResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloneJobResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloneJobResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_engine_disks_target_details: 'outputs.ComputeEngineDisksTargetDetailsResponse',
                 compute_engine_target_details: 'outputs.ComputeEngineTargetDetailsResponse',
                 compute_engine_vm_details: 'outputs.TargetVMDetailsResponse',
                 create_time: str,
                 end_time: str,
                 error: 'outputs.StatusResponse',
                 name: str,
                 state: str,
                 state_time: str,
                 steps: Sequence['outputs.CloneStepResponse'],
                 target_details: 'outputs.TargetVMDetailsResponse'):
        """
        CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
        :param 'ComputeEngineDisksTargetDetailsResponse' compute_engine_disks_target_details: Details of the target Persistent Disks in Compute Engine.
        :param 'ComputeEngineTargetDetailsResponse' compute_engine_target_details: Details of the target VM in Compute Engine.
        :param 'TargetVMDetailsResponse' compute_engine_vm_details: Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
        :param str create_time: The time the clone job was created (as an API call, not when it was actually created in the target).
        :param str end_time: The time the clone job was ended.
        :param 'StatusResponse' error: Provides details for the errors that led to the Clone Job's state.
        :param str name: The name of the clone.
        :param str state: State of the clone job.
        :param str state_time: The time the state was last updated.
        :param Sequence['CloneStepResponse'] steps: The clone steps list representing its progress.
        :param 'TargetVMDetailsResponse' target_details: Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
        """
        pulumi.set(__self__, "compute_engine_disks_target_details", compute_engine_disks_target_details)
        pulumi.set(__self__, "compute_engine_target_details", compute_engine_target_details)
        pulumi.set(__self__, "compute_engine_vm_details", compute_engine_vm_details)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_time", state_time)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "target_details", target_details)

    @property
    @pulumi.getter(name="computeEngineDisksTargetDetails")
    def compute_engine_disks_target_details(self) -> 'outputs.ComputeEngineDisksTargetDetailsResponse':
        """
        Details of the target Persistent Disks in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_disks_target_details")

    @property
    @pulumi.getter(name="computeEngineTargetDetails")
    def compute_engine_target_details(self) -> 'outputs.ComputeEngineTargetDetailsResponse':
        """
        Details of the target VM in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_target_details")

    @property
    @pulumi.getter(name="computeEngineVmDetails")
    @_utilities.deprecated("""Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.""")
    def compute_engine_vm_details(self) -> 'outputs.TargetVMDetailsResponse':
        """
        Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
        """
        return pulumi.get(self, "compute_engine_vm_details")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time the clone job was created (as an API call, not when it was actually created in the target).
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the clone job was ended.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details for the errors that led to the Clone Job's state.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the clone.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the clone job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateTime")
    def state_time(self) -> str:
        """
        The time the state was last updated.
        """
        return pulumi.get(self, "state_time")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.CloneStepResponse']:
        """
        The clone steps list representing its progress.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="targetDetails")
    @_utilities.deprecated("""Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.""")
    def target_details(self) -> 'outputs.TargetVMDetailsResponse':
        """
        Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.
        """
        return pulumi.get(self, "target_details")


@pulumi.output_type
class CloneStepResponse(dict):
    """
    CloneStep holds information about the clone step progress.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptingOs":
            suggest = "adapting_os"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "instantiatingMigratedVm":
            suggest = "instantiating_migrated_vm"
        elif key == "preparingVmDisks":
            suggest = "preparing_vm_disks"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloneStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloneStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloneStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adapting_os: 'outputs.AdaptingOSStepResponse',
                 end_time: str,
                 instantiating_migrated_vm: 'outputs.InstantiatingMigratedVMStepResponse',
                 preparing_vm_disks: 'outputs.PreparingVMDisksStepResponse',
                 start_time: str):
        """
        CloneStep holds information about the clone step progress.
        :param 'AdaptingOSStepResponse' adapting_os: Adapting OS step.
        :param str end_time: The time the step has ended.
        :param 'InstantiatingMigratedVMStepResponse' instantiating_migrated_vm: Instantiating migrated VM step.
        :param 'PreparingVMDisksStepResponse' preparing_vm_disks: Preparing VM disks step.
        :param str start_time: The time the step has started.
        """
        pulumi.set(__self__, "adapting_os", adapting_os)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instantiating_migrated_vm", instantiating_migrated_vm)
        pulumi.set(__self__, "preparing_vm_disks", preparing_vm_disks)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="adaptingOs")
    def adapting_os(self) -> 'outputs.AdaptingOSStepResponse':
        """
        Adapting OS step.
        """
        return pulumi.get(self, "adapting_os")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the step has ended.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instantiatingMigratedVm")
    def instantiating_migrated_vm(self) -> 'outputs.InstantiatingMigratedVMStepResponse':
        """
        Instantiating migrated VM step.
        """
        return pulumi.get(self, "instantiating_migrated_vm")

    @property
    @pulumi.getter(name="preparingVmDisks")
    def preparing_vm_disks(self) -> 'outputs.PreparingVMDisksStepResponse':
        """
        Preparing VM disks step.
        """
        return pulumi.get(self, "preparing_vm_disks")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the step has started.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ComputeEngineDisksTargetDefaultsResponse(dict):
    """
    ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disksTargetDefaults":
            suggest = "disks_target_defaults"
        elif key == "targetProject":
            suggest = "target_project"
        elif key == "vmTargetDefaults":
            suggest = "vm_target_defaults"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEngineDisksTargetDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEngineDisksTargetDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEngineDisksTargetDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disks: Sequence['outputs.PersistentDiskDefaultsResponse'],
                 disks_target_defaults: 'outputs.DisksMigrationDisksTargetDefaultsResponse',
                 target_project: str,
                 vm_target_defaults: 'outputs.DisksMigrationVmTargetDefaultsResponse',
                 zone: str):
        """
        ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
        :param Sequence['PersistentDiskDefaultsResponse'] disks: The details of each Persistent Disk to create.
        :param 'DisksMigrationDisksTargetDefaultsResponse' disks_target_defaults: Details of the disk only migration target.
        :param str target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
        :param 'DisksMigrationVmTargetDefaultsResponse' vm_target_defaults: Details of the VM migration target.
        :param str zone: The zone in which to create the Persistent Disks.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "disks_target_defaults", disks_target_defaults)
        pulumi.set(__self__, "target_project", target_project)
        pulumi.set(__self__, "vm_target_defaults", vm_target_defaults)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.PersistentDiskDefaultsResponse']:
        """
        The details of each Persistent Disk to create.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="disksTargetDefaults")
    def disks_target_defaults(self) -> 'outputs.DisksMigrationDisksTargetDefaultsResponse':
        """
        Details of the disk only migration target.
        """
        return pulumi.get(self, "disks_target_defaults")

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> str:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.
        """
        return pulumi.get(self, "target_project")

    @property
    @pulumi.getter(name="vmTargetDefaults")
    def vm_target_defaults(self) -> 'outputs.DisksMigrationVmTargetDefaultsResponse':
        """
        Details of the VM migration target.
        """
        return pulumi.get(self, "vm_target_defaults")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The zone in which to create the Persistent Disks.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ComputeEngineDisksTargetDetailsResponse(dict):
    """
    ComputeEngineDisksTargetDetails is a collection of created Persistent Disks details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disksTargetDetails":
            suggest = "disks_target_details"
        elif key == "vmTargetDetails":
            suggest = "vm_target_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEngineDisksTargetDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEngineDisksTargetDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEngineDisksTargetDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disks: Sequence['outputs.PersistentDiskResponse'],
                 disks_target_details: 'outputs.DisksMigrationDisksTargetDetailsResponse',
                 vm_target_details: 'outputs.DisksMigrationVmTargetDetailsResponse'):
        """
        ComputeEngineDisksTargetDetails is a collection of created Persistent Disks details.
        :param Sequence['PersistentDiskResponse'] disks: The details of each created Persistent Disk.
        :param 'DisksMigrationDisksTargetDetailsResponse' disks_target_details: Details of the disks-only migration target.
        :param 'DisksMigrationVmTargetDetailsResponse' vm_target_details: Details for the VM the migrated data disks are attached to.
        """
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "disks_target_details", disks_target_details)
        pulumi.set(__self__, "vm_target_details", vm_target_details)

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.PersistentDiskResponse']:
        """
        The details of each created Persistent Disk.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="disksTargetDetails")
    def disks_target_details(self) -> 'outputs.DisksMigrationDisksTargetDetailsResponse':
        """
        Details of the disks-only migration target.
        """
        return pulumi.get(self, "disks_target_details")

    @property
    @pulumi.getter(name="vmTargetDetails")
    def vm_target_details(self) -> 'outputs.DisksMigrationVmTargetDetailsResponse':
        """
        Details for the VM the migrated data disks are attached to.
        """
        return pulumi.get(self, "vm_target_details")


@pulumi.output_type
class ComputeEngineTargetDefaultsResponse(dict):
    """
    ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalLicenses":
            suggest = "additional_licenses"
        elif key == "appliedLicense":
            suggest = "applied_license"
        elif key == "bootOption":
            suggest = "boot_option"
        elif key == "computeScheduling":
            suggest = "compute_scheduling"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "machineTypeSeries":
            suggest = "machine_type_series"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "secureBoot":
            suggest = "secure_boot"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "targetProject":
            suggest = "target_project"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEngineTargetDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEngineTargetDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEngineTargetDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_licenses: Sequence[str],
                 applied_license: 'outputs.AppliedLicenseResponse',
                 boot_option: str,
                 compute_scheduling: 'outputs.ComputeSchedulingResponse',
                 disk_type: str,
                 encryption: 'outputs.EncryptionResponse',
                 hostname: str,
                 labels: Mapping[str, str],
                 license_type: str,
                 machine_type: str,
                 machine_type_series: str,
                 metadata: Mapping[str, str],
                 network_interfaces: Sequence['outputs.NetworkInterfaceResponse'],
                 network_tags: Sequence[str],
                 secure_boot: bool,
                 service_account: str,
                 target_project: str,
                 vm_name: str,
                 zone: str):
        """
        ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
        :param Sequence[str] additional_licenses: Additional licenses to assign to the VM.
        :param 'AppliedLicenseResponse' applied_license: The OS license returned from the adaptation module report.
        :param str boot_option: The VM Boot Option, as set in the source VM.
        :param 'ComputeSchedulingResponse' compute_scheduling: Compute instance scheduling information (if empty default is used).
        :param str disk_type: The disk type to use in the VM.
        :param 'EncryptionResponse' encryption: Optional. Immutable. The encryption to apply to the VM disks.
        :param str hostname: The hostname to assign to the VM.
        :param Mapping[str, str] labels: A map of labels to associate with the VM.
        :param str license_type: The license type to use in OS adaptation.
        :param str machine_type: The machine type to create the VM with.
        :param str machine_type_series: The machine type series to create the VM with.
        :param Mapping[str, str] metadata: The metadata key/value pairs to assign to the VM.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: List of NICs connected to this VM.
        :param Sequence[str] network_tags: A list of network tags to associate with the VM.
        :param bool secure_boot: Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        :param str service_account: The service account to associate the VM with.
        :param str target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        :param str vm_name: The name of the VM to create.
        :param str zone: The zone in which to create the VM.
        """
        pulumi.set(__self__, "additional_licenses", additional_licenses)
        pulumi.set(__self__, "applied_license", applied_license)
        pulumi.set(__self__, "boot_option", boot_option)
        pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "machine_type_series", machine_type_series)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "secure_boot", secure_boot)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "target_project", target_project)
        pulumi.set(__self__, "vm_name", vm_name)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="additionalLicenses")
    def additional_licenses(self) -> Sequence[str]:
        """
        Additional licenses to assign to the VM.
        """
        return pulumi.get(self, "additional_licenses")

    @property
    @pulumi.getter(name="appliedLicense")
    def applied_license(self) -> 'outputs.AppliedLicenseResponse':
        """
        The OS license returned from the adaptation module report.
        """
        return pulumi.get(self, "applied_license")

    @property
    @pulumi.getter(name="bootOption")
    def boot_option(self) -> str:
        """
        The VM Boot Option, as set in the source VM.
        """
        return pulumi.get(self, "boot_option")

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> 'outputs.ComputeSchedulingResponse':
        """
        Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The disk type to use in the VM.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Optional. Immutable. The encryption to apply to the VM disks.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname to assign to the VM.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type to use in OS adaptation.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> str:
        """
        The machine type series to create the VM with.
        """
        return pulumi.get(self, "machine_type_series")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.NetworkInterfaceResponse']:
        """
        List of NICs connected to this VM.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> bool:
        """
        Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> str:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        """
        return pulumi.get(self, "target_project")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The zone in which to create the VM.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ComputeEngineTargetDetailsResponse(dict):
    """
    ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalLicenses":
            suggest = "additional_licenses"
        elif key == "appliedLicense":
            suggest = "applied_license"
        elif key == "bootOption":
            suggest = "boot_option"
        elif key == "computeScheduling":
            suggest = "compute_scheduling"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "machineTypeSeries":
            suggest = "machine_type_series"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "secureBoot":
            suggest = "secure_boot"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeEngineTargetDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeEngineTargetDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeEngineTargetDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_licenses: Sequence[str],
                 applied_license: 'outputs.AppliedLicenseResponse',
                 boot_option: str,
                 compute_scheduling: 'outputs.ComputeSchedulingResponse',
                 disk_type: str,
                 encryption: 'outputs.EncryptionResponse',
                 hostname: str,
                 labels: Mapping[str, str],
                 license_type: str,
                 machine_type: str,
                 machine_type_series: str,
                 metadata: Mapping[str, str],
                 network_interfaces: Sequence['outputs.NetworkInterfaceResponse'],
                 network_tags: Sequence[str],
                 project: str,
                 secure_boot: bool,
                 service_account: str,
                 vm_name: str,
                 zone: str):
        """
        ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
        :param Sequence[str] additional_licenses: Additional licenses to assign to the VM.
        :param 'AppliedLicenseResponse' applied_license: The OS license returned from the adaptation module report.
        :param str boot_option: The VM Boot Option, as set in the source VM.
        :param 'ComputeSchedulingResponse' compute_scheduling: Compute instance scheduling information (if empty default is used).
        :param str disk_type: The disk type to use in the VM.
        :param 'EncryptionResponse' encryption: Optional. The encryption to apply to the VM disks.
        :param str hostname: The hostname to assign to the VM.
        :param Mapping[str, str] labels: A map of labels to associate with the VM.
        :param str license_type: The license type to use in OS adaptation.
        :param str machine_type: The machine type to create the VM with.
        :param str machine_type_series: The machine type series to create the VM with.
        :param Mapping[str, str] metadata: The metadata key/value pairs to assign to the VM.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: List of NICs connected to this VM.
        :param Sequence[str] network_tags: A list of network tags to associate with the VM.
        :param str project: The Google Cloud target project ID or project name.
        :param bool secure_boot: Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        :param str service_account: The service account to associate the VM with.
        :param str vm_name: The name of the VM to create.
        :param str zone: The zone in which to create the VM.
        """
        pulumi.set(__self__, "additional_licenses", additional_licenses)
        pulumi.set(__self__, "applied_license", applied_license)
        pulumi.set(__self__, "boot_option", boot_option)
        pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "machine_type_series", machine_type_series)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "secure_boot", secure_boot)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "vm_name", vm_name)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="additionalLicenses")
    def additional_licenses(self) -> Sequence[str]:
        """
        Additional licenses to assign to the VM.
        """
        return pulumi.get(self, "additional_licenses")

    @property
    @pulumi.getter(name="appliedLicense")
    def applied_license(self) -> 'outputs.AppliedLicenseResponse':
        """
        The OS license returned from the adaptation module report.
        """
        return pulumi.get(self, "applied_license")

    @property
    @pulumi.getter(name="bootOption")
    def boot_option(self) -> str:
        """
        The VM Boot Option, as set in the source VM.
        """
        return pulumi.get(self, "boot_option")

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> 'outputs.ComputeSchedulingResponse':
        """
        Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The disk type to use in the VM.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Optional. The encryption to apply to the VM disks.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname to assign to the VM.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type to use in OS adaptation.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> str:
        """
        The machine type series to create the VM with.
        """
        return pulumi.get(self, "machine_type_series")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.NetworkInterfaceResponse']:
        """
        List of NICs connected to this VM.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The Google Cloud target project ID or project name.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> bool:
        """
        Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The zone in which to create the VM.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ComputeSchedulingResponse(dict):
    """
    Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automaticRestart":
            suggest = "automatic_restart"
        elif key == "minNodeCpus":
            suggest = "min_node_cpus"
        elif key == "nodeAffinities":
            suggest = "node_affinities"
        elif key == "onHostMaintenance":
            suggest = "on_host_maintenance"
        elif key == "restartType":
            suggest = "restart_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeSchedulingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeSchedulingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeSchedulingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automatic_restart: bool,
                 min_node_cpus: int,
                 node_affinities: Sequence['outputs.SchedulingNodeAffinityResponse'],
                 on_host_maintenance: str,
                 restart_type: str):
        """
        Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
        :param int min_node_cpus: The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
        :param Sequence['SchedulingNodeAffinityResponse'] node_affinities: A set of node affinity and anti-affinity configurations for sole tenant nodes.
        :param str on_host_maintenance: How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
        :param str restart_type: Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
        """
        pulumi.set(__self__, "automatic_restart", automatic_restart)
        pulumi.set(__self__, "min_node_cpus", min_node_cpus)
        pulumi.set(__self__, "node_affinities", node_affinities)
        pulumi.set(__self__, "on_host_maintenance", on_host_maintenance)
        pulumi.set(__self__, "restart_type", restart_type)

    @property
    @pulumi.getter(name="automaticRestart")
    def automatic_restart(self) -> bool:
        return pulumi.get(self, "automatic_restart")

    @property
    @pulumi.getter(name="minNodeCpus")
    def min_node_cpus(self) -> int:
        """
        The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
        """
        return pulumi.get(self, "min_node_cpus")

    @property
    @pulumi.getter(name="nodeAffinities")
    def node_affinities(self) -> Sequence['outputs.SchedulingNodeAffinityResponse']:
        """
        A set of node affinity and anti-affinity configurations for sole tenant nodes.
        """
        return pulumi.get(self, "node_affinities")

    @property
    @pulumi.getter(name="onHostMaintenance")
    def on_host_maintenance(self) -> str:
        """
        How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
        """
        return pulumi.get(self, "on_host_maintenance")

    @property
    @pulumi.getter(name="restartType")
    def restart_type(self) -> str:
        """
        Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
        """
        return pulumi.get(self, "restart_type")


@pulumi.output_type
class CutoverForecastResponse(dict):
    """
    CutoverForecast holds information about future CutoverJobs of a MigratingVm.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "estimatedCutoverJobDuration":
            suggest = "estimated_cutover_job_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CutoverForecastResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CutoverForecastResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CutoverForecastResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 estimated_cutover_job_duration: str):
        """
        CutoverForecast holds information about future CutoverJobs of a MigratingVm.
        :param str estimated_cutover_job_duration: Estimation of the CutoverJob duration.
        """
        pulumi.set(__self__, "estimated_cutover_job_duration", estimated_cutover_job_duration)

    @property
    @pulumi.getter(name="estimatedCutoverJobDuration")
    def estimated_cutover_job_duration(self) -> str:
        """
        Estimation of the CutoverJob duration.
        """
        return pulumi.get(self, "estimated_cutover_job_duration")


@pulumi.output_type
class CutoverJobResponse(dict):
    """
    CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeEngineDisksTargetDetails":
            suggest = "compute_engine_disks_target_details"
        elif key == "computeEngineTargetDetails":
            suggest = "compute_engine_target_details"
        elif key == "computeEngineVmDetails":
            suggest = "compute_engine_vm_details"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "progressPercent":
            suggest = "progress_percent"
        elif key == "stateMessage":
            suggest = "state_message"
        elif key == "stateTime":
            suggest = "state_time"
        elif key == "targetDetails":
            suggest = "target_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CutoverJobResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CutoverJobResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CutoverJobResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_engine_disks_target_details: 'outputs.ComputeEngineDisksTargetDetailsResponse',
                 compute_engine_target_details: 'outputs.ComputeEngineTargetDetailsResponse',
                 compute_engine_vm_details: 'outputs.TargetVMDetailsResponse',
                 create_time: str,
                 end_time: str,
                 error: 'outputs.StatusResponse',
                 name: str,
                 progress: int,
                 progress_percent: int,
                 state: str,
                 state_message: str,
                 state_time: str,
                 steps: Sequence['outputs.CutoverStepResponse'],
                 target_details: 'outputs.TargetVMDetailsResponse'):
        """
        CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
        :param 'ComputeEngineDisksTargetDetailsResponse' compute_engine_disks_target_details: Details of the target Persistent Disks in Compute Engine.
        :param 'ComputeEngineTargetDetailsResponse' compute_engine_target_details: Details of the target VM in Compute Engine.
        :param 'TargetVMDetailsResponse' compute_engine_vm_details: Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
        :param str create_time: The time the cutover job was created (as an API call, not when it was actually created in the target).
        :param str end_time: The time the cutover job had finished.
        :param 'StatusResponse' error: Provides details for the errors that led to the Cutover Job's state.
        :param str name: The name of the cutover job.
        :param int progress: The current progress in percentage of the cutover job.
        :param int progress_percent: The current progress in percentage of the cutover job.
        :param str state: State of the cutover job.
        :param str state_message: A message providing possible extra details about the current state.
        :param str state_time: The time the state was last updated.
        :param Sequence['CutoverStepResponse'] steps: The cutover steps list representing its progress.
        :param 'TargetVMDetailsResponse' target_details: Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
        """
        pulumi.set(__self__, "compute_engine_disks_target_details", compute_engine_disks_target_details)
        pulumi.set(__self__, "compute_engine_target_details", compute_engine_target_details)
        pulumi.set(__self__, "compute_engine_vm_details", compute_engine_vm_details)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "progress_percent", progress_percent)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_message", state_message)
        pulumi.set(__self__, "state_time", state_time)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "target_details", target_details)

    @property
    @pulumi.getter(name="computeEngineDisksTargetDetails")
    def compute_engine_disks_target_details(self) -> 'outputs.ComputeEngineDisksTargetDetailsResponse':
        """
        Details of the target Persistent Disks in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_disks_target_details")

    @property
    @pulumi.getter(name="computeEngineTargetDetails")
    def compute_engine_target_details(self) -> 'outputs.ComputeEngineTargetDetailsResponse':
        """
        Details of the target VM in Compute Engine.
        """
        return pulumi.get(self, "compute_engine_target_details")

    @property
    @pulumi.getter(name="computeEngineVmDetails")
    @_utilities.deprecated("""Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.""")
    def compute_engine_vm_details(self) -> 'outputs.TargetVMDetailsResponse':
        """
        Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.
        """
        return pulumi.get(self, "compute_engine_vm_details")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time the cutover job was created (as an API call, not when it was actually created in the target).
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the cutover job had finished.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details for the errors that led to the Cutover Job's state.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cutover job.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        The current progress in percentage of the cutover job.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="progressPercent")
    def progress_percent(self) -> int:
        """
        The current progress in percentage of the cutover job.
        """
        return pulumi.get(self, "progress_percent")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the cutover job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        A message providing possible extra details about the current state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="stateTime")
    def state_time(self) -> str:
        """
        The time the state was last updated.
        """
        return pulumi.get(self, "state_time")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.CutoverStepResponse']:
        """
        The cutover steps list representing its progress.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="targetDetails")
    @_utilities.deprecated("""Output only. Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.""")
    def target_details(self) -> 'outputs.TargetVMDetailsResponse':
        """
        Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.
        """
        return pulumi.get(self, "target_details")


@pulumi.output_type
class CutoverStepResponse(dict):
    """
    CutoverStep holds information about the cutover step progress.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "finalSync":
            suggest = "final_sync"
        elif key == "instantiatingMigratedVm":
            suggest = "instantiating_migrated_vm"
        elif key == "preparingVmDisks":
            suggest = "preparing_vm_disks"
        elif key == "previousReplicationCycle":
            suggest = "previous_replication_cycle"
        elif key == "shuttingDownSourceVm":
            suggest = "shutting_down_source_vm"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CutoverStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CutoverStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CutoverStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 final_sync: 'outputs.ReplicationCycleResponse',
                 instantiating_migrated_vm: 'outputs.InstantiatingMigratedVMStepResponse',
                 preparing_vm_disks: 'outputs.PreparingVMDisksStepResponse',
                 previous_replication_cycle: 'outputs.ReplicationCycleResponse',
                 shutting_down_source_vm: 'outputs.ShuttingDownSourceVMStepResponse',
                 start_time: str):
        """
        CutoverStep holds information about the cutover step progress.
        :param str end_time: The time the step has ended.
        :param 'ReplicationCycleResponse' final_sync: Final sync step.
        :param 'InstantiatingMigratedVMStepResponse' instantiating_migrated_vm: Instantiating migrated VM step.
        :param 'PreparingVMDisksStepResponse' preparing_vm_disks: Preparing VM disks step.
        :param 'ReplicationCycleResponse' previous_replication_cycle: A replication cycle prior cutover step.
        :param 'ShuttingDownSourceVMStepResponse' shutting_down_source_vm: Shutting down VM step.
        :param str start_time: The time the step has started.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "final_sync", final_sync)
        pulumi.set(__self__, "instantiating_migrated_vm", instantiating_migrated_vm)
        pulumi.set(__self__, "preparing_vm_disks", preparing_vm_disks)
        pulumi.set(__self__, "previous_replication_cycle", previous_replication_cycle)
        pulumi.set(__self__, "shutting_down_source_vm", shutting_down_source_vm)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the step has ended.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="finalSync")
    def final_sync(self) -> 'outputs.ReplicationCycleResponse':
        """
        Final sync step.
        """
        return pulumi.get(self, "final_sync")

    @property
    @pulumi.getter(name="instantiatingMigratedVm")
    def instantiating_migrated_vm(self) -> 'outputs.InstantiatingMigratedVMStepResponse':
        """
        Instantiating migrated VM step.
        """
        return pulumi.get(self, "instantiating_migrated_vm")

    @property
    @pulumi.getter(name="preparingVmDisks")
    def preparing_vm_disks(self) -> 'outputs.PreparingVMDisksStepResponse':
        """
        Preparing VM disks step.
        """
        return pulumi.get(self, "preparing_vm_disks")

    @property
    @pulumi.getter(name="previousReplicationCycle")
    def previous_replication_cycle(self) -> 'outputs.ReplicationCycleResponse':
        """
        A replication cycle prior cutover step.
        """
        return pulumi.get(self, "previous_replication_cycle")

    @property
    @pulumi.getter(name="shuttingDownSourceVm")
    def shutting_down_source_vm(self) -> 'outputs.ShuttingDownSourceVMStepResponse':
        """
        Shutting down VM step.
        """
        return pulumi.get(self, "shutting_down_source_vm")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the step has started.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CycleStepResponse(dict):
    """
    CycleStep holds information about a step progress.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "initializingReplication":
            suggest = "initializing_replication"
        elif key == "postProcessing":
            suggest = "post_processing"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CycleStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CycleStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CycleStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 initializing_replication: 'outputs.InitializingReplicationStepResponse',
                 post_processing: 'outputs.PostProcessingStepResponse',
                 replicating: 'outputs.ReplicatingStepResponse',
                 start_time: str):
        """
        CycleStep holds information about a step progress.
        :param str end_time: The time the cycle step has ended.
        :param 'InitializingReplicationStepResponse' initializing_replication: Initializing replication step.
        :param 'PostProcessingStepResponse' post_processing: Post processing step.
        :param 'ReplicatingStepResponse' replicating: Replicating step.
        :param str start_time: The time the cycle step has started.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "initializing_replication", initializing_replication)
        pulumi.set(__self__, "post_processing", post_processing)
        pulumi.set(__self__, "replicating", replicating)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the cycle step has ended.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="initializingReplication")
    def initializing_replication(self) -> 'outputs.InitializingReplicationStepResponse':
        """
        Initializing replication step.
        """
        return pulumi.get(self, "initializing_replication")

    @property
    @pulumi.getter(name="postProcessing")
    def post_processing(self) -> 'outputs.PostProcessingStepResponse':
        """
        Post processing step.
        """
        return pulumi.get(self, "post_processing")

    @property
    @pulumi.getter
    def replicating(self) -> 'outputs.ReplicatingStepResponse':
        """
        Replicating step.
        """
        return pulumi.get(self, "replicating")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the cycle step has started.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class DiskImageDefaultsResponse(dict):
    """
    Contains details about the image source used to create the disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceImage":
            suggest = "source_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskImageDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskImageDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskImageDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_image: str):
        """
        Contains details about the image source used to create the disk.
        :param str source_image: The Image resource used when creating the disk.
        """
        pulumi.set(__self__, "source_image", source_image)

    @property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> str:
        """
        The Image resource used when creating the disk.
        """
        return pulumi.get(self, "source_image")


@pulumi.output_type
class DisksMigrationDisksTargetDefaultsResponse(dict):
    """
    Details for a disk only migration.
    """
    def __init__(__self__):
        """
        Details for a disk only migration.
        """
        pass


@pulumi.output_type
class DisksMigrationDisksTargetDetailsResponse(dict):
    """
    Details for a disks-only migration.
    """
    def __init__(__self__):
        """
        Details for a disks-only migration.
        """
        pass


@pulumi.output_type
class DisksMigrationVmTargetDefaultsResponse(dict):
    """
    Details for creation of a VM that migrated data disks will be attached to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalLicenses":
            suggest = "additional_licenses"
        elif key == "bootDiskDefaults":
            suggest = "boot_disk_defaults"
        elif key == "computeScheduling":
            suggest = "compute_scheduling"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "machineTypeSeries":
            suggest = "machine_type_series"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "secureBoot":
            suggest = "secure_boot"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "vmName":
            suggest = "vm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisksMigrationVmTargetDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisksMigrationVmTargetDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisksMigrationVmTargetDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_licenses: Sequence[str],
                 boot_disk_defaults: 'outputs.BootDiskDefaultsResponse',
                 compute_scheduling: 'outputs.ComputeSchedulingResponse',
                 encryption: 'outputs.EncryptionResponse',
                 hostname: str,
                 labels: Mapping[str, str],
                 machine_type: str,
                 machine_type_series: str,
                 metadata: Mapping[str, str],
                 network_interfaces: Sequence['outputs.NetworkInterfaceResponse'],
                 network_tags: Sequence[str],
                 secure_boot: bool,
                 service_account: str,
                 vm_name: str):
        """
        Details for creation of a VM that migrated data disks will be attached to.
        :param Sequence[str] additional_licenses: Optional. Additional licenses to assign to the VM.
        :param 'BootDiskDefaultsResponse' boot_disk_defaults: Optional. Details of the boot disk of the VM.
        :param 'ComputeSchedulingResponse' compute_scheduling: Optional. Compute instance scheduling information (if empty default is used).
        :param 'EncryptionResponse' encryption: Optional. The encryption to apply to the VM.
        :param str hostname: Optional. The hostname to assign to the VM.
        :param Mapping[str, str] labels: Optional. A map of labels to associate with the VM.
        :param str machine_type: The machine type to create the VM with.
        :param str machine_type_series: Optional. The machine type series to create the VM with. For presentation only.
        :param Mapping[str, str] metadata: Optional. The metadata key/value pairs to assign to the VM.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: Optional. NICs to attach to the VM.
        :param Sequence[str] network_tags: Optional. A list of network tags to associate with the VM.
        :param bool secure_boot: Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        :param str service_account: Optional. The service account to associate the VM with.
        :param str vm_name: The name of the VM to create.
        """
        pulumi.set(__self__, "additional_licenses", additional_licenses)
        pulumi.set(__self__, "boot_disk_defaults", boot_disk_defaults)
        pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "machine_type_series", machine_type_series)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "secure_boot", secure_boot)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "vm_name", vm_name)

    @property
    @pulumi.getter(name="additionalLicenses")
    def additional_licenses(self) -> Sequence[str]:
        """
        Optional. Additional licenses to assign to the VM.
        """
        return pulumi.get(self, "additional_licenses")

    @property
    @pulumi.getter(name="bootDiskDefaults")
    def boot_disk_defaults(self) -> 'outputs.BootDiskDefaultsResponse':
        """
        Optional. Details of the boot disk of the VM.
        """
        return pulumi.get(self, "boot_disk_defaults")

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> 'outputs.ComputeSchedulingResponse':
        """
        Optional. Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Optional. The encryption to apply to the VM.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Optional. The hostname to assign to the VM.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> str:
        """
        Optional. The machine type series to create the VM with. For presentation only.
        """
        return pulumi.get(self, "machine_type_series")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        Optional. The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.NetworkInterfaceResponse']:
        """
        Optional. NICs to attach to the VM.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        Optional. A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> bool:
        """
        Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Optional. The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "vm_name")


@pulumi.output_type
class DisksMigrationVmTargetDetailsResponse(dict):
    """
    Details for the VM created VM as part of disks migration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmUri":
            suggest = "vm_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisksMigrationVmTargetDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisksMigrationVmTargetDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisksMigrationVmTargetDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_uri: str):
        """
        Details for the VM created VM as part of disks migration.
        :param str vm_uri: The URI of the Compute Engine VM.
        """
        pulumi.set(__self__, "vm_uri", vm_uri)

    @property
    @pulumi.getter(name="vmUri")
    def vm_uri(self) -> str:
        """
        The URI of the Compute Engine VM.
        """
        return pulumi.get(self, "vm_uri")


@pulumi.output_type
class EncryptionResponse(dict):
    """
    Encryption message describes the details of the applied encryption.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key: str):
        """
        Encryption message describes the details of the applied encryption.
        :param str kms_key: The name of the encryption key that is stored in Google Cloud KMS.
        """
        pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> str:
        """
        The name of the encryption key that is stored in Google Cloud KMS.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class InitializingReplicationStepResponse(dict):
    """
    InitializingReplicationStep contains specific step details.
    """
    def __init__(__self__):
        """
        InitializingReplicationStep contains specific step details.
        """
        pass


@pulumi.output_type
class InstantiatingMigratedVMStepResponse(dict):
    """
    InstantiatingMigratedVMStep contains specific step details.
    """
    def __init__(__self__):
        """
        InstantiatingMigratedVMStep contains specific step details.
        """
        pass


@pulumi.output_type
class LinkResponse(dict):
    """
    Describes a URL link.
    """
    def __init__(__self__, *,
                 description: str,
                 url: str):
        """
        Describes a URL link.
        :param str description: Describes what the link offers.
        :param str url: The URL of the link.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Describes what the link offers.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the link.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LocalizedMessageResponse(dict):
    """
    Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
    """
    def __init__(__self__, *,
                 locale: str,
                 message: str):
        """
        Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
        :param str locale: The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"
        :param str message: The localized error message in the above locale.
        """
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The localized error message in the above locale.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class MigrationWarningResponse(dict):
    """
    Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionItem":
            suggest = "action_item"
        elif key == "helpLinks":
            suggest = "help_links"
        elif key == "warningMessage":
            suggest = "warning_message"
        elif key == "warningTime":
            suggest = "warning_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationWarningResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationWarningResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationWarningResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_item: 'outputs.LocalizedMessageResponse',
                 code: str,
                 help_links: Sequence['outputs.LinkResponse'],
                 warning_message: 'outputs.LocalizedMessageResponse',
                 warning_time: str):
        """
        Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.
        :param 'LocalizedMessageResponse' action_item: Suggested action for solving the warning.
        :param str code: The warning code.
        :param Sequence['LinkResponse'] help_links: URL(s) pointing to additional information on handling the current warning.
        :param 'LocalizedMessageResponse' warning_message: The localized warning message.
        :param str warning_time: The time the warning occurred.
        """
        pulumi.set(__self__, "action_item", action_item)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "help_links", help_links)
        pulumi.set(__self__, "warning_message", warning_message)
        pulumi.set(__self__, "warning_time", warning_time)

    @property
    @pulumi.getter(name="actionItem")
    def action_item(self) -> 'outputs.LocalizedMessageResponse':
        """
        Suggested action for solving the warning.
        """
        return pulumi.get(self, "action_item")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The warning code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="helpLinks")
    def help_links(self) -> Sequence['outputs.LinkResponse']:
        """
        URL(s) pointing to additional information on handling the current warning.
        """
        return pulumi.get(self, "help_links")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> 'outputs.LocalizedMessageResponse':
        """
        The localized warning message.
        """
        return pulumi.get(self, "warning_message")

    @property
    @pulumi.getter(name="warningTime")
    def warning_time(self) -> str:
        """
        The time the warning occurred.
        """
        return pulumi.get(self, "warning_time")


@pulumi.output_type
class NetworkInterfaceResponse(dict):
    """
    NetworkInterface represents a NIC of a VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIp":
            suggest = "external_ip"
        elif key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ip: str,
                 internal_ip: str,
                 network: str,
                 subnetwork: str):
        """
        NetworkInterface represents a NIC of a VM.
        :param str external_ip: The external IP to define in the NIC.
        :param str internal_ip: The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        :param str network: The network to connect the NIC to.
        :param str subnetwork: The subnetwork to connect the NIC to.
        """
        pulumi.set(__self__, "external_ip", external_ip)
        pulumi.set(__self__, "internal_ip", internal_ip)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> str:
        """
        The external IP to define in the NIC.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> str:
        """
        The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        """
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The network to connect the NIC to.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def subnetwork(self) -> str:
        """
        The subnetwork to connect the NIC to.
        """
        return pulumi.get(self, "subnetwork")


@pulumi.output_type
class PersistentDiskDefaultsResponse(dict):
    """
    Details for creation of a Persistent Disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalLabels":
            suggest = "additional_labels"
        elif key == "diskName":
            suggest = "disk_name"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "sourceDiskNumber":
            suggest = "source_disk_number"
        elif key == "vmAttachmentDetails":
            suggest = "vm_attachment_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentDiskDefaultsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentDiskDefaultsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentDiskDefaultsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_labels: Mapping[str, str],
                 disk_name: str,
                 disk_type: str,
                 encryption: 'outputs.EncryptionResponse',
                 source_disk_number: int,
                 vm_attachment_details: 'outputs.VmAttachmentDetailsResponse'):
        """
        Details for creation of a Persistent Disk.
        :param Mapping[str, str] additional_labels: A map of labels to associate with the Persistent Disk.
        :param str disk_name: Optional. The name of the Persistent Disk to create.
        :param str disk_type: The disk type to use.
        :param 'EncryptionResponse' encryption: Optional. The encryption to apply to the disk.
        :param int source_disk_number: The ordinal number of the source VM disk.
        :param 'VmAttachmentDetailsResponse' vm_attachment_details: Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
        """
        pulumi.set(__self__, "additional_labels", additional_labels)
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "source_disk_number", source_disk_number)
        pulumi.set(__self__, "vm_attachment_details", vm_attachment_details)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Mapping[str, str]:
        """
        A map of labels to associate with the Persistent Disk.
        """
        return pulumi.get(self, "additional_labels")

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        """
        Optional. The name of the Persistent Disk to create.
        """
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The disk type to use.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Optional. The encryption to apply to the disk.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="sourceDiskNumber")
    def source_disk_number(self) -> int:
        """
        The ordinal number of the source VM disk.
        """
        return pulumi.get(self, "source_disk_number")

    @property
    @pulumi.getter(name="vmAttachmentDetails")
    def vm_attachment_details(self) -> 'outputs.VmAttachmentDetailsResponse':
        """
        Optional. Details for attachment of the disk to a VM. Used when the disk is set to be attacked to a target VM.
        """
        return pulumi.get(self, "vm_attachment_details")


@pulumi.output_type
class PersistentDiskResponse(dict):
    """
    Details of a created Persistent Disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskUri":
            suggest = "disk_uri"
        elif key == "sourceDiskNumber":
            suggest = "source_disk_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PersistentDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PersistentDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PersistentDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_uri: str,
                 source_disk_number: int):
        """
        Details of a created Persistent Disk.
        :param str disk_uri: The URI of the Persistent Disk.
        :param int source_disk_number: The ordinal number of the source VM disk.
        """
        pulumi.set(__self__, "disk_uri", disk_uri)
        pulumi.set(__self__, "source_disk_number", source_disk_number)

    @property
    @pulumi.getter(name="diskUri")
    def disk_uri(self) -> str:
        """
        The URI of the Persistent Disk.
        """
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="sourceDiskNumber")
    def source_disk_number(self) -> int:
        """
        The ordinal number of the source VM disk.
        """
        return pulumi.get(self, "source_disk_number")


@pulumi.output_type
class PostProcessingStepResponse(dict):
    """
    PostProcessingStep contains specific step details.
    """
    def __init__(__self__):
        """
        PostProcessingStep contains specific step details.
        """
        pass


@pulumi.output_type
class PreparingVMDisksStepResponse(dict):
    """
    PreparingVMDisksStep contains specific step details.
    """
    def __init__(__self__):
        """
        PreparingVMDisksStep contains specific step details.
        """
        pass


@pulumi.output_type
class ReplicatingStepResponse(dict):
    """
    ReplicatingStep contains specific step details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastThirtyMinutesAverageBytesPerSecond":
            suggest = "last_thirty_minutes_average_bytes_per_second"
        elif key == "lastTwoMinutesAverageBytesPerSecond":
            suggest = "last_two_minutes_average_bytes_per_second"
        elif key == "replicatedBytes":
            suggest = "replicated_bytes"
        elif key == "totalBytes":
            suggest = "total_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicatingStepResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicatingStepResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicatingStepResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_thirty_minutes_average_bytes_per_second: str,
                 last_two_minutes_average_bytes_per_second: str,
                 replicated_bytes: str,
                 total_bytes: str):
        """
        ReplicatingStep contains specific step details.
        :param str last_thirty_minutes_average_bytes_per_second: The source disks replication rate for the last 30 minutes in bytes per second.
        :param str last_two_minutes_average_bytes_per_second: The source disks replication rate for the last 2 minutes in bytes per second.
        :param str replicated_bytes: Replicated bytes in the step.
        :param str total_bytes: Total bytes to be handled in the step.
        """
        pulumi.set(__self__, "last_thirty_minutes_average_bytes_per_second", last_thirty_minutes_average_bytes_per_second)
        pulumi.set(__self__, "last_two_minutes_average_bytes_per_second", last_two_minutes_average_bytes_per_second)
        pulumi.set(__self__, "replicated_bytes", replicated_bytes)
        pulumi.set(__self__, "total_bytes", total_bytes)

    @property
    @pulumi.getter(name="lastThirtyMinutesAverageBytesPerSecond")
    def last_thirty_minutes_average_bytes_per_second(self) -> str:
        """
        The source disks replication rate for the last 30 minutes in bytes per second.
        """
        return pulumi.get(self, "last_thirty_minutes_average_bytes_per_second")

    @property
    @pulumi.getter(name="lastTwoMinutesAverageBytesPerSecond")
    def last_two_minutes_average_bytes_per_second(self) -> str:
        """
        The source disks replication rate for the last 2 minutes in bytes per second.
        """
        return pulumi.get(self, "last_two_minutes_average_bytes_per_second")

    @property
    @pulumi.getter(name="replicatedBytes")
    def replicated_bytes(self) -> str:
        """
        Replicated bytes in the step.
        """
        return pulumi.get(self, "replicated_bytes")

    @property
    @pulumi.getter(name="totalBytes")
    def total_bytes(self) -> str:
        """
        Total bytes to be handled in the step.
        """
        return pulumi.get(self, "total_bytes")


@pulumi.output_type
class ReplicationCycleResponse(dict):
    """
    ReplicationCycle contains information about the current replication cycle status.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cycleNumber":
            suggest = "cycle_number"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "progressPercent":
            suggest = "progress_percent"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "totalPauseDuration":
            suggest = "total_pause_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationCycleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationCycleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationCycleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cycle_number: int,
                 end_time: str,
                 error: 'outputs.StatusResponse',
                 name: str,
                 progress: int,
                 progress_percent: int,
                 start_time: str,
                 state: str,
                 steps: Sequence['outputs.CycleStepResponse'],
                 total_pause_duration: str,
                 warnings: Sequence['outputs.MigrationWarningResponse']):
        """
        ReplicationCycle contains information about the current replication cycle status.
        :param int cycle_number: The cycle's ordinal number.
        :param str end_time: The time the replication cycle has ended.
        :param 'StatusResponse' error: Provides details on the state of the cycle in case of an error.
        :param str name: The identifier of the ReplicationCycle.
        :param int progress: The current progress in percentage of this cycle.
        :param int progress_percent: The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
        :param str start_time: The time the replication cycle has started.
        :param str state: State of the ReplicationCycle.
        :param Sequence['CycleStepResponse'] steps: The cycle's steps list representing its progress.
        :param str total_pause_duration: The accumulated duration the replication cycle was paused.
        :param Sequence['MigrationWarningResponse'] warnings: Warnings that occurred during the cycle.
        """
        pulumi.set(__self__, "cycle_number", cycle_number)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "progress_percent", progress_percent)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "steps", steps)
        pulumi.set(__self__, "total_pause_duration", total_pause_duration)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="cycleNumber")
    def cycle_number(self) -> int:
        """
        The cycle's ordinal number.
        """
        return pulumi.get(self, "cycle_number")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the replication cycle has ended.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details on the state of the cycle in case of an error.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The identifier of the ReplicationCycle.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        The current progress in percentage of this cycle.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="progressPercent")
    def progress_percent(self) -> int:
        """
        The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
        """
        return pulumi.get(self, "progress_percent")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the replication cycle has started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the ReplicationCycle.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.CycleStepResponse']:
        """
        The cycle's steps list representing its progress.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="totalPauseDuration")
    def total_pause_duration(self) -> str:
        """
        The accumulated duration the replication cycle was paused.
        """
        return pulumi.get(self, "total_pause_duration")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.MigrationWarningResponse']:
        """
        Warnings that occurred during the cycle.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class ReplicationSyncResponse(dict):
    """
    ReplicationSync contain information about the last replica sync to the cloud.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastSyncTime":
            suggest = "last_sync_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationSyncResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationSyncResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationSyncResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_sync_time: str):
        """
        ReplicationSync contain information about the last replica sync to the cloud.
        :param str last_sync_time: The most updated snapshot created time in the source that finished replication.
        """
        pulumi.set(__self__, "last_sync_time", last_sync_time)

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        """
        The most updated snapshot created time in the source that finished replication.
        """
        return pulumi.get(self, "last_sync_time")


@pulumi.output_type
class SchedulePolicyResponse(dict):
    """
    A policy for scheduling replications.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleDuration":
            suggest = "idle_duration"
        elif key == "skipOsAdaptation":
            suggest = "skip_os_adaptation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_duration: str,
                 skip_os_adaptation: bool):
        """
        A policy for scheduling replications.
        :param str idle_duration: The idle duration between replication stages.
        :param bool skip_os_adaptation: A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
        """
        pulumi.set(__self__, "idle_duration", idle_duration)
        pulumi.set(__self__, "skip_os_adaptation", skip_os_adaptation)

    @property
    @pulumi.getter(name="idleDuration")
    def idle_duration(self) -> str:
        """
        The idle duration between replication stages.
        """
        return pulumi.get(self, "idle_duration")

    @property
    @pulumi.getter(name="skipOsAdaptation")
    def skip_os_adaptation(self) -> bool:
        """
        A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
        """
        return pulumi.get(self, "skip_os_adaptation")


@pulumi.output_type
class SchedulingNodeAffinityResponse(dict):
    """
    Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        """
        Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
        :param str key: The label key of Node resource to reference.
        :param str operator: The operator to use for the node resources specified in the `values` parameter.
        :param Sequence[str] values: Corresponds to the label values of Node resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key of Node resource to reference.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator to use for the node resources specified in the `values` parameter.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Corresponds to the label values of Node resource.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ShuttingDownSourceVMStepResponse(dict):
    """
    ShuttingDownSourceVMStep contains specific step details.
    """
    def __init__(__self__):
        """
        ShuttingDownSourceVMStep contains specific step details.
        """
        pass


@pulumi.output_type
class StatusResponse(dict):
    """
    The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    """
    def __init__(__self__, *,
                 code: int,
                 details: Sequence[Mapping[str, Any]],
                 message: str):
        """
        The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
        :param int code: The status code, which should be an enum value of google.rpc.Code.
        :param Sequence[Mapping[str, Any]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param str message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence[Mapping[str, Any]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class TagResponse(dict):
    """
    Tag is an AWS tag representation.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        Tag is an AWS tag representation.
        :param str key: Key of tag.
        :param str value: Value of tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetVMDetailsResponse(dict):
    """
    TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appliedLicense":
            suggest = "applied_license"
        elif key == "bootOption":
            suggest = "boot_option"
        elif key == "computeScheduling":
            suggest = "compute_scheduling"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "externalIp":
            suggest = "external_ip"
        elif key == "internalIp":
            suggest = "internal_ip"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "machineTypeSeries":
            suggest = "machine_type_series"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "secureBoot":
            suggest = "secure_boot"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "targetProject":
            suggest = "target_project"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetVMDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetVMDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetVMDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applied_license: 'outputs.AppliedLicenseResponse',
                 boot_option: str,
                 compute_scheduling: 'outputs.ComputeSchedulingResponse',
                 disk_type: str,
                 external_ip: str,
                 internal_ip: str,
                 labels: Mapping[str, str],
                 license_type: str,
                 machine_type: str,
                 machine_type_series: str,
                 metadata: Mapping[str, str],
                 name: str,
                 network: str,
                 network_interfaces: Sequence['outputs.NetworkInterfaceResponse'],
                 network_tags: Sequence[str],
                 project: str,
                 secure_boot: bool,
                 service_account: str,
                 subnetwork: str,
                 target_project: str,
                 zone: str):
        """
        TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
        :param 'AppliedLicenseResponse' applied_license: The OS license returned from the adaptation module report.
        :param str boot_option: The VM Boot Option, as set in the source VM.
        :param 'ComputeSchedulingResponse' compute_scheduling: Compute instance scheduling information (if empty default is used).
        :param str disk_type: The disk type to use in the VM.
        :param str external_ip: The external IP to define in the VM.
        :param str internal_ip: The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        :param Mapping[str, str] labels: A map of labels to associate with the VM.
        :param str license_type: The license type to use in OS adaptation.
        :param str machine_type: The machine type to create the VM with.
        :param str machine_type_series: The machine type series to create the VM with.
        :param Mapping[str, str] metadata: The metadata key/value pairs to assign to the VM.
        :param str name: The name of the VM to create.
        :param str network: The network to connect the VM to.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: List of NICs connected to this VM.
        :param Sequence[str] network_tags: A list of network tags to associate with the VM.
        :param str project: The project in which to create the VM.
        :param bool secure_boot: Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
        :param str service_account: The service account to associate the VM with.
        :param str subnetwork: The subnetwork to connect the VM to.
        :param str target_project: The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        :param str zone: The zone in which to create the VM.
        """
        pulumi.set(__self__, "applied_license", applied_license)
        pulumi.set(__self__, "boot_option", boot_option)
        pulumi.set(__self__, "compute_scheduling", compute_scheduling)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "external_ip", external_ip)
        pulumi.set(__self__, "internal_ip", internal_ip)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "machine_type_series", machine_type_series)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "secure_boot", secure_boot)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "target_project", target_project)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appliedLicense")
    def applied_license(self) -> 'outputs.AppliedLicenseResponse':
        """
        The OS license returned from the adaptation module report.
        """
        return pulumi.get(self, "applied_license")

    @property
    @pulumi.getter(name="bootOption")
    def boot_option(self) -> str:
        """
        The VM Boot Option, as set in the source VM.
        """
        return pulumi.get(self, "boot_option")

    @property
    @pulumi.getter(name="computeScheduling")
    def compute_scheduling(self) -> 'outputs.ComputeSchedulingResponse':
        """
        Compute instance scheduling information (if empty default is used).
        """
        return pulumi.get(self, "compute_scheduling")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The disk type to use in the VM.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> str:
        """
        The external IP to define in the VM.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> str:
        """
        The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.
        """
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        A map of labels to associate with the VM.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type to use in OS adaptation.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        The machine type to create the VM with.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="machineTypeSeries")
    def machine_type_series(self) -> str:
        """
        The machine type series to create the VM with.
        """
        return pulumi.get(self, "machine_type_series")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        The metadata key/value pairs to assign to the VM.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VM to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The network to connect the VM to.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.NetworkInterfaceResponse']:
        """
        List of NICs connected to this VM.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        A list of network tags to associate with the VM.
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project in which to create the VM.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> bool:
        """
        Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
        """
        return pulumi.get(self, "secure_boot")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account to associate the VM with.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def subnetwork(self) -> str:
        """
        The subnetwork to connect the VM to.
        """
        return pulumi.get(self, "subnetwork")

    @property
    @pulumi.getter(name="targetProject")
    def target_project(self) -> str:
        """
        The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        """
        return pulumi.get(self, "target_project")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The zone in which to create the VM.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class UpgradeStatusResponse(dict):
    """
    UpgradeStatus contains information about upgradeAppliance operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "previousVersion":
            suggest = "previous_version"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpgradeStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpgradeStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpgradeStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: 'outputs.StatusResponse',
                 previous_version: str,
                 start_time: str,
                 state: str,
                 version: str):
        """
        UpgradeStatus contains information about upgradeAppliance operation.
        :param 'StatusResponse' error: Provides details on the state of the upgrade operation in case of an error.
        :param str previous_version: The version from which we upgraded.
        :param str start_time: The time the operation was started.
        :param str state: The state of the upgradeAppliance operation.
        :param str version: The version to upgrade to.
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "previous_version", previous_version)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        Provides details on the state of the upgrade operation in case of an error.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="previousVersion")
    def previous_version(self) -> str:
        """
        The version from which we upgraded.
        """
        return pulumi.get(self, "previous_version")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the operation was started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the upgradeAppliance operation.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version to upgrade to.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class VmAttachmentDetailsResponse(dict):
    """
    Details for attachment of the disk to a VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmAttachmentDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmAttachmentDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmAttachmentDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: str):
        """
        Details for attachment of the disk to a VM.
        :param str device_name: Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        """
        return pulumi.get(self, "device_name")


@pulumi.output_type
class VmCapabilitiesResponse(dict):
    """
    Migrating VM source information about the VM capabilities needed for some Compute Engine features.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastOsCapabilitiesUpdateTime":
            suggest = "last_os_capabilities_update_time"
        elif key == "osCapabilities":
            suggest = "os_capabilities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmCapabilitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmCapabilitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmCapabilitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_os_capabilities_update_time: str,
                 os_capabilities: Sequence[str]):
        """
        Migrating VM source information about the VM capabilities needed for some Compute Engine features.
        :param str last_os_capabilities_update_time: The last time OS capabilities list was updated.
        :param Sequence[str] os_capabilities: Unordered list. List of certain VM OS capabilities needed for some Compute Engine features.
        """
        pulumi.set(__self__, "last_os_capabilities_update_time", last_os_capabilities_update_time)
        pulumi.set(__self__, "os_capabilities", os_capabilities)

    @property
    @pulumi.getter(name="lastOsCapabilitiesUpdateTime")
    def last_os_capabilities_update_time(self) -> str:
        """
        The last time OS capabilities list was updated.
        """
        return pulumi.get(self, "last_os_capabilities_update_time")

    @property
    @pulumi.getter(name="osCapabilities")
    def os_capabilities(self) -> Sequence[str]:
        """
        Unordered list. List of certain VM OS capabilities needed for some Compute Engine features.
        """
        return pulumi.get(self, "os_capabilities")


@pulumi.output_type
class VmUtilizationInfoResponse(dict):
    """
    Utilization information of a single VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmId":
            suggest = "vm_id"
        elif key == "vmwareVmDetails":
            suggest = "vmware_vm_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmUtilizationInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmUtilizationInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmUtilizationInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 utilization: 'outputs.VmUtilizationMetricsResponse',
                 vm_id: str,
                 vmware_vm_details: 'outputs.VmwareVmDetailsResponse'):
        """
        Utilization information of a single VM.
        :param 'VmUtilizationMetricsResponse' utilization: Utilization metrics for this VM.
        :param str vm_id: The VM's ID in the source.
        :param 'VmwareVmDetailsResponse' vmware_vm_details: The description of the VM in a Source of type Vmware.
        """
        pulumi.set(__self__, "utilization", utilization)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vmware_vm_details", vmware_vm_details)

    @property
    @pulumi.getter
    def utilization(self) -> 'outputs.VmUtilizationMetricsResponse':
        """
        Utilization metrics for this VM.
        """
        return pulumi.get(self, "utilization")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        """
        The VM's ID in the source.
        """
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmwareVmDetails")
    def vmware_vm_details(self) -> 'outputs.VmwareVmDetailsResponse':
        """
        The description of the VM in a Source of type Vmware.
        """
        return pulumi.get(self, "vmware_vm_details")


@pulumi.output_type
class VmUtilizationMetricsResponse(dict):
    """
    Utilization metrics values for a single VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuAverage":
            suggest = "cpu_average"
        elif key == "cpuAveragePercent":
            suggest = "cpu_average_percent"
        elif key == "cpuMax":
            suggest = "cpu_max"
        elif key == "cpuMaxPercent":
            suggest = "cpu_max_percent"
        elif key == "diskIoRateAverage":
            suggest = "disk_io_rate_average"
        elif key == "diskIoRateAverageKbps":
            suggest = "disk_io_rate_average_kbps"
        elif key == "diskIoRateMax":
            suggest = "disk_io_rate_max"
        elif key == "diskIoRateMaxKbps":
            suggest = "disk_io_rate_max_kbps"
        elif key == "memoryAverage":
            suggest = "memory_average"
        elif key == "memoryAveragePercent":
            suggest = "memory_average_percent"
        elif key == "memoryMax":
            suggest = "memory_max"
        elif key == "memoryMaxPercent":
            suggest = "memory_max_percent"
        elif key == "networkThroughputAverage":
            suggest = "network_throughput_average"
        elif key == "networkThroughputAverageKbps":
            suggest = "network_throughput_average_kbps"
        elif key == "networkThroughputMax":
            suggest = "network_throughput_max"
        elif key == "networkThroughputMaxKbps":
            suggest = "network_throughput_max_kbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmUtilizationMetricsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmUtilizationMetricsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmUtilizationMetricsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_average: int,
                 cpu_average_percent: int,
                 cpu_max: int,
                 cpu_max_percent: int,
                 disk_io_rate_average: str,
                 disk_io_rate_average_kbps: str,
                 disk_io_rate_max: str,
                 disk_io_rate_max_kbps: str,
                 memory_average: int,
                 memory_average_percent: int,
                 memory_max: int,
                 memory_max_percent: int,
                 network_throughput_average: str,
                 network_throughput_average_kbps: str,
                 network_throughput_max: str,
                 network_throughput_max_kbps: str):
        """
        Utilization metrics values for a single VM.
        :param int cpu_average: Average CPU usage, percent.
        :param int cpu_average_percent: Average CPU usage, percent.
        :param int cpu_max: Max CPU usage, percent.
        :param int cpu_max_percent: Max CPU usage, percent.
        :param str disk_io_rate_average: Average disk IO rate, in kilobytes per second.
        :param str disk_io_rate_average_kbps: Average disk IO rate, in kilobytes per second.
        :param str disk_io_rate_max: Max disk IO rate, in kilobytes per second.
        :param str disk_io_rate_max_kbps: Max disk IO rate, in kilobytes per second.
        :param int memory_average: Average memory usage, percent.
        :param int memory_average_percent: Average memory usage, percent.
        :param int memory_max: Max memory usage, percent.
        :param int memory_max_percent: Max memory usage, percent.
        :param str network_throughput_average: Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param str network_throughput_average_kbps: Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param str network_throughput_max: Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        :param str network_throughput_max_kbps: Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        pulumi.set(__self__, "cpu_average", cpu_average)
        pulumi.set(__self__, "cpu_average_percent", cpu_average_percent)
        pulumi.set(__self__, "cpu_max", cpu_max)
        pulumi.set(__self__, "cpu_max_percent", cpu_max_percent)
        pulumi.set(__self__, "disk_io_rate_average", disk_io_rate_average)
        pulumi.set(__self__, "disk_io_rate_average_kbps", disk_io_rate_average_kbps)
        pulumi.set(__self__, "disk_io_rate_max", disk_io_rate_max)
        pulumi.set(__self__, "disk_io_rate_max_kbps", disk_io_rate_max_kbps)
        pulumi.set(__self__, "memory_average", memory_average)
        pulumi.set(__self__, "memory_average_percent", memory_average_percent)
        pulumi.set(__self__, "memory_max", memory_max)
        pulumi.set(__self__, "memory_max_percent", memory_max_percent)
        pulumi.set(__self__, "network_throughput_average", network_throughput_average)
        pulumi.set(__self__, "network_throughput_average_kbps", network_throughput_average_kbps)
        pulumi.set(__self__, "network_throughput_max", network_throughput_max)
        pulumi.set(__self__, "network_throughput_max_kbps", network_throughput_max_kbps)

    @property
    @pulumi.getter(name="cpuAverage")
    def cpu_average(self) -> int:
        """
        Average CPU usage, percent.
        """
        return pulumi.get(self, "cpu_average")

    @property
    @pulumi.getter(name="cpuAveragePercent")
    def cpu_average_percent(self) -> int:
        """
        Average CPU usage, percent.
        """
        return pulumi.get(self, "cpu_average_percent")

    @property
    @pulumi.getter(name="cpuMax")
    def cpu_max(self) -> int:
        """
        Max CPU usage, percent.
        """
        return pulumi.get(self, "cpu_max")

    @property
    @pulumi.getter(name="cpuMaxPercent")
    def cpu_max_percent(self) -> int:
        """
        Max CPU usage, percent.
        """
        return pulumi.get(self, "cpu_max_percent")

    @property
    @pulumi.getter(name="diskIoRateAverage")
    def disk_io_rate_average(self) -> str:
        """
        Average disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_average")

    @property
    @pulumi.getter(name="diskIoRateAverageKbps")
    def disk_io_rate_average_kbps(self) -> str:
        """
        Average disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_average_kbps")

    @property
    @pulumi.getter(name="diskIoRateMax")
    def disk_io_rate_max(self) -> str:
        """
        Max disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_max")

    @property
    @pulumi.getter(name="diskIoRateMaxKbps")
    def disk_io_rate_max_kbps(self) -> str:
        """
        Max disk IO rate, in kilobytes per second.
        """
        return pulumi.get(self, "disk_io_rate_max_kbps")

    @property
    @pulumi.getter(name="memoryAverage")
    def memory_average(self) -> int:
        """
        Average memory usage, percent.
        """
        return pulumi.get(self, "memory_average")

    @property
    @pulumi.getter(name="memoryAveragePercent")
    def memory_average_percent(self) -> int:
        """
        Average memory usage, percent.
        """
        return pulumi.get(self, "memory_average_percent")

    @property
    @pulumi.getter(name="memoryMax")
    def memory_max(self) -> int:
        """
        Max memory usage, percent.
        """
        return pulumi.get(self, "memory_max")

    @property
    @pulumi.getter(name="memoryMaxPercent")
    def memory_max_percent(self) -> int:
        """
        Max memory usage, percent.
        """
        return pulumi.get(self, "memory_max_percent")

    @property
    @pulumi.getter(name="networkThroughputAverage")
    def network_throughput_average(self) -> str:
        """
        Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_average")

    @property
    @pulumi.getter(name="networkThroughputAverageKbps")
    def network_throughput_average_kbps(self) -> str:
        """
        Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_average_kbps")

    @property
    @pulumi.getter(name="networkThroughputMax")
    def network_throughput_max(self) -> str:
        """
        Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_max")

    @property
    @pulumi.getter(name="networkThroughputMaxKbps")
    def network_throughput_max_kbps(self) -> str:
        """
        Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
        """
        return pulumi.get(self, "network_throughput_max_kbps")


@pulumi.output_type
class VmwareDiskDetailsResponse(dict):
    """
    The details of a Vmware VM disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskNumber":
            suggest = "disk_number"
        elif key == "sizeGb":
            suggest = "size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareDiskDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareDiskDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareDiskDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_number: int,
                 label: str,
                 size_gb: str):
        """
        The details of a Vmware VM disk.
        :param int disk_number: The ordinal number of the disk.
        :param str label: The disk label.
        :param str size_gb: Size in GB.
        """
        pulumi.set(__self__, "disk_number", disk_number)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size_gb", size_gb)

    @property
    @pulumi.getter(name="diskNumber")
    def disk_number(self) -> int:
        """
        The ordinal number of the disk.
        """
        return pulumi.get(self, "disk_number")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The disk label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> str:
        """
        Size in GB.
        """
        return pulumi.get(self, "size_gb")


@pulumi.output_type
class VmwareSourceDetailsResponse(dict):
    """
    VmwareSourceDetails message describes a specific source details for the vmware source type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolvedVcenterHost":
            suggest = "resolved_vcenter_host"
        elif key == "vcenterIp":
            suggest = "vcenter_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareSourceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareSourceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareSourceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 resolved_vcenter_host: str,
                 thumbprint: str,
                 username: str,
                 vcenter_ip: str):
        """
        VmwareSourceDetails message describes a specific source details for the vmware source type.
        :param str password: Input only. The credentials password. This is write only and can not be read in a GET operation.
        :param str resolved_vcenter_host: The hostname of the vcenter.
        :param str thumbprint: The thumbprint representing the certificate for the vcenter.
        :param str username: The credentials username.
        :param str vcenter_ip: The ip address of the vcenter this Source represents.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "resolved_vcenter_host", resolved_vcenter_host)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "vcenter_ip", vcenter_ip)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. The credentials password. This is write only and can not be read in a GET operation.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="resolvedVcenterHost")
    def resolved_vcenter_host(self) -> str:
        """
        The hostname of the vcenter.
        """
        return pulumi.get(self, "resolved_vcenter_host")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint representing the certificate for the vcenter.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The credentials username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vcenterIp")
    def vcenter_ip(self) -> str:
        """
        The ip address of the vcenter this Source represents.
        """
        return pulumi.get(self, "vcenter_ip")


@pulumi.output_type
class VmwareSourceVmDetailsResponse(dict):
    """
    Represent the source Vmware VM details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "committedStorageBytes":
            suggest = "committed_storage_bytes"
        elif key == "vmCapabilitiesInfo":
            suggest = "vm_capabilities_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareSourceVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareSourceVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareSourceVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 committed_storage_bytes: str,
                 disks: Sequence['outputs.VmwareDiskDetailsResponse'],
                 firmware: str,
                 vm_capabilities_info: 'outputs.VmCapabilitiesResponse'):
        """
        Represent the source Vmware VM details.
        :param str committed_storage_bytes: The total size of the disks being migrated in bytes.
        :param Sequence['VmwareDiskDetailsResponse'] disks: The disks attached to the source VM.
        :param str firmware: The firmware type of the source VM.
        :param 'VmCapabilitiesResponse' vm_capabilities_info: Information about VM capabilities needed for some Compute Engine features.
        """
        pulumi.set(__self__, "committed_storage_bytes", committed_storage_bytes)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "vm_capabilities_info", vm_capabilities_info)

    @property
    @pulumi.getter(name="committedStorageBytes")
    def committed_storage_bytes(self) -> str:
        """
        The total size of the disks being migrated in bytes.
        """
        return pulumi.get(self, "committed_storage_bytes")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.VmwareDiskDetailsResponse']:
        """
        The disks attached to the source VM.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        The firmware type of the source VM.
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="vmCapabilitiesInfo")
    def vm_capabilities_info(self) -> 'outputs.VmCapabilitiesResponse':
        """
        Information about VM capabilities needed for some Compute Engine features.
        """
        return pulumi.get(self, "vm_capabilities_info")


@pulumi.output_type
class VmwareVmDetailsResponse(dict):
    """
    VmwareVmDetails describes a VM in vCenter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootOption":
            suggest = "boot_option"
        elif key == "committedStorage":
            suggest = "committed_storage"
        elif key == "committedStorageMb":
            suggest = "committed_storage_mb"
        elif key == "cpuCount":
            suggest = "cpu_count"
        elif key == "datacenterDescription":
            suggest = "datacenter_description"
        elif key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "diskCount":
            suggest = "disk_count"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "guestDescription":
            suggest = "guest_description"
        elif key == "memoryMb":
            suggest = "memory_mb"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "vmId":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareVmDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareVmDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareVmDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_option: str,
                 committed_storage: str,
                 committed_storage_mb: str,
                 cpu_count: int,
                 datacenter_description: str,
                 datacenter_id: str,
                 disk_count: int,
                 display_name: str,
                 guest_description: str,
                 memory_mb: int,
                 power_state: str,
                 uuid: str,
                 vm_id: str):
        """
        VmwareVmDetails describes a VM in vCenter.
        :param str boot_option: The VM Boot Option.
        :param str committed_storage: The total size of the storage allocated to the VM in MB.
        :param str committed_storage_mb: The total size of the storage allocated to the VM in MB.
        :param int cpu_count: The number of cpus in the VM.
        :param str datacenter_description: The descriptive name of the vCenter's datacenter this VM is contained in.
        :param str datacenter_id: The id of the vCenter's datacenter this VM is contained in.
        :param int disk_count: The number of disks the VM has.
        :param str display_name: The display name of the VM. Note that this is not necessarily unique.
        :param str guest_description: The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
        :param int memory_mb: The size of the memory of the VM in MB.
        :param str power_state: The power state of the VM at the moment list was taken.
        :param str uuid: The unique identifier of the VM in vCenter.
        :param str vm_id: The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
        """
        pulumi.set(__self__, "boot_option", boot_option)
        pulumi.set(__self__, "committed_storage", committed_storage)
        pulumi.set(__self__, "committed_storage_mb", committed_storage_mb)
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "datacenter_description", datacenter_description)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "guest_description", guest_description)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "power_state", power_state)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="bootOption")
    def boot_option(self) -> str:
        """
        The VM Boot Option.
        """
        return pulumi.get(self, "boot_option")

    @property
    @pulumi.getter(name="committedStorage")
    def committed_storage(self) -> str:
        """
        The total size of the storage allocated to the VM in MB.
        """
        return pulumi.get(self, "committed_storage")

    @property
    @pulumi.getter(name="committedStorageMb")
    def committed_storage_mb(self) -> str:
        """
        The total size of the storage allocated to the VM in MB.
        """
        return pulumi.get(self, "committed_storage_mb")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> int:
        """
        The number of cpus in the VM.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="datacenterDescription")
    def datacenter_description(self) -> str:
        """
        The descriptive name of the vCenter's datacenter this VM is contained in.
        """
        return pulumi.get(self, "datacenter_description")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The id of the vCenter's datacenter this VM is contained in.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> int:
        """
        The number of disks the VM has.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the VM. Note that this is not necessarily unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="guestDescription")
    def guest_description(self) -> str:
        """
        The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
        """
        return pulumi.get(self, "guest_description")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> int:
        """
        The size of the memory of the VM in MB.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> str:
        """
        The power state of the VM at the moment list was taken.
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        The unique identifier of the VM in vCenter.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        """
        The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
        """
        return pulumi.get(self, "vm_id")


