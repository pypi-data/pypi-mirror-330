# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs', 'OrganizationSecurityHealthAnalyticsSettingCustomModule']

@pulumi.input_type
class OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[str],
                 custom_config: Optional[pulumi.Input['GoogleCloudSecuritycenterV1CustomConfigArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrganizationSecurityHealthAnalyticsSettingCustomModule resource.
        :param pulumi.Input['GoogleCloudSecuritycenterV1CustomConfigArgs'] custom_config: The user specified custom configuration for the module.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.
        :param pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState'] enablement_state: The enablement state of the custom module.
        :param pulumi.Input[str] name: Immutable. The resource name of the custom module. Its format is "organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}", or "folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}", or "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
        """
        pulumi.set(__self__, "organization_id", organization_id)
        if custom_config is not None:
            pulumi.set(__self__, "custom_config", custom_config)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enablement_state is not None:
            pulumi.set(__self__, "enablement_state", enablement_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input['GoogleCloudSecuritycenterV1CustomConfigArgs']]:
        """
        The user specified custom configuration for the module.
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input['GoogleCloudSecuritycenterV1CustomConfigArgs']]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> Optional[pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState']]:
        """
        The enablement state of the custom module.
        """
        return pulumi.get(self, "enablement_state")

    @enablement_state.setter
    def enablement_state(self, value: Optional[pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState']]):
        pulumi.set(self, "enablement_state", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The resource name of the custom module. Its format is "organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}", or "folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}", or "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class OrganizationSecurityHealthAnalyticsSettingCustomModule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudSecuritycenterV1CustomConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GoogleCloudSecuritycenterV1CustomConfigArgs']] custom_config: The user specified custom configuration for the module.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.
        :param pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState'] enablement_state: The enablement state of the custom module.
        :param pulumi.Input[str] name: Immutable. The resource name of the custom module. Its format is "organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}", or "folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}", or "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudSecuritycenterV1CustomConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input['OrganizationSecurityHealthAnalyticsSettingCustomModuleEnablementState']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs.__new__(OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs)

            __props__.__dict__["custom_config"] = custom_config
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["enablement_state"] = enablement_state
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["ancestor_module"] = None
            __props__.__dict__["last_editor"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["organizationId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(OrganizationSecurityHealthAnalyticsSettingCustomModule, __self__).__init__(
            'google-native:securitycenter/v1:OrganizationSecurityHealthAnalyticsSettingCustomModule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OrganizationSecurityHealthAnalyticsSettingCustomModule':
        """
        Get an existing OrganizationSecurityHealthAnalyticsSettingCustomModule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs.__new__(OrganizationSecurityHealthAnalyticsSettingCustomModuleArgs)

        __props__.__dict__["ancestor_module"] = None
        __props__.__dict__["custom_config"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["enablement_state"] = None
        __props__.__dict__["last_editor"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["organization_id"] = None
        __props__.__dict__["update_time"] = None
        return OrganizationSecurityHealthAnalyticsSettingCustomModule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ancestorModule")
    def ancestor_module(self) -> pulumi.Output[str]:
        """
        If empty, indicates that the custom module was created in the organization, folder, or project in which you are viewing the custom module. Otherwise, `ancestor_module` specifies the organization or folder from which the custom module is inherited.
        """
        return pulumi.get(self, "ancestor_module")

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> pulumi.Output['outputs.GoogleCloudSecuritycenterV1CustomConfigResponse']:
        """
        The user specified custom configuration for the module.
        """
        return pulumi.get(self, "custom_config")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> pulumi.Output[str]:
        """
        The enablement state of the custom module.
        """
        return pulumi.get(self, "enablement_state")

    @property
    @pulumi.getter(name="lastEditor")
    def last_editor(self) -> pulumi.Output[str]:
        """
        The editor that last updated the custom module.
        """
        return pulumi.get(self, "last_editor")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. The resource name of the custom module. Its format is "organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}", or "folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}", or "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time at which the custom module was last updated.
        """
        return pulumi.get(self, "update_time")

