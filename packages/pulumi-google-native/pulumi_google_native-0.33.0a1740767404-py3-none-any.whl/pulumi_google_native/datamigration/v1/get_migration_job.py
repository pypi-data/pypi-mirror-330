# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetMigrationJobResult',
    'AwaitableGetMigrationJobResult',
    'get_migration_job',
    'get_migration_job_output',
]

@pulumi.output_type
class GetMigrationJobResult:
    def __init__(__self__, cmek_key_name=None, conversion_workspace=None, create_time=None, destination=None, destination_database=None, display_name=None, dump_flags=None, dump_path=None, duration=None, end_time=None, error=None, filter=None, labels=None, name=None, performance_config=None, phase=None, reverse_ssh_connectivity=None, source=None, source_database=None, state=None, static_ip_connectivity=None, type=None, update_time=None, vpc_peering_connectivity=None):
        if cmek_key_name and not isinstance(cmek_key_name, str):
            raise TypeError("Expected argument 'cmek_key_name' to be a str")
        pulumi.set(__self__, "cmek_key_name", cmek_key_name)
        if conversion_workspace and not isinstance(conversion_workspace, dict):
            raise TypeError("Expected argument 'conversion_workspace' to be a dict")
        pulumi.set(__self__, "conversion_workspace", conversion_workspace)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if destination_database and not isinstance(destination_database, dict):
            raise TypeError("Expected argument 'destination_database' to be a dict")
        pulumi.set(__self__, "destination_database", destination_database)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if dump_flags and not isinstance(dump_flags, dict):
            raise TypeError("Expected argument 'dump_flags' to be a dict")
        pulumi.set(__self__, "dump_flags", dump_flags)
        if dump_path and not isinstance(dump_path, str):
            raise TypeError("Expected argument 'dump_path' to be a str")
        pulumi.set(__self__, "dump_path", dump_path)
        if duration and not isinstance(duration, str):
            raise TypeError("Expected argument 'duration' to be a str")
        pulumi.set(__self__, "duration", duration)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if performance_config and not isinstance(performance_config, dict):
            raise TypeError("Expected argument 'performance_config' to be a dict")
        pulumi.set(__self__, "performance_config", performance_config)
        if phase and not isinstance(phase, str):
            raise TypeError("Expected argument 'phase' to be a str")
        pulumi.set(__self__, "phase", phase)
        if reverse_ssh_connectivity and not isinstance(reverse_ssh_connectivity, dict):
            raise TypeError("Expected argument 'reverse_ssh_connectivity' to be a dict")
        pulumi.set(__self__, "reverse_ssh_connectivity", reverse_ssh_connectivity)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if source_database and not isinstance(source_database, dict):
            raise TypeError("Expected argument 'source_database' to be a dict")
        pulumi.set(__self__, "source_database", source_database)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if static_ip_connectivity and not isinstance(static_ip_connectivity, dict):
            raise TypeError("Expected argument 'static_ip_connectivity' to be a dict")
        pulumi.set(__self__, "static_ip_connectivity", static_ip_connectivity)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vpc_peering_connectivity and not isinstance(vpc_peering_connectivity, dict):
            raise TypeError("Expected argument 'vpc_peering_connectivity' to be a dict")
        pulumi.set(__self__, "vpc_peering_connectivity", vpc_peering_connectivity)

    @property
    @pulumi.getter(name="cmekKeyName")
    def cmek_key_name(self) -> str:
        """
        The CMEK (customer-managed encryption key) fully qualified key name used for the migration job. This field supports all migration jobs types except for: * Mysql to Mysql (use the cmek field in the cloudsql connection profile instead). * PostrgeSQL to PostgreSQL (use the cmek field in the cloudsql connection profile instead). * PostgreSQL to AlloyDB (use the kms_key_name field in the alloydb connection profile instead). Each Cloud CMEK key has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
        """
        return pulumi.get(self, "cmek_key_name")

    @property
    @pulumi.getter(name="conversionWorkspace")
    def conversion_workspace(self) -> 'outputs.ConversionWorkspaceInfoResponse':
        """
        The conversion workspace used by the migration.
        """
        return pulumi.get(self, "conversion_workspace")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The resource name (URI) of the destination connection profile.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationDatabase")
    def destination_database(self) -> 'outputs.DatabaseTypeResponse':
        """
        The database engine type and provider of the destination.
        """
        return pulumi.get(self, "destination_database")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The migration job display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dumpFlags")
    def dump_flags(self) -> 'outputs.DumpFlagsResponse':
        """
        The initial dump flags. This field and the "dump_path" field are mutually exclusive.
        """
        return pulumi.get(self, "dump_flags")

    @property
    @pulumi.getter(name="dumpPath")
    def dump_path(self) -> str:
        """
        The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the "dump_flags" field are mutually exclusive.
        """
        return pulumi.get(self, "dump_path")

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        If the migration job is completed, the time when it was completed.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.StatusResponse':
        """
        The error details in case of state FAILED.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        This field can be used to select the entities to migrate as part of the migration job. It uses AIP-160 notation to select a subset of the entities configured on the associated conversion-workspace. This field should not be set on migration-jobs that are not associated with a conversion workspace.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="performanceConfig")
    def performance_config(self) -> 'outputs.PerformanceConfigResponse':
        """
        Optional. Data dump parallelism settings used by the migration. Currently applicable only for MySQL to Cloud SQL for MySQL migrations only.
        """
        return pulumi.get(self, "performance_config")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The current migration job phase.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="reverseSshConnectivity")
    def reverse_ssh_connectivity(self) -> 'outputs.ReverseSshConnectivityResponse':
        """
        The details needed to communicate to the source over Reverse SSH tunnel connectivity.
        """
        return pulumi.get(self, "reverse_ssh_connectivity")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The resource name (URI) of the source connection profile.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceDatabase")
    def source_database(self) -> 'outputs.DatabaseTypeResponse':
        """
        The database engine type and provider of the source.
        """
        return pulumi.get(self, "source_database")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current migration job state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="staticIpConnectivity")
    def static_ip_connectivity(self) -> 'outputs.StaticIpConnectivityResponse':
        """
        static ip connectivity data (default, no additional details needed).
        """
        return pulumi.get(self, "static_ip_connectivity")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The migration job type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcPeeringConnectivity")
    def vpc_peering_connectivity(self) -> 'outputs.VpcPeeringConnectivityResponse':
        """
        The details of the VPC network that the source database is located in.
        """
        return pulumi.get(self, "vpc_peering_connectivity")


class AwaitableGetMigrationJobResult(GetMigrationJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrationJobResult(
            cmek_key_name=self.cmek_key_name,
            conversion_workspace=self.conversion_workspace,
            create_time=self.create_time,
            destination=self.destination,
            destination_database=self.destination_database,
            display_name=self.display_name,
            dump_flags=self.dump_flags,
            dump_path=self.dump_path,
            duration=self.duration,
            end_time=self.end_time,
            error=self.error,
            filter=self.filter,
            labels=self.labels,
            name=self.name,
            performance_config=self.performance_config,
            phase=self.phase,
            reverse_ssh_connectivity=self.reverse_ssh_connectivity,
            source=self.source,
            source_database=self.source_database,
            state=self.state,
            static_ip_connectivity=self.static_ip_connectivity,
            type=self.type,
            update_time=self.update_time,
            vpc_peering_connectivity=self.vpc_peering_connectivity)


def get_migration_job(location: Optional[str] = None,
                      migration_job_id: Optional[str] = None,
                      project: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrationJobResult:
    """
    Gets details of a single migration job.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['migrationJobId'] = migration_job_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:datamigration/v1:getMigrationJob', __args__, opts=opts, typ=GetMigrationJobResult).value

    return AwaitableGetMigrationJobResult(
        cmek_key_name=pulumi.get(__ret__, 'cmek_key_name'),
        conversion_workspace=pulumi.get(__ret__, 'conversion_workspace'),
        create_time=pulumi.get(__ret__, 'create_time'),
        destination=pulumi.get(__ret__, 'destination'),
        destination_database=pulumi.get(__ret__, 'destination_database'),
        display_name=pulumi.get(__ret__, 'display_name'),
        dump_flags=pulumi.get(__ret__, 'dump_flags'),
        dump_path=pulumi.get(__ret__, 'dump_path'),
        duration=pulumi.get(__ret__, 'duration'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        filter=pulumi.get(__ret__, 'filter'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        performance_config=pulumi.get(__ret__, 'performance_config'),
        phase=pulumi.get(__ret__, 'phase'),
        reverse_ssh_connectivity=pulumi.get(__ret__, 'reverse_ssh_connectivity'),
        source=pulumi.get(__ret__, 'source'),
        source_database=pulumi.get(__ret__, 'source_database'),
        state=pulumi.get(__ret__, 'state'),
        static_ip_connectivity=pulumi.get(__ret__, 'static_ip_connectivity'),
        type=pulumi.get(__ret__, 'type'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vpc_peering_connectivity=pulumi.get(__ret__, 'vpc_peering_connectivity'))


@_utilities.lift_output_func(get_migration_job)
def get_migration_job_output(location: Optional[pulumi.Input[str]] = None,
                             migration_job_id: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMigrationJobResult]:
    """
    Gets details of a single migration job.
    """
    ...
