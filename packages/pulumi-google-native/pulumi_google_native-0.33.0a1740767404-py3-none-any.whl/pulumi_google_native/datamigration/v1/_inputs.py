# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AlloyDbConnectionProfileArgs',
    'AlloyDbSettingsArgs',
    'ApplyHashArgs',
    'AssignSpecificValueArgs',
    'AuditConfigArgs',
    'AuditLogConfigArgs',
    'BindingArgs',
    'CloudSqlConnectionProfileArgs',
    'CloudSqlSettingsArgs',
    'ConditionalColumnSetValueArgs',
    'ConversionWorkspaceInfoArgs',
    'ConvertRowIdToColumnArgs',
    'DataCacheConfigArgs',
    'DatabaseEngineInfoArgs',
    'DatabaseTypeArgs',
    'DoubleComparisonFilterArgs',
    'DumpFlagsArgs',
    'DumpFlagArgs',
    'EmptyArgs',
    'EncryptionConfigArgs',
    'EntityMoveArgs',
    'ExprArgs',
    'FilterTableColumnsArgs',
    'ForwardSshTunnelConnectivityArgs',
    'IntComparisonFilterArgs',
    'MachineConfigArgs',
    'MappingRuleFilterArgs',
    'MultiColumnDatatypeChangeArgs',
    'MultiEntityRenameArgs',
    'MySqlConnectionProfileArgs',
    'OracleConnectionProfileArgs',
    'PerformanceConfigArgs',
    'PostgreSqlConnectionProfileArgs',
    'PrimaryInstanceSettingsArgs',
    'PrivateConnectivityArgs',
    'PrivateServiceConnectConnectivityArgs',
    'ReverseSshConnectivityArgs',
    'RoundToScaleArgs',
    'SetTablePrimaryKeyArgs',
    'SingleColumnChangeArgs',
    'SingleEntityRenameArgs',
    'SinglePackageChangeArgs',
    'SourceNumericFilterArgs',
    'SourceSqlChangeArgs',
    'SourceTextFilterArgs',
    'SqlAclEntryArgs',
    'SqlIpConfigArgs',
    'SslConfigArgs',
    'StaticIpConnectivityArgs',
    'StaticServiceIpConnectivityArgs',
    'UserPasswordArgs',
    'ValueListFilterArgs',
    'ValueTransformationArgs',
    'VpcPeeringConfigArgs',
    'VpcPeeringConnectivityArgs',
]

@pulumi.input_type
class AlloyDbConnectionProfileArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 settings: Optional[pulumi.Input['AlloyDbSettingsArgs']] = None):
        """
        Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
        :param pulumi.Input[str] cluster_id: The AlloyDB cluster ID that this connection profile is associated with.
        :param pulumi.Input['AlloyDbSettingsArgs'] settings: Immutable. Metadata used to create the destination AlloyDB cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The AlloyDB cluster ID that this connection profile is associated with.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['AlloyDbSettingsArgs']]:
        """
        Immutable. Metadata used to create the destination AlloyDB cluster.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['AlloyDbSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class AlloyDbSettingsArgs:
    def __init__(__self__, *,
                 initial_user: pulumi.Input['UserPasswordArgs'],
                 vpc_network: pulumi.Input[str],
                 database_version: Optional[pulumi.Input['AlloyDbSettingsDatabaseVersion']] = None,
                 encryption_config: Optional[pulumi.Input['EncryptionConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 primary_instance_settings: Optional[pulumi.Input['PrimaryInstanceSettingsArgs']] = None):
        """
        Settings for creating an AlloyDB cluster.
        :param pulumi.Input['UserPasswordArgs'] initial_user: Input only. Initial user to setup during cluster creation. Required.
        :param pulumi.Input[str] vpc_network: The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
        :param pulumi.Input['AlloyDbSettingsDatabaseVersion'] database_version: Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
        :param pulumi.Input['EncryptionConfigArgs'] encryption_config: Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
        """
        pulumi.set(__self__, "initial_user", initial_user)
        pulumi.set(__self__, "vpc_network", vpc_network)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if primary_instance_settings is not None:
            pulumi.set(__self__, "primary_instance_settings", primary_instance_settings)

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> pulumi.Input['UserPasswordArgs']:
        """
        Input only. Initial user to setup during cluster creation. Required.
        """
        return pulumi.get(self, "initial_user")

    @initial_user.setter
    def initial_user(self, value: pulumi.Input['UserPasswordArgs']):
        pulumi.set(self, "initial_user", value)

    @property
    @pulumi.getter(name="vpcNetwork")
    def vpc_network(self) -> pulumi.Input[str]:
        """
        The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
        """
        return pulumi.get(self, "vpc_network")

    @vpc_network.setter
    def vpc_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_network", value)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[pulumi.Input['AlloyDbSettingsDatabaseVersion']]:
        """
        Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
        """
        return pulumi.get(self, "database_version")

    @database_version.setter
    def database_version(self, value: Optional[pulumi.Input['AlloyDbSettingsDatabaseVersion']]):
        pulumi.set(self, "database_version", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['EncryptionConfigArgs']]:
        """
        Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['EncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="primaryInstanceSettings")
    def primary_instance_settings(self) -> Optional[pulumi.Input['PrimaryInstanceSettingsArgs']]:
        return pulumi.get(self, "primary_instance_settings")

    @primary_instance_settings.setter
    def primary_instance_settings(self, value: Optional[pulumi.Input['PrimaryInstanceSettingsArgs']]):
        pulumi.set(self, "primary_instance_settings", value)


@pulumi.input_type
class ApplyHashArgs:
    def __init__(__self__, *,
                 uuid_from_bytes: Optional[pulumi.Input['EmptyArgs']] = None):
        """
        Apply a hash function on the value.
        :param pulumi.Input['EmptyArgs'] uuid_from_bytes: Optional. Generate UUID from the data's byte array
        """
        if uuid_from_bytes is not None:
            pulumi.set(__self__, "uuid_from_bytes", uuid_from_bytes)

    @property
    @pulumi.getter(name="uuidFromBytes")
    def uuid_from_bytes(self) -> Optional[pulumi.Input['EmptyArgs']]:
        """
        Optional. Generate UUID from the data's byte array
        """
        return pulumi.get(self, "uuid_from_bytes")

    @uuid_from_bytes.setter
    def uuid_from_bytes(self, value: Optional[pulumi.Input['EmptyArgs']]):
        pulumi.set(self, "uuid_from_bytes", value)


@pulumi.input_type
class AssignSpecificValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        Set to a specific value (value is converted to fit the target data type)
        :param pulumi.Input[str] value: Specific value to be assigned
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Specific value to be assigned
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input['AuditLogConfigLogType']] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input['AuditLogConfigLogType'] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input['AuditLogConfigLogType']]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input['AuditLogConfigLogType']]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class CloudSqlConnectionProfileArgs:
    def __init__(__self__, *,
                 settings: Optional[pulumi.Input['CloudSqlSettingsArgs']] = None):
        """
        Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
        :param pulumi.Input['CloudSqlSettingsArgs'] settings: Immutable. Metadata used to create the destination Cloud SQL database.
        """
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['CloudSqlSettingsArgs']]:
        """
        Immutable. Metadata used to create the destination Cloud SQL database.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['CloudSqlSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class CloudSqlSettingsArgs:
    def __init__(__self__, *,
                 activation_policy: Optional[pulumi.Input['CloudSqlSettingsActivationPolicy']] = None,
                 auto_storage_increase: Optional[pulumi.Input[bool]] = None,
                 availability_type: Optional[pulumi.Input['CloudSqlSettingsAvailabilityType']] = None,
                 cmek_key_name: Optional[pulumi.Input[str]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 data_cache_config: Optional[pulumi.Input['DataCacheConfigArgs']] = None,
                 data_disk_size_gb: Optional[pulumi.Input[str]] = None,
                 data_disk_type: Optional[pulumi.Input['CloudSqlSettingsDataDiskType']] = None,
                 database_flags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_version: Optional[pulumi.Input['CloudSqlSettingsDatabaseVersion']] = None,
                 edition: Optional[pulumi.Input['CloudSqlSettingsEdition']] = None,
                 ip_config: Optional[pulumi.Input['SqlIpConfigArgs']] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 secondary_zone: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 storage_auto_resize_limit: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Settings for creating a Cloud SQL database instance.
        :param pulumi.Input['CloudSqlSettingsActivationPolicy'] activation_policy: The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
        :param pulumi.Input[bool] auto_storage_increase: [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
        :param pulumi.Input['CloudSqlSettingsAvailabilityType'] availability_type: Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
        :param pulumi.Input[str] cmek_key_name: The KMS key name used for the csql instance.
        :param pulumi.Input[str] collation: The Cloud SQL default instance level collation.
        :param pulumi.Input['DataCacheConfigArgs'] data_cache_config: Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        :param pulumi.Input[str] data_disk_size_gb: The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
        :param pulumi.Input['CloudSqlSettingsDataDiskType'] data_disk_type: The type of storage: `PD_SSD` (default) or `PD_HDD`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_flags: The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        :param pulumi.Input['CloudSqlSettingsDatabaseVersion'] database_version: The database engine type and version.
        :param pulumi.Input['CloudSqlSettingsEdition'] edition: Optional. The edition of the given Cloud SQL instance.
        :param pulumi.Input['SqlIpConfigArgs'] ip_config: The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
        :param pulumi.Input[str] root_password: Input only. Initial root password.
        :param pulumi.Input[str] secondary_zone: Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        :param pulumi.Input[str] source_id: The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
        :param pulumi.Input[str] storage_auto_resize_limit: The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        :param pulumi.Input[str] tier: The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_labels: The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
        :param pulumi.Input[str] zone: The Google Cloud Platform zone where your Cloud SQL database instance is located.
        """
        if activation_policy is not None:
            pulumi.set(__self__, "activation_policy", activation_policy)
        if auto_storage_increase is not None:
            pulumi.set(__self__, "auto_storage_increase", auto_storage_increase)
        if availability_type is not None:
            pulumi.set(__self__, "availability_type", availability_type)
        if cmek_key_name is not None:
            pulumi.set(__self__, "cmek_key_name", cmek_key_name)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if data_cache_config is not None:
            pulumi.set(__self__, "data_cache_config", data_cache_config)
        if data_disk_size_gb is not None:
            pulumi.set(__self__, "data_disk_size_gb", data_disk_size_gb)
        if data_disk_type is not None:
            pulumi.set(__self__, "data_disk_type", data_disk_type)
        if database_flags is not None:
            pulumi.set(__self__, "database_flags", database_flags)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if secondary_zone is not None:
            pulumi.set(__self__, "secondary_zone", secondary_zone)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if storage_auto_resize_limit is not None:
            pulumi.set(__self__, "storage_auto_resize_limit", storage_auto_resize_limit)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if user_labels is not None:
            pulumi.set(__self__, "user_labels", user_labels)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="activationPolicy")
    def activation_policy(self) -> Optional[pulumi.Input['CloudSqlSettingsActivationPolicy']]:
        """
        The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
        """
        return pulumi.get(self, "activation_policy")

    @activation_policy.setter
    def activation_policy(self, value: Optional[pulumi.Input['CloudSqlSettingsActivationPolicy']]):
        pulumi.set(self, "activation_policy", value)

    @property
    @pulumi.getter(name="autoStorageIncrease")
    def auto_storage_increase(self) -> Optional[pulumi.Input[bool]]:
        """
        [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
        """
        return pulumi.get(self, "auto_storage_increase")

    @auto_storage_increase.setter
    def auto_storage_increase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_storage_increase", value)

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> Optional[pulumi.Input['CloudSqlSettingsAvailabilityType']]:
        """
        Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
        """
        return pulumi.get(self, "availability_type")

    @availability_type.setter
    def availability_type(self, value: Optional[pulumi.Input['CloudSqlSettingsAvailabilityType']]):
        pulumi.set(self, "availability_type", value)

    @property
    @pulumi.getter(name="cmekKeyName")
    def cmek_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The KMS key name used for the csql instance.
        """
        return pulumi.get(self, "cmek_key_name")

    @cmek_key_name.setter
    def cmek_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmek_key_name", value)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud SQL default instance level collation.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter(name="dataCacheConfig")
    def data_cache_config(self) -> Optional[pulumi.Input['DataCacheConfigArgs']]:
        """
        Optional. Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        """
        return pulumi.get(self, "data_cache_config")

    @data_cache_config.setter
    def data_cache_config(self, value: Optional[pulumi.Input['DataCacheConfigArgs']]):
        pulumi.set(self, "data_cache_config", value)

    @property
    @pulumi.getter(name="dataDiskSizeGb")
    def data_disk_size_gb(self) -> Optional[pulumi.Input[str]]:
        """
        The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
        """
        return pulumi.get(self, "data_disk_size_gb")

    @data_disk_size_gb.setter
    def data_disk_size_gb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_disk_size_gb", value)

    @property
    @pulumi.getter(name="dataDiskType")
    def data_disk_type(self) -> Optional[pulumi.Input['CloudSqlSettingsDataDiskType']]:
        """
        The type of storage: `PD_SSD` (default) or `PD_HDD`.
        """
        return pulumi.get(self, "data_disk_type")

    @data_disk_type.setter
    def data_disk_type(self, value: Optional[pulumi.Input['CloudSqlSettingsDataDiskType']]):
        pulumi.set(self, "data_disk_type", value)

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        """
        return pulumi.get(self, "database_flags")

    @database_flags.setter
    def database_flags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_flags", value)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[pulumi.Input['CloudSqlSettingsDatabaseVersion']]:
        """
        The database engine type and version.
        """
        return pulumi.get(self, "database_version")

    @database_version.setter
    def database_version(self, value: Optional[pulumi.Input['CloudSqlSettingsDatabaseVersion']]):
        pulumi.set(self, "database_version", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input['CloudSqlSettingsEdition']]:
        """
        Optional. The edition of the given Cloud SQL instance.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input['CloudSqlSettingsEdition']]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['SqlIpConfigArgs']]:
        """
        The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['SqlIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Initial root password.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="secondaryZone")
    def secondary_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
        """
        return pulumi.get(self, "secondary_zone")

    @secondary_zone.setter
    def secondary_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_zone", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="storageAutoResizeLimit")
    def storage_auto_resize_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
        """
        return pulumi.get(self, "storage_auto_resize_limit")

    @storage_auto_resize_limit.setter
    def storage_auto_resize_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_auto_resize_limit", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter(name="userLabels")
    def user_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
        """
        return pulumi.get(self, "user_labels")

    @user_labels.setter
    def user_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_labels", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Cloud Platform zone where your Cloud SQL database instance is located.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ConditionalColumnSetValueArgs:
    def __init__(__self__, *,
                 value_transformation: pulumi.Input['ValueTransformationArgs'],
                 custom_features: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 source_numeric_filter: Optional[pulumi.Input['SourceNumericFilterArgs']] = None,
                 source_text_filter: Optional[pulumi.Input['SourceTextFilterArgs']] = None):
        """
        Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
        :param pulumi.Input['ValueTransformationArgs'] value_transformation: Description of data transformation during migration.
        :param pulumi.Input[Mapping[str, Any]] custom_features: Optional. Custom engine specific features.
        :param pulumi.Input['SourceNumericFilterArgs'] source_numeric_filter: Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
        :param pulumi.Input['SourceTextFilterArgs'] source_text_filter: Optional. Optional filter on source column length. Used for text based data types like varchar.
        """
        pulumi.set(__self__, "value_transformation", value_transformation)
        if custom_features is not None:
            pulumi.set(__self__, "custom_features", custom_features)
        if source_numeric_filter is not None:
            pulumi.set(__self__, "source_numeric_filter", source_numeric_filter)
        if source_text_filter is not None:
            pulumi.set(__self__, "source_text_filter", source_text_filter)

    @property
    @pulumi.getter(name="valueTransformation")
    def value_transformation(self) -> pulumi.Input['ValueTransformationArgs']:
        """
        Description of data transformation during migration.
        """
        return pulumi.get(self, "value_transformation")

    @value_transformation.setter
    def value_transformation(self, value: pulumi.Input['ValueTransformationArgs']):
        pulumi.set(self, "value_transformation", value)

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @custom_features.setter
    def custom_features(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_features", value)

    @property
    @pulumi.getter(name="sourceNumericFilter")
    def source_numeric_filter(self) -> Optional[pulumi.Input['SourceNumericFilterArgs']]:
        """
        Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
        """
        return pulumi.get(self, "source_numeric_filter")

    @source_numeric_filter.setter
    def source_numeric_filter(self, value: Optional[pulumi.Input['SourceNumericFilterArgs']]):
        pulumi.set(self, "source_numeric_filter", value)

    @property
    @pulumi.getter(name="sourceTextFilter")
    def source_text_filter(self) -> Optional[pulumi.Input['SourceTextFilterArgs']]:
        """
        Optional. Optional filter on source column length. Used for text based data types like varchar.
        """
        return pulumi.get(self, "source_text_filter")

    @source_text_filter.setter
    def source_text_filter(self, value: Optional[pulumi.Input['SourceTextFilterArgs']]):
        pulumi.set(self, "source_text_filter", value)


@pulumi.input_type
class ConversionWorkspaceInfoArgs:
    def __init__(__self__, *,
                 commit_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        A conversion workspace's version.
        :param pulumi.Input[str] commit_id: The commit ID of the conversion workspace.
        :param pulumi.Input[str] name: The resource name (URI) of the conversion workspace.
        """
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[pulumi.Input[str]]:
        """
        The commit ID of the conversion workspace.
        """
        return pulumi.get(self, "commit_id")

    @commit_id.setter
    def commit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name (URI) of the conversion workspace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ConvertRowIdToColumnArgs:
    def __init__(__self__, *,
                 only_if_no_primary_key: pulumi.Input[bool]):
        """
        Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
        :param pulumi.Input[bool] only_if_no_primary_key: Only work on tables without primary key defined
        """
        pulumi.set(__self__, "only_if_no_primary_key", only_if_no_primary_key)

    @property
    @pulumi.getter(name="onlyIfNoPrimaryKey")
    def only_if_no_primary_key(self) -> pulumi.Input[bool]:
        """
        Only work on tables without primary key defined
        """
        return pulumi.get(self, "only_if_no_primary_key")

    @only_if_no_primary_key.setter
    def only_if_no_primary_key(self, value: pulumi.Input[bool]):
        pulumi.set(self, "only_if_no_primary_key", value)


@pulumi.input_type
class DataCacheConfigArgs:
    def __init__(__self__, *,
                 data_cache_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
        :param pulumi.Input[bool] data_cache_enabled: Optional. Whether data cache is enabled for the instance.
        """
        if data_cache_enabled is not None:
            pulumi.set(__self__, "data_cache_enabled", data_cache_enabled)

    @property
    @pulumi.getter(name="dataCacheEnabled")
    def data_cache_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Whether data cache is enabled for the instance.
        """
        return pulumi.get(self, "data_cache_enabled")

    @data_cache_enabled.setter
    def data_cache_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_cache_enabled", value)


@pulumi.input_type
class DatabaseEngineInfoArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input['DatabaseEngineInfoEngine'],
                 version: pulumi.Input[str]):
        """
        The type and version of a source or destination database.
        :param pulumi.Input['DatabaseEngineInfoEngine'] engine: Engine type.
        :param pulumi.Input[str] version: Engine version, for example "12.c.1".
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input['DatabaseEngineInfoEngine']:
        """
        Engine type.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input['DatabaseEngineInfoEngine']):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Engine version, for example "12.c.1".
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DatabaseTypeArgs:
    def __init__(__self__, *,
                 engine: Optional[pulumi.Input['DatabaseTypeEngine']] = None,
                 provider: Optional[pulumi.Input['DatabaseTypeProvider']] = None):
        """
        A message defining the database engine and provider.
        :param pulumi.Input['DatabaseTypeEngine'] engine: The database engine.
        :param pulumi.Input['DatabaseTypeProvider'] provider: The database provider.
        """
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input['DatabaseTypeEngine']]:
        """
        The database engine.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input['DatabaseTypeEngine']]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input['DatabaseTypeProvider']]:
        """
        The database provider.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input['DatabaseTypeProvider']]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class DoubleComparisonFilterArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float],
                 value_comparison: pulumi.Input['DoubleComparisonFilterValueComparison']):
        """
        Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
        :param pulumi.Input[float] value: Double compare value to be used
        :param pulumi.Input['DoubleComparisonFilterValueComparison'] value_comparison: Relation between source value and compare value
        """
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_comparison", value_comparison)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        Double compare value to be used
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueComparison")
    def value_comparison(self) -> pulumi.Input['DoubleComparisonFilterValueComparison']:
        """
        Relation between source value and compare value
        """
        return pulumi.get(self, "value_comparison")

    @value_comparison.setter
    def value_comparison(self, value: pulumi.Input['DoubleComparisonFilterValueComparison']):
        pulumi.set(self, "value_comparison", value)


@pulumi.input_type
class DumpFlagsArgs:
    def __init__(__self__, *,
                 dump_flags: Optional[pulumi.Input[Sequence[pulumi.Input['DumpFlagArgs']]]] = None):
        """
        Dump flags definition.
        :param pulumi.Input[Sequence[pulumi.Input['DumpFlagArgs']]] dump_flags: The flags for the initial dump.
        """
        if dump_flags is not None:
            pulumi.set(__self__, "dump_flags", dump_flags)

    @property
    @pulumi.getter(name="dumpFlags")
    def dump_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DumpFlagArgs']]]]:
        """
        The flags for the initial dump.
        """
        return pulumi.get(self, "dump_flags")

    @dump_flags.setter
    def dump_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DumpFlagArgs']]]]):
        pulumi.set(self, "dump_flags", value)


@pulumi.input_type
class DumpFlagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Dump flag definition.
        :param pulumi.Input[str] name: The name of the flag
        :param pulumi.Input[str] value: The value of the flag.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the flag
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the flag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EmptyArgs:
    def __init__(__self__):
        """
        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
        """
        pass


@pulumi.input_type
class EncryptionConfigArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
        :param pulumi.Input[str] kms_key_name: The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


@pulumi.input_type
class EntityMoveArgs:
    def __init__(__self__, *,
                 new_schema: pulumi.Input[str]):
        """
        Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
        :param pulumi.Input[str] new_schema: The new schema
        """
        pulumi.set(__self__, "new_schema", new_schema)

    @property
    @pulumi.getter(name="newSchema")
    def new_schema(self) -> pulumi.Input[str]:
        """
        The new schema
        """
        return pulumi.get(self, "new_schema")

    @new_schema.setter
    def new_schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_schema", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class FilterTableColumnsArgs:
    def __init__(__self__, *,
                 exclude_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_columns: Optional. List of columns to be excluded for a particular table.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_columns: Optional. List of columns to be included for a particular table.
        """
        if exclude_columns is not None:
            pulumi.set(__self__, "exclude_columns", exclude_columns)
        if include_columns is not None:
            pulumi.set(__self__, "include_columns", include_columns)

    @property
    @pulumi.getter(name="excludeColumns")
    def exclude_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. List of columns to be excluded for a particular table.
        """
        return pulumi.get(self, "exclude_columns")

    @exclude_columns.setter
    def exclude_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_columns", value)

    @property
    @pulumi.getter(name="includeColumns")
    def include_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. List of columns to be included for a particular table.
        """
        return pulumi.get(self, "include_columns")

    @include_columns.setter
    def include_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_columns", value)


@pulumi.input_type
class ForwardSshTunnelConnectivityArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None):
        """
        Forward SSH Tunnel connectivity.
        :param pulumi.Input[str] hostname: Hostname for the SSH tunnel.
        :param pulumi.Input[str] username: Username for the SSH tunnel.
        :param pulumi.Input[str] password: Input only. SSH password.
        :param pulumi.Input[int] port: Port for the SSH tunnel, default value is 22.
        :param pulumi.Input[str] private_key: Input only. SSH private key.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Hostname for the SSH tunnel.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username for the SSH tunnel.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. SSH password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for the SSH tunnel, default value is 22.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. SSH private key.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class IntComparisonFilterArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 value_comparison: pulumi.Input['IntComparisonFilterValueComparison']):
        """
        Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
        :param pulumi.Input[str] value: Integer compare value to be used
        :param pulumi.Input['IntComparisonFilterValueComparison'] value_comparison: Relation between source value and compare value
        """
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_comparison", value_comparison)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Integer compare value to be used
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueComparison")
    def value_comparison(self) -> pulumi.Input['IntComparisonFilterValueComparison']:
        """
        Relation between source value and compare value
        """
        return pulumi.get(self, "value_comparison")

    @value_comparison.setter
    def value_comparison(self, value: pulumi.Input['IntComparisonFilterValueComparison']):
        pulumi.set(self, "value_comparison", value)


@pulumi.input_type
class MachineConfigArgs:
    def __init__(__self__, *,
                 cpu_count: Optional[pulumi.Input[int]] = None):
        """
        MachineConfig describes the configuration of a machine.
        :param pulumi.Input[int] cpu_count: The number of CPU's in the VM instance.
        """
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU's in the VM instance.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)


@pulumi.input_type
class MappingRuleFilterArgs:
    def __init__(__self__, *,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 entity_name_contains: Optional[pulumi.Input[str]] = None,
                 entity_name_prefix: Optional[pulumi.Input[str]] = None,
                 entity_name_suffix: Optional[pulumi.Input[str]] = None,
                 parent_entity: Optional[pulumi.Input[str]] = None):
        """
        A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entities: Optional. The rule should be applied to specific entities defined by their fully qualified names.
        :param pulumi.Input[str] entity_name_contains: Optional. The rule should be applied to entities whose non-qualified name contains the given string.
        :param pulumi.Input[str] entity_name_prefix: Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
        :param pulumi.Input[str] entity_name_suffix: Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
        :param pulumi.Input[str] parent_entity: Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
        """
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_name_contains is not None:
            pulumi.set(__self__, "entity_name_contains", entity_name_contains)
        if entity_name_prefix is not None:
            pulumi.set(__self__, "entity_name_prefix", entity_name_prefix)
        if entity_name_suffix is not None:
            pulumi.set(__self__, "entity_name_suffix", entity_name_suffix)
        if parent_entity is not None:
            pulumi.set(__self__, "parent_entity", parent_entity)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The rule should be applied to specific entities defined by their fully qualified names.
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityNameContains")
    def entity_name_contains(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The rule should be applied to entities whose non-qualified name contains the given string.
        """
        return pulumi.get(self, "entity_name_contains")

    @entity_name_contains.setter
    def entity_name_contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_name_contains", value)

    @property
    @pulumi.getter(name="entityNamePrefix")
    def entity_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
        """
        return pulumi.get(self, "entity_name_prefix")

    @entity_name_prefix.setter
    def entity_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_name_prefix", value)

    @property
    @pulumi.getter(name="entityNameSuffix")
    def entity_name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
        """
        return pulumi.get(self, "entity_name_suffix")

    @entity_name_suffix.setter
    def entity_name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_name_suffix", value)

    @property
    @pulumi.getter(name="parentEntity")
    def parent_entity(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
        """
        return pulumi.get(self, "parent_entity")

    @parent_entity.setter
    def parent_entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_entity", value)


@pulumi.input_type
class MultiColumnDatatypeChangeArgs:
    def __init__(__self__, *,
                 new_data_type: pulumi.Input[str],
                 source_data_type_filter: pulumi.Input[str],
                 custom_features: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 override_fractional_seconds_precision: Optional[pulumi.Input[int]] = None,
                 override_length: Optional[pulumi.Input[str]] = None,
                 override_precision: Optional[pulumi.Input[int]] = None,
                 override_scale: Optional[pulumi.Input[int]] = None,
                 source_numeric_filter: Optional[pulumi.Input['SourceNumericFilterArgs']] = None,
                 source_text_filter: Optional[pulumi.Input['SourceTextFilterArgs']] = None):
        """
        Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
        :param pulumi.Input[str] new_data_type: New data type.
        :param pulumi.Input[str] source_data_type_filter: Filter on source data type.
        :param pulumi.Input[Mapping[str, Any]] custom_features: Optional. Custom engine specific features.
        :param pulumi.Input[int] override_fractional_seconds_precision: Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
        :param pulumi.Input[str] override_length: Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
        :param pulumi.Input[int] override_precision: Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
        :param pulumi.Input[int] override_scale: Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
        :param pulumi.Input['SourceNumericFilterArgs'] source_numeric_filter: Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
        :param pulumi.Input['SourceTextFilterArgs'] source_text_filter: Optional. Filter for text-based data types like varchar.
        """
        pulumi.set(__self__, "new_data_type", new_data_type)
        pulumi.set(__self__, "source_data_type_filter", source_data_type_filter)
        if custom_features is not None:
            pulumi.set(__self__, "custom_features", custom_features)
        if override_fractional_seconds_precision is not None:
            pulumi.set(__self__, "override_fractional_seconds_precision", override_fractional_seconds_precision)
        if override_length is not None:
            pulumi.set(__self__, "override_length", override_length)
        if override_precision is not None:
            pulumi.set(__self__, "override_precision", override_precision)
        if override_scale is not None:
            pulumi.set(__self__, "override_scale", override_scale)
        if source_numeric_filter is not None:
            pulumi.set(__self__, "source_numeric_filter", source_numeric_filter)
        if source_text_filter is not None:
            pulumi.set(__self__, "source_text_filter", source_text_filter)

    @property
    @pulumi.getter(name="newDataType")
    def new_data_type(self) -> pulumi.Input[str]:
        """
        New data type.
        """
        return pulumi.get(self, "new_data_type")

    @new_data_type.setter
    def new_data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_data_type", value)

    @property
    @pulumi.getter(name="sourceDataTypeFilter")
    def source_data_type_filter(self) -> pulumi.Input[str]:
        """
        Filter on source data type.
        """
        return pulumi.get(self, "source_data_type_filter")

    @source_data_type_filter.setter
    def source_data_type_filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_data_type_filter", value)

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @custom_features.setter
    def custom_features(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_features", value)

    @property
    @pulumi.getter(name="overrideFractionalSecondsPrecision")
    def override_fractional_seconds_precision(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
        """
        return pulumi.get(self, "override_fractional_seconds_precision")

    @override_fractional_seconds_precision.setter
    def override_fractional_seconds_precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_fractional_seconds_precision", value)

    @property
    @pulumi.getter(name="overrideLength")
    def override_length(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
        """
        return pulumi.get(self, "override_length")

    @override_length.setter
    def override_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_length", value)

    @property
    @pulumi.getter(name="overridePrecision")
    def override_precision(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
        """
        return pulumi.get(self, "override_precision")

    @override_precision.setter
    def override_precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_precision", value)

    @property
    @pulumi.getter(name="overrideScale")
    def override_scale(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
        """
        return pulumi.get(self, "override_scale")

    @override_scale.setter
    def override_scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_scale", value)

    @property
    @pulumi.getter(name="sourceNumericFilter")
    def source_numeric_filter(self) -> Optional[pulumi.Input['SourceNumericFilterArgs']]:
        """
        Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
        """
        return pulumi.get(self, "source_numeric_filter")

    @source_numeric_filter.setter
    def source_numeric_filter(self, value: Optional[pulumi.Input['SourceNumericFilterArgs']]):
        pulumi.set(self, "source_numeric_filter", value)

    @property
    @pulumi.getter(name="sourceTextFilter")
    def source_text_filter(self) -> Optional[pulumi.Input['SourceTextFilterArgs']]:
        """
        Optional. Filter for text-based data types like varchar.
        """
        return pulumi.get(self, "source_text_filter")

    @source_text_filter.setter
    def source_text_filter(self, value: Optional[pulumi.Input['SourceTextFilterArgs']]):
        pulumi.set(self, "source_text_filter", value)


@pulumi.input_type
class MultiEntityRenameArgs:
    def __init__(__self__, *,
                 new_name_pattern: Optional[pulumi.Input[str]] = None,
                 source_name_transformation: Optional[pulumi.Input['MultiEntityRenameSourceNameTransformation']] = None):
        """
        Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
        :param pulumi.Input[str] new_name_pattern: Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
        :param pulumi.Input['MultiEntityRenameSourceNameTransformation'] source_name_transformation: Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
        """
        if new_name_pattern is not None:
            pulumi.set(__self__, "new_name_pattern", new_name_pattern)
        if source_name_transformation is not None:
            pulumi.set(__self__, "source_name_transformation", source_name_transformation)

    @property
    @pulumi.getter(name="newNamePattern")
    def new_name_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
        """
        return pulumi.get(self, "new_name_pattern")

    @new_name_pattern.setter
    def new_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_name_pattern", value)

    @property
    @pulumi.getter(name="sourceNameTransformation")
    def source_name_transformation(self) -> Optional[pulumi.Input['MultiEntityRenameSourceNameTransformation']]:
        """
        Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
        """
        return pulumi.get(self, "source_name_transformation")

    @source_name_transformation.setter
    def source_name_transformation(self, value: Optional[pulumi.Input['MultiEntityRenameSourceNameTransformation']]):
        pulumi.set(self, "source_name_transformation", value)


@pulumi.input_type
class MySqlConnectionProfileArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 cloud_sql_id: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input['SslConfigArgs']] = None):
        """
        Specifies connection parameters required specifically for MySQL databases.
        :param pulumi.Input[str] host: The IP or hostname of the source MySQL database.
        :param pulumi.Input[str] password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param pulumi.Input[int] port: The network port of the source MySQL database.
        :param pulumi.Input[str] username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        :param pulumi.Input[str] cloud_sql_id: If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        :param pulumi.Input['SslConfigArgs'] ssl: SSL configuration for the destination to connect to the source database.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if cloud_sql_id is not None:
            pulumi.set(__self__, "cloud_sql_id", cloud_sql_id)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The IP or hostname of the source MySQL database.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The network port of the source MySQL database.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="cloudSqlId")
    def cloud_sql_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        """
        return pulumi.get(self, "cloud_sql_id")

    @cloud_sql_id.setter
    def cloud_sql_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_sql_id", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input['SslConfigArgs']]:
        """
        SSL configuration for the destination to connect to the source database.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input['SslConfigArgs']]):
        pulumi.set(self, "ssl", value)


@pulumi.input_type
class OracleConnectionProfileArgs:
    def __init__(__self__, *,
                 database_service: pulumi.Input[str],
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 forward_ssh_connectivity: Optional[pulumi.Input['ForwardSshTunnelConnectivityArgs']] = None,
                 private_connectivity: Optional[pulumi.Input['PrivateConnectivityArgs']] = None,
                 ssl: Optional[pulumi.Input['SslConfigArgs']] = None,
                 static_service_ip_connectivity: Optional[pulumi.Input['StaticServiceIpConnectivityArgs']] = None):
        """
        Specifies connection parameters required specifically for Oracle databases.
        :param pulumi.Input[str] database_service: Database service for the Oracle connection.
        :param pulumi.Input[str] host: The IP or hostname of the source Oracle database.
        :param pulumi.Input[str] password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param pulumi.Input[int] port: The network port of the source Oracle database.
        :param pulumi.Input[str] username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        :param pulumi.Input['ForwardSshTunnelConnectivityArgs'] forward_ssh_connectivity: Forward SSH tunnel connectivity.
        :param pulumi.Input['PrivateConnectivityArgs'] private_connectivity: Private connectivity.
        :param pulumi.Input['SslConfigArgs'] ssl: SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
        :param pulumi.Input['StaticServiceIpConnectivityArgs'] static_service_ip_connectivity: Static Service IP connectivity.
        """
        pulumi.set(__self__, "database_service", database_service)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if forward_ssh_connectivity is not None:
            pulumi.set(__self__, "forward_ssh_connectivity", forward_ssh_connectivity)
        if private_connectivity is not None:
            pulumi.set(__self__, "private_connectivity", private_connectivity)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if static_service_ip_connectivity is not None:
            pulumi.set(__self__, "static_service_ip_connectivity", static_service_ip_connectivity)

    @property
    @pulumi.getter(name="databaseService")
    def database_service(self) -> pulumi.Input[str]:
        """
        Database service for the Oracle connection.
        """
        return pulumi.get(self, "database_service")

    @database_service.setter
    def database_service(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_service", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The IP or hostname of the source Oracle database.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The network port of the source Oracle database.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="forwardSshConnectivity")
    def forward_ssh_connectivity(self) -> Optional[pulumi.Input['ForwardSshTunnelConnectivityArgs']]:
        """
        Forward SSH tunnel connectivity.
        """
        return pulumi.get(self, "forward_ssh_connectivity")

    @forward_ssh_connectivity.setter
    def forward_ssh_connectivity(self, value: Optional[pulumi.Input['ForwardSshTunnelConnectivityArgs']]):
        pulumi.set(self, "forward_ssh_connectivity", value)

    @property
    @pulumi.getter(name="privateConnectivity")
    def private_connectivity(self) -> Optional[pulumi.Input['PrivateConnectivityArgs']]:
        """
        Private connectivity.
        """
        return pulumi.get(self, "private_connectivity")

    @private_connectivity.setter
    def private_connectivity(self, value: Optional[pulumi.Input['PrivateConnectivityArgs']]):
        pulumi.set(self, "private_connectivity", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input['SslConfigArgs']]:
        """
        SSL configuration for the connection to the source Oracle database. * Only `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported for Oracle versions 12 and above.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input['SslConfigArgs']]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="staticServiceIpConnectivity")
    def static_service_ip_connectivity(self) -> Optional[pulumi.Input['StaticServiceIpConnectivityArgs']]:
        """
        Static Service IP connectivity.
        """
        return pulumi.get(self, "static_service_ip_connectivity")

    @static_service_ip_connectivity.setter
    def static_service_ip_connectivity(self, value: Optional[pulumi.Input['StaticServiceIpConnectivityArgs']]):
        pulumi.set(self, "static_service_ip_connectivity", value)


@pulumi.input_type
class PerformanceConfigArgs:
    def __init__(__self__, *,
                 dump_parallel_level: Optional[pulumi.Input['PerformanceConfigDumpParallelLevel']] = None):
        """
        Performance configuration definition.
        :param pulumi.Input['PerformanceConfigDumpParallelLevel'] dump_parallel_level: Initial dump parallelism level.
        """
        if dump_parallel_level is not None:
            pulumi.set(__self__, "dump_parallel_level", dump_parallel_level)

    @property
    @pulumi.getter(name="dumpParallelLevel")
    def dump_parallel_level(self) -> Optional[pulumi.Input['PerformanceConfigDumpParallelLevel']]:
        """
        Initial dump parallelism level.
        """
        return pulumi.get(self, "dump_parallel_level")

    @dump_parallel_level.setter
    def dump_parallel_level(self, value: Optional[pulumi.Input['PerformanceConfigDumpParallelLevel']]):
        pulumi.set(self, "dump_parallel_level", value)


@pulumi.input_type
class PostgreSqlConnectionProfileArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 alloydb_cluster_id: Optional[pulumi.Input[str]] = None,
                 cloud_sql_id: Optional[pulumi.Input[str]] = None,
                 private_service_connect_connectivity: Optional[pulumi.Input['PrivateServiceConnectConnectivityArgs']] = None,
                 ssl: Optional[pulumi.Input['SslConfigArgs']] = None,
                 static_ip_connectivity: Optional[pulumi.Input['StaticIpConnectivityArgs']] = None):
        """
        Specifies connection parameters required specifically for PostgreSQL databases.
        :param pulumi.Input[str] host: The IP or hostname of the source PostgreSQL database.
        :param pulumi.Input[str] password: Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        :param pulumi.Input[int] port: The network port of the source PostgreSQL database.
        :param pulumi.Input[str] username: The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        :param pulumi.Input[str] alloydb_cluster_id: Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
        :param pulumi.Input[str] cloud_sql_id: If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        :param pulumi.Input['PrivateServiceConnectConnectivityArgs'] private_service_connect_connectivity: Private service connect connectivity.
        :param pulumi.Input['SslConfigArgs'] ssl: SSL configuration for the destination to connect to the source database.
        :param pulumi.Input['StaticIpConnectivityArgs'] static_ip_connectivity: Static ip connectivity data (default, no additional details needed).
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if alloydb_cluster_id is not None:
            pulumi.set(__self__, "alloydb_cluster_id", alloydb_cluster_id)
        if cloud_sql_id is not None:
            pulumi.set(__self__, "cloud_sql_id", cloud_sql_id)
        if private_service_connect_connectivity is not None:
            pulumi.set(__self__, "private_service_connect_connectivity", private_service_connect_connectivity)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if static_ip_connectivity is not None:
            pulumi.set(__self__, "static_ip_connectivity", static_ip_connectivity)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The IP or hostname of the source PostgreSQL database.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The network port of the source PostgreSQL database.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="alloydbClusterId")
    def alloydb_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
        """
        return pulumi.get(self, "alloydb_cluster_id")

    @alloydb_cluster_id.setter
    def alloydb_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alloydb_cluster_id", value)

    @property
    @pulumi.getter(name="cloudSqlId")
    def cloud_sql_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        """
        return pulumi.get(self, "cloud_sql_id")

    @cloud_sql_id.setter
    def cloud_sql_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_sql_id", value)

    @property
    @pulumi.getter(name="privateServiceConnectConnectivity")
    def private_service_connect_connectivity(self) -> Optional[pulumi.Input['PrivateServiceConnectConnectivityArgs']]:
        """
        Private service connect connectivity.
        """
        return pulumi.get(self, "private_service_connect_connectivity")

    @private_service_connect_connectivity.setter
    def private_service_connect_connectivity(self, value: Optional[pulumi.Input['PrivateServiceConnectConnectivityArgs']]):
        pulumi.set(self, "private_service_connect_connectivity", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input['SslConfigArgs']]:
        """
        SSL configuration for the destination to connect to the source database.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input['SslConfigArgs']]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="staticIpConnectivity")
    def static_ip_connectivity(self) -> Optional[pulumi.Input['StaticIpConnectivityArgs']]:
        """
        Static ip connectivity data (default, no additional details needed).
        """
        return pulumi.get(self, "static_ip_connectivity")

    @static_ip_connectivity.setter
    def static_ip_connectivity(self, value: Optional[pulumi.Input['StaticIpConnectivityArgs']]):
        pulumi.set(self, "static_ip_connectivity", value)


@pulumi.input_type
class PrimaryInstanceSettingsArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 database_flags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 machine_config: Optional[pulumi.Input['MachineConfigArgs']] = None):
        """
        Settings for the cluster's primary instance
        :param pulumi.Input[str] id: The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_flags: Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
        :param pulumi.Input['MachineConfigArgs'] machine_config: Configuration for the machines that host the underlying database engine.
        """
        pulumi.set(__self__, "id", id)
        if database_flags is not None:
            pulumi.set(__self__, "database_flags", database_flags)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_config is not None:
            pulumi.set(__self__, "machine_config", machine_config)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
        """
        return pulumi.get(self, "database_flags")

    @database_flags.setter
    def database_flags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_flags", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> Optional[pulumi.Input['MachineConfigArgs']]:
        """
        Configuration for the machines that host the underlying database engine.
        """
        return pulumi.get(self, "machine_config")

    @machine_config.setter
    def machine_config(self, value: Optional[pulumi.Input['MachineConfigArgs']]):
        pulumi.set(self, "machine_config", value)


@pulumi.input_type
class PrivateConnectivityArgs:
    def __init__(__self__, *,
                 private_connection: pulumi.Input[str]):
        """
        Private Connectivity.
        :param pulumi.Input[str] private_connection: The resource name (URI) of the private connection.
        """
        pulumi.set(__self__, "private_connection", private_connection)

    @property
    @pulumi.getter(name="privateConnection")
    def private_connection(self) -> pulumi.Input[str]:
        """
        The resource name (URI) of the private connection.
        """
        return pulumi.get(self, "private_connection")

    @private_connection.setter
    def private_connection(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_connection", value)


@pulumi.input_type
class PrivateServiceConnectConnectivityArgs:
    def __init__(__self__, *,
                 service_attachment: pulumi.Input[str]):
        """
        [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
        :param pulumi.Input[str] service_attachment: A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> pulumi.Input[str]:
        """
        A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_attachment", value)


@pulumi.input_type
class ReverseSshConnectivityArgs:
    def __init__(__self__, *,
                 vm_ip: pulumi.Input[str],
                 vm_port: pulumi.Input[int],
                 vm: Optional[pulumi.Input[str]] = None,
                 vpc: Optional[pulumi.Input[str]] = None):
        """
        The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
        :param pulumi.Input[str] vm_ip: The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param pulumi.Input[int] vm_port: The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param pulumi.Input[str] vm: The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        :param pulumi.Input[str] vpc: The name of the VPC to peer with the Cloud SQL private network.
        """
        pulumi.set(__self__, "vm_ip", vm_ip)
        pulumi.set(__self__, "vm_port", vm_port)
        if vm is not None:
            pulumi.set(__self__, "vm", vm)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> pulumi.Input[str]:
        """
        The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm_ip")

    @vm_ip.setter
    def vm_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_ip", value)

    @property
    @pulumi.getter(name="vmPort")
    def vm_port(self) -> pulumi.Input[int]:
        """
        The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm_port")

    @vm_port.setter
    def vm_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_port", value)

    @property
    @pulumi.getter
    def vm(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
        """
        return pulumi.get(self, "vm")

    @vm.setter
    def vm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPC to peer with the Cloud SQL private network.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class RoundToScaleArgs:
    def __init__(__self__, *,
                 scale: pulumi.Input[int]):
        """
        This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
        :param pulumi.Input[int] scale: Scale value to be used
        """
        pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def scale(self) -> pulumi.Input[int]:
        """
        Scale value to be used
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: pulumi.Input[int]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class SetTablePrimaryKeyArgs:
    def __init__(__self__, *,
                 primary_key_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 primary_key: Optional[pulumi.Input[str]] = None):
        """
        Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] primary_key_columns: List of column names for the primary key
        :param pulumi.Input[str] primary_key: Optional. Name for the primary key
        """
        pulumi.set(__self__, "primary_key_columns", primary_key_columns)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)

    @property
    @pulumi.getter(name="primaryKeyColumns")
    def primary_key_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of column names for the primary key
        """
        return pulumi.get(self, "primary_key_columns")

    @primary_key_columns.setter
    def primary_key_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "primary_key_columns", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Name for the primary key
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_key", value)


@pulumi.input_type
class SingleColumnChangeArgs:
    def __init__(__self__, *,
                 array: Optional[pulumi.Input[bool]] = None,
                 array_length: Optional[pulumi.Input[int]] = None,
                 auto_generated: Optional[pulumi.Input[bool]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 custom_features: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 data_type: Optional[pulumi.Input[str]] = None,
                 fractional_seconds_precision: Optional[pulumi.Input[int]] = None,
                 length: Optional[pulumi.Input[str]] = None,
                 nullable: Optional[pulumi.Input[bool]] = None,
                 precision: Optional[pulumi.Input[int]] = None,
                 scale: Optional[pulumi.Input[int]] = None,
                 set_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udt: Optional[pulumi.Input[bool]] = None):
        """
        Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
        :param pulumi.Input[bool] array: Optional. Is the column of array type.
        :param pulumi.Input[int] array_length: Optional. The length of the array, only relevant if the column type is an array.
        :param pulumi.Input[bool] auto_generated: Optional. Is the column auto-generated/identity.
        :param pulumi.Input[str] charset: Optional. Charset override - instead of table level charset.
        :param pulumi.Input[str] collation: Optional. Collation override - instead of table level collation.
        :param pulumi.Input[str] comment: Optional. Comment associated with the column.
        :param pulumi.Input[Mapping[str, Any]] custom_features: Optional. Custom engine specific features.
        :param pulumi.Input[str] data_type: Optional. Column data type name.
        :param pulumi.Input[int] fractional_seconds_precision: Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
        :param pulumi.Input[str] length: Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
        :param pulumi.Input[bool] nullable: Optional. Is the column nullable.
        :param pulumi.Input[int] precision: Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
        :param pulumi.Input[int] scale: Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] set_values: Optional. Specifies the list of values allowed in the column.
        :param pulumi.Input[bool] udt: Optional. Is the column a UDT (User-defined Type).
        """
        if array is not None:
            pulumi.set(__self__, "array", array)
        if array_length is not None:
            pulumi.set(__self__, "array_length", array_length)
        if auto_generated is not None:
            pulumi.set(__self__, "auto_generated", auto_generated)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if custom_features is not None:
            pulumi.set(__self__, "custom_features", custom_features)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if fractional_seconds_precision is not None:
            pulumi.set(__self__, "fractional_seconds_precision", fractional_seconds_precision)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if set_values is not None:
            pulumi.set(__self__, "set_values", set_values)
        if udt is not None:
            pulumi.set(__self__, "udt", udt)

    @property
    @pulumi.getter
    def array(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Is the column of array type.
        """
        return pulumi.get(self, "array")

    @array.setter
    def array(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "array", value)

    @property
    @pulumi.getter(name="arrayLength")
    def array_length(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The length of the array, only relevant if the column type is an array.
        """
        return pulumi.get(self, "array_length")

    @array_length.setter
    def array_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "array_length", value)

    @property
    @pulumi.getter(name="autoGenerated")
    def auto_generated(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Is the column auto-generated/identity.
        """
        return pulumi.get(self, "auto_generated")

    @auto_generated.setter
    def auto_generated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_generated", value)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Charset override - instead of table level charset.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Collation override - instead of table level collation.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Comment associated with the column.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="customFeatures")
    def custom_features(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional. Custom engine specific features.
        """
        return pulumi.get(self, "custom_features")

    @custom_features.setter
    def custom_features(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_features", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Column data type name.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="fractionalSecondsPrecision")
    def fractional_seconds_precision(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
        """
        return pulumi.get(self, "fractional_seconds_precision")

    @fractional_seconds_precision.setter
    def fractional_seconds_precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fractional_seconds_precision", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def nullable(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Is the column nullable.
        """
        return pulumi.get(self, "nullable")

    @nullable.setter
    def nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nullable", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. Specifies the list of values allowed in the column.
        """
        return pulumi.get(self, "set_values")

    @set_values.setter
    def set_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_values", value)

    @property
    @pulumi.getter
    def udt(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Is the column a UDT (User-defined Type).
        """
        return pulumi.get(self, "udt")

    @udt.setter
    def udt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "udt", value)


@pulumi.input_type
class SingleEntityRenameArgs:
    def __init__(__self__, *,
                 new_name: pulumi.Input[str]):
        """
        Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
        :param pulumi.Input[str] new_name: The new name of the destination entity
        """
        pulumi.set(__self__, "new_name", new_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> pulumi.Input[str]:
        """
        The new name of the destination entity
        """
        return pulumi.get(self, "new_name")

    @new_name.setter
    def new_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_name", value)


@pulumi.input_type
class SinglePackageChangeArgs:
    def __init__(__self__, *,
                 package_body: Optional[pulumi.Input[str]] = None,
                 package_description: Optional[pulumi.Input[str]] = None):
        """
        Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
        :param pulumi.Input[str] package_body: Optional. Sql code for package body
        :param pulumi.Input[str] package_description: Optional. Sql code for package description
        """
        if package_body is not None:
            pulumi.set(__self__, "package_body", package_body)
        if package_description is not None:
            pulumi.set(__self__, "package_description", package_description)

    @property
    @pulumi.getter(name="packageBody")
    def package_body(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Sql code for package body
        """
        return pulumi.get(self, "package_body")

    @package_body.setter
    def package_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_body", value)

    @property
    @pulumi.getter(name="packageDescription")
    def package_description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Sql code for package description
        """
        return pulumi.get(self, "package_description")

    @package_description.setter
    def package_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_description", value)


@pulumi.input_type
class SourceNumericFilterArgs:
    def __init__(__self__, *,
                 numeric_filter_option: pulumi.Input['SourceNumericFilterNumericFilterOption'],
                 source_max_precision_filter: Optional[pulumi.Input[int]] = None,
                 source_max_scale_filter: Optional[pulumi.Input[int]] = None,
                 source_min_precision_filter: Optional[pulumi.Input[int]] = None,
                 source_min_scale_filter: Optional[pulumi.Input[int]] = None):
        """
        Filter for fixed point number data types such as NUMERIC/NUMBER
        :param pulumi.Input['SourceNumericFilterNumericFilterOption'] numeric_filter_option: Enum to set the option defining the datatypes numeric filter has to be applied to
        :param pulumi.Input[int] source_max_precision_filter: Optional. The filter will match columns with precision smaller than or equal to this number.
        :param pulumi.Input[int] source_max_scale_filter: Optional. The filter will match columns with scale smaller than or equal to this number.
        :param pulumi.Input[int] source_min_precision_filter: Optional. The filter will match columns with precision greater than or equal to this number.
        :param pulumi.Input[int] source_min_scale_filter: Optional. The filter will match columns with scale greater than or equal to this number.
        """
        pulumi.set(__self__, "numeric_filter_option", numeric_filter_option)
        if source_max_precision_filter is not None:
            pulumi.set(__self__, "source_max_precision_filter", source_max_precision_filter)
        if source_max_scale_filter is not None:
            pulumi.set(__self__, "source_max_scale_filter", source_max_scale_filter)
        if source_min_precision_filter is not None:
            pulumi.set(__self__, "source_min_precision_filter", source_min_precision_filter)
        if source_min_scale_filter is not None:
            pulumi.set(__self__, "source_min_scale_filter", source_min_scale_filter)

    @property
    @pulumi.getter(name="numericFilterOption")
    def numeric_filter_option(self) -> pulumi.Input['SourceNumericFilterNumericFilterOption']:
        """
        Enum to set the option defining the datatypes numeric filter has to be applied to
        """
        return pulumi.get(self, "numeric_filter_option")

    @numeric_filter_option.setter
    def numeric_filter_option(self, value: pulumi.Input['SourceNumericFilterNumericFilterOption']):
        pulumi.set(self, "numeric_filter_option", value)

    @property
    @pulumi.getter(name="sourceMaxPrecisionFilter")
    def source_max_precision_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The filter will match columns with precision smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_precision_filter")

    @source_max_precision_filter.setter
    def source_max_precision_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_max_precision_filter", value)

    @property
    @pulumi.getter(name="sourceMaxScaleFilter")
    def source_max_scale_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The filter will match columns with scale smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_scale_filter")

    @source_max_scale_filter.setter
    def source_max_scale_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_max_scale_filter", value)

    @property
    @pulumi.getter(name="sourceMinPrecisionFilter")
    def source_min_precision_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The filter will match columns with precision greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_precision_filter")

    @source_min_precision_filter.setter
    def source_min_precision_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_min_precision_filter", value)

    @property
    @pulumi.getter(name="sourceMinScaleFilter")
    def source_min_scale_filter(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The filter will match columns with scale greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_scale_filter")

    @source_min_scale_filter.setter
    def source_min_scale_filter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_min_scale_filter", value)


@pulumi.input_type
class SourceSqlChangeArgs:
    def __init__(__self__, *,
                 sql_code: pulumi.Input[str]):
        """
        Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
        :param pulumi.Input[str] sql_code: Sql code for source (stored procedure, function, trigger or view)
        """
        pulumi.set(__self__, "sql_code", sql_code)

    @property
    @pulumi.getter(name="sqlCode")
    def sql_code(self) -> pulumi.Input[str]:
        """
        Sql code for source (stored procedure, function, trigger or view)
        """
        return pulumi.get(self, "sql_code")

    @sql_code.setter
    def sql_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_code", value)


@pulumi.input_type
class SourceTextFilterArgs:
    def __init__(__self__, *,
                 source_max_length_filter: Optional[pulumi.Input[str]] = None,
                 source_min_length_filter: Optional[pulumi.Input[str]] = None):
        """
        Filter for text-based data types like varchar.
        :param pulumi.Input[str] source_max_length_filter: Optional. The filter will match columns with length smaller than or equal to this number.
        :param pulumi.Input[str] source_min_length_filter: Optional. The filter will match columns with length greater than or equal to this number.
        """
        if source_max_length_filter is not None:
            pulumi.set(__self__, "source_max_length_filter", source_max_length_filter)
        if source_min_length_filter is not None:
            pulumi.set(__self__, "source_min_length_filter", source_min_length_filter)

    @property
    @pulumi.getter(name="sourceMaxLengthFilter")
    def source_max_length_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The filter will match columns with length smaller than or equal to this number.
        """
        return pulumi.get(self, "source_max_length_filter")

    @source_max_length_filter.setter
    def source_max_length_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_max_length_filter", value)

    @property
    @pulumi.getter(name="sourceMinLengthFilter")
    def source_min_length_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The filter will match columns with length greater than or equal to this number.
        """
        return pulumi.get(self, "source_min_length_filter")

    @source_min_length_filter.setter
    def source_min_length_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_min_length_filter", value)


@pulumi.input_type
class SqlAclEntryArgs:
    def __init__(__self__, *,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        An entry for an Access Control list.
        :param pulumi.Input[str] expire_time: The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
        :param pulumi.Input[str] label: A label to identify this entry.
        :param pulumi.Input[str] ttl: Input only. The time-to-leave of this access control entry.
        :param pulumi.Input[str] value: The allowlisted value for the access control list.
        """
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        A label to identify this entry.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. The time-to-leave of this access control entry.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The allowlisted value for the access control list.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SqlIpConfigArgs:
    def __init__(__self__, *,
                 allocated_ip_range: Optional[pulumi.Input[str]] = None,
                 authorized_networks: Optional[pulumi.Input[Sequence[pulumi.Input['SqlAclEntryArgs']]]] = None,
                 enable_ipv4: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[str]] = None,
                 require_ssl: Optional[pulumi.Input[bool]] = None):
        """
        IP Management configuration.
        :param pulumi.Input[str] allocated_ip_range: Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
        :param pulumi.Input[Sequence[pulumi.Input['SqlAclEntryArgs']]] authorized_networks: The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
        :param pulumi.Input[bool] enable_ipv4: Whether the instance should be assigned an IPv4 address or not.
        :param pulumi.Input[str] private_network: The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        :param pulumi.Input[bool] require_ssl: Whether SSL connections over IP should be enforced or not.
        """
        if allocated_ip_range is not None:
            pulumi.set(__self__, "allocated_ip_range", allocated_ip_range)
        if authorized_networks is not None:
            pulumi.set(__self__, "authorized_networks", authorized_networks)
        if enable_ipv4 is not None:
            pulumi.set(__self__, "enable_ipv4", enable_ipv4)
        if private_network is not None:
            pulumi.set(__self__, "private_network", private_network)
        if require_ssl is not None:
            pulumi.set(__self__, "require_ssl", require_ssl)

    @property
    @pulumi.getter(name="allocatedIpRange")
    def allocated_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
        """
        return pulumi.get(self, "allocated_ip_range")

    @allocated_ip_range.setter
    def allocated_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocated_ip_range", value)

    @property
    @pulumi.getter(name="authorizedNetworks")
    def authorized_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SqlAclEntryArgs']]]]:
        """
        The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
        """
        return pulumi.get(self, "authorized_networks")

    @authorized_networks.setter
    def authorized_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SqlAclEntryArgs']]]]):
        pulumi.set(self, "authorized_networks", value)

    @property
    @pulumi.getter(name="enableIpv4")
    def enable_ipv4(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the instance should be assigned an IPv4 address or not.
        """
        return pulumi.get(self, "enable_ipv4")

    @enable_ipv4.setter
    def enable_ipv4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ipv4", value)

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[pulumi.Input[str]]:
        """
        The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        """
        return pulumi.get(self, "private_network")

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_network", value)

    @property
    @pulumi.getter(name="requireSsl")
    def require_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether SSL connections over IP should be enforced or not.
        """
        return pulumi.get(self, "require_ssl")

    @require_ssl.setter
    def require_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_ssl", value)


@pulumi.input_type
class SslConfigArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None):
        """
        SSL configuration information.
        :param pulumi.Input[str] ca_certificate: Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
        :param pulumi.Input[str] client_certificate: Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
        :param pulumi.Input[str] client_key: Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
        """
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        """
        Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)


@pulumi.input_type
class StaticIpConnectivityArgs:
    def __init__(__self__):
        """
        The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
        """
        pass


@pulumi.input_type
class StaticServiceIpConnectivityArgs:
    def __init__(__self__):
        """
        Static IP address connectivity configured on service project.
        """
        pass


@pulumi.input_type
class UserPasswordArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The username/password for a database user. Used for specifying initial users at cluster creation time.
        :param pulumi.Input[str] password: The initial password for the user.
        :param pulumi.Input[str] user: The database username.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The initial password for the user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The database username.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ValueListFilterArgs:
    def __init__(__self__, *,
                 ignore_case: pulumi.Input[bool],
                 value_present_list: pulumi.Input['ValueListFilterValuePresentList'],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        A list of values to filter by in ConditionalColumnSetValue
        :param pulumi.Input[bool] ignore_case: Whether to ignore case when filtering by values. Defaults to false
        :param pulumi.Input['ValueListFilterValuePresentList'] value_present_list: Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The list to be used to filter by
        """
        pulumi.set(__self__, "ignore_case", ignore_case)
        pulumi.set(__self__, "value_present_list", value_present_list)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> pulumi.Input[bool]:
        """
        Whether to ignore case when filtering by values. Defaults to false
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="valuePresentList")
    def value_present_list(self) -> pulumi.Input['ValueListFilterValuePresentList']:
        """
        Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
        """
        return pulumi.get(self, "value_present_list")

    @value_present_list.setter
    def value_present_list(self, value: pulumi.Input['ValueListFilterValuePresentList']):
        pulumi.set(self, "value_present_list", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list to be used to filter by
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ValueTransformationArgs:
    def __init__(__self__, *,
                 apply_hash: Optional[pulumi.Input['ApplyHashArgs']] = None,
                 assign_max_value: Optional[pulumi.Input['EmptyArgs']] = None,
                 assign_min_value: Optional[pulumi.Input['EmptyArgs']] = None,
                 assign_null: Optional[pulumi.Input['EmptyArgs']] = None,
                 assign_specific_value: Optional[pulumi.Input['AssignSpecificValueArgs']] = None,
                 double_comparison: Optional[pulumi.Input['DoubleComparisonFilterArgs']] = None,
                 int_comparison: Optional[pulumi.Input['IntComparisonFilterArgs']] = None,
                 is_null: Optional[pulumi.Input['EmptyArgs']] = None,
                 round_scale: Optional[pulumi.Input['RoundToScaleArgs']] = None,
                 value_list: Optional[pulumi.Input['ValueListFilterArgs']] = None):
        """
        Description of data transformation during migration as part of the ConditionalColumnSetValue.
        :param pulumi.Input['ApplyHashArgs'] apply_hash: Optional. Applies a hash function on the data
        :param pulumi.Input['EmptyArgs'] assign_max_value: Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
        :param pulumi.Input['EmptyArgs'] assign_min_value: Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
        :param pulumi.Input['EmptyArgs'] assign_null: Optional. Set to null
        :param pulumi.Input['AssignSpecificValueArgs'] assign_specific_value: Optional. Set to a specific value (value is converted to fit the target data type)
        :param pulumi.Input['DoubleComparisonFilterArgs'] double_comparison: Optional. Filter on relation between source value and compare value of type double.
        :param pulumi.Input['IntComparisonFilterArgs'] int_comparison: Optional. Filter on relation between source value and compare value of type integer.
        :param pulumi.Input['EmptyArgs'] is_null: Optional. Value is null
        :param pulumi.Input['RoundToScaleArgs'] round_scale: Optional. Allows the data to change scale
        :param pulumi.Input['ValueListFilterArgs'] value_list: Optional. Value is found in the specified list.
        """
        if apply_hash is not None:
            pulumi.set(__self__, "apply_hash", apply_hash)
        if assign_max_value is not None:
            pulumi.set(__self__, "assign_max_value", assign_max_value)
        if assign_min_value is not None:
            pulumi.set(__self__, "assign_min_value", assign_min_value)
        if assign_null is not None:
            pulumi.set(__self__, "assign_null", assign_null)
        if assign_specific_value is not None:
            pulumi.set(__self__, "assign_specific_value", assign_specific_value)
        if double_comparison is not None:
            pulumi.set(__self__, "double_comparison", double_comparison)
        if int_comparison is not None:
            pulumi.set(__self__, "int_comparison", int_comparison)
        if is_null is not None:
            pulumi.set(__self__, "is_null", is_null)
        if round_scale is not None:
            pulumi.set(__self__, "round_scale", round_scale)
        if value_list is not None:
            pulumi.set(__self__, "value_list", value_list)

    @property
    @pulumi.getter(name="applyHash")
    def apply_hash(self) -> Optional[pulumi.Input['ApplyHashArgs']]:
        """
        Optional. Applies a hash function on the data
        """
        return pulumi.get(self, "apply_hash")

    @apply_hash.setter
    def apply_hash(self, value: Optional[pulumi.Input['ApplyHashArgs']]):
        pulumi.set(self, "apply_hash", value)

    @property
    @pulumi.getter(name="assignMaxValue")
    def assign_max_value(self) -> Optional[pulumi.Input['EmptyArgs']]:
        """
        Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
        """
        return pulumi.get(self, "assign_max_value")

    @assign_max_value.setter
    def assign_max_value(self, value: Optional[pulumi.Input['EmptyArgs']]):
        pulumi.set(self, "assign_max_value", value)

    @property
    @pulumi.getter(name="assignMinValue")
    def assign_min_value(self) -> Optional[pulumi.Input['EmptyArgs']]:
        """
        Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
        """
        return pulumi.get(self, "assign_min_value")

    @assign_min_value.setter
    def assign_min_value(self, value: Optional[pulumi.Input['EmptyArgs']]):
        pulumi.set(self, "assign_min_value", value)

    @property
    @pulumi.getter(name="assignNull")
    def assign_null(self) -> Optional[pulumi.Input['EmptyArgs']]:
        """
        Optional. Set to null
        """
        return pulumi.get(self, "assign_null")

    @assign_null.setter
    def assign_null(self, value: Optional[pulumi.Input['EmptyArgs']]):
        pulumi.set(self, "assign_null", value)

    @property
    @pulumi.getter(name="assignSpecificValue")
    def assign_specific_value(self) -> Optional[pulumi.Input['AssignSpecificValueArgs']]:
        """
        Optional. Set to a specific value (value is converted to fit the target data type)
        """
        return pulumi.get(self, "assign_specific_value")

    @assign_specific_value.setter
    def assign_specific_value(self, value: Optional[pulumi.Input['AssignSpecificValueArgs']]):
        pulumi.set(self, "assign_specific_value", value)

    @property
    @pulumi.getter(name="doubleComparison")
    def double_comparison(self) -> Optional[pulumi.Input['DoubleComparisonFilterArgs']]:
        """
        Optional. Filter on relation between source value and compare value of type double.
        """
        return pulumi.get(self, "double_comparison")

    @double_comparison.setter
    def double_comparison(self, value: Optional[pulumi.Input['DoubleComparisonFilterArgs']]):
        pulumi.set(self, "double_comparison", value)

    @property
    @pulumi.getter(name="intComparison")
    def int_comparison(self) -> Optional[pulumi.Input['IntComparisonFilterArgs']]:
        """
        Optional. Filter on relation between source value and compare value of type integer.
        """
        return pulumi.get(self, "int_comparison")

    @int_comparison.setter
    def int_comparison(self, value: Optional[pulumi.Input['IntComparisonFilterArgs']]):
        pulumi.set(self, "int_comparison", value)

    @property
    @pulumi.getter(name="isNull")
    def is_null(self) -> Optional[pulumi.Input['EmptyArgs']]:
        """
        Optional. Value is null
        """
        return pulumi.get(self, "is_null")

    @is_null.setter
    def is_null(self, value: Optional[pulumi.Input['EmptyArgs']]):
        pulumi.set(self, "is_null", value)

    @property
    @pulumi.getter(name="roundScale")
    def round_scale(self) -> Optional[pulumi.Input['RoundToScaleArgs']]:
        """
        Optional. Allows the data to change scale
        """
        return pulumi.get(self, "round_scale")

    @round_scale.setter
    def round_scale(self, value: Optional[pulumi.Input['RoundToScaleArgs']]):
        pulumi.set(self, "round_scale", value)

    @property
    @pulumi.getter(name="valueList")
    def value_list(self) -> Optional[pulumi.Input['ValueListFilterArgs']]:
        """
        Optional. Value is found in the specified list.
        """
        return pulumi.get(self, "value_list")

    @value_list.setter
    def value_list(self, value: Optional[pulumi.Input['ValueListFilterArgs']]):
        pulumi.set(self, "value_list", value)


@pulumi.input_type
class VpcPeeringConfigArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[str],
                 vpc_name: pulumi.Input[str]):
        """
        The VPC peering configuration is used to create VPC peering with the consumer's VPC.
        :param pulumi.Input[str] subnet: A free subnet for peering. (CIDR of /29)
        :param pulumi.Input[str] vpc_name: Fully qualified name of the VPC that Database Migration Service will peer to.
        """
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        A free subnet for peering. (CIDR of /29)
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> pulumi.Input[str]:
        """
        Fully qualified name of the VPC that Database Migration Service will peer to.
        """
        return pulumi.get(self, "vpc_name")

    @vpc_name.setter
    def vpc_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_name", value)


@pulumi.input_type
class VpcPeeringConnectivityArgs:
    def __init__(__self__, *,
                 vpc: Optional[pulumi.Input[str]] = None):
        """
        The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
        :param pulumi.Input[str] vpc: The name of the VPC network to peer with the Cloud SQL private network.
        """
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPC network to peer with the Cloud SQL private network.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc", value)


