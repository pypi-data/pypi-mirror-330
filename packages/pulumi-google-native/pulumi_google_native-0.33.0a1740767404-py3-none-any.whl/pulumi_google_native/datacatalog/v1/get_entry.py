# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEntryResult',
    'AwaitableGetEntryResult',
    'get_entry',
    'get_entry_output',
]

@pulumi.output_type
class GetEntryResult:
    def __init__(__self__, bigquery_date_sharded_spec=None, bigquery_table_spec=None, business_context=None, cloud_bigtable_system_spec=None, data_source=None, data_source_connection_spec=None, database_table_spec=None, dataset_spec=None, description=None, display_name=None, fileset_spec=None, fully_qualified_name=None, gcs_fileset_spec=None, integrated_system=None, labels=None, linked_resource=None, looker_system_spec=None, model_spec=None, name=None, personal_details=None, routine_spec=None, schema=None, service_spec=None, source_system_timestamps=None, sql_database_system_spec=None, type=None, usage_signal=None, user_specified_system=None, user_specified_type=None):
        if bigquery_date_sharded_spec and not isinstance(bigquery_date_sharded_spec, dict):
            raise TypeError("Expected argument 'bigquery_date_sharded_spec' to be a dict")
        pulumi.set(__self__, "bigquery_date_sharded_spec", bigquery_date_sharded_spec)
        if bigquery_table_spec and not isinstance(bigquery_table_spec, dict):
            raise TypeError("Expected argument 'bigquery_table_spec' to be a dict")
        pulumi.set(__self__, "bigquery_table_spec", bigquery_table_spec)
        if business_context and not isinstance(business_context, dict):
            raise TypeError("Expected argument 'business_context' to be a dict")
        pulumi.set(__self__, "business_context", business_context)
        if cloud_bigtable_system_spec and not isinstance(cloud_bigtable_system_spec, dict):
            raise TypeError("Expected argument 'cloud_bigtable_system_spec' to be a dict")
        pulumi.set(__self__, "cloud_bigtable_system_spec", cloud_bigtable_system_spec)
        if data_source and not isinstance(data_source, dict):
            raise TypeError("Expected argument 'data_source' to be a dict")
        pulumi.set(__self__, "data_source", data_source)
        if data_source_connection_spec and not isinstance(data_source_connection_spec, dict):
            raise TypeError("Expected argument 'data_source_connection_spec' to be a dict")
        pulumi.set(__self__, "data_source_connection_spec", data_source_connection_spec)
        if database_table_spec and not isinstance(database_table_spec, dict):
            raise TypeError("Expected argument 'database_table_spec' to be a dict")
        pulumi.set(__self__, "database_table_spec", database_table_spec)
        if dataset_spec and not isinstance(dataset_spec, dict):
            raise TypeError("Expected argument 'dataset_spec' to be a dict")
        pulumi.set(__self__, "dataset_spec", dataset_spec)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if fileset_spec and not isinstance(fileset_spec, dict):
            raise TypeError("Expected argument 'fileset_spec' to be a dict")
        pulumi.set(__self__, "fileset_spec", fileset_spec)
        if fully_qualified_name and not isinstance(fully_qualified_name, str):
            raise TypeError("Expected argument 'fully_qualified_name' to be a str")
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if gcs_fileset_spec and not isinstance(gcs_fileset_spec, dict):
            raise TypeError("Expected argument 'gcs_fileset_spec' to be a dict")
        pulumi.set(__self__, "gcs_fileset_spec", gcs_fileset_spec)
        if integrated_system and not isinstance(integrated_system, str):
            raise TypeError("Expected argument 'integrated_system' to be a str")
        pulumi.set(__self__, "integrated_system", integrated_system)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if linked_resource and not isinstance(linked_resource, str):
            raise TypeError("Expected argument 'linked_resource' to be a str")
        pulumi.set(__self__, "linked_resource", linked_resource)
        if looker_system_spec and not isinstance(looker_system_spec, dict):
            raise TypeError("Expected argument 'looker_system_spec' to be a dict")
        pulumi.set(__self__, "looker_system_spec", looker_system_spec)
        if model_spec and not isinstance(model_spec, dict):
            raise TypeError("Expected argument 'model_spec' to be a dict")
        pulumi.set(__self__, "model_spec", model_spec)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if personal_details and not isinstance(personal_details, dict):
            raise TypeError("Expected argument 'personal_details' to be a dict")
        pulumi.set(__self__, "personal_details", personal_details)
        if routine_spec and not isinstance(routine_spec, dict):
            raise TypeError("Expected argument 'routine_spec' to be a dict")
        pulumi.set(__self__, "routine_spec", routine_spec)
        if schema and not isinstance(schema, dict):
            raise TypeError("Expected argument 'schema' to be a dict")
        pulumi.set(__self__, "schema", schema)
        if service_spec and not isinstance(service_spec, dict):
            raise TypeError("Expected argument 'service_spec' to be a dict")
        pulumi.set(__self__, "service_spec", service_spec)
        if source_system_timestamps and not isinstance(source_system_timestamps, dict):
            raise TypeError("Expected argument 'source_system_timestamps' to be a dict")
        pulumi.set(__self__, "source_system_timestamps", source_system_timestamps)
        if sql_database_system_spec and not isinstance(sql_database_system_spec, dict):
            raise TypeError("Expected argument 'sql_database_system_spec' to be a dict")
        pulumi.set(__self__, "sql_database_system_spec", sql_database_system_spec)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if usage_signal and not isinstance(usage_signal, dict):
            raise TypeError("Expected argument 'usage_signal' to be a dict")
        pulumi.set(__self__, "usage_signal", usage_signal)
        if user_specified_system and not isinstance(user_specified_system, str):
            raise TypeError("Expected argument 'user_specified_system' to be a str")
        pulumi.set(__self__, "user_specified_system", user_specified_system)
        if user_specified_type and not isinstance(user_specified_type, str):
            raise TypeError("Expected argument 'user_specified_type' to be a str")
        pulumi.set(__self__, "user_specified_type", user_specified_type)

    @property
    @pulumi.getter(name="bigqueryDateShardedSpec")
    def bigquery_date_sharded_spec(self) -> 'outputs.GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse':
        """
        Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
        """
        return pulumi.get(self, "bigquery_date_sharded_spec")

    @property
    @pulumi.getter(name="bigqueryTableSpec")
    def bigquery_table_spec(self) -> 'outputs.GoogleCloudDatacatalogV1BigQueryTableSpecResponse':
        """
        Specification that applies to a BigQuery table. Valid only for entries with the `TABLE` type.
        """
        return pulumi.get(self, "bigquery_table_spec")

    @property
    @pulumi.getter(name="businessContext")
    def business_context(self) -> 'outputs.GoogleCloudDatacatalogV1BusinessContextResponse':
        """
        Business Context of the entry. Not supported for BigQuery datasets
        """
        return pulumi.get(self, "business_context")

    @property
    @pulumi.getter(name="cloudBigtableSystemSpec")
    def cloud_bigtable_system_spec(self) -> 'outputs.GoogleCloudDatacatalogV1CloudBigtableSystemSpecResponse':
        """
        Specification that applies to Cloud Bigtable system. Only settable when `integrated_system` is equal to `CLOUD_BIGTABLE`
        """
        return pulumi.get(self, "cloud_bigtable_system_spec")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.GoogleCloudDatacatalogV1DataSourceResponse':
        """
        Physical location of the entry.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="dataSourceConnectionSpec")
    def data_source_connection_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse':
        """
        Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
        """
        return pulumi.get(self, "data_source_connection_spec")

    @property
    @pulumi.getter(name="databaseTableSpec")
    def database_table_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DatabaseTableSpecResponse':
        """
        Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type.
        """
        return pulumi.get(self, "database_table_spec")

    @property
    @pulumi.getter(name="datasetSpec")
    def dataset_spec(self) -> 'outputs.GoogleCloudDatacatalogV1DatasetSpecResponse':
        """
        Specification that applies to a dataset.
        """
        return pulumi.get(self, "dataset_spec")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Entry description that can consist of several sentences or paragraphs that describe entry contents. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). The maximum size is 2000 bytes when encoded in UTF-8. Default value is an empty string.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of an entry. The maximum size is 500 bytes when encoded in UTF-8. Default value is an empty string.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filesetSpec")
    def fileset_spec(self) -> 'outputs.GoogleCloudDatacatalogV1FilesetSpecResponse':
        """
        Specification that applies to a fileset resource. Valid only for entries with the `FILESET` type.
        """
        return pulumi.get(self, "fileset_spec")

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> str:
        """
        [Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. Set automatically for entries representing resources from synced systems. Settable only during creation, and read-only later. Can be used for search and lookup of the entries. 
        """
        return pulumi.get(self, "fully_qualified_name")

    @property
    @pulumi.getter(name="gcsFilesetSpec")
    def gcs_fileset_spec(self) -> 'outputs.GoogleCloudDatacatalogV1GcsFilesetSpecResponse':
        """
        Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.
        """
        return pulumi.get(self, "gcs_fileset_spec")

    @property
    @pulumi.getter(name="integratedSystem")
    def integrated_system(self) -> str:
        """
        Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.
        """
        return pulumi.get(self, "integrated_system")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Cloud labels attached to the entry. In Data Catalog, you can create and modify labels attached only to custom entries. Synced entries have unmodifiable labels that come from the source system.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="linkedResource")
    def linked_resource(self) -> str:
        """
        The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` Output only when the entry is one of the types in the `EntryType` enum. For entries with a `user_specified_type`, this field is optional and defaults to an empty string. The resource string must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), periods (.), colons (:), slashes (/), dashes (-), and hashes (#). The maximum size is 200 bytes when encoded in UTF-8.
        """
        return pulumi.get(self, "linked_resource")

    @property
    @pulumi.getter(name="lookerSystemSpec")
    def looker_system_spec(self) -> 'outputs.GoogleCloudDatacatalogV1LookerSystemSpecResponse':
        """
        Specification that applies to Looker sysstem. Only settable when `user_specified_system` is equal to `LOOKER`
        """
        return pulumi.get(self, "looker_system_spec")

    @property
    @pulumi.getter(name="modelSpec")
    def model_spec(self) -> 'outputs.GoogleCloudDatacatalogV1ModelSpecResponse':
        """
        Model specification.
        """
        return pulumi.get(self, "model_spec")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="personalDetails")
    def personal_details(self) -> 'outputs.GoogleCloudDatacatalogV1PersonalDetailsResponse':
        """
        Additional information related to the entry. Private to the current user.
        """
        return pulumi.get(self, "personal_details")

    @property
    @pulumi.getter(name="routineSpec")
    def routine_spec(self) -> 'outputs.GoogleCloudDatacatalogV1RoutineSpecResponse':
        """
        Specification that applies to a user-defined function or procedure. Valid only for entries with the `ROUTINE` type.
        """
        return pulumi.get(self, "routine_spec")

    @property
    @pulumi.getter
    def schema(self) -> 'outputs.GoogleCloudDatacatalogV1SchemaResponse':
        """
        Schema of the entry. An entry might not have any schema attached to it.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="serviceSpec")
    def service_spec(self) -> 'outputs.GoogleCloudDatacatalogV1ServiceSpecResponse':
        """
        Specification that applies to a Service resource.
        """
        return pulumi.get(self, "service_spec")

    @property
    @pulumi.getter(name="sourceSystemTimestamps")
    def source_system_timestamps(self) -> 'outputs.GoogleCloudDatacatalogV1SystemTimestampsResponse':
        """
        Timestamps from the underlying resource, not from the Data Catalog entry. Output only when the entry has a system listed in the `IntegratedSystem` enum. For entries with `user_specified_system`, this field is optional and defaults to an empty timestamp.
        """
        return pulumi.get(self, "source_system_timestamps")

    @property
    @pulumi.getter(name="sqlDatabaseSystemSpec")
    def sql_database_system_spec(self) -> 'outputs.GoogleCloudDatacatalogV1SqlDatabaseSystemSpecResponse':
        """
        Specification that applies to a relational database system. Only settable when `user_specified_system` is equal to `SQL_DATABASE`
        """
        return pulumi.get(self, "sql_database_system_spec")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the entry. For details, see [`EntryType`](#entrytype).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usageSignal")
    def usage_signal(self) -> 'outputs.GoogleCloudDatacatalogV1UsageSignalResponse':
        """
        Resource usage statistics.
        """
        return pulumi.get(self, "usage_signal")

    @property
    @pulumi.getter(name="userSpecifiedSystem")
    def user_specified_system(self) -> str:
        """
        Indicates the entry's source system that Data Catalog doesn't automatically integrate with. The `user_specified_system` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.
        """
        return pulumi.get(self, "user_specified_system")

    @property
    @pulumi.getter(name="userSpecifiedType")
    def user_specified_type(self) -> str:
        """
        Custom entry type that doesn't match any of the values allowed for input and listed in the `EntryType` enum. When creating an entry, first check the type values in the enum. If there are no appropriate types for the new entry, provide a custom value, for example, `my_special_type`. The `user_specified_type` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.
        """
        return pulumi.get(self, "user_specified_type")


class AwaitableGetEntryResult(GetEntryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntryResult(
            bigquery_date_sharded_spec=self.bigquery_date_sharded_spec,
            bigquery_table_spec=self.bigquery_table_spec,
            business_context=self.business_context,
            cloud_bigtable_system_spec=self.cloud_bigtable_system_spec,
            data_source=self.data_source,
            data_source_connection_spec=self.data_source_connection_spec,
            database_table_spec=self.database_table_spec,
            dataset_spec=self.dataset_spec,
            description=self.description,
            display_name=self.display_name,
            fileset_spec=self.fileset_spec,
            fully_qualified_name=self.fully_qualified_name,
            gcs_fileset_spec=self.gcs_fileset_spec,
            integrated_system=self.integrated_system,
            labels=self.labels,
            linked_resource=self.linked_resource,
            looker_system_spec=self.looker_system_spec,
            model_spec=self.model_spec,
            name=self.name,
            personal_details=self.personal_details,
            routine_spec=self.routine_spec,
            schema=self.schema,
            service_spec=self.service_spec,
            source_system_timestamps=self.source_system_timestamps,
            sql_database_system_spec=self.sql_database_system_spec,
            type=self.type,
            usage_signal=self.usage_signal,
            user_specified_system=self.user_specified_system,
            user_specified_type=self.user_specified_type)


def get_entry(entry_group_id: Optional[str] = None,
              entry_id: Optional[str] = None,
              location: Optional[str] = None,
              project: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntryResult:
    """
    Gets an entry.
    """
    __args__ = dict()
    __args__['entryGroupId'] = entry_group_id
    __args__['entryId'] = entry_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:datacatalog/v1:getEntry', __args__, opts=opts, typ=GetEntryResult).value

    return AwaitableGetEntryResult(
        bigquery_date_sharded_spec=pulumi.get(__ret__, 'bigquery_date_sharded_spec'),
        bigquery_table_spec=pulumi.get(__ret__, 'bigquery_table_spec'),
        business_context=pulumi.get(__ret__, 'business_context'),
        cloud_bigtable_system_spec=pulumi.get(__ret__, 'cloud_bigtable_system_spec'),
        data_source=pulumi.get(__ret__, 'data_source'),
        data_source_connection_spec=pulumi.get(__ret__, 'data_source_connection_spec'),
        database_table_spec=pulumi.get(__ret__, 'database_table_spec'),
        dataset_spec=pulumi.get(__ret__, 'dataset_spec'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        fileset_spec=pulumi.get(__ret__, 'fileset_spec'),
        fully_qualified_name=pulumi.get(__ret__, 'fully_qualified_name'),
        gcs_fileset_spec=pulumi.get(__ret__, 'gcs_fileset_spec'),
        integrated_system=pulumi.get(__ret__, 'integrated_system'),
        labels=pulumi.get(__ret__, 'labels'),
        linked_resource=pulumi.get(__ret__, 'linked_resource'),
        looker_system_spec=pulumi.get(__ret__, 'looker_system_spec'),
        model_spec=pulumi.get(__ret__, 'model_spec'),
        name=pulumi.get(__ret__, 'name'),
        personal_details=pulumi.get(__ret__, 'personal_details'),
        routine_spec=pulumi.get(__ret__, 'routine_spec'),
        schema=pulumi.get(__ret__, 'schema'),
        service_spec=pulumi.get(__ret__, 'service_spec'),
        source_system_timestamps=pulumi.get(__ret__, 'source_system_timestamps'),
        sql_database_system_spec=pulumi.get(__ret__, 'sql_database_system_spec'),
        type=pulumi.get(__ret__, 'type'),
        usage_signal=pulumi.get(__ret__, 'usage_signal'),
        user_specified_system=pulumi.get(__ret__, 'user_specified_system'),
        user_specified_type=pulumi.get(__ret__, 'user_specified_type'))


@_utilities.lift_output_func(get_entry)
def get_entry_output(entry_group_id: Optional[pulumi.Input[str]] = None,
                     entry_id: Optional[pulumi.Input[str]] = None,
                     location: Optional[pulumi.Input[str]] = None,
                     project: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEntryResult]:
    """
    Gets an entry.
    """
    ...
