# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmwareClusterArgs', 'VmwareCluster']

@pulumi.input_type
class VmwareClusterArgs:
    def __init__(__self__, *,
                 admin_cluster_membership: pulumi.Input[str],
                 on_prem_version: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 anti_affinity_groups: Optional[pulumi.Input['VmwareAAGConfigArgs']] = None,
                 authorization: Optional[pulumi.Input['AuthorizationArgs']] = None,
                 auto_repair_config: Optional[pulumi.Input['VmwareAutoRepairConfigArgs']] = None,
                 control_plane_node: Optional[pulumi.Input['VmwareControlPlaneNodeConfigArgs']] = None,
                 dataplane_v2: Optional[pulumi.Input['VmwareDataplaneV2ConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_bundled_ingress: Optional[pulumi.Input[bool]] = None,
                 enable_control_plane_v2: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 load_balancer: Optional[pulumi.Input['VmwareLoadBalancerConfigArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input['VmwareNetworkConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input['VmwareStorageConfigArgs']] = None,
                 upgrade_policy: Optional[pulumi.Input['VmwareClusterUpgradePolicyArgs']] = None,
                 vcenter: Optional[pulumi.Input['VmwareVCenterConfigArgs']] = None,
                 vm_tracking_enabled: Optional[pulumi.Input[bool]] = None,
                 vmware_cluster_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VmwareCluster resource.
        :param pulumi.Input[str] admin_cluster_membership: The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        :param pulumi.Input[str] on_prem_version: The Anthos clusters on the VMware version for your user cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input['VmwareAAGConfigArgs'] anti_affinity_groups: AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        :param pulumi.Input['AuthorizationArgs'] authorization: RBAC policy that will be applied and managed by the Anthos On-Prem API.
        :param pulumi.Input['VmwareAutoRepairConfigArgs'] auto_repair_config: Configuration for auto repairing.
        :param pulumi.Input['VmwareControlPlaneNodeConfigArgs'] control_plane_node: VMware user cluster control plane nodes must have either 1 or 3 replicas.
        :param pulumi.Input['VmwareDataplaneV2ConfigArgs'] dataplane_v2: VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        :param pulumi.Input[str] description: A human readable description of this VMware user cluster.
        :param pulumi.Input[bool] disable_bundled_ingress: Disable bundled ingress.
        :param pulumi.Input[bool] enable_control_plane_v2: Enable control plane V2. Default to false.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        :param pulumi.Input['VmwareLoadBalancerConfigArgs'] load_balancer: Load balancer configuration.
        :param pulumi.Input[str] name: Immutable. The VMware user cluster resource name.
        :param pulumi.Input['VmwareNetworkConfigArgs'] network_config: The VMware user cluster network configuration.
        :param pulumi.Input['VmwareStorageConfigArgs'] storage: Storage configuration.
        :param pulumi.Input['VmwareClusterUpgradePolicyArgs'] upgrade_policy: Specifies upgrade policy for the cluster.
        :param pulumi.Input['VmwareVCenterConfigArgs'] vcenter: VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        :param pulumi.Input[bool] vm_tracking_enabled: Enable VM tracking.
        :param pulumi.Input[str] vmware_cluster_id: User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        """
        pulumi.set(__self__, "admin_cluster_membership", admin_cluster_membership)
        pulumi.set(__self__, "on_prem_version", on_prem_version)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if anti_affinity_groups is not None:
            pulumi.set(__self__, "anti_affinity_groups", anti_affinity_groups)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if auto_repair_config is not None:
            pulumi.set(__self__, "auto_repair_config", auto_repair_config)
        if control_plane_node is not None:
            pulumi.set(__self__, "control_plane_node", control_plane_node)
        if dataplane_v2 is not None:
            pulumi.set(__self__, "dataplane_v2", dataplane_v2)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_bundled_ingress is not None:
            pulumi.set(__self__, "disable_bundled_ingress", disable_bundled_ingress)
        if enable_control_plane_v2 is not None:
            pulumi.set(__self__, "enable_control_plane_v2", enable_control_plane_v2)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if upgrade_policy is not None:
            pulumi.set(__self__, "upgrade_policy", upgrade_policy)
        if vcenter is not None:
            pulumi.set(__self__, "vcenter", vcenter)
        if vm_tracking_enabled is not None:
            pulumi.set(__self__, "vm_tracking_enabled", vm_tracking_enabled)
        if vmware_cluster_id is not None:
            pulumi.set(__self__, "vmware_cluster_id", vmware_cluster_id)

    @property
    @pulumi.getter(name="adminClusterMembership")
    def admin_cluster_membership(self) -> pulumi.Input[str]:
        """
        The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        """
        return pulumi.get(self, "admin_cluster_membership")

    @admin_cluster_membership.setter
    def admin_cluster_membership(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_cluster_membership", value)

    @property
    @pulumi.getter(name="onPremVersion")
    def on_prem_version(self) -> pulumi.Input[str]:
        """
        The Anthos clusters on the VMware version for your user cluster.
        """
        return pulumi.get(self, "on_prem_version")

    @on_prem_version.setter
    def on_prem_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "on_prem_version", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="antiAffinityGroups")
    def anti_affinity_groups(self) -> Optional[pulumi.Input['VmwareAAGConfigArgs']]:
        """
        AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        """
        return pulumi.get(self, "anti_affinity_groups")

    @anti_affinity_groups.setter
    def anti_affinity_groups(self, value: Optional[pulumi.Input['VmwareAAGConfigArgs']]):
        pulumi.set(self, "anti_affinity_groups", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['AuthorizationArgs']]:
        """
        RBAC policy that will be applied and managed by the Anthos On-Prem API.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['AuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="autoRepairConfig")
    def auto_repair_config(self) -> Optional[pulumi.Input['VmwareAutoRepairConfigArgs']]:
        """
        Configuration for auto repairing.
        """
        return pulumi.get(self, "auto_repair_config")

    @auto_repair_config.setter
    def auto_repair_config(self, value: Optional[pulumi.Input['VmwareAutoRepairConfigArgs']]):
        pulumi.set(self, "auto_repair_config", value)

    @property
    @pulumi.getter(name="controlPlaneNode")
    def control_plane_node(self) -> Optional[pulumi.Input['VmwareControlPlaneNodeConfigArgs']]:
        """
        VMware user cluster control plane nodes must have either 1 or 3 replicas.
        """
        return pulumi.get(self, "control_plane_node")

    @control_plane_node.setter
    def control_plane_node(self, value: Optional[pulumi.Input['VmwareControlPlaneNodeConfigArgs']]):
        pulumi.set(self, "control_plane_node", value)

    @property
    @pulumi.getter(name="dataplaneV2")
    def dataplane_v2(self) -> Optional[pulumi.Input['VmwareDataplaneV2ConfigArgs']]:
        """
        VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        """
        return pulumi.get(self, "dataplane_v2")

    @dataplane_v2.setter
    def dataplane_v2(self, value: Optional[pulumi.Input['VmwareDataplaneV2ConfigArgs']]):
        pulumi.set(self, "dataplane_v2", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable description of this VMware user cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableBundledIngress")
    def disable_bundled_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable bundled ingress.
        """
        return pulumi.get(self, "disable_bundled_ingress")

    @disable_bundled_ingress.setter
    def disable_bundled_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_bundled_ingress", value)

    @property
    @pulumi.getter(name="enableControlPlaneV2")
    def enable_control_plane_v2(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable control plane V2. Default to false.
        """
        return pulumi.get(self, "enable_control_plane_v2")

    @enable_control_plane_v2.setter
    def enable_control_plane_v2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_control_plane_v2", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['VmwareLoadBalancerConfigArgs']]:
        """
        Load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['VmwareLoadBalancerConfigArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The VMware user cluster resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['VmwareNetworkConfigArgs']]:
        """
        The VMware user cluster network configuration.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['VmwareNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['VmwareStorageConfigArgs']]:
        """
        Storage configuration.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['VmwareStorageConfigArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> Optional[pulumi.Input['VmwareClusterUpgradePolicyArgs']]:
        """
        Specifies upgrade policy for the cluster.
        """
        return pulumi.get(self, "upgrade_policy")

    @upgrade_policy.setter
    def upgrade_policy(self, value: Optional[pulumi.Input['VmwareClusterUpgradePolicyArgs']]):
        pulumi.set(self, "upgrade_policy", value)

    @property
    @pulumi.getter
    def vcenter(self) -> Optional[pulumi.Input['VmwareVCenterConfigArgs']]:
        """
        VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        """
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: Optional[pulumi.Input['VmwareVCenterConfigArgs']]):
        pulumi.set(self, "vcenter", value)

    @property
    @pulumi.getter(name="vmTrackingEnabled")
    def vm_tracking_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VM tracking.
        """
        return pulumi.get(self, "vm_tracking_enabled")

    @vm_tracking_enabled.setter
    def vm_tracking_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vm_tracking_enabled", value)

    @property
    @pulumi.getter(name="vmwareClusterId")
    def vmware_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        """
        return pulumi.get(self, "vmware_cluster_id")

    @vmware_cluster_id.setter
    def vmware_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_cluster_id", value)


class VmwareCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_cluster_membership: Optional[pulumi.Input[str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 anti_affinity_groups: Optional[pulumi.Input[pulumi.InputType['VmwareAAGConfigArgs']]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['AuthorizationArgs']]] = None,
                 auto_repair_config: Optional[pulumi.Input[pulumi.InputType['VmwareAutoRepairConfigArgs']]] = None,
                 control_plane_node: Optional[pulumi.Input[pulumi.InputType['VmwareControlPlaneNodeConfigArgs']]] = None,
                 dataplane_v2: Optional[pulumi.Input[pulumi.InputType['VmwareDataplaneV2ConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_bundled_ingress: Optional[pulumi.Input[bool]] = None,
                 enable_control_plane_v2: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 load_balancer: Optional[pulumi.Input[pulumi.InputType['VmwareLoadBalancerConfigArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['VmwareNetworkConfigArgs']]] = None,
                 on_prem_version: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['VmwareStorageConfigArgs']]] = None,
                 upgrade_policy: Optional[pulumi.Input[pulumi.InputType['VmwareClusterUpgradePolicyArgs']]] = None,
                 vcenter: Optional[pulumi.Input[pulumi.InputType['VmwareVCenterConfigArgs']]] = None,
                 vm_tracking_enabled: Optional[pulumi.Input[bool]] = None,
                 vmware_cluster_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new VMware user cluster in a given project and location.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_cluster_membership: The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[pulumi.InputType['VmwareAAGConfigArgs']] anti_affinity_groups: AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        :param pulumi.Input[pulumi.InputType['AuthorizationArgs']] authorization: RBAC policy that will be applied and managed by the Anthos On-Prem API.
        :param pulumi.Input[pulumi.InputType['VmwareAutoRepairConfigArgs']] auto_repair_config: Configuration for auto repairing.
        :param pulumi.Input[pulumi.InputType['VmwareControlPlaneNodeConfigArgs']] control_plane_node: VMware user cluster control plane nodes must have either 1 or 3 replicas.
        :param pulumi.Input[pulumi.InputType['VmwareDataplaneV2ConfigArgs']] dataplane_v2: VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        :param pulumi.Input[str] description: A human readable description of this VMware user cluster.
        :param pulumi.Input[bool] disable_bundled_ingress: Disable bundled ingress.
        :param pulumi.Input[bool] enable_control_plane_v2: Enable control plane V2. Default to false.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        :param pulumi.Input[pulumi.InputType['VmwareLoadBalancerConfigArgs']] load_balancer: Load balancer configuration.
        :param pulumi.Input[str] name: Immutable. The VMware user cluster resource name.
        :param pulumi.Input[pulumi.InputType['VmwareNetworkConfigArgs']] network_config: The VMware user cluster network configuration.
        :param pulumi.Input[str] on_prem_version: The Anthos clusters on the VMware version for your user cluster.
        :param pulumi.Input[pulumi.InputType['VmwareStorageConfigArgs']] storage: Storage configuration.
        :param pulumi.Input[pulumi.InputType['VmwareClusterUpgradePolicyArgs']] upgrade_policy: Specifies upgrade policy for the cluster.
        :param pulumi.Input[pulumi.InputType['VmwareVCenterConfigArgs']] vcenter: VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        :param pulumi.Input[bool] vm_tracking_enabled: Enable VM tracking.
        :param pulumi.Input[str] vmware_cluster_id: User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmwareClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new VMware user cluster in a given project and location.

        :param str resource_name: The name of the resource.
        :param VmwareClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmwareClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_cluster_membership: Optional[pulumi.Input[str]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 anti_affinity_groups: Optional[pulumi.Input[pulumi.InputType['VmwareAAGConfigArgs']]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['AuthorizationArgs']]] = None,
                 auto_repair_config: Optional[pulumi.Input[pulumi.InputType['VmwareAutoRepairConfigArgs']]] = None,
                 control_plane_node: Optional[pulumi.Input[pulumi.InputType['VmwareControlPlaneNodeConfigArgs']]] = None,
                 dataplane_v2: Optional[pulumi.Input[pulumi.InputType['VmwareDataplaneV2ConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_bundled_ingress: Optional[pulumi.Input[bool]] = None,
                 enable_control_plane_v2: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 load_balancer: Optional[pulumi.Input[pulumi.InputType['VmwareLoadBalancerConfigArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['VmwareNetworkConfigArgs']]] = None,
                 on_prem_version: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['VmwareStorageConfigArgs']]] = None,
                 upgrade_policy: Optional[pulumi.Input[pulumi.InputType['VmwareClusterUpgradePolicyArgs']]] = None,
                 vcenter: Optional[pulumi.Input[pulumi.InputType['VmwareVCenterConfigArgs']]] = None,
                 vm_tracking_enabled: Optional[pulumi.Input[bool]] = None,
                 vmware_cluster_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmwareClusterArgs.__new__(VmwareClusterArgs)

            if admin_cluster_membership is None and not opts.urn:
                raise TypeError("Missing required property 'admin_cluster_membership'")
            __props__.__dict__["admin_cluster_membership"] = admin_cluster_membership
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["anti_affinity_groups"] = anti_affinity_groups
            __props__.__dict__["authorization"] = authorization
            __props__.__dict__["auto_repair_config"] = auto_repair_config
            __props__.__dict__["control_plane_node"] = control_plane_node
            __props__.__dict__["dataplane_v2"] = dataplane_v2
            __props__.__dict__["description"] = description
            __props__.__dict__["disable_bundled_ingress"] = disable_bundled_ingress
            __props__.__dict__["enable_control_plane_v2"] = enable_control_plane_v2
            __props__.__dict__["etag"] = etag
            __props__.__dict__["load_balancer"] = load_balancer
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["network_config"] = network_config
            if on_prem_version is None and not opts.urn:
                raise TypeError("Missing required property 'on_prem_version'")
            __props__.__dict__["on_prem_version"] = on_prem_version
            __props__.__dict__["project"] = project
            __props__.__dict__["storage"] = storage
            __props__.__dict__["upgrade_policy"] = upgrade_policy
            __props__.__dict__["vcenter"] = vcenter
            __props__.__dict__["vm_tracking_enabled"] = vm_tracking_enabled
            __props__.__dict__["vmware_cluster_id"] = vmware_cluster_id
            __props__.__dict__["admin_cluster_name"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["fleet"] = None
            __props__.__dict__["local_name"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["validation_check"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(VmwareCluster, __self__).__init__(
            'google-native:gkeonprem/v1:VmwareCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VmwareCluster':
        """
        Get an existing VmwareCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VmwareClusterArgs.__new__(VmwareClusterArgs)

        __props__.__dict__["admin_cluster_membership"] = None
        __props__.__dict__["admin_cluster_name"] = None
        __props__.__dict__["annotations"] = None
        __props__.__dict__["anti_affinity_groups"] = None
        __props__.__dict__["authorization"] = None
        __props__.__dict__["auto_repair_config"] = None
        __props__.__dict__["control_plane_node"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["dataplane_v2"] = None
        __props__.__dict__["delete_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["disable_bundled_ingress"] = None
        __props__.__dict__["enable_control_plane_v2"] = None
        __props__.__dict__["endpoint"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["fleet"] = None
        __props__.__dict__["load_balancer"] = None
        __props__.__dict__["local_name"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_config"] = None
        __props__.__dict__["on_prem_version"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["reconciling"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["storage"] = None
        __props__.__dict__["uid"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["upgrade_policy"] = None
        __props__.__dict__["validation_check"] = None
        __props__.__dict__["vcenter"] = None
        __props__.__dict__["vm_tracking_enabled"] = None
        __props__.__dict__["vmware_cluster_id"] = None
        return VmwareCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminClusterMembership")
    def admin_cluster_membership(self) -> pulumi.Output[str]:
        """
        The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        """
        return pulumi.get(self, "admin_cluster_membership")

    @property
    @pulumi.getter(name="adminClusterName")
    def admin_cluster_name(self) -> pulumi.Output[str]:
        """
        The resource name of the VMware admin cluster hosting this user cluster.
        """
        return pulumi.get(self, "admin_cluster_name")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="antiAffinityGroups")
    def anti_affinity_groups(self) -> pulumi.Output['outputs.VmwareAAGConfigResponse']:
        """
        AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        """
        return pulumi.get(self, "anti_affinity_groups")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output['outputs.AuthorizationResponse']:
        """
        RBAC policy that will be applied and managed by the Anthos On-Prem API.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="autoRepairConfig")
    def auto_repair_config(self) -> pulumi.Output['outputs.VmwareAutoRepairConfigResponse']:
        """
        Configuration for auto repairing.
        """
        return pulumi.get(self, "auto_repair_config")

    @property
    @pulumi.getter(name="controlPlaneNode")
    def control_plane_node(self) -> pulumi.Output['outputs.VmwareControlPlaneNodeConfigResponse']:
        """
        VMware user cluster control plane nodes must have either 1 or 3 replicas.
        """
        return pulumi.get(self, "control_plane_node")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time at which VMware user cluster was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataplaneV2")
    def dataplane_v2(self) -> pulumi.Output['outputs.VmwareDataplaneV2ConfigResponse']:
        """
        VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        """
        return pulumi.get(self, "dataplane_v2")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        The time at which VMware user cluster was deleted.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A human readable description of this VMware user cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableBundledIngress")
    def disable_bundled_ingress(self) -> pulumi.Output[bool]:
        """
        Disable bundled ingress.
        """
        return pulumi.get(self, "disable_bundled_ingress")

    @property
    @pulumi.getter(name="enableControlPlaneV2")
    def enable_control_plane_v2(self) -> pulumi.Output[bool]:
        """
        Enable control plane V2. Default to false.
        """
        return pulumi.get(self, "enable_control_plane_v2")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        The DNS name of VMware user cluster's API server.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def fleet(self) -> pulumi.Output['outputs.FleetResponse']:
        """
        Fleet configuration for the cluster.
        """
        return pulumi.get(self, "fleet")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> pulumi.Output['outputs.VmwareLoadBalancerConfigResponse']:
        """
        Load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter(name="localName")
    def local_name(self) -> pulumi.Output[str]:
        """
        The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
        """
        return pulumi.get(self, "local_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. The VMware user cluster resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> pulumi.Output['outputs.VmwareNetworkConfigResponse']:
        """
        The VMware user cluster network configuration.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="onPremVersion")
    def on_prem_version(self) -> pulumi.Output[str]:
        """
        The Anthos clusters on the VMware version for your user cluster.
        """
        return pulumi.get(self, "on_prem_version")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        If set, there are currently changes in flight to the VMware user cluster.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of VMware user cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ResourceStatusResponse']:
        """
        ResourceStatus representing detailed cluster state.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.VmwareStorageConfigResponse']:
        """
        Storage configuration.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The unique identifier of the VMware user cluster.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time at which VMware user cluster was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> pulumi.Output['outputs.VmwareClusterUpgradePolicyResponse']:
        """
        Specifies upgrade policy for the cluster.
        """
        return pulumi.get(self, "upgrade_policy")

    @property
    @pulumi.getter(name="validationCheck")
    def validation_check(self) -> pulumi.Output['outputs.ValidationCheckResponse']:
        """
        ValidationCheck represents the result of the preflight check job.
        """
        return pulumi.get(self, "validation_check")

    @property
    @pulumi.getter
    def vcenter(self) -> pulumi.Output['outputs.VmwareVCenterConfigResponse']:
        """
        VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        """
        return pulumi.get(self, "vcenter")

    @property
    @pulumi.getter(name="vmTrackingEnabled")
    def vm_tracking_enabled(self) -> pulumi.Output[bool]:
        """
        Enable VM tracking.
        """
        return pulumi.get(self, "vm_tracking_enabled")

    @property
    @pulumi.getter(name="vmwareClusterId")
    def vmware_cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        """
        return pulumi.get(self, "vmware_cluster_id")

