# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetVmwareNodePoolResult',
    'AwaitableGetVmwareNodePoolResult',
    'get_vmware_node_pool',
    'get_vmware_node_pool_output',
]

@pulumi.output_type
class GetVmwareNodePoolResult:
    def __init__(__self__, annotations=None, config=None, create_time=None, delete_time=None, display_name=None, etag=None, name=None, node_pool_autoscaling=None, on_prem_version=None, reconciling=None, state=None, status=None, uid=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_pool_autoscaling and not isinstance(node_pool_autoscaling, dict):
            raise TypeError("Expected argument 'node_pool_autoscaling' to be a dict")
        pulumi.set(__self__, "node_pool_autoscaling", node_pool_autoscaling)
        if on_prem_version and not isinstance(on_prem_version, str):
            raise TypeError("Expected argument 'on_prem_version' to be a str")
        pulumi.set(__self__, "on_prem_version", on_prem_version)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def config(self) -> 'outputs.VmwareNodeConfigResponse':
        """
        The node configuration of the node pool.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time at which this node pool was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        The time at which this node pool was deleted. If the resource is not deleted, this must be empty
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the node pool.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of this node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolAutoscaling")
    def node_pool_autoscaling(self) -> 'outputs.VmwareNodePoolAutoscalingConfigResponse':
        """
        Node pool autoscaling config for the node pool.
        """
        return pulumi.get(self, "node_pool_autoscaling")

    @property
    @pulumi.getter(name="onPremVersion")
    def on_prem_version(self) -> str:
        """
        Anthos version for the node pool. Defaults to the user cluster version.
        """
        return pulumi.get(self, "on_prem_version")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        If set, there are currently changes in flight to the node pool.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the node pool.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ResourceStatusResponse':
        """
        ResourceStatus representing the detailed VMware node pool state.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique identifier of the node pool.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time at which this node pool was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetVmwareNodePoolResult(GetVmwareNodePoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmwareNodePoolResult(
            annotations=self.annotations,
            config=self.config,
            create_time=self.create_time,
            delete_time=self.delete_time,
            display_name=self.display_name,
            etag=self.etag,
            name=self.name,
            node_pool_autoscaling=self.node_pool_autoscaling,
            on_prem_version=self.on_prem_version,
            reconciling=self.reconciling,
            state=self.state,
            status=self.status,
            uid=self.uid,
            update_time=self.update_time)


def get_vmware_node_pool(location: Optional[str] = None,
                         project: Optional[str] = None,
                         view: Optional[str] = None,
                         vmware_cluster_id: Optional[str] = None,
                         vmware_node_pool_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmwareNodePoolResult:
    """
    Gets details of a single VMware node pool.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    __args__['vmwareClusterId'] = vmware_cluster_id
    __args__['vmwareNodePoolId'] = vmware_node_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:gkeonprem/v1:getVmwareNodePool', __args__, opts=opts, typ=GetVmwareNodePoolResult).value

    return AwaitableGetVmwareNodePoolResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        config=pulumi.get(__ret__, 'config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        node_pool_autoscaling=pulumi.get(__ret__, 'node_pool_autoscaling'),
        on_prem_version=pulumi.get(__ret__, 'on_prem_version'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_vmware_node_pool)
def get_vmware_node_pool_output(location: Optional[pulumi.Input[str]] = None,
                                project: Optional[pulumi.Input[Optional[str]]] = None,
                                view: Optional[pulumi.Input[Optional[str]]] = None,
                                vmware_cluster_id: Optional[pulumi.Input[str]] = None,
                                vmware_node_pool_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVmwareNodePoolResult]:
    """
    Gets details of a single VMware node pool.
    """
    ...
