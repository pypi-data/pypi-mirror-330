# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetBareMetalAdminClusterResult',
    'AwaitableGetBareMetalAdminClusterResult',
    'get_bare_metal_admin_cluster',
    'get_bare_metal_admin_cluster_output',
]

@pulumi.output_type
class GetBareMetalAdminClusterResult:
    def __init__(__self__, annotations=None, bare_metal_version=None, binary_authorization=None, cluster_operations=None, control_plane=None, create_time=None, delete_time=None, description=None, endpoint=None, etag=None, fleet=None, load_balancer=None, local_name=None, maintenance_config=None, maintenance_status=None, name=None, network_config=None, node_access_config=None, node_config=None, os_environment_config=None, proxy=None, reconciling=None, security_config=None, state=None, status=None, storage=None, uid=None, update_time=None, validation_check=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if bare_metal_version and not isinstance(bare_metal_version, str):
            raise TypeError("Expected argument 'bare_metal_version' to be a str")
        pulumi.set(__self__, "bare_metal_version", bare_metal_version)
        if binary_authorization and not isinstance(binary_authorization, dict):
            raise TypeError("Expected argument 'binary_authorization' to be a dict")
        pulumi.set(__self__, "binary_authorization", binary_authorization)
        if cluster_operations and not isinstance(cluster_operations, dict):
            raise TypeError("Expected argument 'cluster_operations' to be a dict")
        pulumi.set(__self__, "cluster_operations", cluster_operations)
        if control_plane and not isinstance(control_plane, dict):
            raise TypeError("Expected argument 'control_plane' to be a dict")
        pulumi.set(__self__, "control_plane", control_plane)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if fleet and not isinstance(fleet, dict):
            raise TypeError("Expected argument 'fleet' to be a dict")
        pulumi.set(__self__, "fleet", fleet)
        if load_balancer and not isinstance(load_balancer, dict):
            raise TypeError("Expected argument 'load_balancer' to be a dict")
        pulumi.set(__self__, "load_balancer", load_balancer)
        if local_name and not isinstance(local_name, str):
            raise TypeError("Expected argument 'local_name' to be a str")
        pulumi.set(__self__, "local_name", local_name)
        if maintenance_config and not isinstance(maintenance_config, dict):
            raise TypeError("Expected argument 'maintenance_config' to be a dict")
        pulumi.set(__self__, "maintenance_config", maintenance_config)
        if maintenance_status and not isinstance(maintenance_status, dict):
            raise TypeError("Expected argument 'maintenance_status' to be a dict")
        pulumi.set(__self__, "maintenance_status", maintenance_status)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_config and not isinstance(network_config, dict):
            raise TypeError("Expected argument 'network_config' to be a dict")
        pulumi.set(__self__, "network_config", network_config)
        if node_access_config and not isinstance(node_access_config, dict):
            raise TypeError("Expected argument 'node_access_config' to be a dict")
        pulumi.set(__self__, "node_access_config", node_access_config)
        if node_config and not isinstance(node_config, dict):
            raise TypeError("Expected argument 'node_config' to be a dict")
        pulumi.set(__self__, "node_config", node_config)
        if os_environment_config and not isinstance(os_environment_config, dict):
            raise TypeError("Expected argument 'os_environment_config' to be a dict")
        pulumi.set(__self__, "os_environment_config", os_environment_config)
        if proxy and not isinstance(proxy, dict):
            raise TypeError("Expected argument 'proxy' to be a dict")
        pulumi.set(__self__, "proxy", proxy)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if security_config and not isinstance(security_config, dict):
            raise TypeError("Expected argument 'security_config' to be a dict")
        pulumi.set(__self__, "security_config", security_config)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if storage and not isinstance(storage, dict):
            raise TypeError("Expected argument 'storage' to be a dict")
        pulumi.set(__self__, "storage", storage)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if validation_check and not isinstance(validation_check, dict):
            raise TypeError("Expected argument 'validation_check' to be a dict")
        pulumi.set(__self__, "validation_check", validation_check)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="bareMetalVersion")
    def bare_metal_version(self) -> str:
        """
        The Anthos clusters on bare metal version for the bare metal admin cluster.
        """
        return pulumi.get(self, "bare_metal_version")

    @property
    @pulumi.getter(name="binaryAuthorization")
    def binary_authorization(self) -> 'outputs.BinaryAuthorizationResponse':
        """
        Binary Authorization related configurations.
        """
        return pulumi.get(self, "binary_authorization")

    @property
    @pulumi.getter(name="clusterOperations")
    def cluster_operations(self) -> 'outputs.BareMetalAdminClusterOperationsConfigResponse':
        """
        Cluster operations configuration.
        """
        return pulumi.get(self, "cluster_operations")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> 'outputs.BareMetalAdminControlPlaneConfigResponse':
        """
        Control plane configuration.
        """
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time at which this bare metal admin cluster was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human readable description of this bare metal admin cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        The IP address name of bare metal admin cluster's API server.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def fleet(self) -> 'outputs.FleetResponse':
        """
        Fleet configuration for the cluster.
        """
        return pulumi.get(self, "fleet")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> 'outputs.BareMetalAdminLoadBalancerConfigResponse':
        """
        Load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter(name="localName")
    def local_name(self) -> str:
        """
        The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
        """
        return pulumi.get(self, "local_name")

    @property
    @pulumi.getter(name="maintenanceConfig")
    def maintenance_config(self) -> 'outputs.BareMetalAdminMaintenanceConfigResponse':
        """
        Maintenance configuration.
        """
        return pulumi.get(self, "maintenance_config")

    @property
    @pulumi.getter(name="maintenanceStatus")
    def maintenance_status(self) -> 'outputs.BareMetalAdminMaintenanceStatusResponse':
        """
        MaintenanceStatus representing state of maintenance.
        """
        return pulumi.get(self, "maintenance_status")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The bare metal admin cluster resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> 'outputs.BareMetalAdminNetworkConfigResponse':
        """
        Network configuration.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="nodeAccessConfig")
    def node_access_config(self) -> 'outputs.BareMetalAdminNodeAccessConfigResponse':
        """
        Node access related configurations.
        """
        return pulumi.get(self, "node_access_config")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> 'outputs.BareMetalAdminWorkloadNodeConfigResponse':
        """
        Workload node configuration.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter(name="osEnvironmentConfig")
    def os_environment_config(self) -> 'outputs.BareMetalAdminOsEnvironmentConfigResponse':
        """
        OS environment related configurations.
        """
        return pulumi.get(self, "os_environment_config")

    @property
    @pulumi.getter
    def proxy(self) -> 'outputs.BareMetalAdminProxyConfigResponse':
        """
        Proxy configuration.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        If set, there are currently changes in flight to the bare metal Admin Cluster.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> 'outputs.BareMetalAdminSecurityConfigResponse':
        """
        Security related configuration.
        """
        return pulumi.get(self, "security_config")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the bare metal admin cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ResourceStatusResponse':
        """
        ResourceStatus representing detailed cluster status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> 'outputs.BareMetalAdminStorageConfigResponse':
        """
        Storage configuration.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique identifier of the bare metal admin cluster.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time at which this bare metal admin cluster was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="validationCheck")
    def validation_check(self) -> 'outputs.ValidationCheckResponse':
        """
        ValidationCheck representing the result of the preflight check.
        """
        return pulumi.get(self, "validation_check")


class AwaitableGetBareMetalAdminClusterResult(GetBareMetalAdminClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBareMetalAdminClusterResult(
            annotations=self.annotations,
            bare_metal_version=self.bare_metal_version,
            binary_authorization=self.binary_authorization,
            cluster_operations=self.cluster_operations,
            control_plane=self.control_plane,
            create_time=self.create_time,
            delete_time=self.delete_time,
            description=self.description,
            endpoint=self.endpoint,
            etag=self.etag,
            fleet=self.fleet,
            load_balancer=self.load_balancer,
            local_name=self.local_name,
            maintenance_config=self.maintenance_config,
            maintenance_status=self.maintenance_status,
            name=self.name,
            network_config=self.network_config,
            node_access_config=self.node_access_config,
            node_config=self.node_config,
            os_environment_config=self.os_environment_config,
            proxy=self.proxy,
            reconciling=self.reconciling,
            security_config=self.security_config,
            state=self.state,
            status=self.status,
            storage=self.storage,
            uid=self.uid,
            update_time=self.update_time,
            validation_check=self.validation_check)


def get_bare_metal_admin_cluster(bare_metal_admin_cluster_id: Optional[str] = None,
                                 location: Optional[str] = None,
                                 project: Optional[str] = None,
                                 view: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBareMetalAdminClusterResult:
    """
    Gets details of a single bare metal admin cluster.
    """
    __args__ = dict()
    __args__['bareMetalAdminClusterId'] = bare_metal_admin_cluster_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:gkeonprem/v1:getBareMetalAdminCluster', __args__, opts=opts, typ=GetBareMetalAdminClusterResult).value

    return AwaitableGetBareMetalAdminClusterResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        bare_metal_version=pulumi.get(__ret__, 'bare_metal_version'),
        binary_authorization=pulumi.get(__ret__, 'binary_authorization'),
        cluster_operations=pulumi.get(__ret__, 'cluster_operations'),
        control_plane=pulumi.get(__ret__, 'control_plane'),
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        description=pulumi.get(__ret__, 'description'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        etag=pulumi.get(__ret__, 'etag'),
        fleet=pulumi.get(__ret__, 'fleet'),
        load_balancer=pulumi.get(__ret__, 'load_balancer'),
        local_name=pulumi.get(__ret__, 'local_name'),
        maintenance_config=pulumi.get(__ret__, 'maintenance_config'),
        maintenance_status=pulumi.get(__ret__, 'maintenance_status'),
        name=pulumi.get(__ret__, 'name'),
        network_config=pulumi.get(__ret__, 'network_config'),
        node_access_config=pulumi.get(__ret__, 'node_access_config'),
        node_config=pulumi.get(__ret__, 'node_config'),
        os_environment_config=pulumi.get(__ret__, 'os_environment_config'),
        proxy=pulumi.get(__ret__, 'proxy'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        security_config=pulumi.get(__ret__, 'security_config'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        storage=pulumi.get(__ret__, 'storage'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        validation_check=pulumi.get(__ret__, 'validation_check'))


@_utilities.lift_output_func(get_bare_metal_admin_cluster)
def get_bare_metal_admin_cluster_output(bare_metal_admin_cluster_id: Optional[pulumi.Input[str]] = None,
                                        location: Optional[pulumi.Input[str]] = None,
                                        project: Optional[pulumi.Input[Optional[str]]] = None,
                                        view: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBareMetalAdminClusterResult]:
    """
    Gets details of a single bare metal admin cluster.
    """
    ...
