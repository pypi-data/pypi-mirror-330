# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['BareMetalNodePoolArgs', 'BareMetalNodePool']

@pulumi.input_type
class BareMetalNodePoolArgs:
    def __init__(__self__, *,
                 bare_metal_cluster_id: pulumi.Input[str],
                 node_pool_config: pulumi.Input['BareMetalNodePoolConfigArgs'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bare_metal_node_pool_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 upgrade_policy: Optional[pulumi.Input['BareMetalNodePoolUpgradePolicyArgs']] = None):
        """
        The set of arguments for constructing a BareMetalNodePool resource.
        :param pulumi.Input['BareMetalNodePoolConfigArgs'] node_pool_config: Node pool configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[str] bare_metal_node_pool_id: The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
        :param pulumi.Input[str] display_name: The display name for the bare metal node pool.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        :param pulumi.Input[str] name: Immutable. The bare metal node pool resource name.
        :param pulumi.Input['BareMetalNodePoolUpgradePolicyArgs'] upgrade_policy: The worker node pool upgrade policy.
        """
        pulumi.set(__self__, "bare_metal_cluster_id", bare_metal_cluster_id)
        pulumi.set(__self__, "node_pool_config", node_pool_config)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if bare_metal_node_pool_id is not None:
            pulumi.set(__self__, "bare_metal_node_pool_id", bare_metal_node_pool_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if upgrade_policy is not None:
            pulumi.set(__self__, "upgrade_policy", upgrade_policy)

    @property
    @pulumi.getter(name="bareMetalClusterId")
    def bare_metal_cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bare_metal_cluster_id")

    @bare_metal_cluster_id.setter
    def bare_metal_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bare_metal_cluster_id", value)

    @property
    @pulumi.getter(name="nodePoolConfig")
    def node_pool_config(self) -> pulumi.Input['BareMetalNodePoolConfigArgs']:
        """
        Node pool configuration.
        """
        return pulumi.get(self, "node_pool_config")

    @node_pool_config.setter
    def node_pool_config(self, value: pulumi.Input['BareMetalNodePoolConfigArgs']):
        pulumi.set(self, "node_pool_config", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="bareMetalNodePoolId")
    def bare_metal_node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
        """
        return pulumi.get(self, "bare_metal_node_pool_id")

    @bare_metal_node_pool_id.setter
    def bare_metal_node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bare_metal_node_pool_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the bare metal node pool.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The bare metal node pool resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> Optional[pulumi.Input['BareMetalNodePoolUpgradePolicyArgs']]:
        """
        The worker node pool upgrade policy.
        """
        return pulumi.get(self, "upgrade_policy")

    @upgrade_policy.setter
    def upgrade_policy(self, value: Optional[pulumi.Input['BareMetalNodePoolUpgradePolicyArgs']]):
        pulumi.set(self, "upgrade_policy", value)


class BareMetalNodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bare_metal_cluster_id: Optional[pulumi.Input[str]] = None,
                 bare_metal_node_pool_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_config: Optional[pulumi.Input[pulumi.InputType['BareMetalNodePoolConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 upgrade_policy: Optional[pulumi.Input[pulumi.InputType['BareMetalNodePoolUpgradePolicyArgs']]] = None,
                 __props__=None):
        """
        Creates a new bare metal node pool in a given project, location and Bare Metal cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[str] bare_metal_node_pool_id: The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
        :param pulumi.Input[str] display_name: The display name for the bare metal node pool.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        :param pulumi.Input[str] name: Immutable. The bare metal node pool resource name.
        :param pulumi.Input[pulumi.InputType['BareMetalNodePoolConfigArgs']] node_pool_config: Node pool configuration.
        :param pulumi.Input[pulumi.InputType['BareMetalNodePoolUpgradePolicyArgs']] upgrade_policy: The worker node pool upgrade policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BareMetalNodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new bare metal node pool in a given project, location and Bare Metal cluster.

        :param str resource_name: The name of the resource.
        :param BareMetalNodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BareMetalNodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bare_metal_cluster_id: Optional[pulumi.Input[str]] = None,
                 bare_metal_node_pool_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_config: Optional[pulumi.Input[pulumi.InputType['BareMetalNodePoolConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 upgrade_policy: Optional[pulumi.Input[pulumi.InputType['BareMetalNodePoolUpgradePolicyArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BareMetalNodePoolArgs.__new__(BareMetalNodePoolArgs)

            __props__.__dict__["annotations"] = annotations
            if bare_metal_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_cluster_id'")
            __props__.__dict__["bare_metal_cluster_id"] = bare_metal_cluster_id
            __props__.__dict__["bare_metal_node_pool_id"] = bare_metal_node_pool_id
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["etag"] = etag
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if node_pool_config is None and not opts.urn:
                raise TypeError("Missing required property 'node_pool_config'")
            __props__.__dict__["node_pool_config"] = node_pool_config
            __props__.__dict__["project"] = project
            __props__.__dict__["upgrade_policy"] = upgrade_policy
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["bareMetalClusterId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BareMetalNodePool, __self__).__init__(
            'google-native:gkeonprem/v1:BareMetalNodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BareMetalNodePool':
        """
        Get an existing BareMetalNodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BareMetalNodePoolArgs.__new__(BareMetalNodePoolArgs)

        __props__.__dict__["annotations"] = None
        __props__.__dict__["bare_metal_cluster_id"] = None
        __props__.__dict__["bare_metal_node_pool_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["delete_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["node_pool_config"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["reconciling"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["uid"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["upgrade_policy"] = None
        return BareMetalNodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="bareMetalClusterId")
    def bare_metal_cluster_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bare_metal_cluster_id")

    @property
    @pulumi.getter(name="bareMetalNodePoolId")
    def bare_metal_node_pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
        """
        return pulumi.get(self, "bare_metal_node_pool_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time at which this bare metal node pool was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name for the bare metal node pool.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. The bare metal node pool resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolConfig")
    def node_pool_config(self) -> pulumi.Output['outputs.BareMetalNodePoolConfigResponse']:
        """
        Node pool configuration.
        """
        return pulumi.get(self, "node_pool_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        If set, there are currently changes in flight to the bare metal node pool.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the bare metal node pool.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ResourceStatusResponse']:
        """
        ResourceStatus representing the detailed node pool status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The unique identifier of the bare metal node pool.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time at which this bare metal node pool was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> pulumi.Output['outputs.BareMetalNodePoolUpgradePolicyResponse']:
        """
        The worker node pool upgrade policy.
        """
        return pulumi.get(self, "upgrade_policy")

