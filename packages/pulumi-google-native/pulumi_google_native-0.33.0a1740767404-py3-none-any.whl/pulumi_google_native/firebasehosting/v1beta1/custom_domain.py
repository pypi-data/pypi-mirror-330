# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['CustomDomainArgs', 'CustomDomain']

@pulumi.input_type
class CustomDomainArgs:
    def __init__(__self__, *,
                 custom_domain_id: pulumi.Input[str],
                 site_id: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cert_preference: Optional[pulumi.Input['CustomDomainCertPreference']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redirect_target: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomDomain resource.
        :param pulumi.Input[str] custom_domain_id: Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        :param pulumi.Input['CustomDomainCertPreference'] cert_preference: A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels used for extra metadata and/or filtering.
        :param pulumi.Input[str] redirect_target: A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        """
        pulumi.set(__self__, "custom_domain_id", custom_domain_id)
        pulumi.set(__self__, "site_id", site_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cert_preference is not None:
            pulumi.set(__self__, "cert_preference", cert_preference)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if redirect_target is not None:
            pulumi.set(__self__, "redirect_target", redirect_target)

    @property
    @pulumi.getter(name="customDomainId")
    def custom_domain_id(self) -> pulumi.Input[str]:
        """
        Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        """
        return pulumi.get(self, "custom_domain_id")

    @custom_domain_id.setter
    def custom_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_domain_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="certPreference")
    def cert_preference(self) -> Optional[pulumi.Input['CustomDomainCertPreference']]:
        """
        A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        """
        return pulumi.get(self, "cert_preference")

    @cert_preference.setter
    def cert_preference(self, value: Optional[pulumi.Input['CustomDomainCertPreference']]):
        pulumi.set(self, "cert_preference", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels used for extra metadata and/or filtering.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="redirectTarget")
    def redirect_target(self) -> Optional[pulumi.Input[str]]:
        """
        A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        """
        return pulumi.get(self, "redirect_target")

    @redirect_target.setter
    def redirect_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_target", value)


class CustomDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cert_preference: Optional[pulumi.Input['CustomDomainCertPreference']] = None,
                 custom_domain_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redirect_target: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a `CustomDomain`.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        :param pulumi.Input['CustomDomainCertPreference'] cert_preference: A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        :param pulumi.Input[str] custom_domain_id: Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels used for extra metadata and/or filtering.
        :param pulumi.Input[str] redirect_target: A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a `CustomDomain`.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param CustomDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cert_preference: Optional[pulumi.Input['CustomDomainCertPreference']] = None,
                 custom_domain_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 redirect_target: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomDomainArgs.__new__(CustomDomainArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["cert_preference"] = cert_preference
            if custom_domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_domain_id'")
            __props__.__dict__["custom_domain_id"] = custom_domain_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["project"] = project
            __props__.__dict__["redirect_target"] = redirect_target
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["cert"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["expire_time"] = None
            __props__.__dict__["host_state"] = None
            __props__.__dict__["issues"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["ownership_state"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["required_dns_updates"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["customDomainId", "project", "siteId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CustomDomain, __self__).__init__(
            'google-native:firebasehosting/v1beta1:CustomDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomDomain':
        """
        Get an existing CustomDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomDomainArgs.__new__(CustomDomainArgs)

        __props__.__dict__["annotations"] = None
        __props__.__dict__["cert"] = None
        __props__.__dict__["cert_preference"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["custom_domain_id"] = None
        __props__.__dict__["delete_time"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["expire_time"] = None
        __props__.__dict__["host_state"] = None
        __props__.__dict__["issues"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["ownership_state"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["reconciling"] = None
        __props__.__dict__["redirect_target"] = None
        __props__.__dict__["required_dns_updates"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["update_time"] = None
        return CustomDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output['outputs.CertificateResponse']:
        """
        The SSL certificate Hosting has for this custom domain's domain name. For new custom domains, this often represents Hosting's intent to create a certificate, rather than an actual cert. Check the `state` field for more.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="certPreference")
    def cert_preference(self) -> pulumi.Output[str]:
        """
        A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        """
        return pulumi.get(self, "cert_preference")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The custom domain's create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomainId")
    def custom_domain_id(self) -> pulumi.Output[str]:
        """
        Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
        """
        return pulumi.get(self, "custom_domain_id")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="hostState")
    def host_state(self) -> pulumi.Output[str]:
        """
        The `HostState` of the domain name this `CustomDomain` refers to.
        """
        return pulumi.get(self, "host_state")

    @property
    @pulumi.getter
    def issues(self) -> pulumi.Output[Sequence['outputs.StatusResponse']]:
        """
        A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
        """
        return pulumi.get(self, "issues")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels used for extra metadata and/or filtering.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The fully-qualified name of the `CustomDomain`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownershipState")
    def ownership_state(self) -> pulumi.Output[str]:
        """
        The `OwnershipState` of the domain name this `CustomDomain` refers to.
        """
        return pulumi.get(self, "ownership_state")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="redirectTarget")
    def redirect_target(self) -> pulumi.Output[str]:
        """
        A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        """
        return pulumi.get(self, "redirect_target")

    @property
    @pulumi.getter(name="requiredDnsUpdates")
    def required_dns_updates(self) -> pulumi.Output['outputs.DnsUpdatesResponse']:
        """
        A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
        """
        return pulumi.get(self, "required_dns_updates")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The last time the `CustomDomain` was updated.
        """
        return pulumi.get(self, "update_time")

