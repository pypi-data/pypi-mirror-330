# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCustomDomainResult',
    'AwaitableGetCustomDomainResult',
    'get_custom_domain',
    'get_custom_domain_output',
]

@pulumi.output_type
class GetCustomDomainResult:
    def __init__(__self__, annotations=None, cert=None, cert_preference=None, create_time=None, delete_time=None, etag=None, expire_time=None, host_state=None, issues=None, labels=None, name=None, ownership_state=None, reconciling=None, redirect_target=None, required_dns_updates=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if cert and not isinstance(cert, dict):
            raise TypeError("Expected argument 'cert' to be a dict")
        pulumi.set(__self__, "cert", cert)
        if cert_preference and not isinstance(cert_preference, str):
            raise TypeError("Expected argument 'cert_preference' to be a str")
        pulumi.set(__self__, "cert_preference", cert_preference)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if host_state and not isinstance(host_state, str):
            raise TypeError("Expected argument 'host_state' to be a str")
        pulumi.set(__self__, "host_state", host_state)
        if issues and not isinstance(issues, list):
            raise TypeError("Expected argument 'issues' to be a list")
        pulumi.set(__self__, "issues", issues)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ownership_state and not isinstance(ownership_state, str):
            raise TypeError("Expected argument 'ownership_state' to be a str")
        pulumi.set(__self__, "ownership_state", ownership_state)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if redirect_target and not isinstance(redirect_target, str):
            raise TypeError("Expected argument 'redirect_target' to be a str")
        pulumi.set(__self__, "redirect_target", redirect_target)
        if required_dns_updates and not isinstance(required_dns_updates, dict):
            raise TypeError("Expected argument 'required_dns_updates' to be a dict")
        pulumi.set(__self__, "required_dns_updates", required_dns_updates)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def cert(self) -> 'outputs.CertificateResponse':
        """
        The SSL certificate Hosting has for this custom domain's domain name. For new custom domains, this often represents Hosting's intent to create a certificate, rather than an actual cert. Check the `state` field for more.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="certPreference")
    def cert_preference(self) -> str:
        """
        A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        """
        return pulumi.get(self, "cert_preference")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The custom domain's create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="hostState")
    def host_state(self) -> str:
        """
        The `HostState` of the domain name this `CustomDomain` refers to.
        """
        return pulumi.get(self, "host_state")

    @property
    @pulumi.getter
    def issues(self) -> Sequence['outputs.StatusResponse']:
        """
        A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
        """
        return pulumi.get(self, "issues")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels used for extra metadata and/or filtering.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The fully-qualified name of the `CustomDomain`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownershipState")
    def ownership_state(self) -> str:
        """
        The `OwnershipState` of the domain name this `CustomDomain` refers to.
        """
        return pulumi.get(self, "ownership_state")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="redirectTarget")
    def redirect_target(self) -> str:
        """
        A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        """
        return pulumi.get(self, "redirect_target")

    @property
    @pulumi.getter(name="requiredDnsUpdates")
    def required_dns_updates(self) -> 'outputs.DnsUpdatesResponse':
        """
        A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
        """
        return pulumi.get(self, "required_dns_updates")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last time the `CustomDomain` was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetCustomDomainResult(GetCustomDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomDomainResult(
            annotations=self.annotations,
            cert=self.cert,
            cert_preference=self.cert_preference,
            create_time=self.create_time,
            delete_time=self.delete_time,
            etag=self.etag,
            expire_time=self.expire_time,
            host_state=self.host_state,
            issues=self.issues,
            labels=self.labels,
            name=self.name,
            ownership_state=self.ownership_state,
            reconciling=self.reconciling,
            redirect_target=self.redirect_target,
            required_dns_updates=self.required_dns_updates,
            update_time=self.update_time)


def get_custom_domain(custom_domain_id: Optional[str] = None,
                      project: Optional[str] = None,
                      site_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomDomainResult:
    """
    Gets the specified `CustomDomain`.
    """
    __args__ = dict()
    __args__['customDomainId'] = custom_domain_id
    __args__['project'] = project
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firebasehosting/v1beta1:getCustomDomain', __args__, opts=opts, typ=GetCustomDomainResult).value

    return AwaitableGetCustomDomainResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        cert=pulumi.get(__ret__, 'cert'),
        cert_preference=pulumi.get(__ret__, 'cert_preference'),
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        etag=pulumi.get(__ret__, 'etag'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        host_state=pulumi.get(__ret__, 'host_state'),
        issues=pulumi.get(__ret__, 'issues'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        ownership_state=pulumi.get(__ret__, 'ownership_state'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        redirect_target=pulumi.get(__ret__, 'redirect_target'),
        required_dns_updates=pulumi.get(__ret__, 'required_dns_updates'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_custom_domain)
def get_custom_domain_output(custom_domain_id: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             site_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomDomainResult]:
    """
    Gets the specified `CustomDomain`.
    """
    ...
