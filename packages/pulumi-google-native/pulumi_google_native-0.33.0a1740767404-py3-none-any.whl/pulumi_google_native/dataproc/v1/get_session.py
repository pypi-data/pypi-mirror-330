# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSessionResult',
    'AwaitableGetSessionResult',
    'get_session',
    'get_session_output',
]

@pulumi.output_type
class GetSessionResult:
    def __init__(__self__, create_time=None, creator=None, environment_config=None, jupyter_session=None, labels=None, name=None, runtime_config=None, runtime_info=None, session_template=None, state=None, state_history=None, state_message=None, state_time=None, user=None, uuid=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if environment_config and not isinstance(environment_config, dict):
            raise TypeError("Expected argument 'environment_config' to be a dict")
        pulumi.set(__self__, "environment_config", environment_config)
        if jupyter_session and not isinstance(jupyter_session, dict):
            raise TypeError("Expected argument 'jupyter_session' to be a dict")
        pulumi.set(__self__, "jupyter_session", jupyter_session)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if runtime_config and not isinstance(runtime_config, dict):
            raise TypeError("Expected argument 'runtime_config' to be a dict")
        pulumi.set(__self__, "runtime_config", runtime_config)
        if runtime_info and not isinstance(runtime_info, dict):
            raise TypeError("Expected argument 'runtime_info' to be a dict")
        pulumi.set(__self__, "runtime_info", runtime_info)
        if session_template and not isinstance(session_template, str):
            raise TypeError("Expected argument 'session_template' to be a str")
        pulumi.set(__self__, "session_template", session_template)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_history and not isinstance(state_history, list):
            raise TypeError("Expected argument 'state_history' to be a list")
        pulumi.set(__self__, "state_history", state_history)
        if state_message and not isinstance(state_message, str):
            raise TypeError("Expected argument 'state_message' to be a str")
        pulumi.set(__self__, "state_message", state_message)
        if state_time and not isinstance(state_time, str):
            raise TypeError("Expected argument 'state_time' to be a str")
        pulumi.set(__self__, "state_time", state_time)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the session was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        """
        The email address of the user who created the session.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="environmentConfig")
    def environment_config(self) -> 'outputs.EnvironmentConfigResponse':
        """
        Optional. Environment configuration for the session execution.
        """
        return pulumi.get(self, "environment_config")

    @property
    @pulumi.getter(name="jupyterSession")
    def jupyter_session(self) -> 'outputs.JupyterConfigResponse':
        """
        Optional. Jupyter session config.
        """
        return pulumi.get(self, "jupyter_session")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the session.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runtimeConfig")
    def runtime_config(self) -> 'outputs.RuntimeConfigResponse':
        """
        Optional. Runtime configuration for the session execution.
        """
        return pulumi.get(self, "runtime_config")

    @property
    @pulumi.getter(name="runtimeInfo")
    def runtime_info(self) -> 'outputs.RuntimeInfoResponse':
        """
        Runtime information about session execution.
        """
        return pulumi.get(self, "runtime_info")

    @property
    @pulumi.getter(name="sessionTemplate")
    def session_template(self) -> str:
        """
        Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
        """
        return pulumi.get(self, "session_template")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A state of the session.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateHistory")
    def state_history(self) -> Sequence['outputs.SessionStateHistoryResponse']:
        """
        Historical state information for the session.
        """
        return pulumi.get(self, "state_history")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        Session state details, such as the failure description if the state is FAILED.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="stateTime")
    def state_time(self) -> str:
        """
        The time when the session entered the current state.
        """
        return pulumi.get(self, "state_time")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Optional. The email address of the user who owns the session.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
        """
        return pulumi.get(self, "uuid")


class AwaitableGetSessionResult(GetSessionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSessionResult(
            create_time=self.create_time,
            creator=self.creator,
            environment_config=self.environment_config,
            jupyter_session=self.jupyter_session,
            labels=self.labels,
            name=self.name,
            runtime_config=self.runtime_config,
            runtime_info=self.runtime_info,
            session_template=self.session_template,
            state=self.state,
            state_history=self.state_history,
            state_message=self.state_message,
            state_time=self.state_time,
            user=self.user,
            uuid=self.uuid)


def get_session(location: Optional[str] = None,
                project: Optional[str] = None,
                session_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSessionResult:
    """
    Gets the resource representation for an interactive session.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['sessionId'] = session_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dataproc/v1:getSession', __args__, opts=opts, typ=GetSessionResult).value

    return AwaitableGetSessionResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        creator=pulumi.get(__ret__, 'creator'),
        environment_config=pulumi.get(__ret__, 'environment_config'),
        jupyter_session=pulumi.get(__ret__, 'jupyter_session'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        runtime_config=pulumi.get(__ret__, 'runtime_config'),
        runtime_info=pulumi.get(__ret__, 'runtime_info'),
        session_template=pulumi.get(__ret__, 'session_template'),
        state=pulumi.get(__ret__, 'state'),
        state_history=pulumi.get(__ret__, 'state_history'),
        state_message=pulumi.get(__ret__, 'state_message'),
        state_time=pulumi.get(__ret__, 'state_time'),
        user=pulumi.get(__ret__, 'user'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_session)
def get_session_output(location: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       session_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSessionResult]:
    """
    Gets the resource representation for an interactive session.
    """
    ...
