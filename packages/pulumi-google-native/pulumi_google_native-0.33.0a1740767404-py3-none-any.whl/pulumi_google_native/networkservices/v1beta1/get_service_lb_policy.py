# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetServiceLbPolicyResult',
    'AwaitableGetServiceLbPolicyResult',
    'get_service_lb_policy',
    'get_service_lb_policy_output',
]

@pulumi.output_type
class GetServiceLbPolicyResult:
    def __init__(__self__, auto_capacity_drain=None, create_time=None, description=None, failover_config=None, labels=None, load_balancing_algorithm=None, name=None, update_time=None):
        if auto_capacity_drain and not isinstance(auto_capacity_drain, dict):
            raise TypeError("Expected argument 'auto_capacity_drain' to be a dict")
        pulumi.set(__self__, "auto_capacity_drain", auto_capacity_drain)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if failover_config and not isinstance(failover_config, dict):
            raise TypeError("Expected argument 'failover_config' to be a dict")
        pulumi.set(__self__, "failover_config", failover_config)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if load_balancing_algorithm and not isinstance(load_balancing_algorithm, str):
            raise TypeError("Expected argument 'load_balancing_algorithm' to be a str")
        pulumi.set(__self__, "load_balancing_algorithm", load_balancing_algorithm)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="autoCapacityDrain")
    def auto_capacity_drain(self) -> 'outputs.ServiceLbPolicyAutoCapacityDrainResponse':
        """
        Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
        """
        return pulumi.get(self, "auto_capacity_drain")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when this resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. A free-text description of the resource. Max length 1024 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failoverConfig")
    def failover_config(self) -> 'outputs.ServiceLbPolicyFailoverConfigResponse':
        """
        Optional. Configuration related to health based failover.
        """
        return pulumi.get(self, "failover_config")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Set of label tags associated with the ServiceLbPolicy resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loadBalancingAlgorithm")
    def load_balancing_algorithm(self) -> str:
        """
        Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
        """
        return pulumi.get(self, "load_balancing_algorithm")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when this resource was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetServiceLbPolicyResult(GetServiceLbPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceLbPolicyResult(
            auto_capacity_drain=self.auto_capacity_drain,
            create_time=self.create_time,
            description=self.description,
            failover_config=self.failover_config,
            labels=self.labels,
            load_balancing_algorithm=self.load_balancing_algorithm,
            name=self.name,
            update_time=self.update_time)


def get_service_lb_policy(location: Optional[str] = None,
                          project: Optional[str] = None,
                          service_lb_policy_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceLbPolicyResult:
    """
    Gets details of a single ServiceLbPolicy.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['serviceLbPolicyId'] = service_lb_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networkservices/v1beta1:getServiceLbPolicy', __args__, opts=opts, typ=GetServiceLbPolicyResult).value

    return AwaitableGetServiceLbPolicyResult(
        auto_capacity_drain=pulumi.get(__ret__, 'auto_capacity_drain'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        failover_config=pulumi.get(__ret__, 'failover_config'),
        labels=pulumi.get(__ret__, 'labels'),
        load_balancing_algorithm=pulumi.get(__ret__, 'load_balancing_algorithm'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_service_lb_policy)
def get_service_lb_policy_output(location: Optional[pulumi.Input[str]] = None,
                                 project: Optional[pulumi.Input[Optional[str]]] = None,
                                 service_lb_policy_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceLbPolicyResult]:
    """
    Gets details of a single ServiceLbPolicy.
    """
    ...
