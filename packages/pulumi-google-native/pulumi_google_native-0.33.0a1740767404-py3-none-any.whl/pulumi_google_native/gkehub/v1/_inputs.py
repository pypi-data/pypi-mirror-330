# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AppDevExperienceFeatureSpecArgs',
    'ApplianceClusterArgs',
    'AuditConfigArgs',
    'AuditLogConfigArgs',
    'AuthorityArgs',
    'BinaryAuthorizationConfigArgs',
    'BindingArgs',
    'ClusterUpgradeFleetSpecArgs',
    'ClusterUpgradeGKEUpgradeOverrideArgs',
    'ClusterUpgradeGKEUpgradeArgs',
    'ClusterUpgradePostConditionsArgs',
    'CommonFeatureSpecArgs',
    'CommonFleetDefaultMemberConfigSpecArgs',
    'ConfigManagementConfigSyncArgs',
    'ConfigManagementGitConfigArgs',
    'ConfigManagementHierarchyControllerConfigArgs',
    'ConfigManagementMembershipSpecArgs',
    'ConfigManagementOciConfigArgs',
    'ConfigManagementPolicyControllerMonitoringArgs',
    'ConfigManagementPolicyControllerArgs',
    'DefaultClusterConfigArgs',
    'EdgeClusterArgs',
    'ExprArgs',
    'FleetObservabilityFeatureSpecArgs',
    'FleetObservabilityLoggingConfigArgs',
    'FleetObservabilityMembershipSpecArgs',
    'FleetObservabilityRoutingConfigArgs',
    'GkeClusterArgs',
    'IdentityServiceAuthMethodArgs',
    'IdentityServiceAzureADConfigArgs',
    'IdentityServiceGoogleConfigArgs',
    'IdentityServiceMembershipSpecArgs',
    'IdentityServiceOidcConfigArgs',
    'KubernetesResourceArgs',
    'MembershipEndpointArgs',
    'MembershipFeatureSpecArgs',
    'MonitoringConfigArgs',
    'MultiCloudClusterArgs',
    'MultiClusterIngressFeatureSpecArgs',
    'OnPremClusterArgs',
    'OriginArgs',
    'PolicyBindingArgs',
    'PolicyControllerBundleInstallSpecArgs',
    'PolicyControllerHubConfigArgs',
    'PolicyControllerMembershipSpecArgs',
    'PolicyControllerMonitoringConfigArgs',
    'PolicyControllerPolicyContentSpecArgs',
    'PolicyControllerPolicyControllerDeploymentConfigArgs',
    'PolicyControllerResourceListArgs',
    'PolicyControllerResourceRequirementsArgs',
    'PolicyControllerTemplateLibraryConfigArgs',
    'PolicyControllerTolerationArgs',
    'ResourceOptionsArgs',
    'RoleArgs',
    'ScopeFeatureSpecArgs',
    'SecurityPostureConfigArgs',
    'ServiceMeshMembershipSpecArgs',
]

@pulumi.input_type
class AppDevExperienceFeatureSpecArgs:
    def __init__(__self__):
        """
        Spec for App Dev Experience Feature.
        """
        pass


@pulumi.input_type
class ApplianceClusterArgs:
    def __init__(__self__, *,
                 resource_link: Optional[pulumi.Input[str]] = None):
        """
        ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
        :param pulumi.Input[str] resource_link: Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
        """
        if resource_link is not None:
            pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
        """
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input['AuditLogConfigLogType']] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input['AuditLogConfigLogType'] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input['AuditLogConfigLogType']]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input['AuditLogConfigLogType']]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class AuthorityArgs:
    def __init__(__self__, *,
                 issuer: Optional[pulumi.Input[str]] = None,
                 oidc_jwks: Optional[pulumi.Input[str]] = None):
        """
        Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        :param pulumi.Input[str] issuer: Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
        :param pulumi.Input[str] oidc_jwks: Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
        """
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if oidc_jwks is not None:
            pulumi.set(__self__, "oidc_jwks", oidc_jwks)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="oidcJwks")
    def oidc_jwks(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
        """
        return pulumi.get(self, "oidc_jwks")

    @oidc_jwks.setter
    def oidc_jwks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_jwks", value)


@pulumi.input_type
class BinaryAuthorizationConfigArgs:
    def __init__(__self__, *,
                 evaluation_mode: Optional[pulumi.Input['BinaryAuthorizationConfigEvaluationMode']] = None,
                 policy_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindingArgs']]]] = None):
        """
        BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
        :param pulumi.Input['BinaryAuthorizationConfigEvaluationMode'] evaluation_mode: Optional. Mode of operation for binauthz policy evaluation.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyBindingArgs']]] policy_bindings: Optional. Binauthz policies that apply to this cluster.
        """
        if evaluation_mode is not None:
            pulumi.set(__self__, "evaluation_mode", evaluation_mode)
        if policy_bindings is not None:
            pulumi.set(__self__, "policy_bindings", policy_bindings)

    @property
    @pulumi.getter(name="evaluationMode")
    def evaluation_mode(self) -> Optional[pulumi.Input['BinaryAuthorizationConfigEvaluationMode']]:
        """
        Optional. Mode of operation for binauthz policy evaluation.
        """
        return pulumi.get(self, "evaluation_mode")

    @evaluation_mode.setter
    def evaluation_mode(self, value: Optional[pulumi.Input['BinaryAuthorizationConfigEvaluationMode']]):
        pulumi.set(self, "evaluation_mode", value)

    @property
    @pulumi.getter(name="policyBindings")
    def policy_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindingArgs']]]]:
        """
        Optional. Binauthz policies that apply to this cluster.
        """
        return pulumi.get(self, "policy_bindings")

    @policy_bindings.setter
    def policy_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBindingArgs']]]]):
        pulumi.set(self, "policy_bindings", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ClusterUpgradeFleetSpecArgs:
    def __init__(__self__, *,
                 post_conditions: pulumi.Input['ClusterUpgradePostConditionsArgs'],
                 gke_upgrade_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeGKEUpgradeOverrideArgs']]]] = None,
                 upstream_fleets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
        :param pulumi.Input['ClusterUpgradePostConditionsArgs'] post_conditions: Post conditions to evaluate to mark an upgrade COMPLETE. Required.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeGKEUpgradeOverrideArgs']]] gke_upgrade_overrides: Allow users to override some properties of each GKE upgrade.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] upstream_fleets: This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
        """
        pulumi.set(__self__, "post_conditions", post_conditions)
        if gke_upgrade_overrides is not None:
            pulumi.set(__self__, "gke_upgrade_overrides", gke_upgrade_overrides)
        if upstream_fleets is not None:
            pulumi.set(__self__, "upstream_fleets", upstream_fleets)

    @property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> pulumi.Input['ClusterUpgradePostConditionsArgs']:
        """
        Post conditions to evaluate to mark an upgrade COMPLETE. Required.
        """
        return pulumi.get(self, "post_conditions")

    @post_conditions.setter
    def post_conditions(self, value: pulumi.Input['ClusterUpgradePostConditionsArgs']):
        pulumi.set(self, "post_conditions", value)

    @property
    @pulumi.getter(name="gkeUpgradeOverrides")
    def gke_upgrade_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeGKEUpgradeOverrideArgs']]]]:
        """
        Allow users to override some properties of each GKE upgrade.
        """
        return pulumi.get(self, "gke_upgrade_overrides")

    @gke_upgrade_overrides.setter
    def gke_upgrade_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterUpgradeGKEUpgradeOverrideArgs']]]]):
        pulumi.set(self, "gke_upgrade_overrides", value)

    @property
    @pulumi.getter(name="upstreamFleets")
    def upstream_fleets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
        """
        return pulumi.get(self, "upstream_fleets")

    @upstream_fleets.setter
    def upstream_fleets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_fleets", value)


@pulumi.input_type
class ClusterUpgradeGKEUpgradeOverrideArgs:
    def __init__(__self__, *,
                 post_conditions: pulumi.Input['ClusterUpgradePostConditionsArgs'],
                 upgrade: pulumi.Input['ClusterUpgradeGKEUpgradeArgs']):
        """
        Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
        :param pulumi.Input['ClusterUpgradePostConditionsArgs'] post_conditions: Post conditions to override for the specified upgrade (name + version). Required.
        :param pulumi.Input['ClusterUpgradeGKEUpgradeArgs'] upgrade: Which upgrade to override. Required.
        """
        pulumi.set(__self__, "post_conditions", post_conditions)
        pulumi.set(__self__, "upgrade", upgrade)

    @property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> pulumi.Input['ClusterUpgradePostConditionsArgs']:
        """
        Post conditions to override for the specified upgrade (name + version). Required.
        """
        return pulumi.get(self, "post_conditions")

    @post_conditions.setter
    def post_conditions(self, value: pulumi.Input['ClusterUpgradePostConditionsArgs']):
        pulumi.set(self, "post_conditions", value)

    @property
    @pulumi.getter
    def upgrade(self) -> pulumi.Input['ClusterUpgradeGKEUpgradeArgs']:
        """
        Which upgrade to override. Required.
        """
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: pulumi.Input['ClusterUpgradeGKEUpgradeArgs']):
        pulumi.set(self, "upgrade", value)


@pulumi.input_type
class ClusterUpgradeGKEUpgradeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
        :param pulumi.Input[str] name: Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
        :param pulumi.Input[str] version: Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterUpgradePostConditionsArgs:
    def __init__(__self__, *,
                 soaking: pulumi.Input[str]):
        """
        Post conditional checks after an upgrade has been applied on all eligible clusters.
        :param pulumi.Input[str] soaking: Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
        """
        pulumi.set(__self__, "soaking", soaking)

    @property
    @pulumi.getter
    def soaking(self) -> pulumi.Input[str]:
        """
        Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
        """
        return pulumi.get(self, "soaking")

    @soaking.setter
    def soaking(self, value: pulumi.Input[str]):
        pulumi.set(self, "soaking", value)


@pulumi.input_type
class CommonFeatureSpecArgs:
    def __init__(__self__, *,
                 appdevexperience: Optional[pulumi.Input['AppDevExperienceFeatureSpecArgs']] = None,
                 clusterupgrade: Optional[pulumi.Input['ClusterUpgradeFleetSpecArgs']] = None,
                 fleetobservability: Optional[pulumi.Input['FleetObservabilityFeatureSpecArgs']] = None,
                 multiclusteringress: Optional[pulumi.Input['MultiClusterIngressFeatureSpecArgs']] = None):
        """
        CommonFeatureSpec contains Hub-wide configuration information
        :param pulumi.Input['AppDevExperienceFeatureSpecArgs'] appdevexperience: Appdevexperience specific spec.
        :param pulumi.Input['ClusterUpgradeFleetSpecArgs'] clusterupgrade: ClusterUpgrade (fleet-based) feature spec.
        :param pulumi.Input['FleetObservabilityFeatureSpecArgs'] fleetobservability: FleetObservability feature spec.
        :param pulumi.Input['MultiClusterIngressFeatureSpecArgs'] multiclusteringress: Multicluster Ingress-specific spec.
        """
        if appdevexperience is not None:
            pulumi.set(__self__, "appdevexperience", appdevexperience)
        if clusterupgrade is not None:
            pulumi.set(__self__, "clusterupgrade", clusterupgrade)
        if fleetobservability is not None:
            pulumi.set(__self__, "fleetobservability", fleetobservability)
        if multiclusteringress is not None:
            pulumi.set(__self__, "multiclusteringress", multiclusteringress)

    @property
    @pulumi.getter
    def appdevexperience(self) -> Optional[pulumi.Input['AppDevExperienceFeatureSpecArgs']]:
        """
        Appdevexperience specific spec.
        """
        return pulumi.get(self, "appdevexperience")

    @appdevexperience.setter
    def appdevexperience(self, value: Optional[pulumi.Input['AppDevExperienceFeatureSpecArgs']]):
        pulumi.set(self, "appdevexperience", value)

    @property
    @pulumi.getter
    def clusterupgrade(self) -> Optional[pulumi.Input['ClusterUpgradeFleetSpecArgs']]:
        """
        ClusterUpgrade (fleet-based) feature spec.
        """
        return pulumi.get(self, "clusterupgrade")

    @clusterupgrade.setter
    def clusterupgrade(self, value: Optional[pulumi.Input['ClusterUpgradeFleetSpecArgs']]):
        pulumi.set(self, "clusterupgrade", value)

    @property
    @pulumi.getter
    def fleetobservability(self) -> Optional[pulumi.Input['FleetObservabilityFeatureSpecArgs']]:
        """
        FleetObservability feature spec.
        """
        return pulumi.get(self, "fleetobservability")

    @fleetobservability.setter
    def fleetobservability(self, value: Optional[pulumi.Input['FleetObservabilityFeatureSpecArgs']]):
        pulumi.set(self, "fleetobservability", value)

    @property
    @pulumi.getter
    def multiclusteringress(self) -> Optional[pulumi.Input['MultiClusterIngressFeatureSpecArgs']]:
        """
        Multicluster Ingress-specific spec.
        """
        return pulumi.get(self, "multiclusteringress")

    @multiclusteringress.setter
    def multiclusteringress(self, value: Optional[pulumi.Input['MultiClusterIngressFeatureSpecArgs']]):
        pulumi.set(self, "multiclusteringress", value)


@pulumi.input_type
class CommonFleetDefaultMemberConfigSpecArgs:
    def __init__(__self__, *,
                 configmanagement: Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']] = None,
                 identityservice: Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']] = None,
                 mesh: Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']] = None,
                 policycontroller: Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']] = None):
        """
        CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
        :param pulumi.Input['ConfigManagementMembershipSpecArgs'] configmanagement: Config Management-specific spec.
        :param pulumi.Input['IdentityServiceMembershipSpecArgs'] identityservice: Identity Service-specific spec.
        :param pulumi.Input['ServiceMeshMembershipSpecArgs'] mesh: Anthos Service Mesh-specific spec
        :param pulumi.Input['PolicyControllerMembershipSpecArgs'] policycontroller: Policy Controller spec.
        """
        if configmanagement is not None:
            pulumi.set(__self__, "configmanagement", configmanagement)
        if identityservice is not None:
            pulumi.set(__self__, "identityservice", identityservice)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if policycontroller is not None:
            pulumi.set(__self__, "policycontroller", policycontroller)

    @property
    @pulumi.getter
    def configmanagement(self) -> Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']]:
        """
        Config Management-specific spec.
        """
        return pulumi.get(self, "configmanagement")

    @configmanagement.setter
    def configmanagement(self, value: Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']]):
        pulumi.set(self, "configmanagement", value)

    @property
    @pulumi.getter
    def identityservice(self) -> Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']]:
        """
        Identity Service-specific spec.
        """
        return pulumi.get(self, "identityservice")

    @identityservice.setter
    def identityservice(self, value: Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']]):
        pulumi.set(self, "identityservice", value)

    @property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']]:
        """
        Anthos Service Mesh-specific spec
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']]):
        pulumi.set(self, "mesh", value)

    @property
    @pulumi.getter
    def policycontroller(self) -> Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']]:
        """
        Policy Controller spec.
        """
        return pulumi.get(self, "policycontroller")

    @policycontroller.setter
    def policycontroller(self, value: Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']]):
        pulumi.set(self, "policycontroller", value)


@pulumi.input_type
class ConfigManagementConfigSyncArgs:
    def __init__(__self__, *,
                 allow_vertical_scale: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 git: Optional[pulumi.Input['ConfigManagementGitConfigArgs']] = None,
                 metrics_gcp_service_account_email: Optional[pulumi.Input[str]] = None,
                 oci: Optional[pulumi.Input['ConfigManagementOciConfigArgs']] = None,
                 prevent_drift: Optional[pulumi.Input[bool]] = None,
                 source_format: Optional[pulumi.Input[str]] = None):
        """
        Configuration for Config Sync
        :param pulumi.Input[bool] allow_vertical_scale: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
        :param pulumi.Input[bool] enabled: Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        :param pulumi.Input['ConfigManagementGitConfigArgs'] git: Git repo configuration for the cluster.
        :param pulumi.Input[str] metrics_gcp_service_account_email: The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
        :param pulumi.Input['ConfigManagementOciConfigArgs'] oci: OCI repo configuration for the cluster
        :param pulumi.Input[bool] prevent_drift: Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        :param pulumi.Input[str] source_format: Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        if allow_vertical_scale is not None:
            warnings.warn("""Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.""", DeprecationWarning)
            pulumi.log.warn("""allow_vertical_scale is deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.""")
        if allow_vertical_scale is not None:
            pulumi.set(__self__, "allow_vertical_scale", allow_vertical_scale)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if metrics_gcp_service_account_email is not None:
            pulumi.set(__self__, "metrics_gcp_service_account_email", metrics_gcp_service_account_email)
        if oci is not None:
            pulumi.set(__self__, "oci", oci)
        if prevent_drift is not None:
            pulumi.set(__self__, "prevent_drift", prevent_drift)
        if source_format is not None:
            pulumi.set(__self__, "source_format", source_format)

    @property
    @pulumi.getter(name="allowVerticalScale")
    @_utilities.deprecated("""Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.""")
    def allow_vertical_scale(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
        """
        return pulumi.get(self, "allow_vertical_scale")

    @allow_vertical_scale.setter
    def allow_vertical_scale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_vertical_scale", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['ConfigManagementGitConfigArgs']]:
        """
        Git repo configuration for the cluster.
        """
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['ConfigManagementGitConfigArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter(name="metricsGcpServiceAccountEmail")
    def metrics_gcp_service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
        """
        return pulumi.get(self, "metrics_gcp_service_account_email")

    @metrics_gcp_service_account_email.setter
    def metrics_gcp_service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_gcp_service_account_email", value)

    @property
    @pulumi.getter
    def oci(self) -> Optional[pulumi.Input['ConfigManagementOciConfigArgs']]:
        """
        OCI repo configuration for the cluster
        """
        return pulumi.get(self, "oci")

    @oci.setter
    def oci(self, value: Optional[pulumi.Input['ConfigManagementOciConfigArgs']]):
        pulumi.set(self, "oci", value)

    @property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @prevent_drift.setter
    def prevent_drift(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_drift", value)

    @property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        return pulumi.get(self, "source_format")

    @source_format.setter
    def source_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_format", value)


@pulumi.input_type
class ConfigManagementGitConfigArgs:
    def __init__(__self__, *,
                 gcp_service_account_email: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 policy_dir: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 sync_branch: Optional[pulumi.Input[str]] = None,
                 sync_repo: Optional[pulumi.Input[str]] = None,
                 sync_rev: Optional[pulumi.Input[str]] = None,
                 sync_wait_secs: Optional[pulumi.Input[str]] = None):
        """
        Git repo configuration for a single cluster.
        :param pulumi.Input[str] gcp_service_account_email: The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
        :param pulumi.Input[str] https_proxy: URL for the HTTPS proxy to be used when communicating with the Git repo.
        :param pulumi.Input[str] policy_dir: The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        :param pulumi.Input[str] secret_type: Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
        :param pulumi.Input[str] sync_branch: The branch of the repository to sync from. Default: master.
        :param pulumi.Input[str] sync_repo: The URL of the Git repository to use as the source of truth.
        :param pulumi.Input[str] sync_rev: Git revision (tag or hash) to check out. Default HEAD.
        :param pulumi.Input[str] sync_wait_secs: Period in seconds between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_branch is not None:
            pulumi.set(__self__, "sync_branch", sync_branch)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_rev is not None:
            pulumi.set(__self__, "sync_rev", sync_rev)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_service_account_email", value)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        URL for the HTTPS proxy to be used when communicating with the Git repo.
        """
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        """
        return pulumi.get(self, "policy_dir")

    @policy_dir.setter
    def policy_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_dir", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The branch of the repository to sync from. Default: master.
        """
        return pulumi.get(self, "sync_branch")

    @sync_branch.setter
    def sync_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_branch", value)

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Git repository to use as the source of truth.
        """
        return pulumi.get(self, "sync_repo")

    @sync_repo.setter
    def sync_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_repo", value)

    @property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Git revision (tag or hash) to check out. Default HEAD.
        """
        return pulumi.get(self, "sync_rev")

    @sync_rev.setter
    def sync_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_rev", value)

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[pulumi.Input[str]]:
        """
        Period in seconds between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")

    @sync_wait_secs.setter
    def sync_wait_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_wait_secs", value)


@pulumi.input_type
class ConfigManagementHierarchyControllerConfigArgs:
    def __init__(__self__, *,
                 enable_hierarchical_resource_quota: Optional[pulumi.Input[bool]] = None,
                 enable_pod_tree_labels: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for Hierarchy Controller
        :param pulumi.Input[bool] enable_hierarchical_resource_quota: Whether hierarchical resource quota is enabled in this cluster.
        :param pulumi.Input[bool] enable_pod_tree_labels: Whether pod tree labels are enabled in this cluster.
        :param pulumi.Input[bool] enabled: Whether Hierarchy Controller is enabled in this cluster.
        """
        if enable_hierarchical_resource_quota is not None:
            pulumi.set(__self__, "enable_hierarchical_resource_quota", enable_hierarchical_resource_quota)
        if enable_pod_tree_labels is not None:
            pulumi.set(__self__, "enable_pod_tree_labels", enable_pod_tree_labels)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="enableHierarchicalResourceQuota")
    def enable_hierarchical_resource_quota(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether hierarchical resource quota is enabled in this cluster.
        """
        return pulumi.get(self, "enable_hierarchical_resource_quota")

    @enable_hierarchical_resource_quota.setter
    def enable_hierarchical_resource_quota(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hierarchical_resource_quota", value)

    @property
    @pulumi.getter(name="enablePodTreeLabels")
    def enable_pod_tree_labels(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether pod tree labels are enabled in this cluster.
        """
        return pulumi.get(self, "enable_pod_tree_labels")

    @enable_pod_tree_labels.setter
    def enable_pod_tree_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pod_tree_labels", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Hierarchy Controller is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ConfigManagementMembershipSpecArgs:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[str]] = None,
                 config_sync: Optional[pulumi.Input['ConfigManagementConfigSyncArgs']] = None,
                 hierarchy_controller: Optional[pulumi.Input['ConfigManagementHierarchyControllerConfigArgs']] = None,
                 policy_controller: Optional[pulumi.Input['ConfigManagementPolicyControllerArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
        :param pulumi.Input[str] cluster: The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
        :param pulumi.Input['ConfigManagementConfigSyncArgs'] config_sync: Config Sync configuration for the cluster.
        :param pulumi.Input['ConfigManagementHierarchyControllerConfigArgs'] hierarchy_controller: Hierarchy Controller configuration for the cluster.
        :param pulumi.Input['ConfigManagementPolicyControllerArgs'] policy_controller: Policy Controller configuration for the cluster.
        :param pulumi.Input[str] version: Version of ACM installed.
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if config_sync is not None:
            pulumi.set(__self__, "config_sync", config_sync)
        if hierarchy_controller is not None:
            pulumi.set(__self__, "hierarchy_controller", hierarchy_controller)
        if policy_controller is not None:
            pulumi.set(__self__, "policy_controller", policy_controller)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional[pulumi.Input['ConfigManagementConfigSyncArgs']]:
        """
        Config Sync configuration for the cluster.
        """
        return pulumi.get(self, "config_sync")

    @config_sync.setter
    def config_sync(self, value: Optional[pulumi.Input['ConfigManagementConfigSyncArgs']]):
        pulumi.set(self, "config_sync", value)

    @property
    @pulumi.getter(name="hierarchyController")
    def hierarchy_controller(self) -> Optional[pulumi.Input['ConfigManagementHierarchyControllerConfigArgs']]:
        """
        Hierarchy Controller configuration for the cluster.
        """
        return pulumi.get(self, "hierarchy_controller")

    @hierarchy_controller.setter
    def hierarchy_controller(self, value: Optional[pulumi.Input['ConfigManagementHierarchyControllerConfigArgs']]):
        pulumi.set(self, "hierarchy_controller", value)

    @property
    @pulumi.getter(name="policyController")
    def policy_controller(self) -> Optional[pulumi.Input['ConfigManagementPolicyControllerArgs']]:
        """
        Policy Controller configuration for the cluster.
        """
        return pulumi.get(self, "policy_controller")

    @policy_controller.setter
    def policy_controller(self, value: Optional[pulumi.Input['ConfigManagementPolicyControllerArgs']]):
        pulumi.set(self, "policy_controller", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of ACM installed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ConfigManagementOciConfigArgs:
    def __init__(__self__, *,
                 gcp_service_account_email: Optional[pulumi.Input[str]] = None,
                 policy_dir: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 sync_repo: Optional[pulumi.Input[str]] = None,
                 sync_wait_secs: Optional[pulumi.Input[str]] = None):
        """
        OCI repo configuration for a single cluster
        :param pulumi.Input[str] gcp_service_account_email: The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
        :param pulumi.Input[str] policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        :param pulumi.Input[str] secret_type: Type of secret configured for access to the Git repo.
        :param pulumi.Input[str] sync_repo: The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
        :param pulumi.Input[str] sync_wait_secs: Period in seconds between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_service_account_email", value)

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        """
        return pulumi.get(self, "policy_dir")

    @policy_dir.setter
    def policy_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_dir", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of secret configured for access to the Git repo.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[pulumi.Input[str]]:
        """
        The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
        """
        return pulumi.get(self, "sync_repo")

    @sync_repo.setter
    def sync_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_repo", value)

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[pulumi.Input[str]]:
        """
        Period in seconds between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")

    @sync_wait_secs.setter
    def sync_wait_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_wait_secs", value)


@pulumi.input_type
class ConfigManagementPolicyControllerMonitoringArgs:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigManagementPolicyControllerMonitoringBackendsItem']]]] = None):
        """
        PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
        :param pulumi.Input[Sequence[pulumi.Input['ConfigManagementPolicyControllerMonitoringBackendsItem']]] backends: Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigManagementPolicyControllerMonitoringBackendsItem']]]]:
        """
        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigManagementPolicyControllerMonitoringBackendsItem']]]]):
        pulumi.set(self, "backends", value)


@pulumi.input_type
class ConfigManagementPolicyControllerArgs:
    def __init__(__self__, *,
                 audit_interval_seconds: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exemptable_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_denies_enabled: Optional[pulumi.Input[bool]] = None,
                 monitoring: Optional[pulumi.Input['ConfigManagementPolicyControllerMonitoringArgs']] = None,
                 mutation_enabled: Optional[pulumi.Input[bool]] = None,
                 referential_rules_enabled: Optional[pulumi.Input[bool]] = None,
                 template_library_installed: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for Policy Controller
        :param pulumi.Input[str] audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param pulumi.Input[bool] enabled: Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param pulumi.Input[bool] log_denies_enabled: Logs all denies and dry run failures.
        :param pulumi.Input['ConfigManagementPolicyControllerMonitoringArgs'] monitoring: Monitoring specifies the configuration of monitoring.
        :param pulumi.Input[bool] mutation_enabled: Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
        :param pulumi.Input[bool] referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        :param pulumi.Input[bool] template_library_installed: Installs the default template library along with Policy Controller.
        """
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)
        if template_library_installed is not None:
            pulumi.set(__self__, "template_library_installed", template_library_installed)

    @property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @audit_interval_seconds.setter
    def audit_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_interval_seconds", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @exemptable_namespaces.setter
    def exemptable_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exemptable_namespaces", value)

    @property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @log_denies_enabled.setter
    def log_denies_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_denies_enabled", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['ConfigManagementPolicyControllerMonitoringArgs']]:
        """
        Monitoring specifies the configuration of monitoring.
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['ConfigManagementPolicyControllerMonitoringArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
        """
        return pulumi.get(self, "mutation_enabled")

    @mutation_enabled.setter
    def mutation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mutation_enabled", value)

    @property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")

    @referential_rules_enabled.setter
    def referential_rules_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "referential_rules_enabled", value)

    @property
    @pulumi.getter(name="templateLibraryInstalled")
    def template_library_installed(self) -> Optional[pulumi.Input[bool]]:
        """
        Installs the default template library along with Policy Controller.
        """
        return pulumi.get(self, "template_library_installed")

    @template_library_installed.setter
    def template_library_installed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "template_library_installed", value)


@pulumi.input_type
class DefaultClusterConfigArgs:
    def __init__(__self__, *,
                 binary_authorization_config: Optional[pulumi.Input['BinaryAuthorizationConfigArgs']] = None,
                 security_posture_config: Optional[pulumi.Input['SecurityPostureConfigArgs']] = None):
        """
        DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
        :param pulumi.Input['BinaryAuthorizationConfigArgs'] binary_authorization_config: Optional. Enable/Disable binary authorization features for the cluster.
        :param pulumi.Input['SecurityPostureConfigArgs'] security_posture_config: Enable/Disable Security Posture features for the cluster.
        """
        if binary_authorization_config is not None:
            pulumi.set(__self__, "binary_authorization_config", binary_authorization_config)
        if security_posture_config is not None:
            pulumi.set(__self__, "security_posture_config", security_posture_config)

    @property
    @pulumi.getter(name="binaryAuthorizationConfig")
    def binary_authorization_config(self) -> Optional[pulumi.Input['BinaryAuthorizationConfigArgs']]:
        """
        Optional. Enable/Disable binary authorization features for the cluster.
        """
        return pulumi.get(self, "binary_authorization_config")

    @binary_authorization_config.setter
    def binary_authorization_config(self, value: Optional[pulumi.Input['BinaryAuthorizationConfigArgs']]):
        pulumi.set(self, "binary_authorization_config", value)

    @property
    @pulumi.getter(name="securityPostureConfig")
    def security_posture_config(self) -> Optional[pulumi.Input['SecurityPostureConfigArgs']]:
        """
        Enable/Disable Security Posture features for the cluster.
        """
        return pulumi.get(self, "security_posture_config")

    @security_posture_config.setter
    def security_posture_config(self, value: Optional[pulumi.Input['SecurityPostureConfigArgs']]):
        pulumi.set(self, "security_posture_config", value)


@pulumi.input_type
class EdgeClusterArgs:
    def __init__(__self__, *,
                 resource_link: Optional[pulumi.Input[str]] = None):
        """
        EdgeCluster contains information specific to Google Edge Clusters.
        :param pulumi.Input[str] resource_link: Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
        """
        if resource_link is not None:
            pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
        """
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class FleetObservabilityFeatureSpecArgs:
    def __init__(__self__, *,
                 logging_config: Optional[pulumi.Input['FleetObservabilityLoggingConfigArgs']] = None):
        """
        **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
        :param pulumi.Input['FleetObservabilityLoggingConfigArgs'] logging_config: Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        """
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['FleetObservabilityLoggingConfigArgs']]:
        """
        Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['FleetObservabilityLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)


@pulumi.input_type
class FleetObservabilityLoggingConfigArgs:
    def __init__(__self__, *,
                 default_config: Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']] = None,
                 fleet_scope_logs_config: Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']] = None):
        """
        LoggingConfig defines the configuration for different types of logs.
        :param pulumi.Input['FleetObservabilityRoutingConfigArgs'] default_config: Specified if applying the default routing config to logs not specified in other configs.
        :param pulumi.Input['FleetObservabilityRoutingConfigArgs'] fleet_scope_logs_config: Specified if applying the routing config to all logs for all fleet scopes.
        """
        if default_config is not None:
            pulumi.set(__self__, "default_config", default_config)
        if fleet_scope_logs_config is not None:
            pulumi.set(__self__, "fleet_scope_logs_config", fleet_scope_logs_config)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']]:
        """
        Specified if applying the default routing config to logs not specified in other configs.
        """
        return pulumi.get(self, "default_config")

    @default_config.setter
    def default_config(self, value: Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']]):
        pulumi.set(self, "default_config", value)

    @property
    @pulumi.getter(name="fleetScopeLogsConfig")
    def fleet_scope_logs_config(self) -> Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']]:
        """
        Specified if applying the routing config to all logs for all fleet scopes.
        """
        return pulumi.get(self, "fleet_scope_logs_config")

    @fleet_scope_logs_config.setter
    def fleet_scope_logs_config(self, value: Optional[pulumi.Input['FleetObservabilityRoutingConfigArgs']]):
        pulumi.set(self, "fleet_scope_logs_config", value)


@pulumi.input_type
class FleetObservabilityMembershipSpecArgs:
    def __init__(__self__):
        """
        **FleetObservability**: The membership-specific input for FleetObservability feature.
        """
        pass


@pulumi.input_type
class FleetObservabilityRoutingConfigArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['FleetObservabilityRoutingConfigMode']] = None):
        """
        RoutingConfig configures the behaviour of fleet logging feature.
        :param pulumi.Input['FleetObservabilityRoutingConfigMode'] mode: mode configures the logs routing mode.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['FleetObservabilityRoutingConfigMode']]:
        """
        mode configures the logs routing mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['FleetObservabilityRoutingConfigMode']]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class GkeClusterArgs:
    def __init__(__self__, *,
                 resource_link: Optional[pulumi.Input[str]] = None):
        """
        GkeCluster contains information specific to GKE clusters.
        :param pulumi.Input[str] resource_link: Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
        """
        if resource_link is not None:
            pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
        """
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class IdentityServiceAuthMethodArgs:
    def __init__(__self__, *,
                 azuread_config: Optional[pulumi.Input['IdentityServiceAzureADConfigArgs']] = None,
                 google_config: Optional[pulumi.Input['IdentityServiceGoogleConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc_config: Optional[pulumi.Input['IdentityServiceOidcConfigArgs']] = None,
                 proxy: Optional[pulumi.Input[str]] = None):
        """
        Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
        :param pulumi.Input['IdentityServiceAzureADConfigArgs'] azuread_config: AzureAD specific Configuration.
        :param pulumi.Input['IdentityServiceGoogleConfigArgs'] google_config: GoogleConfig specific configuration.
        :param pulumi.Input[str] name: Identifier for auth config.
        :param pulumi.Input['IdentityServiceOidcConfigArgs'] oidc_config: OIDC specific configuration.
        :param pulumi.Input[str] proxy: Proxy server address to use for auth method.
        """
        if azuread_config is not None:
            pulumi.set(__self__, "azuread_config", azuread_config)
        if google_config is not None:
            pulumi.set(__self__, "google_config", google_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc_config is not None:
            pulumi.set(__self__, "oidc_config", oidc_config)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)

    @property
    @pulumi.getter(name="azureadConfig")
    def azuread_config(self) -> Optional[pulumi.Input['IdentityServiceAzureADConfigArgs']]:
        """
        AzureAD specific Configuration.
        """
        return pulumi.get(self, "azuread_config")

    @azuread_config.setter
    def azuread_config(self, value: Optional[pulumi.Input['IdentityServiceAzureADConfigArgs']]):
        pulumi.set(self, "azuread_config", value)

    @property
    @pulumi.getter(name="googleConfig")
    def google_config(self) -> Optional[pulumi.Input['IdentityServiceGoogleConfigArgs']]:
        """
        GoogleConfig specific configuration.
        """
        return pulumi.get(self, "google_config")

    @google_config.setter
    def google_config(self, value: Optional[pulumi.Input['IdentityServiceGoogleConfigArgs']]):
        pulumi.set(self, "google_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for auth config.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oidcConfig")
    def oidc_config(self) -> Optional[pulumi.Input['IdentityServiceOidcConfigArgs']]:
        """
        OIDC specific configuration.
        """
        return pulumi.get(self, "oidc_config")

    @oidc_config.setter
    def oidc_config(self, value: Optional[pulumi.Input['IdentityServiceOidcConfigArgs']]):
        pulumi.set(self, "oidc_config", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server address to use for auth method.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)


@pulumi.input_type
class IdentityServiceAzureADConfigArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 kubectl_redirect_uri: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the AzureAD Auth flow.
        :param pulumi.Input[str] client_id: ID for the registered client application that makes authentication requests to the Azure AD identity provider.
        :param pulumi.Input[str] client_secret: Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
        :param pulumi.Input[str] kubectl_redirect_uri: The redirect URL that kubectl uses for authorization.
        :param pulumi.Input[str] tenant: Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if kubectl_redirect_uri is not None:
            pulumi.set(__self__, "kubectl_redirect_uri", kubectl_redirect_uri)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID for the registered client application that makes authentication requests to the Azure AD identity provider.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="kubectlRedirectUri")
    def kubectl_redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL that kubectl uses for authorization.
        """
        return pulumi.get(self, "kubectl_redirect_uri")

    @kubectl_redirect_uri.setter
    def kubectl_redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubectl_redirect_uri", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)


@pulumi.input_type
class IdentityServiceGoogleConfigArgs:
    def __init__(__self__, *,
                 disable: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for the Google Plugin Auth flow.
        :param pulumi.Input[bool] disable: Disable automatic configuration of Google Plugin on supported platforms.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)

    @property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable automatic configuration of Google Plugin on supported platforms.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable", value)


@pulumi.input_type
class IdentityServiceMembershipSpecArgs:
    def __init__(__self__, *,
                 auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityServiceAuthMethodArgs']]]] = None):
        """
        **Anthos Identity Service**: Configuration for a single Membership.
        :param pulumi.Input[Sequence[pulumi.Input['IdentityServiceAuthMethodArgs']]] auth_methods: A member may support multiple auth methods.
        """
        if auth_methods is not None:
            pulumi.set(__self__, "auth_methods", auth_methods)

    @property
    @pulumi.getter(name="authMethods")
    def auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityServiceAuthMethodArgs']]]]:
        """
        A member may support multiple auth methods.
        """
        return pulumi.get(self, "auth_methods")

    @auth_methods.setter
    def auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityServiceAuthMethodArgs']]]]):
        pulumi.set(self, "auth_methods", value)


@pulumi.input_type
class IdentityServiceOidcConfigArgs:
    def __init__(__self__, *,
                 certificate_authority_data: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 deploy_cloud_console_proxy: Optional[pulumi.Input[bool]] = None,
                 enable_access_token: Optional[pulumi.Input[bool]] = None,
                 extra_params: Optional[pulumi.Input[str]] = None,
                 group_prefix: Optional[pulumi.Input[str]] = None,
                 groups_claim: Optional[pulumi.Input[str]] = None,
                 issuer_uri: Optional[pulumi.Input[str]] = None,
                 kubectl_redirect_uri: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[str]] = None,
                 user_claim: Optional[pulumi.Input[str]] = None,
                 user_prefix: Optional[pulumi.Input[str]] = None):
        """
        Configuration for OIDC Auth flow.
        :param pulumi.Input[str] certificate_authority_data: PEM-encoded CA for OIDC provider.
        :param pulumi.Input[str] client_id: ID for OIDC client application.
        :param pulumi.Input[str] client_secret: Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
        :param pulumi.Input[bool] deploy_cloud_console_proxy: Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
        :param pulumi.Input[bool] enable_access_token: Enable access token.
        :param pulumi.Input[str] extra_params: Comma-separated list of key-value pairs.
        :param pulumi.Input[str] group_prefix: Prefix to prepend to group name.
        :param pulumi.Input[str] groups_claim: Claim in OIDC ID token that holds group information.
        :param pulumi.Input[str] issuer_uri: URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
        :param pulumi.Input[str] kubectl_redirect_uri: Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
        :param pulumi.Input[str] scopes: Comma-separated list of identifiers.
        :param pulumi.Input[str] user_claim: Claim in OIDC ID token that holds username.
        :param pulumi.Input[str] user_prefix: Prefix to prepend to user name.
        """
        if certificate_authority_data is not None:
            pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if deploy_cloud_console_proxy is not None:
            pulumi.set(__self__, "deploy_cloud_console_proxy", deploy_cloud_console_proxy)
        if enable_access_token is not None:
            pulumi.set(__self__, "enable_access_token", enable_access_token)
        if extra_params is not None:
            pulumi.set(__self__, "extra_params", extra_params)
        if group_prefix is not None:
            pulumi.set(__self__, "group_prefix", group_prefix)
        if groups_claim is not None:
            pulumi.set(__self__, "groups_claim", groups_claim)
        if issuer_uri is not None:
            pulumi.set(__self__, "issuer_uri", issuer_uri)
        if kubectl_redirect_uri is not None:
            pulumi.set(__self__, "kubectl_redirect_uri", kubectl_redirect_uri)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if user_claim is not None:
            pulumi.set(__self__, "user_claim", user_claim)
        if user_prefix is not None:
            pulumi.set(__self__, "user_prefix", user_prefix)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded CA for OIDC provider.
        """
        return pulumi.get(self, "certificate_authority_data")

    @certificate_authority_data.setter
    def certificate_authority_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority_data", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID for OIDC client application.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="deployCloudConsoleProxy")
    def deploy_cloud_console_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
        """
        return pulumi.get(self, "deploy_cloud_console_proxy")

    @deploy_cloud_console_proxy.setter
    def deploy_cloud_console_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_cloud_console_proxy", value)

    @property
    @pulumi.getter(name="enableAccessToken")
    def enable_access_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable access token.
        """
        return pulumi.get(self, "enable_access_token")

    @enable_access_token.setter
    def enable_access_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_access_token", value)

    @property
    @pulumi.getter(name="extraParams")
    def extra_params(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of key-value pairs.
        """
        return pulumi.get(self, "extra_params")

    @extra_params.setter
    def extra_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_params", value)

    @property
    @pulumi.getter(name="groupPrefix")
    def group_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix to prepend to group name.
        """
        return pulumi.get(self, "group_prefix")

    @group_prefix.setter
    def group_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_prefix", value)

    @property
    @pulumi.getter(name="groupsClaim")
    def groups_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Claim in OIDC ID token that holds group information.
        """
        return pulumi.get(self, "groups_claim")

    @groups_claim.setter
    def groups_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_claim", value)

    @property
    @pulumi.getter(name="issuerUri")
    def issuer_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
        """
        return pulumi.get(self, "issuer_uri")

    @issuer_uri.setter
    def issuer_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_uri", value)

    @property
    @pulumi.getter(name="kubectlRedirectUri")
    def kubectl_redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
        """
        return pulumi.get(self, "kubectl_redirect_uri")

    @kubectl_redirect_uri.setter
    def kubectl_redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubectl_redirect_uri", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of identifiers.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="userClaim")
    def user_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Claim in OIDC ID token that holds username.
        """
        return pulumi.get(self, "user_claim")

    @user_claim.setter
    def user_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_claim", value)

    @property
    @pulumi.getter(name="userPrefix")
    def user_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix to prepend to user name.
        """
        return pulumi.get(self, "user_prefix")

    @user_prefix.setter
    def user_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_prefix", value)


@pulumi.input_type
class KubernetesResourceArgs:
    def __init__(__self__, *,
                 membership_cr_manifest: Optional[pulumi.Input[str]] = None,
                 resource_options: Optional[pulumi.Input['ResourceOptionsArgs']] = None):
        """
        KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
        :param pulumi.Input[str] membership_cr_manifest: Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
        :param pulumi.Input['ResourceOptionsArgs'] resource_options: Optional. Options for Kubernetes resource generation.
        """
        if membership_cr_manifest is not None:
            pulumi.set(__self__, "membership_cr_manifest", membership_cr_manifest)
        if resource_options is not None:
            pulumi.set(__self__, "resource_options", resource_options)

    @property
    @pulumi.getter(name="membershipCrManifest")
    def membership_cr_manifest(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
        """
        return pulumi.get(self, "membership_cr_manifest")

    @membership_cr_manifest.setter
    def membership_cr_manifest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "membership_cr_manifest", value)

    @property
    @pulumi.getter(name="resourceOptions")
    def resource_options(self) -> Optional[pulumi.Input['ResourceOptionsArgs']]:
        """
        Optional. Options for Kubernetes resource generation.
        """
        return pulumi.get(self, "resource_options")

    @resource_options.setter
    def resource_options(self, value: Optional[pulumi.Input['ResourceOptionsArgs']]):
        pulumi.set(self, "resource_options", value)


@pulumi.input_type
class MembershipEndpointArgs:
    def __init__(__self__, *,
                 appliance_cluster: Optional[pulumi.Input['ApplianceClusterArgs']] = None,
                 edge_cluster: Optional[pulumi.Input['EdgeClusterArgs']] = None,
                 gke_cluster: Optional[pulumi.Input['GkeClusterArgs']] = None,
                 kubernetes_resource: Optional[pulumi.Input['KubernetesResourceArgs']] = None,
                 multi_cloud_cluster: Optional[pulumi.Input['MultiCloudClusterArgs']] = None,
                 on_prem_cluster: Optional[pulumi.Input['OnPremClusterArgs']] = None):
        """
        MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
        :param pulumi.Input['ApplianceClusterArgs'] appliance_cluster: Optional. Specific information for a GDC Edge Appliance cluster.
        :param pulumi.Input['EdgeClusterArgs'] edge_cluster: Optional. Specific information for a Google Edge cluster.
        :param pulumi.Input['GkeClusterArgs'] gke_cluster: Optional. Specific information for a GKE-on-GCP cluster.
        :param pulumi.Input['KubernetesResourceArgs'] kubernetes_resource: Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
        :param pulumi.Input['MultiCloudClusterArgs'] multi_cloud_cluster: Optional. Specific information for a GKE Multi-Cloud cluster.
        :param pulumi.Input['OnPremClusterArgs'] on_prem_cluster: Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
        """
        if appliance_cluster is not None:
            pulumi.set(__self__, "appliance_cluster", appliance_cluster)
        if edge_cluster is not None:
            pulumi.set(__self__, "edge_cluster", edge_cluster)
        if gke_cluster is not None:
            pulumi.set(__self__, "gke_cluster", gke_cluster)
        if kubernetes_resource is not None:
            pulumi.set(__self__, "kubernetes_resource", kubernetes_resource)
        if multi_cloud_cluster is not None:
            pulumi.set(__self__, "multi_cloud_cluster", multi_cloud_cluster)
        if on_prem_cluster is not None:
            pulumi.set(__self__, "on_prem_cluster", on_prem_cluster)

    @property
    @pulumi.getter(name="applianceCluster")
    def appliance_cluster(self) -> Optional[pulumi.Input['ApplianceClusterArgs']]:
        """
        Optional. Specific information for a GDC Edge Appliance cluster.
        """
        return pulumi.get(self, "appliance_cluster")

    @appliance_cluster.setter
    def appliance_cluster(self, value: Optional[pulumi.Input['ApplianceClusterArgs']]):
        pulumi.set(self, "appliance_cluster", value)

    @property
    @pulumi.getter(name="edgeCluster")
    def edge_cluster(self) -> Optional[pulumi.Input['EdgeClusterArgs']]:
        """
        Optional. Specific information for a Google Edge cluster.
        """
        return pulumi.get(self, "edge_cluster")

    @edge_cluster.setter
    def edge_cluster(self, value: Optional[pulumi.Input['EdgeClusterArgs']]):
        pulumi.set(self, "edge_cluster", value)

    @property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> Optional[pulumi.Input['GkeClusterArgs']]:
        """
        Optional. Specific information for a GKE-on-GCP cluster.
        """
        return pulumi.get(self, "gke_cluster")

    @gke_cluster.setter
    def gke_cluster(self, value: Optional[pulumi.Input['GkeClusterArgs']]):
        pulumi.set(self, "gke_cluster", value)

    @property
    @pulumi.getter(name="kubernetesResource")
    def kubernetes_resource(self) -> Optional[pulumi.Input['KubernetesResourceArgs']]:
        """
        Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
        """
        return pulumi.get(self, "kubernetes_resource")

    @kubernetes_resource.setter
    def kubernetes_resource(self, value: Optional[pulumi.Input['KubernetesResourceArgs']]):
        pulumi.set(self, "kubernetes_resource", value)

    @property
    @pulumi.getter(name="multiCloudCluster")
    def multi_cloud_cluster(self) -> Optional[pulumi.Input['MultiCloudClusterArgs']]:
        """
        Optional. Specific information for a GKE Multi-Cloud cluster.
        """
        return pulumi.get(self, "multi_cloud_cluster")

    @multi_cloud_cluster.setter
    def multi_cloud_cluster(self, value: Optional[pulumi.Input['MultiCloudClusterArgs']]):
        pulumi.set(self, "multi_cloud_cluster", value)

    @property
    @pulumi.getter(name="onPremCluster")
    def on_prem_cluster(self) -> Optional[pulumi.Input['OnPremClusterArgs']]:
        """
        Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
        """
        return pulumi.get(self, "on_prem_cluster")

    @on_prem_cluster.setter
    def on_prem_cluster(self, value: Optional[pulumi.Input['OnPremClusterArgs']]):
        pulumi.set(self, "on_prem_cluster", value)


@pulumi.input_type
class MembershipFeatureSpecArgs:
    def __init__(__self__, *,
                 configmanagement: Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']] = None,
                 fleetobservability: Optional[pulumi.Input['FleetObservabilityMembershipSpecArgs']] = None,
                 identityservice: Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']] = None,
                 mesh: Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']] = None,
                 origin: Optional[pulumi.Input['OriginArgs']] = None,
                 policycontroller: Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']] = None):
        """
        MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
        :param pulumi.Input['ConfigManagementMembershipSpecArgs'] configmanagement: Config Management-specific spec.
        :param pulumi.Input['FleetObservabilityMembershipSpecArgs'] fleetobservability: Fleet observability membership spec
        :param pulumi.Input['IdentityServiceMembershipSpecArgs'] identityservice: Identity Service-specific spec.
        :param pulumi.Input['ServiceMeshMembershipSpecArgs'] mesh: Anthos Service Mesh-specific spec
        :param pulumi.Input['OriginArgs'] origin: Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
        :param pulumi.Input['PolicyControllerMembershipSpecArgs'] policycontroller: Policy Controller spec.
        """
        if configmanagement is not None:
            pulumi.set(__self__, "configmanagement", configmanagement)
        if fleetobservability is not None:
            pulumi.set(__self__, "fleetobservability", fleetobservability)
        if identityservice is not None:
            pulumi.set(__self__, "identityservice", identityservice)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if policycontroller is not None:
            pulumi.set(__self__, "policycontroller", policycontroller)

    @property
    @pulumi.getter
    def configmanagement(self) -> Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']]:
        """
        Config Management-specific spec.
        """
        return pulumi.get(self, "configmanagement")

    @configmanagement.setter
    def configmanagement(self, value: Optional[pulumi.Input['ConfigManagementMembershipSpecArgs']]):
        pulumi.set(self, "configmanagement", value)

    @property
    @pulumi.getter
    def fleetobservability(self) -> Optional[pulumi.Input['FleetObservabilityMembershipSpecArgs']]:
        """
        Fleet observability membership spec
        """
        return pulumi.get(self, "fleetobservability")

    @fleetobservability.setter
    def fleetobservability(self, value: Optional[pulumi.Input['FleetObservabilityMembershipSpecArgs']]):
        pulumi.set(self, "fleetobservability", value)

    @property
    @pulumi.getter
    def identityservice(self) -> Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']]:
        """
        Identity Service-specific spec.
        """
        return pulumi.get(self, "identityservice")

    @identityservice.setter
    def identityservice(self, value: Optional[pulumi.Input['IdentityServiceMembershipSpecArgs']]):
        pulumi.set(self, "identityservice", value)

    @property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']]:
        """
        Anthos Service Mesh-specific spec
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['ServiceMeshMembershipSpecArgs']]):
        pulumi.set(self, "mesh", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input['OriginArgs']]:
        """
        Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input['OriginArgs']]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def policycontroller(self) -> Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']]:
        """
        Policy Controller spec.
        """
        return pulumi.get(self, "policycontroller")

    @policycontroller.setter
    def policycontroller(self, value: Optional[pulumi.Input['PolicyControllerMembershipSpecArgs']]):
        pulumi.set(self, "policycontroller", value)


@pulumi.input_type
class MonitoringConfigArgs:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[str]] = None,
                 cluster_hash: Optional[pulumi.Input[str]] = None,
                 kubernetes_metrics_prefix: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
        :param pulumi.Input[str] cluster: Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
        :param pulumi.Input[str] cluster_hash: Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
        :param pulumi.Input[str] kubernetes_metrics_prefix: Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
        :param pulumi.Input[str] location: Optional. Location used to report Metrics
        :param pulumi.Input[str] project: Optional. Project used to report Metrics
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if cluster_hash is not None:
            pulumi.set(__self__, "cluster_hash", cluster_hash)
        if kubernetes_metrics_prefix is not None:
            pulumi.set(__self__, "kubernetes_metrics_prefix", kubernetes_metrics_prefix)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="clusterHash")
    def cluster_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
        """
        return pulumi.get(self, "cluster_hash")

    @cluster_hash.setter
    def cluster_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_hash", value)

    @property
    @pulumi.getter(name="kubernetesMetricsPrefix")
    def kubernetes_metrics_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
        """
        return pulumi.get(self, "kubernetes_metrics_prefix")

    @kubernetes_metrics_prefix.setter
    def kubernetes_metrics_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_metrics_prefix", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Location used to report Metrics
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Project used to report Metrics
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class MultiCloudClusterArgs:
    def __init__(__self__, *,
                 resource_link: Optional[pulumi.Input[str]] = None):
        """
        MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
        :param pulumi.Input[str] resource_link: Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
        """
        if resource_link is not None:
            pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
        """
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class MultiClusterIngressFeatureSpecArgs:
    def __init__(__self__, *,
                 config_membership: Optional[pulumi.Input[str]] = None):
        """
        **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
        :param pulumi.Input[str] config_membership: Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        if config_membership is not None:
            pulumi.set(__self__, "config_membership", config_membership)

    @property
    @pulumi.getter(name="configMembership")
    def config_membership(self) -> Optional[pulumi.Input[str]]:
        """
        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        return pulumi.get(self, "config_membership")

    @config_membership.setter
    def config_membership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_membership", value)


@pulumi.input_type
class OnPremClusterArgs:
    def __init__(__self__, *,
                 admin_cluster: Optional[pulumi.Input[bool]] = None,
                 cluster_type: Optional[pulumi.Input['OnPremClusterClusterType']] = None,
                 resource_link: Optional[pulumi.Input[str]] = None):
        """
        OnPremCluster contains information specific to GKE On-Prem clusters.
        :param pulumi.Input[bool] admin_cluster: Immutable. Whether the cluster is an admin cluster.
        :param pulumi.Input['OnPremClusterClusterType'] cluster_type: Immutable. The on prem cluster's type.
        :param pulumi.Input[str] resource_link: Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
        """
        if admin_cluster is not None:
            pulumi.set(__self__, "admin_cluster", admin_cluster)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if resource_link is not None:
            pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="adminCluster")
    def admin_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        Immutable. Whether the cluster is an admin cluster.
        """
        return pulumi.get(self, "admin_cluster")

    @admin_cluster.setter
    def admin_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_cluster", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input['OnPremClusterClusterType']]:
        """
        Immutable. The on prem cluster's type.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input['OnPremClusterClusterType']]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
        """
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class OriginArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['OriginType']] = None):
        """
        Origin defines where this MembershipFeatureSpec originated from.
        :param pulumi.Input['OriginType'] type: Type specifies which type of origin is set.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['OriginType']]:
        """
        Type specifies which type of origin is set.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['OriginType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PolicyBindingArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Binauthz policy that applies to this cluster.
        :param pulumi.Input[str] name: The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyControllerBundleInstallSpecArgs:
    def __init__(__self__, *,
                 exempted_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        BundleInstallSpec is the specification configuration for a single managed bundle.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_namespaces: The set of namespaces to be exempted from the bundle.
        """
        if exempted_namespaces is not None:
            pulumi.set(__self__, "exempted_namespaces", exempted_namespaces)

    @property
    @pulumi.getter(name="exemptedNamespaces")
    def exempted_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of namespaces to be exempted from the bundle.
        """
        return pulumi.get(self, "exempted_namespaces")

    @exempted_namespaces.setter
    def exempted_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_namespaces", value)


@pulumi.input_type
class PolicyControllerHubConfigArgs:
    def __init__(__self__, *,
                 audit_interval_seconds: Optional[pulumi.Input[str]] = None,
                 constraint_violation_limit: Optional[pulumi.Input[str]] = None,
                 deployment_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigArgs']]]] = None,
                 exemptable_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 install_spec: Optional[pulumi.Input['PolicyControllerHubConfigInstallSpec']] = None,
                 log_denies_enabled: Optional[pulumi.Input[bool]] = None,
                 monitoring: Optional[pulumi.Input['PolicyControllerMonitoringConfigArgs']] = None,
                 mutation_enabled: Optional[pulumi.Input[bool]] = None,
                 policy_content: Optional[pulumi.Input['PolicyControllerPolicyContentSpecArgs']] = None,
                 referential_rules_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for Policy Controller
        :param pulumi.Input[str] audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param pulumi.Input[str] constraint_violation_limit: The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
        :param pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigArgs']]] deployment_configs: Map of deployment configs to deployments ("admission", "audit", "mutation').
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param pulumi.Input['PolicyControllerHubConfigInstallSpec'] install_spec: The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
        :param pulumi.Input[bool] log_denies_enabled: Logs all denies and dry run failures.
        :param pulumi.Input['PolicyControllerMonitoringConfigArgs'] monitoring: Monitoring specifies the configuration of monitoring.
        :param pulumi.Input[bool] mutation_enabled: Enables the ability to mutate resources using Policy Controller.
        :param pulumi.Input['PolicyControllerPolicyContentSpecArgs'] policy_content: Specifies the desired policy content on the cluster
        :param pulumi.Input[bool] referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if constraint_violation_limit is not None:
            pulumi.set(__self__, "constraint_violation_limit", constraint_violation_limit)
        if deployment_configs is not None:
            pulumi.set(__self__, "deployment_configs", deployment_configs)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if install_spec is not None:
            pulumi.set(__self__, "install_spec", install_spec)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if policy_content is not None:
            pulumi.set(__self__, "policy_content", policy_content)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)

    @property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @audit_interval_seconds.setter
    def audit_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_interval_seconds", value)

    @property
    @pulumi.getter(name="constraintViolationLimit")
    def constraint_violation_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
        """
        return pulumi.get(self, "constraint_violation_limit")

    @constraint_violation_limit.setter
    def constraint_violation_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraint_violation_limit", value)

    @property
    @pulumi.getter(name="deploymentConfigs")
    def deployment_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigArgs']]]]:
        """
        Map of deployment configs to deployments ("admission", "audit", "mutation').
        """
        return pulumi.get(self, "deployment_configs")

    @deployment_configs.setter
    def deployment_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigArgs']]]]):
        pulumi.set(self, "deployment_configs", value)

    @property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @exemptable_namespaces.setter
    def exemptable_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exemptable_namespaces", value)

    @property
    @pulumi.getter(name="installSpec")
    def install_spec(self) -> Optional[pulumi.Input['PolicyControllerHubConfigInstallSpec']]:
        """
        The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
        """
        return pulumi.get(self, "install_spec")

    @install_spec.setter
    def install_spec(self, value: Optional[pulumi.Input['PolicyControllerHubConfigInstallSpec']]):
        pulumi.set(self, "install_spec", value)

    @property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @log_denies_enabled.setter
    def log_denies_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_denies_enabled", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['PolicyControllerMonitoringConfigArgs']]:
        """
        Monitoring specifies the configuration of monitoring.
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['PolicyControllerMonitoringConfigArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the ability to mutate resources using Policy Controller.
        """
        return pulumi.get(self, "mutation_enabled")

    @mutation_enabled.setter
    def mutation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mutation_enabled", value)

    @property
    @pulumi.getter(name="policyContent")
    def policy_content(self) -> Optional[pulumi.Input['PolicyControllerPolicyContentSpecArgs']]:
        """
        Specifies the desired policy content on the cluster
        """
        return pulumi.get(self, "policy_content")

    @policy_content.setter
    def policy_content(self, value: Optional[pulumi.Input['PolicyControllerPolicyContentSpecArgs']]):
        pulumi.set(self, "policy_content", value)

    @property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")

    @referential_rules_enabled.setter
    def referential_rules_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "referential_rules_enabled", value)


@pulumi.input_type
class PolicyControllerMembershipSpecArgs:
    def __init__(__self__, *,
                 policy_controller_hub_config: Optional[pulumi.Input['PolicyControllerHubConfigArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
        :param pulumi.Input['PolicyControllerHubConfigArgs'] policy_controller_hub_config: Policy Controller configuration for the cluster.
        :param pulumi.Input[str] version: Version of Policy Controller installed.
        """
        if policy_controller_hub_config is not None:
            pulumi.set(__self__, "policy_controller_hub_config", policy_controller_hub_config)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="policyControllerHubConfig")
    def policy_controller_hub_config(self) -> Optional[pulumi.Input['PolicyControllerHubConfigArgs']]:
        """
        Policy Controller configuration for the cluster.
        """
        return pulumi.get(self, "policy_controller_hub_config")

    @policy_controller_hub_config.setter
    def policy_controller_hub_config(self, value: Optional[pulumi.Input['PolicyControllerHubConfigArgs']]):
        pulumi.set(self, "policy_controller_hub_config", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of Policy Controller installed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PolicyControllerMonitoringConfigArgs:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerMonitoringConfigBackendsItem']]]] = None):
        """
        MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
        :param pulumi.Input[Sequence[pulumi.Input['PolicyControllerMonitoringConfigBackendsItem']]] backends: Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerMonitoringConfigBackendsItem']]]]:
        """
        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerMonitoringConfigBackendsItem']]]]):
        pulumi.set(self, "backends", value)


@pulumi.input_type
class PolicyControllerPolicyContentSpecArgs:
    def __init__(__self__, *,
                 bundles: Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerBundleInstallSpecArgs']]]] = None,
                 template_library: Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigArgs']] = None):
        """
        PolicyContentSpec defines the user's desired content configuration on the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerBundleInstallSpecArgs']]] bundles: map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
        :param pulumi.Input['PolicyControllerTemplateLibraryConfigArgs'] template_library: Configures the installation of the Template Library.
        """
        if bundles is not None:
            pulumi.set(__self__, "bundles", bundles)
        if template_library is not None:
            pulumi.set(__self__, "template_library", template_library)

    @property
    @pulumi.getter
    def bundles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerBundleInstallSpecArgs']]]]:
        """
        map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
        """
        return pulumi.get(self, "bundles")

    @bundles.setter
    def bundles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['PolicyControllerBundleInstallSpecArgs']]]]):
        pulumi.set(self, "bundles", value)

    @property
    @pulumi.getter(name="templateLibrary")
    def template_library(self) -> Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigArgs']]:
        """
        Configures the installation of the Template Library.
        """
        return pulumi.get(self, "template_library")

    @template_library.setter
    def template_library(self, value: Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigArgs']]):
        pulumi.set(self, "template_library", value)


@pulumi.input_type
class PolicyControllerPolicyControllerDeploymentConfigArgs:
    def __init__(__self__, *,
                 container_resources: Optional[pulumi.Input['PolicyControllerResourceRequirementsArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigPodAffinity']] = None,
                 pod_anti_affinity: Optional[pulumi.Input[bool]] = None,
                 pod_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerTolerationArgs']]]] = None,
                 replica_count: Optional[pulumi.Input[str]] = None):
        """
        Deployment-specific configuration.
        :param pulumi.Input['PolicyControllerResourceRequirementsArgs'] container_resources: Container resource requirements.
        :param pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigPodAffinity'] pod_affinity: Pod affinity configuration.
        :param pulumi.Input[bool] pod_anti_affinity: Pod anti-affinity enablement.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyControllerTolerationArgs']]] pod_tolerations: Pod tolerations of node taints.
        :param pulumi.Input[str] replica_count: Pod replica count.
        """
        if container_resources is not None:
            pulumi.set(__self__, "container_resources", container_resources)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)
        if pod_tolerations is not None:
            pulumi.set(__self__, "pod_tolerations", pod_tolerations)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Optional[pulumi.Input['PolicyControllerResourceRequirementsArgs']]:
        """
        Container resource requirements.
        """
        return pulumi.get(self, "container_resources")

    @container_resources.setter
    def container_resources(self, value: Optional[pulumi.Input['PolicyControllerResourceRequirementsArgs']]):
        pulumi.set(self, "container_resources", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigPodAffinity']]:
        """
        Pod affinity configuration.
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['PolicyControllerPolicyControllerDeploymentConfigPodAffinity']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input[bool]]:
        """
        Pod anti-affinity enablement.
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pod_anti_affinity", value)

    @property
    @pulumi.getter(name="podTolerations")
    def pod_tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerTolerationArgs']]]]:
        """
        Pod tolerations of node taints.
        """
        return pulumi.get(self, "pod_tolerations")

    @pod_tolerations.setter
    def pod_tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyControllerTolerationArgs']]]]):
        pulumi.set(self, "pod_tolerations", value)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[pulumi.Input[str]]:
        """
        Pod replica count.
        """
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_count", value)


@pulumi.input_type
class PolicyControllerResourceListArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        ResourceList contains container resource requirements.
        :param pulumi.Input[str] cpu: CPU requirement expressed in Kubernetes resource units.
        :param pulumi.Input[str] memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class PolicyControllerResourceRequirementsArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['PolicyControllerResourceListArgs']] = None,
                 requests: Optional[pulumi.Input['PolicyControllerResourceListArgs']] = None):
        """
        ResourceRequirements describes the compute resource requirements.
        :param pulumi.Input['PolicyControllerResourceListArgs'] limits: Limits describes the maximum amount of compute resources allowed for use by the running container.
        :param pulumi.Input['PolicyControllerResourceListArgs'] requests: Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['PolicyControllerResourceListArgs']]:
        """
        Limits describes the maximum amount of compute resources allowed for use by the running container.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['PolicyControllerResourceListArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['PolicyControllerResourceListArgs']]:
        """
        Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['PolicyControllerResourceListArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class PolicyControllerTemplateLibraryConfigArgs:
    def __init__(__self__, *,
                 installation: Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigInstallation']] = None):
        """
        The config specifying which default library templates to install.
        :param pulumi.Input['PolicyControllerTemplateLibraryConfigInstallation'] installation: Configures the manner in which the template library is installed on the cluster.
        """
        if installation is not None:
            pulumi.set(__self__, "installation", installation)

    @property
    @pulumi.getter
    def installation(self) -> Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigInstallation']]:
        """
        Configures the manner in which the template library is installed on the cluster.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: Optional[pulumi.Input['PolicyControllerTemplateLibraryConfigInstallation']]):
        pulumi.set(self, "installation", value)


@pulumi.input_type
class PolicyControllerTolerationArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Toleration of a node taint.
        :param pulumi.Input[str] effect: Matches a taint effect.
        :param pulumi.Input[str] key: Matches a taint key (not necessarily unique).
        :param pulumi.Input[str] operator: Matches a taint operator.
        :param pulumi.Input[str] value: Matches a taint value.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Matches a taint effect.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Matches a taint key (not necessarily unique).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Matches a taint operator.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Matches a taint value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ResourceOptionsArgs:
    def __init__(__self__, *,
                 connect_version: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 v1beta1_crd: Optional[pulumi.Input[bool]] = None):
        """
        ResourceOptions represent options for Kubernetes resource generation.
        :param pulumi.Input[str] connect_version: Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
        :param pulumi.Input[str] k8s_version: Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
        :param pulumi.Input[bool] v1beta1_crd: Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
        """
        if connect_version is not None:
            pulumi.set(__self__, "connect_version", connect_version)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if v1beta1_crd is not None:
            pulumi.set(__self__, "v1beta1_crd", v1beta1_crd)

    @property
    @pulumi.getter(name="connectVersion")
    def connect_version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
        """
        return pulumi.get(self, "connect_version")

    @connect_version.setter
    def connect_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_version", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter(name="v1beta1Crd")
    def v1beta1_crd(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
        """
        return pulumi.get(self, "v1beta1_crd")

    @v1beta1_crd.setter
    def v1beta1_crd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "v1beta1_crd", value)


@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 predefined_role: Optional[pulumi.Input['RolePredefinedRole']] = None):
        """
        Role is the type for Kubernetes roles
        :param pulumi.Input['RolePredefinedRole'] predefined_role: predefined_role is the Kubernetes default role to use
        """
        if predefined_role is not None:
            pulumi.set(__self__, "predefined_role", predefined_role)

    @property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> Optional[pulumi.Input['RolePredefinedRole']]:
        """
        predefined_role is the Kubernetes default role to use
        """
        return pulumi.get(self, "predefined_role")

    @predefined_role.setter
    def predefined_role(self, value: Optional[pulumi.Input['RolePredefinedRole']]):
        pulumi.set(self, "predefined_role", value)


@pulumi.input_type
class ScopeFeatureSpecArgs:
    def __init__(__self__):
        """
        ScopeFeatureSpec contains feature specs for a fleet scope.
        """
        pass


@pulumi.input_type
class SecurityPostureConfigArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['SecurityPostureConfigMode']] = None,
                 vulnerability_mode: Optional[pulumi.Input['SecurityPostureConfigVulnerabilityMode']] = None):
        """
        SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
        :param pulumi.Input['SecurityPostureConfigMode'] mode: Sets which mode to use for Security Posture features.
        :param pulumi.Input['SecurityPostureConfigVulnerabilityMode'] vulnerability_mode: Sets which mode to use for vulnerability scanning.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if vulnerability_mode is not None:
            pulumi.set(__self__, "vulnerability_mode", vulnerability_mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['SecurityPostureConfigMode']]:
        """
        Sets which mode to use for Security Posture features.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['SecurityPostureConfigMode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="vulnerabilityMode")
    def vulnerability_mode(self) -> Optional[pulumi.Input['SecurityPostureConfigVulnerabilityMode']]:
        """
        Sets which mode to use for vulnerability scanning.
        """
        return pulumi.get(self, "vulnerability_mode")

    @vulnerability_mode.setter
    def vulnerability_mode(self, value: Optional[pulumi.Input['SecurityPostureConfigVulnerabilityMode']]):
        pulumi.set(self, "vulnerability_mode", value)


@pulumi.input_type
class ServiceMeshMembershipSpecArgs:
    def __init__(__self__, *,
                 control_plane: Optional[pulumi.Input['ServiceMeshMembershipSpecControlPlane']] = None,
                 management: Optional[pulumi.Input['ServiceMeshMembershipSpecManagement']] = None):
        """
        **Service Mesh**: Spec for a single Membership for the servicemesh feature
        :param pulumi.Input['ServiceMeshMembershipSpecControlPlane'] control_plane: Deprecated: use `management` instead Enables automatic control plane management.
        :param pulumi.Input['ServiceMeshMembershipSpecManagement'] management: Enables automatic Service Mesh management.
        """
        if control_plane is not None:
            warnings.warn("""Deprecated: use `management` instead Enables automatic control plane management.""", DeprecationWarning)
            pulumi.log.warn("""control_plane is deprecated: Deprecated: use `management` instead Enables automatic control plane management.""")
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if management is not None:
            pulumi.set(__self__, "management", management)

    @property
    @pulumi.getter(name="controlPlane")
    @_utilities.deprecated("""Deprecated: use `management` instead Enables automatic control plane management.""")
    def control_plane(self) -> Optional[pulumi.Input['ServiceMeshMembershipSpecControlPlane']]:
        """
        Deprecated: use `management` instead Enables automatic control plane management.
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['ServiceMeshMembershipSpecControlPlane']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter
    def management(self) -> Optional[pulumi.Input['ServiceMeshMembershipSpecManagement']]:
        """
        Enables automatic Service Mesh management.
        """
        return pulumi.get(self, "management")

    @management.setter
    def management(self, value: Optional[pulumi.Input['ServiceMeshMembershipSpecManagement']]):
        pulumi.set(self, "management", value)


