# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetImportDataFileResult',
    'AwaitableGetImportDataFileResult',
    'get_import_data_file',
    'get_import_data_file_output',
]

@pulumi.output_type
class GetImportDataFileResult:
    def __init__(__self__, create_time=None, display_name=None, format=None, name=None, state=None, upload_file_info=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if upload_file_info and not isinstance(upload_file_info, dict):
            raise TypeError("Expected argument 'upload_file_info' to be a dict")
        pulumi.set(__self__, "upload_file_info", upload_file_info)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the file was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name. Maximum length is 63 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The payload format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import data file.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="uploadFileInfo")
    def upload_file_info(self) -> 'outputs.UploadFileInfoResponse':
        """
        Information about a file that is uploaded to a storage service.
        """
        return pulumi.get(self, "upload_file_info")


class AwaitableGetImportDataFileResult(GetImportDataFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImportDataFileResult(
            create_time=self.create_time,
            display_name=self.display_name,
            format=self.format,
            name=self.name,
            state=self.state,
            upload_file_info=self.upload_file_info)


def get_import_data_file(import_data_file_id: Optional[str] = None,
                         import_job_id: Optional[str] = None,
                         location: Optional[str] = None,
                         project: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImportDataFileResult:
    """
    Gets an import data file.
    """
    __args__ = dict()
    __args__['importDataFileId'] = import_data_file_id
    __args__['importJobId'] = import_job_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1:getImportDataFile', __args__, opts=opts, typ=GetImportDataFileResult).value

    return AwaitableGetImportDataFileResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        format=pulumi.get(__ret__, 'format'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        upload_file_info=pulumi.get(__ret__, 'upload_file_info'))


@_utilities.lift_output_func(get_import_data_file)
def get_import_data_file_output(import_data_file_id: Optional[pulumi.Input[str]] = None,
                                import_job_id: Optional[pulumi.Input[str]] = None,
                                location: Optional[pulumi.Input[str]] = None,
                                project: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImportDataFileResult]:
    """
    Gets an import data file.
    """
    ...
