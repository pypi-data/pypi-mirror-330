# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetSourceResult',
    'AwaitableGetSourceResult',
    'get_source',
    'get_source_output',
]

@pulumi.output_type
class GetSourceResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, error_frame_count=None, is_managed=None, name=None, pending_frame_count=None, priority=None, state=None, type=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if error_frame_count and not isinstance(error_frame_count, int):
            raise TypeError("Expected argument 'error_frame_count' to be a int")
        pulumi.set(__self__, "error_frame_count", error_frame_count)
        if is_managed and not isinstance(is_managed, bool):
            raise TypeError("Expected argument 'is_managed' to be a bool")
        pulumi.set(__self__, "is_managed", is_managed)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pending_frame_count and not isinstance(pending_frame_count, int):
            raise TypeError("Expected argument 'pending_frame_count' to be a int")
        pulumi.set(__self__, "pending_frame_count", pending_frame_count)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp when the source was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Free-text description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorFrameCount")
    def error_frame_count(self) -> int:
        """
        The number of frames that were reported by the source and contained errors.
        """
        return pulumi.get(self, "error_frame_count")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> bool:
        """
        If `true`, the source is managed by other service(s).
        """
        return pulumi.get(self, "is_managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The full name of the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pendingFrameCount")
    def pending_frame_count(self) -> int:
        """
        Number of frames that are still being processed.
        """
        return pulumi.get(self, "pending_frame_count")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The information confidence of the source. The higher the value, the higher the confidence.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the source.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Data source type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp when the source was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetSourceResult(GetSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSourceResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            error_frame_count=self.error_frame_count,
            is_managed=self.is_managed,
            name=self.name,
            pending_frame_count=self.pending_frame_count,
            priority=self.priority,
            state=self.state,
            type=self.type,
            update_time=self.update_time)


def get_source(location: Optional[str] = None,
               project: Optional[str] = None,
               source_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSourceResult:
    """
    Gets the details of a source.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['sourceId'] = source_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1alpha1:getSource', __args__, opts=opts, typ=GetSourceResult).value

    return AwaitableGetSourceResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        error_frame_count=pulumi.get(__ret__, 'error_frame_count'),
        is_managed=pulumi.get(__ret__, 'is_managed'),
        name=pulumi.get(__ret__, 'name'),
        pending_frame_count=pulumi.get(__ret__, 'pending_frame_count'),
        priority=pulumi.get(__ret__, 'priority'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_source)
def get_source_output(location: Optional[pulumi.Input[str]] = None,
                      project: Optional[pulumi.Input[Optional[str]]] = None,
                      source_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSourceResult]:
    """
    Gets the details of a source.
    """
    ...
