# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AllowedIpRangeResponse',
    'CidrBlockResponse',
    'CloudDataLineageIntegrationResponse',
    'DatabaseConfigResponse',
    'EncryptionConfigResponse',
    'EnvironmentConfigResponse',
    'IPAllocationPolicyResponse',
    'MaintenanceWindowResponse',
    'MasterAuthorizedNetworksConfigResponse',
    'NetworkingConfigResponse',
    'NodeConfigResponse',
    'PrivateClusterConfigResponse',
    'PrivateEnvironmentConfigResponse',
    'RecoveryConfigResponse',
    'ScheduledSnapshotsConfigResponse',
    'SchedulerResourceResponse',
    'SoftwareConfigResponse',
    'StorageConfigResponse',
    'TriggererResourceResponse',
    'WebServerConfigResponse',
    'WebServerNetworkAccessControlResponse',
    'WebServerResourceResponse',
    'WorkerResourceResponse',
    'WorkloadsConfigResponse',
]

@pulumi.output_type
class AllowedIpRangeResponse(dict):
    """
    Allowed IP range with user-provided description.
    """
    def __init__(__self__, *,
                 description: str,
                 value: str):
        """
        Allowed IP range with user-provided description.
        :param str description: Optional. User-provided description. It must contain at most 300 characters.
        :param str value: IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description. It must contain at most 300 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CidrBlockResponse(dict):
    """
    CIDR block with an optional name.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CidrBlockResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CidrBlockResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CidrBlockResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: str,
                 display_name: str):
        """
        CIDR block with an optional name.
        :param str cidr_block: CIDR block that must be specified in CIDR notation.
        :param str display_name: User-defined name that identifies the CIDR block.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        CIDR block that must be specified in CIDR notation.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-defined name that identifies the CIDR block.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class CloudDataLineageIntegrationResponse(dict):
    """
    Configuration for Cloud Data Lineage integration.
    """
    def __init__(__self__, *,
                 enabled: bool):
        """
        Configuration for Cloud Data Lineage integration.
        :param bool enabled: Optional. Whether or not Cloud Data Lineage integration is enabled.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Optional. Whether or not Cloud Data Lineage integration is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatabaseConfigResponse(dict):
    """
    The configuration of Cloud SQL instance that is used by the Apache Airflow software.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_type: str,
                 zone: str):
        """
        The configuration of Cloud SQL instance that is used by the Apache Airflow software.
        :param str machine_type: Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str zone: Optional. The Compute Engine zone where the Airflow database is created. If zone is provided, it must be in the region selected for the environment. If zone is not provided, a zone is automatically selected. The zone can only be set during environment creation. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.*.
        """
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Optional. The Compute Engine zone where the Airflow database is created. If zone is provided, it must be in the region selected for the environment. If zone is not provided, a zone is automatically selected. The zone can only be set during environment creation. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class EncryptionConfigResponse(dict):
    """
    The encryption options for the Cloud Composer environment and its dependencies. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: str):
        """
        The encryption options for the Cloud Composer environment and its dependencies. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str kms_key_name: Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class EnvironmentConfigResponse(dict):
    """
    Configuration information for an environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airflowByoidUri":
            suggest = "airflow_byoid_uri"
        elif key == "airflowUri":
            suggest = "airflow_uri"
        elif key == "dagGcsPrefix":
            suggest = "dag_gcs_prefix"
        elif key == "databaseConfig":
            suggest = "database_config"
        elif key == "encryptionConfig":
            suggest = "encryption_config"
        elif key == "environmentSize":
            suggest = "environment_size"
        elif key == "gkeCluster":
            suggest = "gke_cluster"
        elif key == "maintenanceWindow":
            suggest = "maintenance_window"
        elif key == "masterAuthorizedNetworksConfig":
            suggest = "master_authorized_networks_config"
        elif key == "nodeConfig":
            suggest = "node_config"
        elif key == "nodeCount":
            suggest = "node_count"
        elif key == "privateEnvironmentConfig":
            suggest = "private_environment_config"
        elif key == "recoveryConfig":
            suggest = "recovery_config"
        elif key == "resilienceMode":
            suggest = "resilience_mode"
        elif key == "softwareConfig":
            suggest = "software_config"
        elif key == "webServerConfig":
            suggest = "web_server_config"
        elif key == "webServerNetworkAccessControl":
            suggest = "web_server_network_access_control"
        elif key == "workloadsConfig":
            suggest = "workloads_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airflow_byoid_uri: str,
                 airflow_uri: str,
                 dag_gcs_prefix: str,
                 database_config: 'outputs.DatabaseConfigResponse',
                 encryption_config: 'outputs.EncryptionConfigResponse',
                 environment_size: str,
                 gke_cluster: str,
                 maintenance_window: 'outputs.MaintenanceWindowResponse',
                 master_authorized_networks_config: 'outputs.MasterAuthorizedNetworksConfigResponse',
                 node_config: 'outputs.NodeConfigResponse',
                 node_count: int,
                 private_environment_config: 'outputs.PrivateEnvironmentConfigResponse',
                 recovery_config: 'outputs.RecoveryConfigResponse',
                 resilience_mode: str,
                 software_config: 'outputs.SoftwareConfigResponse',
                 web_server_config: 'outputs.WebServerConfigResponse',
                 web_server_network_access_control: 'outputs.WebServerNetworkAccessControlResponse',
                 workloads_config: 'outputs.WorkloadsConfigResponse'):
        """
        Configuration information for an environment.
        :param str airflow_byoid_uri: The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).
        :param str airflow_uri: The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
        :param str dag_gcs_prefix: The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
        :param 'DatabaseConfigResponse' database_config: Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
        :param 'EncryptionConfigResponse' encryption_config: Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
        :param str environment_size: Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        :param str gke_cluster: The Kubernetes Engine cluster used to run this environment.
        :param 'MaintenanceWindowResponse' maintenance_window: Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
        :param 'MasterAuthorizedNetworksConfigResponse' master_authorized_networks_config: Optional. The configuration options for GKE cluster master authorized networks. By default master authorized networks feature is: - in case of private environment: enabled with no external networks allowlisted. - in case of public environment: disabled.
        :param 'NodeConfigResponse' node_config: The configuration used for the Kubernetes Engine cluster.
        :param int node_count: The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param 'PrivateEnvironmentConfigResponse' private_environment_config: The configuration used for the Private IP Cloud Composer environment.
        :param 'RecoveryConfigResponse' recovery_config: Optional. The Recovery settings configuration of an environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        :param str resilience_mode: Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.
        :param 'SoftwareConfigResponse' software_config: The configuration settings for software inside the environment.
        :param 'WebServerConfigResponse' web_server_config: Optional. The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param 'WebServerNetworkAccessControlResponse' web_server_network_access_control: Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
        :param 'WorkloadsConfigResponse' workloads_config: Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        pulumi.set(__self__, "airflow_byoid_uri", airflow_byoid_uri)
        pulumi.set(__self__, "airflow_uri", airflow_uri)
        pulumi.set(__self__, "dag_gcs_prefix", dag_gcs_prefix)
        pulumi.set(__self__, "database_config", database_config)
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "environment_size", environment_size)
        pulumi.set(__self__, "gke_cluster", gke_cluster)
        pulumi.set(__self__, "maintenance_window", maintenance_window)
        pulumi.set(__self__, "master_authorized_networks_config", master_authorized_networks_config)
        pulumi.set(__self__, "node_config", node_config)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "private_environment_config", private_environment_config)
        pulumi.set(__self__, "recovery_config", recovery_config)
        pulumi.set(__self__, "resilience_mode", resilience_mode)
        pulumi.set(__self__, "software_config", software_config)
        pulumi.set(__self__, "web_server_config", web_server_config)
        pulumi.set(__self__, "web_server_network_access_control", web_server_network_access_control)
        pulumi.set(__self__, "workloads_config", workloads_config)

    @property
    @pulumi.getter(name="airflowByoidUri")
    def airflow_byoid_uri(self) -> str:
        """
        The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).
        """
        return pulumi.get(self, "airflow_byoid_uri")

    @property
    @pulumi.getter(name="airflowUri")
    def airflow_uri(self) -> str:
        """
        The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
        """
        return pulumi.get(self, "airflow_uri")

    @property
    @pulumi.getter(name="dagGcsPrefix")
    def dag_gcs_prefix(self) -> str:
        """
        The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
        """
        return pulumi.get(self, "dag_gcs_prefix")

    @property
    @pulumi.getter(name="databaseConfig")
    def database_config(self) -> 'outputs.DatabaseConfigResponse':
        """
        Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
        """
        return pulumi.get(self, "database_config")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> 'outputs.EncryptionConfigResponse':
        """
        Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="environmentSize")
    def environment_size(self) -> str:
        """
        Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "environment_size")

    @property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> str:
        """
        The Kubernetes Engine cluster used to run this environment.
        """
        return pulumi.get(self, "gke_cluster")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> 'outputs.MaintenanceWindowResponse':
        """
        Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="masterAuthorizedNetworksConfig")
    def master_authorized_networks_config(self) -> 'outputs.MasterAuthorizedNetworksConfigResponse':
        """
        Optional. The configuration options for GKE cluster master authorized networks. By default master authorized networks feature is: - in case of private environment: enabled with no external networks allowlisted. - in case of public environment: disabled.
        """
        return pulumi.get(self, "master_authorized_networks_config")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> 'outputs.NodeConfigResponse':
        """
        The configuration used for the Kubernetes Engine cluster.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="privateEnvironmentConfig")
    def private_environment_config(self) -> 'outputs.PrivateEnvironmentConfigResponse':
        """
        The configuration used for the Private IP Cloud Composer environment.
        """
        return pulumi.get(self, "private_environment_config")

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> 'outputs.RecoveryConfigResponse':
        """
        Optional. The Recovery settings configuration of an environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "recovery_config")

    @property
    @pulumi.getter(name="resilienceMode")
    def resilience_mode(self) -> str:
        """
        Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "resilience_mode")

    @property
    @pulumi.getter(name="softwareConfig")
    def software_config(self) -> 'outputs.SoftwareConfigResponse':
        """
        The configuration settings for software inside the environment.
        """
        return pulumi.get(self, "software_config")

    @property
    @pulumi.getter(name="webServerConfig")
    def web_server_config(self) -> 'outputs.WebServerConfigResponse':
        """
        Optional. The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "web_server_config")

    @property
    @pulumi.getter(name="webServerNetworkAccessControl")
    def web_server_network_access_control(self) -> 'outputs.WebServerNetworkAccessControlResponse':
        """
        Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
        """
        return pulumi.get(self, "web_server_network_access_control")

    @property
    @pulumi.getter(name="workloadsConfig")
    def workloads_config(self) -> 'outputs.WorkloadsConfigResponse':
        """
        Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "workloads_config")


@pulumi.output_type
class IPAllocationPolicyResponse(dict):
    """
    Configuration for controlling how IPs are allocated in the GKE cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterIpv4CidrBlock":
            suggest = "cluster_ipv4_cidr_block"
        elif key == "clusterSecondaryRangeName":
            suggest = "cluster_secondary_range_name"
        elif key == "servicesIpv4CidrBlock":
            suggest = "services_ipv4_cidr_block"
        elif key == "servicesSecondaryRangeName":
            suggest = "services_secondary_range_name"
        elif key == "useIpAliases":
            suggest = "use_ip_aliases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAllocationPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAllocationPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAllocationPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_ipv4_cidr_block: str,
                 cluster_secondary_range_name: str,
                 services_ipv4_cidr_block: str,
                 services_secondary_range_name: str,
                 use_ip_aliases: bool):
        """
        Configuration for controlling how IPs are allocated in the GKE cluster.
        :param str cluster_ipv4_cidr_block: Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
        :param str cluster_secondary_range_name: Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
        :param str services_ipv4_cidr_block: Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
        :param str services_secondary_range_name: Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
        :param bool use_ip_aliases: Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
        """
        pulumi.set(__self__, "cluster_ipv4_cidr_block", cluster_ipv4_cidr_block)
        pulumi.set(__self__, "cluster_secondary_range_name", cluster_secondary_range_name)
        pulumi.set(__self__, "services_ipv4_cidr_block", services_ipv4_cidr_block)
        pulumi.set(__self__, "services_secondary_range_name", services_secondary_range_name)
        pulumi.set(__self__, "use_ip_aliases", use_ip_aliases)

    @property
    @pulumi.getter(name="clusterIpv4CidrBlock")
    def cluster_ipv4_cidr_block(self) -> str:
        """
        Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
        """
        return pulumi.get(self, "cluster_ipv4_cidr_block")

    @property
    @pulumi.getter(name="clusterSecondaryRangeName")
    def cluster_secondary_range_name(self) -> str:
        """
        Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
        """
        return pulumi.get(self, "cluster_secondary_range_name")

    @property
    @pulumi.getter(name="servicesIpv4CidrBlock")
    def services_ipv4_cidr_block(self) -> str:
        """
        Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
        """
        return pulumi.get(self, "services_ipv4_cidr_block")

    @property
    @pulumi.getter(name="servicesSecondaryRangeName")
    def services_secondary_range_name(self) -> str:
        """
        Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
        """
        return pulumi.get(self, "services_secondary_range_name")

    @property
    @pulumi.getter(name="useIpAliases")
    def use_ip_aliases(self) -> bool:
        """
        Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
        """
        return pulumi.get(self, "use_ip_aliases")


@pulumi.output_type
class MaintenanceWindowResponse(dict):
    """
    The configuration settings for Cloud Composer maintenance window. The following example: ``` { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } ``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaintenanceWindowResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaintenanceWindowResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaintenanceWindowResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 recurrence: str,
                 start_time: str):
        """
        The configuration settings for Cloud Composer maintenance window. The following example: ``` { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } ``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
        :param str end_time: Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
        :param str recurrence: Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
        :param str start_time: Start time of the first recurrence of the maintenance window.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def recurrence(self) -> str:
        """
        Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time of the first recurrence of the maintenance window.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class MasterAuthorizedNetworksConfigResponse(dict):
    """
    Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlocks":
            suggest = "cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MasterAuthorizedNetworksConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MasterAuthorizedNetworksConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MasterAuthorizedNetworksConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_blocks: Sequence['outputs.CidrBlockResponse'],
                 enabled: bool):
        """
        Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
        :param Sequence['CidrBlockResponse'] cidr_blocks: Up to 50 external networks that could access Kubernetes master through HTTPS.
        :param bool enabled: Whether or not master authorized networks feature is enabled.
        """
        pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Sequence['outputs.CidrBlockResponse']:
        """
        Up to 50 external networks that could access Kubernetes master through HTTPS.
        """
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not master authorized networks feature is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NetworkingConfigResponse(dict):
    """
    Configuration options for networking connections in the Composer 2 environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkingConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkingConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkingConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_type: str):
        """
        Configuration options for networking connections in the Composer 2 environment.
        :param str connection_type: Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
        """
        pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
        """
        return pulumi.get(self, "connection_type")


@pulumi.output_type
class NodeConfigResponse(dict):
    """
    The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeGb":
            suggest = "disk_size_gb"
        elif key == "enableIpMasqAgent":
            suggest = "enable_ip_masq_agent"
        elif key == "ipAllocationPolicy":
            suggest = "ip_allocation_policy"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "maxPodsPerNode":
            suggest = "max_pods_per_node"
        elif key == "oauthScopes":
            suggest = "oauth_scopes"
        elif key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_gb: int,
                 enable_ip_masq_agent: bool,
                 ip_allocation_policy: 'outputs.IPAllocationPolicyResponse',
                 location: str,
                 machine_type: str,
                 max_pods_per_node: int,
                 network: str,
                 oauth_scopes: Sequence[str],
                 service_account: str,
                 subnetwork: str,
                 tags: Sequence[str]):
        """
        The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
        :param int disk_size_gb: Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param bool enable_ip_masq_agent: Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
        :param 'IPAllocationPolicyResponse' ip_allocation_policy: Optional. The IPAllocationPolicy fields for the GKE cluster.
        :param str location: Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str machine_type: Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param int max_pods_per_node: Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str network: Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
        :param Sequence[str] oauth_scopes: Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str service_account: Optional. The Google Cloud Platform Service Account to be used by the workloads. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
        :param str subnetwork: Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
        :param Sequence[str] tags: Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "enable_ip_masq_agent", enable_ip_masq_agent)
        pulumi.set(__self__, "ip_allocation_policy", ip_allocation_policy)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "subnetwork", subnetwork)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> int:
        """
        Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="enableIpMasqAgent")
    def enable_ip_masq_agent(self) -> bool:
        """
        Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
        """
        return pulumi.get(self, "enable_ip_masq_agent")

    @property
    @pulumi.getter(name="ipAllocationPolicy")
    def ip_allocation_policy(self) -> 'outputs.IPAllocationPolicyResponse':
        """
        Optional. The IPAllocationPolicy fields for the GKE cluster.
        """
        return pulumi.get(self, "ip_allocation_policy")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> int:
        """
        Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "max_pods_per_node")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Sequence[str]:
        """
        Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "oauth_scopes")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Optional. The Google Cloud Platform Service Account to be used by the workloads. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def subnetwork(self) -> str:
        """
        Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
        """
        return pulumi.get(self, "subnetwork")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class PrivateClusterConfigResponse(dict):
    """
    Configuration options for the private GKE cluster in a Cloud Composer environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enablePrivateEndpoint":
            suggest = "enable_private_endpoint"
        elif key == "masterIpv4CidrBlock":
            suggest = "master_ipv4_cidr_block"
        elif key == "masterIpv4ReservedRange":
            suggest = "master_ipv4_reserved_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateClusterConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateClusterConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateClusterConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_private_endpoint: bool,
                 master_ipv4_cidr_block: str,
                 master_ipv4_reserved_range: str):
        """
        Configuration options for the private GKE cluster in a Cloud Composer environment.
        :param bool enable_private_endpoint: Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
        :param str master_ipv4_cidr_block: Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
        :param str master_ipv4_reserved_range: The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
        """
        pulumi.set(__self__, "enable_private_endpoint", enable_private_endpoint)
        pulumi.set(__self__, "master_ipv4_cidr_block", master_ipv4_cidr_block)
        pulumi.set(__self__, "master_ipv4_reserved_range", master_ipv4_reserved_range)

    @property
    @pulumi.getter(name="enablePrivateEndpoint")
    def enable_private_endpoint(self) -> bool:
        """
        Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
        """
        return pulumi.get(self, "enable_private_endpoint")

    @property
    @pulumi.getter(name="masterIpv4CidrBlock")
    def master_ipv4_cidr_block(self) -> str:
        """
        Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
        """
        return pulumi.get(self, "master_ipv4_cidr_block")

    @property
    @pulumi.getter(name="masterIpv4ReservedRange")
    def master_ipv4_reserved_range(self) -> str:
        """
        The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
        """
        return pulumi.get(self, "master_ipv4_reserved_range")


@pulumi.output_type
class PrivateEnvironmentConfigResponse(dict):
    """
    The configuration information for configuring a Private IP Cloud Composer environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudComposerConnectionSubnetwork":
            suggest = "cloud_composer_connection_subnetwork"
        elif key == "cloudComposerNetworkIpv4CidrBlock":
            suggest = "cloud_composer_network_ipv4_cidr_block"
        elif key == "cloudComposerNetworkIpv4ReservedRange":
            suggest = "cloud_composer_network_ipv4_reserved_range"
        elif key == "cloudSqlIpv4CidrBlock":
            suggest = "cloud_sql_ipv4_cidr_block"
        elif key == "enablePrivateEnvironment":
            suggest = "enable_private_environment"
        elif key == "enablePrivatelyUsedPublicIps":
            suggest = "enable_privately_used_public_ips"
        elif key == "networkingConfig":
            suggest = "networking_config"
        elif key == "privateClusterConfig":
            suggest = "private_cluster_config"
        elif key == "webServerIpv4CidrBlock":
            suggest = "web_server_ipv4_cidr_block"
        elif key == "webServerIpv4ReservedRange":
            suggest = "web_server_ipv4_reserved_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEnvironmentConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEnvironmentConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEnvironmentConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_composer_connection_subnetwork: str,
                 cloud_composer_network_ipv4_cidr_block: str,
                 cloud_composer_network_ipv4_reserved_range: str,
                 cloud_sql_ipv4_cidr_block: str,
                 enable_private_environment: bool,
                 enable_privately_used_public_ips: bool,
                 networking_config: 'outputs.NetworkingConfigResponse',
                 private_cluster_config: 'outputs.PrivateClusterConfigResponse',
                 web_server_ipv4_cidr_block: str,
                 web_server_ipv4_reserved_range: str):
        """
        The configuration information for configuring a Private IP Cloud Composer environment.
        :param str cloud_composer_connection_subnetwork: Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
        :param str cloud_composer_network_ipv4_cidr_block: Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        :param str cloud_composer_network_ipv4_reserved_range: The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        :param str cloud_sql_ipv4_cidr_block: Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
        :param bool enable_private_environment: Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param bool enable_privately_used_public_ips: Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
        :param 'NetworkingConfigResponse' networking_config: Optional. Configuration for the network connections configuration in the environment.
        :param 'PrivateClusterConfigResponse' private_cluster_config: Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
        :param str web_server_ipv4_cidr_block: Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str web_server_ipv4_reserved_range: The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        pulumi.set(__self__, "cloud_composer_connection_subnetwork", cloud_composer_connection_subnetwork)
        pulumi.set(__self__, "cloud_composer_network_ipv4_cidr_block", cloud_composer_network_ipv4_cidr_block)
        pulumi.set(__self__, "cloud_composer_network_ipv4_reserved_range", cloud_composer_network_ipv4_reserved_range)
        pulumi.set(__self__, "cloud_sql_ipv4_cidr_block", cloud_sql_ipv4_cidr_block)
        pulumi.set(__self__, "enable_private_environment", enable_private_environment)
        pulumi.set(__self__, "enable_privately_used_public_ips", enable_privately_used_public_ips)
        pulumi.set(__self__, "networking_config", networking_config)
        pulumi.set(__self__, "private_cluster_config", private_cluster_config)
        pulumi.set(__self__, "web_server_ipv4_cidr_block", web_server_ipv4_cidr_block)
        pulumi.set(__self__, "web_server_ipv4_reserved_range", web_server_ipv4_reserved_range)

    @property
    @pulumi.getter(name="cloudComposerConnectionSubnetwork")
    def cloud_composer_connection_subnetwork(self) -> str:
        """
        Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
        """
        return pulumi.get(self, "cloud_composer_connection_subnetwork")

    @property
    @pulumi.getter(name="cloudComposerNetworkIpv4CidrBlock")
    def cloud_composer_network_ipv4_cidr_block(self) -> str:
        """
        Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "cloud_composer_network_ipv4_cidr_block")

    @property
    @pulumi.getter(name="cloudComposerNetworkIpv4ReservedRange")
    def cloud_composer_network_ipv4_reserved_range(self) -> str:
        """
        The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        """
        return pulumi.get(self, "cloud_composer_network_ipv4_reserved_range")

    @property
    @pulumi.getter(name="cloudSqlIpv4CidrBlock")
    def cloud_sql_ipv4_cidr_block(self) -> str:
        """
        Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
        """
        return pulumi.get(self, "cloud_sql_ipv4_cidr_block")

    @property
    @pulumi.getter(name="enablePrivateEnvironment")
    def enable_private_environment(self) -> bool:
        """
        Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "enable_private_environment")

    @property
    @pulumi.getter(name="enablePrivatelyUsedPublicIps")
    def enable_privately_used_public_ips(self) -> bool:
        """
        Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
        """
        return pulumi.get(self, "enable_privately_used_public_ips")

    @property
    @pulumi.getter(name="networkingConfig")
    def networking_config(self) -> 'outputs.NetworkingConfigResponse':
        """
        Optional. Configuration for the network connections configuration in the environment.
        """
        return pulumi.get(self, "networking_config")

    @property
    @pulumi.getter(name="privateClusterConfig")
    def private_cluster_config(self) -> 'outputs.PrivateClusterConfigResponse':
        """
        Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
        """
        return pulumi.get(self, "private_cluster_config")

    @property
    @pulumi.getter(name="webServerIpv4CidrBlock")
    def web_server_ipv4_cidr_block(self) -> str:
        """
        Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "web_server_ipv4_cidr_block")

    @property
    @pulumi.getter(name="webServerIpv4ReservedRange")
    def web_server_ipv4_reserved_range(self) -> str:
        """
        The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        """
        return pulumi.get(self, "web_server_ipv4_reserved_range")


@pulumi.output_type
class RecoveryConfigResponse(dict):
    """
    The Recovery settings of an environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduledSnapshotsConfig":
            suggest = "scheduled_snapshots_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecoveryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecoveryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecoveryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scheduled_snapshots_config: 'outputs.ScheduledSnapshotsConfigResponse'):
        """
        The Recovery settings of an environment.
        :param 'ScheduledSnapshotsConfigResponse' scheduled_snapshots_config: Optional. The configuration for scheduled snapshot creation mechanism.
        """
        pulumi.set(__self__, "scheduled_snapshots_config", scheduled_snapshots_config)

    @property
    @pulumi.getter(name="scheduledSnapshotsConfig")
    def scheduled_snapshots_config(self) -> 'outputs.ScheduledSnapshotsConfigResponse':
        """
        Optional. The configuration for scheduled snapshot creation mechanism.
        """
        return pulumi.get(self, "scheduled_snapshots_config")


@pulumi.output_type
class ScheduledSnapshotsConfigResponse(dict):
    """
    The configuration for scheduled snapshot creation mechanism.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "snapshotCreationSchedule":
            suggest = "snapshot_creation_schedule"
        elif key == "snapshotLocation":
            suggest = "snapshot_location"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledSnapshotsConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledSnapshotsConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledSnapshotsConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 snapshot_creation_schedule: str,
                 snapshot_location: str,
                 time_zone: str):
        """
        The configuration for scheduled snapshot creation mechanism.
        :param bool enabled: Optional. Whether scheduled snapshots creation is enabled.
        :param str snapshot_creation_schedule: Optional. The cron expression representing the time when snapshots creation mechanism runs. This field is subject to additional validation around frequency of execution.
        :param str snapshot_location: Optional. The Cloud Storage location for storing automatically created snapshots.
        :param str time_zone: Optional. Time zone that sets the context to interpret snapshot_creation_schedule.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "snapshot_creation_schedule", snapshot_creation_schedule)
        pulumi.set(__self__, "snapshot_location", snapshot_location)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Optional. Whether scheduled snapshots creation is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="snapshotCreationSchedule")
    def snapshot_creation_schedule(self) -> str:
        """
        Optional. The cron expression representing the time when snapshots creation mechanism runs. This field is subject to additional validation around frequency of execution.
        """
        return pulumi.get(self, "snapshot_creation_schedule")

    @property
    @pulumi.getter(name="snapshotLocation")
    def snapshot_location(self) -> str:
        """
        Optional. The Cloud Storage location for storing automatically created snapshots.
        """
        return pulumi.get(self, "snapshot_location")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Optional. Time zone that sets the context to interpret snapshot_creation_schedule.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SchedulerResourceResponse(dict):
    """
    Configuration for resources used by Airflow schedulers.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryGb":
            suggest = "memory_gb"
        elif key == "storageGb":
            suggest = "storage_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchedulerResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchedulerResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchedulerResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 cpu: float,
                 memory_gb: float,
                 storage_gb: float):
        """
        Configuration for resources used by Airflow schedulers.
        :param int count: Optional. The number of schedulers.
        :param float cpu: Optional. CPU request and limit for a single Airflow scheduler replica.
        :param float memory_gb: Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
        :param float storage_gb: Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory_gb", memory_gb)
        pulumi.set(__self__, "storage_gb", storage_gb)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Optional. The number of schedulers.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        Optional. CPU request and limit for a single Airflow scheduler replica.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> float:
        """
        Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
        """
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> float:
        """
        Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
        """
        return pulumi.get(self, "storage_gb")


@pulumi.output_type
class SoftwareConfigResponse(dict):
    """
    Specifies the selection and configuration of software inside the environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airflowConfigOverrides":
            suggest = "airflow_config_overrides"
        elif key == "cloudDataLineageIntegration":
            suggest = "cloud_data_lineage_integration"
        elif key == "envVariables":
            suggest = "env_variables"
        elif key == "imageVersion":
            suggest = "image_version"
        elif key == "pypiPackages":
            suggest = "pypi_packages"
        elif key == "pythonVersion":
            suggest = "python_version"
        elif key == "schedulerCount":
            suggest = "scheduler_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airflow_config_overrides: Mapping[str, str],
                 cloud_data_lineage_integration: 'outputs.CloudDataLineageIntegrationResponse',
                 env_variables: Mapping[str, str],
                 image_version: str,
                 pypi_packages: Mapping[str, str],
                 python_version: str,
                 scheduler_count: int):
        """
        Specifies the selection and configuration of software inside the environment.
        :param Mapping[str, str] airflow_config_overrides: Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
        :param 'CloudDataLineageIntegrationResponse' cloud_data_lineage_integration: Optional. The configuration for Cloud Data Lineage integration.
        :param Mapping[str, str] env_variables: Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
        :param str image_version: The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
        :param Mapping[str, str] pypi_packages: Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
        :param str python_version: Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
        :param int scheduler_count: Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
        """
        pulumi.set(__self__, "airflow_config_overrides", airflow_config_overrides)
        pulumi.set(__self__, "cloud_data_lineage_integration", cloud_data_lineage_integration)
        pulumi.set(__self__, "env_variables", env_variables)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "pypi_packages", pypi_packages)
        pulumi.set(__self__, "python_version", python_version)
        pulumi.set(__self__, "scheduler_count", scheduler_count)

    @property
    @pulumi.getter(name="airflowConfigOverrides")
    def airflow_config_overrides(self) -> Mapping[str, str]:
        """
        Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
        """
        return pulumi.get(self, "airflow_config_overrides")

    @property
    @pulumi.getter(name="cloudDataLineageIntegration")
    def cloud_data_lineage_integration(self) -> 'outputs.CloudDataLineageIntegrationResponse':
        """
        Optional. The configuration for Cloud Data Lineage integration.
        """
        return pulumi.get(self, "cloud_data_lineage_integration")

    @property
    @pulumi.getter(name="envVariables")
    def env_variables(self) -> Mapping[str, str]:
        """
        Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
        """
        return pulumi.get(self, "env_variables")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="pypiPackages")
    def pypi_packages(self) -> Mapping[str, str]:
        """
        Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
        """
        return pulumi.get(self, "pypi_packages")

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> str:
        """
        Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
        """
        return pulumi.get(self, "python_version")

    @property
    @pulumi.getter(name="schedulerCount")
    def scheduler_count(self) -> int:
        """
        Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
        """
        return pulumi.get(self, "scheduler_count")


@pulumi.output_type
class StorageConfigResponse(dict):
    """
    The configuration for data storage in the environment.
    """
    def __init__(__self__, *,
                 bucket: str):
        """
        The configuration for data storage in the environment.
        :param str bucket: Optional. The name of the Cloud Storage bucket used by the environment. No `gs://` prefix.
        """
        pulumi.set(__self__, "bucket", bucket)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Optional. The name of the Cloud Storage bucket used by the environment. No `gs://` prefix.
        """
        return pulumi.get(self, "bucket")


@pulumi.output_type
class TriggererResourceResponse(dict):
    """
    Configuration for resources used by Airflow triggerers.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryGb":
            suggest = "memory_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggererResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggererResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggererResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 cpu: float,
                 memory_gb: float):
        """
        Configuration for resources used by Airflow triggerers.
        :param int count: Optional. The number of triggerers.
        :param float cpu: Optional. CPU request and limit for a single Airflow triggerer replica.
        :param float memory_gb: Optional. Memory (GB) request and limit for a single Airflow triggerer replica.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory_gb", memory_gb)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Optional. The number of triggerers.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        Optional. CPU request and limit for a single Airflow triggerer replica.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> float:
        """
        Optional. Memory (GB) request and limit for a single Airflow triggerer replica.
        """
        return pulumi.get(self, "memory_gb")


@pulumi.output_type
class WebServerConfigResponse(dict):
    """
    The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebServerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebServerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebServerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_type: str):
        """
        The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
        :param str machine_type: Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
        """
        pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
        """
        return pulumi.get(self, "machine_type")


@pulumi.output_type
class WebServerNetworkAccessControlResponse(dict):
    """
    Network-level access control policy for the Airflow web server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedIpRanges":
            suggest = "allowed_ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebServerNetworkAccessControlResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebServerNetworkAccessControlResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebServerNetworkAccessControlResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_ip_ranges: Sequence['outputs.AllowedIpRangeResponse']):
        """
        Network-level access control policy for the Airflow web server.
        :param Sequence['AllowedIpRangeResponse'] allowed_ip_ranges: A collection of allowed IP ranges with descriptions.
        """
        pulumi.set(__self__, "allowed_ip_ranges", allowed_ip_ranges)

    @property
    @pulumi.getter(name="allowedIpRanges")
    def allowed_ip_ranges(self) -> Sequence['outputs.AllowedIpRangeResponse']:
        """
        A collection of allowed IP ranges with descriptions.
        """
        return pulumi.get(self, "allowed_ip_ranges")


@pulumi.output_type
class WebServerResourceResponse(dict):
    """
    Configuration for resources used by Airflow web server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryGb":
            suggest = "memory_gb"
        elif key == "storageGb":
            suggest = "storage_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebServerResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebServerResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebServerResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: float,
                 memory_gb: float,
                 storage_gb: float):
        """
        Configuration for resources used by Airflow web server.
        :param float cpu: Optional. CPU request and limit for Airflow web server.
        :param float memory_gb: Optional. Memory (GB) request and limit for Airflow web server.
        :param float storage_gb: Optional. Storage (GB) request and limit for Airflow web server.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory_gb", memory_gb)
        pulumi.set(__self__, "storage_gb", storage_gb)

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        Optional. CPU request and limit for Airflow web server.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> float:
        """
        Optional. Memory (GB) request and limit for Airflow web server.
        """
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> float:
        """
        Optional. Storage (GB) request and limit for Airflow web server.
        """
        return pulumi.get(self, "storage_gb")


@pulumi.output_type
class WorkerResourceResponse(dict):
    """
    Configuration for resources used by Airflow workers.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCount":
            suggest = "max_count"
        elif key == "memoryGb":
            suggest = "memory_gb"
        elif key == "minCount":
            suggest = "min_count"
        elif key == "storageGb":
            suggest = "storage_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkerResourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkerResourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkerResourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: float,
                 max_count: int,
                 memory_gb: float,
                 min_count: int,
                 storage_gb: float):
        """
        Configuration for resources used by Airflow workers.
        :param float cpu: Optional. CPU request and limit for a single Airflow worker replica.
        :param int max_count: Optional. Maximum number of workers for autoscaling.
        :param float memory_gb: Optional. Memory (GB) request and limit for a single Airflow worker replica.
        :param int min_count: Optional. Minimum number of workers for autoscaling.
        :param float storage_gb: Optional. Storage (GB) request and limit for a single Airflow worker replica.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "max_count", max_count)
        pulumi.set(__self__, "memory_gb", memory_gb)
        pulumi.set(__self__, "min_count", min_count)
        pulumi.set(__self__, "storage_gb", storage_gb)

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        Optional. CPU request and limit for a single Airflow worker replica.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> int:
        """
        Optional. Maximum number of workers for autoscaling.
        """
        return pulumi.get(self, "max_count")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> float:
        """
        Optional. Memory (GB) request and limit for a single Airflow worker replica.
        """
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> int:
        """
        Optional. Minimum number of workers for autoscaling.
        """
        return pulumi.get(self, "min_count")

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> float:
        """
        Optional. Storage (GB) request and limit for a single Airflow worker replica.
        """
        return pulumi.get(self, "storage_gb")


@pulumi.output_type
class WorkloadsConfigResponse(dict):
    """
    The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webServer":
            suggest = "web_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadsConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadsConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadsConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scheduler: 'outputs.SchedulerResourceResponse',
                 triggerer: 'outputs.TriggererResourceResponse',
                 web_server: 'outputs.WebServerResourceResponse',
                 worker: 'outputs.WorkerResourceResponse'):
        """
        The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
        :param 'SchedulerResourceResponse' scheduler: Optional. Resources used by Airflow schedulers.
        :param 'TriggererResourceResponse' triggerer: Optional. Resources used by Airflow triggerers.
        :param 'WebServerResourceResponse' web_server: Optional. Resources used by Airflow web server.
        :param 'WorkerResourceResponse' worker: Optional. Resources used by Airflow workers.
        """
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "triggerer", triggerer)
        pulumi.set(__self__, "web_server", web_server)
        pulumi.set(__self__, "worker", worker)

    @property
    @pulumi.getter
    def scheduler(self) -> 'outputs.SchedulerResourceResponse':
        """
        Optional. Resources used by Airflow schedulers.
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def triggerer(self) -> 'outputs.TriggererResourceResponse':
        """
        Optional. Resources used by Airflow triggerers.
        """
        return pulumi.get(self, "triggerer")

    @property
    @pulumi.getter(name="webServer")
    def web_server(self) -> 'outputs.WebServerResourceResponse':
        """
        Optional. Resources used by Airflow web server.
        """
        return pulumi.get(self, "web_server")

    @property
    @pulumi.getter
    def worker(self) -> 'outputs.WorkerResourceResponse':
        """
        Optional. Resources used by Airflow workers.
        """
        return pulumi.get(self, "worker")


