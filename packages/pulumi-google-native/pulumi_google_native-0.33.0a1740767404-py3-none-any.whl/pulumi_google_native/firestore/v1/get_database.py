# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    def __init__(__self__, app_engine_integration_mode=None, concurrency_mode=None, create_time=None, delete_protection_state=None, earliest_version_time=None, etag=None, key_prefix=None, location=None, name=None, point_in_time_recovery_enablement=None, type=None, uid=None, update_time=None, version_retention_period=None):
        if app_engine_integration_mode and not isinstance(app_engine_integration_mode, str):
            raise TypeError("Expected argument 'app_engine_integration_mode' to be a str")
        pulumi.set(__self__, "app_engine_integration_mode", app_engine_integration_mode)
        if concurrency_mode and not isinstance(concurrency_mode, str):
            raise TypeError("Expected argument 'concurrency_mode' to be a str")
        pulumi.set(__self__, "concurrency_mode", concurrency_mode)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if delete_protection_state and not isinstance(delete_protection_state, str):
            raise TypeError("Expected argument 'delete_protection_state' to be a str")
        pulumi.set(__self__, "delete_protection_state", delete_protection_state)
        if earliest_version_time and not isinstance(earliest_version_time, str):
            raise TypeError("Expected argument 'earliest_version_time' to be a str")
        pulumi.set(__self__, "earliest_version_time", earliest_version_time)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if key_prefix and not isinstance(key_prefix, str):
            raise TypeError("Expected argument 'key_prefix' to be a str")
        pulumi.set(__self__, "key_prefix", key_prefix)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if point_in_time_recovery_enablement and not isinstance(point_in_time_recovery_enablement, str):
            raise TypeError("Expected argument 'point_in_time_recovery_enablement' to be a str")
        pulumi.set(__self__, "point_in_time_recovery_enablement", point_in_time_recovery_enablement)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if version_retention_period and not isinstance(version_retention_period, str):
            raise TypeError("Expected argument 'version_retention_period' to be a str")
        pulumi.set(__self__, "version_retention_period", version_retention_period)

    @property
    @pulumi.getter(name="appEngineIntegrationMode")
    def app_engine_integration_mode(self) -> str:
        """
        The App Engine integration mode to use for this database.
        """
        return pulumi.get(self, "app_engine_integration_mode")

    @property
    @pulumi.getter(name="concurrencyMode")
    def concurrency_mode(self) -> str:
        """
        The concurrency control mode to use for this database.
        """
        return pulumi.get(self, "concurrency_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionState")
    def delete_protection_state(self) -> str:
        """
        State of delete protection for the database.
        """
        return pulumi.get(self, "delete_protection_state")

    @property
    @pulumi.getter(name="earliestVersionTime")
    def earliest_version_time(self) -> str:
        """
        The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
        """
        return pulumi.get(self, "earliest_version_time")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> str:
        """
        The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
        """
        return pulumi.get(self, "key_prefix")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the Database. Format: `projects/{project}/databases/{database}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnablement")
    def point_in_time_recovery_enablement(self) -> str:
        """
        Whether to enable the PITR feature on this database.
        """
        return pulumi.get(self, "point_in_time_recovery_enablement")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The system-generated UUID4 for this Database.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="versionRetentionPeriod")
    def version_retention_period(self) -> str:
        """
        The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
        """
        return pulumi.get(self, "version_retention_period")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            app_engine_integration_mode=self.app_engine_integration_mode,
            concurrency_mode=self.concurrency_mode,
            create_time=self.create_time,
            delete_protection_state=self.delete_protection_state,
            earliest_version_time=self.earliest_version_time,
            etag=self.etag,
            key_prefix=self.key_prefix,
            location=self.location,
            name=self.name,
            point_in_time_recovery_enablement=self.point_in_time_recovery_enablement,
            type=self.type,
            uid=self.uid,
            update_time=self.update_time,
            version_retention_period=self.version_retention_period)


def get_database(database_id: Optional[str] = None,
                 project: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    Gets information about a database.
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firestore/v1:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        app_engine_integration_mode=pulumi.get(__ret__, 'app_engine_integration_mode'),
        concurrency_mode=pulumi.get(__ret__, 'concurrency_mode'),
        create_time=pulumi.get(__ret__, 'create_time'),
        delete_protection_state=pulumi.get(__ret__, 'delete_protection_state'),
        earliest_version_time=pulumi.get(__ret__, 'earliest_version_time'),
        etag=pulumi.get(__ret__, 'etag'),
        key_prefix=pulumi.get(__ret__, 'key_prefix'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        point_in_time_recovery_enablement=pulumi.get(__ret__, 'point_in_time_recovery_enablement'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        version_retention_period=pulumi.get(__ret__, 'version_retention_period'))


@_utilities.lift_output_func(get_database)
def get_database_output(database_id: Optional[pulumi.Input[str]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    Gets information about a database.
    """
    ...
