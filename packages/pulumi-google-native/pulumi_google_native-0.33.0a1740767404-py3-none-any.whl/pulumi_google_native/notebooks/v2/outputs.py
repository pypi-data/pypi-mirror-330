# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AcceleratorConfigResponse',
    'BindingResponse',
    'BootDiskResponse',
    'ContainerImageResponse',
    'DataDiskResponse',
    'ExprResponse',
    'GPUDriverConfigResponse',
    'GceSetupResponse',
    'NetworkInterfaceResponse',
    'ServiceAccountResponse',
    'ShieldedInstanceConfigResponse',
    'UpgradeHistoryEntryResponse',
    'VmImageResponse',
]

@pulumi.output_type
class AcceleratorConfigResponse(dict):
    """
    An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreCount":
            suggest = "core_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AcceleratorConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AcceleratorConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AcceleratorConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_count: str,
                 type: str):
        """
        An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
        :param str core_count: Optional. Count of cores of this accelerator.
        :param str type: Optional. Type of this accelerator.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> str:
        """
        Optional. Count of cores of this accelerator.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Optional. Type of this accelerator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class BootDiskResponse(dict):
    """
    The definition of a boot disk.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryption":
            suggest = "disk_encryption"
        elif key == "diskSizeGb":
            suggest = "disk_size_gb"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_encryption: str,
                 disk_size_gb: str,
                 disk_type: str,
                 kms_key: str):
        """
        The definition of a boot disk.
        :param str disk_encryption: Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
        :param str disk_size_gb: Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
        :param str disk_type: Optional. Indicates the type of the disk.
        :param str kms_key: Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
        """
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> str:
        """
        Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
        """
        return pulumi.get(self, "disk_encryption")

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> str:
        """
        Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Optional. Indicates the type of the disk.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> str:
        """
        Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class ContainerImageResponse(dict):
    """
    Definition of a container image for starting a notebook instance with the environment installed in a container.
    """
    def __init__(__self__, *,
                 repository: str,
                 tag: str):
        """
        Definition of a container image for starting a notebook instance with the environment installed in a container.
        :param str repository: The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
        :param str tag: Optional. The tag of the container image. If not specified, this defaults to the latest tag.
        """
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Optional. The tag of the container image. If not specified, this defaults to the latest tag.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class DataDiskResponse(dict):
    """
    An instance-attached disk resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryption":
            suggest = "disk_encryption"
        elif key == "diskSizeGb":
            suggest = "disk_size_gb"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataDiskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataDiskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_encryption: str,
                 disk_size_gb: str,
                 disk_type: str,
                 kms_key: str):
        """
        An instance-attached disk resource.
        :param str disk_encryption: Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
        :param str disk_size_gb: Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
        :param str disk_type: Optional. Input only. Indicates the type of the disk.
        :param str kms_key: Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
        """
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> str:
        """
        Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
        """
        return pulumi.get(self, "disk_encryption")

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> str:
        """
        Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Optional. Input only. Indicates the type of the disk.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> str:
        """
        Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GPUDriverConfigResponse(dict):
    """
    A GPU driver configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customGpuDriverPath":
            suggest = "custom_gpu_driver_path"
        elif key == "enableGpuDriver":
            suggest = "enable_gpu_driver"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GPUDriverConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GPUDriverConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GPUDriverConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_gpu_driver_path: str,
                 enable_gpu_driver: bool):
        """
        A GPU driver configuration
        :param str custom_gpu_driver_path: Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
        :param bool enable_gpu_driver: Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
        """
        pulumi.set(__self__, "custom_gpu_driver_path", custom_gpu_driver_path)
        pulumi.set(__self__, "enable_gpu_driver", enable_gpu_driver)

    @property
    @pulumi.getter(name="customGpuDriverPath")
    def custom_gpu_driver_path(self) -> str:
        """
        Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
        """
        return pulumi.get(self, "custom_gpu_driver_path")

    @property
    @pulumi.getter(name="enableGpuDriver")
    def enable_gpu_driver(self) -> bool:
        """
        Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
        """
        return pulumi.get(self, "enable_gpu_driver")


@pulumi.output_type
class GceSetupResponse(dict):
    """
    The definition of how to configure a VM instance outside of Resources and Identity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceleratorConfigs":
            suggest = "accelerator_configs"
        elif key == "bootDisk":
            suggest = "boot_disk"
        elif key == "containerImage":
            suggest = "container_image"
        elif key == "dataDisks":
            suggest = "data_disks"
        elif key == "disablePublicIp":
            suggest = "disable_public_ip"
        elif key == "enableIpForwarding":
            suggest = "enable_ip_forwarding"
        elif key == "gpuDriverConfig":
            suggest = "gpu_driver_config"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "serviceAccounts":
            suggest = "service_accounts"
        elif key == "shieldedInstanceConfig":
            suggest = "shielded_instance_config"
        elif key == "vmImage":
            suggest = "vm_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GceSetupResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GceSetupResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GceSetupResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accelerator_configs: Sequence['outputs.AcceleratorConfigResponse'],
                 boot_disk: 'outputs.BootDiskResponse',
                 container_image: 'outputs.ContainerImageResponse',
                 data_disks: Sequence['outputs.DataDiskResponse'],
                 disable_public_ip: bool,
                 enable_ip_forwarding: bool,
                 gpu_driver_config: 'outputs.GPUDriverConfigResponse',
                 machine_type: str,
                 metadata: Mapping[str, str],
                 network_interfaces: Sequence['outputs.NetworkInterfaceResponse'],
                 service_accounts: Sequence['outputs.ServiceAccountResponse'],
                 shielded_instance_config: 'outputs.ShieldedInstanceConfigResponse',
                 tags: Sequence[str],
                 vm_image: 'outputs.VmImageResponse'):
        """
        The definition of how to configure a VM instance outside of Resources and Identity.
        :param Sequence['AcceleratorConfigResponse'] accelerator_configs: Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
        :param 'BootDiskResponse' boot_disk: Optional. The boot disk for the VM.
        :param 'ContainerImageResponse' container_image: Optional. Use a container image to start the notebook instance.
        :param Sequence['DataDiskResponse'] data_disks: Optional. Data disks attached to the VM instance. Currently supports only one data disk.
        :param bool disable_public_ip: Optional. If true, no external IP will be assigned to this VM instance.
        :param bool enable_ip_forwarding: Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
        :param 'GPUDriverConfigResponse' gpu_driver_config: Optional. Configuration for GPU drivers.
        :param str machine_type: Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
        :param Mapping[str, str] metadata: Optional. Custom metadata to apply to this instance.
        :param Sequence['NetworkInterfaceResponse'] network_interfaces: Optional. The network interfaces for the VM. Supports only one interface.
        :param Sequence['ServiceAccountResponse'] service_accounts: Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
        :param 'ShieldedInstanceConfigResponse' shielded_instance_config: Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
        :param Sequence[str] tags: Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
        :param 'VmImageResponse' vm_image: Optional. Use a Compute Engine VM image to start the notebook instance.
        """
        pulumi.set(__self__, "accelerator_configs", accelerator_configs)
        pulumi.set(__self__, "boot_disk", boot_disk)
        pulumi.set(__self__, "container_image", container_image)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "disable_public_ip", disable_public_ip)
        pulumi.set(__self__, "enable_ip_forwarding", enable_ip_forwarding)
        pulumi.set(__self__, "gpu_driver_config", gpu_driver_config)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "service_accounts", service_accounts)
        pulumi.set(__self__, "shielded_instance_config", shielded_instance_config)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vm_image", vm_image)

    @property
    @pulumi.getter(name="acceleratorConfigs")
    def accelerator_configs(self) -> Sequence['outputs.AcceleratorConfigResponse']:
        """
        Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
        """
        return pulumi.get(self, "accelerator_configs")

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> 'outputs.BootDiskResponse':
        """
        Optional. The boot disk for the VM.
        """
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> 'outputs.ContainerImageResponse':
        """
        Optional. Use a container image to start the notebook instance.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.DataDiskResponse']:
        """
        Optional. Data disks attached to the VM instance. Currently supports only one data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="disablePublicIp")
    def disable_public_ip(self) -> bool:
        """
        Optional. If true, no external IP will be assigned to this VM instance.
        """
        return pulumi.get(self, "disable_public_ip")

    @property
    @pulumi.getter(name="enableIpForwarding")
    def enable_ip_forwarding(self) -> bool:
        """
        Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
        """
        return pulumi.get(self, "enable_ip_forwarding")

    @property
    @pulumi.getter(name="gpuDriverConfig")
    def gpu_driver_config(self) -> 'outputs.GPUDriverConfigResponse':
        """
        Optional. Configuration for GPU drivers.
        """
        return pulumi.get(self, "gpu_driver_config")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        Optional. Custom metadata to apply to this instance.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.NetworkInterfaceResponse']:
        """
        Optional. The network interfaces for the VM. Supports only one interface.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="serviceAccounts")
    def service_accounts(self) -> Sequence['outputs.ServiceAccountResponse']:
        """
        Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
        """
        return pulumi.get(self, "service_accounts")

    @property
    @pulumi.getter(name="shieldedInstanceConfig")
    def shielded_instance_config(self) -> 'outputs.ShieldedInstanceConfigResponse':
        """
        Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
        """
        return pulumi.get(self, "shielded_instance_config")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vmImage")
    def vm_image(self) -> 'outputs.VmImageResponse':
        """
        Optional. Use a Compute Engine VM image to start the notebook instance.
        """
        return pulumi.get(self, "vm_image")


@pulumi.output_type
class NetworkInterfaceResponse(dict):
    """
    The definition of a network interface resource attached to a VM.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nicType":
            suggest = "nic_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInterfaceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInterfaceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 nic_type: str,
                 subnet: str):
        """
        The definition of a network interface resource attached to a VM.
        :param str network: Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
        :param str nic_type: Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
        :param str subnet: Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "nic_type", nic_type)
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="nicType")
    def nic_type(self) -> str:
        """
        Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
        """
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class ServiceAccountResponse(dict):
    """
    A service account that acts as an identity.
    """
    def __init__(__self__, *,
                 email: str,
                 scopes: Sequence[str]):
        """
        A service account that acts as an identity.
        :param str email: Optional. Email address of the service account.
        :param Sequence[str] scopes: The list of scopes to be made available for this service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Optional. Email address of the service account.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        The list of scopes to be made available for this service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class ShieldedInstanceConfigResponse(dict):
    """
    A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableIntegrityMonitoring":
            suggest = "enable_integrity_monitoring"
        elif key == "enableSecureBoot":
            suggest = "enable_secure_boot"
        elif key == "enableVtpm":
            suggest = "enable_vtpm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShieldedInstanceConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShieldedInstanceConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShieldedInstanceConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_integrity_monitoring: bool,
                 enable_secure_boot: bool,
                 enable_vtpm: bool):
        """
        A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
        :param bool enable_integrity_monitoring: Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
        :param bool enable_secure_boot: Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
        :param bool enable_vtpm: Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
        """
        pulumi.set(__self__, "enable_integrity_monitoring", enable_integrity_monitoring)
        pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        pulumi.set(__self__, "enable_vtpm", enable_vtpm)

    @property
    @pulumi.getter(name="enableIntegrityMonitoring")
    def enable_integrity_monitoring(self) -> bool:
        """
        Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
        """
        return pulumi.get(self, "enable_integrity_monitoring")

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> bool:
        """
        Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
        """
        return pulumi.get(self, "enable_secure_boot")

    @property
    @pulumi.getter(name="enableVtpm")
    def enable_vtpm(self) -> bool:
        """
        Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
        """
        return pulumi.get(self, "enable_vtpm")


@pulumi.output_type
class UpgradeHistoryEntryResponse(dict):
    """
    The entry of VM image upgrade history.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "targetVersion":
            suggest = "target_version"
        elif key == "vmImage":
            suggest = "vm_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpgradeHistoryEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpgradeHistoryEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpgradeHistoryEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 container_image: str,
                 create_time: str,
                 framework: str,
                 snapshot: str,
                 state: str,
                 target_version: str,
                 version: str,
                 vm_image: str):
        """
        The entry of VM image upgrade history.
        :param str action: Optional. Action. Rolloback or Upgrade.
        :param str container_image: Optional. The container image before this instance upgrade.
        :param str create_time: Immutable. The time that this instance upgrade history entry is created.
        :param str framework: Optional. The framework of this notebook instance.
        :param str snapshot: Optional. The snapshot of the boot disk of this notebook instance before upgrade.
        :param str state: The state of this instance upgrade history entry.
        :param str target_version: Optional. Target VM Version, like m63.
        :param str version: Optional. The version of the notebook instance before this upgrade.
        :param str vm_image: Optional. The VM image before this instance upgrade.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "container_image", container_image)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "framework", framework)
        pulumi.set(__self__, "snapshot", snapshot)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_version", target_version)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vm_image", vm_image)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Optional. Action. Rolloback or Upgrade.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> str:
        """
        Optional. The container image before this instance upgrade.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Immutable. The time that this instance upgrade history entry is created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def framework(self) -> str:
        """
        Optional. The framework of this notebook instance.
        """
        return pulumi.get(self, "framework")

    @property
    @pulumi.getter
    def snapshot(self) -> str:
        """
        Optional. The snapshot of the boot disk of this notebook instance before upgrade.
        """
        return pulumi.get(self, "snapshot")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of this instance upgrade history entry.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> str:
        """
        Optional. Target VM Version, like m63.
        """
        return pulumi.get(self, "target_version")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Optional. The version of the notebook instance before this upgrade.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vmImage")
    def vm_image(self) -> str:
        """
        Optional. The VM image before this instance upgrade.
        """
        return pulumi.get(self, "vm_image")


@pulumi.output_type
class VmImageResponse(dict):
    """
    Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
    """
    def __init__(__self__, *,
                 family: str,
                 name: str,
                 project: str):
        """
        Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
        :param str family: Optional. Use this VM image family to find the image; the newest image in this family will be used.
        :param str name: Optional. Use VM image name to find the image.
        :param str project: The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
        """
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def family(self) -> str:
        """
        Optional. Use this VM image family to find the image; the newest image in this family will be used.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. Use VM image name to find the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
        """
        return pulumi.get(self, "project")


