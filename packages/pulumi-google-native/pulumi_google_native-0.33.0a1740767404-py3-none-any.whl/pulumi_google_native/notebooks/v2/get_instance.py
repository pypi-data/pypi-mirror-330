# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    def __init__(__self__, create_time=None, creator=None, disable_proxy_access=None, gce_setup=None, health_info=None, health_state=None, instance_owners=None, labels=None, name=None, proxy_uri=None, state=None, update_time=None, upgrade_history=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if disable_proxy_access and not isinstance(disable_proxy_access, bool):
            raise TypeError("Expected argument 'disable_proxy_access' to be a bool")
        pulumi.set(__self__, "disable_proxy_access", disable_proxy_access)
        if gce_setup and not isinstance(gce_setup, dict):
            raise TypeError("Expected argument 'gce_setup' to be a dict")
        pulumi.set(__self__, "gce_setup", gce_setup)
        if health_info and not isinstance(health_info, dict):
            raise TypeError("Expected argument 'health_info' to be a dict")
        pulumi.set(__self__, "health_info", health_info)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if instance_owners and not isinstance(instance_owners, list):
            raise TypeError("Expected argument 'instance_owners' to be a list")
        pulumi.set(__self__, "instance_owners", instance_owners)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if proxy_uri and not isinstance(proxy_uri, str):
            raise TypeError("Expected argument 'proxy_uri' to be a str")
        pulumi.set(__self__, "proxy_uri", proxy_uri)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if upgrade_history and not isinstance(upgrade_history, list):
            raise TypeError("Expected argument 'upgrade_history' to be a list")
        pulumi.set(__self__, "upgrade_history", upgrade_history)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Instance creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        """
        Email address of entity that sent original CreateInstance request.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="disableProxyAccess")
    def disable_proxy_access(self) -> bool:
        """
        Optional. If true, the notebook instance will not register with the proxy.
        """
        return pulumi.get(self, "disable_proxy_access")

    @property
    @pulumi.getter(name="gceSetup")
    def gce_setup(self) -> 'outputs.GceSetupResponse':
        """
        Optional. Compute Engine setup for the notebook. Uses notebook-defined fields.
        """
        return pulumi.get(self, "gce_setup")

    @property
    @pulumi.getter(name="healthInfo")
    def health_info(self) -> Mapping[str, str]:
        """
        Additional information about instance health. Example: healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }
        """
        return pulumi.get(self, "health_info")

    @property
    @pulumi.getter(name="healthState")
    def health_state(self) -> str:
        """
        Instance health_state.
        """
        return pulumi.get(self, "health_state")

    @property
    @pulumi.getter(name="instanceOwners")
    def instance_owners(self) -> Sequence[str]:
        """
        Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
        """
        return pulumi.get(self, "instance_owners")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="proxyUri")
    def proxy_uri(self) -> str:
        """
        The proxy endpoint that is used to access the Jupyter notebook.
        """
        return pulumi.get(self, "proxy_uri")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of this instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Instance update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upgradeHistory")
    def upgrade_history(self) -> Sequence['outputs.UpgradeHistoryEntryResponse']:
        """
        The upgrade history of this instance.
        """
        return pulumi.get(self, "upgrade_history")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            create_time=self.create_time,
            creator=self.creator,
            disable_proxy_access=self.disable_proxy_access,
            gce_setup=self.gce_setup,
            health_info=self.health_info,
            health_state=self.health_state,
            instance_owners=self.instance_owners,
            labels=self.labels,
            name=self.name,
            proxy_uri=self.proxy_uri,
            state=self.state,
            update_time=self.update_time,
            upgrade_history=self.upgrade_history)


def get_instance(instance_id: Optional[str] = None,
                 location: Optional[str] = None,
                 project: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Gets details of a single Instance.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:notebooks/v2:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        creator=pulumi.get(__ret__, 'creator'),
        disable_proxy_access=pulumi.get(__ret__, 'disable_proxy_access'),
        gce_setup=pulumi.get(__ret__, 'gce_setup'),
        health_info=pulumi.get(__ret__, 'health_info'),
        health_state=pulumi.get(__ret__, 'health_state'),
        instance_owners=pulumi.get(__ret__, 'instance_owners'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        proxy_uri=pulumi.get(__ret__, 'proxy_uri'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'),
        upgrade_history=pulumi.get(__ret__, 'upgrade_history'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(instance_id: Optional[pulumi.Input[str]] = None,
                        location: Optional[pulumi.Input[str]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Gets details of a single Instance.
    """
    ...
