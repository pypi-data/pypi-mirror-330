# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdBreakResponse',
    'Aes128EncryptionResponse',
    'AnimationEndResponse',
    'AnimationFadeResponse',
    'AnimationResponse',
    'AnimationStaticResponse',
    'AudioMappingResponse',
    'AudioResponse',
    'AudioStreamResponse',
    'BwdifConfigResponse',
    'ClearkeyResponse',
    'ColorResponse',
    'CropResponse',
    'DashConfigResponse',
    'DeblockResponse',
    'DeinterlaceResponse',
    'DenoiseResponse',
    'DrmSystemsResponse',
    'EditAtomResponse',
    'ElementaryStreamResponse',
    'EncryptionResponse',
    'FairplayResponse',
    'Fmp4ConfigResponse',
    'H264CodecSettingsResponse',
    'H265CodecSettingsResponse',
    'ImageResponse',
    'InputResponse',
    'JobConfigResponse',
    'ManifestResponse',
    'MpegCommonEncryptionResponse',
    'MuxStreamResponse',
    'NormalizedCoordinateResponse',
    'OutputResponse',
    'OverlayResponse',
    'PadResponse',
    'PlayreadyResponse',
    'PreprocessingConfigResponse',
    'PubsubDestinationResponse',
    'SampleAesEncryptionResponse',
    'SecretManagerSourceResponse',
    'SegmentSettingsResponse',
    'SpriteSheetResponse',
    'StatusResponse',
    'TextMappingResponse',
    'TextStreamResponse',
    'VideoStreamResponse',
    'Vp9CodecSettingsResponse',
    'WidevineResponse',
    'YadifConfigResponse',
]

@pulumi.output_type
class AdBreakResponse(dict):
    """
    Ad break.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdBreakResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdBreakResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdBreakResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time_offset: str):
        """
        Ad break.
        :param str start_time_offset: Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
        """
        pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class Aes128EncryptionResponse(dict):
    """
    Configuration for AES-128 encryption.
    """
    def __init__(__self__):
        """
        Configuration for AES-128 encryption.
        """
        pass


@pulumi.output_type
class AnimationEndResponse(dict):
    """
    End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnimationEndResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnimationEndResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnimationEndResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time_offset: str):
        """
        End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
        :param str start_time_offset: The time to end overlay object, in seconds. Default: 0
        """
        pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        The time to end overlay object, in seconds. Default: 0
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class AnimationFadeResponse(dict):
    """
    Display overlay object with fade animation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "fadeType":
            suggest = "fade_type"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnimationFadeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnimationFadeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnimationFadeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time_offset: str,
                 fade_type: str,
                 start_time_offset: str,
                 xy: 'outputs.NormalizedCoordinateResponse'):
        """
        Display overlay object with fade animation.
        :param str end_time_offset: The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
        :param str fade_type: Type of fade animation: `FADE_IN` or `FADE_OUT`.
        :param str start_time_offset: The time to start the fade animation, in seconds. Default: 0
        :param 'NormalizedCoordinateResponse' xy: Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
        """
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "fade_type", fade_type)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "xy", xy)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> str:
        """
        The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="fadeType")
    def fade_type(self) -> str:
        """
        Type of fade animation: `FADE_IN` or `FADE_OUT`.
        """
        return pulumi.get(self, "fade_type")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        The time to start the fade animation, in seconds. Default: 0
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def xy(self) -> 'outputs.NormalizedCoordinateResponse':
        """
        Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
        """
        return pulumi.get(self, "xy")


@pulumi.output_type
class AnimationResponse(dict):
    """
    Animation types.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "animationEnd":
            suggest = "animation_end"
        elif key == "animationFade":
            suggest = "animation_fade"
        elif key == "animationStatic":
            suggest = "animation_static"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnimationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnimationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnimationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 animation_end: 'outputs.AnimationEndResponse',
                 animation_fade: 'outputs.AnimationFadeResponse',
                 animation_static: 'outputs.AnimationStaticResponse'):
        """
        Animation types.
        :param 'AnimationEndResponse' animation_end: End previous animation.
        :param 'AnimationFadeResponse' animation_fade: Display overlay object with fade animation.
        :param 'AnimationStaticResponse' animation_static: Display static overlay object.
        """
        pulumi.set(__self__, "animation_end", animation_end)
        pulumi.set(__self__, "animation_fade", animation_fade)
        pulumi.set(__self__, "animation_static", animation_static)

    @property
    @pulumi.getter(name="animationEnd")
    def animation_end(self) -> 'outputs.AnimationEndResponse':
        """
        End previous animation.
        """
        return pulumi.get(self, "animation_end")

    @property
    @pulumi.getter(name="animationFade")
    def animation_fade(self) -> 'outputs.AnimationFadeResponse':
        """
        Display overlay object with fade animation.
        """
        return pulumi.get(self, "animation_fade")

    @property
    @pulumi.getter(name="animationStatic")
    def animation_static(self) -> 'outputs.AnimationStaticResponse':
        """
        Display static overlay object.
        """
        return pulumi.get(self, "animation_static")


@pulumi.output_type
class AnimationStaticResponse(dict):
    """
    Display static overlay object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnimationStaticResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnimationStaticResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnimationStaticResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time_offset: str,
                 xy: 'outputs.NormalizedCoordinateResponse'):
        """
        Display static overlay object.
        :param str start_time_offset: The time to start displaying the overlay object, in seconds. Default: 0
        :param 'NormalizedCoordinateResponse' xy: Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
        """
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "xy", xy)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        The time to start displaying the overlay object, in seconds. Default: 0
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def xy(self) -> 'outputs.NormalizedCoordinateResponse':
        """
        Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
        """
        return pulumi.get(self, "xy")


@pulumi.output_type
class AudioMappingResponse(dict):
    """
    The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "atomKey":
            suggest = "atom_key"
        elif key == "gainDb":
            suggest = "gain_db"
        elif key == "inputChannel":
            suggest = "input_channel"
        elif key == "inputKey":
            suggest = "input_key"
        elif key == "inputTrack":
            suggest = "input_track"
        elif key == "outputChannel":
            suggest = "output_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AudioMappingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AudioMappingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AudioMappingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 atom_key: str,
                 gain_db: float,
                 input_channel: int,
                 input_key: str,
                 input_track: int,
                 output_channel: int):
        """
        The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
        :param str atom_key: The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
        :param float gain_db: Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
        :param int input_channel: The zero-based index of the channel in the input audio stream.
        :param str input_key: The Input.key that identifies the input file.
        :param int input_track: The zero-based index of the track in the input file.
        :param int output_channel: The zero-based index of the channel in the output audio stream.
        """
        pulumi.set(__self__, "atom_key", atom_key)
        pulumi.set(__self__, "gain_db", gain_db)
        pulumi.set(__self__, "input_channel", input_channel)
        pulumi.set(__self__, "input_key", input_key)
        pulumi.set(__self__, "input_track", input_track)
        pulumi.set(__self__, "output_channel", output_channel)

    @property
    @pulumi.getter(name="atomKey")
    def atom_key(self) -> str:
        """
        The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
        """
        return pulumi.get(self, "atom_key")

    @property
    @pulumi.getter(name="gainDb")
    def gain_db(self) -> float:
        """
        Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
        """
        return pulumi.get(self, "gain_db")

    @property
    @pulumi.getter(name="inputChannel")
    def input_channel(self) -> int:
        """
        The zero-based index of the channel in the input audio stream.
        """
        return pulumi.get(self, "input_channel")

    @property
    @pulumi.getter(name="inputKey")
    def input_key(self) -> str:
        """
        The Input.key that identifies the input file.
        """
        return pulumi.get(self, "input_key")

    @property
    @pulumi.getter(name="inputTrack")
    def input_track(self) -> int:
        """
        The zero-based index of the track in the input file.
        """
        return pulumi.get(self, "input_track")

    @property
    @pulumi.getter(name="outputChannel")
    def output_channel(self) -> int:
        """
        The zero-based index of the channel in the output audio stream.
        """
        return pulumi.get(self, "output_channel")


@pulumi.output_type
class AudioResponse(dict):
    """
    Audio preprocessing configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highBoost":
            suggest = "high_boost"
        elif key == "lowBoost":
            suggest = "low_boost"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AudioResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AudioResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AudioResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 high_boost: bool,
                 low_boost: bool,
                 lufs: float):
        """
        Audio preprocessing configuration.
        :param bool high_boost: Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
        :param bool low_boost: Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
        :param float lufs: Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
        """
        pulumi.set(__self__, "high_boost", high_boost)
        pulumi.set(__self__, "low_boost", low_boost)
        pulumi.set(__self__, "lufs", lufs)

    @property
    @pulumi.getter(name="highBoost")
    def high_boost(self) -> bool:
        """
        Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
        """
        return pulumi.get(self, "high_boost")

    @property
    @pulumi.getter(name="lowBoost")
    def low_boost(self) -> bool:
        """
        Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
        """
        return pulumi.get(self, "low_boost")

    @property
    @pulumi.getter
    def lufs(self) -> float:
        """
        Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
        """
        return pulumi.get(self, "lufs")


@pulumi.output_type
class AudioStreamResponse(dict):
    """
    Audio stream resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitrateBps":
            suggest = "bitrate_bps"
        elif key == "channelCount":
            suggest = "channel_count"
        elif key == "channelLayout":
            suggest = "channel_layout"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "languageCode":
            suggest = "language_code"
        elif key == "sampleRateHertz":
            suggest = "sample_rate_hertz"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AudioStreamResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AudioStreamResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AudioStreamResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate_bps: int,
                 channel_count: int,
                 channel_layout: Sequence[str],
                 codec: str,
                 display_name: str,
                 language_code: str,
                 mapping: Sequence['outputs.AudioMappingResponse'],
                 sample_rate_hertz: int):
        """
        Audio stream resource.
        :param int bitrate_bps: Audio bitrate in bits per second. Must be between 1 and 10,000,000.
        :param int channel_count: Number of audio channels. Must be between 1 and 6. The default is 2.
        :param Sequence[str] channel_layout: A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
        :param str codec: The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
        :param str display_name: The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
        :param str language_code: The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
        :param Sequence['AudioMappingResponse'] mapping: The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
        :param int sample_rate_hertz: The audio sample rate in Hertz. The default is 48000 Hertz.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "channel_count", channel_count)
        pulumi.set(__self__, "channel_layout", channel_layout)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "mapping", mapping)
        pulumi.set(__self__, "sample_rate_hertz", sample_rate_hertz)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> int:
        """
        Audio bitrate in bits per second. Must be between 1 and 10,000,000.
        """
        return pulumi.get(self, "bitrate_bps")

    @property
    @pulumi.getter(name="channelCount")
    def channel_count(self) -> int:
        """
        Number of audio channels. Must be between 1 and 6. The default is 2.
        """
        return pulumi.get(self, "channel_count")

    @property
    @pulumi.getter(name="channelLayout")
    def channel_layout(self) -> Sequence[str]:
        """
        A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
        """
        return pulumi.get(self, "channel_layout")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def mapping(self) -> Sequence['outputs.AudioMappingResponse']:
        """
        The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
        """
        return pulumi.get(self, "mapping")

    @property
    @pulumi.getter(name="sampleRateHertz")
    def sample_rate_hertz(self) -> int:
        """
        The audio sample rate in Hertz. The default is 48000 Hertz.
        """
        return pulumi.get(self, "sample_rate_hertz")


@pulumi.output_type
class BwdifConfigResponse(dict):
    """
    Bob Weaver Deinterlacing Filter Configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deinterlaceAllFrames":
            suggest = "deinterlace_all_frames"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BwdifConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BwdifConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BwdifConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deinterlace_all_frames: bool,
                 mode: str,
                 parity: str):
        """
        Bob Weaver Deinterlacing Filter Configuration.
        :param bool deinterlace_all_frames: Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
        :param str mode: Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
        :param str parity: The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
        """
        pulumi.set(__self__, "deinterlace_all_frames", deinterlace_all_frames)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "parity", parity)

    @property
    @pulumi.getter(name="deinterlaceAllFrames")
    def deinterlace_all_frames(self) -> bool:
        """
        Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
        """
        return pulumi.get(self, "deinterlace_all_frames")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def parity(self) -> str:
        """
        The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
        """
        return pulumi.get(self, "parity")


@pulumi.output_type
class ClearkeyResponse(dict):
    """
    Clearkey configuration.
    """
    def __init__(__self__):
        """
        Clearkey configuration.
        """
        pass


@pulumi.output_type
class ColorResponse(dict):
    """
    Color preprocessing configuration. **Note:** This configuration is not supported.
    """
    def __init__(__self__, *,
                 brightness: float,
                 contrast: float,
                 saturation: float):
        """
        Color preprocessing configuration. **Note:** This configuration is not supported.
        :param float brightness: Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
        :param float contrast: Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
        :param float saturation: Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
        """
        pulumi.set(__self__, "brightness", brightness)
        pulumi.set(__self__, "contrast", contrast)
        pulumi.set(__self__, "saturation", saturation)

    @property
    @pulumi.getter
    def brightness(self) -> float:
        """
        Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
        """
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter
    def contrast(self) -> float:
        """
        Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
        """
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter
    def saturation(self) -> float:
        """
        Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
        """
        return pulumi.get(self, "saturation")


@pulumi.output_type
class CropResponse(dict):
    """
    Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bottomPixels":
            suggest = "bottom_pixels"
        elif key == "leftPixels":
            suggest = "left_pixels"
        elif key == "rightPixels":
            suggest = "right_pixels"
        elif key == "topPixels":
            suggest = "top_pixels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CropResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CropResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CropResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bottom_pixels: int,
                 left_pixels: int,
                 right_pixels: int,
                 top_pixels: int):
        """
        Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
        :param int bottom_pixels: The number of pixels to crop from the bottom. The default is 0.
        :param int left_pixels: The number of pixels to crop from the left. The default is 0.
        :param int right_pixels: The number of pixels to crop from the right. The default is 0.
        :param int top_pixels: The number of pixels to crop from the top. The default is 0.
        """
        pulumi.set(__self__, "bottom_pixels", bottom_pixels)
        pulumi.set(__self__, "left_pixels", left_pixels)
        pulumi.set(__self__, "right_pixels", right_pixels)
        pulumi.set(__self__, "top_pixels", top_pixels)

    @property
    @pulumi.getter(name="bottomPixels")
    def bottom_pixels(self) -> int:
        """
        The number of pixels to crop from the bottom. The default is 0.
        """
        return pulumi.get(self, "bottom_pixels")

    @property
    @pulumi.getter(name="leftPixels")
    def left_pixels(self) -> int:
        """
        The number of pixels to crop from the left. The default is 0.
        """
        return pulumi.get(self, "left_pixels")

    @property
    @pulumi.getter(name="rightPixels")
    def right_pixels(self) -> int:
        """
        The number of pixels to crop from the right. The default is 0.
        """
        return pulumi.get(self, "right_pixels")

    @property
    @pulumi.getter(name="topPixels")
    def top_pixels(self) -> int:
        """
        The number of pixels to crop from the top. The default is 0.
        """
        return pulumi.get(self, "top_pixels")


@pulumi.output_type
class DashConfigResponse(dict):
    """
    `DASH` manifest configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "segmentReferenceScheme":
            suggest = "segment_reference_scheme"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 segment_reference_scheme: str):
        """
        `DASH` manifest configuration.
        :param str segment_reference_scheme: The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
        """
        pulumi.set(__self__, "segment_reference_scheme", segment_reference_scheme)

    @property
    @pulumi.getter(name="segmentReferenceScheme")
    def segment_reference_scheme(self) -> str:
        """
        The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
        """
        return pulumi.get(self, "segment_reference_scheme")


@pulumi.output_type
class DeblockResponse(dict):
    """
    Deblock preprocessing configuration. **Note:** This configuration is not supported.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 strength: float):
        """
        Deblock preprocessing configuration. **Note:** This configuration is not supported.
        :param bool enabled: Enable deblocker. The default is `false`.
        :param float strength: Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "strength", strength)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable deblocker. The default is `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def strength(self) -> float:
        """
        Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
        """
        return pulumi.get(self, "strength")


@pulumi.output_type
class DeinterlaceResponse(dict):
    """
    Deinterlace configuration for input video.
    """
    def __init__(__self__, *,
                 bwdif: 'outputs.BwdifConfigResponse',
                 yadif: 'outputs.YadifConfigResponse'):
        """
        Deinterlace configuration for input video.
        :param 'BwdifConfigResponse' bwdif: Specifies the Bob Weaver Deinterlacing Filter Configuration.
        :param 'YadifConfigResponse' yadif: Specifies the Yet Another Deinterlacing Filter Configuration.
        """
        pulumi.set(__self__, "bwdif", bwdif)
        pulumi.set(__self__, "yadif", yadif)

    @property
    @pulumi.getter
    def bwdif(self) -> 'outputs.BwdifConfigResponse':
        """
        Specifies the Bob Weaver Deinterlacing Filter Configuration.
        """
        return pulumi.get(self, "bwdif")

    @property
    @pulumi.getter
    def yadif(self) -> 'outputs.YadifConfigResponse':
        """
        Specifies the Yet Another Deinterlacing Filter Configuration.
        """
        return pulumi.get(self, "yadif")


@pulumi.output_type
class DenoiseResponse(dict):
    """
    Denoise preprocessing configuration. **Note:** This configuration is not supported.
    """
    def __init__(__self__, *,
                 strength: float,
                 tune: str):
        """
        Denoise preprocessing configuration. **Note:** This configuration is not supported.
        :param float strength: Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
        :param str tune: Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
        """
        pulumi.set(__self__, "strength", strength)
        pulumi.set(__self__, "tune", tune)

    @property
    @pulumi.getter
    def strength(self) -> float:
        """
        Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
        """
        return pulumi.get(self, "strength")

    @property
    @pulumi.getter
    def tune(self) -> str:
        """
        Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
        """
        return pulumi.get(self, "tune")


@pulumi.output_type
class DrmSystemsResponse(dict):
    """
    Defines configuration for DRM systems in use.
    """
    def __init__(__self__, *,
                 clearkey: 'outputs.ClearkeyResponse',
                 fairplay: 'outputs.FairplayResponse',
                 playready: 'outputs.PlayreadyResponse',
                 widevine: 'outputs.WidevineResponse'):
        """
        Defines configuration for DRM systems in use.
        :param 'ClearkeyResponse' clearkey: Clearkey configuration.
        :param 'FairplayResponse' fairplay: Fairplay configuration.
        :param 'PlayreadyResponse' playready: Playready configuration.
        :param 'WidevineResponse' widevine: Widevine configuration.
        """
        pulumi.set(__self__, "clearkey", clearkey)
        pulumi.set(__self__, "fairplay", fairplay)
        pulumi.set(__self__, "playready", playready)
        pulumi.set(__self__, "widevine", widevine)

    @property
    @pulumi.getter
    def clearkey(self) -> 'outputs.ClearkeyResponse':
        """
        Clearkey configuration.
        """
        return pulumi.get(self, "clearkey")

    @property
    @pulumi.getter
    def fairplay(self) -> 'outputs.FairplayResponse':
        """
        Fairplay configuration.
        """
        return pulumi.get(self, "fairplay")

    @property
    @pulumi.getter
    def playready(self) -> 'outputs.PlayreadyResponse':
        """
        Playready configuration.
        """
        return pulumi.get(self, "playready")

    @property
    @pulumi.getter
    def widevine(self) -> 'outputs.WidevineResponse':
        """
        Widevine configuration.
        """
        return pulumi.get(self, "widevine")


@pulumi.output_type
class EditAtomResponse(dict):
    """
    Edit atom.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditAtomResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditAtomResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditAtomResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time_offset: str,
                 inputs: Sequence[str],
                 key: str,
                 start_time_offset: str):
        """
        Edit atom.
        :param str end_time_offset: End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
        :param Sequence[str] inputs: List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
        :param str key: A unique key for this atom. Must be specified when using advanced mapping.
        :param str start_time_offset: Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
        """
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> str:
        """
        End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def inputs(self) -> Sequence[str]:
        """
        List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A unique key for this atom. Must be specified when using advanced mapping.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class ElementaryStreamResponse(dict):
    """
    Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioStream":
            suggest = "audio_stream"
        elif key == "textStream":
            suggest = "text_stream"
        elif key == "videoStream":
            suggest = "video_stream"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElementaryStreamResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElementaryStreamResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElementaryStreamResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_stream: 'outputs.AudioStreamResponse',
                 key: str,
                 text_stream: 'outputs.TextStreamResponse',
                 video_stream: 'outputs.VideoStreamResponse'):
        """
        Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
        :param 'AudioStreamResponse' audio_stream: Encoding of an audio stream.
        :param str key: A unique key for this elementary stream.
        :param 'TextStreamResponse' text_stream: Encoding of a text stream. For example, closed captions or subtitles.
        :param 'VideoStreamResponse' video_stream: Encoding of a video stream.
        """
        pulumi.set(__self__, "audio_stream", audio_stream)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "text_stream", text_stream)
        pulumi.set(__self__, "video_stream", video_stream)

    @property
    @pulumi.getter(name="audioStream")
    def audio_stream(self) -> 'outputs.AudioStreamResponse':
        """
        Encoding of an audio stream.
        """
        return pulumi.get(self, "audio_stream")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A unique key for this elementary stream.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="textStream")
    def text_stream(self) -> 'outputs.TextStreamResponse':
        """
        Encoding of a text stream. For example, closed captions or subtitles.
        """
        return pulumi.get(self, "text_stream")

    @property
    @pulumi.getter(name="videoStream")
    def video_stream(self) -> 'outputs.VideoStreamResponse':
        """
        Encoding of a video stream.
        """
        return pulumi.get(self, "video_stream")


@pulumi.output_type
class EncryptionResponse(dict):
    """
    Encryption settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "drmSystems":
            suggest = "drm_systems"
        elif key == "mpegCenc":
            suggest = "mpeg_cenc"
        elif key == "sampleAes":
            suggest = "sample_aes"
        elif key == "secretManagerKeySource":
            suggest = "secret_manager_key_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aes128: 'outputs.Aes128EncryptionResponse',
                 drm_systems: 'outputs.DrmSystemsResponse',
                 mpeg_cenc: 'outputs.MpegCommonEncryptionResponse',
                 sample_aes: 'outputs.SampleAesEncryptionResponse',
                 secret_manager_key_source: 'outputs.SecretManagerSourceResponse'):
        """
        Encryption settings.
        :param 'Aes128EncryptionResponse' aes128: Configuration for AES-128 encryption.
        :param 'DrmSystemsResponse' drm_systems: DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        :param 'MpegCommonEncryptionResponse' mpeg_cenc: Configuration for MPEG Common Encryption (MPEG-CENC).
        :param 'SampleAesEncryptionResponse' sample_aes: Configuration for SAMPLE-AES encryption.
        :param 'SecretManagerSourceResponse' secret_manager_key_source: Keys are stored in Google Secret Manager.
        """
        pulumi.set(__self__, "aes128", aes128)
        pulumi.set(__self__, "drm_systems", drm_systems)
        pulumi.set(__self__, "mpeg_cenc", mpeg_cenc)
        pulumi.set(__self__, "sample_aes", sample_aes)
        pulumi.set(__self__, "secret_manager_key_source", secret_manager_key_source)

    @property
    @pulumi.getter
    def aes128(self) -> 'outputs.Aes128EncryptionResponse':
        """
        Configuration for AES-128 encryption.
        """
        return pulumi.get(self, "aes128")

    @property
    @pulumi.getter(name="drmSystems")
    def drm_systems(self) -> 'outputs.DrmSystemsResponse':
        """
        DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        """
        return pulumi.get(self, "drm_systems")

    @property
    @pulumi.getter(name="mpegCenc")
    def mpeg_cenc(self) -> 'outputs.MpegCommonEncryptionResponse':
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        """
        return pulumi.get(self, "mpeg_cenc")

    @property
    @pulumi.getter(name="sampleAes")
    def sample_aes(self) -> 'outputs.SampleAesEncryptionResponse':
        """
        Configuration for SAMPLE-AES encryption.
        """
        return pulumi.get(self, "sample_aes")

    @property
    @pulumi.getter(name="secretManagerKeySource")
    def secret_manager_key_source(self) -> 'outputs.SecretManagerSourceResponse':
        """
        Keys are stored in Google Secret Manager.
        """
        return pulumi.get(self, "secret_manager_key_source")


@pulumi.output_type
class FairplayResponse(dict):
    """
    Fairplay configuration.
    """
    def __init__(__self__):
        """
        Fairplay configuration.
        """
        pass


@pulumi.output_type
class Fmp4ConfigResponse(dict):
    """
    `fmp4` container configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codecTag":
            suggest = "codec_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Fmp4ConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Fmp4ConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Fmp4ConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec_tag: str):
        """
        `fmp4` container configuration.
        :param str codec_tag: Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
        """
        pulumi.set(__self__, "codec_tag", codec_tag)

    @property
    @pulumi.getter(name="codecTag")
    def codec_tag(self) -> str:
        """
        Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
        """
        return pulumi.get(self, "codec_tag")


@pulumi.output_type
class H264CodecSettingsResponse(dict):
    """
    H264 codec settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOpenGop":
            suggest = "allow_open_gop"
        elif key == "aqStrength":
            suggest = "aq_strength"
        elif key == "bFrameCount":
            suggest = "b_frame_count"
        elif key == "bPyramid":
            suggest = "b_pyramid"
        elif key == "bitrateBps":
            suggest = "bitrate_bps"
        elif key == "crfLevel":
            suggest = "crf_level"
        elif key == "enableTwoPass":
            suggest = "enable_two_pass"
        elif key == "entropyCoder":
            suggest = "entropy_coder"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "gopDuration":
            suggest = "gop_duration"
        elif key == "gopFrameCount":
            suggest = "gop_frame_count"
        elif key == "heightPixels":
            suggest = "height_pixels"
        elif key == "pixelFormat":
            suggest = "pixel_format"
        elif key == "rateControlMode":
            suggest = "rate_control_mode"
        elif key == "vbvFullnessBits":
            suggest = "vbv_fullness_bits"
        elif key == "vbvSizeBits":
            suggest = "vbv_size_bits"
        elif key == "widthPixels":
            suggest = "width_pixels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H264CodecSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H264CodecSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H264CodecSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_open_gop: bool,
                 aq_strength: float,
                 b_frame_count: int,
                 b_pyramid: bool,
                 bitrate_bps: int,
                 crf_level: int,
                 enable_two_pass: bool,
                 entropy_coder: str,
                 frame_rate: float,
                 gop_duration: str,
                 gop_frame_count: int,
                 height_pixels: int,
                 pixel_format: str,
                 preset: str,
                 profile: str,
                 rate_control_mode: str,
                 tune: str,
                 vbv_fullness_bits: int,
                 vbv_size_bits: int,
                 width_pixels: int):
        """
        H264 codec settings.
        :param bool allow_open_gop: Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
        :param float aq_strength: Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
        :param int b_frame_count: The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
        :param bool b_pyramid: Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
        :param int bitrate_bps: The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
        :param int crf_level: Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
        :param bool enable_two_pass: Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
        :param str entropy_coder: The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
        :param float frame_rate: The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        :param str gop_duration: Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        :param int gop_frame_count: Select the GOP size based on the specified frame count. Must be greater than zero.
        :param int height_pixels: The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        :param str pixel_format: Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        :param str preset: Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        :param str profile: Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        :param str rate_control_mode: Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
        :param str tune: Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        :param int vbv_fullness_bits: Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
        :param int vbv_size_bits: Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
        :param int width_pixels: The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        pulumi.set(__self__, "allow_open_gop", allow_open_gop)
        pulumi.set(__self__, "aq_strength", aq_strength)
        pulumi.set(__self__, "b_frame_count", b_frame_count)
        pulumi.set(__self__, "b_pyramid", b_pyramid)
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "crf_level", crf_level)
        pulumi.set(__self__, "enable_two_pass", enable_two_pass)
        pulumi.set(__self__, "entropy_coder", entropy_coder)
        pulumi.set(__self__, "frame_rate", frame_rate)
        pulumi.set(__self__, "gop_duration", gop_duration)
        pulumi.set(__self__, "gop_frame_count", gop_frame_count)
        pulumi.set(__self__, "height_pixels", height_pixels)
        pulumi.set(__self__, "pixel_format", pixel_format)
        pulumi.set(__self__, "preset", preset)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "rate_control_mode", rate_control_mode)
        pulumi.set(__self__, "tune", tune)
        pulumi.set(__self__, "vbv_fullness_bits", vbv_fullness_bits)
        pulumi.set(__self__, "vbv_size_bits", vbv_size_bits)
        pulumi.set(__self__, "width_pixels", width_pixels)

    @property
    @pulumi.getter(name="allowOpenGop")
    def allow_open_gop(self) -> bool:
        """
        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
        """
        return pulumi.get(self, "allow_open_gop")

    @property
    @pulumi.getter(name="aqStrength")
    def aq_strength(self) -> float:
        """
        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
        """
        return pulumi.get(self, "aq_strength")

    @property
    @pulumi.getter(name="bFrameCount")
    def b_frame_count(self) -> int:
        """
        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
        """
        return pulumi.get(self, "b_frame_count")

    @property
    @pulumi.getter(name="bPyramid")
    def b_pyramid(self) -> bool:
        """
        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
        """
        return pulumi.get(self, "b_pyramid")

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> int:
        """
        The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
        """
        return pulumi.get(self, "bitrate_bps")

    @property
    @pulumi.getter(name="crfLevel")
    def crf_level(self) -> int:
        """
        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
        """
        return pulumi.get(self, "crf_level")

    @property
    @pulumi.getter(name="enableTwoPass")
    def enable_two_pass(self) -> bool:
        """
        Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
        """
        return pulumi.get(self, "enable_two_pass")

    @property
    @pulumi.getter(name="entropyCoder")
    def entropy_coder(self) -> str:
        """
        The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
        """
        return pulumi.get(self, "entropy_coder")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> float:
        """
        The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        """
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter(name="gopDuration")
    def gop_duration(self) -> str:
        """
        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        """
        return pulumi.get(self, "gop_duration")

    @property
    @pulumi.getter(name="gopFrameCount")
    def gop_frame_count(self) -> int:
        """
        Select the GOP size based on the specified frame count. Must be greater than zero.
        """
        return pulumi.get(self, "gop_frame_count")

    @property
    @pulumi.getter(name="heightPixels")
    def height_pixels(self) -> int:
        """
        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "height_pixels")

    @property
    @pulumi.getter(name="pixelFormat")
    def pixel_format(self) -> str:
        """
        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        """
        return pulumi.get(self, "pixel_format")

    @property
    @pulumi.getter
    def preset(self) -> str:
        """
        Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        """
        return pulumi.get(self, "preset")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="rateControlMode")
    def rate_control_mode(self) -> str:
        """
        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
        """
        return pulumi.get(self, "rate_control_mode")

    @property
    @pulumi.getter
    def tune(self) -> str:
        """
        Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
        """
        return pulumi.get(self, "tune")

    @property
    @pulumi.getter(name="vbvFullnessBits")
    def vbv_fullness_bits(self) -> int:
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
        """
        return pulumi.get(self, "vbv_fullness_bits")

    @property
    @pulumi.getter(name="vbvSizeBits")
    def vbv_size_bits(self) -> int:
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
        """
        return pulumi.get(self, "vbv_size_bits")

    @property
    @pulumi.getter(name="widthPixels")
    def width_pixels(self) -> int:
        """
        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "width_pixels")


@pulumi.output_type
class H265CodecSettingsResponse(dict):
    """
    H265 codec settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOpenGop":
            suggest = "allow_open_gop"
        elif key == "aqStrength":
            suggest = "aq_strength"
        elif key == "bFrameCount":
            suggest = "b_frame_count"
        elif key == "bPyramid":
            suggest = "b_pyramid"
        elif key == "bitrateBps":
            suggest = "bitrate_bps"
        elif key == "crfLevel":
            suggest = "crf_level"
        elif key == "enableTwoPass":
            suggest = "enable_two_pass"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "gopDuration":
            suggest = "gop_duration"
        elif key == "gopFrameCount":
            suggest = "gop_frame_count"
        elif key == "heightPixels":
            suggest = "height_pixels"
        elif key == "pixelFormat":
            suggest = "pixel_format"
        elif key == "rateControlMode":
            suggest = "rate_control_mode"
        elif key == "vbvFullnessBits":
            suggest = "vbv_fullness_bits"
        elif key == "vbvSizeBits":
            suggest = "vbv_size_bits"
        elif key == "widthPixels":
            suggest = "width_pixels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in H265CodecSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        H265CodecSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        H265CodecSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_open_gop: bool,
                 aq_strength: float,
                 b_frame_count: int,
                 b_pyramid: bool,
                 bitrate_bps: int,
                 crf_level: int,
                 enable_two_pass: bool,
                 frame_rate: float,
                 gop_duration: str,
                 gop_frame_count: int,
                 height_pixels: int,
                 pixel_format: str,
                 preset: str,
                 profile: str,
                 rate_control_mode: str,
                 tune: str,
                 vbv_fullness_bits: int,
                 vbv_size_bits: int,
                 width_pixels: int):
        """
        H265 codec settings.
        :param bool allow_open_gop: Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
        :param float aq_strength: Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
        :param int b_frame_count: The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
        :param bool b_pyramid: Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
        :param int bitrate_bps: The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
        :param int crf_level: Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
        :param bool enable_two_pass: Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
        :param float frame_rate: The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        :param str gop_duration: Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        :param int gop_frame_count: Select the GOP size based on the specified frame count. Must be greater than zero.
        :param int height_pixels: The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        :param str pixel_format: Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        :param str preset: Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        :param str profile: Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        :param str rate_control_mode: Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
        :param str tune: Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        :param int vbv_fullness_bits: Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
        :param int vbv_size_bits: Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        :param int width_pixels: The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        pulumi.set(__self__, "allow_open_gop", allow_open_gop)
        pulumi.set(__self__, "aq_strength", aq_strength)
        pulumi.set(__self__, "b_frame_count", b_frame_count)
        pulumi.set(__self__, "b_pyramid", b_pyramid)
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "crf_level", crf_level)
        pulumi.set(__self__, "enable_two_pass", enable_two_pass)
        pulumi.set(__self__, "frame_rate", frame_rate)
        pulumi.set(__self__, "gop_duration", gop_duration)
        pulumi.set(__self__, "gop_frame_count", gop_frame_count)
        pulumi.set(__self__, "height_pixels", height_pixels)
        pulumi.set(__self__, "pixel_format", pixel_format)
        pulumi.set(__self__, "preset", preset)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "rate_control_mode", rate_control_mode)
        pulumi.set(__self__, "tune", tune)
        pulumi.set(__self__, "vbv_fullness_bits", vbv_fullness_bits)
        pulumi.set(__self__, "vbv_size_bits", vbv_size_bits)
        pulumi.set(__self__, "width_pixels", width_pixels)

    @property
    @pulumi.getter(name="allowOpenGop")
    def allow_open_gop(self) -> bool:
        """
        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
        """
        return pulumi.get(self, "allow_open_gop")

    @property
    @pulumi.getter(name="aqStrength")
    def aq_strength(self) -> float:
        """
        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
        """
        return pulumi.get(self, "aq_strength")

    @property
    @pulumi.getter(name="bFrameCount")
    def b_frame_count(self) -> int:
        """
        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
        """
        return pulumi.get(self, "b_frame_count")

    @property
    @pulumi.getter(name="bPyramid")
    def b_pyramid(self) -> bool:
        """
        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
        """
        return pulumi.get(self, "b_pyramid")

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> int:
        """
        The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
        """
        return pulumi.get(self, "bitrate_bps")

    @property
    @pulumi.getter(name="crfLevel")
    def crf_level(self) -> int:
        """
        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
        """
        return pulumi.get(self, "crf_level")

    @property
    @pulumi.getter(name="enableTwoPass")
    def enable_two_pass(self) -> bool:
        """
        Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
        """
        return pulumi.get(self, "enable_two_pass")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> float:
        """
        The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        """
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter(name="gopDuration")
    def gop_duration(self) -> str:
        """
        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        """
        return pulumi.get(self, "gop_duration")

    @property
    @pulumi.getter(name="gopFrameCount")
    def gop_frame_count(self) -> int:
        """
        Select the GOP size based on the specified frame count. Must be greater than zero.
        """
        return pulumi.get(self, "gop_frame_count")

    @property
    @pulumi.getter(name="heightPixels")
    def height_pixels(self) -> int:
        """
        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "height_pixels")

    @property
    @pulumi.getter(name="pixelFormat")
    def pixel_format(self) -> str:
        """
        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        """
        return pulumi.get(self, "pixel_format")

    @property
    @pulumi.getter
    def preset(self) -> str:
        """
        Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        """
        return pulumi.get(self, "preset")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="rateControlMode")
    def rate_control_mode(self) -> str:
        """
        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
        """
        return pulumi.get(self, "rate_control_mode")

    @property
    @pulumi.getter
    def tune(self) -> str:
        """
        Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
        """
        return pulumi.get(self, "tune")

    @property
    @pulumi.getter(name="vbvFullnessBits")
    def vbv_fullness_bits(self) -> int:
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
        """
        return pulumi.get(self, "vbv_fullness_bits")

    @property
    @pulumi.getter(name="vbvSizeBits")
    def vbv_size_bits(self) -> int:
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        """
        return pulumi.get(self, "vbv_size_bits")

    @property
    @pulumi.getter(name="widthPixels")
    def width_pixels(self) -> int:
        """
        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "width_pixels")


@pulumi.output_type
class ImageResponse(dict):
    """
    Overlaid image.
    """
    def __init__(__self__, *,
                 alpha: float,
                 resolution: 'outputs.NormalizedCoordinateResponse',
                 uri: str):
        """
        Overlaid image.
        :param float alpha: Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
        :param 'NormalizedCoordinateResponse' resolution: Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
        :param str uri: URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
        """
        pulumi.set(__self__, "alpha", alpha)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def alpha(self) -> float:
        """
        Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
        """
        return pulumi.get(self, "alpha")

    @property
    @pulumi.getter
    def resolution(self) -> 'outputs.NormalizedCoordinateResponse':
        """
        Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class InputResponse(dict):
    """
    Input asset.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preprocessingConfig":
            suggest = "preprocessing_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 preprocessing_config: 'outputs.PreprocessingConfigResponse',
                 uri: str):
        """
        Input asset.
        :param str key: A unique key for this input. Must be specified when using advanced mapping and edit lists.
        :param 'PreprocessingConfigResponse' preprocessing_config: Preprocessing configurations.
        :param str uri: URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "preprocessing_config", preprocessing_config)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A unique key for this input. Must be specified when using advanced mapping and edit lists.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="preprocessingConfig")
    def preprocessing_config(self) -> 'outputs.PreprocessingConfigResponse':
        """
        Preprocessing configurations.
        """
        return pulumi.get(self, "preprocessing_config")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class JobConfigResponse(dict):
    """
    Job configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adBreaks":
            suggest = "ad_breaks"
        elif key == "editList":
            suggest = "edit_list"
        elif key == "elementaryStreams":
            suggest = "elementary_streams"
        elif key == "muxStreams":
            suggest = "mux_streams"
        elif key == "pubsubDestination":
            suggest = "pubsub_destination"
        elif key == "spriteSheets":
            suggest = "sprite_sheets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_breaks: Sequence['outputs.AdBreakResponse'],
                 edit_list: Sequence['outputs.EditAtomResponse'],
                 elementary_streams: Sequence['outputs.ElementaryStreamResponse'],
                 encryptions: Sequence['outputs.EncryptionResponse'],
                 inputs: Sequence['outputs.InputResponse'],
                 manifests: Sequence['outputs.ManifestResponse'],
                 mux_streams: Sequence['outputs.MuxStreamResponse'],
                 output: 'outputs.OutputResponse',
                 overlays: Sequence['outputs.OverlayResponse'],
                 pubsub_destination: 'outputs.PubsubDestinationResponse',
                 sprite_sheets: Sequence['outputs.SpriteSheetResponse']):
        """
        Job configuration
        :param Sequence['AdBreakResponse'] ad_breaks: List of ad breaks. Specifies where to insert ad break tags in the output manifests.
        :param Sequence['EditAtomResponse'] edit_list: List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
        :param Sequence['ElementaryStreamResponse'] elementary_streams: List of elementary streams.
        :param Sequence['EncryptionResponse'] encryptions: List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
        :param Sequence['InputResponse'] inputs: List of input assets stored in Cloud Storage.
        :param Sequence['ManifestResponse'] manifests: List of output manifests.
        :param Sequence['MuxStreamResponse'] mux_streams: List of multiplexing settings for output streams.
        :param 'OutputResponse' output: Output configuration.
        :param Sequence['OverlayResponse'] overlays: List of overlays on the output video, in descending Z-order.
        :param 'PubsubDestinationResponse' pubsub_destination: Destination on Pub/Sub.
        :param Sequence['SpriteSheetResponse'] sprite_sheets: List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
        """
        pulumi.set(__self__, "ad_breaks", ad_breaks)
        pulumi.set(__self__, "edit_list", edit_list)
        pulumi.set(__self__, "elementary_streams", elementary_streams)
        pulumi.set(__self__, "encryptions", encryptions)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "manifests", manifests)
        pulumi.set(__self__, "mux_streams", mux_streams)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "overlays", overlays)
        pulumi.set(__self__, "pubsub_destination", pubsub_destination)
        pulumi.set(__self__, "sprite_sheets", sprite_sheets)

    @property
    @pulumi.getter(name="adBreaks")
    def ad_breaks(self) -> Sequence['outputs.AdBreakResponse']:
        """
        List of ad breaks. Specifies where to insert ad break tags in the output manifests.
        """
        return pulumi.get(self, "ad_breaks")

    @property
    @pulumi.getter(name="editList")
    def edit_list(self) -> Sequence['outputs.EditAtomResponse']:
        """
        List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
        """
        return pulumi.get(self, "edit_list")

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Sequence['outputs.ElementaryStreamResponse']:
        """
        List of elementary streams.
        """
        return pulumi.get(self, "elementary_streams")

    @property
    @pulumi.getter
    def encryptions(self) -> Sequence['outputs.EncryptionResponse']:
        """
        List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
        """
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter
    def inputs(self) -> Sequence['outputs.InputResponse']:
        """
        List of input assets stored in Cloud Storage.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def manifests(self) -> Sequence['outputs.ManifestResponse']:
        """
        List of output manifests.
        """
        return pulumi.get(self, "manifests")

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Sequence['outputs.MuxStreamResponse']:
        """
        List of multiplexing settings for output streams.
        """
        return pulumi.get(self, "mux_streams")

    @property
    @pulumi.getter
    def output(self) -> 'outputs.OutputResponse':
        """
        Output configuration.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def overlays(self) -> Sequence['outputs.OverlayResponse']:
        """
        List of overlays on the output video, in descending Z-order.
        """
        return pulumi.get(self, "overlays")

    @property
    @pulumi.getter(name="pubsubDestination")
    def pubsub_destination(self) -> 'outputs.PubsubDestinationResponse':
        """
        Destination on Pub/Sub.
        """
        return pulumi.get(self, "pubsub_destination")

    @property
    @pulumi.getter(name="spriteSheets")
    def sprite_sheets(self) -> Sequence['outputs.SpriteSheetResponse']:
        """
        List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
        """
        return pulumi.get(self, "sprite_sheets")


@pulumi.output_type
class ManifestResponse(dict):
    """
    Manifest configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"
        elif key == "muxStreams":
            suggest = "mux_streams"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManifestResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManifestResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManifestResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dash: 'outputs.DashConfigResponse',
                 file_name: str,
                 mux_streams: Sequence[str],
                 type: str):
        """
        Manifest configuration.
        :param 'DashConfigResponse' dash: `DASH` manifest configuration.
        :param str file_name: The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
        :param Sequence[str] mux_streams: List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
        :param str type: Type of the manifest.
        """
        pulumi.set(__self__, "dash", dash)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "mux_streams", mux_streams)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dash(self) -> 'outputs.DashConfigResponse':
        """
        `DASH` manifest configuration.
        """
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Sequence[str]:
        """
        List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
        """
        return pulumi.get(self, "mux_streams")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the manifest.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MpegCommonEncryptionResponse(dict):
    """
    Configuration for MPEG Common Encryption (MPEG-CENC).
    """
    def __init__(__self__, *,
                 scheme: str):
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        :param str scheme: Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
        """
        pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def scheme(self) -> str:
        """
        Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class MuxStreamResponse(dict):
    """
    Multiplexing settings for output stream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elementaryStreams":
            suggest = "elementary_streams"
        elif key == "encryptionId":
            suggest = "encryption_id"
        elif key == "fileName":
            suggest = "file_name"
        elif key == "segmentSettings":
            suggest = "segment_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MuxStreamResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MuxStreamResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MuxStreamResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 elementary_streams: Sequence[str],
                 encryption_id: str,
                 file_name: str,
                 fmp4: 'outputs.Fmp4ConfigResponse',
                 key: str,
                 segment_settings: 'outputs.SegmentSettingsResponse'):
        """
        Multiplexing settings for output stream.
        :param str container: The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
        :param Sequence[str] elementary_streams: List of ElementaryStream.key values multiplexed in this stream.
        :param str encryption_id: Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
        :param str file_name: The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
        :param 'Fmp4ConfigResponse' fmp4: Optional. `fmp4` container configuration.
        :param str key: A unique key for this multiplexed stream.
        :param 'SegmentSettingsResponse' segment_settings: Segment settings for `ts`, `fmp4` and `vtt`.
        """
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "elementary_streams", elementary_streams)
        pulumi.set(__self__, "encryption_id", encryption_id)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "fmp4", fmp4)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "segment_settings", segment_settings)

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Sequence[str]:
        """
        List of ElementaryStream.key values multiplexed in this stream.
        """
        return pulumi.get(self, "elementary_streams")

    @property
    @pulumi.getter(name="encryptionId")
    def encryption_id(self) -> str:
        """
        Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
        """
        return pulumi.get(self, "encryption_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def fmp4(self) -> 'outputs.Fmp4ConfigResponse':
        """
        Optional. `fmp4` container configuration.
        """
        return pulumi.get(self, "fmp4")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A unique key for this multiplexed stream.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="segmentSettings")
    def segment_settings(self) -> 'outputs.SegmentSettingsResponse':
        """
        Segment settings for `ts`, `fmp4` and `vtt`.
        """
        return pulumi.get(self, "segment_settings")


@pulumi.output_type
class NormalizedCoordinateResponse(dict):
    """
    2D normalized coordinates. Default: `{0.0, 0.0}`
    """
    def __init__(__self__, *,
                 x: float,
                 y: float):
        """
        2D normalized coordinates. Default: `{0.0, 0.0}`
        :param float x: Normalized x coordinate.
        :param float y: Normalized y coordinate.
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        Normalized x coordinate.
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        Normalized y coordinate.
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class OutputResponse(dict):
    """
    Location of output file(s) in a Cloud Storage bucket.
    """
    def __init__(__self__, *,
                 uri: str):
        """
        Location of output file(s) in a Cloud Storage bucket.
        :param str uri: URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
        """
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class OverlayResponse(dict):
    """
    Overlay configuration.
    """
    def __init__(__self__, *,
                 animations: Sequence['outputs.AnimationResponse'],
                 image: 'outputs.ImageResponse'):
        """
        Overlay configuration.
        :param Sequence['AnimationResponse'] animations: List of animations. The list should be chronological, without any time overlap.
        :param 'ImageResponse' image: Image overlay.
        """
        pulumi.set(__self__, "animations", animations)
        pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def animations(self) -> Sequence['outputs.AnimationResponse']:
        """
        List of animations. The list should be chronological, without any time overlap.
        """
        return pulumi.get(self, "animations")

    @property
    @pulumi.getter
    def image(self) -> 'outputs.ImageResponse':
        """
        Image overlay.
        """
        return pulumi.get(self, "image")


@pulumi.output_type
class PadResponse(dict):
    """
    Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bottomPixels":
            suggest = "bottom_pixels"
        elif key == "leftPixels":
            suggest = "left_pixels"
        elif key == "rightPixels":
            suggest = "right_pixels"
        elif key == "topPixels":
            suggest = "top_pixels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PadResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PadResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PadResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bottom_pixels: int,
                 left_pixels: int,
                 right_pixels: int,
                 top_pixels: int):
        """
        Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
        :param int bottom_pixels: The number of pixels to add to the bottom. The default is 0.
        :param int left_pixels: The number of pixels to add to the left. The default is 0.
        :param int right_pixels: The number of pixels to add to the right. The default is 0.
        :param int top_pixels: The number of pixels to add to the top. The default is 0.
        """
        pulumi.set(__self__, "bottom_pixels", bottom_pixels)
        pulumi.set(__self__, "left_pixels", left_pixels)
        pulumi.set(__self__, "right_pixels", right_pixels)
        pulumi.set(__self__, "top_pixels", top_pixels)

    @property
    @pulumi.getter(name="bottomPixels")
    def bottom_pixels(self) -> int:
        """
        The number of pixels to add to the bottom. The default is 0.
        """
        return pulumi.get(self, "bottom_pixels")

    @property
    @pulumi.getter(name="leftPixels")
    def left_pixels(self) -> int:
        """
        The number of pixels to add to the left. The default is 0.
        """
        return pulumi.get(self, "left_pixels")

    @property
    @pulumi.getter(name="rightPixels")
    def right_pixels(self) -> int:
        """
        The number of pixels to add to the right. The default is 0.
        """
        return pulumi.get(self, "right_pixels")

    @property
    @pulumi.getter(name="topPixels")
    def top_pixels(self) -> int:
        """
        The number of pixels to add to the top. The default is 0.
        """
        return pulumi.get(self, "top_pixels")


@pulumi.output_type
class PlayreadyResponse(dict):
    """
    Playready configuration.
    """
    def __init__(__self__):
        """
        Playready configuration.
        """
        pass


@pulumi.output_type
class PreprocessingConfigResponse(dict):
    """
    Preprocessing configurations.
    """
    def __init__(__self__, *,
                 audio: 'outputs.AudioResponse',
                 color: 'outputs.ColorResponse',
                 crop: 'outputs.CropResponse',
                 deblock: 'outputs.DeblockResponse',
                 deinterlace: 'outputs.DeinterlaceResponse',
                 denoise: 'outputs.DenoiseResponse',
                 pad: 'outputs.PadResponse'):
        """
        Preprocessing configurations.
        :param 'AudioResponse' audio: Audio preprocessing configuration.
        :param 'ColorResponse' color: Color preprocessing configuration.
        :param 'CropResponse' crop: Specify the video cropping configuration.
        :param 'DeblockResponse' deblock: Deblock preprocessing configuration.
        :param 'DeinterlaceResponse' deinterlace: Specify the video deinterlace configuration.
        :param 'DenoiseResponse' denoise: Denoise preprocessing configuration.
        :param 'PadResponse' pad: Specify the video pad filter configuration.
        """
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "crop", crop)
        pulumi.set(__self__, "deblock", deblock)
        pulumi.set(__self__, "deinterlace", deinterlace)
        pulumi.set(__self__, "denoise", denoise)
        pulumi.set(__self__, "pad", pad)

    @property
    @pulumi.getter
    def audio(self) -> 'outputs.AudioResponse':
        """
        Audio preprocessing configuration.
        """
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter
    def color(self) -> 'outputs.ColorResponse':
        """
        Color preprocessing configuration.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def crop(self) -> 'outputs.CropResponse':
        """
        Specify the video cropping configuration.
        """
        return pulumi.get(self, "crop")

    @property
    @pulumi.getter
    def deblock(self) -> 'outputs.DeblockResponse':
        """
        Deblock preprocessing configuration.
        """
        return pulumi.get(self, "deblock")

    @property
    @pulumi.getter
    def deinterlace(self) -> 'outputs.DeinterlaceResponse':
        """
        Specify the video deinterlace configuration.
        """
        return pulumi.get(self, "deinterlace")

    @property
    @pulumi.getter
    def denoise(self) -> 'outputs.DenoiseResponse':
        """
        Denoise preprocessing configuration.
        """
        return pulumi.get(self, "denoise")

    @property
    @pulumi.getter
    def pad(self) -> 'outputs.PadResponse':
        """
        Specify the video pad filter configuration.
        """
        return pulumi.get(self, "pad")


@pulumi.output_type
class PubsubDestinationResponse(dict):
    """
    A Pub/Sub destination.
    """
    def __init__(__self__, *,
                 topic: str):
        """
        A Pub/Sub destination.
        :param str topic: The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
        """
        pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class SampleAesEncryptionResponse(dict):
    """
    Configuration for SAMPLE-AES encryption.
    """
    def __init__(__self__):
        """
        Configuration for SAMPLE-AES encryption.
        """
        pass


@pulumi.output_type
class SecretManagerSourceResponse(dict):
    """
    Configuration for secrets stored in Google Secret Manager.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretVersion":
            suggest = "secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretManagerSourceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretManagerSourceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretManagerSourceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_version: str):
        """
        Configuration for secrets stored in Google Secret Manager.
        :param str secret_version: The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> str:
        """
        The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
        """
        return pulumi.get(self, "secret_version")


@pulumi.output_type
class SegmentSettingsResponse(dict):
    """
    Segment settings for `ts`, `fmp4` and `vtt`.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "individualSegments":
            suggest = "individual_segments"
        elif key == "segmentDuration":
            suggest = "segment_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 individual_segments: bool,
                 segment_duration: str):
        """
        Segment settings for `ts`, `fmp4` and `vtt`.
        :param bool individual_segments: Create an individual segment file. The default is `false`.
        :param str segment_duration: Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
        """
        pulumi.set(__self__, "individual_segments", individual_segments)
        pulumi.set(__self__, "segment_duration", segment_duration)

    @property
    @pulumi.getter(name="individualSegments")
    def individual_segments(self) -> bool:
        """
        Create an individual segment file. The default is `false`.
        """
        return pulumi.get(self, "individual_segments")

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> str:
        """
        Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
        """
        return pulumi.get(self, "segment_duration")


@pulumi.output_type
class SpriteSheetResponse(dict):
    """
    Sprite sheet configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnCount":
            suggest = "column_count"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "filePrefix":
            suggest = "file_prefix"
        elif key == "rowCount":
            suggest = "row_count"
        elif key == "spriteHeightPixels":
            suggest = "sprite_height_pixels"
        elif key == "spriteWidthPixels":
            suggest = "sprite_width_pixels"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "totalCount":
            suggest = "total_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpriteSheetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpriteSheetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpriteSheetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_count: int,
                 end_time_offset: str,
                 file_prefix: str,
                 format: str,
                 interval: str,
                 quality: int,
                 row_count: int,
                 sprite_height_pixels: int,
                 sprite_width_pixels: int,
                 start_time_offset: str,
                 total_count: int):
        """
        Sprite sheet configuration.
        :param int column_count: The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
        :param str end_time_offset: End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
        :param str file_prefix: File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
        :param str format: Format type. The default is `jpeg`. Supported formats: - `jpeg`
        :param str interval: Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
        :param int quality: The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
        :param int row_count: The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
        :param int sprite_height_pixels: The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        :param int sprite_width_pixels: The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        :param str start_time_offset: Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
        :param int total_count: Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
        """
        pulumi.set(__self__, "column_count", column_count)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "file_prefix", file_prefix)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "quality", quality)
        pulumi.set(__self__, "row_count", row_count)
        pulumi.set(__self__, "sprite_height_pixels", sprite_height_pixels)
        pulumi.set(__self__, "sprite_width_pixels", sprite_width_pixels)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="columnCount")
    def column_count(self) -> int:
        """
        The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
        """
        return pulumi.get(self, "column_count")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> str:
        """
        End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="filePrefix")
    def file_prefix(self) -> str:
        """
        File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
        """
        return pulumi.get(self, "file_prefix")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format type. The default is `jpeg`. Supported formats: - `jpeg`
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def quality(self) -> int:
        """
        The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
        """
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="rowCount")
    def row_count(self) -> int:
        """
        The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
        """
        return pulumi.get(self, "row_count")

    @property
    @pulumi.getter(name="spriteHeightPixels")
    def sprite_height_pixels(self) -> int:
        """
        The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "sprite_height_pixels")

    @property
    @pulumi.getter(name="spriteWidthPixels")
    def sprite_width_pixels(self) -> int:
        """
        The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "sprite_width_pixels")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> str:
        """
        Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class StatusResponse(dict):
    """
    The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    """
    def __init__(__self__, *,
                 code: int,
                 details: Sequence[Mapping[str, Any]],
                 message: str):
        """
        The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
        :param int code: The status code, which should be an enum value of google.rpc.Code.
        :param Sequence[Mapping[str, Any]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param str message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence[Mapping[str, Any]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class TextMappingResponse(dict):
    """
    The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "atomKey":
            suggest = "atom_key"
        elif key == "inputKey":
            suggest = "input_key"
        elif key == "inputTrack":
            suggest = "input_track"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TextMappingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TextMappingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TextMappingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 atom_key: str,
                 input_key: str,
                 input_track: int):
        """
        The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
        :param str atom_key: The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
        :param str input_key: The Input.key that identifies the input file.
        :param int input_track: The zero-based index of the track in the input file.
        """
        pulumi.set(__self__, "atom_key", atom_key)
        pulumi.set(__self__, "input_key", input_key)
        pulumi.set(__self__, "input_track", input_track)

    @property
    @pulumi.getter(name="atomKey")
    def atom_key(self) -> str:
        """
        The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
        """
        return pulumi.get(self, "atom_key")

    @property
    @pulumi.getter(name="inputKey")
    def input_key(self) -> str:
        """
        The Input.key that identifies the input file.
        """
        return pulumi.get(self, "input_key")

    @property
    @pulumi.getter(name="inputTrack")
    def input_track(self) -> int:
        """
        The zero-based index of the track in the input file.
        """
        return pulumi.get(self, "input_track")


@pulumi.output_type
class TextStreamResponse(dict):
    """
    Encoding of a text stream. For example, closed captions or subtitles.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "languageCode":
            suggest = "language_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TextStreamResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TextStreamResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TextStreamResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 display_name: str,
                 language_code: str,
                 mapping: Sequence['outputs.TextMappingResponse']):
        """
        Encoding of a text stream. For example, closed captions or subtitles.
        :param str codec: The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
        :param str display_name: The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
        :param str language_code: The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
        :param Sequence['TextMappingResponse'] mapping: The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
        """
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "mapping", mapping)

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def mapping(self) -> Sequence['outputs.TextMappingResponse']:
        """
        The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
        """
        return pulumi.get(self, "mapping")


@pulumi.output_type
class VideoStreamResponse(dict):
    """
    Video stream resource.
    """
    def __init__(__self__, *,
                 h264: 'outputs.H264CodecSettingsResponse',
                 h265: 'outputs.H265CodecSettingsResponse',
                 vp9: 'outputs.Vp9CodecSettingsResponse'):
        """
        Video stream resource.
        :param 'H264CodecSettingsResponse' h264: H264 codec settings.
        :param 'H265CodecSettingsResponse' h265: H265 codec settings.
        :param 'Vp9CodecSettingsResponse' vp9: VP9 codec settings.
        """
        pulumi.set(__self__, "h264", h264)
        pulumi.set(__self__, "h265", h265)
        pulumi.set(__self__, "vp9", vp9)

    @property
    @pulumi.getter
    def h264(self) -> 'outputs.H264CodecSettingsResponse':
        """
        H264 codec settings.
        """
        return pulumi.get(self, "h264")

    @property
    @pulumi.getter
    def h265(self) -> 'outputs.H265CodecSettingsResponse':
        """
        H265 codec settings.
        """
        return pulumi.get(self, "h265")

    @property
    @pulumi.getter
    def vp9(self) -> 'outputs.Vp9CodecSettingsResponse':
        """
        VP9 codec settings.
        """
        return pulumi.get(self, "vp9")


@pulumi.output_type
class Vp9CodecSettingsResponse(dict):
    """
    VP9 codec settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitrateBps":
            suggest = "bitrate_bps"
        elif key == "crfLevel":
            suggest = "crf_level"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "gopDuration":
            suggest = "gop_duration"
        elif key == "gopFrameCount":
            suggest = "gop_frame_count"
        elif key == "heightPixels":
            suggest = "height_pixels"
        elif key == "pixelFormat":
            suggest = "pixel_format"
        elif key == "rateControlMode":
            suggest = "rate_control_mode"
        elif key == "widthPixels":
            suggest = "width_pixels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Vp9CodecSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Vp9CodecSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Vp9CodecSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate_bps: int,
                 crf_level: int,
                 frame_rate: float,
                 gop_duration: str,
                 gop_frame_count: int,
                 height_pixels: int,
                 pixel_format: str,
                 profile: str,
                 rate_control_mode: str,
                 width_pixels: int):
        """
        VP9 codec settings.
        :param int bitrate_bps: The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
        :param int crf_level: Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
        :param float frame_rate: The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        :param str gop_duration: Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        :param int gop_frame_count: Select the GOP size based on the specified frame count. Must be greater than zero.
        :param int height_pixels: The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        :param str pixel_format: Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        :param str profile: Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
        :param str rate_control_mode: Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
        :param int width_pixels: The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "crf_level", crf_level)
        pulumi.set(__self__, "frame_rate", frame_rate)
        pulumi.set(__self__, "gop_duration", gop_duration)
        pulumi.set(__self__, "gop_frame_count", gop_frame_count)
        pulumi.set(__self__, "height_pixels", height_pixels)
        pulumi.set(__self__, "pixel_format", pixel_format)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "rate_control_mode", rate_control_mode)
        pulumi.set(__self__, "width_pixels", width_pixels)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> int:
        """
        The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
        """
        return pulumi.get(self, "bitrate_bps")

    @property
    @pulumi.getter(name="crfLevel")
    def crf_level(self) -> int:
        """
        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
        """
        return pulumi.get(self, "crf_level")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> float:
        """
        The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
        """
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter(name="gopDuration")
    def gop_duration(self) -> str:
        """
        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
        """
        return pulumi.get(self, "gop_duration")

    @property
    @pulumi.getter(name="gopFrameCount")
    def gop_frame_count(self) -> int:
        """
        Select the GOP size based on the specified frame count. Must be greater than zero.
        """
        return pulumi.get(self, "gop_frame_count")

    @property
    @pulumi.getter(name="heightPixels")
    def height_pixels(self) -> int:
        """
        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "height_pixels")

    @property
    @pulumi.getter(name="pixelFormat")
    def pixel_format(self) -> str:
        """
        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
        """
        return pulumi.get(self, "pixel_format")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="rateControlMode")
    def rate_control_mode(self) -> str:
        """
        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
        """
        return pulumi.get(self, "rate_control_mode")

    @property
    @pulumi.getter(name="widthPixels")
    def width_pixels(self) -> int:
        """
        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
        """
        return pulumi.get(self, "width_pixels")


@pulumi.output_type
class WidevineResponse(dict):
    """
    Widevine configuration.
    """
    def __init__(__self__):
        """
        Widevine configuration.
        """
        pass


@pulumi.output_type
class YadifConfigResponse(dict):
    """
    Yet Another Deinterlacing Filter Configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deinterlaceAllFrames":
            suggest = "deinterlace_all_frames"
        elif key == "disableSpatialInterlacing":
            suggest = "disable_spatial_interlacing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YadifConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YadifConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YadifConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deinterlace_all_frames: bool,
                 disable_spatial_interlacing: bool,
                 mode: str,
                 parity: str):
        """
        Yet Another Deinterlacing Filter Configuration.
        :param bool deinterlace_all_frames: Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
        :param bool disable_spatial_interlacing: Disable spacial interlacing. The default is `false`.
        :param str mode: Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
        :param str parity: The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
        """
        pulumi.set(__self__, "deinterlace_all_frames", deinterlace_all_frames)
        pulumi.set(__self__, "disable_spatial_interlacing", disable_spatial_interlacing)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "parity", parity)

    @property
    @pulumi.getter(name="deinterlaceAllFrames")
    def deinterlace_all_frames(self) -> bool:
        """
        Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
        """
        return pulumi.get(self, "deinterlace_all_frames")

    @property
    @pulumi.getter(name="disableSpatialInterlacing")
    def disable_spatial_interlacing(self) -> bool:
        """
        Disable spacial interlacing. The default is `false`.
        """
        return pulumi.get(self, "disable_spatial_interlacing")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def parity(self) -> str:
        """
        The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
        """
        return pulumi.get(self, "parity")


