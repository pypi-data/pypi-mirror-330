# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetFirewallEndpointResult',
    'AwaitableGetFirewallEndpointResult',
    'get_firewall_endpoint',
    'get_firewall_endpoint_output',
]

@pulumi.output_type
class GetFirewallEndpointResult:
    def __init__(__self__, associated_networks=None, billing_project_id=None, create_time=None, description=None, labels=None, name=None, reconciling=None, state=None, update_time=None):
        if associated_networks and not isinstance(associated_networks, list):
            raise TypeError("Expected argument 'associated_networks' to be a list")
        pulumi.set(__self__, "associated_networks", associated_networks)
        if billing_project_id and not isinstance(billing_project_id, str):
            raise TypeError("Expected argument 'billing_project_id' to be a str")
        pulumi.set(__self__, "billing_project_id", billing_project_id)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="associatedNetworks")
    def associated_networks(self) -> Sequence[str]:
        """
        List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.
        """
        return pulumi.get(self, "associated_networks")

    @property
    @pulumi.getter(name="billingProjectId")
    def billing_project_id(self) -> str:
        """
        Optional. Project to bill on endpoint uptime usage.
        """
        return pulumi.get(self, "billing_project_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the firewall endpoint. Max length 2048 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Whether reconciling is in progress, recommended per https://google.aip.dev/128.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the endpoint.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")


class AwaitableGetFirewallEndpointResult(GetFirewallEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallEndpointResult(
            associated_networks=self.associated_networks,
            billing_project_id=self.billing_project_id,
            create_time=self.create_time,
            description=self.description,
            labels=self.labels,
            name=self.name,
            reconciling=self.reconciling,
            state=self.state,
            update_time=self.update_time)


def get_firewall_endpoint(firewall_endpoint_id: Optional[str] = None,
                          location: Optional[str] = None,
                          organization_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallEndpointResult:
    """
    Gets details of a single Endpoint.
    """
    __args__ = dict()
    __args__['firewallEndpointId'] = firewall_endpoint_id
    __args__['location'] = location
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networksecurity/v1beta1:getFirewallEndpoint', __args__, opts=opts, typ=GetFirewallEndpointResult).value

    return AwaitableGetFirewallEndpointResult(
        associated_networks=pulumi.get(__ret__, 'associated_networks'),
        billing_project_id=pulumi.get(__ret__, 'billing_project_id'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_firewall_endpoint)
def get_firewall_endpoint_output(firewall_endpoint_id: Optional[pulumi.Input[str]] = None,
                                 location: Optional[pulumi.Input[str]] = None,
                                 organization_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallEndpointResult]:
    """
    Gets details of a single Endpoint.
    """
    ...
