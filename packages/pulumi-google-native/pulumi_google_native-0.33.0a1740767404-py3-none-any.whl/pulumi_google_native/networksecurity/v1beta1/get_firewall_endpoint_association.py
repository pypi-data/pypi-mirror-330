# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetFirewallEndpointAssociationResult',
    'AwaitableGetFirewallEndpointAssociationResult',
    'get_firewall_endpoint_association',
    'get_firewall_endpoint_association_output',
]

@pulumi.output_type
class GetFirewallEndpointAssociationResult:
    def __init__(__self__, create_time=None, firewall_endpoint=None, labels=None, name=None, network=None, reconciling=None, state=None, tls_inspection_policy=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if firewall_endpoint and not isinstance(firewall_endpoint, str):
            raise TypeError("Expected argument 'firewall_endpoint' to be a str")
        pulumi.set(__self__, "firewall_endpoint", firewall_endpoint)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tls_inspection_policy and not isinstance(tls_inspection_policy, str):
            raise TypeError("Expected argument 'tls_inspection_policy' to be a str")
        pulumi.set(__self__, "tls_inspection_policy", tls_inspection_policy)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="firewallEndpoint")
    def firewall_endpoint(self) -> str:
        """
        The URL of the FirewallEndpoint that is being associated.
        """
        return pulumi.get(self, "firewall_endpoint")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The URL of the network that is being associated.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Whether reconciling is in progress, recommended per https://google.aip.dev/128.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the association.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tlsInspectionPolicy")
    def tls_inspection_policy(self) -> str:
        """
        Optional. The URL of the TlsInspectionPolicy that is being associated.
        """
        return pulumi.get(self, "tls_inspection_policy")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")


class AwaitableGetFirewallEndpointAssociationResult(GetFirewallEndpointAssociationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallEndpointAssociationResult(
            create_time=self.create_time,
            firewall_endpoint=self.firewall_endpoint,
            labels=self.labels,
            name=self.name,
            network=self.network,
            reconciling=self.reconciling,
            state=self.state,
            tls_inspection_policy=self.tls_inspection_policy,
            update_time=self.update_time)


def get_firewall_endpoint_association(firewall_endpoint_association_id: Optional[str] = None,
                                      location: Optional[str] = None,
                                      project: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallEndpointAssociationResult:
    """
    Gets details of a single FirewallEndpointAssociation.
    """
    __args__ = dict()
    __args__['firewallEndpointAssociationId'] = firewall_endpoint_association_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networksecurity/v1beta1:getFirewallEndpointAssociation', __args__, opts=opts, typ=GetFirewallEndpointAssociationResult).value

    return AwaitableGetFirewallEndpointAssociationResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        firewall_endpoint=pulumi.get(__ret__, 'firewall_endpoint'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        state=pulumi.get(__ret__, 'state'),
        tls_inspection_policy=pulumi.get(__ret__, 'tls_inspection_policy'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_firewall_endpoint_association)
def get_firewall_endpoint_association_output(firewall_endpoint_association_id: Optional[pulumi.Input[str]] = None,
                                             location: Optional[pulumi.Input[str]] = None,
                                             project: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallEndpointAssociationResult]:
    """
    Gets details of a single FirewallEndpointAssociation.
    """
    ...
