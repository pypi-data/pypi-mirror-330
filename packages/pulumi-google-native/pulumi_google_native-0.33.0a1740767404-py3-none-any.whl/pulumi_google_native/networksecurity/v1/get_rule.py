# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetRuleResult',
    'AwaitableGetRuleResult',
    'get_rule',
    'get_rule_output',
]

@pulumi.output_type
class GetRuleResult:
    def __init__(__self__, application_matcher=None, basic_profile=None, create_time=None, description=None, enabled=None, name=None, priority=None, session_matcher=None, tls_inspection_enabled=None, update_time=None):
        if application_matcher and not isinstance(application_matcher, str):
            raise TypeError("Expected argument 'application_matcher' to be a str")
        pulumi.set(__self__, "application_matcher", application_matcher)
        if basic_profile and not isinstance(basic_profile, str):
            raise TypeError("Expected argument 'basic_profile' to be a str")
        pulumi.set(__self__, "basic_profile", basic_profile)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if session_matcher and not isinstance(session_matcher, str):
            raise TypeError("Expected argument 'session_matcher' to be a str")
        pulumi.set(__self__, "session_matcher", session_matcher)
        if tls_inspection_enabled and not isinstance(tls_inspection_enabled, bool):
            raise TypeError("Expected argument 'tls_inspection_enabled' to be a bool")
        pulumi.set(__self__, "tls_inspection_enabled", tls_inspection_enabled)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="applicationMatcher")
    def application_matcher(self) -> str:
        """
        Optional. CEL expression for matching on L7/application level criteria.
        """
        return pulumi.get(self, "application_matcher")

    @property
    @pulumi.getter(name="basicProfile")
    def basic_profile(self) -> str:
        """
        Profile which tells what the primitive action should be.
        """
        return pulumi.get(self, "basic_profile")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the rule was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Free-text description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the rule is enforced.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the rule. Lower number corresponds to higher precedence.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="sessionMatcher")
    def session_matcher(self) -> str:
        """
        CEL expression for matching on session criteria.
        """
        return pulumi.get(self, "session_matcher")

    @property
    @pulumi.getter(name="tlsInspectionEnabled")
    def tls_inspection_enabled(self) -> bool:
        """
        Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
        """
        return pulumi.get(self, "tls_inspection_enabled")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the rule was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetRuleResult(GetRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleResult(
            application_matcher=self.application_matcher,
            basic_profile=self.basic_profile,
            create_time=self.create_time,
            description=self.description,
            enabled=self.enabled,
            name=self.name,
            priority=self.priority,
            session_matcher=self.session_matcher,
            tls_inspection_enabled=self.tls_inspection_enabled,
            update_time=self.update_time)


def get_rule(gateway_security_policy_id: Optional[str] = None,
             location: Optional[str] = None,
             project: Optional[str] = None,
             rule_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleResult:
    """
    Gets details of a single GatewaySecurityPolicyRule.
    """
    __args__ = dict()
    __args__['gatewaySecurityPolicyId'] = gateway_security_policy_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networksecurity/v1:getRule', __args__, opts=opts, typ=GetRuleResult).value

    return AwaitableGetRuleResult(
        application_matcher=pulumi.get(__ret__, 'application_matcher'),
        basic_profile=pulumi.get(__ret__, 'basic_profile'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        name=pulumi.get(__ret__, 'name'),
        priority=pulumi.get(__ret__, 'priority'),
        session_matcher=pulumi.get(__ret__, 'session_matcher'),
        tls_inspection_enabled=pulumi.get(__ret__, 'tls_inspection_enabled'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_rule)
def get_rule_output(gateway_security_policy_id: Optional[pulumi.Input[str]] = None,
                    location: Optional[pulumi.Input[str]] = None,
                    project: Optional[pulumi.Input[Optional[str]]] = None,
                    rule_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRuleResult]:
    """
    Gets details of a single GatewaySecurityPolicyRule.
    """
    ...
