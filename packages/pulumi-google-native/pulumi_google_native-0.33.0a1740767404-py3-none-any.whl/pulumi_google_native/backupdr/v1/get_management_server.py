# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetManagementServerResult',
    'AwaitableGetManagementServerResult',
    'get_management_server',
    'get_management_server_output',
]

@pulumi.output_type
class GetManagementServerResult:
    def __init__(__self__, create_time=None, description=None, etag=None, labels=None, management_uri=None, name=None, networks=None, oauth2_client_id=None, state=None, type=None, update_time=None, workforce_identity_based_management_uri=None, workforce_identity_based_oauth2_client_id=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if management_uri and not isinstance(management_uri, dict):
            raise TypeError("Expected argument 'management_uri' to be a dict")
        pulumi.set(__self__, "management_uri", management_uri)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if oauth2_client_id and not isinstance(oauth2_client_id, str):
            raise TypeError("Expected argument 'oauth2_client_id' to be a str")
        pulumi.set(__self__, "oauth2_client_id", oauth2_client_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if workforce_identity_based_management_uri and not isinstance(workforce_identity_based_management_uri, dict):
            raise TypeError("Expected argument 'workforce_identity_based_management_uri' to be a dict")
        pulumi.set(__self__, "workforce_identity_based_management_uri", workforce_identity_based_management_uri)
        if workforce_identity_based_oauth2_client_id and not isinstance(workforce_identity_based_oauth2_client_id, dict):
            raise TypeError("Expected argument 'workforce_identity_based_oauth2_client_id' to be a dict")
        pulumi.set(__self__, "workforce_identity_based_oauth2_client_id", workforce_identity_based_oauth2_client_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the instance was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. The description of the ManagementServer instance (2048 characters or less).
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="managementUri")
    def management_uri(self) -> 'outputs.ManagementURIResponse':
        """
        The hostname or ip address of the exposed AGM endpoints, used by clients to connect to AGM/RD graphical user interface and APIs.
        """
        return pulumi.get(self, "management_uri")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.NetworkConfigResponse']:
        """
        VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> str:
        """
        The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the â€˜audâ€™ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
        """
        return pulumi.get(self, "oauth2_client_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The ManagementServer state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the ManagementServer resource.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the instance was updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workforceIdentityBasedManagementUri")
    def workforce_identity_based_management_uri(self) -> 'outputs.WorkforceIdentityBasedManagementURIResponse':
        """
        The hostnames of the exposed AGM endpoints for both types of user i.e. 1p and 3p, used to connect AGM/RM UI.
        """
        return pulumi.get(self, "workforce_identity_based_management_uri")

    @property
    @pulumi.getter(name="workforceIdentityBasedOauth2ClientId")
    def workforce_identity_based_oauth2_client_id(self) -> 'outputs.WorkforceIdentityBasedOAuth2ClientIDResponse':
        """
        The OAuth client IDs for both types of user i.e. 1p and 3p.
        """
        return pulumi.get(self, "workforce_identity_based_oauth2_client_id")


class AwaitableGetManagementServerResult(GetManagementServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagementServerResult(
            create_time=self.create_time,
            description=self.description,
            etag=self.etag,
            labels=self.labels,
            management_uri=self.management_uri,
            name=self.name,
            networks=self.networks,
            oauth2_client_id=self.oauth2_client_id,
            state=self.state,
            type=self.type,
            update_time=self.update_time,
            workforce_identity_based_management_uri=self.workforce_identity_based_management_uri,
            workforce_identity_based_oauth2_client_id=self.workforce_identity_based_oauth2_client_id)


def get_management_server(location: Optional[str] = None,
                          management_server_id: Optional[str] = None,
                          project: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagementServerResult:
    """
    Gets details of a single ManagementServer.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['managementServerId'] = management_server_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:backupdr/v1:getManagementServer', __args__, opts=opts, typ=GetManagementServerResult).value

    return AwaitableGetManagementServerResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        management_uri=pulumi.get(__ret__, 'management_uri'),
        name=pulumi.get(__ret__, 'name'),
        networks=pulumi.get(__ret__, 'networks'),
        oauth2_client_id=pulumi.get(__ret__, 'oauth2_client_id'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        update_time=pulumi.get(__ret__, 'update_time'),
        workforce_identity_based_management_uri=pulumi.get(__ret__, 'workforce_identity_based_management_uri'),
        workforce_identity_based_oauth2_client_id=pulumi.get(__ret__, 'workforce_identity_based_oauth2_client_id'))


@_utilities.lift_output_func(get_management_server)
def get_management_server_output(location: Optional[pulumi.Input[str]] = None,
                                 management_server_id: Optional[pulumi.Input[str]] = None,
                                 project: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagementServerResult]:
    """
    Gets details of a single ManagementServer.
    """
    ...
