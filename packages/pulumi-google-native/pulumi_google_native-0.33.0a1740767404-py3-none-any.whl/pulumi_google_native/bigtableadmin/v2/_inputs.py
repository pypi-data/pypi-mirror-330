# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AuditConfigArgs',
    'AuditLogConfigArgs',
    'AutoscalingLimitsArgs',
    'AutoscalingTargetsArgs',
    'BindingArgs',
    'ChangeStreamConfigArgs',
    'ClusterAutoscalingConfigArgs',
    'ClusterConfigArgs',
    'ClusterArgs',
    'ColumnFamilyArgs',
    'EncryptionConfigArgs',
    'ExprArgs',
    'GcRuleArgs',
    'IntersectionArgs',
    'MultiClusterRoutingUseAnyArgs',
    'SingleClusterRoutingArgs',
    'SplitArgs',
    'StandardIsolationArgs',
    'UnionArgs',
]

@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input['AuditLogConfigLogType']] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input['AuditLogConfigLogType'] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input['AuditLogConfigLogType']]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input['AuditLogConfigLogType']]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class AutoscalingLimitsArgs:
    def __init__(__self__, *,
                 max_serve_nodes: pulumi.Input[int],
                 min_serve_nodes: pulumi.Input[int]):
        """
        Limits for the number of nodes a Cluster can autoscale up/down to.
        :param pulumi.Input[int] max_serve_nodes: Maximum number of nodes to scale up to.
        :param pulumi.Input[int] min_serve_nodes: Minimum number of nodes to scale down to.
        """
        pulumi.set(__self__, "max_serve_nodes", max_serve_nodes)
        pulumi.set(__self__, "min_serve_nodes", min_serve_nodes)

    @property
    @pulumi.getter(name="maxServeNodes")
    def max_serve_nodes(self) -> pulumi.Input[int]:
        """
        Maximum number of nodes to scale up to.
        """
        return pulumi.get(self, "max_serve_nodes")

    @max_serve_nodes.setter
    def max_serve_nodes(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_serve_nodes", value)

    @property
    @pulumi.getter(name="minServeNodes")
    def min_serve_nodes(self) -> pulumi.Input[int]:
        """
        Minimum number of nodes to scale down to.
        """
        return pulumi.get(self, "min_serve_nodes")

    @min_serve_nodes.setter
    def min_serve_nodes(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_serve_nodes", value)


@pulumi.input_type
class AutoscalingTargetsArgs:
    def __init__(__self__, *,
                 cpu_utilization_percent: Optional[pulumi.Input[int]] = None,
                 storage_utilization_gib_per_node: Optional[pulumi.Input[int]] = None):
        """
        The Autoscaling targets for a Cluster. These determine the recommended nodes.
        :param pulumi.Input[int] cpu_utilization_percent: The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
        :param pulumi.Input[int] storage_utilization_gib_per_node: The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
        """
        if cpu_utilization_percent is not None:
            pulumi.set(__self__, "cpu_utilization_percent", cpu_utilization_percent)
        if storage_utilization_gib_per_node is not None:
            pulumi.set(__self__, "storage_utilization_gib_per_node", storage_utilization_gib_per_node)

    @property
    @pulumi.getter(name="cpuUtilizationPercent")
    def cpu_utilization_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
        """
        return pulumi.get(self, "cpu_utilization_percent")

    @cpu_utilization_percent.setter
    def cpu_utilization_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_utilization_percent", value)

    @property
    @pulumi.getter(name="storageUtilizationGibPerNode")
    def storage_utilization_gib_per_node(self) -> Optional[pulumi.Input[int]]:
        """
        The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
        """
        return pulumi.get(self, "storage_utilization_gib_per_node")

    @storage_utilization_gib_per_node.setter
    def storage_utilization_gib_per_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_utilization_gib_per_node", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ChangeStreamConfigArgs:
    def __init__(__self__, *,
                 retention_period: Optional[pulumi.Input[str]] = None):
        """
        Change stream configuration.
        :param pulumi.Input[str] retention_period: How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
        """
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[str]]:
        """
        How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_period", value)


@pulumi.input_type
class ClusterAutoscalingConfigArgs:
    def __init__(__self__, *,
                 autoscaling_limits: pulumi.Input['AutoscalingLimitsArgs'],
                 autoscaling_targets: pulumi.Input['AutoscalingTargetsArgs']):
        """
        Autoscaling config for a cluster.
        :param pulumi.Input['AutoscalingLimitsArgs'] autoscaling_limits: Autoscaling limits for this cluster.
        :param pulumi.Input['AutoscalingTargetsArgs'] autoscaling_targets: Autoscaling targets for this cluster.
        """
        pulumi.set(__self__, "autoscaling_limits", autoscaling_limits)
        pulumi.set(__self__, "autoscaling_targets", autoscaling_targets)

    @property
    @pulumi.getter(name="autoscalingLimits")
    def autoscaling_limits(self) -> pulumi.Input['AutoscalingLimitsArgs']:
        """
        Autoscaling limits for this cluster.
        """
        return pulumi.get(self, "autoscaling_limits")

    @autoscaling_limits.setter
    def autoscaling_limits(self, value: pulumi.Input['AutoscalingLimitsArgs']):
        pulumi.set(self, "autoscaling_limits", value)

    @property
    @pulumi.getter(name="autoscalingTargets")
    def autoscaling_targets(self) -> pulumi.Input['AutoscalingTargetsArgs']:
        """
        Autoscaling targets for this cluster.
        """
        return pulumi.get(self, "autoscaling_targets")

    @autoscaling_targets.setter
    def autoscaling_targets(self, value: pulumi.Input['AutoscalingTargetsArgs']):
        pulumi.set(self, "autoscaling_targets", value)


@pulumi.input_type
class ClusterConfigArgs:
    def __init__(__self__, *,
                 cluster_autoscaling_config: Optional[pulumi.Input['ClusterAutoscalingConfigArgs']] = None):
        """
        Configuration for a cluster.
        :param pulumi.Input['ClusterAutoscalingConfigArgs'] cluster_autoscaling_config: Autoscaling configuration for this cluster.
        """
        if cluster_autoscaling_config is not None:
            pulumi.set(__self__, "cluster_autoscaling_config", cluster_autoscaling_config)

    @property
    @pulumi.getter(name="clusterAutoscalingConfig")
    def cluster_autoscaling_config(self) -> Optional[pulumi.Input['ClusterAutoscalingConfigArgs']]:
        """
        Autoscaling configuration for this cluster.
        """
        return pulumi.get(self, "cluster_autoscaling_config")

    @cluster_autoscaling_config.setter
    def cluster_autoscaling_config(self, value: Optional[pulumi.Input['ClusterAutoscalingConfigArgs']]):
        pulumi.set(self, "cluster_autoscaling_config", value)


@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_config: Optional[pulumi.Input['ClusterConfigArgs']] = None,
                 default_storage_type: Optional[pulumi.Input['ClusterDefaultStorageType']] = None,
                 encryption_config: Optional[pulumi.Input['EncryptionConfigArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 serve_nodes: Optional[pulumi.Input[int]] = None):
        """
        A resizable group of nodes in a particular cloud location, capable of serving all Tables in the parent Instance.
        :param pulumi.Input['ClusterConfigArgs'] cluster_config: Configuration for this cluster.
        :param pulumi.Input['ClusterDefaultStorageType'] default_storage_type: Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
        :param pulumi.Input['EncryptionConfigArgs'] encryption_config: Immutable. The encryption configuration for CMEK-protected clusters.
        :param pulumi.Input[str] location: Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
        :param pulumi.Input[str] name: The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
        :param pulumi.Input[int] serve_nodes: The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
        """
        if cluster_config is not None:
            pulumi.set(__self__, "cluster_config", cluster_config)
        if default_storage_type is not None:
            pulumi.set(__self__, "default_storage_type", default_storage_type)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serve_nodes is not None:
            pulumi.set(__self__, "serve_nodes", serve_nodes)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> Optional[pulumi.Input['ClusterConfigArgs']]:
        """
        Configuration for this cluster.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: Optional[pulumi.Input['ClusterConfigArgs']]):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter(name="defaultStorageType")
    def default_storage_type(self) -> Optional[pulumi.Input['ClusterDefaultStorageType']]:
        """
        Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
        """
        return pulumi.get(self, "default_storage_type")

    @default_storage_type.setter
    def default_storage_type(self, value: Optional[pulumi.Input['ClusterDefaultStorageType']]):
        pulumi.set(self, "default_storage_type", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['EncryptionConfigArgs']]:
        """
        Immutable. The encryption configuration for CMEK-protected clusters.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['EncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serveNodes")
    def serve_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
        """
        return pulumi.get(self, "serve_nodes")

    @serve_nodes.setter
    def serve_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "serve_nodes", value)


@pulumi.input_type
class ColumnFamilyArgs:
    def __init__(__self__, *,
                 gc_rule: Optional[pulumi.Input['GcRuleArgs']] = None):
        """
        A set of columns within a table which share a common configuration.
        :param pulumi.Input['GcRuleArgs'] gc_rule: Garbage collection rule specified as a protobuf. Must serialize to at most 500 bytes. NOTE: Garbage collection executes opportunistically in the background, and so it's possible for reads to return a cell even if it matches the active GC expression for its family.
        """
        if gc_rule is not None:
            pulumi.set(__self__, "gc_rule", gc_rule)

    @property
    @pulumi.getter(name="gcRule")
    def gc_rule(self) -> Optional[pulumi.Input['GcRuleArgs']]:
        """
        Garbage collection rule specified as a protobuf. Must serialize to at most 500 bytes. NOTE: Garbage collection executes opportunistically in the background, and so it's possible for reads to return a cell even if it matches the active GC expression for its family.
        """
        return pulumi.get(self, "gc_rule")

    @gc_rule.setter
    def gc_rule(self, value: Optional[pulumi.Input['GcRuleArgs']]):
        pulumi.set(self, "gc_rule", value)


@pulumi.input_type
class EncryptionConfigArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
        :param pulumi.Input[str] kms_key_name: Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class GcRuleArgs:
    def __init__(__self__, *,
                 intersection: Optional[pulumi.Input['IntersectionArgs']] = None,
                 max_age: Optional[pulumi.Input[str]] = None,
                 max_num_versions: Optional[pulumi.Input[int]] = None,
                 union: Optional[pulumi.Input['UnionArgs']] = None):
        """
        Rule for determining which cells to delete during garbage collection.
        :param pulumi.Input['IntersectionArgs'] intersection: Delete cells that would be deleted by every nested rule.
        :param pulumi.Input[str] max_age: Delete cells in a column older than the given age. Values must be at least one millisecond, and will be truncated to microsecond granularity.
        :param pulumi.Input[int] max_num_versions: Delete all cells in a column except the most recent N.
        :param pulumi.Input['UnionArgs'] union: Delete cells that would be deleted by any nested rule.
        """
        if intersection is not None:
            pulumi.set(__self__, "intersection", intersection)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_num_versions is not None:
            pulumi.set(__self__, "max_num_versions", max_num_versions)
        if union is not None:
            pulumi.set(__self__, "union", union)

    @property
    @pulumi.getter
    def intersection(self) -> Optional[pulumi.Input['IntersectionArgs']]:
        """
        Delete cells that would be deleted by every nested rule.
        """
        return pulumi.get(self, "intersection")

    @intersection.setter
    def intersection(self, value: Optional[pulumi.Input['IntersectionArgs']]):
        pulumi.set(self, "intersection", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[str]]:
        """
        Delete cells in a column older than the given age. Values must be at least one millisecond, and will be truncated to microsecond granularity.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxNumVersions")
    def max_num_versions(self) -> Optional[pulumi.Input[int]]:
        """
        Delete all cells in a column except the most recent N.
        """
        return pulumi.get(self, "max_num_versions")

    @max_num_versions.setter
    def max_num_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_num_versions", value)

    @property
    @pulumi.getter
    def union(self) -> Optional[pulumi.Input['UnionArgs']]:
        """
        Delete cells that would be deleted by any nested rule.
        """
        return pulumi.get(self, "union")

    @union.setter
    def union(self, value: Optional[pulumi.Input['UnionArgs']]):
        pulumi.set(self, "union", value)


@pulumi.input_type
class IntersectionArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]] = None):
        """
        A GcRule which deletes cells matching all of the given rules.
        :param pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]] rules: Only delete cells which would be deleted by every element of `rules`.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]]:
        """
        Only delete cells which would be deleted by every element of `rules`.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class MultiClusterRoutingUseAnyArgs:
    def __init__(__self__, *,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_ids: The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
        """
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_ids", value)


@pulumi.input_type
class SingleClusterRoutingArgs:
    def __init__(__self__, *,
                 allow_transactional_writes: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None):
        """
        Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
        :param pulumi.Input[bool] allow_transactional_writes: Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
        :param pulumi.Input[str] cluster_id: The cluster to which read/write requests should be routed.
        """
        if allow_transactional_writes is not None:
            pulumi.set(__self__, "allow_transactional_writes", allow_transactional_writes)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)

    @property
    @pulumi.getter(name="allowTransactionalWrites")
    def allow_transactional_writes(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
        """
        return pulumi.get(self, "allow_transactional_writes")

    @allow_transactional_writes.setter
    def allow_transactional_writes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_transactional_writes", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster to which read/write requests should be routed.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)


@pulumi.input_type
class SplitArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None):
        """
        An initial split point for a newly created table.
        :param pulumi.Input[str] key: Row key to use as an initial tablet boundary.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Row key to use as an initial tablet boundary.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class StandardIsolationArgs:
    def __init__(__self__, *,
                 priority: Optional[pulumi.Input['StandardIsolationPriority']] = None):
        """
        Standard options for isolating this app profile's traffic from other use cases.
        :param pulumi.Input['StandardIsolationPriority'] priority: The priority of requests sent using this app profile.
        """
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input['StandardIsolationPriority']]:
        """
        The priority of requests sent using this app profile.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input['StandardIsolationPriority']]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class UnionArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]] = None):
        """
        A GcRule which deletes cells matching any of the given rules.
        :param pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]] rules: Delete cells which would be deleted by any element of `rules`.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]]:
        """
        Delete cells which would be deleted by any element of `rules`.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcRuleArgs']]]]):
        pulumi.set(self, "rules", value)


