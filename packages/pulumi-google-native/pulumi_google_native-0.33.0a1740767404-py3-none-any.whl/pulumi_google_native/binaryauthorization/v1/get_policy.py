# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    def __init__(__self__, description=None, gke_policy=None, name=None, update_time=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gke_policy and not isinstance(gke_policy, dict):
            raise TypeError("Expected argument 'gke_policy' to be a dict")
        pulumi.set(__self__, "gke_policy", gke_policy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. A description comment about the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gkePolicy")
    def gke_policy(self) -> 'outputs.GkePolicyResponse':
        """
        Optional. GKE platform-specific policy.
        """
        return pulumi.get(self, "gke_policy")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The relative resource name of the Binary Authorization platform policy, in the form of `projects/*/platforms/*/policies/*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the policy was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            description=self.description,
            gke_policy=self.gke_policy,
            name=self.name,
            update_time=self.update_time)


def get_policy(platform_id: Optional[str] = None,
               policy_id: Optional[str] = None,
               project: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Gets a platform policy. Returns `NOT_FOUND` if the policy doesn't exist.
    """
    __args__ = dict()
    __args__['platformId'] = platform_id
    __args__['policyId'] = policy_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:binaryauthorization/v1:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        gke_policy=pulumi.get(__ret__, 'gke_policy'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_policy)
def get_policy_output(platform_id: Optional[pulumi.Input[str]] = None,
                      policy_id: Optional[pulumi.Input[str]] = None,
                      project: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Gets a platform policy. Returns `NOT_FOUND` if the policy doesn't exist.
    """
    ...
