# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = ['RolloutArgs', 'Rollout']

@pulumi.input_type
class RolloutArgs:
    def __init__(__self__, *,
                 delivery_pipeline_id: pulumi.Input[str],
                 release_id: pulumi.Input[str],
                 rollout_id: pulumi.Input[str],
                 target_id: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 starting_phase_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rollout resource.
        :param pulumi.Input[str] rollout_id: Required. ID of the `Rollout`.
        :param pulumi.Input[str] target_id: The ID of Target to which this `Rollout` is deploying.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[str] description: Description of the `Rollout` for user purposes. Max length is 255 characters.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] name: Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
        :param pulumi.Input[str] request_id: Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[str] starting_phase_id: Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
        """
        pulumi.set(__self__, "delivery_pipeline_id", delivery_pipeline_id)
        pulumi.set(__self__, "release_id", release_id)
        pulumi.set(__self__, "rollout_id", rollout_id)
        pulumi.set(__self__, "target_id", target_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if starting_phase_id is not None:
            pulumi.set(__self__, "starting_phase_id", starting_phase_id)

    @property
    @pulumi.getter(name="deliveryPipelineId")
    def delivery_pipeline_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delivery_pipeline_id")

    @delivery_pipeline_id.setter
    def delivery_pipeline_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "delivery_pipeline_id", value)

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "release_id")

    @release_id.setter
    def release_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "release_id", value)

    @property
    @pulumi.getter(name="rolloutId")
    def rollout_id(self) -> pulumi.Input[str]:
        """
        Required. ID of the `Rollout`.
        """
        return pulumi.get(self, "rollout_id")

    @rollout_id.setter
    def rollout_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rollout_id", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[str]:
        """
        The ID of Target to which this `Rollout` is deploying.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the `Rollout` for user purposes. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="startingPhaseId")
    def starting_phase_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
        """
        return pulumi.get(self, "starting_phase_id")

    @starting_phase_id.setter
    def starting_phase_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_phase_id", value)


class Rollout(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delivery_pipeline_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rollout_id: Optional[pulumi.Input[str]] = None,
                 starting_phase_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new Rollout in a given project and location.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[str] description: Description of the `Rollout` for user purposes. Max length is 255 characters.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] name: Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
        :param pulumi.Input[str] request_id: Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[str] rollout_id: Required. ID of the `Rollout`.
        :param pulumi.Input[str] starting_phase_id: Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
        :param pulumi.Input[str] target_id: The ID of Target to which this `Rollout` is deploying.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RolloutArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new Rollout in a given project and location.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param RolloutArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RolloutArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delivery_pipeline_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rollout_id: Optional[pulumi.Input[str]] = None,
                 starting_phase_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RolloutArgs.__new__(RolloutArgs)

            __props__.__dict__["annotations"] = annotations
            if delivery_pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'delivery_pipeline_id'")
            __props__.__dict__["delivery_pipeline_id"] = delivery_pipeline_id
            __props__.__dict__["description"] = description
            __props__.__dict__["etag"] = etag
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if release_id is None and not opts.urn:
                raise TypeError("Missing required property 'release_id'")
            __props__.__dict__["release_id"] = release_id
            __props__.__dict__["request_id"] = request_id
            if rollout_id is None and not opts.urn:
                raise TypeError("Missing required property 'rollout_id'")
            __props__.__dict__["rollout_id"] = rollout_id
            __props__.__dict__["starting_phase_id"] = starting_phase_id
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["approval_state"] = None
            __props__.__dict__["approve_time"] = None
            __props__.__dict__["controller_rollout"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["deploy_end_time"] = None
            __props__.__dict__["deploy_failure_cause"] = None
            __props__.__dict__["deploy_start_time"] = None
            __props__.__dict__["deploying_build"] = None
            __props__.__dict__["enqueue_time"] = None
            __props__.__dict__["failure_reason"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["phases"] = None
            __props__.__dict__["rollback_of_rollout"] = None
            __props__.__dict__["rolled_back_by_rollouts"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["deliveryPipelineId", "location", "project", "releaseId", "rolloutId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Rollout, __self__).__init__(
            'google-native:clouddeploy/v1:Rollout',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Rollout':
        """
        Get an existing Rollout resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RolloutArgs.__new__(RolloutArgs)

        __props__.__dict__["annotations"] = None
        __props__.__dict__["approval_state"] = None
        __props__.__dict__["approve_time"] = None
        __props__.__dict__["controller_rollout"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["delivery_pipeline_id"] = None
        __props__.__dict__["deploy_end_time"] = None
        __props__.__dict__["deploy_failure_cause"] = None
        __props__.__dict__["deploy_start_time"] = None
        __props__.__dict__["deploying_build"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enqueue_time"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["failure_reason"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["phases"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["release_id"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["rollback_of_rollout"] = None
        __props__.__dict__["rolled_back_by_rollouts"] = None
        __props__.__dict__["rollout_id"] = None
        __props__.__dict__["starting_phase_id"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["target_id"] = None
        __props__.__dict__["uid"] = None
        return Rollout(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="approvalState")
    def approval_state(self) -> pulumi.Output[str]:
        """
        Approval state of the `Rollout`.
        """
        return pulumi.get(self, "approval_state")

    @property
    @pulumi.getter(name="approveTime")
    def approve_time(self) -> pulumi.Output[str]:
        """
        Time at which the `Rollout` was approved.
        """
        return pulumi.get(self, "approve_time")

    @property
    @pulumi.getter(name="controllerRollout")
    def controller_rollout(self) -> pulumi.Output[str]:
        """
        Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
        """
        return pulumi.get(self, "controller_rollout")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time at which the `Rollout` was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deliveryPipelineId")
    def delivery_pipeline_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "delivery_pipeline_id")

    @property
    @pulumi.getter(name="deployEndTime")
    def deploy_end_time(self) -> pulumi.Output[str]:
        """
        Time at which the `Rollout` finished deploying.
        """
        return pulumi.get(self, "deploy_end_time")

    @property
    @pulumi.getter(name="deployFailureCause")
    def deploy_failure_cause(self) -> pulumi.Output[str]:
        """
        The reason this rollout failed. This will always be unspecified while the rollout is in progress.
        """
        return pulumi.get(self, "deploy_failure_cause")

    @property
    @pulumi.getter(name="deployStartTime")
    def deploy_start_time(self) -> pulumi.Output[str]:
        """
        Time at which the `Rollout` started deploying.
        """
        return pulumi.get(self, "deploy_start_time")

    @property
    @pulumi.getter(name="deployingBuild")
    def deploying_build(self) -> pulumi.Output[str]:
        """
        The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
        """
        return pulumi.get(self, "deploying_build")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the `Rollout` for user purposes. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enqueueTime")
    def enqueue_time(self) -> pulumi.Output[str]:
        """
        Time at which the `Rollout` was enqueued.
        """
        return pulumi.get(self, "enqueue_time")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[str]:
        """
        Additional information about the rollout failure, if available.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.MetadataResponse']:
        """
        Metadata contains information about the rollout.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phases(self) -> pulumi.Output[Sequence['outputs.PhaseResponse']]:
        """
        The phases that represent the workflows of this `Rollout`.
        """
        return pulumi.get(self, "phases")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "release_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="rollbackOfRollout")
    def rollback_of_rollout(self) -> pulumi.Output[str]:
        """
        Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.
        """
        return pulumi.get(self, "rollback_of_rollout")

    @property
    @pulumi.getter(name="rolledBackByRollouts")
    def rolled_back_by_rollouts(self) -> pulumi.Output[Sequence[str]]:
        """
        Names of `Rollouts` that rolled back this `Rollout`.
        """
        return pulumi.get(self, "rolled_back_by_rollouts")

    @property
    @pulumi.getter(name="rolloutId")
    def rollout_id(self) -> pulumi.Output[str]:
        """
        Required. ID of the `Rollout`.
        """
        return pulumi.get(self, "rollout_id")

    @property
    @pulumi.getter(name="startingPhaseId")
    def starting_phase_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
        """
        return pulumi.get(self, "starting_phase_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Current state of the `Rollout`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[str]:
        """
        The ID of Target to which this `Rollout` is deploying.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Unique identifier of the `Rollout`.
        """
        return pulumi.get(self, "uid")

