# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudDiscoveryengineV1betaConversationContextArgs',
    'GoogleCloudDiscoveryengineV1betaConversationMessageArgs',
    'GoogleCloudDiscoveryengineV1betaDocumentContentArgs',
    'GoogleCloudDiscoveryengineV1betaReplyReferenceArgs',
    'GoogleCloudDiscoveryengineV1betaReplyArgs',
    'GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs',
    'GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs',
    'GoogleCloudDiscoveryengineV1betaTextInputArgs',
]

@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaConversationContextArgs:
    def __init__(__self__, *,
                 active_document: Optional[pulumi.Input[str]] = None,
                 context_documents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines context of the conversation
        :param pulumi.Input[str] active_document: The current active document the user opened. It contains the document resource reference.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] context_documents: The current list of documents the user is seeing. It contains the document resource references.
        """
        if active_document is not None:
            pulumi.set(__self__, "active_document", active_document)
        if context_documents is not None:
            pulumi.set(__self__, "context_documents", context_documents)

    @property
    @pulumi.getter(name="activeDocument")
    def active_document(self) -> Optional[pulumi.Input[str]]:
        """
        The current active document the user opened. It contains the document resource reference.
        """
        return pulumi.get(self, "active_document")

    @active_document.setter
    def active_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_document", value)

    @property
    @pulumi.getter(name="contextDocuments")
    def context_documents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The current list of documents the user is seeing. It contains the document resource references.
        """
        return pulumi.get(self, "context_documents")

    @context_documents.setter
    def context_documents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "context_documents", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaConversationMessageArgs:
    def __init__(__self__, *,
                 reply: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyArgs']] = None,
                 user_input: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaTextInputArgs']] = None):
        """
        Defines a conversation message.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyArgs'] reply: Search reply.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1betaTextInputArgs'] user_input: User text input.
        """
        if reply is not None:
            pulumi.set(__self__, "reply", reply)
        if user_input is not None:
            pulumi.set(__self__, "user_input", user_input)

    @property
    @pulumi.getter
    def reply(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyArgs']]:
        """
        Search reply.
        """
        return pulumi.get(self, "reply")

    @reply.setter
    def reply(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyArgs']]):
        pulumi.set(self, "reply", value)

    @property
    @pulumi.getter(name="userInput")
    def user_input(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaTextInputArgs']]:
        """
        User text input.
        """
        return pulumi.get(self, "user_input")

    @user_input.setter
    def user_input(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaTextInputArgs']]):
        pulumi.set(self, "user_input", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaDocumentContentArgs:
    def __init__(__self__, *,
                 mime_type: Optional[pulumi.Input[str]] = None,
                 raw_bytes: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Unstructured data linked to this document.
        :param pulumi.Input[str] mime_type: The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        :param pulumi.Input[str] raw_bytes: The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        :param pulumi.Input[str] uri: The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if raw_bytes is not None:
            pulumi.set(__self__, "raw_bytes", raw_bytes)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[pulumi.Input[str]]:
        """
        The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        """
        return pulumi.get(self, "mime_type")

    @mime_type.setter
    def mime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mime_type", value)

    @property
    @pulumi.getter(name="rawBytes")
    def raw_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        """
        return pulumi.get(self, "raw_bytes")

    @raw_bytes.setter
    def raw_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_bytes", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaReplyReferenceArgs:
    def __init__(__self__, *,
                 anchor_text: Optional[pulumi.Input[str]] = None,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Defines reference in reply.
        :param pulumi.Input[str] anchor_text: Anchor text.
        :param pulumi.Input[int] end: Anchor text end index.
        :param pulumi.Input[int] start: Anchor text start index.
        :param pulumi.Input[str] uri: URI link reference.
        """
        if anchor_text is not None:
            pulumi.set(__self__, "anchor_text", anchor_text)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="anchorText")
    def anchor_text(self) -> Optional[pulumi.Input[str]]:
        """
        Anchor text.
        """
        return pulumi.get(self, "anchor_text")

    @anchor_text.setter
    def anchor_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anchor_text", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        Anchor text end index.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        """
        Anchor text start index.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI link reference.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaReplyArgs:
    def __init__(__self__, *,
                 references: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyReferenceArgs']]]] = None,
                 reply: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs']] = None):
        """
        Defines a reply message to user.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyReferenceArgs']]] references: References in the reply.
        :param pulumi.Input[str] reply: DEPRECATED: use `summary` instead. Text reply.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs'] summary: Summary based on search results.
        """
        if references is not None:
            pulumi.set(__self__, "references", references)
        if reply is not None:
            warnings.warn("""DEPRECATED: use `summary` instead. Text reply.""", DeprecationWarning)
            pulumi.log.warn("""reply is deprecated: DEPRECATED: use `summary` instead. Text reply.""")
        if reply is not None:
            pulumi.set(__self__, "reply", reply)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyReferenceArgs']]]]:
        """
        References in the reply.
        """
        return pulumi.get(self, "references")

    @references.setter
    def references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaReplyReferenceArgs']]]]):
        pulumi.set(self, "references", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""DEPRECATED: use `summary` instead. Text reply.""")
    def reply(self) -> Optional[pulumi.Input[str]]:
        """
        DEPRECATED: use `summary` instead. Text reply.
        """
        return pulumi.get(self, "reply")

    @reply.setter
    def reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs']]:
        """
        Summary based on search results.
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs']]):
        pulumi.set(self, "summary", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scores: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        Safety Attribute categories and their associated confidence scores.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] categories: The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] scores: The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if scores is not None:
            pulumi.set(__self__, "scores", scores)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def scores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        return pulumi.get(self, "scores")

    @scores.setter
    def scores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "scores", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaSearchResponseSummaryArgs:
    def __init__(__self__, *,
                 safety_attributes: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs']] = None,
                 summary_skipped_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySummarySkippedReasonsItem']]]] = None,
                 summary_text: Optional[pulumi.Input[str]] = None):
        """
        Summary of the top N search result specified by the summary spec.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs'] safety_attributes: A collection of Safety Attribute categories and their associated confidence scores.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySummarySkippedReasonsItem']]] summary_skipped_reasons: Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        :param pulumi.Input[str] summary_text: The summary content.
        """
        if safety_attributes is not None:
            pulumi.set(__self__, "safety_attributes", safety_attributes)
        if summary_skipped_reasons is not None:
            pulumi.set(__self__, "summary_skipped_reasons", summary_skipped_reasons)
        if summary_text is not None:
            pulumi.set(__self__, "summary_text", summary_text)

    @property
    @pulumi.getter(name="safetyAttributes")
    def safety_attributes(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs']]:
        """
        A collection of Safety Attribute categories and their associated confidence scores.
        """
        return pulumi.get(self, "safety_attributes")

    @safety_attributes.setter
    def safety_attributes(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySafetyAttributesArgs']]):
        pulumi.set(self, "safety_attributes", value)

    @property
    @pulumi.getter(name="summarySkippedReasons")
    def summary_skipped_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySummarySkippedReasonsItem']]]]:
        """
        Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        """
        return pulumi.get(self, "summary_skipped_reasons")

    @summary_skipped_reasons.setter
    def summary_skipped_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1betaSearchResponseSummarySummarySkippedReasonsItem']]]]):
        pulumi.set(self, "summary_skipped_reasons", value)

    @property
    @pulumi.getter(name="summaryText")
    def summary_text(self) -> Optional[pulumi.Input[str]]:
        """
        The summary content.
        """
        return pulumi.get(self, "summary_text")

    @summary_text.setter
    def summary_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_text", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1betaTextInputArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationContextArgs']] = None,
                 input: Optional[pulumi.Input[str]] = None):
        """
        Defines text input.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationContextArgs'] context: Conversation context of the input.
        :param pulumi.Input[str] input: Text input.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationContextArgs']]:
        """
        Conversation context of the input.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1betaConversationContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[str]]:
        """
        Text input.
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input", value)


