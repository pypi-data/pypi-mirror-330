# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetConversationResult',
    'AwaitableGetConversationResult',
    'get_conversation',
    'get_conversation_output',
]

@pulumi.output_type
class GetConversationResult:
    def __init__(__self__, end_time=None, messages=None, name=None, start_time=None, state=None, user_pseudo_id=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_pseudo_id and not isinstance(user_pseudo_id, str):
            raise TypeError("Expected argument 'user_pseudo_id' to be a str")
        pulumi.set(__self__, "user_pseudo_id", user_pseudo_id)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The time the conversation finished.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.GoogleCloudDiscoveryengineV1betaConversationMessageResponse']:
        """
        Conversation messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time the conversation started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the Conversation.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userPseudoId")
    def user_pseudo_id(self) -> str:
        """
        A unique identifier for tracking users.
        """
        return pulumi.get(self, "user_pseudo_id")


class AwaitableGetConversationResult(GetConversationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConversationResult(
            end_time=self.end_time,
            messages=self.messages,
            name=self.name,
            start_time=self.start_time,
            state=self.state,
            user_pseudo_id=self.user_pseudo_id)


def get_conversation(collection_id: Optional[str] = None,
                     conversation_id: Optional[str] = None,
                     data_store_id: Optional[str] = None,
                     location: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConversationResult:
    """
    Gets a Conversation.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['conversationId'] = conversation_id
    __args__['dataStoreId'] = data_store_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:discoveryengine/v1beta:getConversation', __args__, opts=opts, typ=GetConversationResult).value

    return AwaitableGetConversationResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        messages=pulumi.get(__ret__, 'messages'),
        name=pulumi.get(__ret__, 'name'),
        start_time=pulumi.get(__ret__, 'start_time'),
        state=pulumi.get(__ret__, 'state'),
        user_pseudo_id=pulumi.get(__ret__, 'user_pseudo_id'))


@_utilities.lift_output_func(get_conversation)
def get_conversation_output(collection_id: Optional[pulumi.Input[str]] = None,
                            conversation_id: Optional[pulumi.Input[str]] = None,
                            data_store_id: Optional[pulumi.Input[str]] = None,
                            location: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConversationResult]:
    """
    Gets a Conversation.
    """
    ...
