# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudDiscoveryengineV1alphaConversationContextArgs',
    'GoogleCloudDiscoveryengineV1alphaConversationMessageArgs',
    'GoogleCloudDiscoveryengineV1alphaDocumentContentArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineCommonConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigArgs',
    'GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs',
    'GoogleCloudDiscoveryengineV1alphaReplyArgs',
    'GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs',
    'GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs',
    'GoogleCloudDiscoveryengineV1alphaTextInputArgs',
]

@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaConversationContextArgs:
    def __init__(__self__, *,
                 active_document: Optional[pulumi.Input[str]] = None,
                 context_documents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines context of the conversation
        :param pulumi.Input[str] active_document: The current active document the user opened. It contains the document resource reference.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] context_documents: The current list of documents the user is seeing. It contains the document resource references.
        """
        if active_document is not None:
            pulumi.set(__self__, "active_document", active_document)
        if context_documents is not None:
            pulumi.set(__self__, "context_documents", context_documents)

    @property
    @pulumi.getter(name="activeDocument")
    def active_document(self) -> Optional[pulumi.Input[str]]:
        """
        The current active document the user opened. It contains the document resource reference.
        """
        return pulumi.get(self, "active_document")

    @active_document.setter
    def active_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_document", value)

    @property
    @pulumi.getter(name="contextDocuments")
    def context_documents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The current list of documents the user is seeing. It contains the document resource references.
        """
        return pulumi.get(self, "context_documents")

    @context_documents.setter
    def context_documents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "context_documents", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaConversationMessageArgs:
    def __init__(__self__, *,
                 reply: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyArgs']] = None,
                 user_input: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaTextInputArgs']] = None):
        """
        Defines a conversation message.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyArgs'] reply: Search reply.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaTextInputArgs'] user_input: User text input.
        """
        if reply is not None:
            pulumi.set(__self__, "reply", reply)
        if user_input is not None:
            pulumi.set(__self__, "user_input", user_input)

    @property
    @pulumi.getter
    def reply(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyArgs']]:
        """
        Search reply.
        """
        return pulumi.get(self, "reply")

    @reply.setter
    def reply(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyArgs']]):
        pulumi.set(self, "reply", value)

    @property
    @pulumi.getter(name="userInput")
    def user_input(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaTextInputArgs']]:
        """
        User text input.
        """
        return pulumi.get(self, "user_input")

    @user_input.setter
    def user_input(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaTextInputArgs']]):
        pulumi.set(self, "user_input", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaDocumentContentArgs:
    def __init__(__self__, *,
                 mime_type: Optional[pulumi.Input[str]] = None,
                 raw_bytes: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Unstructured data linked to this document.
        :param pulumi.Input[str] mime_type: The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        :param pulumi.Input[str] raw_bytes: The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        :param pulumi.Input[str] uri: The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if raw_bytes is not None:
            pulumi.set(__self__, "raw_bytes", raw_bytes)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[pulumi.Input[str]]:
        """
        The MIME type of the content. Supported types: * `application/pdf` (PDF, only native PDFs are supported for now) * `text/html` (HTML) * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX) * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX) * `text/plain` (TXT) See https://www.iana.org/assignments/media-types/media-types.xhtml.
        """
        return pulumi.get(self, "mime_type")

    @mime_type.setter
    def mime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mime_type", value)

    @property
    @pulumi.getter(name="rawBytes")
    def raw_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        The content represented as a stream of bytes. The maximum length is 1,000,000 bytes (1 MB / ~0.95 MiB). Note: As with all `bytes` fields, this field is represented as pure binary in Protocol Buffers and base64-encoded string in JSON. For example, `abc123!?$*&()'-=@~` should be represented as `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See https://developers.google.com/protocol-buffers/docs/proto3#json.
        """
        return pulumi.get(self, "raw_bytes")

    @raw_bytes.setter
    def raw_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_bytes", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the content. Only Cloud Storage URIs (e.g. `gs://bucket-name/path/to/file`) are supported. The maximum file size is 100 MB.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs:
    def __init__(__self__, *,
                 default_language_code: pulumi.Input[str],
                 time_zone: pulumi.Input[str],
                 business: Optional[pulumi.Input[str]] = None):
        """
        Configurations for generating a Dialogflow agent. Note that these configurations are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation.
        :param pulumi.Input[str] default_language_code: The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.
        :param pulumi.Input[str] time_zone: The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.
        :param pulumi.Input[str] business: Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.
        """
        pulumi.set(__self__, "default_language_code", default_language_code)
        pulumi.set(__self__, "time_zone", time_zone)
        if business is not None:
            pulumi.set(__self__, "business", business)

    @property
    @pulumi.getter(name="defaultLanguageCode")
    def default_language_code(self) -> pulumi.Input[str]:
        """
        The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.
        """
        return pulumi.get(self, "default_language_code")

    @default_language_code.setter
    def default_language_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_language_code", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        """
        The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter
    def business(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.
        """
        return pulumi.get(self, "business")

    @business.setter
    def business(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "business", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigArgs:
    def __init__(__self__, *,
                 agent_creation_config: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs']] = None,
                 dialogflow_agent_to_link: Optional[pulumi.Input[str]] = None):
        """
        Configurations for a Chat Engine.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs'] agent_creation_config: The configurationt generate the Dialogflow agent that is associated to this Engine. Note that these configurations are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation.
        :param pulumi.Input[str] dialogflow_agent_to_link: The resource name of an exist Dialogflow agent to link to this Chat Engine. Customers can either provide `agent_creation_config` to create agent or provide an agent name that links the agent with the Chat engine. Format: `projects//locations//agents/`. Note that the `dialogflow_agent_to_link` are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation. Please use chat_engine_metadata.dialogflow_agent for actual agent association after Engine is created.
        """
        if agent_creation_config is not None:
            pulumi.set(__self__, "agent_creation_config", agent_creation_config)
        if dialogflow_agent_to_link is not None:
            pulumi.set(__self__, "dialogflow_agent_to_link", dialogflow_agent_to_link)

    @property
    @pulumi.getter(name="agentCreationConfig")
    def agent_creation_config(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs']]:
        """
        The configurationt generate the Dialogflow agent that is associated to this Engine. Note that these configurations are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation.
        """
        return pulumi.get(self, "agent_creation_config")

    @agent_creation_config.setter
    def agent_creation_config(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigAgentCreationConfigArgs']]):
        pulumi.set(self, "agent_creation_config", value)

    @property
    @pulumi.getter(name="dialogflowAgentToLink")
    def dialogflow_agent_to_link(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of an exist Dialogflow agent to link to this Chat Engine. Customers can either provide `agent_creation_config` to create agent or provide an agent name that links the agent with the Chat engine. Format: `projects//locations//agents/`. Note that the `dialogflow_agent_to_link` are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation. Please use chat_engine_metadata.dialogflow_agent for actual agent association after Engine is created.
        """
        return pulumi.get(self, "dialogflow_agent_to_link")

    @dialogflow_agent_to_link.setter
    def dialogflow_agent_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dialogflow_agent_to_link", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineCommonConfigArgs:
    def __init__(__self__, *,
                 company_name: Optional[pulumi.Input[str]] = None):
        """
        Common configurations for an Engine.
        :param pulumi.Input[str] company_name: The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.
        """
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs:
    def __init__(__self__, *,
                 target_field: pulumi.Input[str],
                 target_field_value_float: pulumi.Input[float]):
        """
        Custom threshold for `cvr` optimization_objective.
        :param pulumi.Input[str] target_field: The name of the field to target. Currently supported values: `watch-percentage`, `watch-time`.
        :param pulumi.Input[float] target_field_value_float: The threshold to be applied to the target (e.g., 0.5).
        """
        pulumi.set(__self__, "target_field", target_field)
        pulumi.set(__self__, "target_field_value_float", target_field_value_float)

    @property
    @pulumi.getter(name="targetField")
    def target_field(self) -> pulumi.Input[str]:
        """
        The name of the field to target. Currently supported values: `watch-percentage`, `watch-time`.
        """
        return pulumi.get(self, "target_field")

    @target_field.setter
    def target_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_field", value)

    @property
    @pulumi.getter(name="targetFieldValueFloat")
    def target_field_value_float(self) -> pulumi.Input[float]:
        """
        The threshold to be applied to the target (e.g., 0.5).
        """
        return pulumi.get(self, "target_field_value_float")

    @target_field_value_float.setter
    def target_field_value_float(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_field_value_float", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 optimization_objective: Optional[pulumi.Input[str]] = None,
                 optimization_objective_config: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs']] = None,
                 training_state: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigTrainingState']] = None):
        """
        Additional config specs for a Media Recommendation engine.
        :param pulumi.Input[str] type: The type of engine e.g. `recommended-for-you`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `recommended-for-you`, `others-you-may-like`, `more-like-this`, `most-popular-items`.
        :param pulumi.Input[str] optimization_objective: The optimization objective e.g. `cvr`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `ctr`, `cvr`. If not specified, we choose default based on engine type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr`
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs'] optimization_objective_config: Name and value of the custom threshold for cvr optimization_objective. For target_field `watch-time`, target_field_value must be an integer value indicating the media progress time in seconds between (0, 86400] (excludes 0, includes 86400) (e.g., 90). For target_field `watch-percentage`, the target_field_value must be a valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigTrainingState'] training_state: The training state that the engine is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train engine in order to control cost. If not specified: the default value for `CreateEngine` method is `TRAINING`. The default value for `UpdateEngine` method is to keep the state the same as before.
        """
        pulumi.set(__self__, "type", type)
        if optimization_objective is not None:
            pulumi.set(__self__, "optimization_objective", optimization_objective)
        if optimization_objective_config is not None:
            pulumi.set(__self__, "optimization_objective_config", optimization_objective_config)
        if training_state is not None:
            pulumi.set(__self__, "training_state", training_state)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of engine e.g. `recommended-for-you`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `recommended-for-you`, `others-you-may-like`, `more-like-this`, `most-popular-items`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="optimizationObjective")
    def optimization_objective(self) -> Optional[pulumi.Input[str]]:
        """
        The optimization objective e.g. `cvr`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `ctr`, `cvr`. If not specified, we choose default based on engine type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr`
        """
        return pulumi.get(self, "optimization_objective")

    @optimization_objective.setter
    def optimization_objective(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimization_objective", value)

    @property
    @pulumi.getter(name="optimizationObjectiveConfig")
    def optimization_objective_config(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs']]:
        """
        Name and value of the custom threshold for cvr optimization_objective. For target_field `watch-time`, target_field_value must be an integer value indicating the media progress time in seconds between (0, 86400] (excludes 0, includes 86400) (e.g., 90). For target_field `watch-percentage`, the target_field_value must be a valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g., 0.5).
        """
        return pulumi.get(self, "optimization_objective_config")

    @optimization_objective_config.setter
    def optimization_objective_config(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfigArgs']]):
        pulumi.set(self, "optimization_objective_config", value)

    @property
    @pulumi.getter(name="trainingState")
    def training_state(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigTrainingState']]:
        """
        The training state that the engine is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train engine in order to control cost. If not specified: the default value for `CreateEngine` method is `TRAINING`. The default value for `UpdateEngine` method is to keep the state the same as before.
        """
        return pulumi.get(self, "training_state")

    @training_state.setter
    def training_state(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigTrainingState']]):
        pulumi.set(self, "training_state", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigArgs:
    def __init__(__self__, *,
                 search_add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchAddOnsItem']]]] = None,
                 search_tier: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchTier']] = None):
        """
        Configurations for a Search Engine.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchAddOnsItem']]] search_add_ons: The add-on that this search engine enables.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchTier'] search_tier: The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.
        """
        if search_add_ons is not None:
            pulumi.set(__self__, "search_add_ons", search_add_ons)
        if search_tier is not None:
            pulumi.set(__self__, "search_tier", search_tier)

    @property
    @pulumi.getter(name="searchAddOns")
    def search_add_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchAddOnsItem']]]]:
        """
        The add-on that this search engine enables.
        """
        return pulumi.get(self, "search_add_ons")

    @search_add_ons.setter
    def search_add_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchAddOnsItem']]]]):
        pulumi.set(self, "search_add_ons", value)

    @property
    @pulumi.getter(name="searchTier")
    def search_tier(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchTier']]:
        """
        The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.
        """
        return pulumi.get(self, "search_tier")

    @search_tier.setter
    def search_tier(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigSearchTier']]):
        pulumi.set(self, "search_tier", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigArgs:
    def __init__(__self__):
        """
        Additional config specs for a `similar-items` engine.
        """
        pass


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs:
    def __init__(__self__, *,
                 anchor_text: Optional[pulumi.Input[str]] = None,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Defines reference in reply.
        :param pulumi.Input[str] anchor_text: Anchor text.
        :param pulumi.Input[int] end: Anchor text end index.
        :param pulumi.Input[int] start: Anchor text start index.
        :param pulumi.Input[str] uri: URI link reference.
        """
        if anchor_text is not None:
            pulumi.set(__self__, "anchor_text", anchor_text)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="anchorText")
    def anchor_text(self) -> Optional[pulumi.Input[str]]:
        """
        Anchor text.
        """
        return pulumi.get(self, "anchor_text")

    @anchor_text.setter
    def anchor_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anchor_text", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        Anchor text end index.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        """
        Anchor text start index.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI link reference.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaReplyArgs:
    def __init__(__self__, *,
                 references: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs']]]] = None,
                 reply: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs']] = None):
        """
        Defines a reply message to user.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs']]] references: References in the reply.
        :param pulumi.Input[str] reply: DEPRECATED: use `summary` instead. Text reply.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs'] summary: Summary based on search results.
        """
        if references is not None:
            pulumi.set(__self__, "references", references)
        if reply is not None:
            warnings.warn("""DEPRECATED: use `summary` instead. Text reply.""", DeprecationWarning)
            pulumi.log.warn("""reply is deprecated: DEPRECATED: use `summary` instead. Text reply.""")
        if reply is not None:
            pulumi.set(__self__, "reply", reply)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs']]]]:
        """
        References in the reply.
        """
        return pulumi.get(self, "references")

    @references.setter
    def references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaReplyReferenceArgs']]]]):
        pulumi.set(self, "references", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""DEPRECATED: use `summary` instead. Text reply.""")
    def reply(self) -> Optional[pulumi.Input[str]]:
        """
        DEPRECATED: use `summary` instead. Text reply.
        """
        return pulumi.get(self, "reply")

    @reply.setter
    def reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs']]:
        """
        Summary based on search results.
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs']]):
        pulumi.set(self, "summary", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scores: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        Safety Attribute categories and their associated confidence scores.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] categories: The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] scores: The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if scores is not None:
            pulumi.set(__self__, "scores", scores)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def scores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The confidence scores of the each category, higher value means higher confidence. Order matches the Categories.
        """
        return pulumi.get(self, "scores")

    @scores.setter
    def scores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "scores", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryArgs:
    def __init__(__self__, *,
                 safety_attributes: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs']] = None,
                 summary_skipped_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummarySkippedReasonsItem']]]] = None,
                 summary_text: Optional[pulumi.Input[str]] = None):
        """
        Summary of the top N search result specified by the summary spec.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs'] safety_attributes: A collection of Safety Attribute categories and their associated confidence scores.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummarySkippedReasonsItem']]] summary_skipped_reasons: Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        :param pulumi.Input[str] summary_text: The summary content.
        """
        if safety_attributes is not None:
            pulumi.set(__self__, "safety_attributes", safety_attributes)
        if summary_skipped_reasons is not None:
            pulumi.set(__self__, "summary_skipped_reasons", summary_skipped_reasons)
        if summary_text is not None:
            pulumi.set(__self__, "summary_text", summary_text)

    @property
    @pulumi.getter(name="safetyAttributes")
    def safety_attributes(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs']]:
        """
        A collection of Safety Attribute categories and their associated confidence scores.
        """
        return pulumi.get(self, "safety_attributes")

    @safety_attributes.setter
    def safety_attributes(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributesArgs']]):
        pulumi.set(self, "safety_attributes", value)

    @property
    @pulumi.getter(name="summarySkippedReasons")
    def summary_skipped_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummarySkippedReasonsItem']]]]:
        """
        Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.
        """
        return pulumi.get(self, "summary_skipped_reasons")

    @summary_skipped_reasons.setter
    def summary_skipped_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummarySkippedReasonsItem']]]]):
        pulumi.set(self, "summary_skipped_reasons", value)

    @property
    @pulumi.getter(name="summaryText")
    def summary_text(self) -> Optional[pulumi.Input[str]]:
        """
        The summary content.
        """
        return pulumi.get(self, "summary_text")

    @summary_text.setter
    def summary_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_text", value)


@pulumi.input_type
class GoogleCloudDiscoveryengineV1alphaTextInputArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaConversationContextArgs']] = None,
                 input: Optional[pulumi.Input[str]] = None):
        """
        Defines text input.
        :param pulumi.Input['GoogleCloudDiscoveryengineV1alphaConversationContextArgs'] context: Conversation context of the input.
        :param pulumi.Input[str] input: Text input.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if input is not None:
            pulumi.set(__self__, "input", input)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaConversationContextArgs']]:
        """
        Conversation context of the input.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['GoogleCloudDiscoveryengineV1alphaConversationContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[str]]:
        """
        Text input.
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input", value)


