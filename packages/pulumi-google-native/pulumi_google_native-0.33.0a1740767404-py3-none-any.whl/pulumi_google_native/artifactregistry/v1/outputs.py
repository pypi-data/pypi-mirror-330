# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AptRepositoryResponse',
    'BindingResponse',
    'CleanupPolicyConditionResponse',
    'CleanupPolicyMostRecentVersionsResponse',
    'CleanupPolicyResponse',
    'DockerRepositoryConfigResponse',
    'DockerRepositoryResponse',
    'ExprResponse',
    'GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse',
    'GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse',
    'MavenRepositoryConfigResponse',
    'MavenRepositoryResponse',
    'NpmRepositoryResponse',
    'PythonRepositoryResponse',
    'RemoteRepositoryConfigResponse',
    'UpstreamCredentialsResponse',
    'UpstreamPolicyResponse',
    'UsernamePasswordCredentialsResponse',
    'VirtualRepositoryConfigResponse',
    'YumRepositoryResponse',
]

@pulumi.output_type
class AptRepositoryResponse(dict):
    """
    Configuration for an Apt remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AptRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AptRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AptRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: 'outputs.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse'):
        """
        Configuration for an Apt remote repository.
        :param 'GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse' public_repository: One of the publicly available Apt repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> 'outputs.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse':
        """
        One of the publicly available Apt repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class CleanupPolicyConditionResponse(dict):
    """
    CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newerThan":
            suggest = "newer_than"
        elif key == "olderThan":
            suggest = "older_than"
        elif key == "packageNamePrefixes":
            suggest = "package_name_prefixes"
        elif key == "tagPrefixes":
            suggest = "tag_prefixes"
        elif key == "tagState":
            suggest = "tag_state"
        elif key == "versionAge":
            suggest = "version_age"
        elif key == "versionNamePrefixes":
            suggest = "version_name_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CleanupPolicyConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CleanupPolicyConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CleanupPolicyConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 newer_than: str,
                 older_than: str,
                 package_name_prefixes: Sequence[str],
                 tag_prefixes: Sequence[str],
                 tag_state: str,
                 version_age: str,
                 version_name_prefixes: Sequence[str]):
        """
        CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
        :param str newer_than: Match versions newer than a duration.
        :param str older_than: Match versions older than a duration.
        :param Sequence[str] package_name_prefixes: Match versions by package prefix. Applied on any prefix match.
        :param Sequence[str] tag_prefixes: Match versions by tag prefix. Applied on any prefix match.
        :param str tag_state: Match versions by tag status.
        :param str version_age: DEPRECATED: Use older_than.
        :param Sequence[str] version_name_prefixes: Match versions by version name prefix. Applied on any prefix match.
        """
        pulumi.set(__self__, "newer_than", newer_than)
        pulumi.set(__self__, "older_than", older_than)
        pulumi.set(__self__, "package_name_prefixes", package_name_prefixes)
        pulumi.set(__self__, "tag_prefixes", tag_prefixes)
        pulumi.set(__self__, "tag_state", tag_state)
        pulumi.set(__self__, "version_age", version_age)
        pulumi.set(__self__, "version_name_prefixes", version_name_prefixes)

    @property
    @pulumi.getter(name="newerThan")
    def newer_than(self) -> str:
        """
        Match versions newer than a duration.
        """
        return pulumi.get(self, "newer_than")

    @property
    @pulumi.getter(name="olderThan")
    def older_than(self) -> str:
        """
        Match versions older than a duration.
        """
        return pulumi.get(self, "older_than")

    @property
    @pulumi.getter(name="packageNamePrefixes")
    def package_name_prefixes(self) -> Sequence[str]:
        """
        Match versions by package prefix. Applied on any prefix match.
        """
        return pulumi.get(self, "package_name_prefixes")

    @property
    @pulumi.getter(name="tagPrefixes")
    def tag_prefixes(self) -> Sequence[str]:
        """
        Match versions by tag prefix. Applied on any prefix match.
        """
        return pulumi.get(self, "tag_prefixes")

    @property
    @pulumi.getter(name="tagState")
    def tag_state(self) -> str:
        """
        Match versions by tag status.
        """
        return pulumi.get(self, "tag_state")

    @property
    @pulumi.getter(name="versionAge")
    @_utilities.deprecated("""DEPRECATED: Use older_than.""")
    def version_age(self) -> str:
        """
        DEPRECATED: Use older_than.
        """
        return pulumi.get(self, "version_age")

    @property
    @pulumi.getter(name="versionNamePrefixes")
    def version_name_prefixes(self) -> Sequence[str]:
        """
        Match versions by version name prefix. Applied on any prefix match.
        """
        return pulumi.get(self, "version_name_prefixes")


@pulumi.output_type
class CleanupPolicyMostRecentVersionsResponse(dict):
    """
    CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepCount":
            suggest = "keep_count"
        elif key == "packageNamePrefixes":
            suggest = "package_name_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CleanupPolicyMostRecentVersionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CleanupPolicyMostRecentVersionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CleanupPolicyMostRecentVersionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_count: int,
                 package_name_prefixes: Sequence[str]):
        """
        CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.
        :param int keep_count: Minimum number of versions to keep.
        :param Sequence[str] package_name_prefixes: List of package name prefixes that will apply this rule.
        """
        pulumi.set(__self__, "keep_count", keep_count)
        pulumi.set(__self__, "package_name_prefixes", package_name_prefixes)

    @property
    @pulumi.getter(name="keepCount")
    def keep_count(self) -> int:
        """
        Minimum number of versions to keep.
        """
        return pulumi.get(self, "keep_count")

    @property
    @pulumi.getter(name="packageNamePrefixes")
    def package_name_prefixes(self) -> Sequence[str]:
        """
        List of package name prefixes that will apply this rule.
        """
        return pulumi.get(self, "package_name_prefixes")


@pulumi.output_type
class CleanupPolicyResponse(dict):
    """
    Artifact policy configuration for repository cleanup policies.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mostRecentVersions":
            suggest = "most_recent_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CleanupPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CleanupPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CleanupPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 condition: 'outputs.CleanupPolicyConditionResponse',
                 most_recent_versions: 'outputs.CleanupPolicyMostRecentVersionsResponse'):
        """
        Artifact policy configuration for repository cleanup policies.
        :param str action: Policy action.
        :param 'CleanupPolicyConditionResponse' condition: Policy condition for matching versions.
        :param 'CleanupPolicyMostRecentVersionsResponse' most_recent_versions: Policy condition for retaining a minimum number of versions. May only be specified with a Keep action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "most_recent_versions", most_recent_versions)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.CleanupPolicyConditionResponse':
        """
        Policy condition for matching versions.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="mostRecentVersions")
    def most_recent_versions(self) -> 'outputs.CleanupPolicyMostRecentVersionsResponse':
        """
        Policy condition for retaining a minimum number of versions. May only be specified with a Keep action.
        """
        return pulumi.get(self, "most_recent_versions")


@pulumi.output_type
class DockerRepositoryConfigResponse(dict):
    """
    DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "immutableTags":
            suggest = "immutable_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DockerRepositoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DockerRepositoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DockerRepositoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 immutable_tags: bool):
        """
        DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
        :param bool immutable_tags: The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
        """
        pulumi.set(__self__, "immutable_tags", immutable_tags)

    @property
    @pulumi.getter(name="immutableTags")
    def immutable_tags(self) -> bool:
        """
        The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
        """
        return pulumi.get(self, "immutable_tags")


@pulumi.output_type
class DockerRepositoryResponse(dict):
    """
    Configuration for a Docker remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DockerRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DockerRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DockerRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: str):
        """
        Configuration for a Docker remote repository.
        :param str public_repository: One of the publicly available Docker repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> str:
        """
        One of the publicly available Docker repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse(dict):
    """
    Publicly available Apt repositories constructed from a common repository base and a custom repository path.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryBase":
            suggest = "repository_base"
        elif key == "repositoryPath":
            suggest = "repository_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_base: str,
                 repository_path: str):
        """
        Publicly available Apt repositories constructed from a common repository base and a custom repository path.
        :param str repository_base: A common public repository base for Apt.
        :param str repository_path: A custom field to define a path to a specific repository from the base.
        """
        pulumi.set(__self__, "repository_base", repository_base)
        pulumi.set(__self__, "repository_path", repository_path)

    @property
    @pulumi.getter(name="repositoryBase")
    def repository_base(self) -> str:
        """
        A common public repository base for Apt.
        """
        return pulumi.get(self, "repository_base")

    @property
    @pulumi.getter(name="repositoryPath")
    def repository_path(self) -> str:
        """
        A custom field to define a path to a specific repository from the base.
        """
        return pulumi.get(self, "repository_path")


@pulumi.output_type
class GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse(dict):
    """
    Publicly available Yum repositories constructed from a common repository base and a custom repository path.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryBase":
            suggest = "repository_base"
        elif key == "repositoryPath":
            suggest = "repository_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_base: str,
                 repository_path: str):
        """
        Publicly available Yum repositories constructed from a common repository base and a custom repository path.
        :param str repository_base: A common public repository base for Yum.
        :param str repository_path: A custom field to define a path to a specific repository from the base.
        """
        pulumi.set(__self__, "repository_base", repository_base)
        pulumi.set(__self__, "repository_path", repository_path)

    @property
    @pulumi.getter(name="repositoryBase")
    def repository_base(self) -> str:
        """
        A common public repository base for Yum.
        """
        return pulumi.get(self, "repository_base")

    @property
    @pulumi.getter(name="repositoryPath")
    def repository_path(self) -> str:
        """
        A custom field to define a path to a specific repository from the base.
        """
        return pulumi.get(self, "repository_path")


@pulumi.output_type
class MavenRepositoryConfigResponse(dict):
    """
    MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSnapshotOverwrites":
            suggest = "allow_snapshot_overwrites"
        elif key == "versionPolicy":
            suggest = "version_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MavenRepositoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MavenRepositoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MavenRepositoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_snapshot_overwrites: bool,
                 version_policy: str):
        """
        MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
        :param bool allow_snapshot_overwrites: The repository with this flag will allow publishing the same snapshot versions.
        :param str version_policy: Version policy defines the versions that the registry will accept.
        """
        pulumi.set(__self__, "allow_snapshot_overwrites", allow_snapshot_overwrites)
        pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="allowSnapshotOverwrites")
    def allow_snapshot_overwrites(self) -> bool:
        """
        The repository with this flag will allow publishing the same snapshot versions.
        """
        return pulumi.get(self, "allow_snapshot_overwrites")

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> str:
        """
        Version policy defines the versions that the registry will accept.
        """
        return pulumi.get(self, "version_policy")


@pulumi.output_type
class MavenRepositoryResponse(dict):
    """
    Configuration for a Maven remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MavenRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MavenRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MavenRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: str):
        """
        Configuration for a Maven remote repository.
        :param str public_repository: One of the publicly available Maven repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> str:
        """
        One of the publicly available Maven repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


@pulumi.output_type
class NpmRepositoryResponse(dict):
    """
    Configuration for a Npm remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NpmRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NpmRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NpmRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: str):
        """
        Configuration for a Npm remote repository.
        :param str public_repository: One of the publicly available Npm repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> str:
        """
        One of the publicly available Npm repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


@pulumi.output_type
class PythonRepositoryResponse(dict):
    """
    Configuration for a Python remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PythonRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PythonRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PythonRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: str):
        """
        Configuration for a Python remote repository.
        :param str public_repository: One of the publicly available Python repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> str:
        """
        One of the publicly available Python repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


@pulumi.output_type
class RemoteRepositoryConfigResponse(dict):
    """
    Remote repository configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aptRepository":
            suggest = "apt_repository"
        elif key == "dockerRepository":
            suggest = "docker_repository"
        elif key == "mavenRepository":
            suggest = "maven_repository"
        elif key == "npmRepository":
            suggest = "npm_repository"
        elif key == "pythonRepository":
            suggest = "python_repository"
        elif key == "upstreamCredentials":
            suggest = "upstream_credentials"
        elif key == "yumRepository":
            suggest = "yum_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemoteRepositoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemoteRepositoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemoteRepositoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apt_repository: 'outputs.AptRepositoryResponse',
                 description: str,
                 docker_repository: 'outputs.DockerRepositoryResponse',
                 maven_repository: 'outputs.MavenRepositoryResponse',
                 npm_repository: 'outputs.NpmRepositoryResponse',
                 python_repository: 'outputs.PythonRepositoryResponse',
                 upstream_credentials: 'outputs.UpstreamCredentialsResponse',
                 yum_repository: 'outputs.YumRepositoryResponse'):
        """
        Remote repository configuration.
        :param 'AptRepositoryResponse' apt_repository: Specific settings for an Apt remote repository.
        :param str description: The description of the remote source.
        :param 'DockerRepositoryResponse' docker_repository: Specific settings for a Docker remote repository.
        :param 'MavenRepositoryResponse' maven_repository: Specific settings for a Maven remote repository.
        :param 'NpmRepositoryResponse' npm_repository: Specific settings for an Npm remote repository.
        :param 'PythonRepositoryResponse' python_repository: Specific settings for a Python remote repository.
        :param 'UpstreamCredentialsResponse' upstream_credentials: Optional. The credentials used to access the remote repository.
        :param 'YumRepositoryResponse' yum_repository: Specific settings for a Yum remote repository.
        """
        pulumi.set(__self__, "apt_repository", apt_repository)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "docker_repository", docker_repository)
        pulumi.set(__self__, "maven_repository", maven_repository)
        pulumi.set(__self__, "npm_repository", npm_repository)
        pulumi.set(__self__, "python_repository", python_repository)
        pulumi.set(__self__, "upstream_credentials", upstream_credentials)
        pulumi.set(__self__, "yum_repository", yum_repository)

    @property
    @pulumi.getter(name="aptRepository")
    def apt_repository(self) -> 'outputs.AptRepositoryResponse':
        """
        Specific settings for an Apt remote repository.
        """
        return pulumi.get(self, "apt_repository")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the remote source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dockerRepository")
    def docker_repository(self) -> 'outputs.DockerRepositoryResponse':
        """
        Specific settings for a Docker remote repository.
        """
        return pulumi.get(self, "docker_repository")

    @property
    @pulumi.getter(name="mavenRepository")
    def maven_repository(self) -> 'outputs.MavenRepositoryResponse':
        """
        Specific settings for a Maven remote repository.
        """
        return pulumi.get(self, "maven_repository")

    @property
    @pulumi.getter(name="npmRepository")
    def npm_repository(self) -> 'outputs.NpmRepositoryResponse':
        """
        Specific settings for an Npm remote repository.
        """
        return pulumi.get(self, "npm_repository")

    @property
    @pulumi.getter(name="pythonRepository")
    def python_repository(self) -> 'outputs.PythonRepositoryResponse':
        """
        Specific settings for a Python remote repository.
        """
        return pulumi.get(self, "python_repository")

    @property
    @pulumi.getter(name="upstreamCredentials")
    def upstream_credentials(self) -> 'outputs.UpstreamCredentialsResponse':
        """
        Optional. The credentials used to access the remote repository.
        """
        return pulumi.get(self, "upstream_credentials")

    @property
    @pulumi.getter(name="yumRepository")
    def yum_repository(self) -> 'outputs.YumRepositoryResponse':
        """
        Specific settings for a Yum remote repository.
        """
        return pulumi.get(self, "yum_repository")


@pulumi.output_type
class UpstreamCredentialsResponse(dict):
    """
    The credentials to access the remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usernamePasswordCredentials":
            suggest = "username_password_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username_password_credentials: 'outputs.UsernamePasswordCredentialsResponse'):
        """
        The credentials to access the remote repository.
        :param 'UsernamePasswordCredentialsResponse' username_password_credentials: Use username and password to access the remote repository.
        """
        pulumi.set(__self__, "username_password_credentials", username_password_credentials)

    @property
    @pulumi.getter(name="usernamePasswordCredentials")
    def username_password_credentials(self) -> 'outputs.UsernamePasswordCredentialsResponse':
        """
        Use username and password to access the remote repository.
        """
        return pulumi.get(self, "username_password_credentials")


@pulumi.output_type
class UpstreamPolicyResponse(dict):
    """
    Artifact policy configuration for the repository contents.
    """
    def __init__(__self__, *,
                 priority: int,
                 repository: str):
        """
        Artifact policy configuration for the repository contents.
        :param int priority: Entries with a greater priority value take precedence in the pull order.
        :param str repository: A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Entries with a greater priority value take precedence in the pull order.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
        """
        return pulumi.get(self, "repository")


@pulumi.output_type
class UsernamePasswordCredentialsResponse(dict):
    """
    Username and password credentials.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordSecretVersion":
            suggest = "password_secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsernamePasswordCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsernamePasswordCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_secret_version: str,
                 username: str):
        """
        Username and password credentials.
        :param str password_secret_version: The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
        :param str username: The username to access the remote repository.
        """
        pulumi.set(__self__, "password_secret_version", password_secret_version)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordSecretVersion")
    def password_secret_version(self) -> str:
        """
        The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
        """
        return pulumi.get(self, "password_secret_version")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username to access the remote repository.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class VirtualRepositoryConfigResponse(dict):
    """
    Virtual repository configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upstreamPolicies":
            suggest = "upstream_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualRepositoryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualRepositoryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualRepositoryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upstream_policies: Sequence['outputs.UpstreamPolicyResponse']):
        """
        Virtual repository configuration.
        :param Sequence['UpstreamPolicyResponse'] upstream_policies: Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
        """
        pulumi.set(__self__, "upstream_policies", upstream_policies)

    @property
    @pulumi.getter(name="upstreamPolicies")
    def upstream_policies(self) -> Sequence['outputs.UpstreamPolicyResponse']:
        """
        Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
        """
        return pulumi.get(self, "upstream_policies")


@pulumi.output_type
class YumRepositoryResponse(dict):
    """
    Configuration for a Yum remote repository.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicRepository":
            suggest = "public_repository"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YumRepositoryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YumRepositoryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YumRepositoryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_repository: 'outputs.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse'):
        """
        Configuration for a Yum remote repository.
        :param 'GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse' public_repository: One of the publicly available Yum repositories supported by Artifact Registry.
        """
        pulumi.set(__self__, "public_repository", public_repository)

    @property
    @pulumi.getter(name="publicRepository")
    def public_repository(self) -> 'outputs.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse':
        """
        One of the publicly available Yum repositories supported by Artifact Registry.
        """
        return pulumi.get(self, "public_repository")


