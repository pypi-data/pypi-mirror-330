# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetApiResult',
    'AwaitableGetApiResult',
    'get_api',
    'get_api_output',
]

@pulumi.output_type
class GetApiResult:
    def __init__(__self__, api_proxy_type=None, labels=None, latest_revision_id=None, meta_data=None, name=None, read_only=None, revision=None):
        if api_proxy_type and not isinstance(api_proxy_type, str):
            raise TypeError("Expected argument 'api_proxy_type' to be a str")
        pulumi.set(__self__, "api_proxy_type", api_proxy_type)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if latest_revision_id and not isinstance(latest_revision_id, str):
            raise TypeError("Expected argument 'latest_revision_id' to be a str")
        pulumi.set(__self__, "latest_revision_id", latest_revision_id)
        if meta_data and not isinstance(meta_data, dict):
            raise TypeError("Expected argument 'meta_data' to be a dict")
        pulumi.set(__self__, "meta_data", meta_data)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if revision and not isinstance(revision, list):
            raise TypeError("Expected argument 'revision' to be a list")
        pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter(name="apiProxyType")
    def api_proxy_type(self) -> str:
        """
        The type of the API proxy.
        """
        return pulumi.get(self, "api_proxy_type")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        User labels applied to this API Proxy.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="latestRevisionId")
    def latest_revision_id(self) -> str:
        """
        The id of the most recently created revision for this api proxy.
        """
        return pulumi.get(self, "latest_revision_id")

    @property
    @pulumi.getter(name="metaData")
    def meta_data(self) -> 'outputs.GoogleCloudApigeeV1EntityMetadataResponse':
        """
        Metadata describing the API proxy.
        """
        return pulumi.get(self, "meta_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the API proxy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Whether this proxy is read-only. A read-only proxy cannot have new revisions created through calls to CreateApiProxyRevision. A proxy is read-only if it was generated by an archive.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def revision(self) -> Sequence[str]:
        """
        List of revisions defined for the API proxy.
        """
        return pulumi.get(self, "revision")


class AwaitableGetApiResult(GetApiResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiResult(
            api_proxy_type=self.api_proxy_type,
            labels=self.labels,
            latest_revision_id=self.latest_revision_id,
            meta_data=self.meta_data,
            name=self.name,
            read_only=self.read_only,
            revision=self.revision)


def get_api(api_id: Optional[str] = None,
            organization_id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiResult:
    """
    Gets an API proxy including a list of existing revisions.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getApi', __args__, opts=opts, typ=GetApiResult).value

    return AwaitableGetApiResult(
        api_proxy_type=pulumi.get(__ret__, 'api_proxy_type'),
        labels=pulumi.get(__ret__, 'labels'),
        latest_revision_id=pulumi.get(__ret__, 'latest_revision_id'),
        meta_data=pulumi.get(__ret__, 'meta_data'),
        name=pulumi.get(__ret__, 'name'),
        read_only=pulumi.get(__ret__, 'read_only'),
        revision=pulumi.get(__ret__, 'revision'))


@_utilities.lift_output_func(get_api)
def get_api_output(api_id: Optional[pulumi.Input[str]] = None,
                   organization_id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiResult]:
    """
    Gets an API proxy including a list of existing revisions.
    """
    ...
