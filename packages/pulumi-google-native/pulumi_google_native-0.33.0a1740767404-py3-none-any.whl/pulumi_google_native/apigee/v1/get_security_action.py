# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSecurityActionResult',
    'AwaitableGetSecurityActionResult',
    'get_security_action',
    'get_security_action_output',
]

@pulumi.output_type
class GetSecurityActionResult:
    def __init__(__self__, allow=None, condition_config=None, create_time=None, deny=None, description=None, expire_time=None, flag=None, name=None, state=None, ttl=None, update_time=None):
        if allow and not isinstance(allow, dict):
            raise TypeError("Expected argument 'allow' to be a dict")
        pulumi.set(__self__, "allow", allow)
        if condition_config and not isinstance(condition_config, dict):
            raise TypeError("Expected argument 'condition_config' to be a dict")
        pulumi.set(__self__, "condition_config", condition_config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deny and not isinstance(deny, dict):
            raise TypeError("Expected argument 'deny' to be a dict")
        pulumi.set(__self__, "deny", deny)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if flag and not isinstance(flag, dict):
            raise TypeError("Expected argument 'flag' to be a dict")
        pulumi.set(__self__, "flag", flag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if ttl and not isinstance(ttl, str):
            raise TypeError("Expected argument 'ttl' to be a str")
        pulumi.set(__self__, "ttl", ttl)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def allow(self) -> 'outputs.GoogleCloudApigeeV1SecurityActionAllowResponse':
        """
        Allow a request through if it matches this SecurityAction.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="conditionConfig")
    def condition_config(self) -> 'outputs.GoogleCloudApigeeV1SecurityActionConditionConfigResponse':
        """
        A valid SecurityAction must contain at least one condition.
        """
        return pulumi.get(self, "condition_config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time for this SecurityAction.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def deny(self) -> 'outputs.GoogleCloudApigeeV1SecurityActionDenyResponse':
        """
        Deny a request through if it matches this SecurityAction.
        """
        return pulumi.get(self, "deny")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. An optional user provided description of the SecurityAction.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration for this SecurityAction.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def flag(self) -> 'outputs.GoogleCloudApigeeV1SecurityActionFlagResponse':
        """
        Flag a request through if it matches this SecurityAction.
        """
        return pulumi.get(self, "flag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. This field is ignored during creation as per AIP-133. Please set the `security_action_id` field in the CreateSecurityActionRequest when creating a new SecurityAction. Format: organizations/{org}/environments/{env}/securityActions/{security_action}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        Input only. The TTL for this SecurityAction.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time for this SecurityAction. This reflects when this SecurityAction changed states.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetSecurityActionResult(GetSecurityActionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityActionResult(
            allow=self.allow,
            condition_config=self.condition_config,
            create_time=self.create_time,
            deny=self.deny,
            description=self.description,
            expire_time=self.expire_time,
            flag=self.flag,
            name=self.name,
            state=self.state,
            ttl=self.ttl,
            update_time=self.update_time)


def get_security_action(environment_id: Optional[str] = None,
                        organization_id: Optional[str] = None,
                        security_action_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityActionResult:
    """
    Get a SecurityAction by name.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['organizationId'] = organization_id
    __args__['securityActionId'] = security_action_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getSecurityAction', __args__, opts=opts, typ=GetSecurityActionResult).value

    return AwaitableGetSecurityActionResult(
        allow=pulumi.get(__ret__, 'allow'),
        condition_config=pulumi.get(__ret__, 'condition_config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        deny=pulumi.get(__ret__, 'deny'),
        description=pulumi.get(__ret__, 'description'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        flag=pulumi.get(__ret__, 'flag'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        ttl=pulumi.get(__ret__, 'ttl'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_security_action)
def get_security_action_output(environment_id: Optional[pulumi.Input[str]] = None,
                               organization_id: Optional[pulumi.Input[str]] = None,
                               security_action_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityActionResult]:
    """
    Get a SecurityAction by name.
    """
    ...
