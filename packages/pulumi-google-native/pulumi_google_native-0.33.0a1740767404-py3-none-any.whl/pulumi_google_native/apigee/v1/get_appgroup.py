# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetAppgroupResult',
    'AwaitableGetAppgroupResult',
    'get_appgroup',
    'get_appgroup_output',
]

@pulumi.output_type
class GetAppgroupResult:
    def __init__(__self__, app_group_id=None, attributes=None, channel_id=None, channel_uri=None, created_at=None, display_name=None, last_modified_at=None, name=None, organization=None, status=None):
        if app_group_id and not isinstance(app_group_id, str):
            raise TypeError("Expected argument 'app_group_id' to be a str")
        pulumi.set(__self__, "app_group_id", app_group_id)
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if channel_id and not isinstance(channel_id, str):
            raise TypeError("Expected argument 'channel_id' to be a str")
        pulumi.set(__self__, "channel_id", channel_id)
        if channel_uri and not isinstance(channel_uri, str):
            raise TypeError("Expected argument 'channel_uri' to be a str")
        pulumi.set(__self__, "channel_uri", channel_uri)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="appGroupId")
    def app_group_id(self) -> str:
        """
        Internal identifier that cannot be edited
        """
        return pulumi.get(self, "app_group_id")

    @property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GoogleCloudApigeeV1AttributeResponse']:
        """
        A list of attributes
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> str:
        """
        channel identifier identifies the owner maintaing this grouping.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="channelUri")
    def channel_uri(self) -> str:
        """
        A reference to the associated storefront/marketplace.
        """
        return pulumi.get(self, "channel_uri")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created time as milliseconds since epoch.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        app group name displayed in the UI
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> str:
        """
        Modified time as milliseconds since epoch.
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._\\-$ %.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Immutable. the org the app group is created
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Valid values are `active` or `inactive`. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as `active` or `inactive`.
        """
        return pulumi.get(self, "status")


class AwaitableGetAppgroupResult(GetAppgroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppgroupResult(
            app_group_id=self.app_group_id,
            attributes=self.attributes,
            channel_id=self.channel_id,
            channel_uri=self.channel_uri,
            created_at=self.created_at,
            display_name=self.display_name,
            last_modified_at=self.last_modified_at,
            name=self.name,
            organization=self.organization,
            status=self.status)


def get_appgroup(appgroup_id: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppgroupResult:
    """
    Returns the AppGroup details for the provided AppGroup name in the request URI.
    """
    __args__ = dict()
    __args__['appgroupId'] = appgroup_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getAppgroup', __args__, opts=opts, typ=GetAppgroupResult).value

    return AwaitableGetAppgroupResult(
        app_group_id=pulumi.get(__ret__, 'app_group_id'),
        attributes=pulumi.get(__ret__, 'attributes'),
        channel_id=pulumi.get(__ret__, 'channel_id'),
        channel_uri=pulumi.get(__ret__, 'channel_uri'),
        created_at=pulumi.get(__ret__, 'created_at'),
        display_name=pulumi.get(__ret__, 'display_name'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_appgroup)
def get_appgroup_output(appgroup_id: Optional[pulumi.Input[str]] = None,
                        organization_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppgroupResult]:
    """
    Returns the AppGroup details for the provided AppGroup name in the request URI.
    """
    ...
