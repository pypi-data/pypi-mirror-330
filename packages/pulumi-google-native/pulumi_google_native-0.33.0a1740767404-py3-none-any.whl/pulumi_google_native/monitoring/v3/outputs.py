# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AggregationResponse',
    'AlertStrategyResponse',
    'AppEngineResponse',
    'AvailabilityCriteriaResponse',
    'BasicAuthenticationResponse',
    'BasicServiceResponse',
    'BasicSliResponse',
    'CloudEndpointsResponse',
    'CloudFunctionV2TargetResponse',
    'CloudRunResponse',
    'ClusterIstioResponse',
    'ConditionResponse',
    'ContentMatcherResponse',
    'CriteriaResponse',
    'CustomResponse',
    'DistributionCutResponse',
    'DocumentationResponse',
    'ForecastOptionsResponse',
    'GkeNamespaceResponse',
    'GkeServiceResponse',
    'GkeWorkloadResponse',
    'GoogleMonitoringV3RangeResponse',
    'HttpCheckResponse',
    'InternalCheckerResponse',
    'IstioCanonicalServiceResponse',
    'JsonPathMatcherResponse',
    'LabelDescriptorResponse',
    'LatencyCriteriaResponse',
    'LogMatchResponse',
    'MeshIstioResponse',
    'MetricAbsenceResponse',
    'MetricDescriptorMetadataResponse',
    'MetricRangeResponse',
    'MetricThresholdResponse',
    'MonitoredResourceResponse',
    'MonitoringQueryLanguageConditionResponse',
    'MutationRecordResponse',
    'NotificationChannelStrategyResponse',
    'NotificationRateLimitResponse',
    'PerformanceThresholdResponse',
    'PingConfigResponse',
    'PrometheusQueryLanguageConditionResponse',
    'RequestBasedSliResponse',
    'ResourceGroupResponse',
    'ResponseStatusCodeResponse',
    'ServiceLevelIndicatorResponse',
    'StatusResponse',
    'SyntheticMonitorTargetResponse',
    'TcpCheckResponse',
    'TelemetryResponse',
    'TimeIntervalResponse',
    'TimeSeriesRatioResponse',
    'TriggerResponse',
    'WindowsBasedSliResponse',
]

@pulumi.output_type
class AggregationResponse(dict):
    """
    Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example "the 95% latency across the average of all tasks in a cluster". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alignmentPeriod":
            suggest = "alignment_period"
        elif key == "crossSeriesReducer":
            suggest = "cross_series_reducer"
        elif key == "groupByFields":
            suggest = "group_by_fields"
        elif key == "perSeriesAligner":
            suggest = "per_series_aligner"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment_period: str,
                 cross_series_reducer: str,
                 group_by_fields: Sequence[str],
                 per_series_aligner: str):
        """
        Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example "the 95% latency across the average of all tasks in a cluster". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).
        :param str alignment_period: The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 104 weeks (2 years) for charts, and 90,000 seconds (25 hours) for alerting policies.
        :param str cross_series_reducer: The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
        :param Sequence[str] group_by_fields: The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.
        :param str per_series_aligner: An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
        """
        pulumi.set(__self__, "alignment_period", alignment_period)
        pulumi.set(__self__, "cross_series_reducer", cross_series_reducer)
        pulumi.set(__self__, "group_by_fields", group_by_fields)
        pulumi.set(__self__, "per_series_aligner", per_series_aligner)

    @property
    @pulumi.getter(name="alignmentPeriod")
    def alignment_period(self) -> str:
        """
        The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 104 weeks (2 years) for charts, and 90,000 seconds (25 hours) for alerting policies.
        """
        return pulumi.get(self, "alignment_period")

    @property
    @pulumi.getter(name="crossSeriesReducer")
    def cross_series_reducer(self) -> str:
        """
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
        """
        return pulumi.get(self, "cross_series_reducer")

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Sequence[str]:
        """
        The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.
        """
        return pulumi.get(self, "group_by_fields")

    @property
    @pulumi.getter(name="perSeriesAligner")
    def per_series_aligner(self) -> str:
        """
        An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
        """
        return pulumi.get(self, "per_series_aligner")


@pulumi.output_type
class AlertStrategyResponse(dict):
    """
    Control over how the notification channels in notification_channels are notified when this alert fires.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoClose":
            suggest = "auto_close"
        elif key == "notificationChannelStrategy":
            suggest = "notification_channel_strategy"
        elif key == "notificationRateLimit":
            suggest = "notification_rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertStrategyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertStrategyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertStrategyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_close: str,
                 notification_channel_strategy: Sequence['outputs.NotificationChannelStrategyResponse'],
                 notification_rate_limit: 'outputs.NotificationRateLimitResponse'):
        """
        Control over how the notification channels in notification_channels are notified when this alert fires.
        :param str auto_close: If an alert policy that was active has no data for this long, any open incidents will close
        :param Sequence['NotificationChannelStrategyResponse'] notification_channel_strategy: Control how notifications will be sent out, on a per-channel basis.
        :param 'NotificationRateLimitResponse' notification_rate_limit: Required for alert policies with a LogMatch condition.This limit is not implemented for alert policies that are not log-based.
        """
        pulumi.set(__self__, "auto_close", auto_close)
        pulumi.set(__self__, "notification_channel_strategy", notification_channel_strategy)
        pulumi.set(__self__, "notification_rate_limit", notification_rate_limit)

    @property
    @pulumi.getter(name="autoClose")
    def auto_close(self) -> str:
        """
        If an alert policy that was active has no data for this long, any open incidents will close
        """
        return pulumi.get(self, "auto_close")

    @property
    @pulumi.getter(name="notificationChannelStrategy")
    def notification_channel_strategy(self) -> Sequence['outputs.NotificationChannelStrategyResponse']:
        """
        Control how notifications will be sent out, on a per-channel basis.
        """
        return pulumi.get(self, "notification_channel_strategy")

    @property
    @pulumi.getter(name="notificationRateLimit")
    def notification_rate_limit(self) -> 'outputs.NotificationRateLimitResponse':
        """
        Required for alert policies with a LogMatch condition.This limit is not implemented for alert policies that are not log-based.
        """
        return pulumi.get(self, "notification_rate_limit")


@pulumi.output_type
class AppEngineResponse(dict):
    """
    App Engine service. Learn more at https://cloud.google.com/appengine.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppEngineResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppEngineResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppEngineResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_id: str):
        """
        App Engine service. Learn more at https://cloud.google.com/appengine.
        :param str module_id: The ID of the App Engine module underlying this service. Corresponds to the module_id resource label in the gae_app monitored resource (https://cloud.google.com/monitoring/api/resources#tag_gae_app).
        """
        pulumi.set(__self__, "module_id", module_id)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> str:
        """
        The ID of the App Engine module underlying this service. Corresponds to the module_id resource label in the gae_app monitored resource (https://cloud.google.com/monitoring/api/resources#tag_gae_app).
        """
        return pulumi.get(self, "module_id")


@pulumi.output_type
class AvailabilityCriteriaResponse(dict):
    """
    Future parameters for the availability SLI.
    """
    def __init__(__self__):
        """
        Future parameters for the availability SLI.
        """
        pass


@pulumi.output_type
class BasicAuthenticationResponse(dict):
    """
    The authentication parameters to provide to the specified resource or URL that requires a username and password. Currently, only Basic HTTP authentication (https://tools.ietf.org/html/rfc7617) is supported in Uptime checks.
    """
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        The authentication parameters to provide to the specified resource or URL that requires a username and password. Currently, only Basic HTTP authentication (https://tools.ietf.org/html/rfc7617) is supported in Uptime checks.
        :param str password: The password to use when authenticating with the HTTP server.
        :param str username: The username to use when authenticating with the HTTP server.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password to use when authenticating with the HTTP server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username to use when authenticating with the HTTP server.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class BasicServiceResponse(dict):
    """
    A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceLabels":
            suggest = "service_labels"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BasicServiceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BasicServiceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BasicServiceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_labels: Mapping[str, str],
                 service_type: str):
        """
        A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
        :param Mapping[str, str] service_labels: Labels that specify the resource that emits the monitoring data which is used for SLO reporting of this Service. Documentation and valid values for given service types here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
        :param str service_type: The type of service that this basic service defines, e.g. APP_ENGINE service type. Documentation and valid values here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
        """
        pulumi.set(__self__, "service_labels", service_labels)
        pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Mapping[str, str]:
        """
        Labels that specify the resource that emits the monitoring data which is used for SLO reporting of this Service. Documentation and valid values for given service types here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
        """
        return pulumi.get(self, "service_labels")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        The type of service that this basic service defines, e.g. APP_ENGINE service type. Documentation and valid values here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class BasicSliResponse(dict):
    """
    An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
    """
    def __init__(__self__, *,
                 availability: 'outputs.AvailabilityCriteriaResponse',
                 latency: 'outputs.LatencyCriteriaResponse',
                 location: Sequence[str],
                 method: Sequence[str],
                 version: Sequence[str]):
        """
        An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
        :param 'AvailabilityCriteriaResponse' availability: Good service is defined to be the count of requests made to this service that return successfully.
        :param 'LatencyCriteriaResponse' latency: Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
        :param Sequence[str] location: OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.
        :param Sequence[str] method: OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.
        :param Sequence[str] version: OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.
        """
        pulumi.set(__self__, "availability", availability)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def availability(self) -> 'outputs.AvailabilityCriteriaResponse':
        """
        Good service is defined to be the count of requests made to this service that return successfully.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter
    def latency(self) -> 'outputs.LatencyCriteriaResponse':
        """
        Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def location(self) -> Sequence[str]:
        """
        OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def method(self) -> Sequence[str]:
        """
        OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def version(self) -> Sequence[str]:
        """
        OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CloudEndpointsResponse(dict):
    """
    Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
    """
    def __init__(__self__, *,
                 service: str):
        """
        Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
        :param str service: The name of the Cloud Endpoints service underlying this service. Corresponds to the service resource label in the api monitored resource (https://cloud.google.com/monitoring/api/resources#tag_api).
        """
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The name of the Cloud Endpoints service underlying this service. Corresponds to the service resource label in the api monitored resource (https://cloud.google.com/monitoring/api/resources#tag_api).
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class CloudFunctionV2TargetResponse(dict):
    """
    A Synthetic Monitor deployed to a Cloud Functions V2 instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudRunRevision":
            suggest = "cloud_run_revision"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudFunctionV2TargetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudFunctionV2TargetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudFunctionV2TargetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_run_revision: 'outputs.MonitoredResourceResponse',
                 name: str):
        """
        A Synthetic Monitor deployed to a Cloud Functions V2 instance.
        :param 'MonitoredResourceResponse' cloud_run_revision: The cloud_run_revision Monitored Resource associated with the GCFv2. The Synthetic Monitor execution results (metrics, logs, and spans) are reported against this Monitored Resource. This field is output only.
        :param str name: Fully qualified GCFv2 resource name i.e. projects/{project}/locations/{location}/functions/{function} Required.
        """
        pulumi.set(__self__, "cloud_run_revision", cloud_run_revision)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cloudRunRevision")
    def cloud_run_revision(self) -> 'outputs.MonitoredResourceResponse':
        """
        The cloud_run_revision Monitored Resource associated with the GCFv2. The Synthetic Monitor execution results (metrics, logs, and spans) are reported against this Monitored Resource. This field is output only.
        """
        return pulumi.get(self, "cloud_run_revision")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fully qualified GCFv2 resource name i.e. projects/{project}/locations/{location}/functions/{function} Required.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CloudRunResponse(dict):
    """
    Cloud Run service. Learn more at https://cloud.google.com/run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRunResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRunResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRunResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 service_name: str):
        """
        Cloud Run service. Learn more at https://cloud.google.com/run.
        :param str location: The location the service is run. Corresponds to the location resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
        :param str service_name: The name of the Cloud Run service. Corresponds to the service_name resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location the service is run. Corresponds to the location resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the Cloud Run service. Corresponds to the service_name resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ClusterIstioResponse(dict):
    """
    Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "serviceNamespace":
            suggest = "service_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterIstioResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterIstioResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterIstioResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 location: str,
                 service_name: str,
                 service_namespace: str):
        """
        Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
        :param str cluster_name: The name of the Kubernetes cluster in which this Istio service is defined. Corresponds to the cluster_name resource label in k8s_cluster resources.
        :param str location: The location of the Kubernetes cluster in which this Istio service is defined. Corresponds to the location resource label in k8s_cluster resources.
        :param str service_name: The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
        :param str service_namespace: The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_namespace", service_namespace)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the Kubernetes cluster in which this Istio service is defined. Corresponds to the cluster_name resource label in k8s_cluster resources.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the Kubernetes cluster in which this Istio service is defined. Corresponds to the location resource label in k8s_cluster resources.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceNamespace")
    def service_namespace(self) -> str:
        """
        The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
        """
        return pulumi.get(self, "service_namespace")


@pulumi.output_type
class ConditionResponse(dict):
    """
    A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionAbsent":
            suggest = "condition_absent"
        elif key == "conditionMatchedLog":
            suggest = "condition_matched_log"
        elif key == "conditionMonitoringQueryLanguage":
            suggest = "condition_monitoring_query_language"
        elif key == "conditionPrometheusQueryLanguage":
            suggest = "condition_prometheus_query_language"
        elif key == "conditionThreshold":
            suggest = "condition_threshold"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_absent: 'outputs.MetricAbsenceResponse',
                 condition_matched_log: 'outputs.LogMatchResponse',
                 condition_monitoring_query_language: 'outputs.MonitoringQueryLanguageConditionResponse',
                 condition_prometheus_query_language: 'outputs.PrometheusQueryLanguageConditionResponse',
                 condition_threshold: 'outputs.MetricThresholdResponse',
                 display_name: str,
                 name: str):
        """
        A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
        :param 'MetricAbsenceResponse' condition_absent: A condition that checks that a time series continues to receive new data points.
        :param 'LogMatchResponse' condition_matched_log: A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
        :param 'MonitoringQueryLanguageConditionResponse' condition_monitoring_query_language: A condition that uses the Monitoring Query Language to define alerts.
        :param 'PrometheusQueryLanguageConditionResponse' condition_prometheus_query_language: A condition that uses the Prometheus query language to define alerts.
        :param 'MetricThresholdResponse' condition_threshold: A condition that compares a time series against a threshold.
        :param str display_name: A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
        :param str name: Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
        """
        pulumi.set(__self__, "condition_absent", condition_absent)
        pulumi.set(__self__, "condition_matched_log", condition_matched_log)
        pulumi.set(__self__, "condition_monitoring_query_language", condition_monitoring_query_language)
        pulumi.set(__self__, "condition_prometheus_query_language", condition_prometheus_query_language)
        pulumi.set(__self__, "condition_threshold", condition_threshold)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="conditionAbsent")
    def condition_absent(self) -> 'outputs.MetricAbsenceResponse':
        """
        A condition that checks that a time series continues to receive new data points.
        """
        return pulumi.get(self, "condition_absent")

    @property
    @pulumi.getter(name="conditionMatchedLog")
    def condition_matched_log(self) -> 'outputs.LogMatchResponse':
        """
        A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
        """
        return pulumi.get(self, "condition_matched_log")

    @property
    @pulumi.getter(name="conditionMonitoringQueryLanguage")
    def condition_monitoring_query_language(self) -> 'outputs.MonitoringQueryLanguageConditionResponse':
        """
        A condition that uses the Monitoring Query Language to define alerts.
        """
        return pulumi.get(self, "condition_monitoring_query_language")

    @property
    @pulumi.getter(name="conditionPrometheusQueryLanguage")
    def condition_prometheus_query_language(self) -> 'outputs.PrometheusQueryLanguageConditionResponse':
        """
        A condition that uses the Prometheus query language to define alerts.
        """
        return pulumi.get(self, "condition_prometheus_query_language")

    @property
    @pulumi.getter(name="conditionThreshold")
    def condition_threshold(self) -> 'outputs.MetricThresholdResponse':
        """
        A condition that compares a time series against a threshold.
        """
        return pulumi.get(self, "condition_threshold")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContentMatcherResponse(dict):
    """
    Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonPathMatcher":
            suggest = "json_path_matcher"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentMatcherResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentMatcherResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentMatcherResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 json_path_matcher: 'outputs.JsonPathMatcherResponse',
                 matcher: str):
        """
        Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.
        :param str content: String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
        :param 'JsonPathMatcherResponse' json_path_matcher: Matcher information for MATCHES_JSON_PATH and NOT_MATCHES_JSON_PATH
        :param str matcher: The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "json_path_matcher", json_path_matcher)
        pulumi.set(__self__, "matcher", matcher)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="jsonPathMatcher")
    def json_path_matcher(self) -> 'outputs.JsonPathMatcherResponse':
        """
        Matcher information for MATCHES_JSON_PATH and NOT_MATCHES_JSON_PATH
        """
        return pulumi.get(self, "json_path_matcher")

    @property
    @pulumi.getter
    def matcher(self) -> str:
        """
        The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
        """
        return pulumi.get(self, "matcher")


@pulumi.output_type
class CriteriaResponse(dict):
    """
    Criteria specific to the AlertPolicys that this Snooze applies to. The Snooze will suppress alerts that come from one of the AlertPolicys whose names are supplied.
    """
    def __init__(__self__, *,
                 policies: Sequence[str]):
        """
        Criteria specific to the AlertPolicys that this Snooze applies to. The Snooze will suppress alerts that come from one of the AlertPolicys whose names are supplied.
        :param Sequence[str] policies: The specific AlertPolicy names for the alert that should be snoozed. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID] There is a limit of 16 policies per snooze. This limit is checked during snooze creation.
        """
        pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def policies(self) -> Sequence[str]:
        """
        The specific AlertPolicy names for the alert that should be snoozed. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID] There is a limit of 16 policies per snooze. This limit is checked during snooze creation.
        """
        return pulumi.get(self, "policies")


@pulumi.output_type
class CustomResponse(dict):
    """
    Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
    """
    def __init__(__self__):
        """
        Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
        """
        pass


@pulumi.output_type
class DistributionCutResponse(dict):
    """
    A DistributionCut defines a TimeSeries and thresholds used for measuring good service and total service. The TimeSeries must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE. The computed good_service will be the estimated count of values in the Distribution that fall within the specified min and max.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distributionFilter":
            suggest = "distribution_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionCutResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionCutResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionCutResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distribution_filter: str,
                 range: 'outputs.GoogleMonitoringV3RangeResponse'):
        """
        A DistributionCut defines a TimeSeries and thresholds used for measuring good service and total service. The TimeSeries must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE. The computed good_service will be the estimated count of values in the Distribution that fall within the specified min and max.
        :param str distribution_filter: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries aggregating values. Must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param 'GoogleMonitoringV3RangeResponse' range: Range of values considered "good." For a one-sided range, set one bound to an infinite value.
        """
        pulumi.set(__self__, "distribution_filter", distribution_filter)
        pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter(name="distributionFilter")
    def distribution_filter(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries aggregating values. Must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        return pulumi.get(self, "distribution_filter")

    @property
    @pulumi.getter
    def range(self) -> 'outputs.GoogleMonitoringV3RangeResponse':
        """
        Range of values considered "good." For a one-sided range, set one bound to an infinite value.
        """
        return pulumi.get(self, "range")


@pulumi.output_type
class DocumentationResponse(dict):
    """
    A content string and a MIME type that describes the content string's format.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mimeType":
            suggest = "mime_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 mime_type: str,
                 subject: str):
        """
        A content string and a MIME type that describes the content string's format.
        :param str content: The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).
        :param str mime_type: The format of the content field. Presently, only the value "text/markdown" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.
        :param str subject: Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "mime_type", mime_type)
        pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> str:
        """
        The format of the content field. Presently, only the value "text/markdown" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.
        """
        return pulumi.get(self, "mime_type")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class ForecastOptionsResponse(dict):
    """
    Options used when forecasting the time series and testing the predicted value against the threshold.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forecastHorizon":
            suggest = "forecast_horizon"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForecastOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForecastOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForecastOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forecast_horizon: str):
        """
        Options used when forecasting the time series and testing the predicted value against the threshold.
        :param str forecast_horizon: The length of time into the future to forecast whether a time series will violate the threshold. If the predicted value is found to violate the threshold, and the violation is observed in all forecasts made for the configured duration, then the time series is considered to be failing. The forecast horizon can range from 1 hour to 60 hours.
        """
        pulumi.set(__self__, "forecast_horizon", forecast_horizon)

    @property
    @pulumi.getter(name="forecastHorizon")
    def forecast_horizon(self) -> str:
        """
        The length of time into the future to forecast whether a time series will violate the threshold. If the predicted value is found to violate the threshold, and the violation is observed in all forecasts made for the configured duration, then the time series is considered to be failing. The forecast horizon can range from 1 hour to 60 hours.
        """
        return pulumi.get(self, "forecast_horizon")


@pulumi.output_type
class GkeNamespaceResponse(dict):
    """
    GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GkeNamespaceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GkeNamespaceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GkeNamespaceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 location: str,
                 namespace_name: str,
                 project: str):
        """
        GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
        :param str cluster_name: The name of the parent cluster.
        :param str location: The location of the parent cluster. This may be a zone or region.
        :param str namespace_name: The name of this namespace.
        :param str project: The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the parent cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the parent cluster. This may be a zone or region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The name of this namespace.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        """
        return pulumi.get(self, "project")


@pulumi.output_type
class GkeServiceResponse(dict):
    """
    GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "namespaceName":
            suggest = "namespace_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GkeServiceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GkeServiceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GkeServiceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 location: str,
                 namespace_name: str,
                 project: str,
                 service_name: str):
        """
        GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
        :param str cluster_name: The name of the parent cluster.
        :param str location: The location of the parent cluster. This may be a zone or region.
        :param str namespace_name: The name of the parent namespace.
        :param str project: The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        :param str service_name: The name of this service.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the parent cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the parent cluster. This may be a zone or region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The name of the parent namespace.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of this service.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GkeWorkloadResponse(dict):
    """
    A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "namespaceName":
            suggest = "namespace_name"
        elif key == "topLevelControllerName":
            suggest = "top_level_controller_name"
        elif key == "topLevelControllerType":
            suggest = "top_level_controller_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GkeWorkloadResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GkeWorkloadResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GkeWorkloadResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 location: str,
                 namespace_name: str,
                 project: str,
                 top_level_controller_name: str,
                 top_level_controller_type: str):
        """
        A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
        :param str cluster_name: The name of the parent cluster.
        :param str location: The location of the parent cluster. This may be a zone or region.
        :param str namespace_name: The name of the parent namespace.
        :param str project: The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        :param str top_level_controller_name: The name of this workload.
        :param str top_level_controller_type: The type of this workload (for example, "Deployment" or "DaemonSet")
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "top_level_controller_name", top_level_controller_name)
        pulumi.set(__self__, "top_level_controller_type", top_level_controller_type)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the parent cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the parent cluster. This may be a zone or region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The name of the parent namespace.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="topLevelControllerName")
    def top_level_controller_name(self) -> str:
        """
        The name of this workload.
        """
        return pulumi.get(self, "top_level_controller_name")

    @property
    @pulumi.getter(name="topLevelControllerType")
    def top_level_controller_type(self) -> str:
        """
        The type of this workload (for example, "Deployment" or "DaemonSet")
        """
        return pulumi.get(self, "top_level_controller_type")


@pulumi.output_type
class GoogleMonitoringV3RangeResponse(dict):
    """
    Range of numerical values within min and max.
    """
    def __init__(__self__, *,
                 max: float,
                 min: float):
        """
        Range of numerical values within min and max.
        :param float max: Range maximum.
        :param float min: Range minimum.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        Range maximum.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        Range minimum.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class HttpCheckResponse(dict):
    """
    Information involved in an HTTP/HTTPS Uptime check request.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptedResponseStatusCodes":
            suggest = "accepted_response_status_codes"
        elif key == "authInfo":
            suggest = "auth_info"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customContentType":
            suggest = "custom_content_type"
        elif key == "maskHeaders":
            suggest = "mask_headers"
        elif key == "pingConfig":
            suggest = "ping_config"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "useSsl":
            suggest = "use_ssl"
        elif key == "validateSsl":
            suggest = "validate_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpCheckResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpCheckResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpCheckResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accepted_response_status_codes: Sequence['outputs.ResponseStatusCodeResponse'],
                 auth_info: 'outputs.BasicAuthenticationResponse',
                 body: str,
                 content_type: str,
                 custom_content_type: str,
                 headers: Mapping[str, str],
                 mask_headers: bool,
                 path: str,
                 ping_config: 'outputs.PingConfigResponse',
                 port: int,
                 request_method: str,
                 use_ssl: bool,
                 validate_ssl: bool):
        """
        Information involved in an HTTP/HTTPS Uptime check request.
        :param Sequence['ResponseStatusCodeResponse'] accepted_response_status_codes: If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
        :param 'BasicAuthenticationResponse' auth_info: The authentication information. Optional when creating an HTTP check; defaults to empty.
        :param str body: The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte.Note: If client libraries aren't used (which performs the conversion automatically) base64 encode your body data since the field is of bytes type.
        :param str content_type: The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
        :param str custom_content_type: A user provided content type header to use for the check. The invalid configurations outlined in the content_type field apply to custom_content_type, as well as the following: 1. content_type is URL_ENCODED and custom_content_type is set. 2. content_type is USER_PROVIDED and custom_content_type is not set.
        :param Mapping[str, str] headers: The list of headers to send as part of the Uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
        :param bool mask_headers: Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
        :param str path: Optional (defaults to "/"). The path to the page against which to run the check. Will be combined with the host (specified within the monitored_resource) and port to construct the full URL. If the provided path does not begin with "/", a "/" will be prepended automatically.
        :param 'PingConfigResponse' ping_config: Contains information needed to add pings to an HTTP check.
        :param int port: Optional (defaults to 80 when use_ssl is false, and 443 when use_ssl is true). The TCP port on the HTTP server against which to run the check. Will be combined with host (specified within the monitored_resource) and path to construct the full URL.
        :param str request_method: The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
        :param bool use_ssl: If true, use HTTPS instead of HTTP to run the check.
        :param bool validate_ssl: Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
        """
        pulumi.set(__self__, "accepted_response_status_codes", accepted_response_status_codes)
        pulumi.set(__self__, "auth_info", auth_info)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "custom_content_type", custom_content_type)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "mask_headers", mask_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ping_config", ping_config)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "validate_ssl", validate_ssl)

    @property
    @pulumi.getter(name="acceptedResponseStatusCodes")
    def accepted_response_status_codes(self) -> Sequence['outputs.ResponseStatusCodeResponse']:
        """
        If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
        """
        return pulumi.get(self, "accepted_response_status_codes")

    @property
    @pulumi.getter(name="authInfo")
    def auth_info(self) -> 'outputs.BasicAuthenticationResponse':
        """
        The authentication information. Optional when creating an HTTP check; defaults to empty.
        """
        return pulumi.get(self, "auth_info")

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte.Note: If client libraries aren't used (which performs the conversion automatically) base64 encode your body data since the field is of bytes type.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customContentType")
    def custom_content_type(self) -> str:
        """
        A user provided content type header to use for the check. The invalid configurations outlined in the content_type field apply to custom_content_type, as well as the following: 1. content_type is URL_ENCODED and custom_content_type is set. 2. content_type is USER_PROVIDED and custom_content_type is not set.
        """
        return pulumi.get(self, "custom_content_type")

    @property
    @pulumi.getter
    def headers(self) -> Mapping[str, str]:
        """
        The list of headers to send as part of the Uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="maskHeaders")
    def mask_headers(self) -> bool:
        """
        Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
        """
        return pulumi.get(self, "mask_headers")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Optional (defaults to "/"). The path to the page against which to run the check. Will be combined with the host (specified within the monitored_resource) and port to construct the full URL. If the provided path does not begin with "/", a "/" will be prepended automatically.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pingConfig")
    def ping_config(self) -> 'outputs.PingConfigResponse':
        """
        Contains information needed to add pings to an HTTP check.
        """
        return pulumi.get(self, "ping_config")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Optional (defaults to 80 when use_ssl is false, and 443 when use_ssl is true). The TCP port on the HTTP server against which to run the check. Will be combined with host (specified within the monitored_resource) and path to construct the full URL.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        """
        The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> bool:
        """
        If true, use HTTPS instead of HTTP to run the check.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter(name="validateSsl")
    def validate_ssl(self) -> bool:
        """
        Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
        """
        return pulumi.get(self, "validate_ssl")


@pulumi.output_type
class InternalCheckerResponse(dict):
    """
    An internal checker allows Uptime checks to run on private/internal GCP resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "gcpZone":
            suggest = "gcp_zone"
        elif key == "peerProjectId":
            suggest = "peer_project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InternalCheckerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InternalCheckerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InternalCheckerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 gcp_zone: str,
                 name: str,
                 network: str,
                 peer_project_id: str,
                 state: str):
        """
        An internal checker allows Uptime checks to run on private/internal GCP resources.
        :param str display_name: The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.
        :param str gcp_zone: The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.
        :param str name: A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.
        :param str network: The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: "default").
        :param str peer_project_id: The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.
        :param str state: The current operational state of the internal checker.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "gcp_zone", gcp_zone)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "peer_project_id", peer_project_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="gcpZone")
    def gcp_zone(self) -> str:
        """
        The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.
        """
        return pulumi.get(self, "gcp_zone")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: "default").
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peerProjectId")
    def peer_project_id(self) -> str:
        """
        The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.
        """
        return pulumi.get(self, "peer_project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current operational state of the internal checker.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class IstioCanonicalServiceResponse(dict):
    """
    Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canonicalService":
            suggest = "canonical_service"
        elif key == "canonicalServiceNamespace":
            suggest = "canonical_service_namespace"
        elif key == "meshUid":
            suggest = "mesh_uid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IstioCanonicalServiceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IstioCanonicalServiceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IstioCanonicalServiceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canonical_service: str,
                 canonical_service_namespace: str,
                 mesh_uid: str):
        """
        Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
        :param str canonical_service: The name of the canonical service underlying this service. Corresponds to the destination_canonical_service_name metric label in label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        :param str canonical_service_namespace: The namespace of the canonical service underlying this service. Corresponds to the destination_canonical_service_namespace metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        :param str mesh_uid: Identifier for the Istio mesh in which this canonical service is defined. Corresponds to the mesh_uid metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        """
        pulumi.set(__self__, "canonical_service", canonical_service)
        pulumi.set(__self__, "canonical_service_namespace", canonical_service_namespace)
        pulumi.set(__self__, "mesh_uid", mesh_uid)

    @property
    @pulumi.getter(name="canonicalService")
    def canonical_service(self) -> str:
        """
        The name of the canonical service underlying this service. Corresponds to the destination_canonical_service_name metric label in label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        """
        return pulumi.get(self, "canonical_service")

    @property
    @pulumi.getter(name="canonicalServiceNamespace")
    def canonical_service_namespace(self) -> str:
        """
        The namespace of the canonical service underlying this service. Corresponds to the destination_canonical_service_namespace metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        """
        return pulumi.get(self, "canonical_service_namespace")

    @property
    @pulumi.getter(name="meshUid")
    def mesh_uid(self) -> str:
        """
        Identifier for the Istio mesh in which this canonical service is defined. Corresponds to the mesh_uid metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
        """
        return pulumi.get(self, "mesh_uid")


@pulumi.output_type
class JsonPathMatcherResponse(dict):
    """
    Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonMatcher":
            suggest = "json_matcher"
        elif key == "jsonPath":
            suggest = "json_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JsonPathMatcherResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JsonPathMatcherResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JsonPathMatcherResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 json_matcher: str,
                 json_path: str):
        """
        Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
        :param str json_matcher: The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
        :param str json_path: JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
        """
        pulumi.set(__self__, "json_matcher", json_matcher)
        pulumi.set(__self__, "json_path", json_path)

    @property
    @pulumi.getter(name="jsonMatcher")
    def json_matcher(self) -> str:
        """
        The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
        """
        return pulumi.get(self, "json_matcher")

    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> str:
        """
        JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
        """
        return pulumi.get(self, "json_path")


@pulumi.output_type
class LabelDescriptorResponse(dict):
    """
    A description of a label.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LabelDescriptorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LabelDescriptorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LabelDescriptorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 key: str,
                 value_type: str):
        """
        A description of a label.
        :param str description: A human-readable description for the label.
        :param str key: The key for this label. The key must meet the following criteria: Does not exceed 100 characters. Matches the following regular expression: [a-zA-Z][a-zA-Z0-9_]* The first character must be an upper- or lower-case letter. The remaining characters must be letters, digits, or underscores.
        :param str value_type: The type of data that can be assigned to the label.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-readable description for the label.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for this label. The key must meet the following criteria: Does not exceed 100 characters. Matches the following regular expression: [a-zA-Z][a-zA-Z0-9_]* The first character must be an upper- or lower-case letter. The remaining characters must be letters, digits, or underscores.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        The type of data that can be assigned to the label.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class LatencyCriteriaResponse(dict):
    """
    Parameters for a latency threshold SLI.
    """
    def __init__(__self__, *,
                 threshold: str):
        """
        Parameters for a latency threshold SLI.
        :param str threshold: Good service is defined to be the count of requests made to this service that return in no more than threshold.
        """
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def threshold(self) -> str:
        """
        Good service is defined to be the count of requests made to this service that return in no more than threshold.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class LogMatchResponse(dict):
    """
    A condition type that checks whether a log message in the scoping project (https://cloud.google.com/monitoring/api/v3#project_name) satisfies the given filter. Logs from other projects in the metrics scope are not evaluated.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelExtractors":
            suggest = "label_extractors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogMatchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogMatchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogMatchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter: str,
                 label_extractors: Mapping[str, str]):
        """
        A condition type that checks whether a log message in the scoping project (https://cloud.google.com/monitoring/api/v3#project_name) satisfies the given filter. Logs from other projects in the metrics scope are not evaluated.
        :param str filter: A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.
        :param Mapping[str, str] label_extractors: Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "label_extractors", label_extractors)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="labelExtractors")
    def label_extractors(self) -> Mapping[str, str]:
        """
        Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.
        """
        return pulumi.get(self, "label_extractors")


@pulumi.output_type
class MeshIstioResponse(dict):
    """
    Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "meshUid":
            suggest = "mesh_uid"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "serviceNamespace":
            suggest = "service_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeshIstioResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeshIstioResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeshIstioResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mesh_uid: str,
                 service_name: str,
                 service_namespace: str):
        """
        Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
        :param str mesh_uid: Identifier for the mesh in which this Istio service is defined. Corresponds to the mesh_uid metric label in Istio metrics.
        :param str service_name: The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
        :param str service_namespace: The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
        """
        pulumi.set(__self__, "mesh_uid", mesh_uid)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_namespace", service_namespace)

    @property
    @pulumi.getter(name="meshUid")
    def mesh_uid(self) -> str:
        """
        Identifier for the mesh in which this Istio service is defined. Corresponds to the mesh_uid metric label in Istio metrics.
        """
        return pulumi.get(self, "mesh_uid")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceNamespace")
    def service_namespace(self) -> str:
        """
        The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
        """
        return pulumi.get(self, "service_namespace")


@pulumi.output_type
class MetricAbsenceResponse(dict):
    """
    A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.
    """
    def __init__(__self__, *,
                 aggregations: Sequence['outputs.AggregationResponse'],
                 duration: str,
                 filter: str,
                 trigger: 'outputs.TriggerResponse'):
        """
        A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.
        :param Sequence['AggregationResponse'] aggregations: Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
        :param str duration: The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.
        :param str filter: A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
        :param 'TriggerResponse' trigger: The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations.
        """
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence['outputs.AggregationResponse']:
        """
        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
        """
        return pulumi.get(self, "aggregations")

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def trigger(self) -> 'outputs.TriggerResponse':
        """
        The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations.
        """
        return pulumi.get(self, "trigger")


@pulumi.output_type
class MetricDescriptorMetadataResponse(dict):
    """
    Additional annotations that can be used to guide the usage of a metric.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingestDelay":
            suggest = "ingest_delay"
        elif key == "launchStage":
            suggest = "launch_stage"
        elif key == "samplePeriod":
            suggest = "sample_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricDescriptorMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricDescriptorMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricDescriptorMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingest_delay: str,
                 launch_stage: str,
                 sample_period: str):
        """
        Additional annotations that can be used to guide the usage of a metric.
        :param str ingest_delay: The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
        :param str launch_stage: Deprecated. Must use the MetricDescriptor.launch_stage instead.
        :param str sample_period: The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
        """
        pulumi.set(__self__, "ingest_delay", ingest_delay)
        pulumi.set(__self__, "launch_stage", launch_stage)
        pulumi.set(__self__, "sample_period", sample_period)

    @property
    @pulumi.getter(name="ingestDelay")
    def ingest_delay(self) -> str:
        """
        The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
        """
        return pulumi.get(self, "ingest_delay")

    @property
    @pulumi.getter(name="launchStage")
    @_utilities.deprecated("""Deprecated. Must use the MetricDescriptor.launch_stage instead.""")
    def launch_stage(self) -> str:
        """
        Deprecated. Must use the MetricDescriptor.launch_stage instead.
        """
        return pulumi.get(self, "launch_stage")

    @property
    @pulumi.getter(name="samplePeriod")
    def sample_period(self) -> str:
        """
        The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
        """
        return pulumi.get(self, "sample_period")


@pulumi.output_type
class MetricRangeResponse(dict):
    """
    A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min <= x <= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeSeries":
            suggest = "time_series"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricRangeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricRangeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricRangeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range: 'outputs.GoogleMonitoringV3RangeResponse',
                 time_series: str):
        """
        A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min <= x <= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE.
        :param 'GoogleMonitoringV3RangeResponse' range: Range of values considered "good." For a one-sided range, set one bound to an infinite value.
        :param str time_series: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
        """
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "time_series", time_series)

    @property
    @pulumi.getter
    def range(self) -> 'outputs.GoogleMonitoringV3RangeResponse':
        """
        Range of values considered "good." For a one-sided range, set one bound to an infinite value.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="timeSeries")
    def time_series(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
        """
        return pulumi.get(self, "time_series")


@pulumi.output_type
class MetricThresholdResponse(dict):
    """
    A condition type that compares a collection of time series against a threshold.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "denominatorAggregations":
            suggest = "denominator_aggregations"
        elif key == "denominatorFilter":
            suggest = "denominator_filter"
        elif key == "evaluationMissingData":
            suggest = "evaluation_missing_data"
        elif key == "forecastOptions":
            suggest = "forecast_options"
        elif key == "thresholdValue":
            suggest = "threshold_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricThresholdResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricThresholdResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricThresholdResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregations: Sequence['outputs.AggregationResponse'],
                 comparison: str,
                 denominator_aggregations: Sequence['outputs.AggregationResponse'],
                 denominator_filter: str,
                 duration: str,
                 evaluation_missing_data: str,
                 filter: str,
                 forecast_options: 'outputs.ForecastOptionsResponse',
                 threshold_value: float,
                 trigger: 'outputs.TriggerResponse'):
        """
        A condition type that compares a collection of time series against a threshold.
        :param Sequence['AggregationResponse'] aggregations: Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
        :param str comparison: The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
        :param Sequence['AggregationResponse'] denominator_aggregations: Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
        :param str denominator_filter: A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
        :param str duration: The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
        :param str evaluation_missing_data: A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
        :param str filter: A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
        :param 'ForecastOptionsResponse' forecast_options: When this field is present, the MetricThreshold condition forecasts whether the time series is predicted to violate the threshold within the forecast_horizon. When this field is not set, the MetricThreshold tests the current value of the timeseries against the threshold.
        :param float threshold_value: A value against which to compare the time series.
        :param 'TriggerResponse' trigger: The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
        """
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "denominator_aggregations", denominator_aggregations)
        pulumi.set(__self__, "denominator_filter", denominator_filter)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "evaluation_missing_data", evaluation_missing_data)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "forecast_options", forecast_options)
        pulumi.set(__self__, "threshold_value", threshold_value)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence['outputs.AggregationResponse']:
        """
        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
        """
        return pulumi.get(self, "aggregations")

    @property
    @pulumi.getter
    def comparison(self) -> str:
        """
        The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter(name="denominatorAggregations")
    def denominator_aggregations(self) -> Sequence['outputs.AggregationResponse']:
        """
        Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
        """
        return pulumi.get(self, "denominator_aggregations")

    @property
    @pulumi.getter(name="denominatorFilter")
    def denominator_filter(self) -> str:
        """
        A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
        """
        return pulumi.get(self, "denominator_filter")

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="evaluationMissingData")
    def evaluation_missing_data(self) -> str:
        """
        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
        """
        return pulumi.get(self, "evaluation_missing_data")

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="forecastOptions")
    def forecast_options(self) -> 'outputs.ForecastOptionsResponse':
        """
        When this field is present, the MetricThreshold condition forecasts whether the time series is predicted to violate the threshold within the forecast_horizon. When this field is not set, the MetricThreshold tests the current value of the timeseries against the threshold.
        """
        return pulumi.get(self, "forecast_options")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> float:
        """
        A value against which to compare the time series.
        """
        return pulumi.get(self, "threshold_value")

    @property
    @pulumi.getter
    def trigger(self) -> 'outputs.TriggerResponse':
        """
        The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
        """
        return pulumi.get(self, "trigger")


@pulumi.output_type
class MonitoredResourceResponse(dict):
    """
    An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for "gce_instance" has labels "project_id", "instance_id" and "zone": { "type": "gce_instance", "labels": { "project_id": "my-project", "instance_id": "12345678901234", "zone": "us-central1-a" }} 
    """
    def __init__(__self__, *,
                 labels: Mapping[str, str],
                 type: str):
        """
        An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for "gce_instance" has labels "project_id", "instance_id" and "zone": { "type": "gce_instance", "labels": { "project_id": "my-project", "instance_id": "12345678901234", "zone": "us-central1-a" }} 
        :param Mapping[str, str] labels: Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
        :param str type: The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoringQueryLanguageConditionResponse(dict):
    """
    A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationMissingData":
            suggest = "evaluation_missing_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringQueryLanguageConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringQueryLanguageConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringQueryLanguageConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 evaluation_missing_data: str,
                 query: str,
                 trigger: 'outputs.TriggerResponse'):
        """
        A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).
        :param str duration: The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
        :param str evaluation_missing_data: A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
        :param str query: Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.
        :param 'TriggerResponse' trigger: The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "evaluation_missing_data", evaluation_missing_data)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="evaluationMissingData")
    def evaluation_missing_data(self) -> str:
        """
        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
        """
        return pulumi.get(self, "evaluation_missing_data")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def trigger(self) -> 'outputs.TriggerResponse':
        """
        The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
        """
        return pulumi.get(self, "trigger")


@pulumi.output_type
class MutationRecordResponse(dict):
    """
    Describes a change made to a configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mutateTime":
            suggest = "mutate_time"
        elif key == "mutatedBy":
            suggest = "mutated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MutationRecordResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MutationRecordResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MutationRecordResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mutate_time: str,
                 mutated_by: str):
        """
        Describes a change made to a configuration.
        :param str mutate_time: When the change occurred.
        :param str mutated_by: The email address of the user making the change.
        """
        pulumi.set(__self__, "mutate_time", mutate_time)
        pulumi.set(__self__, "mutated_by", mutated_by)

    @property
    @pulumi.getter(name="mutateTime")
    def mutate_time(self) -> str:
        """
        When the change occurred.
        """
        return pulumi.get(self, "mutate_time")

    @property
    @pulumi.getter(name="mutatedBy")
    def mutated_by(self) -> str:
        """
        The email address of the user making the change.
        """
        return pulumi.get(self, "mutated_by")


@pulumi.output_type
class NotificationChannelStrategyResponse(dict):
    """
    Control over how the notification channels in notification_channels are notified when this alert fires, on a per-channel basis.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationChannelNames":
            suggest = "notification_channel_names"
        elif key == "renotifyInterval":
            suggest = "renotify_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationChannelStrategyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationChannelStrategyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationChannelStrategyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_channel_names: Sequence[str],
                 renotify_interval: str):
        """
        Control over how the notification channels in notification_channels are notified when this alert fires, on a per-channel basis.
        :param Sequence[str] notification_channel_names: The full REST resource name for the notification channels that these settings apply to. Each of these correspond to the name field in one of the NotificationChannel objects referenced in the notification_channels field of this AlertPolicy. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 
        :param str renotify_interval: The frequency at which to send reminder notifications for open incidents.
        """
        pulumi.set(__self__, "notification_channel_names", notification_channel_names)
        pulumi.set(__self__, "renotify_interval", renotify_interval)

    @property
    @pulumi.getter(name="notificationChannelNames")
    def notification_channel_names(self) -> Sequence[str]:
        """
        The full REST resource name for the notification channels that these settings apply to. Each of these correspond to the name field in one of the NotificationChannel objects referenced in the notification_channels field of this AlertPolicy. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 
        """
        return pulumi.get(self, "notification_channel_names")

    @property
    @pulumi.getter(name="renotifyInterval")
    def renotify_interval(self) -> str:
        """
        The frequency at which to send reminder notifications for open incidents.
        """
        return pulumi.get(self, "renotify_interval")


@pulumi.output_type
class NotificationRateLimitResponse(dict):
    """
    Control over the rate of notifications sent to this alert policy's notification channels.
    """
    def __init__(__self__, *,
                 period: str):
        """
        Control over the rate of notifications sent to this alert policy's notification channels.
        :param str period: Not more than one notification per period.
        """
        pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter
    def period(self) -> str:
        """
        Not more than one notification per period.
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class PerformanceThresholdResponse(dict):
    """
    A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicSliPerformance":
            suggest = "basic_sli_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerformanceThresholdResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerformanceThresholdResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerformanceThresholdResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_sli_performance: 'outputs.BasicSliResponse',
                 performance: 'outputs.RequestBasedSliResponse',
                 threshold: float):
        """
        A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
        :param 'BasicSliResponse' basic_sli_performance: BasicSli to evaluate to judge window quality.
        :param 'RequestBasedSliResponse' performance: RequestBasedSli to evaluate to judge window quality.
        :param float threshold: If window performance >= threshold, the window is counted as good.
        """
        pulumi.set(__self__, "basic_sli_performance", basic_sli_performance)
        pulumi.set(__self__, "performance", performance)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="basicSliPerformance")
    def basic_sli_performance(self) -> 'outputs.BasicSliResponse':
        """
        BasicSli to evaluate to judge window quality.
        """
        return pulumi.get(self, "basic_sli_performance")

    @property
    @pulumi.getter
    def performance(self) -> 'outputs.RequestBasedSliResponse':
        """
        RequestBasedSli to evaluate to judge window quality.
        """
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        If window performance >= threshold, the window is counted as good.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class PingConfigResponse(dict):
    """
    Information involved in sending ICMP pings alongside public HTTP/TCP checks. For HTTP, the pings are performed for each part of the redirect chain.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pingsCount":
            suggest = "pings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PingConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PingConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PingConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pings_count: int):
        """
        Information involved in sending ICMP pings alongside public HTTP/TCP checks. For HTTP, the pings are performed for each part of the redirect chain.
        :param int pings_count: Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
        """
        pulumi.set(__self__, "pings_count", pings_count)

    @property
    @pulumi.getter(name="pingsCount")
    def pings_count(self) -> int:
        """
        Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
        """
        return pulumi.get(self, "pings_count")


@pulumi.output_type
class PrometheusQueryLanguageConditionResponse(dict):
    """
    A condition type that allows alert policies to be defined using Prometheus Query Language (PromQL) (https://prometheus.io/docs/prometheus/latest/querying/basics/).The PrometheusQueryLanguageCondition message contains information from a Prometheus alerting rule and its associated rule group.A Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). The semantics of a Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule).A Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/). The semantics of a Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group).Because Cloud Alerting has no representation of a Prometheus rule group resource, we must embed the information of the parent rule group inside each of the conditions that refer to it. We must also update the contents of all Prometheus alerts in case the information of their rule group changes.The PrometheusQueryLanguageCondition protocol buffer combines the information of the corresponding rule group and alerting rule. The structure of the PrometheusQueryLanguageCondition protocol buffer does NOT mimic the structure of the Prometheus rule group and alerting rule YAML declarations. The PrometheusQueryLanguageCondition protocol buffer may change in the future to support future rule group and/or alerting rule features. There are no new such features at the present time (2023-06-26).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertRule":
            suggest = "alert_rule"
        elif key == "evaluationInterval":
            suggest = "evaluation_interval"
        elif key == "ruleGroup":
            suggest = "rule_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrometheusQueryLanguageConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrometheusQueryLanguageConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrometheusQueryLanguageConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_rule: str,
                 duration: str,
                 evaluation_interval: str,
                 labels: Mapping[str, str],
                 query: str,
                 rule_group: str):
        """
        A condition type that allows alert policies to be defined using Prometheus Query Language (PromQL) (https://prometheus.io/docs/prometheus/latest/querying/basics/).The PrometheusQueryLanguageCondition message contains information from a Prometheus alerting rule and its associated rule group.A Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). The semantics of a Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule).A Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/). The semantics of a Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group).Because Cloud Alerting has no representation of a Prometheus rule group resource, we must embed the information of the parent rule group inside each of the conditions that refer to it. We must also update the contents of all Prometheus alerts in case the information of their rule group changes.The PrometheusQueryLanguageCondition protocol buffer combines the information of the corresponding rule group and alerting rule. The structure of the PrometheusQueryLanguageCondition protocol buffer does NOT mimic the structure of the Prometheus rule group and alerting rule YAML declarations. The PrometheusQueryLanguageCondition protocol buffer may change in the future to support future rule group and/or alerting rule features. There are no new such features at the present time (2023-06-26).
        :param str alert_rule: Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.
        :param str duration: Optional. Alerts are considered firing once their PromQL expression was evaluated to be "true" for this long. Alerts whose PromQL expression was not evaluated to be "true" for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.
        :param str evaluation_interval: Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.
        :param Mapping[str, str] labels: Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including "__name__" and "value". "labels" may be empty.
        :param str query: The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.
        :param str rule_group: Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.
        """
        pulumi.set(__self__, "alert_rule", alert_rule)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "evaluation_interval", evaluation_interval)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "rule_group", rule_group)

    @property
    @pulumi.getter(name="alertRule")
    def alert_rule(self) -> str:
        """
        Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.
        """
        return pulumi.get(self, "alert_rule")

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        Optional. Alerts are considered firing once their PromQL expression was evaluated to be "true" for this long. Alerts whose PromQL expression was not evaluated to be "true" for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="evaluationInterval")
    def evaluation_interval(self) -> str:
        """
        Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.
        """
        return pulumi.get(self, "evaluation_interval")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including "__name__" and "value". "labels" may be empty.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="ruleGroup")
    def rule_group(self) -> str:
        """
        Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.
        """
        return pulumi.get(self, "rule_group")


@pulumi.output_type
class RequestBasedSliResponse(dict):
    """
    Service Level Indicators for which atomic units of service are counted directly.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distributionCut":
            suggest = "distribution_cut"
        elif key == "goodTotalRatio":
            suggest = "good_total_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RequestBasedSliResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RequestBasedSliResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RequestBasedSliResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distribution_cut: 'outputs.DistributionCutResponse',
                 good_total_ratio: 'outputs.TimeSeriesRatioResponse'):
        """
        Service Level Indicators for which atomic units of service are counted directly.
        :param 'DistributionCutResponse' distribution_cut: distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
        :param 'TimeSeriesRatioResponse' good_total_ratio: good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
        """
        pulumi.set(__self__, "distribution_cut", distribution_cut)
        pulumi.set(__self__, "good_total_ratio", good_total_ratio)

    @property
    @pulumi.getter(name="distributionCut")
    def distribution_cut(self) -> 'outputs.DistributionCutResponse':
        """
        distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
        """
        return pulumi.get(self, "distribution_cut")

    @property
    @pulumi.getter(name="goodTotalRatio")
    def good_total_ratio(self) -> 'outputs.TimeSeriesRatioResponse':
        """
        good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
        """
        return pulumi.get(self, "good_total_ratio")


@pulumi.output_type
class ResourceGroupResponse(dict):
    """
    The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: str,
                 resource_type: str):
        """
        The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
        :param str group_id: The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
        :param str resource_type: The resource type of the group members.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of the group members.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class ResponseStatusCodeResponse(dict):
    """
    A status to accept. Either a status code class like "2xx", or an integer status code like "200".
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusClass":
            suggest = "status_class"
        elif key == "statusValue":
            suggest = "status_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseStatusCodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseStatusCodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseStatusCodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_class: str,
                 status_value: int):
        """
        A status to accept. Either a status code class like "2xx", or an integer status code like "200".
        :param str status_class: A class of status codes to accept.
        :param int status_value: A status code to accept.
        """
        pulumi.set(__self__, "status_class", status_class)
        pulumi.set(__self__, "status_value", status_value)

    @property
    @pulumi.getter(name="statusClass")
    def status_class(self) -> str:
        """
        A class of status codes to accept.
        """
        return pulumi.get(self, "status_class")

    @property
    @pulumi.getter(name="statusValue")
    def status_value(self) -> int:
        """
        A status code to accept.
        """
        return pulumi.get(self, "status_value")


@pulumi.output_type
class ServiceLevelIndicatorResponse(dict):
    """
    A Service-Level Indicator (SLI) describes the "performance" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a "custom" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicSli":
            suggest = "basic_sli"
        elif key == "requestBased":
            suggest = "request_based"
        elif key == "windowsBased":
            suggest = "windows_based"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLevelIndicatorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLevelIndicatorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLevelIndicatorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_sli: 'outputs.BasicSliResponse',
                 request_based: 'outputs.RequestBasedSliResponse',
                 windows_based: 'outputs.WindowsBasedSliResponse'):
        """
        A Service-Level Indicator (SLI) describes the "performance" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a "custom" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
        :param 'BasicSliResponse' basic_sli: Basic SLI on a well-known service type.
        :param 'RequestBasedSliResponse' request_based: Request-based SLIs
        :param 'WindowsBasedSliResponse' windows_based: Windows-based SLIs
        """
        pulumi.set(__self__, "basic_sli", basic_sli)
        pulumi.set(__self__, "request_based", request_based)
        pulumi.set(__self__, "windows_based", windows_based)

    @property
    @pulumi.getter(name="basicSli")
    def basic_sli(self) -> 'outputs.BasicSliResponse':
        """
        Basic SLI on a well-known service type.
        """
        return pulumi.get(self, "basic_sli")

    @property
    @pulumi.getter(name="requestBased")
    def request_based(self) -> 'outputs.RequestBasedSliResponse':
        """
        Request-based SLIs
        """
        return pulumi.get(self, "request_based")

    @property
    @pulumi.getter(name="windowsBased")
    def windows_based(self) -> 'outputs.WindowsBasedSliResponse':
        """
        Windows-based SLIs
        """
        return pulumi.get(self, "windows_based")


@pulumi.output_type
class StatusResponse(dict):
    """
    The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
    """
    def __init__(__self__, *,
                 code: int,
                 details: Sequence[Mapping[str, Any]],
                 message: str):
        """
        The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
        :param int code: The status code, which should be an enum value of google.rpc.Code.
        :param Sequence[Mapping[str, Any]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param str message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence[Mapping[str, Any]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class SyntheticMonitorTargetResponse(dict):
    """
    Describes a Synthetic Monitor to be invoked by Uptime.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudFunctionV2":
            suggest = "cloud_function_v2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticMonitorTargetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticMonitorTargetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticMonitorTargetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_function_v2: 'outputs.CloudFunctionV2TargetResponse'):
        """
        Describes a Synthetic Monitor to be invoked by Uptime.
        :param 'CloudFunctionV2TargetResponse' cloud_function_v2: Target a Synthetic Monitor GCFv2 instance.
        """
        pulumi.set(__self__, "cloud_function_v2", cloud_function_v2)

    @property
    @pulumi.getter(name="cloudFunctionV2")
    def cloud_function_v2(self) -> 'outputs.CloudFunctionV2TargetResponse':
        """
        Target a Synthetic Monitor GCFv2 instance.
        """
        return pulumi.get(self, "cloud_function_v2")


@pulumi.output_type
class TcpCheckResponse(dict):
    """
    Information required for a TCP Uptime check request.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pingConfig":
            suggest = "ping_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TcpCheckResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TcpCheckResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TcpCheckResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ping_config: 'outputs.PingConfigResponse',
                 port: int):
        """
        Information required for a TCP Uptime check request.
        :param 'PingConfigResponse' ping_config: Contains information needed to add pings to a TCP check.
        :param int port: The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
        """
        pulumi.set(__self__, "ping_config", ping_config)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="pingConfig")
    def ping_config(self) -> 'outputs.PingConfigResponse':
        """
        Contains information needed to add pings to a TCP check.
        """
        return pulumi.get(self, "ping_config")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class TelemetryResponse(dict):
    """
    Configuration for how to query telemetry on a Service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TelemetryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TelemetryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TelemetryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: str):
        """
        Configuration for how to query telemetry on a Service.
        :param str resource_name: The full name of the resource that defines this service. Formatted as described in https://cloud.google.com/apis/design/resource_names.
        """
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        The full name of the resource that defines this service. Formatted as described in https://cloud.google.com/apis/design/resource_names.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class TimeIntervalResponse(dict):
    """
    Describes a time interval: Reads: A half-open time interval. It includes the end time but excludes the start time: (startTime, endTime]. The start time must be specified, must be earlier than the end time, and should be no older than the data retention period for the metric. Writes: A closed time interval. It extends from the start time to the end time, and includes both: [startTime, endTime]. Valid time intervals depend on the MetricKind (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricKind) of the metric value. The end time must not be earlier than the start time, and the end time must not be more than 25 hours in the past or more than five minutes in the future. For GAUGE metrics, the startTime value is technically optional; if no value is specified, the start time defaults to the value of the end time, and the interval represents a single point in time. If both start and end times are specified, they must be identical. Such an interval is valid only for GAUGE metrics, which are point-in-time measurements. The end time of a new interval must be at least a millisecond after the end time of the previous interval. For DELTA metrics, the start time and end time must specify a non-zero interval, with subsequent points specifying contiguous and non-overlapping intervals. For DELTA metrics, the start time of the next interval must be at least a millisecond after the end time of the previous interval. For CUMULATIVE metrics, the start time and end time must specify a non-zero interval, with subsequent points specifying the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points. The new start time must be at least a millisecond after the end time of the previous interval. The start time of a new interval must be at least a millisecond after the end time of the previous interval because intervals are closed. If the start time of a new interval is the same as the end time of the previous interval, then data written at the new start time could overwrite data written at the previous end time.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TimeIntervalResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TimeIntervalResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TimeIntervalResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        Describes a time interval: Reads: A half-open time interval. It includes the end time but excludes the start time: (startTime, endTime]. The start time must be specified, must be earlier than the end time, and should be no older than the data retention period for the metric. Writes: A closed time interval. It extends from the start time to the end time, and includes both: [startTime, endTime]. Valid time intervals depend on the MetricKind (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricKind) of the metric value. The end time must not be earlier than the start time, and the end time must not be more than 25 hours in the past or more than five minutes in the future. For GAUGE metrics, the startTime value is technically optional; if no value is specified, the start time defaults to the value of the end time, and the interval represents a single point in time. If both start and end times are specified, they must be identical. Such an interval is valid only for GAUGE metrics, which are point-in-time measurements. The end time of a new interval must be at least a millisecond after the end time of the previous interval. For DELTA metrics, the start time and end time must specify a non-zero interval, with subsequent points specifying contiguous and non-overlapping intervals. For DELTA metrics, the start time of the next interval must be at least a millisecond after the end time of the previous interval. For CUMULATIVE metrics, the start time and end time must specify a non-zero interval, with subsequent points specifying the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points. The new start time must be at least a millisecond after the end time of the previous interval. The start time of a new interval must be at least a millisecond after the end time of the previous interval because intervals are closed. If the start time of a new interval is the same as the end time of the previous interval, then data written at the new start time could overwrite data written at the previous end time.
        :param str end_time: The end of the time interval.
        :param str start_time: Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The end of the time interval.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class TimeSeriesRatioResponse(dict):
    """
    A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service = total_service will be assumed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "badServiceFilter":
            suggest = "bad_service_filter"
        elif key == "goodServiceFilter":
            suggest = "good_service_filter"
        elif key == "totalServiceFilter":
            suggest = "total_service_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TimeSeriesRatioResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TimeSeriesRatioResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TimeSeriesRatioResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bad_service_filter: str,
                 good_service_filter: str,
                 total_service_filter: str):
        """
        A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service = total_service will be assumed.
        :param str bad_service_filter: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param str good_service_filter: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        :param str total_service_filter: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        pulumi.set(__self__, "bad_service_filter", bad_service_filter)
        pulumi.set(__self__, "good_service_filter", good_service_filter)
        pulumi.set(__self__, "total_service_filter", total_service_filter)

    @property
    @pulumi.getter(name="badServiceFilter")
    def bad_service_filter(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        return pulumi.get(self, "bad_service_filter")

    @property
    @pulumi.getter(name="goodServiceFilter")
    def good_service_filter(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        return pulumi.get(self, "good_service_filter")

    @property
    @pulumi.getter(name="totalServiceFilter")
    def total_service_filter(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
        """
        return pulumi.get(self, "total_service_filter")


@pulumi.output_type
class TriggerResponse(dict):
    """
    Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.
    """
    def __init__(__self__, *,
                 count: int,
                 percent: float):
        """
        Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.
        :param int count: The absolute number of time series that must fail the predicate for the condition to be triggered.
        :param float percent: The percentage of time series that must fail the predicate for the condition to be triggered.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The absolute number of time series that must fail the predicate for the condition to be triggered.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def percent(self) -> float:
        """
        The percentage of time series that must fail the predicate for the condition to be triggered.
        """
        return pulumi.get(self, "percent")


@pulumi.output_type
class WindowsBasedSliResponse(dict):
    """
    A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "goodBadMetricFilter":
            suggest = "good_bad_metric_filter"
        elif key == "goodTotalRatioThreshold":
            suggest = "good_total_ratio_threshold"
        elif key == "metricMeanInRange":
            suggest = "metric_mean_in_range"
        elif key == "metricSumInRange":
            suggest = "metric_sum_in_range"
        elif key == "windowPeriod":
            suggest = "window_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WindowsBasedSliResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WindowsBasedSliResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WindowsBasedSliResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 good_bad_metric_filter: str,
                 good_total_ratio_threshold: 'outputs.PerformanceThresholdResponse',
                 metric_mean_in_range: 'outputs.MetricRangeResponse',
                 metric_sum_in_range: 'outputs.MetricRangeResponse',
                 window_period: str):
        """
        A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion.
        :param str good_bad_metric_filter: A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.
        :param 'PerformanceThresholdResponse' good_total_ratio_threshold: A window is good if its performance is high enough.
        :param 'MetricRangeResponse' metric_mean_in_range: A window is good if the metric's value is in a good range, averaged across returned streams.
        :param 'MetricRangeResponse' metric_sum_in_range: A window is good if the metric's value is in a good range, summed across returned streams.
        :param str window_period: Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.
        """
        pulumi.set(__self__, "good_bad_metric_filter", good_bad_metric_filter)
        pulumi.set(__self__, "good_total_ratio_threshold", good_total_ratio_threshold)
        pulumi.set(__self__, "metric_mean_in_range", metric_mean_in_range)
        pulumi.set(__self__, "metric_sum_in_range", metric_sum_in_range)
        pulumi.set(__self__, "window_period", window_period)

    @property
    @pulumi.getter(name="goodBadMetricFilter")
    def good_bad_metric_filter(self) -> str:
        """
        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.
        """
        return pulumi.get(self, "good_bad_metric_filter")

    @property
    @pulumi.getter(name="goodTotalRatioThreshold")
    def good_total_ratio_threshold(self) -> 'outputs.PerformanceThresholdResponse':
        """
        A window is good if its performance is high enough.
        """
        return pulumi.get(self, "good_total_ratio_threshold")

    @property
    @pulumi.getter(name="metricMeanInRange")
    def metric_mean_in_range(self) -> 'outputs.MetricRangeResponse':
        """
        A window is good if the metric's value is in a good range, averaged across returned streams.
        """
        return pulumi.get(self, "metric_mean_in_range")

    @property
    @pulumi.getter(name="metricSumInRange")
    def metric_sum_in_range(self) -> 'outputs.MetricRangeResponse':
        """
        A window is good if the metric's value is in a good range, summed across returned streams.
        """
        return pulumi.get(self, "metric_sum_in_range")

    @property
    @pulumi.getter(name="windowPeriod")
    def window_period(self) -> str:
        """
        Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.
        """
        return pulumi.get(self, "window_period")


