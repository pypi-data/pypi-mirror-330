# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GoogleCloudDatacatalogLineageV1EntityReferenceResponse',
    'GoogleCloudDatacatalogLineageV1EventLinkResponse',
    'GoogleCloudDatacatalogLineageV1OriginResponse',
]

@pulumi.output_type
class GoogleCloudDatacatalogLineageV1EntityReferenceResponse(dict):
    """
    The soft reference to everything you can attach a lineage event to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullyQualifiedName":
            suggest = "fully_qualified_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogLineageV1EntityReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogLineageV1EntityReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogLineageV1EntityReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fully_qualified_name: str):
        """
        The soft reference to everything you can attach a lineage event to.
        :param str fully_qualified_name: [Fully Qualified Name (FQN)](https://cloud.google.com/data-catalog/docs/fully-qualified-names) of the entity.
        """
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> str:
        """
        [Fully Qualified Name (FQN)](https://cloud.google.com/data-catalog/docs/fully-qualified-names) of the entity.
        """
        return pulumi.get(self, "fully_qualified_name")


@pulumi.output_type
class GoogleCloudDatacatalogLineageV1EventLinkResponse(dict):
    """
    A lineage between source and target entities.
    """
    def __init__(__self__, *,
                 source: 'outputs.GoogleCloudDatacatalogLineageV1EntityReferenceResponse',
                 target: 'outputs.GoogleCloudDatacatalogLineageV1EntityReferenceResponse'):
        """
        A lineage between source and target entities.
        :param 'GoogleCloudDatacatalogLineageV1EntityReferenceResponse' source: Reference to the source entity
        :param 'GoogleCloudDatacatalogLineageV1EntityReferenceResponse' target: Reference to the target entity
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def source(self) -> 'outputs.GoogleCloudDatacatalogLineageV1EntityReferenceResponse':
        """
        Reference to the source entity
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.GoogleCloudDatacatalogLineageV1EntityReferenceResponse':
        """
        Reference to the target entity
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GoogleCloudDatacatalogLineageV1OriginResponse(dict):
    """
    Origin of a process.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudDatacatalogLineageV1OriginResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudDatacatalogLineageV1OriginResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudDatacatalogLineageV1OriginResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 source_type: str):
        """
        Origin of a process.
        :param str name: If the source_type isn't CUSTOM, the value of this field should be a GCP resource name of the system, which reports lineage. The project and location parts of the resource name must match the project and location of the lineage resource being created. Examples: - `{source_type: COMPOSER, name: "projects/foo/locations/us/environments/bar"}` - `{source_type: BIGQUERY, name: "projects/foo/locations/eu"}` - `{source_type: CUSTOM, name: "myCustomIntegration"}`
        :param str source_type: Type of the source. Use of a source_type other than `CUSTOM` for process creation or updating is highly discouraged, and may be restricted in the future without notice.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        If the source_type isn't CUSTOM, the value of this field should be a GCP resource name of the system, which reports lineage. The project and location parts of the resource name must match the project and location of the lineage resource being created. Examples: - `{source_type: COMPOSER, name: "projects/foo/locations/us/environments/bar"}` - `{source_type: BIGQUERY, name: "projects/foo/locations/eu"}` - `{source_type: CUSTOM, name: "myCustomIntegration"}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Type of the source. Use of a source_type other than `CUSTOM` for process creation or updating is highly discouraged, and may be restricted in the future without notice.
        """
        return pulumi.get(self, "source_type")


