# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DirectoryServicesConfigResponse',
    'FileShareConfigResponse',
    'ManagedActiveDirectoryConfigResponse',
    'NetworkConfigResponse',
    'NfsExportOptionsResponse',
]

@pulumi.output_type
class DirectoryServicesConfigResponse(dict):
    """
    Directory Services configuration for Kerberos-based authentication.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedActiveDirectory":
            suggest = "managed_active_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DirectoryServicesConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DirectoryServicesConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DirectoryServicesConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_active_directory: 'outputs.ManagedActiveDirectoryConfigResponse'):
        """
        Directory Services configuration for Kerberos-based authentication.
        :param 'ManagedActiveDirectoryConfigResponse' managed_active_directory: Configuration for Managed Service for Microsoft Active Directory.
        """
        pulumi.set(__self__, "managed_active_directory", managed_active_directory)

    @property
    @pulumi.getter(name="managedActiveDirectory")
    def managed_active_directory(self) -> 'outputs.ManagedActiveDirectoryConfigResponse':
        """
        Configuration for Managed Service for Microsoft Active Directory.
        """
        return pulumi.get(self, "managed_active_directory")


@pulumi.output_type
class FileShareConfigResponse(dict):
    """
    File share configuration for the instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityGb":
            suggest = "capacity_gb"
        elif key == "nfsExportOptions":
            suggest = "nfs_export_options"
        elif key == "sourceBackup":
            suggest = "source_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileShareConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileShareConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileShareConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_gb: str,
                 name: str,
                 nfs_export_options: Sequence['outputs.NfsExportOptionsResponse'],
                 source_backup: str):
        """
        File share configuration for the instance.
        :param str capacity_gb: File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.
        :param str name: The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores [a-z0-9_]. Must start with a letter. Immutable.
        :param Sequence['NfsExportOptionsResponse'] nfs_export_options: Nfs Export Options. There is a limit of 10 export options per file share.
        :param str source_backup: The resource name of the backup, in the format `projects/{project_id}/locations/{location_id}/backups/{backup_id}`, that this file share has been restored from.
        """
        pulumi.set(__self__, "capacity_gb", capacity_gb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nfs_export_options", nfs_export_options)
        pulumi.set(__self__, "source_backup", source_backup)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> str:
        """
        File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.
        """
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores [a-z0-9_]. Must start with a letter. Immutable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nfsExportOptions")
    def nfs_export_options(self) -> Sequence['outputs.NfsExportOptionsResponse']:
        """
        Nfs Export Options. There is a limit of 10 export options per file share.
        """
        return pulumi.get(self, "nfs_export_options")

    @property
    @pulumi.getter(name="sourceBackup")
    def source_backup(self) -> str:
        """
        The resource name of the backup, in the format `projects/{project_id}/locations/{location_id}/backups/{backup_id}`, that this file share has been restored from.
        """
        return pulumi.get(self, "source_backup")


@pulumi.output_type
class ManagedActiveDirectoryConfigResponse(dict):
    """
    ManagedActiveDirectoryConfig contains all the parameters for connecting to Managed Active Directory.
    """
    def __init__(__self__, *,
                 computer: str,
                 domain: str):
        """
        ManagedActiveDirectoryConfig contains all the parameters for connecting to Managed Active Directory.
        :param str computer: The computer name is used as a prefix to the mount remote target. Example: if the computer_name is `my-computer`, the mount command will look like: `$mount -o vers=4,sec=krb5 my-computer.filestore.:`.
        :param str domain: Fully qualified domain name.
        """
        pulumi.set(__self__, "computer", computer)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def computer(self) -> str:
        """
        The computer name is used as a prefix to the mount remote target. Example: if the computer_name is `my-computer`, the mount command will look like: `$mount -o vers=4,sec=krb5 my-computer.filestore.:`.
        """
        return pulumi.get(self, "computer")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class NetworkConfigResponse(dict):
    """
    Network configuration for the instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectMode":
            suggest = "connect_mode"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "reservedIpRange":
            suggest = "reserved_ip_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_mode: str,
                 ip_addresses: Sequence[str],
                 modes: Sequence[str],
                 network: str,
                 reserved_ip_range: str):
        """
        Network configuration for the instance.
        :param str connect_mode: The network connect mode of the Filestore instance. If not provided, the connect mode defaults to DIRECT_PEERING.
        :param Sequence[str] ip_addresses: IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or IPv6 addresses in the format `{block1}:{block2}:{block3}:{block4}:{block5}:{block6}:{block7}:{block8}`.
        :param Sequence[str] modes: Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
        :param str network: The name of the Google Compute Engine [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected.
        :param str reserved_ip_range: Optional, reserved_ip_range can have one of the following two types of values. * CIDR range value when using DIRECT_PEERING connect mode. * [Allocated IP address range](https://cloud.google.com/compute/docs/ip-addresses/reserve-static-internal-ip-address) when using PRIVATE_SERVICE_ACCESS connect mode. When the name of an allocated IP address range is specified, it must be one of the ranges associated with the private service access connection. When specified as a direct CIDR value, it must be a /29 CIDR block for Basic tier, a /24 CIDR block for High Scale tier, or a /26 CIDR block for Enterprise tier in one of the [internal IP address ranges](https://www.arin.net/reference/research/statistics/address_filters/) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29, 192.168.0.0/24, or 192.168.0.0/26, respectively. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Filestore instances in the selected VPC network.
        """
        pulumi.set(__self__, "connect_mode", connect_mode)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "modes", modes)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "reserved_ip_range", reserved_ip_range)

    @property
    @pulumi.getter(name="connectMode")
    def connect_mode(self) -> str:
        """
        The network connect mode of the Filestore instance. If not provided, the connect mode defaults to DIRECT_PEERING.
        """
        return pulumi.get(self, "connect_mode")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or IPv6 addresses in the format `{block1}:{block2}:{block3}:{block4}:{block5}:{block6}:{block7}:{block8}`.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def modes(self) -> Sequence[str]:
        """
        Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
        """
        return pulumi.get(self, "modes")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The name of the Google Compute Engine [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="reservedIpRange")
    def reserved_ip_range(self) -> str:
        """
        Optional, reserved_ip_range can have one of the following two types of values. * CIDR range value when using DIRECT_PEERING connect mode. * [Allocated IP address range](https://cloud.google.com/compute/docs/ip-addresses/reserve-static-internal-ip-address) when using PRIVATE_SERVICE_ACCESS connect mode. When the name of an allocated IP address range is specified, it must be one of the ranges associated with the private service access connection. When specified as a direct CIDR value, it must be a /29 CIDR block for Basic tier, a /24 CIDR block for High Scale tier, or a /26 CIDR block for Enterprise tier in one of the [internal IP address ranges](https://www.arin.net/reference/research/statistics/address_filters/) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29, 192.168.0.0/24, or 192.168.0.0/26, respectively. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Filestore instances in the selected VPC network.
        """
        return pulumi.get(self, "reserved_ip_range")


@pulumi.output_type
class NfsExportOptionsResponse(dict):
    """
    NFS export options specifications.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessMode":
            suggest = "access_mode"
        elif key == "anonGid":
            suggest = "anon_gid"
        elif key == "anonUid":
            suggest = "anon_uid"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityFlavors":
            suggest = "security_flavors"
        elif key == "squashMode":
            suggest = "squash_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NfsExportOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NfsExportOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NfsExportOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_mode: str,
                 anon_gid: str,
                 anon_uid: str,
                 ip_ranges: Sequence[str],
                 security_flavors: Sequence[str],
                 squash_mode: str):
        """
        NFS export options specifications.
        :param str access_mode: Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
        :param str anon_gid: An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
        :param str anon_uid: An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
        :param Sequence[str] ip_ranges: List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
        :param Sequence[str] security_flavors: The security flavors allowed for mount operations. The default is AUTH_SYS.
        :param str squash_mode: Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
        """
        pulumi.set(__self__, "access_mode", access_mode)
        pulumi.set(__self__, "anon_gid", anon_gid)
        pulumi.set(__self__, "anon_uid", anon_uid)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "security_flavors", security_flavors)
        pulumi.set(__self__, "squash_mode", squash_mode)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> str:
        """
        Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="anonGid")
    def anon_gid(self) -> str:
        """
        An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
        """
        return pulumi.get(self, "anon_gid")

    @property
    @pulumi.getter(name="anonUid")
    def anon_uid(self) -> str:
        """
        An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
        """
        return pulumi.get(self, "anon_uid")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        """
        List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="securityFlavors")
    def security_flavors(self) -> Sequence[str]:
        """
        The security flavors allowed for mount operations. The default is AUTH_SYS.
        """
        return pulumi.get(self, "security_flavors")

    @property
    @pulumi.getter(name="squashMode")
    def squash_mode(self) -> str:
        """
        Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
        """
        return pulumi.get(self, "squash_mode")


