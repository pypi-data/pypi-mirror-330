# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDataPolicyResult',
    'AwaitableGetDataPolicyResult',
    'get_data_policy',
    'get_data_policy_output',
]

@pulumi.output_type
class GetDataPolicyResult:
    def __init__(__self__, data_masking_policy=None, data_policy_id=None, data_policy_type=None, name=None, policy_tag=None):
        if data_masking_policy and not isinstance(data_masking_policy, dict):
            raise TypeError("Expected argument 'data_masking_policy' to be a dict")
        pulumi.set(__self__, "data_masking_policy", data_masking_policy)
        if data_policy_id and not isinstance(data_policy_id, str):
            raise TypeError("Expected argument 'data_policy_id' to be a str")
        pulumi.set(__self__, "data_policy_id", data_policy_id)
        if data_policy_type and not isinstance(data_policy_type, str):
            raise TypeError("Expected argument 'data_policy_type' to be a str")
        pulumi.set(__self__, "data_policy_type", data_policy_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_tag and not isinstance(policy_tag, str):
            raise TypeError("Expected argument 'policy_tag' to be a str")
        pulumi.set(__self__, "policy_tag", policy_tag)

    @property
    @pulumi.getter(name="dataMaskingPolicy")
    def data_masking_policy(self) -> 'outputs.DataMaskingPolicyResponse':
        """
        The data masking policy that specifies the data masking rule to use.
        """
        return pulumi.get(self, "data_masking_policy")

    @property
    @pulumi.getter(name="dataPolicyId")
    def data_policy_id(self) -> str:
        """
        User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
        """
        return pulumi.get(self, "data_policy_id")

    @property
    @pulumi.getter(name="dataPolicyType")
    def data_policy_type(self) -> str:
        """
        Type of data policy.
        """
        return pulumi.get(self, "data_policy_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyTag")
    def policy_tag(self) -> str:
        """
        Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
        """
        return pulumi.get(self, "policy_tag")


class AwaitableGetDataPolicyResult(GetDataPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataPolicyResult(
            data_masking_policy=self.data_masking_policy,
            data_policy_id=self.data_policy_id,
            data_policy_type=self.data_policy_type,
            name=self.name,
            policy_tag=self.policy_tag)


def get_data_policy(data_policy_id: Optional[str] = None,
                    location: Optional[str] = None,
                    project: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataPolicyResult:
    """
    Gets the data policy specified by its resource name.
    """
    __args__ = dict()
    __args__['dataPolicyId'] = data_policy_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:bigquerydatapolicy/v1:getDataPolicy', __args__, opts=opts, typ=GetDataPolicyResult).value

    return AwaitableGetDataPolicyResult(
        data_masking_policy=pulumi.get(__ret__, 'data_masking_policy'),
        data_policy_id=pulumi.get(__ret__, 'data_policy_id'),
        data_policy_type=pulumi.get(__ret__, 'data_policy_type'),
        name=pulumi.get(__ret__, 'name'),
        policy_tag=pulumi.get(__ret__, 'policy_tag'))


@_utilities.lift_output_func(get_data_policy)
def get_data_policy_output(data_policy_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataPolicyResult]:
    """
    Gets the data policy specified by its resource name.
    """
    ...
