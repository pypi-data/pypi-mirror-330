# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DataPolicyArgs', 'DataPolicy']

@pulumi.input_type
class DataPolicyArgs:
    def __init__(__self__, *,
                 data_masking_policy: Optional[pulumi.Input['DataMaskingPolicyArgs']] = None,
                 data_policy_id: Optional[pulumi.Input[str]] = None,
                 data_policy_type: Optional[pulumi.Input['DataPolicyDataPolicyType']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 policy_tag: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DataPolicy resource.
        :param pulumi.Input['DataMaskingPolicyArgs'] data_masking_policy: The data masking policy that specifies the data masking rule to use.
        :param pulumi.Input[str] data_policy_id: User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
        :param pulumi.Input['DataPolicyDataPolicyType'] data_policy_type: Type of data policy.
        :param pulumi.Input[str] policy_tag: Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
        """
        if data_masking_policy is not None:
            pulumi.set(__self__, "data_masking_policy", data_masking_policy)
        if data_policy_id is not None:
            pulumi.set(__self__, "data_policy_id", data_policy_id)
        if data_policy_type is not None:
            pulumi.set(__self__, "data_policy_type", data_policy_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if policy_tag is not None:
            pulumi.set(__self__, "policy_tag", policy_tag)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="dataMaskingPolicy")
    def data_masking_policy(self) -> Optional[pulumi.Input['DataMaskingPolicyArgs']]:
        """
        The data masking policy that specifies the data masking rule to use.
        """
        return pulumi.get(self, "data_masking_policy")

    @data_masking_policy.setter
    def data_masking_policy(self, value: Optional[pulumi.Input['DataMaskingPolicyArgs']]):
        pulumi.set(self, "data_masking_policy", value)

    @property
    @pulumi.getter(name="dataPolicyId")
    def data_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
        """
        return pulumi.get(self, "data_policy_id")

    @data_policy_id.setter
    def data_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_policy_id", value)

    @property
    @pulumi.getter(name="dataPolicyType")
    def data_policy_type(self) -> Optional[pulumi.Input['DataPolicyDataPolicyType']]:
        """
        Type of data policy.
        """
        return pulumi.get(self, "data_policy_type")

    @data_policy_type.setter
    def data_policy_type(self, value: Optional[pulumi.Input['DataPolicyDataPolicyType']]):
        pulumi.set(self, "data_policy_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="policyTag")
    def policy_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
        """
        return pulumi.get(self, "policy_tag")

    @policy_tag.setter
    def policy_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_tag", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class DataPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_masking_policy: Optional[pulumi.Input[pulumi.InputType['DataMaskingPolicyArgs']]] = None,
                 data_policy_id: Optional[pulumi.Input[str]] = None,
                 data_policy_type: Optional[pulumi.Input['DataPolicyDataPolicyType']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 policy_tag: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new data policy under a project with the given `dataPolicyId` (used as the display name), policy tag, and data policy type.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DataMaskingPolicyArgs']] data_masking_policy: The data masking policy that specifies the data masking rule to use.
        :param pulumi.Input[str] data_policy_id: User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
        :param pulumi.Input['DataPolicyDataPolicyType'] data_policy_type: Type of data policy.
        :param pulumi.Input[str] policy_tag: Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DataPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new data policy under a project with the given `dataPolicyId` (used as the display name), policy tag, and data policy type.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param DataPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_masking_policy: Optional[pulumi.Input[pulumi.InputType['DataMaskingPolicyArgs']]] = None,
                 data_policy_id: Optional[pulumi.Input[str]] = None,
                 data_policy_type: Optional[pulumi.Input['DataPolicyDataPolicyType']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 policy_tag: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataPolicyArgs.__new__(DataPolicyArgs)

            __props__.__dict__["data_masking_policy"] = data_masking_policy
            __props__.__dict__["data_policy_id"] = data_policy_id
            __props__.__dict__["data_policy_type"] = data_policy_type
            __props__.__dict__["location"] = location
            __props__.__dict__["policy_tag"] = policy_tag
            __props__.__dict__["project"] = project
            __props__.__dict__["name"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DataPolicy, __self__).__init__(
            'google-native:bigquerydatapolicy/v1:DataPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DataPolicy':
        """
        Get an existing DataPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DataPolicyArgs.__new__(DataPolicyArgs)

        __props__.__dict__["data_masking_policy"] = None
        __props__.__dict__["data_policy_id"] = None
        __props__.__dict__["data_policy_type"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["policy_tag"] = None
        __props__.__dict__["project"] = None
        return DataPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataMaskingPolicy")
    def data_masking_policy(self) -> pulumi.Output['outputs.DataMaskingPolicyResponse']:
        """
        The data masking policy that specifies the data masking rule to use.
        """
        return pulumi.get(self, "data_masking_policy")

    @property
    @pulumi.getter(name="dataPolicyId")
    def data_policy_id(self) -> pulumi.Output[str]:
        """
        User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
        """
        return pulumi.get(self, "data_policy_id")

    @property
    @pulumi.getter(name="dataPolicyType")
    def data_policy_type(self) -> pulumi.Output[str]:
        """
        Type of data policy.
        """
        return pulumi.get(self, "data_policy_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyTag")
    def policy_tag(self) -> pulumi.Output[str]:
        """
        Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
        """
        return pulumi.get(self, "policy_tag")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

