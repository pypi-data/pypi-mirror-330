# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxyConfigArgs', 'ProxyConfig']

@pulumi.input_type
class ProxyConfigArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[str],
                 partner_tenant_id: pulumi.Input[str],
                 proxy_uri: pulumi.Input[str],
                 routing_info: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs'],
                 transport_info: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs'],
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_info: Optional[pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProxyConfig resource.
        :param pulumi.Input[str] proxy_uri: The URI of the proxy server.
        :param pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs'] routing_info: Routing info to direct traffic to the proxy server.
        :param pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs'] transport_info: Transport layer information to verify for the proxy server.
        :param pulumi.Input[str] display_name: Optional. An arbitrary caller-provided name for the ProxyConfig. Cannot exceed 64 characters.
        :param pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs'] encryption_info: Optional. Information to encrypt JWT for the proxy server.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "partner_tenant_id", partner_tenant_id)
        pulumi.set(__self__, "proxy_uri", proxy_uri)
        pulumi.set(__self__, "routing_info", routing_info)
        pulumi.set(__self__, "transport_info", transport_info)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encryption_info is not None:
            pulumi.set(__self__, "encryption_info", encryption_info)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="partnerTenantId")
    def partner_tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "partner_tenant_id")

    @partner_tenant_id.setter
    def partner_tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "partner_tenant_id", value)

    @property
    @pulumi.getter(name="proxyUri")
    def proxy_uri(self) -> pulumi.Input[str]:
        """
        The URI of the proxy server.
        """
        return pulumi.get(self, "proxy_uri")

    @proxy_uri.setter
    def proxy_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_uri", value)

    @property
    @pulumi.getter(name="routingInfo")
    def routing_info(self) -> pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs']:
        """
        Routing info to direct traffic to the proxy server.
        """
        return pulumi.get(self, "routing_info")

    @routing_info.setter
    def routing_info(self, value: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs']):
        pulumi.set(self, "routing_info", value)

    @property
    @pulumi.getter(name="transportInfo")
    def transport_info(self) -> pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs']:
        """
        Transport layer information to verify for the proxy server.
        """
        return pulumi.get(self, "transport_info")

    @transport_info.setter
    def transport_info(self, value: pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs']):
        pulumi.set(self, "transport_info", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An arbitrary caller-provided name for the ProxyConfig. Cannot exceed 64 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encryptionInfo")
    def encryption_info(self) -> Optional[pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']]:
        """
        Optional. Information to encrypt JWT for the proxy server.
        """
        return pulumi.get(self, "encryption_info")

    @encryption_info.setter
    def encryption_info(self, value: Optional[pulumi.Input['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']]):
        pulumi.set(self, "encryption_info", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class ProxyConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 partner_tenant_id: Optional[pulumi.Input[str]] = None,
                 proxy_uri: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 routing_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs']]] = None,
                 transport_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs']]] = None,
                 __props__=None):
        """
        Creates a new BeyondCorp Enterprise ProxyConfig in a given organization and PartnerTenant. Can only be called by on onboarded Beyondcorp Enterprise partner.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: Optional. An arbitrary caller-provided name for the ProxyConfig. Cannot exceed 64 characters.
        :param pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']] encryption_info: Optional. Information to encrypt JWT for the proxy server.
        :param pulumi.Input[str] proxy_uri: The URI of the proxy server.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs']] routing_info: Routing info to direct traffic to the proxy server.
        :param pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs']] transport_info: Transport layer information to verify for the proxy server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new BeyondCorp Enterprise ProxyConfig in a given organization and PartnerTenant. Can only be called by on onboarded Beyondcorp Enterprise partner.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ProxyConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 partner_tenant_id: Optional[pulumi.Input[str]] = None,
                 proxy_uri: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 routing_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoArgs']]] = None,
                 transport_info: Optional[pulumi.Input[pulumi.InputType['GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyConfigArgs.__new__(ProxyConfigArgs)

            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["encryption_info"] = encryption_info
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if partner_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'partner_tenant_id'")
            __props__.__dict__["partner_tenant_id"] = partner_tenant_id
            if proxy_uri is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_uri'")
            __props__.__dict__["proxy_uri"] = proxy_uri
            __props__.__dict__["request_id"] = request_id
            if routing_info is None and not opts.urn:
                raise TypeError("Missing required property 'routing_info'")
            __props__.__dict__["routing_info"] = routing_info
            if transport_info is None and not opts.urn:
                raise TypeError("Missing required property 'transport_info'")
            __props__.__dict__["transport_info"] = transport_info
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["organizationId", "partnerTenantId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ProxyConfig, __self__).__init__(
            'google-native:beyondcorp/v1alpha:ProxyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ProxyConfig':
        """
        Get an existing ProxyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ProxyConfigArgs.__new__(ProxyConfigArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["encryption_info"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["organization_id"] = None
        __props__.__dict__["partner_tenant_id"] = None
        __props__.__dict__["proxy_uri"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["routing_info"] = None
        __props__.__dict__["transport_info"] = None
        __props__.__dict__["update_time"] = None
        return ProxyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp when the resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Optional. An arbitrary caller-provided name for the ProxyConfig. Cannot exceed 64 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionInfo")
    def encryption_info(self) -> pulumi.Output['outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaEncryptionInfoResponse']:
        """
        Optional. Information to encrypt JWT for the proxy server.
        """
        return pulumi.get(self, "encryption_info")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        ProxyConfig resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="partnerTenantId")
    def partner_tenant_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "partner_tenant_id")

    @property
    @pulumi.getter(name="proxyUri")
    def proxy_uri(self) -> pulumi.Output[str]:
        """
        The URI of the proxy server.
        """
        return pulumi.get(self, "proxy_uri")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="routingInfo")
    def routing_info(self) -> pulumi.Output['outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaRoutingInfoResponse']:
        """
        Routing info to direct traffic to the proxy server.
        """
        return pulumi.get(self, "routing_info")

    @property
    @pulumi.getter(name="transportInfo")
    def transport_info(self) -> pulumi.Output['outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaTransportInfoResponse']:
        """
        Transport layer information to verify for the proxy server.
        """
        return pulumi.get(self, "transport_info")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Timestamp when the resource was last modified.
        """
        return pulumi.get(self, "update_time")

