# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetPartnerTenantResult',
    'AwaitableGetPartnerTenantResult',
    'get_partner_tenant',
    'get_partner_tenant_output',
]

@pulumi.output_type
class GetPartnerTenantResult:
    def __init__(__self__, create_time=None, display_name=None, group=None, name=None, partner_metadata=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if group and not isinstance(group, dict):
            raise TypeError("Expected argument 'group' to be a dict")
        pulumi.set(__self__, "group", group)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partner_metadata and not isinstance(partner_metadata, dict):
            raise TypeError("Expected argument 'partner_metadata' to be a dict")
        pulumi.set(__self__, "partner_metadata", partner_metadata)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when the resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. An arbitrary caller-provided name for the PartnerTenant. Cannot exceed 64 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def group(self) -> 'outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponse':
        """
        Optional. Group information for the users enabled to use the partnerTenant. If the group information is not provided then the partnerTenant will be enabled for all users.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique resource name of the PartnerTenant. The name is ignored when creating PartnerTenant.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnerMetadata")
    def partner_metadata(self) -> 'outputs.GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerMetadataResponse':
        """
        Optional. Metadata provided by the Partner associated with PartnerTenant.
        """
        return pulumi.get(self, "partner_metadata")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when the resource was last modified.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetPartnerTenantResult(GetPartnerTenantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPartnerTenantResult(
            create_time=self.create_time,
            display_name=self.display_name,
            group=self.group,
            name=self.name,
            partner_metadata=self.partner_metadata,
            update_time=self.update_time)


def get_partner_tenant(organization_id: Optional[str] = None,
                       partner_tenant_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPartnerTenantResult:
    """
    Gets details of a single PartnerTenant.
    """
    __args__ = dict()
    __args__['organizationId'] = organization_id
    __args__['partnerTenantId'] = partner_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:beyondcorp/v1alpha:getPartnerTenant', __args__, opts=opts, typ=GetPartnerTenantResult).value

    return AwaitableGetPartnerTenantResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        group=pulumi.get(__ret__, 'group'),
        name=pulumi.get(__ret__, 'name'),
        partner_metadata=pulumi.get(__ret__, 'partner_metadata'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_partner_tenant)
def get_partner_tenant_output(organization_id: Optional[pulumi.Input[str]] = None,
                              partner_tenant_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPartnerTenantResult]:
    """
    Gets details of a single PartnerTenant.
    """
    ...
