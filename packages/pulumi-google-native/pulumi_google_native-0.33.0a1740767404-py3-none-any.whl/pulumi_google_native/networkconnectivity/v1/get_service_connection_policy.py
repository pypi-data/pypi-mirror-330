# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetServiceConnectionPolicyResult',
    'AwaitableGetServiceConnectionPolicyResult',
    'get_service_connection_policy',
    'get_service_connection_policy_output',
]

@pulumi.output_type
class GetServiceConnectionPolicyResult:
    def __init__(__self__, create_time=None, description=None, etag=None, infrastructure=None, labels=None, name=None, network=None, psc_config=None, psc_connections=None, service_class=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if infrastructure and not isinstance(infrastructure, str):
            raise TypeError("Expected argument 'infrastructure' to be a str")
        pulumi.set(__self__, "infrastructure", infrastructure)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if psc_config and not isinstance(psc_config, dict):
            raise TypeError("Expected argument 'psc_config' to be a dict")
        pulumi.set(__self__, "psc_config", psc_config)
        if psc_connections and not isinstance(psc_connections, list):
            raise TypeError("Expected argument 'psc_connections' to be a list")
        pulumi.set(__self__, "psc_connections", psc_connections)
        if service_class and not isinstance(service_class, str):
            raise TypeError("Expected argument 'service_class' to be a str")
        pulumi.set(__self__, "service_class", service_class)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the ServiceConnectionMap was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of this resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def infrastructure(self) -> str:
        """
        The type of underlying resources used to create the connection.
        """
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The name of a ServiceConnectionPolicy. Format: projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy} See: https://google.aip.dev/122#fields-representing-resource-names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The resource path of the consumer network. Example: - projects/{projectNumOrId}/global/networks/{resourceId}.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="pscConfig")
    def psc_config(self) -> 'outputs.PscConfigResponse':
        """
        Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
        """
        return pulumi.get(self, "psc_config")

    @property
    @pulumi.getter(name="pscConnections")
    def psc_connections(self) -> Sequence['outputs.PscConnectionResponse']:
        """
        [Output only] Information about each Private Service Connect connection.
        """
        return pulumi.get(self, "psc_connections")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        """
        The service class identifier for which this ServiceConnectionPolicy is for. The service class identifier is a unique, symbolic representation of a ServiceClass. It is provided by the Service Producer. Google services have a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For example, test-service-a3dfcx.
        """
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the ServiceConnectionMap was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetServiceConnectionPolicyResult(GetServiceConnectionPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceConnectionPolicyResult(
            create_time=self.create_time,
            description=self.description,
            etag=self.etag,
            infrastructure=self.infrastructure,
            labels=self.labels,
            name=self.name,
            network=self.network,
            psc_config=self.psc_config,
            psc_connections=self.psc_connections,
            service_class=self.service_class,
            update_time=self.update_time)


def get_service_connection_policy(location: Optional[str] = None,
                                  project: Optional[str] = None,
                                  service_connection_policy_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceConnectionPolicyResult:
    """
    Gets details of a single ServiceConnectionPolicy.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['serviceConnectionPolicyId'] = service_connection_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:networkconnectivity/v1:getServiceConnectionPolicy', __args__, opts=opts, typ=GetServiceConnectionPolicyResult).value

    return AwaitableGetServiceConnectionPolicyResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        etag=pulumi.get(__ret__, 'etag'),
        infrastructure=pulumi.get(__ret__, 'infrastructure'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        psc_config=pulumi.get(__ret__, 'psc_config'),
        psc_connections=pulumi.get(__ret__, 'psc_connections'),
        service_class=pulumi.get(__ret__, 'service_class'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_service_connection_policy)
def get_service_connection_policy_output(location: Optional[pulumi.Input[str]] = None,
                                         project: Optional[pulumi.Input[Optional[str]]] = None,
                                         service_connection_policy_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceConnectionPolicyResult]:
    """
    Gets details of a single ServiceConnectionPolicy.
    """
    ...
