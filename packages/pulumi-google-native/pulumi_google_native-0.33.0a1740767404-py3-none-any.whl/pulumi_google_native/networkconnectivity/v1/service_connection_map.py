# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceConnectionMapArgs', 'ServiceConnectionMap']

@pulumi.input_type
class ServiceConnectionMapArgs:
    def __init__(__self__, *,
                 consumer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumerPscConfigArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 producer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ProducerPscConfigArgs']]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 service_connection_map_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceConnectionMap resource.
        :param pulumi.Input[Sequence[pulumi.Input['ConsumerPscConfigArgs']]] consumer_psc_configs: The PSC configurations on consumer side.
        :param pulumi.Input[str] description: A description of this resource.
        :param pulumi.Input[str] etag: Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels.
        :param pulumi.Input[str] name: Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        :param pulumi.Input[Sequence[pulumi.Input['ProducerPscConfigArgs']]] producer_psc_configs: The PSC configurations on producer side.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[str] service_class: The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        :param pulumi.Input[str] service_connection_map_id: Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceConnectionMaps/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
        :param pulumi.Input[str] token: The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        """
        if consumer_psc_configs is not None:
            pulumi.set(__self__, "consumer_psc_configs", consumer_psc_configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if producer_psc_configs is not None:
            pulumi.set(__self__, "producer_psc_configs", producer_psc_configs)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if service_connection_map_id is not None:
            pulumi.set(__self__, "service_connection_map_id", service_connection_map_id)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="consumerPscConfigs")
    def consumer_psc_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumerPscConfigArgs']]]]:
        """
        The PSC configurations on consumer side.
        """
        return pulumi.get(self, "consumer_psc_configs")

    @consumer_psc_configs.setter
    def consumer_psc_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumerPscConfigArgs']]]]):
        pulumi.set(self, "consumer_psc_configs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="producerPscConfigs")
    def producer_psc_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProducerPscConfigArgs']]]]:
        """
        The PSC configurations on producer side.
        """
        return pulumi.get(self, "producer_psc_configs")

    @producer_psc_configs.setter
    def producer_psc_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProducerPscConfigArgs']]]]):
        pulumi.set(self, "producer_psc_configs", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[pulumi.Input[str]]:
        """
        The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        """
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="serviceConnectionMapId")
    def service_connection_map_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceConnectionMaps/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
        """
        return pulumi.get(self, "service_connection_map_id")

    @service_connection_map_id.setter
    def service_connection_map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_connection_map_id", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


class ServiceConnectionMap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumerPscConfigArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 producer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProducerPscConfigArgs']]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 service_connection_map_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new ServiceConnectionMap in a given project and location.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumerPscConfigArgs']]]] consumer_psc_configs: The PSC configurations on consumer side.
        :param pulumi.Input[str] description: A description of this resource.
        :param pulumi.Input[str] etag: Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels.
        :param pulumi.Input[str] name: Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProducerPscConfigArgs']]]] producer_psc_configs: The PSC configurations on producer side.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[str] service_class: The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        :param pulumi.Input[str] service_connection_map_id: Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceConnectionMaps/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
        :param pulumi.Input[str] token: The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceConnectionMapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new ServiceConnectionMap in a given project and location.

        :param str resource_name: The name of the resource.
        :param ServiceConnectionMapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceConnectionMapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumerPscConfigArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 producer_psc_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProducerPscConfigArgs']]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 service_connection_map_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceConnectionMapArgs.__new__(ServiceConnectionMapArgs)

            __props__.__dict__["consumer_psc_configs"] = consumer_psc_configs
            __props__.__dict__["description"] = description
            __props__.__dict__["etag"] = etag
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["producer_psc_configs"] = producer_psc_configs
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["service_class"] = service_class
            __props__.__dict__["service_connection_map_id"] = service_connection_map_id
            __props__.__dict__["token"] = token
            __props__.__dict__["consumer_psc_connections"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["infrastructure"] = None
            __props__.__dict__["service_class_uri"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ServiceConnectionMap, __self__).__init__(
            'google-native:networkconnectivity/v1:ServiceConnectionMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceConnectionMap':
        """
        Get an existing ServiceConnectionMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceConnectionMapArgs.__new__(ServiceConnectionMapArgs)

        __props__.__dict__["consumer_psc_configs"] = None
        __props__.__dict__["consumer_psc_connections"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["infrastructure"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["producer_psc_configs"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["service_class"] = None
        __props__.__dict__["service_class_uri"] = None
        __props__.__dict__["service_connection_map_id"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["update_time"] = None
        return ServiceConnectionMap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consumerPscConfigs")
    def consumer_psc_configs(self) -> pulumi.Output[Sequence['outputs.ConsumerPscConfigResponse']]:
        """
        The PSC configurations on consumer side.
        """
        return pulumi.get(self, "consumer_psc_configs")

    @property
    @pulumi.getter(name="consumerPscConnections")
    def consumer_psc_connections(self) -> pulumi.Output[Sequence['outputs.ConsumerPscConnectionResponse']]:
        """
        PSC connection details on consumer side.
        """
        return pulumi.get(self, "consumer_psc_connections")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when the ServiceConnectionMap was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A description of this resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def infrastructure(self) -> pulumi.Output[str]:
        """
        The infrastructure used for connections between consumers/producers.
        """
        return pulumi.get(self, "infrastructure")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="producerPscConfigs")
    def producer_psc_configs(self) -> pulumi.Output[Sequence['outputs.ProducerPscConfigResponse']]:
        """
        The PSC configurations on producer side.
        """
        return pulumi.get(self, "producer_psc_configs")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Output[str]:
        """
        The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        """
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="serviceClassUri")
    def service_class_uri(self) -> pulumi.Output[str]:
        """
        The service class uri this ServiceConnectionMap is for.
        """
        return pulumi.get(self, "service_class_uri")

    @property
    @pulumi.getter(name="serviceConnectionMapId")
    def service_connection_map_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceConnectionMaps/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
        """
        return pulumi.get(self, "service_connection_map_id")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time when the ServiceConnectionMap was updated.
        """
        return pulumi.get(self, "update_time")

