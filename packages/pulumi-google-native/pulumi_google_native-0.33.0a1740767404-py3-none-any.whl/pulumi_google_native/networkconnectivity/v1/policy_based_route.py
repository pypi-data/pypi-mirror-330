# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PolicyBasedRouteArgs', 'PolicyBasedRoute']

@pulumi.input_type
class PolicyBasedRouteArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['FilterArgs'],
                 network: pulumi.Input[str],
                 policy_based_route_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 interconnect_attachment: Optional[pulumi.Input['InterconnectAttachmentArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop_ilb_ip: Optional[pulumi.Input[str]] = None,
                 next_hop_other_routes: Optional[pulumi.Input['PolicyBasedRouteNextHopOtherRoutes']] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input['VirtualMachineArgs']] = None):
        """
        The set of arguments for constructing a PolicyBasedRoute resource.
        :param pulumi.Input['FilterArgs'] filter: The filter to match L4 traffic.
        :param pulumi.Input[str] network: Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        :param pulumi.Input[str] policy_based_route_id: Required. Unique id for the policy-based route to create.
        :param pulumi.Input[str] description: Optional. An optional description of this resource. Provide this field when you create the resource.
        :param pulumi.Input['InterconnectAttachmentArgs'] interconnect_attachment: Optional. The interconnect attachments that this policy-based route applies to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels.
        :param pulumi.Input[str] name: Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
        :param pulumi.Input[str] next_hop_ilb_ip: Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
        :param pulumi.Input['PolicyBasedRouteNextHopOtherRoutes'] next_hop_other_routes: Optional. Other routes that will be referenced to determine the next hop of the packet.
        :param pulumi.Input[int] priority: Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input['VirtualMachineArgs'] virtual_machine: Optional. VM instances to which this policy-based route applies to.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "policy_based_route_id", policy_based_route_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if interconnect_attachment is not None:
            pulumi.set(__self__, "interconnect_attachment", interconnect_attachment)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_ilb_ip is not None:
            pulumi.set(__self__, "next_hop_ilb_ip", next_hop_ilb_ip)
        if next_hop_other_routes is not None:
            pulumi.set(__self__, "next_hop_other_routes", next_hop_other_routes)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['FilterArgs']:
        """
        The filter to match L4 traffic.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['FilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="policyBasedRouteId")
    def policy_based_route_id(self) -> pulumi.Input[str]:
        """
        Required. Unique id for the policy-based route to create.
        """
        return pulumi.get(self, "policy_based_route_id")

    @policy_based_route_id.setter
    def policy_based_route_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_based_route_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional description of this resource. Provide this field when you create the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="interconnectAttachment")
    def interconnect_attachment(self) -> Optional[pulumi.Input['InterconnectAttachmentArgs']]:
        """
        Optional. The interconnect attachments that this policy-based route applies to.
        """
        return pulumi.get(self, "interconnect_attachment")

    @interconnect_attachment.setter
    def interconnect_attachment(self, value: Optional[pulumi.Input['InterconnectAttachmentArgs']]):
        pulumi.set(self, "interconnect_attachment", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHopIlbIp")
    def next_hop_ilb_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
        """
        return pulumi.get(self, "next_hop_ilb_ip")

    @next_hop_ilb_ip.setter
    def next_hop_ilb_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_ilb_ip", value)

    @property
    @pulumi.getter(name="nextHopOtherRoutes")
    def next_hop_other_routes(self) -> Optional[pulumi.Input['PolicyBasedRouteNextHopOtherRoutes']]:
        """
        Optional. Other routes that will be referenced to determine the next hop of the packet.
        """
        return pulumi.get(self, "next_hop_other_routes")

    @next_hop_other_routes.setter
    def next_hop_other_routes(self, value: Optional[pulumi.Input['PolicyBasedRouteNextHopOtherRoutes']]):
        pulumi.set(self, "next_hop_other_routes", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional[pulumi.Input['VirtualMachineArgs']]:
        """
        Optional. VM instances to which this policy-based route applies to.
        """
        return pulumi.get(self, "virtual_machine")

    @virtual_machine.setter
    def virtual_machine(self, value: Optional[pulumi.Input['VirtualMachineArgs']]):
        pulumi.set(self, "virtual_machine", value)


class PolicyBasedRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['FilterArgs']]] = None,
                 interconnect_attachment: Optional[pulumi.Input[pulumi.InputType['InterconnectAttachmentArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 next_hop_ilb_ip: Optional[pulumi.Input[str]] = None,
                 next_hop_other_routes: Optional[pulumi.Input['PolicyBasedRouteNextHopOtherRoutes']] = None,
                 policy_based_route_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input[pulumi.InputType['VirtualMachineArgs']]] = None,
                 __props__=None):
        """
        Creates a new policy-based route in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional. An optional description of this resource. Provide this field when you create the resource.
        :param pulumi.Input[pulumi.InputType['FilterArgs']] filter: The filter to match L4 traffic.
        :param pulumi.Input[pulumi.InputType['InterconnectAttachmentArgs']] interconnect_attachment: Optional. The interconnect attachments that this policy-based route applies to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels.
        :param pulumi.Input[str] name: Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
        :param pulumi.Input[str] network: Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        :param pulumi.Input[str] next_hop_ilb_ip: Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
        :param pulumi.Input['PolicyBasedRouteNextHopOtherRoutes'] next_hop_other_routes: Optional. Other routes that will be referenced to determine the next hop of the packet.
        :param pulumi.Input[str] policy_based_route_id: Required. Unique id for the policy-based route to create.
        :param pulumi.Input[int] priority: Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['VirtualMachineArgs']] virtual_machine: Optional. VM instances to which this policy-based route applies to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyBasedRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new policy-based route in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param PolicyBasedRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyBasedRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['FilterArgs']]] = None,
                 interconnect_attachment: Optional[pulumi.Input[pulumi.InputType['InterconnectAttachmentArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 next_hop_ilb_ip: Optional[pulumi.Input[str]] = None,
                 next_hop_other_routes: Optional[pulumi.Input['PolicyBasedRouteNextHopOtherRoutes']] = None,
                 policy_based_route_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input[pulumi.InputType['VirtualMachineArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyBasedRouteArgs.__new__(PolicyBasedRouteArgs)

            __props__.__dict__["description"] = description
            if filter is None and not opts.urn:
                raise TypeError("Missing required property 'filter'")
            __props__.__dict__["filter"] = filter
            __props__.__dict__["interconnect_attachment"] = interconnect_attachment
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            __props__.__dict__["next_hop_ilb_ip"] = next_hop_ilb_ip
            __props__.__dict__["next_hop_other_routes"] = next_hop_other_routes
            if policy_based_route_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_based_route_id'")
            __props__.__dict__["policy_based_route_id"] = policy_based_route_id
            __props__.__dict__["priority"] = priority
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["virtual_machine"] = virtual_machine
            __props__.__dict__["create_time"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["self_link"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["warnings"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["policyBasedRouteId", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(PolicyBasedRoute, __self__).__init__(
            'google-native:networkconnectivity/v1:PolicyBasedRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PolicyBasedRoute':
        """
        Get an existing PolicyBasedRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PolicyBasedRouteArgs.__new__(PolicyBasedRouteArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["filter"] = None
        __props__.__dict__["interconnect_attachment"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network"] = None
        __props__.__dict__["next_hop_ilb_ip"] = None
        __props__.__dict__["next_hop_other_routes"] = None
        __props__.__dict__["policy_based_route_id"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["self_link"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["virtual_machine"] = None
        __props__.__dict__["warnings"] = None
        return PolicyBasedRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when the policy-based route was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional. An optional description of this resource. Provide this field when you create the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output['outputs.FilterResponse']:
        """
        The filter to match L4 traffic.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="interconnectAttachment")
    def interconnect_attachment(self) -> pulumi.Output['outputs.InterconnectAttachmentResponse']:
        """
        Optional. The interconnect attachments that this policy-based route applies to.
        """
        return pulumi.get(self, "interconnect_attachment")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        User-defined labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[str]:
        """
        Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="nextHopIlbIp")
    def next_hop_ilb_ip(self) -> pulumi.Output[str]:
        """
        Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
        """
        return pulumi.get(self, "next_hop_ilb_ip")

    @property
    @pulumi.getter(name="nextHopOtherRoutes")
    def next_hop_other_routes(self) -> pulumi.Output[str]:
        """
        Optional. Other routes that will be referenced to determine the next hop of the packet.
        """
        return pulumi.get(self, "next_hop_other_routes")

    @property
    @pulumi.getter(name="policyBasedRouteId")
    def policy_based_route_id(self) -> pulumi.Output[str]:
        """
        Required. Unique id for the policy-based route to create.
        """
        return pulumi.get(self, "policy_based_route_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> pulumi.Output[str]:
        """
        Server-defined fully-qualified URL for this resource.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time when the policy-based route was updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> pulumi.Output['outputs.VirtualMachineResponse']:
        """
        Optional. VM instances to which this policy-based route applies to.
        """
        return pulumi.get(self, "virtual_machine")

    @property
    @pulumi.getter
    def warnings(self) -> pulumi.Output[Sequence['outputs.WarningsResponse']]:
        """
        If potential misconfigurations are detected for this route, this field will be populated with warning messages.
        """
        return pulumi.get(self, "warnings")

