# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AvroConfigResponse',
    'BigQueryConfigResponse',
    'BindingResponse',
    'CloudStorageConfigResponse',
    'DeadLetterPolicyResponse',
    'ExpirationPolicyResponse',
    'ExprResponse',
    'MessageStoragePolicyResponse',
    'NoWrapperResponse',
    'OidcTokenResponse',
    'PubsubWrapperResponse',
    'PushConfigResponse',
    'RetryPolicyResponse',
    'SchemaSettingsResponse',
    'TextConfigResponse',
]

@pulumi.output_type
class AvroConfigResponse(dict):
    """
    Configuration for writing message data in Avro format. Message payloads and metadata will be written to files as an Avro binary.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "writeMetadata":
            suggest = "write_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AvroConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AvroConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AvroConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 write_metadata: bool):
        """
        Configuration for writing message data in Avro format. Message payloads and metadata will be written to files as an Avro binary.
        :param bool write_metadata: Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key as additional fields in the output. The subscription name, message_id, and publish_time fields are put in their own fields while all other message properties other than data (for example, an ordering_key, if present) are added as entries in the attributes map.
        """
        pulumi.set(__self__, "write_metadata", write_metadata)

    @property
    @pulumi.getter(name="writeMetadata")
    def write_metadata(self) -> bool:
        """
        Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key as additional fields in the output. The subscription name, message_id, and publish_time fields are put in their own fields while all other message properties other than data (for example, an ordering_key, if present) are added as entries in the attributes map.
        """
        return pulumi.get(self, "write_metadata")


@pulumi.output_type
class BigQueryConfigResponse(dict):
    """
    Configuration for a BigQuery subscription.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dropUnknownFields":
            suggest = "drop_unknown_fields"
        elif key == "useTopicSchema":
            suggest = "use_topic_schema"
        elif key == "writeMetadata":
            suggest = "write_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BigQueryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BigQueryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BigQueryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 drop_unknown_fields: bool,
                 state: str,
                 table: str,
                 use_topic_schema: bool,
                 write_metadata: bool):
        """
        Configuration for a BigQuery subscription.
        :param bool drop_unknown_fields: Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
        :param str state: An output-only field that indicates whether or not the subscription can receive messages.
        :param str table: Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
        :param bool use_topic_schema: Optional. When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        :param bool write_metadata: Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
        """
        pulumi.set(__self__, "drop_unknown_fields", drop_unknown_fields)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "use_topic_schema", use_topic_schema)
        pulumi.set(__self__, "write_metadata", write_metadata)

    @property
    @pulumi.getter(name="dropUnknownFields")
    def drop_unknown_fields(self) -> bool:
        """
        Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
        """
        return pulumi.get(self, "drop_unknown_fields")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        An output-only field that indicates whether or not the subscription can receive messages.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
        """
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="useTopicSchema")
    def use_topic_schema(self) -> bool:
        """
        Optional. When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        """
        return pulumi.get(self, "use_topic_schema")

    @property
    @pulumi.getter(name="writeMetadata")
    def write_metadata(self) -> bool:
        """
        Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
        """
        return pulumi.get(self, "write_metadata")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class CloudStorageConfigResponse(dict):
    """
    Configuration for a Cloud Storage subscription.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avroConfig":
            suggest = "avro_config"
        elif key == "filenamePrefix":
            suggest = "filename_prefix"
        elif key == "filenameSuffix":
            suggest = "filename_suffix"
        elif key == "maxBytes":
            suggest = "max_bytes"
        elif key == "maxDuration":
            suggest = "max_duration"
        elif key == "textConfig":
            suggest = "text_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudStorageConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudStorageConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudStorageConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avro_config: 'outputs.AvroConfigResponse',
                 bucket: str,
                 filename_prefix: str,
                 filename_suffix: str,
                 max_bytes: str,
                 max_duration: str,
                 state: str,
                 text_config: 'outputs.TextConfigResponse'):
        """
        Configuration for a Cloud Storage subscription.
        :param 'AvroConfigResponse' avro_config: Optional. If set, message data will be written to Cloud Storage in Avro format.
        :param str bucket: User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).
        :param str filename_prefix: Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).
        :param str filename_suffix: Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in "/".
        :param str max_bytes: Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.
        :param str max_duration: Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.
        :param str state: An output-only field that indicates whether or not the subscription can receive messages.
        :param 'TextConfigResponse' text_config: Optional. If set, message data will be written to Cloud Storage in text format.
        """
        pulumi.set(__self__, "avro_config", avro_config)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "filename_prefix", filename_prefix)
        pulumi.set(__self__, "filename_suffix", filename_suffix)
        pulumi.set(__self__, "max_bytes", max_bytes)
        pulumi.set(__self__, "max_duration", max_duration)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "text_config", text_config)

    @property
    @pulumi.getter(name="avroConfig")
    def avro_config(self) -> 'outputs.AvroConfigResponse':
        """
        Optional. If set, message data will be written to Cloud Storage in Avro format.
        """
        return pulumi.get(self, "avro_config")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="filenamePrefix")
    def filename_prefix(self) -> str:
        """
        Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).
        """
        return pulumi.get(self, "filename_prefix")

    @property
    @pulumi.getter(name="filenameSuffix")
    def filename_suffix(self) -> str:
        """
        Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in "/".
        """
        return pulumi.get(self, "filename_suffix")

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> str:
        """
        Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.
        """
        return pulumi.get(self, "max_bytes")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> str:
        """
        Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.
        """
        return pulumi.get(self, "max_duration")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        An output-only field that indicates whether or not the subscription can receive messages.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="textConfig")
    def text_config(self) -> 'outputs.TextConfigResponse':
        """
        Optional. If set, message data will be written to Cloud Storage in text format.
        """
        return pulumi.get(self, "text_config")


@pulumi.output_type
class DeadLetterPolicyResponse(dict):
    """
    Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deadLetterTopic":
            suggest = "dead_letter_topic"
        elif key == "maxDeliveryAttempts":
            suggest = "max_delivery_attempts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeadLetterPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeadLetterPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeadLetterPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dead_letter_topic: str,
                 max_delivery_attempts: int):
        """
        Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
        :param str dead_letter_topic: Optional. The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
        :param int max_delivery_attempts: Optional. The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
        """
        pulumi.set(__self__, "dead_letter_topic", dead_letter_topic)
        pulumi.set(__self__, "max_delivery_attempts", max_delivery_attempts)

    @property
    @pulumi.getter(name="deadLetterTopic")
    def dead_letter_topic(self) -> str:
        """
        Optional. The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
        """
        return pulumi.get(self, "dead_letter_topic")

    @property
    @pulumi.getter(name="maxDeliveryAttempts")
    def max_delivery_attempts(self) -> int:
        """
        Optional. The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
        """
        return pulumi.get(self, "max_delivery_attempts")


@pulumi.output_type
class ExpirationPolicyResponse(dict):
    """
    A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
    """
    def __init__(__self__, *,
                 ttl: str):
        """
        A policy that specifies the conditions for resource expiration (i.e., automatic resource deletion).
        :param str ttl: Optional. Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
        """
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        Optional. Specifies the "time-to-live" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of "activity" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class MessageStoragePolicyResponse(dict):
    """
    A policy constraining the storage of messages published to the topic.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedPersistenceRegions":
            suggest = "allowed_persistence_regions"
        elif key == "enforceInTransit":
            suggest = "enforce_in_transit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MessageStoragePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MessageStoragePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MessageStoragePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_persistence_regions: Sequence[str],
                 enforce_in_transit: bool):
        """
        A policy constraining the storage of messages published to the topic.
        :param Sequence[str] allowed_persistence_regions: Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
        :param bool enforce_in_transit: Optional. If true, `allowed_persistence_regions` is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in `allowed_persistence_regions`.
        """
        pulumi.set(__self__, "allowed_persistence_regions", allowed_persistence_regions)
        pulumi.set(__self__, "enforce_in_transit", enforce_in_transit)

    @property
    @pulumi.getter(name="allowedPersistenceRegions")
    def allowed_persistence_regions(self) -> Sequence[str]:
        """
        Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
        """
        return pulumi.get(self, "allowed_persistence_regions")

    @property
    @pulumi.getter(name="enforceInTransit")
    def enforce_in_transit(self) -> bool:
        """
        Optional. If true, `allowed_persistence_regions` is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in `allowed_persistence_regions`.
        """
        return pulumi.get(self, "enforce_in_transit")


@pulumi.output_type
class NoWrapperResponse(dict):
    """
    Sets the `data` field as the HTTP body for delivery.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "writeMetadata":
            suggest = "write_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NoWrapperResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NoWrapperResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NoWrapperResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 write_metadata: bool):
        """
        Sets the `data` field as the HTTP body for delivery.
        :param bool write_metadata: Optional. When true, writes the Pub/Sub message metadata to `x-goog-pubsub-:` headers of the HTTP request. Writes the Pub/Sub message attributes to `:` headers of the HTTP request.
        """
        pulumi.set(__self__, "write_metadata", write_metadata)

    @property
    @pulumi.getter(name="writeMetadata")
    def write_metadata(self) -> bool:
        """
        Optional. When true, writes the Pub/Sub message metadata to `x-goog-pubsub-:` headers of the HTTP request. Writes the Pub/Sub message attributes to `:` headers of the HTTP request.
        """
        return pulumi.get(self, "write_metadata")


@pulumi.output_type
class OidcTokenResponse(dict):
    """
    Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountEmail":
            suggest = "service_account_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OidcTokenResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OidcTokenResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OidcTokenResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: str,
                 service_account_email: str):
        """
        Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect).
        :param str audience: Optional. Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
        :param str service_account_email: Optional. [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Optional. Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for. The audience value is a single case-sensitive string. Having multiple values (array) for the audience field is not supported. More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not specified, the Push endpoint URL will be used.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> str:
        """
        Optional. [Service account email](https://cloud.google.com/iam/docs/service-accounts) used for generating the OIDC token. For more information on setting up authentication, see [Push subscriptions](https://cloud.google.com/pubsub/docs/push).
        """
        return pulumi.get(self, "service_account_email")


@pulumi.output_type
class PubsubWrapperResponse(dict):
    """
    The payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
    """
    def __init__(__self__):
        """
        The payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
        """
        pass


@pulumi.output_type
class PushConfigResponse(dict):
    """
    Configuration for a push delivery endpoint.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noWrapper":
            suggest = "no_wrapper"
        elif key == "oidcToken":
            suggest = "oidc_token"
        elif key == "pubsubWrapper":
            suggest = "pubsub_wrapper"
        elif key == "pushEndpoint":
            suggest = "push_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PushConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PushConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PushConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Mapping[str, str],
                 no_wrapper: 'outputs.NoWrapperResponse',
                 oidc_token: 'outputs.OidcTokenResponse',
                 pubsub_wrapper: 'outputs.PubsubWrapperResponse',
                 push_endpoint: str):
        """
        Configuration for a push delivery endpoint.
        :param Mapping[str, str] attributes: Optional. Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: `attributes { "x-goog-version": "v1" }`
        :param 'NoWrapperResponse' no_wrapper: Optional. When set, the payload to the push endpoint is not wrapped.
        :param 'OidcTokenResponse' oidc_token: Optional. If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
        :param 'PubsubWrapperResponse' pubsub_wrapper: Optional. When set, the payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
        :param str push_endpoint: Optional. A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "no_wrapper", no_wrapper)
        pulumi.set(__self__, "oidc_token", oidc_token)
        pulumi.set(__self__, "pubsub_wrapper", pubsub_wrapper)
        pulumi.set(__self__, "push_endpoint", push_endpoint)

    @property
    @pulumi.getter
    def attributes(self) -> Mapping[str, str]:
        """
        Optional. Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: `attributes { "x-goog-version": "v1" }`
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="noWrapper")
    def no_wrapper(self) -> 'outputs.NoWrapperResponse':
        """
        Optional. When set, the payload to the push endpoint is not wrapped.
        """
        return pulumi.get(self, "no_wrapper")

    @property
    @pulumi.getter(name="oidcToken")
    def oidc_token(self) -> 'outputs.OidcTokenResponse':
        """
        Optional. If specified, Pub/Sub will generate and attach an OIDC JWT token as an `Authorization` header in the HTTP request for every pushed message.
        """
        return pulumi.get(self, "oidc_token")

    @property
    @pulumi.getter(name="pubsubWrapper")
    def pubsub_wrapper(self) -> 'outputs.PubsubWrapperResponse':
        """
        Optional. When set, the payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
        """
        return pulumi.get(self, "pubsub_wrapper")

    @property
    @pulumi.getter(name="pushEndpoint")
    def push_endpoint(self) -> str:
        """
        Optional. A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.
        """
        return pulumi.get(self, "push_endpoint")


@pulumi.output_type
class RetryPolicyResponse(dict):
    """
    A policy that specifies how Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBackoff":
            suggest = "maximum_backoff"
        elif key == "minimumBackoff":
            suggest = "minimum_backoff"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetryPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetryPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetryPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_backoff: str,
                 minimum_backoff: str):
        """
        A policy that specifies how Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
        :param str maximum_backoff: Optional. The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        :param str minimum_backoff: Optional. The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        """
        pulumi.set(__self__, "maximum_backoff", maximum_backoff)
        pulumi.set(__self__, "minimum_backoff", minimum_backoff)

    @property
    @pulumi.getter(name="maximumBackoff")
    def maximum_backoff(self) -> str:
        """
        Optional. The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        """
        return pulumi.get(self, "maximum_backoff")

    @property
    @pulumi.getter(name="minimumBackoff")
    def minimum_backoff(self) -> str:
        """
        Optional. The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        """
        return pulumi.get(self, "minimum_backoff")


@pulumi.output_type
class SchemaSettingsResponse(dict):
    """
    Settings for validating messages published against a schema.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstRevisionId":
            suggest = "first_revision_id"
        elif key == "lastRevisionId":
            suggest = "last_revision_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encoding: str,
                 first_revision_id: str,
                 last_revision_id: str,
                 schema: str):
        """
        Settings for validating messages published against a schema.
        :param str encoding: Optional. The encoding of messages validated against `schema`.
        :param str first_revision_id: Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
        :param str last_revision_id: Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
        :param str schema: The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
        """
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "first_revision_id", first_revision_id)
        pulumi.set(__self__, "last_revision_id", last_revision_id)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def encoding(self) -> str:
        """
        Optional. The encoding of messages validated against `schema`.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="firstRevisionId")
    def first_revision_id(self) -> str:
        """
        Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
        """
        return pulumi.get(self, "first_revision_id")

    @property
    @pulumi.getter(name="lastRevisionId")
    def last_revision_id(self) -> str:
        """
        Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
        """
        return pulumi.get(self, "last_revision_id")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class TextConfigResponse(dict):
    """
    Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.
    """
    def __init__(__self__):
        """
        Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.
        """
        pass


