# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs',
    'GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs',
    'GoogleCloudIdentitytoolkitAdminV2AppleSignInConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs',
    'GoogleCloudIdentitytoolkitAdminV2CodeFlowConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs',
    'GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs',
    'GoogleCloudIdentitytoolkitAdminV2IdpConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2InheritanceArgs',
    'GoogleCloudIdentitytoolkitAdminV2MonitoringConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeArgs',
    'GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs',
    'GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs',
    'GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs',
    'GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2SpConfigArgs',
    'GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs',
    'GoogleIamV1AuditConfigArgs',
    'GoogleIamV1AuditLogConfigArgs',
    'GoogleIamV1BindingArgs',
    'GoogleTypeExprArgs',
]

@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs:
    def __init__(__self__, *,
                 disallowed_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a policy of allowing every region by default and adding disallowed regions to a disallow list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disallowed_regions: Two letter unicode region codes to disallow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json
        """
        if disallowed_regions is not None:
            pulumi.set(__self__, "disallowed_regions", disallowed_regions)

    @property
    @pulumi.getter(name="disallowedRegions")
    def disallowed_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Two letter unicode region codes to disallow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json
        """
        return pulumi.get(self, "disallowed_regions")

    @disallowed_regions.setter
    def disallowed_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disallowed_regions", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs:
    def __init__(__self__, *,
                 allowed_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a policy of only allowing regions by explicitly adding them to an allowlist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_regions: Two letter unicode region codes to allow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json
        """
        if allowed_regions is not None:
            pulumi.set(__self__, "allowed_regions", allowed_regions)

    @property
    @pulumi.getter(name="allowedRegions")
    def allowed_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Two letter unicode region codes to allow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json
        """
        return pulumi.get(self, "allowed_regions")

    @allowed_regions.setter
    def allowed_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_regions", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2AppleSignInConfigArgs:
    def __init__(__self__, *,
                 bundle_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 code_flow_config: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CodeFlowConfigArgs']] = None):
        """
        Additional config for SignInWithApple.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bundle_ids: A list of Bundle ID's usable by this project
        """
        if bundle_ids is not None:
            pulumi.set(__self__, "bundle_ids", bundle_ids)
        if code_flow_config is not None:
            pulumi.set(__self__, "code_flow_config", code_flow_config)

    @property
    @pulumi.getter(name="bundleIds")
    def bundle_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Bundle ID's usable by this project
        """
        return pulumi.get(self, "bundle_ids")

    @bundle_ids.setter
    def bundle_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bundle_ids", value)

    @property
    @pulumi.getter(name="codeFlowConfig")
    def code_flow_config(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CodeFlowConfigArgs']]:
        return pulumi.get(self, "code_flow_config")

    @code_flow_config.setter
    def code_flow_config(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CodeFlowConfigArgs']]):
        pulumi.set(self, "code_flow_config", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigArgs:
    def __init__(__self__, *,
                 permissions: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs']] = None):
        """
        Options related to how clients making requests on behalf of a tenant should be configured.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs'] permissions: Configuration related to restricting a user's ability to affect their account.
        """
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs']]:
        """
        Configuration related to restricting a user's ability to affect their account.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs']]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2ClientPermissionsArgs:
    def __init__(__self__, *,
                 disabled_user_deletion: Optional[pulumi.Input[bool]] = None,
                 disabled_user_signup: Optional[pulumi.Input[bool]] = None):
        """
        Configuration related to restricting a user's ability to affect their account.
        :param pulumi.Input[bool] disabled_user_deletion: When true, end users cannot delete their account on the associated project through any of our API methods
        :param pulumi.Input[bool] disabled_user_signup: When true, end users cannot sign up for a new account on the associated project through any of our API methods
        """
        if disabled_user_deletion is not None:
            pulumi.set(__self__, "disabled_user_deletion", disabled_user_deletion)
        if disabled_user_signup is not None:
            pulumi.set(__self__, "disabled_user_signup", disabled_user_signup)

    @property
    @pulumi.getter(name="disabledUserDeletion")
    def disabled_user_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, end users cannot delete their account on the associated project through any of our API methods
        """
        return pulumi.get(self, "disabled_user_deletion")

    @disabled_user_deletion.setter
    def disabled_user_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled_user_deletion", value)

    @property
    @pulumi.getter(name="disabledUserSignup")
    def disabled_user_signup(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, end users cannot sign up for a new account on the associated project through any of our API methods
        """
        return pulumi.get(self, "disabled_user_signup")

    @disabled_user_signup.setter
    def disabled_user_signup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled_user_signup", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2CodeFlowConfigArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        """
        Additional config for Apple for code flow.
        :param pulumi.Input[str] key_id: Key ID for the private key.
        :param pulumi.Input[str] private_key: Private key used for signing the client secret JWT.
        :param pulumi.Input[str] team_id: Apple Developer Team ID.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key ID for the private key.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key used for signing the client secret JWT.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        Apple Developer Team ID.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs:
    def __init__(__self__, *,
                 contains_lowercase_character: Optional[pulumi.Input[bool]] = None,
                 contains_non_alphanumeric_character: Optional[pulumi.Input[bool]] = None,
                 contains_numeric_character: Optional[pulumi.Input[bool]] = None,
                 contains_uppercase_character: Optional[pulumi.Input[bool]] = None,
                 max_password_length: Optional[pulumi.Input[int]] = None,
                 min_password_length: Optional[pulumi.Input[int]] = None):
        """
        Custom strength options to enforce on user passwords.
        :param pulumi.Input[bool] contains_lowercase_character: The password must contain a lower case character.
        :param pulumi.Input[bool] contains_non_alphanumeric_character: The password must contain a non alpha numeric character.
        :param pulumi.Input[bool] contains_numeric_character: The password must contain a number.
        :param pulumi.Input[bool] contains_uppercase_character: The password must contain an upper case character.
        :param pulumi.Input[int] max_password_length: Maximum password length. No default max length
        :param pulumi.Input[int] min_password_length: Minimum password length. Range from 6 to 30
        """
        if contains_lowercase_character is not None:
            pulumi.set(__self__, "contains_lowercase_character", contains_lowercase_character)
        if contains_non_alphanumeric_character is not None:
            pulumi.set(__self__, "contains_non_alphanumeric_character", contains_non_alphanumeric_character)
        if contains_numeric_character is not None:
            pulumi.set(__self__, "contains_numeric_character", contains_numeric_character)
        if contains_uppercase_character is not None:
            pulumi.set(__self__, "contains_uppercase_character", contains_uppercase_character)
        if max_password_length is not None:
            pulumi.set(__self__, "max_password_length", max_password_length)
        if min_password_length is not None:
            pulumi.set(__self__, "min_password_length", min_password_length)

    @property
    @pulumi.getter(name="containsLowercaseCharacter")
    def contains_lowercase_character(self) -> Optional[pulumi.Input[bool]]:
        """
        The password must contain a lower case character.
        """
        return pulumi.get(self, "contains_lowercase_character")

    @contains_lowercase_character.setter
    def contains_lowercase_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_lowercase_character", value)

    @property
    @pulumi.getter(name="containsNonAlphanumericCharacter")
    def contains_non_alphanumeric_character(self) -> Optional[pulumi.Input[bool]]:
        """
        The password must contain a non alpha numeric character.
        """
        return pulumi.get(self, "contains_non_alphanumeric_character")

    @contains_non_alphanumeric_character.setter
    def contains_non_alphanumeric_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_non_alphanumeric_character", value)

    @property
    @pulumi.getter(name="containsNumericCharacter")
    def contains_numeric_character(self) -> Optional[pulumi.Input[bool]]:
        """
        The password must contain a number.
        """
        return pulumi.get(self, "contains_numeric_character")

    @contains_numeric_character.setter
    def contains_numeric_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_numeric_character", value)

    @property
    @pulumi.getter(name="containsUppercaseCharacter")
    def contains_uppercase_character(self) -> Optional[pulumi.Input[bool]]:
        """
        The password must contain an upper case character.
        """
        return pulumi.get(self, "contains_uppercase_character")

    @contains_uppercase_character.setter
    def contains_uppercase_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_uppercase_character", value)

    @property
    @pulumi.getter(name="maxPasswordLength")
    def max_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum password length. No default max length
        """
        return pulumi.get(self, "max_password_length")

    @max_password_length.setter
    def max_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_password_length", value)

    @property
    @pulumi.getter(name="minPasswordLength")
    def min_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum password length. Range from 6 to 30
        """
        return pulumi.get(self, "min_password_length")

    @min_password_length.setter
    def min_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_password_length", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfigArgs:
    def __init__(__self__, *,
                 enable_improved_email_privacy: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness.
        :param pulumi.Input[bool] enable_improved_email_privacy: Migrates the project to a state of improved email privacy. For example certain error codes are more generic to avoid giving away information on whether the account exists. In addition, this disables certain features that as a side-effect allow user enumeration. Enabling this toggle disables the fetchSignInMethodsForEmail functionality and changing the user's email to an unverified email. It is recommended to remove dependence on this functionality and enable this toggle to improve user privacy.
        """
        if enable_improved_email_privacy is not None:
            pulumi.set(__self__, "enable_improved_email_privacy", enable_improved_email_privacy)

    @property
    @pulumi.getter(name="enableImprovedEmailPrivacy")
    def enable_improved_email_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Migrates the project to a state of improved email privacy. For example certain error codes are more generic to avoid giving away information on whether the account exists. In addition, this disables certain features that as a side-effect allow user enumeration. Enabling this toggle disables the fetchSignInMethodsForEmail functionality and changing the user's email to an unverified email. It is recommended to remove dependence on this functionality and enable this toggle to improve user privacy.
        """
        return pulumi.get(self, "enable_improved_email_privacy")

    @enable_improved_email_privacy.setter
    def enable_improved_email_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_improved_email_privacy", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs:
    def __init__(__self__, *,
                 x509_certificate: Optional[pulumi.Input[str]] = None):
        """
        The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
        :param pulumi.Input[str] x509_certificate: The x509 certificate
        """
        if x509_certificate is not None:
            pulumi.set(__self__, "x509_certificate", x509_certificate)

    @property
    @pulumi.getter(name="x509Certificate")
    def x509_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The x509 certificate
        """
        return pulumi.get(self, "x509_certificate")

    @x509_certificate.setter
    def x509_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x509_certificate", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2IdpConfigArgs:
    def __init__(__self__, *,
                 idp_certificates: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs']]]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 sign_request: Optional[pulumi.Input[bool]] = None,
                 sso_url: Optional[pulumi.Input[str]] = None):
        """
        The SAML IdP (Identity Provider) configuration when the project acts as the relying party.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs']]] idp_certificates: IDP's public keys for verifying signature in the assertions.
        :param pulumi.Input[str] idp_entity_id: Unique identifier for all SAML entities.
        :param pulumi.Input[bool] sign_request: Indicates if outbounding SAMLRequest should be signed.
        :param pulumi.Input[str] sso_url: URL to send Authentication request to.
        """
        if idp_certificates is not None:
            pulumi.set(__self__, "idp_certificates", idp_certificates)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if sign_request is not None:
            pulumi.set(__self__, "sign_request", sign_request)
        if sso_url is not None:
            pulumi.set(__self__, "sso_url", sso_url)

    @property
    @pulumi.getter(name="idpCertificates")
    def idp_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs']]]]:
        """
        IDP's public keys for verifying signature in the assertions.
        """
        return pulumi.get(self, "idp_certificates")

    @idp_certificates.setter
    def idp_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2IdpCertificateArgs']]]]):
        pulumi.set(self, "idp_certificates", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for all SAML entities.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="signRequest")
    def sign_request(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if outbounding SAMLRequest should be signed.
        """
        return pulumi.get(self, "sign_request")

    @sign_request.setter
    def sign_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sign_request", value)

    @property
    @pulumi.getter(name="ssoUrl")
    def sso_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to send Authentication request to.
        """
        return pulumi.get(self, "sso_url")

    @sso_url.setter
    def sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_url", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2InheritanceArgs:
    def __init__(__self__, *,
                 email_sending_config: Optional[pulumi.Input[bool]] = None):
        """
        Settings that the tenants will inherit from project level.
        :param pulumi.Input[bool] email_sending_config: Whether to allow the tenant to inherit custom domains, email templates, and custom SMTP settings. If true, email sent from tenant will follow the project level email sending configurations. If false (by default), emails will go with the default settings with no customizations.
        """
        if email_sending_config is not None:
            pulumi.set(__self__, "email_sending_config", email_sending_config)

    @property
    @pulumi.getter(name="emailSendingConfig")
    def email_sending_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow the tenant to inherit custom domains, email templates, and custom SMTP settings. If true, email sent from tenant will follow the project level email sending configurations. If false (by default), emails will go with the default settings with no customizations.
        """
        return pulumi.get(self, "email_sending_config")

    @email_sending_config.setter
    def email_sending_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_sending_config", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2MonitoringConfigArgs:
    def __init__(__self__, *,
                 request_logging: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs']] = None):
        """
        Configuration related to monitoring project activity.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs'] request_logging: Configuration for logging requests made to this project to Stackdriver Logging
        """
        if request_logging is not None:
            pulumi.set(__self__, "request_logging", request_logging)

    @property
    @pulumi.getter(name="requestLogging")
    def request_logging(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs']]:
        """
        Configuration for logging requests made to this project to Stackdriver Logging
        """
        return pulumi.get(self, "request_logging")

    @request_logging.setter
    def request_logging(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs']]):
        pulumi.set(self, "request_logging", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigArgs:
    def __init__(__self__, *,
                 enabled_providers: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigEnabledProvidersItem']]]] = None,
                 provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs']]]] = None,
                 state: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigState']] = None):
        """
        Options related to MultiFactor Authentication for the project.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigEnabledProvidersItem']]] enabled_providers: A list of usable second factors for this project.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs']]] provider_configs: A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the 'enabled_providers' field.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigState'] state: Whether MultiFactor Authentication has been enabled for this project.
        """
        if enabled_providers is not None:
            pulumi.set(__self__, "enabled_providers", enabled_providers)
        if provider_configs is not None:
            pulumi.set(__self__, "provider_configs", provider_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="enabledProviders")
    def enabled_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigEnabledProvidersItem']]]]:
        """
        A list of usable second factors for this project.
        """
        return pulumi.get(self, "enabled_providers")

    @enabled_providers.setter
    def enabled_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigEnabledProvidersItem']]]]):
        pulumi.set(self, "enabled_providers", value)

    @property
    @pulumi.getter(name="providerConfigs")
    def provider_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs']]]]:
        """
        A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the 'enabled_providers' field.
        """
        return pulumi.get(self, "provider_configs")

    @provider_configs.setter
    def provider_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs']]]]):
        pulumi.set(self, "provider_configs", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigState']]:
        """
        Whether MultiFactor Authentication has been enabled for this project.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigState']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[bool]] = None,
                 id_token: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[bool]] = None):
        """
        The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported. See https://openid.net/specs/openid-connect-core-1_0.html#Authentication for a mapping of response type to OAuth 2.0 flow.
        :param pulumi.Input[bool] code: If true, authorization code is returned from IdP's authorization endpoint.
        :param pulumi.Input[bool] id_token: If true, ID token is returned from IdP's authorization endpoint.
        :param pulumi.Input[bool] token: Do not use. The `token` response type is not supported at the moment.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id_token is not None:
            pulumi.set(__self__, "id_token", id_token)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, authorization code is returned from IdP's authorization endpoint.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="idToken")
    def id_token(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, ID token is returned from IdP's authorization endpoint.
        """
        return pulumi.get(self, "id_token")

    @id_token.setter
    def id_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "id_token", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not use. The `token` response type is not supported at the moment.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigArgs:
    def __init__(__self__, *,
                 force_upgrade_on_signin: Optional[pulumi.Input[bool]] = None,
                 password_policy_enforcement_state: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigPasswordPolicyEnforcementState']] = None,
                 password_policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs']]]] = None):
        """
        The configuration for the password policy on the project.
        :param pulumi.Input[bool] force_upgrade_on_signin: Users must have a password compliant with the password policy to sign-in.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigPasswordPolicyEnforcementState'] password_policy_enforcement_state: Which enforcement mode to use for the password policy.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs']]] password_policy_versions: Must be of length 1. Contains the strength attributes for the password policy.
        """
        if force_upgrade_on_signin is not None:
            pulumi.set(__self__, "force_upgrade_on_signin", force_upgrade_on_signin)
        if password_policy_enforcement_state is not None:
            pulumi.set(__self__, "password_policy_enforcement_state", password_policy_enforcement_state)
        if password_policy_versions is not None:
            pulumi.set(__self__, "password_policy_versions", password_policy_versions)

    @property
    @pulumi.getter(name="forceUpgradeOnSignin")
    def force_upgrade_on_signin(self) -> Optional[pulumi.Input[bool]]:
        """
        Users must have a password compliant with the password policy to sign-in.
        """
        return pulumi.get(self, "force_upgrade_on_signin")

    @force_upgrade_on_signin.setter
    def force_upgrade_on_signin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_upgrade_on_signin", value)

    @property
    @pulumi.getter(name="passwordPolicyEnforcementState")
    def password_policy_enforcement_state(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigPasswordPolicyEnforcementState']]:
        """
        Which enforcement mode to use for the password policy.
        """
        return pulumi.get(self, "password_policy_enforcement_state")

    @password_policy_enforcement_state.setter
    def password_policy_enforcement_state(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfigPasswordPolicyEnforcementState']]):
        pulumi.set(self, "password_policy_enforcement_state", value)

    @property
    @pulumi.getter(name="passwordPolicyVersions")
    def password_policy_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs']]]]:
        """
        Must be of length 1. Contains the strength attributes for the password policy.
        """
        return pulumi.get(self, "password_policy_versions")

    @password_policy_versions.setter
    def password_policy_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs']]]]):
        pulumi.set(self, "password_policy_versions", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersionArgs:
    def __init__(__self__, *,
                 custom_strength_options: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs']] = None):
        """
        The strength attributes for the password policy on the project.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs'] custom_strength_options: The custom strength options enforced by the password policy.
        """
        if custom_strength_options is not None:
            pulumi.set(__self__, "custom_strength_options", custom_strength_options)

    @property
    @pulumi.getter(name="customStrengthOptions")
    def custom_strength_options(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs']]:
        """
        The custom strength options enforced by the password policy.
        """
        return pulumi.get(self, "custom_strength_options")

    @custom_strength_options.setter
    def custom_strength_options(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptionsArgs']]):
        pulumi.set(self, "custom_strength_options", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2ProviderConfigArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigState']] = None,
                 totp_provider_config: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs']] = None):
        """
        ProviderConfig describes the supported MFA providers along with their configurations.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigState'] state: Describes the state of the MultiFactor Authentication type.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs'] totp_provider_config: TOTP MFA provider config for this project.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)
        if totp_provider_config is not None:
            pulumi.set(__self__, "totp_provider_config", totp_provider_config)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigState']]:
        """
        Describes the state of the MultiFactor Authentication type.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2ProviderConfigState']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="totpProviderConfig")
    def totp_provider_config(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs']]:
        """
        TOTP MFA provider config for this project.
        """
        return pulumi.get(self, "totp_provider_config")

    @totp_provider_config.setter
    def totp_provider_config(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs']]):
        pulumi.set(self, "totp_provider_config", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigArgs:
    def __init__(__self__, *,
                 email_password_enforcement_state: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementState']] = None,
                 managed_rules: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs']]]] = None,
                 use_account_defender: Optional[pulumi.Input[bool]] = None):
        """
        The reCAPTCHA Enterprise integration config.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementState'] email_password_enforcement_state: The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs']]] managed_rules: The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
        :param pulumi.Input[bool] use_account_defender: Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
        """
        if email_password_enforcement_state is not None:
            pulumi.set(__self__, "email_password_enforcement_state", email_password_enforcement_state)
        if managed_rules is not None:
            pulumi.set(__self__, "managed_rules", managed_rules)
        if use_account_defender is not None:
            pulumi.set(__self__, "use_account_defender", use_account_defender)

    @property
    @pulumi.getter(name="emailPasswordEnforcementState")
    def email_password_enforcement_state(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementState']]:
        """
        The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
        """
        return pulumi.get(self, "email_password_enforcement_state")

    @email_password_enforcement_state.setter
    def email_password_enforcement_state(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementState']]):
        pulumi.set(self, "email_password_enforcement_state", value)

    @property
    @pulumi.getter(name="managedRules")
    def managed_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs']]]]:
        """
        The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
        """
        return pulumi.get(self, "managed_rules")

    @managed_rules.setter
    def managed_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs']]]]):
        pulumi.set(self, "managed_rules", value)

    @property
    @pulumi.getter(name="useAccountDefender")
    def use_account_defender(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
        """
        return pulumi.get(self, "use_account_defender")

    @use_account_defender.setter
    def use_account_defender(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_account_defender", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleAction']] = None,
                 end_score: Optional[pulumi.Input[float]] = None):
        """
        The config for a reCAPTCHA managed rule. Models a single interval [start_score, end_score]. The start_score is implicit. It is either the closest smaller end_score (if one is available) or 0. Intervals in aggregate span [0, 1] without overlapping.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleAction'] action: The action taken if the reCAPTCHA score of a request is within the interval [start_score, end_score].
        :param pulumi.Input[float] end_score: The end score (inclusive) of the score range for an action. Must be a value between 0.0 and 1.0, at 11 discrete values; e.g. 0, 0.1, 0.2, 0.3, ... 0.9, 1.0. A score of 0.0 indicates the riskiest request (likely a bot), whereas 1.0 indicates the safest request (likely a human). See https://cloud.google.com/recaptcha-enterprise/docs/interpret-assessment.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if end_score is not None:
            pulumi.set(__self__, "end_score", end_score)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleAction']]:
        """
        The action taken if the reCAPTCHA score of a request is within the interval [start_score, end_score].
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRuleAction']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="endScore")
    def end_score(self) -> Optional[pulumi.Input[float]]:
        """
        The end score (inclusive) of the score range for an action. Must be a value between 0.0 and 1.0, at 11 discrete values; e.g. 0, 0.1, 0.2, 0.3, ... 0.9, 1.0. A score of 0.0 indicates the riskiest request (likely a bot), whereas 1.0 indicates the safest request (likely a human). See https://cloud.google.com/recaptcha-enterprise/docs/interpret-assessment.
        """
        return pulumi.get(self, "end_score")

    @end_score.setter
    def end_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_score", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2RequestLoggingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Configuration for logging requests made to this project to Stackdriver Logging
        :param pulumi.Input[bool] enabled: Whether logging is enabled for this project or not.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether logging is enabled for this project or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigArgs:
    def __init__(__self__, *,
                 allow_by_default: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs']] = None,
                 allowlist_only: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs']] = None):
        """
        Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs'] allow_by_default: A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
        :param pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs'] allowlist_only: A policy of only allowing regions by explicitly adding them to an allowlist.
        """
        if allow_by_default is not None:
            pulumi.set(__self__, "allow_by_default", allow_by_default)
        if allowlist_only is not None:
            pulumi.set(__self__, "allowlist_only", allowlist_only)

    @property
    @pulumi.getter(name="allowByDefault")
    def allow_by_default(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs']]:
        """
        A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.
        """
        return pulumi.get(self, "allow_by_default")

    @allow_by_default.setter
    def allow_by_default(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowByDefaultArgs']]):
        pulumi.set(self, "allow_by_default", value)

    @property
    @pulumi.getter(name="allowlistOnly")
    def allowlist_only(self) -> Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs']]:
        """
        A policy of only allowing regions by explicitly adding them to an allowlist.
        """
        return pulumi.get(self, "allowlist_only")

    @allowlist_only.setter
    def allowlist_only(self, value: Optional[pulumi.Input['GoogleCloudIdentitytoolkitAdminV2AllowlistOnlyArgs']]):
        pulumi.set(self, "allowlist_only", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2SpConfigArgs:
    def __init__(__self__, *,
                 callback_uri: Optional[pulumi.Input[str]] = None,
                 sp_entity_id: Optional[pulumi.Input[str]] = None):
        """
        The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider.
        :param pulumi.Input[str] callback_uri: Callback URI where responses from IDP are handled.
        :param pulumi.Input[str] sp_entity_id: Unique identifier for all SAML entities.
        """
        if callback_uri is not None:
            pulumi.set(__self__, "callback_uri", callback_uri)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)

    @property
    @pulumi.getter(name="callbackUri")
    def callback_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Callback URI where responses from IDP are handled.
        """
        return pulumi.get(self, "callback_uri")

    @callback_uri.setter
    def callback_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_uri", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for all SAML entities.
        """
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_entity_id", value)


@pulumi.input_type
class GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfigArgs:
    def __init__(__self__, *,
                 adjacent_intervals: Optional[pulumi.Input[int]] = None):
        """
        TotpMFAProviderConfig represents the TOTP based MFA provider.
        :param pulumi.Input[int] adjacent_intervals: The allowed number of adjacent intervals that will be used for verification to avoid clock skew.
        """
        if adjacent_intervals is not None:
            pulumi.set(__self__, "adjacent_intervals", adjacent_intervals)

    @property
    @pulumi.getter(name="adjacentIntervals")
    def adjacent_intervals(self) -> Optional[pulumi.Input[int]]:
        """
        The allowed number of adjacent intervals that will be used for verification to avoid clock skew.
        """
        return pulumi.get(self, "adjacent_intervals")

    @adjacent_intervals.setter
    def adjacent_intervals(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adjacent_intervals", value)


@pulumi.input_type
class GoogleIamV1AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleIamV1AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleIamV1AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleIamV1AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleIamV1AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class GoogleIamV1AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input['GoogleIamV1AuditLogConfigLogType']] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input['GoogleIamV1AuditLogConfigLogType'] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input['GoogleIamV1AuditLogConfigLogType']]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input['GoogleIamV1AuditLogConfigLogType']]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class GoogleIamV1BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['GoogleTypeExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['GoogleTypeExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['GoogleTypeExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['GoogleTypeExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class GoogleTypeExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


