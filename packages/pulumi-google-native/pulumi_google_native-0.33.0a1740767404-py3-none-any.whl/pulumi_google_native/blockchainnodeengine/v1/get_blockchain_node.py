# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetBlockchainNodeResult',
    'AwaitableGetBlockchainNodeResult',
    'get_blockchain_node',
    'get_blockchain_node_output',
]

@pulumi.output_type
class GetBlockchainNodeResult:
    def __init__(__self__, blockchain_type=None, connection_info=None, create_time=None, ethereum_details=None, labels=None, name=None, private_service_connect_enabled=None, state=None, update_time=None):
        if blockchain_type and not isinstance(blockchain_type, str):
            raise TypeError("Expected argument 'blockchain_type' to be a str")
        pulumi.set(__self__, "blockchain_type", blockchain_type)
        if connection_info and not isinstance(connection_info, dict):
            raise TypeError("Expected argument 'connection_info' to be a dict")
        pulumi.set(__self__, "connection_info", connection_info)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if ethereum_details and not isinstance(ethereum_details, dict):
            raise TypeError("Expected argument 'ethereum_details' to be a dict")
        pulumi.set(__self__, "ethereum_details", ethereum_details)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_service_connect_enabled and not isinstance(private_service_connect_enabled, bool):
            raise TypeError("Expected argument 'private_service_connect_enabled' to be a bool")
        pulumi.set(__self__, "private_service_connect_enabled", private_service_connect_enabled)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="blockchainType")
    def blockchain_type(self) -> str:
        """
        Immutable. The blockchain type of the node.
        """
        return pulumi.get(self, "blockchain_type")

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> 'outputs.ConnectionInfoResponse':
        """
        The connection information used to interact with a blockchain node.
        """
        return pulumi.get(self, "connection_info")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The timestamp at which the blockchain node was first created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="ethereumDetails")
    def ethereum_details(self) -> 'outputs.EthereumDetailsResponse':
        """
        Ethereum-specific blockchain node details.
        """
        return pulumi.get(self, "ethereum_details")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        User-provided key-value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateServiceConnectEnabled")
    def private_service_connect_enabled(self) -> bool:
        """
        Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        """
        return pulumi.get(self, "private_service_connect_enabled")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A status representing the state of the node.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The timestamp at which the blockchain node was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetBlockchainNodeResult(GetBlockchainNodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBlockchainNodeResult(
            blockchain_type=self.blockchain_type,
            connection_info=self.connection_info,
            create_time=self.create_time,
            ethereum_details=self.ethereum_details,
            labels=self.labels,
            name=self.name,
            private_service_connect_enabled=self.private_service_connect_enabled,
            state=self.state,
            update_time=self.update_time)


def get_blockchain_node(blockchain_node_id: Optional[str] = None,
                        location: Optional[str] = None,
                        project: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBlockchainNodeResult:
    """
    Gets details of a single blockchain node.
    """
    __args__ = dict()
    __args__['blockchainNodeId'] = blockchain_node_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:blockchainnodeengine/v1:getBlockchainNode', __args__, opts=opts, typ=GetBlockchainNodeResult).value

    return AwaitableGetBlockchainNodeResult(
        blockchain_type=pulumi.get(__ret__, 'blockchain_type'),
        connection_info=pulumi.get(__ret__, 'connection_info'),
        create_time=pulumi.get(__ret__, 'create_time'),
        ethereum_details=pulumi.get(__ret__, 'ethereum_details'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        private_service_connect_enabled=pulumi.get(__ret__, 'private_service_connect_enabled'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_blockchain_node)
def get_blockchain_node_output(blockchain_node_id: Optional[pulumi.Input[str]] = None,
                               location: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBlockchainNodeResult]:
    """
    Gets details of a single blockchain node.
    """
    ...
