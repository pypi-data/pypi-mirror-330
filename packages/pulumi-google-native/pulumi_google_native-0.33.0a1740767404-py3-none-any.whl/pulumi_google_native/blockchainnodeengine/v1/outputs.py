# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectionInfoResponse',
    'EndpointInfoResponse',
    'EthereumDetailsResponse',
    'EthereumEndpointsResponse',
    'GethDetailsResponse',
]

@pulumi.output_type
class ConnectionInfoResponse(dict):
    """
    The connection information through which to interact with a blockchain node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointInfo":
            suggest = "endpoint_info"
        elif key == "serviceAttachment":
            suggest = "service_attachment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_info: 'outputs.EndpointInfoResponse',
                 service_attachment: str):
        """
        The connection information through which to interact with a blockchain node.
        :param 'EndpointInfoResponse' endpoint_info: The endpoint information through which to interact with a blockchain node.
        :param str service_attachment: A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        pulumi.set(__self__, "endpoint_info", endpoint_info)
        pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter(name="endpointInfo")
    def endpoint_info(self) -> 'outputs.EndpointInfoResponse':
        """
        The endpoint information through which to interact with a blockchain node.
        """
        return pulumi.get(self, "endpoint_info")

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> str:
        """
        A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        return pulumi.get(self, "service_attachment")


@pulumi.output_type
class EndpointInfoResponse(dict):
    """
    Contains endpoint information through which to interact with a blockchain node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonRpcApiEndpoint":
            suggest = "json_rpc_api_endpoint"
        elif key == "websocketsApiEndpoint":
            suggest = "websockets_api_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 json_rpc_api_endpoint: str,
                 websockets_api_endpoint: str):
        """
        Contains endpoint information through which to interact with a blockchain node.
        :param str json_rpc_api_endpoint: The assigned URL for the node JSON-RPC API endpoint.
        :param str websockets_api_endpoint: The assigned URL for the node WebSockets API endpoint.
        """
        pulumi.set(__self__, "json_rpc_api_endpoint", json_rpc_api_endpoint)
        pulumi.set(__self__, "websockets_api_endpoint", websockets_api_endpoint)

    @property
    @pulumi.getter(name="jsonRpcApiEndpoint")
    def json_rpc_api_endpoint(self) -> str:
        """
        The assigned URL for the node JSON-RPC API endpoint.
        """
        return pulumi.get(self, "json_rpc_api_endpoint")

    @property
    @pulumi.getter(name="websocketsApiEndpoint")
    def websockets_api_endpoint(self) -> str:
        """
        The assigned URL for the node WebSockets API endpoint.
        """
        return pulumi.get(self, "websockets_api_endpoint")


@pulumi.output_type
class EthereumDetailsResponse(dict):
    """
    Ethereum-specific blockchain node details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalEndpoints":
            suggest = "additional_endpoints"
        elif key == "apiEnableAdmin":
            suggest = "api_enable_admin"
        elif key == "apiEnableDebug":
            suggest = "api_enable_debug"
        elif key == "beaconFeeRecipient":
            suggest = "beacon_fee_recipient"
        elif key == "consensusClient":
            suggest = "consensus_client"
        elif key == "executionClient":
            suggest = "execution_client"
        elif key == "gethDetails":
            suggest = "geth_details"
        elif key == "nodeType":
            suggest = "node_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EthereumDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EthereumDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EthereumDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_endpoints: 'outputs.EthereumEndpointsResponse',
                 api_enable_admin: bool,
                 api_enable_debug: bool,
                 beacon_fee_recipient: str,
                 consensus_client: str,
                 execution_client: str,
                 geth_details: 'outputs.GethDetailsResponse',
                 network: str,
                 node_type: str):
        """
        Ethereum-specific blockchain node details.
        :param 'EthereumEndpointsResponse' additional_endpoints: Ethereum-specific endpoint information.
        :param bool api_enable_admin: Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.
        :param bool api_enable_debug: Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.
        :param str beacon_fee_recipient: An Ethereum address which the beacon client will send fee rewards to if no recipient is configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples of how this is used. Note that while this is often described as "suggested", as we run the execution node we can trust the execution node, and therefore this is considered enforced.
        :param str consensus_client: Immutable. The consensus client.
        :param str execution_client: Immutable. The execution client
        :param 'GethDetailsResponse' geth_details: Details for the Geth execution client.
        :param str network: Immutable. The Ethereum environment being accessed.
        :param str node_type: Immutable. The type of Ethereum node.
        """
        pulumi.set(__self__, "additional_endpoints", additional_endpoints)
        pulumi.set(__self__, "api_enable_admin", api_enable_admin)
        pulumi.set(__self__, "api_enable_debug", api_enable_debug)
        pulumi.set(__self__, "beacon_fee_recipient", beacon_fee_recipient)
        pulumi.set(__self__, "consensus_client", consensus_client)
        pulumi.set(__self__, "execution_client", execution_client)
        pulumi.set(__self__, "geth_details", geth_details)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "node_type", node_type)

    @property
    @pulumi.getter(name="additionalEndpoints")
    def additional_endpoints(self) -> 'outputs.EthereumEndpointsResponse':
        """
        Ethereum-specific endpoint information.
        """
        return pulumi.get(self, "additional_endpoints")

    @property
    @pulumi.getter(name="apiEnableAdmin")
    def api_enable_admin(self) -> bool:
        """
        Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.
        """
        return pulumi.get(self, "api_enable_admin")

    @property
    @pulumi.getter(name="apiEnableDebug")
    def api_enable_debug(self) -> bool:
        """
        Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.
        """
        return pulumi.get(self, "api_enable_debug")

    @property
    @pulumi.getter(name="beaconFeeRecipient")
    def beacon_fee_recipient(self) -> str:
        """
        An Ethereum address which the beacon client will send fee rewards to if no recipient is configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples of how this is used. Note that while this is often described as "suggested", as we run the execution node we can trust the execution node, and therefore this is considered enforced.
        """
        return pulumi.get(self, "beacon_fee_recipient")

    @property
    @pulumi.getter(name="consensusClient")
    def consensus_client(self) -> str:
        """
        Immutable. The consensus client.
        """
        return pulumi.get(self, "consensus_client")

    @property
    @pulumi.getter(name="executionClient")
    def execution_client(self) -> str:
        """
        Immutable. The execution client
        """
        return pulumi.get(self, "execution_client")

    @property
    @pulumi.getter(name="gethDetails")
    def geth_details(self) -> 'outputs.GethDetailsResponse':
        """
        Details for the Geth execution client.
        """
        return pulumi.get(self, "geth_details")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Immutable. The Ethereum environment being accessed.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Immutable. The type of Ethereum node.
        """
        return pulumi.get(self, "node_type")


@pulumi.output_type
class EthereumEndpointsResponse(dict):
    """
    Contains endpoint information specific to Ethereum nodes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beaconApiEndpoint":
            suggest = "beacon_api_endpoint"
        elif key == "beaconPrometheusMetricsApiEndpoint":
            suggest = "beacon_prometheus_metrics_api_endpoint"
        elif key == "executionClientPrometheusMetricsApiEndpoint":
            suggest = "execution_client_prometheus_metrics_api_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EthereumEndpointsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EthereumEndpointsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EthereumEndpointsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 beacon_api_endpoint: str,
                 beacon_prometheus_metrics_api_endpoint: str,
                 execution_client_prometheus_metrics_api_endpoint: str):
        """
        Contains endpoint information specific to Ethereum nodes.
        :param str beacon_api_endpoint: The assigned URL for the node's Beacon API endpoint.
        :param str beacon_prometheus_metrics_api_endpoint: The assigned URL for the node's Beacon Prometheus metrics endpoint. See [Prometheus Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html) for more details.
        :param str execution_client_prometheus_metrics_api_endpoint: The assigned URL for the node's execution client's Prometheus metrics endpoint.
        """
        pulumi.set(__self__, "beacon_api_endpoint", beacon_api_endpoint)
        pulumi.set(__self__, "beacon_prometheus_metrics_api_endpoint", beacon_prometheus_metrics_api_endpoint)
        pulumi.set(__self__, "execution_client_prometheus_metrics_api_endpoint", execution_client_prometheus_metrics_api_endpoint)

    @property
    @pulumi.getter(name="beaconApiEndpoint")
    def beacon_api_endpoint(self) -> str:
        """
        The assigned URL for the node's Beacon API endpoint.
        """
        return pulumi.get(self, "beacon_api_endpoint")

    @property
    @pulumi.getter(name="beaconPrometheusMetricsApiEndpoint")
    def beacon_prometheus_metrics_api_endpoint(self) -> str:
        """
        The assigned URL for the node's Beacon Prometheus metrics endpoint. See [Prometheus Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html) for more details.
        """
        return pulumi.get(self, "beacon_prometheus_metrics_api_endpoint")

    @property
    @pulumi.getter(name="executionClientPrometheusMetricsApiEndpoint")
    def execution_client_prometheus_metrics_api_endpoint(self) -> str:
        """
        The assigned URL for the node's execution client's Prometheus metrics endpoint.
        """
        return pulumi.get(self, "execution_client_prometheus_metrics_api_endpoint")


@pulumi.output_type
class GethDetailsResponse(dict):
    """
    Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "garbageCollectionMode":
            suggest = "garbage_collection_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GethDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GethDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GethDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 garbage_collection_mode: str):
        """
        Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.
        :param str garbage_collection_mode: Immutable. Blockchain garbage collection mode.
        """
        pulumi.set(__self__, "garbage_collection_mode", garbage_collection_mode)

    @property
    @pulumi.getter(name="garbageCollectionMode")
    def garbage_collection_mode(self) -> str:
        """
        Immutable. Blockchain garbage collection mode.
        """
        return pulumi.get(self, "garbage_collection_mode")


