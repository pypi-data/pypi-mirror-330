# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'EthereumDetailsArgs',
    'GethDetailsArgs',
]

@pulumi.input_type
class EthereumDetailsArgs:
    def __init__(__self__, *,
                 api_enable_admin: Optional[pulumi.Input[bool]] = None,
                 api_enable_debug: Optional[pulumi.Input[bool]] = None,
                 beacon_fee_recipient: Optional[pulumi.Input[str]] = None,
                 consensus_client: Optional[pulumi.Input['EthereumDetailsConsensusClient']] = None,
                 execution_client: Optional[pulumi.Input['EthereumDetailsExecutionClient']] = None,
                 geth_details: Optional[pulumi.Input['GethDetailsArgs']] = None,
                 network: Optional[pulumi.Input['EthereumDetailsNetwork']] = None,
                 node_type: Optional[pulumi.Input['EthereumDetailsNodeType']] = None):
        """
        Ethereum-specific blockchain node details.
        :param pulumi.Input[bool] api_enable_admin: Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.
        :param pulumi.Input[bool] api_enable_debug: Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.
        :param pulumi.Input[str] beacon_fee_recipient: An Ethereum address which the beacon client will send fee rewards to if no recipient is configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples of how this is used. Note that while this is often described as "suggested", as we run the execution node we can trust the execution node, and therefore this is considered enforced.
        :param pulumi.Input['EthereumDetailsConsensusClient'] consensus_client: Immutable. The consensus client.
        :param pulumi.Input['EthereumDetailsExecutionClient'] execution_client: Immutable. The execution client
        :param pulumi.Input['GethDetailsArgs'] geth_details: Details for the Geth execution client.
        :param pulumi.Input['EthereumDetailsNetwork'] network: Immutable. The Ethereum environment being accessed.
        :param pulumi.Input['EthereumDetailsNodeType'] node_type: Immutable. The type of Ethereum node.
        """
        if api_enable_admin is not None:
            pulumi.set(__self__, "api_enable_admin", api_enable_admin)
        if api_enable_debug is not None:
            pulumi.set(__self__, "api_enable_debug", api_enable_debug)
        if beacon_fee_recipient is not None:
            pulumi.set(__self__, "beacon_fee_recipient", beacon_fee_recipient)
        if consensus_client is not None:
            pulumi.set(__self__, "consensus_client", consensus_client)
        if execution_client is not None:
            pulumi.set(__self__, "execution_client", execution_client)
        if geth_details is not None:
            pulumi.set(__self__, "geth_details", geth_details)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)

    @property
    @pulumi.getter(name="apiEnableAdmin")
    def api_enable_admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.
        """
        return pulumi.get(self, "api_enable_admin")

    @api_enable_admin.setter
    def api_enable_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_enable_admin", value)

    @property
    @pulumi.getter(name="apiEnableDebug")
    def api_enable_debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.
        """
        return pulumi.get(self, "api_enable_debug")

    @api_enable_debug.setter
    def api_enable_debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_enable_debug", value)

    @property
    @pulumi.getter(name="beaconFeeRecipient")
    def beacon_fee_recipient(self) -> Optional[pulumi.Input[str]]:
        """
        An Ethereum address which the beacon client will send fee rewards to if no recipient is configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples of how this is used. Note that while this is often described as "suggested", as we run the execution node we can trust the execution node, and therefore this is considered enforced.
        """
        return pulumi.get(self, "beacon_fee_recipient")

    @beacon_fee_recipient.setter
    def beacon_fee_recipient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_fee_recipient", value)

    @property
    @pulumi.getter(name="consensusClient")
    def consensus_client(self) -> Optional[pulumi.Input['EthereumDetailsConsensusClient']]:
        """
        Immutable. The consensus client.
        """
        return pulumi.get(self, "consensus_client")

    @consensus_client.setter
    def consensus_client(self, value: Optional[pulumi.Input['EthereumDetailsConsensusClient']]):
        pulumi.set(self, "consensus_client", value)

    @property
    @pulumi.getter(name="executionClient")
    def execution_client(self) -> Optional[pulumi.Input['EthereumDetailsExecutionClient']]:
        """
        Immutable. The execution client
        """
        return pulumi.get(self, "execution_client")

    @execution_client.setter
    def execution_client(self, value: Optional[pulumi.Input['EthereumDetailsExecutionClient']]):
        pulumi.set(self, "execution_client", value)

    @property
    @pulumi.getter(name="gethDetails")
    def geth_details(self) -> Optional[pulumi.Input['GethDetailsArgs']]:
        """
        Details for the Geth execution client.
        """
        return pulumi.get(self, "geth_details")

    @geth_details.setter
    def geth_details(self, value: Optional[pulumi.Input['GethDetailsArgs']]):
        pulumi.set(self, "geth_details", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['EthereumDetailsNetwork']]:
        """
        Immutable. The Ethereum environment being accessed.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['EthereumDetailsNetwork']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input['EthereumDetailsNodeType']]:
        """
        Immutable. The type of Ethereum node.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input['EthereumDetailsNodeType']]):
        pulumi.set(self, "node_type", value)


@pulumi.input_type
class GethDetailsArgs:
    def __init__(__self__, *,
                 garbage_collection_mode: Optional[pulumi.Input['GethDetailsGarbageCollectionMode']] = None):
        """
        Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.
        :param pulumi.Input['GethDetailsGarbageCollectionMode'] garbage_collection_mode: Immutable. Blockchain garbage collection mode.
        """
        if garbage_collection_mode is not None:
            pulumi.set(__self__, "garbage_collection_mode", garbage_collection_mode)

    @property
    @pulumi.getter(name="garbageCollectionMode")
    def garbage_collection_mode(self) -> Optional[pulumi.Input['GethDetailsGarbageCollectionMode']]:
        """
        Immutable. Blockchain garbage collection mode.
        """
        return pulumi.get(self, "garbage_collection_mode")

    @garbage_collection_mode.setter
    def garbage_collection_mode(self, value: Optional[pulumi.Input['GethDetailsGarbageCollectionMode']]):
        pulumi.set(self, "garbage_collection_mode", value)


