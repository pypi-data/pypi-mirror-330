# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDeviceSessionResult',
    'AwaitableGetDeviceSessionResult',
    'get_device_session',
    'get_device_session_output',
]

@pulumi.output_type
class GetDeviceSessionResult:
    def __init__(__self__, active_start_time=None, android_device=None, create_time=None, display_name=None, expire_time=None, inactivity_timeout=None, name=None, state=None, state_histories=None, ttl=None):
        if active_start_time and not isinstance(active_start_time, str):
            raise TypeError("Expected argument 'active_start_time' to be a str")
        pulumi.set(__self__, "active_start_time", active_start_time)
        if android_device and not isinstance(android_device, dict):
            raise TypeError("Expected argument 'android_device' to be a dict")
        pulumi.set(__self__, "android_device", android_device)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if inactivity_timeout and not isinstance(inactivity_timeout, str):
            raise TypeError("Expected argument 'inactivity_timeout' to be a str")
        pulumi.set(__self__, "inactivity_timeout", inactivity_timeout)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_histories and not isinstance(state_histories, list):
            raise TypeError("Expected argument 'state_histories' to be a list")
        pulumi.set(__self__, "state_histories", state_histories)
        if ttl and not isinstance(ttl, str):
            raise TypeError("Expected argument 'ttl' to be a str")
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="activeStartTime")
    def active_start_time(self) -> str:
        """
        The timestamp that the session first became ACTIVE.
        """
        return pulumi.get(self, "active_start_time")

    @property
    @pulumi.getter(name="androidDevice")
    def android_device(self) -> 'outputs.AndroidDeviceResponse':
        """
        The requested device
        """
        return pulumi.get(self, "android_device")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time that the Session was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The title of the DeviceSession to be presented in the UI.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="inactivityTimeout")
    def inactivity_timeout(self) -> str:
        """
        The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
        """
        return pulumi.get(self, "inactivity_timeout")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the DeviceSession.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateHistories")
    def state_histories(self) -> Sequence['outputs.SessionStateEventResponse']:
        """
        The historical state transitions of the session_state message including the current session state.
        """
        return pulumi.get(self, "state_histories")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
        """
        return pulumi.get(self, "ttl")


class AwaitableGetDeviceSessionResult(GetDeviceSessionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceSessionResult(
            active_start_time=self.active_start_time,
            android_device=self.android_device,
            create_time=self.create_time,
            display_name=self.display_name,
            expire_time=self.expire_time,
            inactivity_timeout=self.inactivity_timeout,
            name=self.name,
            state=self.state,
            state_histories=self.state_histories,
            ttl=self.ttl)


def get_device_session(device_session_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceSessionResult:
    """
    GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
    """
    __args__ = dict()
    __args__['deviceSessionId'] = device_session_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:testing/v1:getDeviceSession', __args__, opts=opts, typ=GetDeviceSessionResult).value

    return AwaitableGetDeviceSessionResult(
        active_start_time=pulumi.get(__ret__, 'active_start_time'),
        android_device=pulumi.get(__ret__, 'android_device'),
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        inactivity_timeout=pulumi.get(__ret__, 'inactivity_timeout'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        state_histories=pulumi.get(__ret__, 'state_histories'),
        ttl=pulumi.get(__ret__, 'ttl'))


@_utilities.lift_output_func(get_device_session)
def get_device_session_output(device_session_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeviceSessionResult]:
    """
    GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
    """
    ...
