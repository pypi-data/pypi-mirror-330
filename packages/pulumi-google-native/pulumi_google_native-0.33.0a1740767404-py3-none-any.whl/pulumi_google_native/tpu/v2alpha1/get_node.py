# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNodeResult',
    'AwaitableGetNodeResult',
    'get_node',
    'get_node_output',
]

@pulumi.output_type
class GetNodeResult:
    def __init__(__self__, accelerator_config=None, accelerator_type=None, api_version=None, autocheckpoint_enabled=None, boot_disk_config=None, cidr_block=None, create_time=None, data_disks=None, description=None, health=None, health_description=None, labels=None, metadata=None, multislice_node=None, name=None, network_config=None, network_endpoints=None, queued_resource=None, runtime_version=None, scheduling_config=None, service_account=None, shielded_instance_config=None, state=None, symptoms=None, tags=None):
        if accelerator_config and not isinstance(accelerator_config, dict):
            raise TypeError("Expected argument 'accelerator_config' to be a dict")
        pulumi.set(__self__, "accelerator_config", accelerator_config)
        if accelerator_type and not isinstance(accelerator_type, str):
            raise TypeError("Expected argument 'accelerator_type' to be a str")
        pulumi.set(__self__, "accelerator_type", accelerator_type)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if autocheckpoint_enabled and not isinstance(autocheckpoint_enabled, bool):
            raise TypeError("Expected argument 'autocheckpoint_enabled' to be a bool")
        pulumi.set(__self__, "autocheckpoint_enabled", autocheckpoint_enabled)
        if boot_disk_config and not isinstance(boot_disk_config, dict):
            raise TypeError("Expected argument 'boot_disk_config' to be a dict")
        pulumi.set(__self__, "boot_disk_config", boot_disk_config)
        if cidr_block and not isinstance(cidr_block, str):
            raise TypeError("Expected argument 'cidr_block' to be a str")
        pulumi.set(__self__, "cidr_block", cidr_block)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if data_disks and not isinstance(data_disks, list):
            raise TypeError("Expected argument 'data_disks' to be a list")
        pulumi.set(__self__, "data_disks", data_disks)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if health and not isinstance(health, str):
            raise TypeError("Expected argument 'health' to be a str")
        pulumi.set(__self__, "health", health)
        if health_description and not isinstance(health_description, str):
            raise TypeError("Expected argument 'health_description' to be a str")
        pulumi.set(__self__, "health_description", health_description)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if multislice_node and not isinstance(multislice_node, bool):
            raise TypeError("Expected argument 'multislice_node' to be a bool")
        pulumi.set(__self__, "multislice_node", multislice_node)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_config and not isinstance(network_config, dict):
            raise TypeError("Expected argument 'network_config' to be a dict")
        pulumi.set(__self__, "network_config", network_config)
        if network_endpoints and not isinstance(network_endpoints, list):
            raise TypeError("Expected argument 'network_endpoints' to be a list")
        pulumi.set(__self__, "network_endpoints", network_endpoints)
        if queued_resource and not isinstance(queued_resource, str):
            raise TypeError("Expected argument 'queued_resource' to be a str")
        pulumi.set(__self__, "queued_resource", queued_resource)
        if runtime_version and not isinstance(runtime_version, str):
            raise TypeError("Expected argument 'runtime_version' to be a str")
        pulumi.set(__self__, "runtime_version", runtime_version)
        if scheduling_config and not isinstance(scheduling_config, dict):
            raise TypeError("Expected argument 'scheduling_config' to be a dict")
        pulumi.set(__self__, "scheduling_config", scheduling_config)
        if service_account and not isinstance(service_account, dict):
            raise TypeError("Expected argument 'service_account' to be a dict")
        pulumi.set(__self__, "service_account", service_account)
        if shielded_instance_config and not isinstance(shielded_instance_config, dict):
            raise TypeError("Expected argument 'shielded_instance_config' to be a dict")
        pulumi.set(__self__, "shielded_instance_config", shielded_instance_config)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if symptoms and not isinstance(symptoms, list):
            raise TypeError("Expected argument 'symptoms' to be a list")
        pulumi.set(__self__, "symptoms", symptoms)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="acceleratorConfig")
    def accelerator_config(self) -> 'outputs.AcceleratorConfigResponse':
        """
        The AccleratorConfig for the TPU Node.
        """
        return pulumi.get(self, "accelerator_config")

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> str:
        """
        The type of hardware accelerators associated with this node.
        """
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version that created this Node.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="autocheckpointEnabled")
    def autocheckpoint_enabled(self) -> bool:
        """
        Optional. Whether Autocheckpoint is enabled.
        """
        return pulumi.get(self, "autocheckpoint_enabled")

    @property
    @pulumi.getter(name="bootDiskConfig")
    def boot_disk_config(self) -> 'outputs.BootDiskConfigResponse':
        """
        Optional. Boot disk configuration.
        """
        return pulumi.get(self, "boot_disk_config")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the node was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.AttachedDiskResponse']:
        """
        The additional data disks for the Node.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The user-supplied description of the TPU. Maximum of 512 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        The health status of the TPU node.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="healthDescription")
    def health_description(self) -> str:
        """
        If this field is populated, it contains a description of why the TPU Node is unhealthy.
        """
        return pulumi.get(self, "health_description")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Resource labels to represent user-provided metadata.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="multisliceNode")
    def multislice_node(self) -> bool:
        """
        Whether the Node belongs to a Multislice group.
        """
        return pulumi.get(self, "multislice_node")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The name of the TPU.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> 'outputs.NetworkConfigResponse':
        """
        Network configurations for the TPU node.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="networkEndpoints")
    def network_endpoints(self) -> Sequence['outputs.NetworkEndpointResponse']:
        """
        The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
        """
        return pulumi.get(self, "network_endpoints")

    @property
    @pulumi.getter(name="queuedResource")
    def queued_resource(self) -> str:
        """
        The qualified name of the QueuedResource that requested this Node.
        """
        return pulumi.get(self, "queued_resource")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> str:
        """
        The runtime version running in the Node.
        """
        return pulumi.get(self, "runtime_version")

    @property
    @pulumi.getter(name="schedulingConfig")
    def scheduling_config(self) -> 'outputs.SchedulingConfigResponse':
        """
        The scheduling options for this node.
        """
        return pulumi.get(self, "scheduling_config")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> 'outputs.ServiceAccountResponse':
        """
        The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="shieldedInstanceConfig")
    def shielded_instance_config(self) -> 'outputs.ShieldedInstanceConfigResponse':
        """
        Shielded Instance options.
        """
        return pulumi.get(self, "shielded_instance_config")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state for the TPU Node.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def symptoms(self) -> Sequence['outputs.SymptomResponse']:
        """
        The Symptoms that have occurred to the TPU Node.
        """
        return pulumi.get(self, "symptoms")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
        """
        return pulumi.get(self, "tags")


class AwaitableGetNodeResult(GetNodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNodeResult(
            accelerator_config=self.accelerator_config,
            accelerator_type=self.accelerator_type,
            api_version=self.api_version,
            autocheckpoint_enabled=self.autocheckpoint_enabled,
            boot_disk_config=self.boot_disk_config,
            cidr_block=self.cidr_block,
            create_time=self.create_time,
            data_disks=self.data_disks,
            description=self.description,
            health=self.health,
            health_description=self.health_description,
            labels=self.labels,
            metadata=self.metadata,
            multislice_node=self.multislice_node,
            name=self.name,
            network_config=self.network_config,
            network_endpoints=self.network_endpoints,
            queued_resource=self.queued_resource,
            runtime_version=self.runtime_version,
            scheduling_config=self.scheduling_config,
            service_account=self.service_account,
            shielded_instance_config=self.shielded_instance_config,
            state=self.state,
            symptoms=self.symptoms,
            tags=self.tags)


def get_node(location: Optional[str] = None,
             node_id: Optional[str] = None,
             project: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNodeResult:
    """
    Gets the details of a node.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['nodeId'] = node_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:tpu/v2alpha1:getNode', __args__, opts=opts, typ=GetNodeResult).value

    return AwaitableGetNodeResult(
        accelerator_config=pulumi.get(__ret__, 'accelerator_config'),
        accelerator_type=pulumi.get(__ret__, 'accelerator_type'),
        api_version=pulumi.get(__ret__, 'api_version'),
        autocheckpoint_enabled=pulumi.get(__ret__, 'autocheckpoint_enabled'),
        boot_disk_config=pulumi.get(__ret__, 'boot_disk_config'),
        cidr_block=pulumi.get(__ret__, 'cidr_block'),
        create_time=pulumi.get(__ret__, 'create_time'),
        data_disks=pulumi.get(__ret__, 'data_disks'),
        description=pulumi.get(__ret__, 'description'),
        health=pulumi.get(__ret__, 'health'),
        health_description=pulumi.get(__ret__, 'health_description'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata=pulumi.get(__ret__, 'metadata'),
        multislice_node=pulumi.get(__ret__, 'multislice_node'),
        name=pulumi.get(__ret__, 'name'),
        network_config=pulumi.get(__ret__, 'network_config'),
        network_endpoints=pulumi.get(__ret__, 'network_endpoints'),
        queued_resource=pulumi.get(__ret__, 'queued_resource'),
        runtime_version=pulumi.get(__ret__, 'runtime_version'),
        scheduling_config=pulumi.get(__ret__, 'scheduling_config'),
        service_account=pulumi.get(__ret__, 'service_account'),
        shielded_instance_config=pulumi.get(__ret__, 'shielded_instance_config'),
        state=pulumi.get(__ret__, 'state'),
        symptoms=pulumi.get(__ret__, 'symptoms'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_node)
def get_node_output(location: Optional[pulumi.Input[str]] = None,
                    node_id: Optional[pulumi.Input[str]] = None,
                    project: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNodeResult]:
    """
    Gets the details of a node.
    """
    ...
