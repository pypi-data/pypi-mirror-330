# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    def __init__(__self__, database_roles=None, name=None, password=None, user_type=None):
        if database_roles and not isinstance(database_roles, list):
            raise TypeError("Expected argument 'database_roles' to be a list")
        pulumi.set(__self__, "database_roles", database_roles)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="databaseRoles")
    def database_roles(self) -> Sequence[str]:
        """
        Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.
        """
        return pulumi.get(self, "database_roles")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Input only. Password for the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        """
        Optional. Type of this user.
        """
        return pulumi.get(self, "user_type")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            database_roles=self.database_roles,
            name=self.name,
            password=self.password,
            user_type=self.user_type)


def get_user(cluster_id: Optional[str] = None,
             location: Optional[str] = None,
             project: Optional[str] = None,
             user_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Gets details of a single User.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:alloydb/v1alpha:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        database_roles=pulumi.get(__ret__, 'database_roles'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        user_type=pulumi.get(__ret__, 'user_type'))


@_utilities.lift_output_func(get_user)
def get_user_output(cluster_id: Optional[pulumi.Input[str]] = None,
                    location: Optional[pulumi.Input[str]] = None,
                    project: Optional[pulumi.Input[Optional[str]]] = None,
                    user_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    Gets details of a single User.
    """
    ...
