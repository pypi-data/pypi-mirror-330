# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    def __init__(__self__, annotations=None, automated_backup_policy=None, backup_source=None, cluster_type=None, continuous_backup_config=None, continuous_backup_info=None, create_time=None, database_version=None, delete_time=None, display_name=None, encryption_config=None, encryption_info=None, etag=None, initial_user=None, labels=None, migration_source=None, name=None, network=None, network_config=None, primary_config=None, reconciling=None, secondary_config=None, ssl_config=None, state=None, uid=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if automated_backup_policy and not isinstance(automated_backup_policy, dict):
            raise TypeError("Expected argument 'automated_backup_policy' to be a dict")
        pulumi.set(__self__, "automated_backup_policy", automated_backup_policy)
        if backup_source and not isinstance(backup_source, dict):
            raise TypeError("Expected argument 'backup_source' to be a dict")
        pulumi.set(__self__, "backup_source", backup_source)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if continuous_backup_config and not isinstance(continuous_backup_config, dict):
            raise TypeError("Expected argument 'continuous_backup_config' to be a dict")
        pulumi.set(__self__, "continuous_backup_config", continuous_backup_config)
        if continuous_backup_info and not isinstance(continuous_backup_info, dict):
            raise TypeError("Expected argument 'continuous_backup_info' to be a dict")
        pulumi.set(__self__, "continuous_backup_info", continuous_backup_info)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if database_version and not isinstance(database_version, str):
            raise TypeError("Expected argument 'database_version' to be a str")
        pulumi.set(__self__, "database_version", database_version)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_config and not isinstance(encryption_config, dict):
            raise TypeError("Expected argument 'encryption_config' to be a dict")
        pulumi.set(__self__, "encryption_config", encryption_config)
        if encryption_info and not isinstance(encryption_info, dict):
            raise TypeError("Expected argument 'encryption_info' to be a dict")
        pulumi.set(__self__, "encryption_info", encryption_info)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if initial_user and not isinstance(initial_user, dict):
            raise TypeError("Expected argument 'initial_user' to be a dict")
        pulumi.set(__self__, "initial_user", initial_user)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if migration_source and not isinstance(migration_source, dict):
            raise TypeError("Expected argument 'migration_source' to be a dict")
        pulumi.set(__self__, "migration_source", migration_source)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if network_config and not isinstance(network_config, dict):
            raise TypeError("Expected argument 'network_config' to be a dict")
        pulumi.set(__self__, "network_config", network_config)
        if primary_config and not isinstance(primary_config, dict):
            raise TypeError("Expected argument 'primary_config' to be a dict")
        pulumi.set(__self__, "primary_config", primary_config)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if secondary_config and not isinstance(secondary_config, dict):
            raise TypeError("Expected argument 'secondary_config' to be a dict")
        pulumi.set(__self__, "secondary_config", secondary_config)
        if ssl_config and not isinstance(ssl_config, dict):
            raise TypeError("Expected argument 'ssl_config' to be a dict")
        pulumi.set(__self__, "ssl_config", ssl_config)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> 'outputs.AutomatedBackupPolicyResponse':
        """
        The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        """
        return pulumi.get(self, "automated_backup_policy")

    @property
    @pulumi.getter(name="backupSource")
    def backup_source(self) -> 'outputs.BackupSourceResponse':
        """
        Cluster created from backup.
        """
        return pulumi.get(self, "backup_source")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> 'outputs.ContinuousBackupConfigResponse':
        """
        Optional. Continuous backup configuration for this cluster.
        """
        return pulumi.get(self, "continuous_backup_config")

    @property
    @pulumi.getter(name="continuousBackupInfo")
    def continuous_backup_info(self) -> 'outputs.ContinuousBackupInfoResponse':
        """
        Continuous backup properties for this cluster.
        """
        return pulumi.get(self, "continuous_backup_info")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        """
        Delete time stamp
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> 'outputs.EncryptionConfigResponse':
        """
        Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="encryptionInfo")
    def encryption_info(self) -> 'outputs.EncryptionInfoResponse':
        """
        The encryption information for the cluster.
        """
        return pulumi.get(self, "encryption_info")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> 'outputs.UserPasswordResponse':
        """
        Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        """
        return pulumi.get(self, "initial_user")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="migrationSource")
    def migration_source(self) -> 'outputs.MigrationSourceResponse':
        """
        Cluster created via DMS migration.
        """
        return pulumi.get(self, "migration_source")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project}/global/networks/{network_id}\". This is required to create a cluster. Deprecated, use network_config.network instead.""")
    def network(self) -> str:
        """
        The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> 'outputs.NetworkConfigResponse':
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="primaryConfig")
    def primary_config(self) -> 'outputs.PrimaryConfigResponse':
        """
        Cross Region replication config specific to PRIMARY cluster.
        """
        return pulumi.get(self, "primary_config")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        """
        Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="secondaryConfig")
    def secondary_config(self) -> 'outputs.SecondaryConfigResponse':
        """
        Cross Region replication config specific to SECONDARY cluster.
        """
        return pulumi.get(self, "secondary_config")

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> 'outputs.SslConfigResponse':
        """
        SSL configuration for this AlloyDB cluster.
        """
        return pulumi.get(self, "ssl_config")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current serving state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            annotations=self.annotations,
            automated_backup_policy=self.automated_backup_policy,
            backup_source=self.backup_source,
            cluster_type=self.cluster_type,
            continuous_backup_config=self.continuous_backup_config,
            continuous_backup_info=self.continuous_backup_info,
            create_time=self.create_time,
            database_version=self.database_version,
            delete_time=self.delete_time,
            display_name=self.display_name,
            encryption_config=self.encryption_config,
            encryption_info=self.encryption_info,
            etag=self.etag,
            initial_user=self.initial_user,
            labels=self.labels,
            migration_source=self.migration_source,
            name=self.name,
            network=self.network,
            network_config=self.network_config,
            primary_config=self.primary_config,
            reconciling=self.reconciling,
            secondary_config=self.secondary_config,
            ssl_config=self.ssl_config,
            state=self.state,
            uid=self.uid,
            update_time=self.update_time)


def get_cluster(cluster_id: Optional[str] = None,
                location: Optional[str] = None,
                project: Optional[str] = None,
                view: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Gets details of a single Cluster.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:alloydb/v1beta:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        automated_backup_policy=pulumi.get(__ret__, 'automated_backup_policy'),
        backup_source=pulumi.get(__ret__, 'backup_source'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        continuous_backup_config=pulumi.get(__ret__, 'continuous_backup_config'),
        continuous_backup_info=pulumi.get(__ret__, 'continuous_backup_info'),
        create_time=pulumi.get(__ret__, 'create_time'),
        database_version=pulumi.get(__ret__, 'database_version'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_config=pulumi.get(__ret__, 'encryption_config'),
        encryption_info=pulumi.get(__ret__, 'encryption_info'),
        etag=pulumi.get(__ret__, 'etag'),
        initial_user=pulumi.get(__ret__, 'initial_user'),
        labels=pulumi.get(__ret__, 'labels'),
        migration_source=pulumi.get(__ret__, 'migration_source'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        network_config=pulumi.get(__ret__, 'network_config'),
        primary_config=pulumi.get(__ret__, 'primary_config'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        secondary_config=pulumi.get(__ret__, 'secondary_config'),
        ssl_config=pulumi.get(__ret__, 'ssl_config'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(cluster_id: Optional[pulumi.Input[str]] = None,
                       location: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       view: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Gets details of a single Cluster.
    """
    ...
