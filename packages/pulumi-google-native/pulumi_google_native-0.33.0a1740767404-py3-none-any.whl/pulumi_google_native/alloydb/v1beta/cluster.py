# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 network: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 automated_backup_policy: Optional[pulumi.Input['AutomatedBackupPolicyArgs']] = None,
                 continuous_backup_config: Optional[pulumi.Input['ContinuousBackupConfigArgs']] = None,
                 database_version: Optional[pulumi.Input['ClusterDatabaseVersion']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input['EncryptionConfigArgs']] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 initial_user: Optional[pulumi.Input['UserPasswordArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input['NetworkConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 secondary_config: Optional[pulumi.Input['SecondaryConfigArgs']] = None,
                 ssl_config: Optional[pulumi.Input['SslConfigArgs']] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_id: Required. ID of the requesting object.
        :param pulumi.Input[str] network: The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        :param pulumi.Input['AutomatedBackupPolicyArgs'] automated_backup_policy: The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        :param pulumi.Input['ContinuousBackupConfigArgs'] continuous_backup_config: Optional. Continuous backup configuration for this cluster.
        :param pulumi.Input['ClusterDatabaseVersion'] database_version: Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input['EncryptionConfigArgs'] encryption_config: Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        :param pulumi.Input[str] etag: For Resource freshness validation (https://google.aip.dev/154)
        :param pulumi.Input['UserPasswordArgs'] initial_user: Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input['SecondaryConfigArgs'] secondary_config: Cross Region replication config specific to SECONDARY cluster.
        :param pulumi.Input['SslConfigArgs'] ssl_config: SSL configuration for this AlloyDB cluster.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if network is not None:
            warnings.warn("""Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project}/global/networks/{network_id}\". This is required to create a cluster. Deprecated, use network_config.network instead.""", DeprecationWarning)
            pulumi.log.warn("""network is deprecated: Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project}/global/networks/{network_id}\". This is required to create a cluster. Deprecated, use network_config.network instead.""")
        pulumi.set(__self__, "network", network)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if automated_backup_policy is not None:
            pulumi.set(__self__, "automated_backup_policy", automated_backup_policy)
        if continuous_backup_config is not None:
            pulumi.set(__self__, "continuous_backup_config", continuous_backup_config)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if initial_user is not None:
            pulumi.set(__self__, "initial_user", initial_user)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if secondary_config is not None:
            pulumi.set(__self__, "secondary_config", secondary_config)
        if ssl_config is not None:
            pulumi.set(__self__, "ssl_config", ssl_config)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project}/global/networks/{network_id}\". This is required to create a cluster. Deprecated, use network_config.network instead.""")
    def network(self) -> pulumi.Input[str]:
        """
        The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> Optional[pulumi.Input['AutomatedBackupPolicyArgs']]:
        """
        The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        """
        return pulumi.get(self, "automated_backup_policy")

    @automated_backup_policy.setter
    def automated_backup_policy(self, value: Optional[pulumi.Input['AutomatedBackupPolicyArgs']]):
        pulumi.set(self, "automated_backup_policy", value)

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> Optional[pulumi.Input['ContinuousBackupConfigArgs']]:
        """
        Optional. Continuous backup configuration for this cluster.
        """
        return pulumi.get(self, "continuous_backup_config")

    @continuous_backup_config.setter
    def continuous_backup_config(self, value: Optional[pulumi.Input['ContinuousBackupConfigArgs']]):
        pulumi.set(self, "continuous_backup_config", value)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[pulumi.Input['ClusterDatabaseVersion']]:
        """
        Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        """
        return pulumi.get(self, "database_version")

    @database_version.setter
    def database_version(self, value: Optional[pulumi.Input['ClusterDatabaseVersion']]):
        pulumi.set(self, "database_version", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['EncryptionConfigArgs']]:
        """
        Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['EncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> Optional[pulumi.Input['UserPasswordArgs']]:
        """
        Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        """
        return pulumi.get(self, "initial_user")

    @initial_user.setter
    def initial_user(self, value: Optional[pulumi.Input['UserPasswordArgs']]):
        pulumi.set(self, "initial_user", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['NetworkConfigArgs']]:
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['NetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="secondaryConfig")
    def secondary_config(self) -> Optional[pulumi.Input['SecondaryConfigArgs']]:
        """
        Cross Region replication config specific to SECONDARY cluster.
        """
        return pulumi.get(self, "secondary_config")

    @secondary_config.setter
    def secondary_config(self, value: Optional[pulumi.Input['SecondaryConfigArgs']]):
        pulumi.set(self, "secondary_config", value)

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> Optional[pulumi.Input['SslConfigArgs']]:
        """
        SSL configuration for this AlloyDB cluster.
        """
        return pulumi.get(self, "ssl_config")

    @ssl_config.setter
    def ssl_config(self, value: Optional[pulumi.Input['SslConfigArgs']]):
        pulumi.set(self, "ssl_config", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 automated_backup_policy: Optional[pulumi.Input[pulumi.InputType['AutomatedBackupPolicyArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 continuous_backup_config: Optional[pulumi.Input[pulumi.InputType['ContinuousBackupConfigArgs']]] = None,
                 database_version: Optional[pulumi.Input['ClusterDatabaseVersion']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['EncryptionConfigArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 initial_user: Optional[pulumi.Input[pulumi.InputType['UserPasswordArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['NetworkConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 secondary_config: Optional[pulumi.Input[pulumi.InputType['SecondaryConfigArgs']]] = None,
                 ssl_config: Optional[pulumi.Input[pulumi.InputType['SslConfigArgs']]] = None,
                 __props__=None):
        """
        Creates a new Cluster in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        :param pulumi.Input[pulumi.InputType['AutomatedBackupPolicyArgs']] automated_backup_policy: The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        :param pulumi.Input[str] cluster_id: Required. ID of the requesting object.
        :param pulumi.Input[pulumi.InputType['ContinuousBackupConfigArgs']] continuous_backup_config: Optional. Continuous backup configuration for this cluster.
        :param pulumi.Input['ClusterDatabaseVersion'] database_version: Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input[pulumi.InputType['EncryptionConfigArgs']] encryption_config: Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        :param pulumi.Input[str] etag: For Resource freshness validation (https://google.aip.dev/154)
        :param pulumi.Input[pulumi.InputType['UserPasswordArgs']] initial_user: Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs
        :param pulumi.Input[str] network: The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        :param pulumi.Input[str] request_id: Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        :param pulumi.Input[pulumi.InputType['SecondaryConfigArgs']] secondary_config: Cross Region replication config specific to SECONDARY cluster.
        :param pulumi.Input[pulumi.InputType['SslConfigArgs']] ssl_config: SSL configuration for this AlloyDB cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new Cluster in a given project and location.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 automated_backup_policy: Optional[pulumi.Input[pulumi.InputType['AutomatedBackupPolicyArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 continuous_backup_config: Optional[pulumi.Input[pulumi.InputType['ContinuousBackupConfigArgs']]] = None,
                 database_version: Optional[pulumi.Input['ClusterDatabaseVersion']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['EncryptionConfigArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 initial_user: Optional[pulumi.Input[pulumi.InputType['UserPasswordArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['NetworkConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 secondary_config: Optional[pulumi.Input[pulumi.InputType['SecondaryConfigArgs']]] = None,
                 ssl_config: Optional[pulumi.Input[pulumi.InputType['SslConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["automated_backup_policy"] = automated_backup_policy
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["continuous_backup_config"] = continuous_backup_config
            __props__.__dict__["database_version"] = database_version
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["encryption_config"] = encryption_config
            __props__.__dict__["etag"] = etag
            __props__.__dict__["initial_user"] = initial_user
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            __props__.__dict__["network_config"] = network_config
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["secondary_config"] = secondary_config
            __props__.__dict__["ssl_config"] = ssl_config
            __props__.__dict__["backup_source"] = None
            __props__.__dict__["cluster_type"] = None
            __props__.__dict__["continuous_backup_info"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["encryption_info"] = None
            __props__.__dict__["migration_source"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["primary_config"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["clusterId", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Cluster, __self__).__init__(
            'google-native:alloydb/v1beta:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ClusterArgs.__new__(ClusterArgs)

        __props__.__dict__["annotations"] = None
        __props__.__dict__["automated_backup_policy"] = None
        __props__.__dict__["backup_source"] = None
        __props__.__dict__["cluster_id"] = None
        __props__.__dict__["cluster_type"] = None
        __props__.__dict__["continuous_backup_config"] = None
        __props__.__dict__["continuous_backup_info"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["database_version"] = None
        __props__.__dict__["delete_time"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["encryption_config"] = None
        __props__.__dict__["encryption_info"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["initial_user"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["migration_source"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network"] = None
        __props__.__dict__["network_config"] = None
        __props__.__dict__["primary_config"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["reconciling"] = None
        __props__.__dict__["request_id"] = None
        __props__.__dict__["secondary_config"] = None
        __props__.__dict__["ssl_config"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["uid"] = None
        __props__.__dict__["update_time"] = None
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> pulumi.Output['outputs.AutomatedBackupPolicyResponse']:
        """
        The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        """
        return pulumi.get(self, "automated_backup_policy")

    @property
    @pulumi.getter(name="backupSource")
    def backup_source(self) -> pulumi.Output['outputs.BackupSourceResponse']:
        """
        Cluster created from backup.
        """
        return pulumi.get(self, "backup_source")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Required. ID of the requesting object.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> pulumi.Output['outputs.ContinuousBackupConfigResponse']:
        """
        Optional. Continuous backup configuration for this cluster.
        """
        return pulumi.get(self, "continuous_backup_config")

    @property
    @pulumi.getter(name="continuousBackupInfo")
    def continuous_backup_info(self) -> pulumi.Output['outputs.ContinuousBackupInfoResponse']:
        """
        Continuous backup properties for this cluster.
        """
        return pulumi.get(self, "continuous_backup_info")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> pulumi.Output[str]:
        """
        Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        Delete time stamp
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Output['outputs.EncryptionConfigResponse']:
        """
        Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="encryptionInfo")
    def encryption_info(self) -> pulumi.Output['outputs.EncryptionInfoResponse']:
        """
        The encryption information for the cluster.
        """
        return pulumi.get(self, "encryption_info")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        For Resource freshness validation (https://google.aip.dev/154)
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> pulumi.Output['outputs.UserPasswordResponse']:
        """
        Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        """
        return pulumi.get(self, "initial_user")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels as key value pairs
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="migrationSource")
    def migration_source(self) -> pulumi.Output['outputs.MigrationSourceResponse']:
        """
        Cluster created via DMS migration.
        """
        return pulumi.get(self, "migration_source")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project}/global/networks/{network_id}\". This is required to create a cluster. Deprecated, use network_config.network instead.""")
    def network(self) -> pulumi.Output[str]:
        """
        The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> pulumi.Output['outputs.NetworkConfigResponse']:
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="primaryConfig")
    def primary_config(self) -> pulumi.Output['outputs.PrimaryConfigResponse']:
        """
        Cross Region replication config specific to PRIMARY cluster.
        """
        return pulumi.get(self, "primary_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="secondaryConfig")
    def secondary_config(self) -> pulumi.Output['outputs.SecondaryConfigResponse']:
        """
        Cross Region replication config specific to SECONDARY cluster.
        """
        return pulumi.get(self, "secondary_config")

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> pulumi.Output['outputs.SslConfigResponse']:
        """
        SSL configuration for this AlloyDB cluster.
        """
        return pulumi.get(self, "ssl_config")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current serving state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time stamp
        """
        return pulumi.get(self, "update_time")

