# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetBatchPredictionJobResult',
    'AwaitableGetBatchPredictionJobResult',
    'get_batch_prediction_job',
    'get_batch_prediction_job_output',
]

@pulumi.output_type
class GetBatchPredictionJobResult:
    def __init__(__self__, completion_stats=None, create_time=None, dedicated_resources=None, disable_container_logging=None, display_name=None, encryption_spec=None, end_time=None, error=None, explanation_spec=None, generate_explanation=None, input_config=None, instance_config=None, labels=None, manual_batch_tuning_parameters=None, model=None, model_parameters=None, model_version_id=None, name=None, output_config=None, output_info=None, partial_failures=None, resources_consumed=None, service_account=None, start_time=None, state=None, unmanaged_container_model=None, update_time=None):
        if completion_stats and not isinstance(completion_stats, dict):
            raise TypeError("Expected argument 'completion_stats' to be a dict")
        pulumi.set(__self__, "completion_stats", completion_stats)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if dedicated_resources and not isinstance(dedicated_resources, dict):
            raise TypeError("Expected argument 'dedicated_resources' to be a dict")
        pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        if disable_container_logging and not isinstance(disable_container_logging, bool):
            raise TypeError("Expected argument 'disable_container_logging' to be a bool")
        pulumi.set(__self__, "disable_container_logging", disable_container_logging)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if explanation_spec and not isinstance(explanation_spec, dict):
            raise TypeError("Expected argument 'explanation_spec' to be a dict")
        pulumi.set(__self__, "explanation_spec", explanation_spec)
        if generate_explanation and not isinstance(generate_explanation, bool):
            raise TypeError("Expected argument 'generate_explanation' to be a bool")
        pulumi.set(__self__, "generate_explanation", generate_explanation)
        if input_config and not isinstance(input_config, dict):
            raise TypeError("Expected argument 'input_config' to be a dict")
        pulumi.set(__self__, "input_config", input_config)
        if instance_config and not isinstance(instance_config, dict):
            raise TypeError("Expected argument 'instance_config' to be a dict")
        pulumi.set(__self__, "instance_config", instance_config)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if manual_batch_tuning_parameters and not isinstance(manual_batch_tuning_parameters, dict):
            raise TypeError("Expected argument 'manual_batch_tuning_parameters' to be a dict")
        pulumi.set(__self__, "manual_batch_tuning_parameters", manual_batch_tuning_parameters)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if model_parameters and not isinstance(model_parameters, dict):
            raise TypeError("Expected argument 'model_parameters' to be a dict")
        pulumi.set(__self__, "model_parameters", model_parameters)
        if model_version_id and not isinstance(model_version_id, str):
            raise TypeError("Expected argument 'model_version_id' to be a str")
        pulumi.set(__self__, "model_version_id", model_version_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_config and not isinstance(output_config, dict):
            raise TypeError("Expected argument 'output_config' to be a dict")
        pulumi.set(__self__, "output_config", output_config)
        if output_info and not isinstance(output_info, dict):
            raise TypeError("Expected argument 'output_info' to be a dict")
        pulumi.set(__self__, "output_info", output_info)
        if partial_failures and not isinstance(partial_failures, list):
            raise TypeError("Expected argument 'partial_failures' to be a list")
        pulumi.set(__self__, "partial_failures", partial_failures)
        if resources_consumed and not isinstance(resources_consumed, dict):
            raise TypeError("Expected argument 'resources_consumed' to be a dict")
        pulumi.set(__self__, "resources_consumed", resources_consumed)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if unmanaged_container_model and not isinstance(unmanaged_container_model, dict):
            raise TypeError("Expected argument 'unmanaged_container_model' to be a dict")
        pulumi.set(__self__, "unmanaged_container_model", unmanaged_container_model)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="completionStats")
    def completion_stats(self) -> 'outputs.GoogleCloudAiplatformV1CompletionStatsResponse':
        """
        Statistics on completed and failed prediction instances.
        """
        return pulumi.get(self, "completion_stats")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the BatchPredictionJob was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> 'outputs.GoogleCloudAiplatformV1BatchDedicatedResourcesResponse':
        """
        The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
        """
        return pulumi.get(self, "dedicated_resources")

    @property
    @pulumi.getter(name="disableContainerLogging")
    def disable_container_logging(self) -> bool:
        """
        For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
        """
        return pulumi.get(self, "disable_container_logging")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-defined name of this BatchPredictionJob.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1EncryptionSpecResponse':
        """
        Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Time when the BatchPredictionJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.GoogleRpcStatusResponse':
        """
        Only populated when the job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="explanationSpec")
    def explanation_spec(self) -> 'outputs.GoogleCloudAiplatformV1ExplanationSpecResponse':
        """
        Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
        """
        return pulumi.get(self, "explanation_spec")

    @property
    @pulumi.getter(name="generateExplanation")
    def generate_explanation(self) -> bool:
        """
        Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
        """
        return pulumi.get(self, "generate_explanation")

    @property
    @pulumi.getter(name="inputConfig")
    def input_config(self) -> 'outputs.GoogleCloudAiplatformV1BatchPredictionJobInputConfigResponse':
        """
        Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
        """
        return pulumi.get(self, "input_config")

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> 'outputs.GoogleCloudAiplatformV1BatchPredictionJobInstanceConfigResponse':
        """
        Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
        """
        return pulumi.get(self, "instance_config")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="manualBatchTuningParameters")
    def manual_batch_tuning_parameters(self) -> 'outputs.GoogleCloudAiplatformV1ManualBatchTuningParametersResponse':
        """
        Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
        """
        return pulumi.get(self, "manual_batch_tuning_parameters")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modelParameters")
    def model_parameters(self) -> Any:
        """
        The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
        """
        return pulumi.get(self, "model_parameters")

    @property
    @pulumi.getter(name="modelVersionId")
    def model_version_id(self) -> str:
        """
        The version ID of the Model that produces the predictions via this job.
        """
        return pulumi.get(self, "model_version_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of the BatchPredictionJob.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> 'outputs.GoogleCloudAiplatformV1BatchPredictionJobOutputConfigResponse':
        """
        The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
        """
        return pulumi.get(self, "output_config")

    @property
    @pulumi.getter(name="outputInfo")
    def output_info(self) -> 'outputs.GoogleCloudAiplatformV1BatchPredictionJobOutputInfoResponse':
        """
        Information further describing the output of this job.
        """
        return pulumi.get(self, "output_info")

    @property
    @pulumi.getter(name="partialFailures")
    def partial_failures(self) -> Sequence['outputs.GoogleRpcStatusResponse']:
        """
        Partial failures encountered. For example, single files that can't be read. This field never exceeds 20 entries. Status details fields contain standard Google Cloud error details.
        """
        return pulumi.get(self, "partial_failures")

    @property
    @pulumi.getter(name="resourcesConsumed")
    def resources_consumed(self) -> 'outputs.GoogleCloudAiplatformV1ResourcesConsumedResponse':
        """
        Information about resources that had been consumed by this job. Provided in real time at best effort basis, as well as a final value once the job completes. Note: This field currently may be not populated for batch predictions that use AutoML Models.
        """
        return pulumi.get(self, "resources_consumed")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Time when the BatchPredictionJob for the first time entered the `JOB_STATE_RUNNING` state.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The detailed state of the job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="unmanagedContainerModel")
    def unmanaged_container_model(self) -> 'outputs.GoogleCloudAiplatformV1UnmanagedContainerModelResponse':
        """
        Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
        """
        return pulumi.get(self, "unmanaged_container_model")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the BatchPredictionJob was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetBatchPredictionJobResult(GetBatchPredictionJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBatchPredictionJobResult(
            completion_stats=self.completion_stats,
            create_time=self.create_time,
            dedicated_resources=self.dedicated_resources,
            disable_container_logging=self.disable_container_logging,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            end_time=self.end_time,
            error=self.error,
            explanation_spec=self.explanation_spec,
            generate_explanation=self.generate_explanation,
            input_config=self.input_config,
            instance_config=self.instance_config,
            labels=self.labels,
            manual_batch_tuning_parameters=self.manual_batch_tuning_parameters,
            model=self.model,
            model_parameters=self.model_parameters,
            model_version_id=self.model_version_id,
            name=self.name,
            output_config=self.output_config,
            output_info=self.output_info,
            partial_failures=self.partial_failures,
            resources_consumed=self.resources_consumed,
            service_account=self.service_account,
            start_time=self.start_time,
            state=self.state,
            unmanaged_container_model=self.unmanaged_container_model,
            update_time=self.update_time)


def get_batch_prediction_job(batch_prediction_job_id: Optional[str] = None,
                             location: Optional[str] = None,
                             project: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBatchPredictionJobResult:
    """
    Gets a BatchPredictionJob
    """
    __args__ = dict()
    __args__['batchPredictionJobId'] = batch_prediction_job_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getBatchPredictionJob', __args__, opts=opts, typ=GetBatchPredictionJobResult).value

    return AwaitableGetBatchPredictionJobResult(
        completion_stats=pulumi.get(__ret__, 'completion_stats'),
        create_time=pulumi.get(__ret__, 'create_time'),
        dedicated_resources=pulumi.get(__ret__, 'dedicated_resources'),
        disable_container_logging=pulumi.get(__ret__, 'disable_container_logging'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error=pulumi.get(__ret__, 'error'),
        explanation_spec=pulumi.get(__ret__, 'explanation_spec'),
        generate_explanation=pulumi.get(__ret__, 'generate_explanation'),
        input_config=pulumi.get(__ret__, 'input_config'),
        instance_config=pulumi.get(__ret__, 'instance_config'),
        labels=pulumi.get(__ret__, 'labels'),
        manual_batch_tuning_parameters=pulumi.get(__ret__, 'manual_batch_tuning_parameters'),
        model=pulumi.get(__ret__, 'model'),
        model_parameters=pulumi.get(__ret__, 'model_parameters'),
        model_version_id=pulumi.get(__ret__, 'model_version_id'),
        name=pulumi.get(__ret__, 'name'),
        output_config=pulumi.get(__ret__, 'output_config'),
        output_info=pulumi.get(__ret__, 'output_info'),
        partial_failures=pulumi.get(__ret__, 'partial_failures'),
        resources_consumed=pulumi.get(__ret__, 'resources_consumed'),
        service_account=pulumi.get(__ret__, 'service_account'),
        start_time=pulumi.get(__ret__, 'start_time'),
        state=pulumi.get(__ret__, 'state'),
        unmanaged_container_model=pulumi.get(__ret__, 'unmanaged_container_model'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_batch_prediction_job)
def get_batch_prediction_job_output(batch_prediction_job_id: Optional[pulumi.Input[str]] = None,
                                    location: Optional[pulumi.Input[str]] = None,
                                    project: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBatchPredictionJobResult]:
    """
    Gets a BatchPredictionJob
    """
    ...
