# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['SpecialistPoolArgs', 'SpecialistPool']

@pulumi.input_type
class SpecialistPoolArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 specialist_manager_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 specialist_worker_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SpecialistPool resource.
        :param pulumi.Input[str] display_name: The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
        :param pulumi.Input[str] name: The resource name of the SpecialistPool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] specialist_manager_emails: The email addresses of the managers in the SpecialistPool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] specialist_worker_emails: The email addresses of workers in the SpecialistPool.
        """
        pulumi.set(__self__, "display_name", display_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if specialist_manager_emails is not None:
            pulumi.set(__self__, "specialist_manager_emails", specialist_manager_emails)
        if specialist_worker_emails is not None:
            pulumi.set(__self__, "specialist_worker_emails", specialist_worker_emails)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the SpecialistPool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="specialistManagerEmails")
    def specialist_manager_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The email addresses of the managers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_manager_emails")

    @specialist_manager_emails.setter
    def specialist_manager_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "specialist_manager_emails", value)

    @property
    @pulumi.getter(name="specialistWorkerEmails")
    def specialist_worker_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The email addresses of workers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_worker_emails")

    @specialist_worker_emails.setter
    def specialist_worker_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "specialist_worker_emails", value)


class SpecialistPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 specialist_manager_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 specialist_worker_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Creates a SpecialistPool.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
        :param pulumi.Input[str] name: The resource name of the SpecialistPool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] specialist_manager_emails: The email addresses of the managers in the SpecialistPool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] specialist_worker_emails: The email addresses of workers in the SpecialistPool.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpecialistPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a SpecialistPool.

        :param str resource_name: The name of the resource.
        :param SpecialistPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpecialistPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 specialist_manager_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 specialist_worker_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpecialistPoolArgs.__new__(SpecialistPoolArgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["specialist_manager_emails"] = specialist_manager_emails
            __props__.__dict__["specialist_worker_emails"] = specialist_worker_emails
            __props__.__dict__["pending_data_labeling_jobs"] = None
            __props__.__dict__["specialist_managers_count"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(SpecialistPool, __self__).__init__(
            'google-native:aiplatform/v1:SpecialistPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SpecialistPool':
        """
        Get an existing SpecialistPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SpecialistPoolArgs.__new__(SpecialistPoolArgs)

        __props__.__dict__["display_name"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["pending_data_labeling_jobs"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["specialist_manager_emails"] = None
        __props__.__dict__["specialist_managers_count"] = None
        __props__.__dict__["specialist_worker_emails"] = None
        return SpecialistPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the SpecialistPool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pendingDataLabelingJobs")
    def pending_data_labeling_jobs(self) -> pulumi.Output[Sequence[str]]:
        """
        The resource name of the pending data labeling jobs.
        """
        return pulumi.get(self, "pending_data_labeling_jobs")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="specialistManagerEmails")
    def specialist_manager_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        The email addresses of the managers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_manager_emails")

    @property
    @pulumi.getter(name="specialistManagersCount")
    def specialist_managers_count(self) -> pulumi.Output[int]:
        """
        The number of managers in this SpecialistPool.
        """
        return pulumi.get(self, "specialist_managers_count")

    @property
    @pulumi.getter(name="specialistWorkerEmails")
    def specialist_worker_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        The email addresses of workers in the SpecialistPool.
        """
        return pulumi.get(self, "specialist_worker_emails")

