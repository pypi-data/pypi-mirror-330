# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetMetadataSchemaResult',
    'AwaitableGetMetadataSchemaResult',
    'get_metadata_schema',
    'get_metadata_schema_output',
]

@pulumi.output_type
class GetMetadataSchemaResult:
    def __init__(__self__, create_time=None, description=None, name=None, schema=None, schema_type=None, schema_version=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if schema_type and not isinstance(schema_type, str):
            raise TypeError("Expected argument 'schema_type' to be a str")
        pulumi.set(__self__, "schema_type", schema_type)
        if schema_version and not isinstance(schema_version, str):
            raise TypeError("Expected argument 'schema_version' to be a str")
        pulumi.set(__self__, "schema_version", schema_version)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this MetadataSchema was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Metadata Schema
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the MetadataSchema.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> str:
        """
        The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
        """
        return pulumi.get(self, "schema_type")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> str:
        """
        The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        """
        return pulumi.get(self, "schema_version")


class AwaitableGetMetadataSchemaResult(GetMetadataSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataSchemaResult(
            create_time=self.create_time,
            description=self.description,
            name=self.name,
            schema=self.schema,
            schema_type=self.schema_type,
            schema_version=self.schema_version)


def get_metadata_schema(location: Optional[str] = None,
                        metadata_schema_id: Optional[str] = None,
                        metadata_store_id: Optional[str] = None,
                        project: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataSchemaResult:
    """
    Retrieves a specific MetadataSchema.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['metadataSchemaId'] = metadata_schema_id
    __args__['metadataStoreId'] = metadata_store_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getMetadataSchema', __args__, opts=opts, typ=GetMetadataSchemaResult).value

    return AwaitableGetMetadataSchemaResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        name=pulumi.get(__ret__, 'name'),
        schema=pulumi.get(__ret__, 'schema'),
        schema_type=pulumi.get(__ret__, 'schema_type'),
        schema_version=pulumi.get(__ret__, 'schema_version'))


@_utilities.lift_output_func(get_metadata_schema)
def get_metadata_schema_output(location: Optional[pulumi.Input[str]] = None,
                               metadata_schema_id: Optional[pulumi.Input[str]] = None,
                               metadata_store_id: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataSchemaResult]:
    """
    Retrieves a specific MetadataSchema.
    """
    ...
