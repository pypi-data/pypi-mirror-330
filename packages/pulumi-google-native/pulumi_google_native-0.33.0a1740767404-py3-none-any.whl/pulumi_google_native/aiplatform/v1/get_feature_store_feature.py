# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFeatureStoreFeatureResult',
    'AwaitableGetFeatureStoreFeatureResult',
    'get_feature_store_feature',
    'get_feature_store_feature_output',
]

@pulumi.output_type
class GetFeatureStoreFeatureResult:
    def __init__(__self__, create_time=None, description=None, disable_monitoring=None, etag=None, labels=None, monitoring_stats_anomalies=None, name=None, update_time=None, value_type=None, version_column_name=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disable_monitoring and not isinstance(disable_monitoring, bool):
            raise TypeError("Expected argument 'disable_monitoring' to be a bool")
        pulumi.set(__self__, "disable_monitoring", disable_monitoring)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if monitoring_stats_anomalies and not isinstance(monitoring_stats_anomalies, list):
            raise TypeError("Expected argument 'monitoring_stats_anomalies' to be a list")
        pulumi.set(__self__, "monitoring_stats_anomalies", monitoring_stats_anomalies)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if value_type and not isinstance(value_type, str):
            raise TypeError("Expected argument 'value_type' to be a str")
        pulumi.set(__self__, "value_type", value_type)
        if version_column_name and not isinstance(version_column_name, str):
            raise TypeError("Expected argument 'version_column_name' to be a str")
        pulumi.set(__self__, "version_column_name", version_column_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Feature.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableMonitoring")
    def disable_monitoring(self) -> bool:
        """
        Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.
        """
        return pulumi.get(self, "disable_monitoring")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="monitoringStatsAnomalies")
    def monitoring_stats_anomalies(self) -> Sequence['outputs.GoogleCloudAiplatformV1FeatureMonitoringStatsAnomalyResponse']:
        """
        Only applicable for Vertex AI Feature Store (Legacy). The list of historical stats and anomalies with specified objectives.
        """
        return pulumi.get(self, "monitoring_stats_anomalies")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. Name of the Feature. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}` `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was most recently updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.
        """
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="versionColumnName")
    def version_column_name(self) -> str:
        """
        Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View columnn hosting data for this version. If no value is provided, will use feature_id.
        """
        return pulumi.get(self, "version_column_name")


class AwaitableGetFeatureStoreFeatureResult(GetFeatureStoreFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureStoreFeatureResult(
            create_time=self.create_time,
            description=self.description,
            disable_monitoring=self.disable_monitoring,
            etag=self.etag,
            labels=self.labels,
            monitoring_stats_anomalies=self.monitoring_stats_anomalies,
            name=self.name,
            update_time=self.update_time,
            value_type=self.value_type,
            version_column_name=self.version_column_name)


def get_feature_store_feature(entity_type_id: Optional[str] = None,
                              feature_id: Optional[str] = None,
                              featurestore_id: Optional[str] = None,
                              location: Optional[str] = None,
                              project: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureStoreFeatureResult:
    """
    Gets details of a single Feature.
    """
    __args__ = dict()
    __args__['entityTypeId'] = entity_type_id
    __args__['featureId'] = feature_id
    __args__['featurestoreId'] = featurestore_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getFeatureStoreFeature', __args__, opts=opts, typ=GetFeatureStoreFeatureResult).value

    return AwaitableGetFeatureStoreFeatureResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        disable_monitoring=pulumi.get(__ret__, 'disable_monitoring'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        monitoring_stats_anomalies=pulumi.get(__ret__, 'monitoring_stats_anomalies'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'),
        value_type=pulumi.get(__ret__, 'value_type'),
        version_column_name=pulumi.get(__ret__, 'version_column_name'))


@_utilities.lift_output_func(get_feature_store_feature)
def get_feature_store_feature_output(entity_type_id: Optional[pulumi.Input[str]] = None,
                                     feature_id: Optional[pulumi.Input[str]] = None,
                                     featurestore_id: Optional[pulumi.Input[str]] = None,
                                     location: Optional[pulumi.Input[str]] = None,
                                     project: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFeatureStoreFeatureResult]:
    """
    Gets details of a single Feature.
    """
    ...
