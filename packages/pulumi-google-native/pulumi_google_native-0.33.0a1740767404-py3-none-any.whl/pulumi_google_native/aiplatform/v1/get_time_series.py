# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTimeSeriesResult',
    'AwaitableGetTimeSeriesResult',
    'get_time_series',
    'get_time_series_output',
]

@pulumi.output_type
class GetTimeSeriesResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, etag=None, metadata=None, name=None, plugin_data=None, plugin_name=None, update_time=None, value_type=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plugin_data and not isinstance(plugin_data, str):
            raise TypeError("Expected argument 'plugin_data' to be a str")
        pulumi.set(__self__, "plugin_data", plugin_data)
        if plugin_name and not isinstance(plugin_name, str):
            raise TypeError("Expected argument 'plugin_name' to be a str")
        pulumi.set(__self__, "plugin_name", plugin_name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if value_type and not isinstance(value_type, str):
            raise TypeError("Expected argument 'value_type' to be a str")
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this TensorboardTimeSeries was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of this TensorboardTimeSeries.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GoogleCloudAiplatformV1TensorboardTimeSeriesMetadataResponse':
        """
        Scalar, Tensor, or Blob metadata for this TensorboardTimeSeries.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the TensorboardTimeSeries.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> str:
        """
        Data of the current plugin, with the size limited to 65KB.
        """
        return pulumi.get(self, "plugin_data")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> str:
        """
        Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this TensorboardTimeSeries was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        Immutable. Type of TensorboardTimeSeries value.
        """
        return pulumi.get(self, "value_type")


class AwaitableGetTimeSeriesResult(GetTimeSeriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTimeSeriesResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            etag=self.etag,
            metadata=self.metadata,
            name=self.name,
            plugin_data=self.plugin_data,
            plugin_name=self.plugin_name,
            update_time=self.update_time,
            value_type=self.value_type)


def get_time_series(experiment_id: Optional[str] = None,
                    location: Optional[str] = None,
                    project: Optional[str] = None,
                    run_id: Optional[str] = None,
                    tensorboard_id: Optional[str] = None,
                    time_series_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTimeSeriesResult:
    """
    Gets a TensorboardTimeSeries.
    """
    __args__ = dict()
    __args__['experimentId'] = experiment_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['runId'] = run_id
    __args__['tensorboardId'] = tensorboard_id
    __args__['timeSeriesId'] = time_series_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1:getTimeSeries', __args__, opts=opts, typ=GetTimeSeriesResult).value

    return AwaitableGetTimeSeriesResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        plugin_data=pulumi.get(__ret__, 'plugin_data'),
        plugin_name=pulumi.get(__ret__, 'plugin_name'),
        update_time=pulumi.get(__ret__, 'update_time'),
        value_type=pulumi.get(__ret__, 'value_type'))


@_utilities.lift_output_func(get_time_series)
def get_time_series_output(experiment_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           run_id: Optional[pulumi.Input[str]] = None,
                           tensorboard_id: Optional[pulumi.Input[str]] = None,
                           time_series_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTimeSeriesResult]:
    """
    Gets a TensorboardTimeSeries.
    """
    ...
