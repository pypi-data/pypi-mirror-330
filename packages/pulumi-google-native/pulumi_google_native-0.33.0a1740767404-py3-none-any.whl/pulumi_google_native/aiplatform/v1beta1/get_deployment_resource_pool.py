# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDeploymentResourcePoolResult',
    'AwaitableGetDeploymentResourcePoolResult',
    'get_deployment_resource_pool',
    'get_deployment_resource_pool_output',
]

@pulumi.output_type
class GetDeploymentResourcePoolResult:
    def __init__(__self__, create_time=None, dedicated_resources=None, name=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if dedicated_resources and not isinstance(dedicated_resources, dict):
            raise TypeError("Expected argument 'dedicated_resources' to be a dict")
        pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this DeploymentResourcePool was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> 'outputs.GoogleCloudAiplatformV1beta1DedicatedResourcesResponse':
        """
        The underlying DedicatedResources that the DeploymentResourcePool uses.
        """
        return pulumi.get(self, "dedicated_resources")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Immutable. The resource name of the DeploymentResourcePool. Format: `projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}`
        """
        return pulumi.get(self, "name")


class AwaitableGetDeploymentResourcePoolResult(GetDeploymentResourcePoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentResourcePoolResult(
            create_time=self.create_time,
            dedicated_resources=self.dedicated_resources,
            name=self.name)


def get_deployment_resource_pool(deployment_resource_pool_id: Optional[str] = None,
                                 location: Optional[str] = None,
                                 project: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentResourcePoolResult:
    """
    Get a DeploymentResourcePool.
    """
    __args__ = dict()
    __args__['deploymentResourcePoolId'] = deployment_resource_pool_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getDeploymentResourcePool', __args__, opts=opts, typ=GetDeploymentResourcePoolResult).value

    return AwaitableGetDeploymentResourcePoolResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        dedicated_resources=pulumi.get(__ret__, 'dedicated_resources'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_deployment_resource_pool)
def get_deployment_resource_pool_output(deployment_resource_pool_id: Optional[pulumi.Input[str]] = None,
                                        location: Optional[pulumi.Input[str]] = None,
                                        project: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentResourcePoolResult]:
    """
    Get a DeploymentResourcePool.
    """
    ...
