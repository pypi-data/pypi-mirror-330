# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['BatchPredictionJobArgs', 'BatchPredictionJob']

@pulumi.input_type
class BatchPredictionJobArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 input_config: pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs'],
                 output_config: pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs'],
                 dedicated_resources: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']] = None,
                 disable_container_logging: Optional[pulumi.Input[bool]] = None,
                 encryption_spec: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']] = None,
                 explanation_spec: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']] = None,
                 generate_explanation: Optional[pulumi.Input[bool]] = None,
                 instance_config: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manual_batch_tuning_parameters: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 model_monitoring_config: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']] = None,
                 model_monitoring_stats_anomalies: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]] = None,
                 model_parameters: Optional[Any] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 unmanaged_container_model: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']] = None):
        """
        The set of arguments for constructing a BatchPredictionJob resource.
        :param pulumi.Input[str] display_name: The user-defined name of this BatchPredictionJob.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs'] input_config: Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs'] output_config: The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs'] dedicated_resources: The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
        :param pulumi.Input[bool] disable_container_logging: For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1EncryptionSpecArgs'] encryption_spec: Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1ExplanationSpecArgs'] explanation_spec: Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
        :param pulumi.Input[bool] generate_explanation: Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs'] instance_config: Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs'] manual_batch_tuning_parameters: Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
        :param pulumi.Input[str] model: The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
        :param pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs'] model_monitoring_config: Model monitoring config will be used for analysis model behaviors, based on the input and output to the batch prediction job, as well as the provided training dataset.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]] model_monitoring_stats_anomalies: Get batch prediction job monitoring statistics.
        :param Any model_parameters: The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
        :param pulumi.Input[str] service_account: The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs'] unmanaged_container_model: Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "input_config", input_config)
        pulumi.set(__self__, "output_config", output_config)
        if dedicated_resources is not None:
            pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        if disable_container_logging is not None:
            pulumi.set(__self__, "disable_container_logging", disable_container_logging)
        if encryption_spec is not None:
            pulumi.set(__self__, "encryption_spec", encryption_spec)
        if explanation_spec is not None:
            pulumi.set(__self__, "explanation_spec", explanation_spec)
        if generate_explanation is not None:
            pulumi.set(__self__, "generate_explanation", generate_explanation)
        if instance_config is not None:
            pulumi.set(__self__, "instance_config", instance_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if manual_batch_tuning_parameters is not None:
            pulumi.set(__self__, "manual_batch_tuning_parameters", manual_batch_tuning_parameters)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if model_monitoring_config is not None:
            pulumi.set(__self__, "model_monitoring_config", model_monitoring_config)
        if model_monitoring_stats_anomalies is not None:
            pulumi.set(__self__, "model_monitoring_stats_anomalies", model_monitoring_stats_anomalies)
        if model_parameters is not None:
            pulumi.set(__self__, "model_parameters", model_parameters)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if unmanaged_container_model is not None:
            pulumi.set(__self__, "unmanaged_container_model", unmanaged_container_model)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The user-defined name of this BatchPredictionJob.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="inputConfig")
    def input_config(self) -> pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs']:
        """
        Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
        """
        return pulumi.get(self, "input_config")

    @input_config.setter
    def input_config(self, value: pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs']):
        pulumi.set(self, "input_config", value)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs']:
        """
        The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
        """
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs']):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']]:
        """
        The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
        """
        return pulumi.get(self, "dedicated_resources")

    @dedicated_resources.setter
    def dedicated_resources(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']]):
        pulumi.set(self, "dedicated_resources", value)

    @property
    @pulumi.getter(name="disableContainerLogging")
    def disable_container_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
        """
        return pulumi.get(self, "disable_container_logging")

    @disable_container_logging.setter
    def disable_container_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_container_logging", value)

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']]:
        """
        Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
        """
        return pulumi.get(self, "encryption_spec")

    @encryption_spec.setter
    def encryption_spec(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']]):
        pulumi.set(self, "encryption_spec", value)

    @property
    @pulumi.getter(name="explanationSpec")
    def explanation_spec(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']]:
        """
        Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
        """
        return pulumi.get(self, "explanation_spec")

    @explanation_spec.setter
    def explanation_spec(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']]):
        pulumi.set(self, "explanation_spec", value)

    @property
    @pulumi.getter(name="generateExplanation")
    def generate_explanation(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
        """
        return pulumi.get(self, "generate_explanation")

    @generate_explanation.setter
    def generate_explanation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_explanation", value)

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']]:
        """
        Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
        """
        return pulumi.get(self, "instance_config")

    @instance_config.setter
    def instance_config(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']]):
        pulumi.set(self, "instance_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="manualBatchTuningParameters")
    def manual_batch_tuning_parameters(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']]:
        """
        Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
        """
        return pulumi.get(self, "manual_batch_tuning_parameters")

    @manual_batch_tuning_parameters.setter
    def manual_batch_tuning_parameters(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']]):
        pulumi.set(self, "manual_batch_tuning_parameters", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="modelMonitoringConfig")
    def model_monitoring_config(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']]:
        """
        Model monitoring config will be used for analysis model behaviors, based on the input and output to the batch prediction job, as well as the provided training dataset.
        """
        return pulumi.get(self, "model_monitoring_config")

    @model_monitoring_config.setter
    def model_monitoring_config(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']]):
        pulumi.set(self, "model_monitoring_config", value)

    @property
    @pulumi.getter(name="modelMonitoringStatsAnomalies")
    def model_monitoring_stats_anomalies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]]:
        """
        Get batch prediction job monitoring statistics.
        """
        return pulumi.get(self, "model_monitoring_stats_anomalies")

    @model_monitoring_stats_anomalies.setter
    def model_monitoring_stats_anomalies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]]):
        pulumi.set(self, "model_monitoring_stats_anomalies", value)

    @property
    @pulumi.getter(name="modelParameters")
    def model_parameters(self) -> Optional[Any]:
        """
        The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
        """
        return pulumi.get(self, "model_parameters")

    @model_parameters.setter
    def model_parameters(self, value: Optional[Any]):
        pulumi.set(self, "model_parameters", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="unmanagedContainerModel")
    def unmanaged_container_model(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']]:
        """
        Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
        """
        return pulumi.get(self, "unmanaged_container_model")

    @unmanaged_container_model.setter
    def unmanaged_container_model(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']]):
        pulumi.set(self, "unmanaged_container_model", value)


class BatchPredictionJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_resources: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']]] = None,
                 disable_container_logging: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']]] = None,
                 explanation_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']]] = None,
                 generate_explanation: Optional[pulumi.Input[bool]] = None,
                 input_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs']]] = None,
                 instance_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manual_batch_tuning_parameters: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 model_monitoring_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']]] = None,
                 model_monitoring_stats_anomalies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]]] = None,
                 model_parameters: Optional[Any] = None,
                 output_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 unmanaged_container_model: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']]] = None,
                 __props__=None):
        """
        Creates a BatchPredictionJob. A BatchPredictionJob once created will right away be attempted to start.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']] dedicated_resources: The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
        :param pulumi.Input[bool] disable_container_logging: For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
        :param pulumi.Input[str] display_name: The user-defined name of this BatchPredictionJob.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']] encryption_spec: Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']] explanation_spec: Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
        :param pulumi.Input[bool] generate_explanation: Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs']] input_config: Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']] instance_config: Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']] manual_batch_tuning_parameters: Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
        :param pulumi.Input[str] model: The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']] model_monitoring_config: Model monitoring config will be used for analysis model behaviors, based on the input and output to the batch prediction job, as well as the provided training dataset.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]] model_monitoring_stats_anomalies: Get batch prediction job monitoring statistics.
        :param Any model_parameters: The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs']] output_config: The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
        :param pulumi.Input[str] service_account: The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']] unmanaged_container_model: Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BatchPredictionJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a BatchPredictionJob. A BatchPredictionJob once created will right away be attempted to start.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param BatchPredictionJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BatchPredictionJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_resources: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchDedicatedResourcesArgs']]] = None,
                 disable_container_logging: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1EncryptionSpecArgs']]] = None,
                 explanation_spec: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ExplanationSpecArgs']]] = None,
                 generate_explanation: Optional[pulumi.Input[bool]] = None,
                 input_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigArgs']]] = None,
                 instance_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 manual_batch_tuning_parameters: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ManualBatchTuningParametersArgs']]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 model_monitoring_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringConfigArgs']]] = None,
                 model_monitoring_stats_anomalies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesArgs']]]]] = None,
                 model_parameters: Optional[Any] = None,
                 output_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 unmanaged_container_model: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1UnmanagedContainerModelArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BatchPredictionJobArgs.__new__(BatchPredictionJobArgs)

            __props__.__dict__["dedicated_resources"] = dedicated_resources
            __props__.__dict__["disable_container_logging"] = disable_container_logging
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["encryption_spec"] = encryption_spec
            __props__.__dict__["explanation_spec"] = explanation_spec
            __props__.__dict__["generate_explanation"] = generate_explanation
            if input_config is None and not opts.urn:
                raise TypeError("Missing required property 'input_config'")
            __props__.__dict__["input_config"] = input_config
            __props__.__dict__["instance_config"] = instance_config
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["manual_batch_tuning_parameters"] = manual_batch_tuning_parameters
            __props__.__dict__["model"] = model
            __props__.__dict__["model_monitoring_config"] = model_monitoring_config
            __props__.__dict__["model_monitoring_stats_anomalies"] = model_monitoring_stats_anomalies
            __props__.__dict__["model_parameters"] = model_parameters
            if output_config is None and not opts.urn:
                raise TypeError("Missing required property 'output_config'")
            __props__.__dict__["output_config"] = output_config
            __props__.__dict__["project"] = project
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["unmanaged_container_model"] = unmanaged_container_model
            __props__.__dict__["completion_stats"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["error"] = None
            __props__.__dict__["model_monitoring_status"] = None
            __props__.__dict__["model_version_id"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["output_info"] = None
            __props__.__dict__["partial_failures"] = None
            __props__.__dict__["resources_consumed"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BatchPredictionJob, __self__).__init__(
            'google-native:aiplatform/v1beta1:BatchPredictionJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BatchPredictionJob':
        """
        Get an existing BatchPredictionJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BatchPredictionJobArgs.__new__(BatchPredictionJobArgs)

        __props__.__dict__["completion_stats"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["dedicated_resources"] = None
        __props__.__dict__["disable_container_logging"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["encryption_spec"] = None
        __props__.__dict__["end_time"] = None
        __props__.__dict__["error"] = None
        __props__.__dict__["explanation_spec"] = None
        __props__.__dict__["generate_explanation"] = None
        __props__.__dict__["input_config"] = None
        __props__.__dict__["instance_config"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["manual_batch_tuning_parameters"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["model_monitoring_config"] = None
        __props__.__dict__["model_monitoring_stats_anomalies"] = None
        __props__.__dict__["model_monitoring_status"] = None
        __props__.__dict__["model_parameters"] = None
        __props__.__dict__["model_version_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["output_config"] = None
        __props__.__dict__["output_info"] = None
        __props__.__dict__["partial_failures"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["resources_consumed"] = None
        __props__.__dict__["service_account"] = None
        __props__.__dict__["start_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["unmanaged_container_model"] = None
        __props__.__dict__["update_time"] = None
        return BatchPredictionJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="completionStats")
    def completion_stats(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1CompletionStatsResponse']:
        """
        Statistics on completed and failed prediction instances.
        """
        return pulumi.get(self, "completion_stats")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when the BatchPredictionJob was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1BatchDedicatedResourcesResponse']:
        """
        The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.
        """
        return pulumi.get(self, "dedicated_resources")

    @property
    @pulumi.getter(name="disableContainerLogging")
    def disable_container_logging(self) -> pulumi.Output[bool]:
        """
        For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.
        """
        return pulumi.get(self, "disable_container_logging")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The user-defined name of this BatchPredictionJob.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse']:
        """
        Customer-managed encryption key options for a BatchPredictionJob. If this is set, then all resources created by the BatchPredictionJob will be encrypted with the provided encryption key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        Time when the BatchPredictionJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def error(self) -> pulumi.Output['outputs.GoogleRpcStatusResponse']:
        """
        Only populated when the job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="explanationSpec")
    def explanation_spec(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1ExplanationSpecResponse']:
        """
        Explanation configuration for this BatchPredictionJob. Can be specified only if generate_explanation is set to `true`. This value overrides the value of Model.explanation_spec. All fields of explanation_spec are optional in the request. If a field of the explanation_spec object is not populated, the corresponding field of the Model.explanation_spec object is inherited.
        """
        return pulumi.get(self, "explanation_spec")

    @property
    @pulumi.getter(name="generateExplanation")
    def generate_explanation(self) -> pulumi.Output[bool]:
        """
        Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.
        """
        return pulumi.get(self, "generate_explanation")

    @property
    @pulumi.getter(name="inputConfig")
    def input_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfigResponse']:
        """
        Input configuration of the instances on which predictions are performed. The schema of any single instance may be specified via the Model's PredictSchemata's instance_schema_uri.
        """
        return pulumi.get(self, "input_config")

    @property
    @pulumi.getter(name="instanceConfig")
    def instance_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfigResponse']:
        """
        Configuration for how to convert batch prediction input instances to the prediction instances that are sent to the Model.
        """
        return pulumi.get(self, "instance_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="manualBatchTuningParameters")
    def manual_batch_tuning_parameters(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1ManualBatchTuningParametersResponse']:
        """
        Immutable. Parameters configuring the batch behavior. Currently only applicable when dedicated_resources are used (in other cases Vertex AI does the tuning itself).
        """
        return pulumi.get(self, "manual_batch_tuning_parameters")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        """
        The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modelMonitoringConfig")
    def model_monitoring_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1ModelMonitoringConfigResponse']:
        """
        Model monitoring config will be used for analysis model behaviors, based on the input and output to the batch prediction job, as well as the provided training dataset.
        """
        return pulumi.get(self, "model_monitoring_config")

    @property
    @pulumi.getter(name="modelMonitoringStatsAnomalies")
    def model_monitoring_stats_anomalies(self) -> pulumi.Output[Sequence['outputs.GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesResponse']]:
        """
        Get batch prediction job monitoring statistics.
        """
        return pulumi.get(self, "model_monitoring_stats_anomalies")

    @property
    @pulumi.getter(name="modelMonitoringStatus")
    def model_monitoring_status(self) -> pulumi.Output['outputs.GoogleRpcStatusResponse']:
        """
        The running status of the model monitoring pipeline.
        """
        return pulumi.get(self, "model_monitoring_status")

    @property
    @pulumi.getter(name="modelParameters")
    def model_parameters(self) -> pulumi.Output[Any]:
        """
        The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.
        """
        return pulumi.get(self, "model_parameters")

    @property
    @pulumi.getter(name="modelVersionId")
    def model_version_id(self) -> pulumi.Output[str]:
        """
        The version ID of the Model that produces the predictions via this job.
        """
        return pulumi.get(self, "model_version_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name of the BatchPredictionJob.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfigResponse']:
        """
        The Configuration specifying where output predictions should be written. The schema of any single prediction may be specified as a concatenation of Model's PredictSchemata's instance_schema_uri and prediction_schema_uri.
        """
        return pulumi.get(self, "output_config")

    @property
    @pulumi.getter(name="outputInfo")
    def output_info(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1BatchPredictionJobOutputInfoResponse']:
        """
        Information further describing the output of this job.
        """
        return pulumi.get(self, "output_info")

    @property
    @pulumi.getter(name="partialFailures")
    def partial_failures(self) -> pulumi.Output[Sequence['outputs.GoogleRpcStatusResponse']]:
        """
        Partial failures encountered. For example, single files that can't be read. This field never exceeds 20 entries. Status details fields contain standard Google Cloud error details.
        """
        return pulumi.get(self, "partial_failures")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="resourcesConsumed")
    def resources_consumed(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1ResourcesConsumedResponse']:
        """
        Information about resources that had been consumed by this job. Provided in real time at best effort basis, as well as a final value once the job completes. Note: This field currently may be not populated for batch predictions that use AutoML Models.
        """
        return pulumi.get(self, "resources_consumed")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[str]:
        """
        The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Time when the BatchPredictionJob for the first time entered the `JOB_STATE_RUNNING` state.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The detailed state of the job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="unmanagedContainerModel")
    def unmanaged_container_model(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1UnmanagedContainerModelResponse']:
        """
        Contains model information necessary to perform batch prediction without requiring uploading to model registry. Exactly one of model and unmanaged_container_model must be set.
        """
        return pulumi.get(self, "unmanaged_container_model")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time when the BatchPredictionJob was most recently updated.
        """
        return pulumi.get(self, "update_time")

