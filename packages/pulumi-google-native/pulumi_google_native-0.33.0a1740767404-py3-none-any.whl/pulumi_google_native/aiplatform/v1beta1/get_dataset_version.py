# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetDatasetVersionResult',
    'AwaitableGetDatasetVersionResult',
    'get_dataset_version',
    'get_dataset_version_output',
]

@pulumi.output_type
class GetDatasetVersionResult:
    def __init__(__self__, big_query_dataset_name=None, create_time=None, etag=None, name=None, update_time=None):
        if big_query_dataset_name and not isinstance(big_query_dataset_name, str):
            raise TypeError("Expected argument 'big_query_dataset_name' to be a str")
        pulumi.set(__self__, "big_query_dataset_name", big_query_dataset_name)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bigQueryDatasetName")
    def big_query_dataset_name(self) -> str:
        """
        Name of the associated BigQuery dataset.
        """
        return pulumi.get(self, "big_query_dataset_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this DatasetVersion was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the DatasetVersion.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this DatasetVersion was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetDatasetVersionResult(GetDatasetVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasetVersionResult(
            big_query_dataset_name=self.big_query_dataset_name,
            create_time=self.create_time,
            etag=self.etag,
            name=self.name,
            update_time=self.update_time)


def get_dataset_version(dataset_id: Optional[str] = None,
                        dataset_version_id: Optional[str] = None,
                        location: Optional[str] = None,
                        project: Optional[str] = None,
                        read_mask: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasetVersionResult:
    """
    Gets a Dataset version.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['datasetVersionId'] = dataset_version_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['readMask'] = read_mask
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getDatasetVersion', __args__, opts=opts, typ=GetDatasetVersionResult).value

    return AwaitableGetDatasetVersionResult(
        big_query_dataset_name=pulumi.get(__ret__, 'big_query_dataset_name'),
        create_time=pulumi.get(__ret__, 'create_time'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_dataset_version)
def get_dataset_version_output(dataset_id: Optional[pulumi.Input[str]] = None,
                               dataset_version_id: Optional[pulumi.Input[str]] = None,
                               location: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               read_mask: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatasetVersionResult]:
    """
    Gets a Dataset version.
    """
    ...
