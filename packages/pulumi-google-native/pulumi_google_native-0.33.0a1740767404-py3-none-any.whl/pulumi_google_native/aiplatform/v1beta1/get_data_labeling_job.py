# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDataLabelingJobResult',
    'AwaitableGetDataLabelingJobResult',
    'get_data_labeling_job',
    'get_data_labeling_job_output',
]

@pulumi.output_type
class GetDataLabelingJobResult:
    def __init__(__self__, active_learning_config=None, annotation_labels=None, create_time=None, current_spend=None, datasets=None, display_name=None, encryption_spec=None, error=None, inputs=None, inputs_schema_uri=None, instruction_uri=None, labeler_count=None, labeling_progress=None, labels=None, name=None, specialist_pools=None, state=None, update_time=None):
        if active_learning_config and not isinstance(active_learning_config, dict):
            raise TypeError("Expected argument 'active_learning_config' to be a dict")
        pulumi.set(__self__, "active_learning_config", active_learning_config)
        if annotation_labels and not isinstance(annotation_labels, dict):
            raise TypeError("Expected argument 'annotation_labels' to be a dict")
        pulumi.set(__self__, "annotation_labels", annotation_labels)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if current_spend and not isinstance(current_spend, dict):
            raise TypeError("Expected argument 'current_spend' to be a dict")
        pulumi.set(__self__, "current_spend", current_spend)
        if datasets and not isinstance(datasets, list):
            raise TypeError("Expected argument 'datasets' to be a list")
        pulumi.set(__self__, "datasets", datasets)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if error and not isinstance(error, dict):
            raise TypeError("Expected argument 'error' to be a dict")
        pulumi.set(__self__, "error", error)
        if inputs and not isinstance(inputs, dict):
            raise TypeError("Expected argument 'inputs' to be a dict")
        pulumi.set(__self__, "inputs", inputs)
        if inputs_schema_uri and not isinstance(inputs_schema_uri, str):
            raise TypeError("Expected argument 'inputs_schema_uri' to be a str")
        pulumi.set(__self__, "inputs_schema_uri", inputs_schema_uri)
        if instruction_uri and not isinstance(instruction_uri, str):
            raise TypeError("Expected argument 'instruction_uri' to be a str")
        pulumi.set(__self__, "instruction_uri", instruction_uri)
        if labeler_count and not isinstance(labeler_count, int):
            raise TypeError("Expected argument 'labeler_count' to be a int")
        pulumi.set(__self__, "labeler_count", labeler_count)
        if labeling_progress and not isinstance(labeling_progress, int):
            raise TypeError("Expected argument 'labeling_progress' to be a int")
        pulumi.set(__self__, "labeling_progress", labeling_progress)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if specialist_pools and not isinstance(specialist_pools, list):
            raise TypeError("Expected argument 'specialist_pools' to be a list")
        pulumi.set(__self__, "specialist_pools", specialist_pools)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="activeLearningConfig")
    def active_learning_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1ActiveLearningConfigResponse':
        """
        Parameters that configure the active learning pipeline. Active learning will label the data incrementally via several iterations. For every iteration, it will select a batch of data based on the sampling strategy.
        """
        return pulumi.get(self, "active_learning_config")

    @property
    @pulumi.getter(name="annotationLabels")
    def annotation_labels(self) -> Mapping[str, str]:
        """
        Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "annotation_labels")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this DataLabelingJob was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentSpend")
    def current_spend(self) -> 'outputs.GoogleTypeMoneyResponse':
        """
        Estimated cost(in US dollars) that the DataLabelingJob has incurred to date.
        """
        return pulumi.get(self, "current_spend")

    @property
    @pulumi.getter
    def datasets(self) -> Sequence[str]:
        """
        Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project}/locations/{location}/datasets/{dataset}`
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for a DataLabelingJob. If set, this DataLabelingJob will be secured by this key. Note: Annotations created in the DataLabelingJob are associated with the EncryptionSpec of the Dataset they are exported to.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.GoogleRpcStatusResponse':
        """
        DataLabelingJob errors. It is only populated when job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def inputs(self) -> Any:
        """
        Input config parameters for the DataLabelingJob.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter(name="inputsSchemaUri")
    def inputs_schema_uri(self) -> str:
        """
        Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.
        """
        return pulumi.get(self, "inputs_schema_uri")

    @property
    @pulumi.getter(name="instructionUri")
    def instruction_uri(self) -> str:
        """
        The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.
        """
        return pulumi.get(self, "instruction_uri")

    @property
    @pulumi.getter(name="labelerCount")
    def labeler_count(self) -> int:
        """
        Number of labelers to work on each DataItem.
        """
        return pulumi.get(self, "labeler_count")

    @property
    @pulumi.getter(name="labelingProgress")
    def labeling_progress(self) -> int:
        """
        Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.
        """
        return pulumi.get(self, "labeling_progress")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each DataLabelingJob: * "aiplatform.googleapis.com/schema": output only, its value is the inputs_schema's title.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource name of the DataLabelingJob.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="specialistPools")
    def specialist_pools(self) -> Sequence[str]:
        """
        The SpecialistPools' resource names associated with this job.
        """
        return pulumi.get(self, "specialist_pools")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The detailed state of the job.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this DataLabelingJob was updated most recently.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetDataLabelingJobResult(GetDataLabelingJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataLabelingJobResult(
            active_learning_config=self.active_learning_config,
            annotation_labels=self.annotation_labels,
            create_time=self.create_time,
            current_spend=self.current_spend,
            datasets=self.datasets,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            error=self.error,
            inputs=self.inputs,
            inputs_schema_uri=self.inputs_schema_uri,
            instruction_uri=self.instruction_uri,
            labeler_count=self.labeler_count,
            labeling_progress=self.labeling_progress,
            labels=self.labels,
            name=self.name,
            specialist_pools=self.specialist_pools,
            state=self.state,
            update_time=self.update_time)


def get_data_labeling_job(data_labeling_job_id: Optional[str] = None,
                          location: Optional[str] = None,
                          project: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataLabelingJobResult:
    """
    Gets a DataLabelingJob.
    """
    __args__ = dict()
    __args__['dataLabelingJobId'] = data_labeling_job_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getDataLabelingJob', __args__, opts=opts, typ=GetDataLabelingJobResult).value

    return AwaitableGetDataLabelingJobResult(
        active_learning_config=pulumi.get(__ret__, 'active_learning_config'),
        annotation_labels=pulumi.get(__ret__, 'annotation_labels'),
        create_time=pulumi.get(__ret__, 'create_time'),
        current_spend=pulumi.get(__ret__, 'current_spend'),
        datasets=pulumi.get(__ret__, 'datasets'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        error=pulumi.get(__ret__, 'error'),
        inputs=pulumi.get(__ret__, 'inputs'),
        inputs_schema_uri=pulumi.get(__ret__, 'inputs_schema_uri'),
        instruction_uri=pulumi.get(__ret__, 'instruction_uri'),
        labeler_count=pulumi.get(__ret__, 'labeler_count'),
        labeling_progress=pulumi.get(__ret__, 'labeling_progress'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        specialist_pools=pulumi.get(__ret__, 'specialist_pools'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_data_labeling_job)
def get_data_labeling_job_output(data_labeling_job_id: Optional[pulumi.Input[str]] = None,
                                 location: Optional[pulumi.Input[str]] = None,
                                 project: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataLabelingJobResult]:
    """
    Gets a DataLabelingJob.
    """
    ...
