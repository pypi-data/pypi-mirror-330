# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['TimeSeriesArgs', 'TimeSeries']

@pulumi.input_type
class TimeSeriesArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 experiment_id: pulumi.Input[str],
                 run_id: pulumi.Input[str],
                 tensorboard_id: pulumi.Input[str],
                 value_type: pulumi.Input['TimeSeriesValueType'],
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 tensorboard_time_series_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TimeSeries resource.
        :param pulumi.Input[str] display_name: User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).
        :param pulumi.Input['TimeSeriesValueType'] value_type: Immutable. Type of TensorboardTimeSeries value.
        :param pulumi.Input[str] description: Description of this TensorboardTimeSeries.
        :param pulumi.Input[str] etag: Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input[str] plugin_data: Data of the current plugin, with the size limited to 65KB.
        :param pulumi.Input[str] plugin_name: Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob
        :param pulumi.Input[str] tensorboard_time_series_id: Optional. The user specified unique ID to use for the TensorboardTimeSeries, which becomes the final component of the TensorboardTimeSeries's resource name. This value should match "a-z0-9{0, 127}"
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "experiment_id", experiment_id)
        pulumi.set(__self__, "run_id", run_id)
        pulumi.set(__self__, "tensorboard_id", tensorboard_id)
        pulumi.set(__self__, "value_type", value_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if plugin_data is not None:
            pulumi.set(__self__, "plugin_data", plugin_data)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if tensorboard_time_series_id is not None:
            pulumi.set(__self__, "tensorboard_time_series_id", tensorboard_time_series_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="experimentId")
    def experiment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "experiment_id")

    @experiment_id.setter
    def experiment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "experiment_id", value)

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "run_id")

    @run_id.setter
    def run_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_id", value)

    @property
    @pulumi.getter(name="tensorboardId")
    def tensorboard_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tensorboard_id")

    @tensorboard_id.setter
    def tensorboard_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tensorboard_id", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input['TimeSeriesValueType']:
        """
        Immutable. Type of TensorboardTimeSeries value.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input['TimeSeriesValueType']):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this TensorboardTimeSeries.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data of the current plugin, with the size limited to 65KB.
        """
        return pulumi.get(self, "plugin_data")

    @plugin_data.setter
    def plugin_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_data", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="tensorboardTimeSeriesId")
    def tensorboard_time_series_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The user specified unique ID to use for the TensorboardTimeSeries, which becomes the final component of the TensorboardTimeSeries's resource name. This value should match "a-z0-9{0, 127}"
        """
        return pulumi.get(self, "tensorboard_time_series_id")

    @tensorboard_time_series_id.setter
    def tensorboard_time_series_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tensorboard_time_series_id", value)


class TimeSeries(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 experiment_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 run_id: Optional[pulumi.Input[str]] = None,
                 tensorboard_id: Optional[pulumi.Input[str]] = None,
                 tensorboard_time_series_id: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input['TimeSeriesValueType']] = None,
                 __props__=None):
        """
        Creates a TensorboardTimeSeries.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of this TensorboardTimeSeries.
        :param pulumi.Input[str] display_name: User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).
        :param pulumi.Input[str] etag: Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input[str] plugin_data: Data of the current plugin, with the size limited to 65KB.
        :param pulumi.Input[str] plugin_name: Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob
        :param pulumi.Input[str] tensorboard_time_series_id: Optional. The user specified unique ID to use for the TensorboardTimeSeries, which becomes the final component of the TensorboardTimeSeries's resource name. This value should match "a-z0-9{0, 127}"
        :param pulumi.Input['TimeSeriesValueType'] value_type: Immutable. Type of TensorboardTimeSeries value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TimeSeriesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a TensorboardTimeSeries.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param TimeSeriesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TimeSeriesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 experiment_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 run_id: Optional[pulumi.Input[str]] = None,
                 tensorboard_id: Optional[pulumi.Input[str]] = None,
                 tensorboard_time_series_id: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input['TimeSeriesValueType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TimeSeriesArgs.__new__(TimeSeriesArgs)

            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["etag"] = etag
            if experiment_id is None and not opts.urn:
                raise TypeError("Missing required property 'experiment_id'")
            __props__.__dict__["experiment_id"] = experiment_id
            __props__.__dict__["location"] = location
            __props__.__dict__["plugin_data"] = plugin_data
            __props__.__dict__["plugin_name"] = plugin_name
            __props__.__dict__["project"] = project
            if run_id is None and not opts.urn:
                raise TypeError("Missing required property 'run_id'")
            __props__.__dict__["run_id"] = run_id
            if tensorboard_id is None and not opts.urn:
                raise TypeError("Missing required property 'tensorboard_id'")
            __props__.__dict__["tensorboard_id"] = tensorboard_id
            __props__.__dict__["tensorboard_time_series_id"] = tensorboard_time_series_id
            if value_type is None and not opts.urn:
                raise TypeError("Missing required property 'value_type'")
            __props__.__dict__["value_type"] = value_type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["experimentId", "location", "project", "runId", "tensorboardId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(TimeSeries, __self__).__init__(
            'google-native:aiplatform/v1beta1:TimeSeries',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TimeSeries':
        """
        Get an existing TimeSeries resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TimeSeriesArgs.__new__(TimeSeriesArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["experiment_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["plugin_data"] = None
        __props__.__dict__["plugin_name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["run_id"] = None
        __props__.__dict__["tensorboard_id"] = None
        __props__.__dict__["tensorboard_time_series_id"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["value_type"] = None
        return TimeSeries(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this TensorboardTimeSeries was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of this TensorboardTimeSeries.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="experimentId")
    def experiment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "experiment_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadataResponse']:
        """
        Scalar, Tensor, or Blob metadata for this TensorboardTimeSeries.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the TensorboardTimeSeries.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> pulumi.Output[str]:
        """
        Data of the current plugin, with the size limited to 65KB.
        """
        return pulumi.get(self, "plugin_data")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Output[str]:
        """
        Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "run_id")

    @property
    @pulumi.getter(name="tensorboardId")
    def tensorboard_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tensorboard_id")

    @property
    @pulumi.getter(name="tensorboardTimeSeriesId")
    def tensorboard_time_series_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. The user specified unique ID to use for the TensorboardTimeSeries, which becomes the final component of the TensorboardTimeSeries's resource name. This value should match "a-z0-9{0, 127}"
        """
        return pulumi.get(self, "tensorboard_time_series_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this TensorboardTimeSeries was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Output[str]:
        """
        Immutable. Type of TensorboardTimeSeries value.
        """
        return pulumi.get(self, "value_type")

