# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNotebookRuntimeTemplateResult',
    'AwaitableGetNotebookRuntimeTemplateResult',
    'get_notebook_runtime_template',
    'get_notebook_runtime_template_output',
]

@pulumi.output_type
class GetNotebookRuntimeTemplateResult:
    def __init__(__self__, create_time=None, data_persistent_disk_spec=None, description=None, display_name=None, etag=None, euc_config=None, idle_shutdown_config=None, is_default=None, labels=None, machine_spec=None, name=None, network_spec=None, notebook_runtime_type=None, service_account=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if data_persistent_disk_spec and not isinstance(data_persistent_disk_spec, dict):
            raise TypeError("Expected argument 'data_persistent_disk_spec' to be a dict")
        pulumi.set(__self__, "data_persistent_disk_spec", data_persistent_disk_spec)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if euc_config and not isinstance(euc_config, dict):
            raise TypeError("Expected argument 'euc_config' to be a dict")
        pulumi.set(__self__, "euc_config", euc_config)
        if idle_shutdown_config and not isinstance(idle_shutdown_config, dict):
            raise TypeError("Expected argument 'idle_shutdown_config' to be a dict")
        pulumi.set(__self__, "idle_shutdown_config", idle_shutdown_config)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if machine_spec and not isinstance(machine_spec, dict):
            raise TypeError("Expected argument 'machine_spec' to be a dict")
        pulumi.set(__self__, "machine_spec", machine_spec)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_spec and not isinstance(network_spec, dict):
            raise TypeError("Expected argument 'network_spec' to be a dict")
        pulumi.set(__self__, "network_spec", network_spec)
        if notebook_runtime_type and not isinstance(notebook_runtime_type, str):
            raise TypeError("Expected argument 'notebook_runtime_type' to be a str")
        pulumi.set(__self__, "notebook_runtime_type", notebook_runtime_type)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this NotebookRuntimeTemplate was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataPersistentDiskSpec")
    def data_persistent_disk_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1PersistentDiskSpecResponse':
        """
        Optional. The specification of persistent disk attached to the runtime as data disk storage.
        """
        return pulumi.get(self, "data_persistent_disk_spec")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the NotebookRuntimeTemplate.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the NotebookRuntimeTemplate. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="eucConfig")
    def euc_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1NotebookEucConfigResponse':
        """
        EUC configuration of the NotebookRuntimeTemplate.
        """
        return pulumi.get(self, "euc_config")

    @property
    @pulumi.getter(name="idleShutdownConfig")
    def idle_shutdown_config(self) -> 'outputs.GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfigResponse':
        """
        The idle shutdown configuration of NotebookRuntimeTemplate. This config will only be set when idle shutdown is enabled.
        """
        return pulumi.get(self, "idle_shutdown_config")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default template to use if not specified.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize the NotebookRuntimeTemplates. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="machineSpec")
    def machine_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1MachineSpecResponse':
        """
        Optional. Immutable. The specification of a single machine for the template.
        """
        return pulumi.get(self, "machine_spec")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the NotebookRuntimeTemplate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSpec")
    def network_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1NetworkSpecResponse':
        """
        Optional. Network spec.
        """
        return pulumi.get(self, "network_spec")

    @property
    @pulumi.getter(name="notebookRuntimeType")
    def notebook_runtime_type(self) -> str:
        """
        Optional. Immutable. The type of the notebook runtime template.
        """
        return pulumi.get(self, "notebook_runtime_type")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        The service account that the runtime workload runs as. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this NotebookRuntimeTemplate was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetNotebookRuntimeTemplateResult(GetNotebookRuntimeTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotebookRuntimeTemplateResult(
            create_time=self.create_time,
            data_persistent_disk_spec=self.data_persistent_disk_spec,
            description=self.description,
            display_name=self.display_name,
            etag=self.etag,
            euc_config=self.euc_config,
            idle_shutdown_config=self.idle_shutdown_config,
            is_default=self.is_default,
            labels=self.labels,
            machine_spec=self.machine_spec,
            name=self.name,
            network_spec=self.network_spec,
            notebook_runtime_type=self.notebook_runtime_type,
            service_account=self.service_account,
            update_time=self.update_time)


def get_notebook_runtime_template(location: Optional[str] = None,
                                  notebook_runtime_template_id: Optional[str] = None,
                                  project: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotebookRuntimeTemplateResult:
    """
    Gets a NotebookRuntimeTemplate.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['notebookRuntimeTemplateId'] = notebook_runtime_template_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getNotebookRuntimeTemplate', __args__, opts=opts, typ=GetNotebookRuntimeTemplateResult).value

    return AwaitableGetNotebookRuntimeTemplateResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        data_persistent_disk_spec=pulumi.get(__ret__, 'data_persistent_disk_spec'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        euc_config=pulumi.get(__ret__, 'euc_config'),
        idle_shutdown_config=pulumi.get(__ret__, 'idle_shutdown_config'),
        is_default=pulumi.get(__ret__, 'is_default'),
        labels=pulumi.get(__ret__, 'labels'),
        machine_spec=pulumi.get(__ret__, 'machine_spec'),
        name=pulumi.get(__ret__, 'name'),
        network_spec=pulumi.get(__ret__, 'network_spec'),
        notebook_runtime_type=pulumi.get(__ret__, 'notebook_runtime_type'),
        service_account=pulumi.get(__ret__, 'service_account'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_notebook_runtime_template)
def get_notebook_runtime_template_output(location: Optional[pulumi.Input[str]] = None,
                                         notebook_runtime_template_id: Optional[pulumi.Input[str]] = None,
                                         project: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNotebookRuntimeTemplateResult]:
    """
    Gets a NotebookRuntimeTemplate.
    """
    ...
