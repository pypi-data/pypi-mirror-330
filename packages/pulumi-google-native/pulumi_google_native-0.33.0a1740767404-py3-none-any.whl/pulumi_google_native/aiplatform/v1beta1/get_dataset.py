# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDatasetResult',
    'AwaitableGetDatasetResult',
    'get_dataset',
    'get_dataset_output',
]

@pulumi.output_type
class GetDatasetResult:
    def __init__(__self__, create_time=None, data_item_count=None, description=None, display_name=None, encryption_spec=None, etag=None, labels=None, metadata=None, metadata_artifact=None, metadata_schema_uri=None, name=None, saved_queries=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if data_item_count and not isinstance(data_item_count, str):
            raise TypeError("Expected argument 'data_item_count' to be a str")
        pulumi.set(__self__, "data_item_count", data_item_count)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if encryption_spec and not isinstance(encryption_spec, dict):
            raise TypeError("Expected argument 'encryption_spec' to be a dict")
        pulumi.set(__self__, "encryption_spec", encryption_spec)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if metadata_artifact and not isinstance(metadata_artifact, str):
            raise TypeError("Expected argument 'metadata_artifact' to be a str")
        pulumi.set(__self__, "metadata_artifact", metadata_artifact)
        if metadata_schema_uri and not isinstance(metadata_schema_uri, str):
            raise TypeError("Expected argument 'metadata_schema_uri' to be a str")
        pulumi.set(__self__, "metadata_schema_uri", metadata_schema_uri)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if saved_queries and not isinstance(saved_queries, list):
            raise TypeError("Expected argument 'saved_queries' to be a list")
        pulumi.set(__self__, "saved_queries", saved_queries)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this Dataset was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataItemCount")
    def data_item_count(self) -> str:
        """
        The number of DataItems in this Dataset. Only apply for non-structured Dataset.
        """
        return pulumi.get(self, "data_item_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Dataset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-defined name of the Dataset. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionSpec")
    def encryption_spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse':
        """
        Customer-managed encryption key spec for a Dataset. If set, this Dataset and all sub-resources of this Dataset will be secured by this key.
        """
        return pulumi.get(self, "encryption_spec")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels with user-defined metadata to organize your Datasets. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each Dataset: * "aiplatform.googleapis.com/dataset_metadata_schema": output only, its value is the metadata_schema's title.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Any:
        """
        Additional information about the Dataset.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataArtifact")
    def metadata_artifact(self) -> str:
        """
        The resource name of the Artifact that was created in MetadataStore when creating the Dataset. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.
        """
        return pulumi.get(self, "metadata_artifact")

    @property
    @pulumi.getter(name="metadataSchemaUri")
    def metadata_schema_uri(self) -> str:
        """
        Points to a YAML file stored on Google Cloud Storage describing additional information about the Dataset. The schema is defined as an OpenAPI 3.0.2 Schema Object. The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/metadata/.
        """
        return pulumi.get(self, "metadata_schema_uri")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the Dataset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="savedQueries")
    def saved_queries(self) -> Sequence['outputs.GoogleCloudAiplatformV1beta1SavedQueryResponse']:
        """
        All SavedQueries belong to the Dataset will be returned in List/Get Dataset response. The annotation_specs field will not be populated except for UI cases which will only use annotation_spec_count. In CreateDataset request, a SavedQuery is created together if this field is set, up to one SavedQuery can be set in CreateDatasetRequest. The SavedQuery should not contain any AnnotationSpec.
        """
        return pulumi.get(self, "saved_queries")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this Dataset was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetDatasetResult(GetDatasetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasetResult(
            create_time=self.create_time,
            data_item_count=self.data_item_count,
            description=self.description,
            display_name=self.display_name,
            encryption_spec=self.encryption_spec,
            etag=self.etag,
            labels=self.labels,
            metadata=self.metadata,
            metadata_artifact=self.metadata_artifact,
            metadata_schema_uri=self.metadata_schema_uri,
            name=self.name,
            saved_queries=self.saved_queries,
            update_time=self.update_time)


def get_dataset(dataset_id: Optional[str] = None,
                location: Optional[str] = None,
                project: Optional[str] = None,
                read_mask: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasetResult:
    """
    Gets a Dataset.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['readMask'] = read_mask
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getDataset', __args__, opts=opts, typ=GetDatasetResult).value

    return AwaitableGetDatasetResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        data_item_count=pulumi.get(__ret__, 'data_item_count'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        encryption_spec=pulumi.get(__ret__, 'encryption_spec'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata=pulumi.get(__ret__, 'metadata'),
        metadata_artifact=pulumi.get(__ret__, 'metadata_artifact'),
        metadata_schema_uri=pulumi.get(__ret__, 'metadata_schema_uri'),
        name=pulumi.get(__ret__, 'name'),
        saved_queries=pulumi.get(__ret__, 'saved_queries'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_dataset)
def get_dataset_output(dataset_id: Optional[pulumi.Input[str]] = None,
                       location: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       read_mask: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatasetResult]:
    """
    Gets a Dataset.
    """
    ...
