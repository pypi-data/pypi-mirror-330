# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = ['TrialArgs', 'Trial']

@pulumi.input_type
class TrialArgs:
    def __init__(__self__, *,
                 study_id: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Trial resource.
        """
        pulumi.set(__self__, "study_id", study_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="studyId")
    def study_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "study_id")

    @study_id.setter
    def study_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "study_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class Trial(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 study_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Adds a user provided Trial to a Study.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrialArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Adds a user provided Trial to a Study.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param TrialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 study_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrialArgs.__new__(TrialArgs)

            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            if study_id is None and not opts.urn:
                raise TypeError("Missing required property 'study_id'")
            __props__.__dict__["study_id"] = study_id
            __props__.__dict__["client_id"] = None
            __props__.__dict__["custom_job"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["final_measurement"] = None
            __props__.__dict__["infeasible_reason"] = None
            __props__.__dict__["measurements"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["parameters"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["web_access_uris"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project", "studyId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Trial, __self__).__init__(
            'google-native:aiplatform/v1beta1:Trial',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Trial':
        """
        Get an existing Trial resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TrialArgs.__new__(TrialArgs)

        __props__.__dict__["client_id"] = None
        __props__.__dict__["custom_job"] = None
        __props__.__dict__["end_time"] = None
        __props__.__dict__["final_measurement"] = None
        __props__.__dict__["infeasible_reason"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["measurements"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["parameters"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["start_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["study_id"] = None
        __props__.__dict__["web_access_uris"] = None
        return Trial(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customJob")
    def custom_job(self) -> pulumi.Output[str]:
        """
        The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
        """
        return pulumi.get(self, "custom_job")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="finalMeasurement")
    def final_measurement(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1MeasurementResponse']:
        """
        The final measurement containing the objective value.
        """
        return pulumi.get(self, "final_measurement")

    @property
    @pulumi.getter(name="infeasibleReason")
    def infeasible_reason(self) -> pulumi.Output[str]:
        """
        A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
        """
        return pulumi.get(self, "infeasible_reason")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def measurements(self) -> pulumi.Output[Sequence['outputs.GoogleCloudAiplatformV1beta1MeasurementResponse']]:
        """
        A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
        """
        return pulumi.get(self, "measurements")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name of the Trial assigned by the service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Sequence['outputs.GoogleCloudAiplatformV1beta1TrialParameterResponse']]:
        """
        The parameters of the Trial.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Time when the Trial was started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The detailed state of the Trial.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="studyId")
    def study_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "study_id")

    @property
    @pulumi.getter(name="webAccessUris")
    def web_access_uris(self) -> pulumi.Output[Mapping[str, str]]:
        """
        URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
        """
        return pulumi.get(self, "web_access_uris")

