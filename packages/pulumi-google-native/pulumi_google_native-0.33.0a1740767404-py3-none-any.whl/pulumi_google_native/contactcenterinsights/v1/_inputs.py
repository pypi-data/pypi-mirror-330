# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs',
    'GoogleCloudContactcenterinsightsV1AnnotatorSelectorArgs',
    'GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs',
    'GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs',
    'GoogleCloudContactcenterinsightsV1DialogflowSourceArgs',
    'GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs',
    'GoogleCloudContactcenterinsightsV1GcsSourceArgs',
    'GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigArgs',
    'GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs',
    'GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupArgs',
    'GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs',
]

@pulumi.input_type
class GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs:
    def __init__(__self__, *,
                 conversation_profile: Optional[pulumi.Input[str]] = None,
                 summarization_model: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigSummarizationModel']] = None):
        """
        Configuration for summarization.
        :param pulumi.Input[str] conversation_profile: Resource name of the Dialogflow conversation profile. Format: projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigSummarizationModel'] summarization_model: Default summarization model to be used.
        """
        if conversation_profile is not None:
            pulumi.set(__self__, "conversation_profile", conversation_profile)
        if summarization_model is not None:
            pulumi.set(__self__, "summarization_model", summarization_model)

    @property
    @pulumi.getter(name="conversationProfile")
    def conversation_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name of the Dialogflow conversation profile. Format: projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
        """
        return pulumi.get(self, "conversation_profile")

    @conversation_profile.setter
    def conversation_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conversation_profile", value)

    @property
    @pulumi.getter(name="summarizationModel")
    def summarization_model(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigSummarizationModel']]:
        """
        Default summarization model to be used.
        """
        return pulumi.get(self, "summarization_model")

    @summarization_model.setter
    def summarization_model(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigSummarizationModel']]):
        pulumi.set(self, "summarization_model", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1AnnotatorSelectorArgs:
    def __init__(__self__, *,
                 issue_models: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 phrase_matchers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_entity_annotator: Optional[pulumi.Input[bool]] = None,
                 run_intent_annotator: Optional[pulumi.Input[bool]] = None,
                 run_interruption_annotator: Optional[pulumi.Input[bool]] = None,
                 run_issue_model_annotator: Optional[pulumi.Input[bool]] = None,
                 run_phrase_matcher_annotator: Optional[pulumi.Input[bool]] = None,
                 run_sentiment_annotator: Optional[pulumi.Input[bool]] = None,
                 run_silence_annotator: Optional[pulumi.Input[bool]] = None,
                 run_summarization_annotator: Optional[pulumi.Input[bool]] = None,
                 summarization_config: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs']] = None):
        """
        Selector of all available annotators and phrase matchers to run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issue_models: The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] phrase_matchers: The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
        :param pulumi.Input[bool] run_entity_annotator: Whether to run the entity annotator.
        :param pulumi.Input[bool] run_intent_annotator: Whether to run the intent annotator.
        :param pulumi.Input[bool] run_interruption_annotator: Whether to run the interruption annotator.
        :param pulumi.Input[bool] run_issue_model_annotator: Whether to run the issue model annotator. A model should have already been deployed for this to take effect.
        :param pulumi.Input[bool] run_phrase_matcher_annotator: Whether to run the active phrase matcher annotator(s).
        :param pulumi.Input[bool] run_sentiment_annotator: Whether to run the sentiment annotator.
        :param pulumi.Input[bool] run_silence_annotator: Whether to run the silence annotator.
        :param pulumi.Input[bool] run_summarization_annotator: Whether to run the summarization annotator.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs'] summarization_config: Configuration for the summarization annotator.
        """
        if issue_models is not None:
            pulumi.set(__self__, "issue_models", issue_models)
        if phrase_matchers is not None:
            pulumi.set(__self__, "phrase_matchers", phrase_matchers)
        if run_entity_annotator is not None:
            pulumi.set(__self__, "run_entity_annotator", run_entity_annotator)
        if run_intent_annotator is not None:
            pulumi.set(__self__, "run_intent_annotator", run_intent_annotator)
        if run_interruption_annotator is not None:
            pulumi.set(__self__, "run_interruption_annotator", run_interruption_annotator)
        if run_issue_model_annotator is not None:
            pulumi.set(__self__, "run_issue_model_annotator", run_issue_model_annotator)
        if run_phrase_matcher_annotator is not None:
            pulumi.set(__self__, "run_phrase_matcher_annotator", run_phrase_matcher_annotator)
        if run_sentiment_annotator is not None:
            pulumi.set(__self__, "run_sentiment_annotator", run_sentiment_annotator)
        if run_silence_annotator is not None:
            pulumi.set(__self__, "run_silence_annotator", run_silence_annotator)
        if run_summarization_annotator is not None:
            pulumi.set(__self__, "run_summarization_annotator", run_summarization_annotator)
        if summarization_config is not None:
            pulumi.set(__self__, "summarization_config", summarization_config)

    @property
    @pulumi.getter(name="issueModels")
    def issue_models(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.
        """
        return pulumi.get(self, "issue_models")

    @issue_models.setter
    def issue_models(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issue_models", value)

    @property
    @pulumi.getter(name="phraseMatchers")
    def phrase_matchers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
        """
        return pulumi.get(self, "phrase_matchers")

    @phrase_matchers.setter
    def phrase_matchers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "phrase_matchers", value)

    @property
    @pulumi.getter(name="runEntityAnnotator")
    def run_entity_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the entity annotator.
        """
        return pulumi.get(self, "run_entity_annotator")

    @run_entity_annotator.setter
    def run_entity_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_entity_annotator", value)

    @property
    @pulumi.getter(name="runIntentAnnotator")
    def run_intent_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the intent annotator.
        """
        return pulumi.get(self, "run_intent_annotator")

    @run_intent_annotator.setter
    def run_intent_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_intent_annotator", value)

    @property
    @pulumi.getter(name="runInterruptionAnnotator")
    def run_interruption_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the interruption annotator.
        """
        return pulumi.get(self, "run_interruption_annotator")

    @run_interruption_annotator.setter
    def run_interruption_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_interruption_annotator", value)

    @property
    @pulumi.getter(name="runIssueModelAnnotator")
    def run_issue_model_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the issue model annotator. A model should have already been deployed for this to take effect.
        """
        return pulumi.get(self, "run_issue_model_annotator")

    @run_issue_model_annotator.setter
    def run_issue_model_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_issue_model_annotator", value)

    @property
    @pulumi.getter(name="runPhraseMatcherAnnotator")
    def run_phrase_matcher_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the active phrase matcher annotator(s).
        """
        return pulumi.get(self, "run_phrase_matcher_annotator")

    @run_phrase_matcher_annotator.setter
    def run_phrase_matcher_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_phrase_matcher_annotator", value)

    @property
    @pulumi.getter(name="runSentimentAnnotator")
    def run_sentiment_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the sentiment annotator.
        """
        return pulumi.get(self, "run_sentiment_annotator")

    @run_sentiment_annotator.setter
    def run_sentiment_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_sentiment_annotator", value)

    @property
    @pulumi.getter(name="runSilenceAnnotator")
    def run_silence_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the silence annotator.
        """
        return pulumi.get(self, "run_silence_annotator")

    @run_silence_annotator.setter
    def run_silence_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_silence_annotator", value)

    @property
    @pulumi.getter(name="runSummarizationAnnotator")
    def run_summarization_annotator(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to run the summarization annotator.
        """
        return pulumi.get(self, "run_summarization_annotator")

    @run_summarization_annotator.setter
    def run_summarization_annotator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_summarization_annotator", value)

    @property
    @pulumi.getter(name="summarizationConfig")
    def summarization_config(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs']]:
        """
        Configuration for the summarization annotator.
        """
        return pulumi.get(self, "summarization_config")

    @summarization_config.setter
    def summarization_config(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfigArgs']]):
        pulumi.set(self, "summarization_config", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs:
    def __init__(__self__, *,
                 agent_channel: Optional[pulumi.Input[int]] = None,
                 customer_channel: Optional[pulumi.Input[int]] = None):
        """
        Call-specific metadata.
        :param pulumi.Input[int] agent_channel: The audio channel that contains the agent.
        :param pulumi.Input[int] customer_channel: The audio channel that contains the customer.
        """
        if agent_channel is not None:
            pulumi.set(__self__, "agent_channel", agent_channel)
        if customer_channel is not None:
            pulumi.set(__self__, "customer_channel", customer_channel)

    @property
    @pulumi.getter(name="agentChannel")
    def agent_channel(self) -> Optional[pulumi.Input[int]]:
        """
        The audio channel that contains the agent.
        """
        return pulumi.get(self, "agent_channel")

    @agent_channel.setter
    def agent_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agent_channel", value)

    @property
    @pulumi.getter(name="customerChannel")
    def customer_channel(self) -> Optional[pulumi.Input[int]]:
        """
        The audio channel that contains the customer.
        """
        return pulumi.get(self, "customer_channel")

    @customer_channel.setter
    def customer_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "customer_channel", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs:
    def __init__(__self__, *,
                 dialogflow_source: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1DialogflowSourceArgs']] = None,
                 gcs_source: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1GcsSourceArgs']] = None):
        """
        The conversation source, which is a combination of transcript, audio, and metadata.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1DialogflowSourceArgs'] dialogflow_source: The source when the conversation comes from Dialogflow.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1GcsSourceArgs'] gcs_source: A Cloud Storage location specification for the audio and transcript.
        """
        if dialogflow_source is not None:
            pulumi.set(__self__, "dialogflow_source", dialogflow_source)
        if gcs_source is not None:
            pulumi.set(__self__, "gcs_source", gcs_source)

    @property
    @pulumi.getter(name="dialogflowSource")
    def dialogflow_source(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1DialogflowSourceArgs']]:
        """
        The source when the conversation comes from Dialogflow.
        """
        return pulumi.get(self, "dialogflow_source")

    @dialogflow_source.setter
    def dialogflow_source(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1DialogflowSourceArgs']]):
        pulumi.set(self, "dialogflow_source", value)

    @property
    @pulumi.getter(name="gcsSource")
    def gcs_source(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1GcsSourceArgs']]:
        """
        A Cloud Storage location specification for the audio and transcript.
        """
        return pulumi.get(self, "gcs_source")

    @gcs_source.setter
    def gcs_source(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1GcsSourceArgs']]):
        pulumi.set(self, "gcs_source", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1DialogflowSourceArgs:
    def __init__(__self__, *,
                 audio_uri: Optional[pulumi.Input[str]] = None):
        """
        A Dialogflow source of conversation data.
        :param pulumi.Input[str] audio_uri: Cloud Storage URI that points to a file that contains the conversation audio.
        """
        if audio_uri is not None:
            pulumi.set(__self__, "audio_uri", audio_uri)

    @property
    @pulumi.getter(name="audioUri")
    def audio_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage URI that points to a file that contains the conversation audio.
        """
        return pulumi.get(self, "audio_uri")

    @audio_uri.setter
    def audio_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_uri", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[pulumi.Input[bool]] = None):
        """
        Exact match configuration.
        :param pulumi.Input[bool] case_sensitive: Whether to consider case sensitivity when performing an exact match.
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to consider case sensitivity when performing an exact match.
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1GcsSourceArgs:
    def __init__(__self__, *,
                 audio_uri: Optional[pulumi.Input[str]] = None,
                 transcript_uri: Optional[pulumi.Input[str]] = None):
        """
        A Cloud Storage source of conversation data.
        :param pulumi.Input[str] audio_uri: Cloud Storage URI that points to a file that contains the conversation audio.
        :param pulumi.Input[str] transcript_uri: Immutable. Cloud Storage URI that points to a file that contains the conversation transcript.
        """
        if audio_uri is not None:
            pulumi.set(__self__, "audio_uri", audio_uri)
        if transcript_uri is not None:
            pulumi.set(__self__, "transcript_uri", transcript_uri)

    @property
    @pulumi.getter(name="audioUri")
    def audio_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage URI that points to a file that contains the conversation audio.
        """
        return pulumi.get(self, "audio_uri")

    @audio_uri.setter
    def audio_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_uri", value)

    @property
    @pulumi.getter(name="transcriptUri")
    def transcript_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Cloud Storage URI that points to a file that contains the conversation transcript.
        """
        return pulumi.get(self, "transcript_uri")

    @transcript_uri.setter
    def transcript_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transcript_uri", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigArgs:
    def __init__(__self__, *,
                 filter: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigMedium']] = None):
        """
        Configs for the input data used to create the issue model.
        :param pulumi.Input[str] filter: A filter to reduce the conversations used for training the model to a specific subset.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigMedium'] medium: Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.
        """
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter to reduce the conversations used for training the model to a specific subset.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigMedium']]:
        """
        Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigMedium']]):
        pulumi.set(self, "medium", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs:
    def __init__(__self__, *,
                 exact_match_config: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs']] = None):
        """
        Configuration information of a phrase match rule.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs'] exact_match_config: The configuration for the exact match rule.
        """
        if exact_match_config is not None:
            pulumi.set(__self__, "exact_match_config", exact_match_config)

    @property
    @pulumi.getter(name="exactMatchConfig")
    def exact_match_config(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs']]:
        """
        The configuration for the exact match rule.
        """
        return pulumi.get(self, "exact_match_config")

    @exact_match_config.setter
    def exact_match_config(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1ExactMatchConfigArgs']]):
        pulumi.set(self, "exact_match_config", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupType'],
                 phrase_match_rules: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs']]]] = None):
        """
        A message representing a rule in the phrase matcher.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupType'] type: The type of this phrase match rule group.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs']]] phrase_match_rules: A list of phrase match rules that are included in this group.
        """
        pulumi.set(__self__, "type", type)
        if phrase_match_rules is not None:
            pulumi.set(__self__, "phrase_match_rules", phrase_match_rules)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupType']:
        """
        The type of this phrase match rule group.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="phraseMatchRules")
    def phrase_match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs']]]]:
        """
        A list of phrase match rules that are included in this group.
        """
        return pulumi.get(self, "phrase_match_rules")

    @phrase_match_rules.setter
    def phrase_match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs']]]]):
        pulumi.set(self, "phrase_match_rules", value)


@pulumi.input_type
class GoogleCloudContactcenterinsightsV1PhraseMatchRuleArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 config: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs']] = None,
                 negated: Optional[pulumi.Input[bool]] = None):
        """
        The data for a phrase match rule.
        :param pulumi.Input[str] query: The phrase to be matched.
        :param pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs'] config: Provides additional information about the rule that specifies how to apply the rule.
        :param pulumi.Input[bool] negated: Specifies whether the phrase must be missing from the transcript segment or present in the transcript segment.
        """
        pulumi.set(__self__, "query", query)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The phrase to be matched.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs']]:
        """
        Provides additional information about the rule that specifies how to apply the rule.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the phrase must be missing from the transcript segment or present in the transcript segment.
        """
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)


