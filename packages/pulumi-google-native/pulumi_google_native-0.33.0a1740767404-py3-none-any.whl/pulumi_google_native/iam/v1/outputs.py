# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccessRestrictionsResponse',
    'AuditConfigResponse',
    'AuditLogConfigResponse',
    'AwsResponse',
    'BindingResponse',
    'Condition',
    'ExprResponse',
    'GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse',
    'GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse',
    'GoogleIamAdminV1WorkforcePoolProviderOidcResponse',
    'GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse',
    'GoogleIamAdminV1WorkforcePoolProviderSamlResponse',
    'KeyDataResponse',
    'OidcResponse',
    'SamlResponse',
    'ServiceConfigResponse',
]

@pulumi.output_type
class AccessRestrictionsResponse(dict):
    """
    Access related restrictions on the workforce pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedServices":
            suggest = "allowed_services"
        elif key == "disableProgrammaticSignin":
            suggest = "disable_programmatic_signin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessRestrictionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessRestrictionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessRestrictionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_services: Sequence['outputs.ServiceConfigResponse'],
                 disable_programmatic_signin: bool):
        """
        Access related restrictions on the workforce pool.
        :param Sequence['ServiceConfigResponse'] allowed_services: Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
        :param bool disable_programmatic_signin: Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
        """
        pulumi.set(__self__, "allowed_services", allowed_services)
        pulumi.set(__self__, "disable_programmatic_signin", disable_programmatic_signin)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Sequence['outputs.ServiceConfigResponse']:
        """
        Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
        """
        return pulumi.get(self, "allowed_services")

    @property
    @pulumi.getter(name="disableProgrammaticSignin")
    def disable_programmatic_signin(self) -> bool:
        """
        Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
        """
        return pulumi.get(self, "disable_programmatic_signin")


@pulumi.output_type
class AuditConfigResponse(dict):
    """
    Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogConfigs":
            suggest = "audit_log_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_configs: Sequence['outputs.AuditLogConfigResponse'],
                 service: str):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param Sequence['AuditLogConfigResponse'] audit_log_configs: The configuration for logging of each type of permission.
        :param str service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Sequence['outputs.AuditLogConfigResponse']:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AuditLogConfigResponse(dict):
    """
    Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedMembers":
            suggest = "exempted_members"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exempted_members: Sequence[str],
                 log_type: str):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param Sequence[str] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param str log_type: The log type that this config enables.
        """
        pulumi.set(__self__, "exempted_members", exempted_members)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Sequence[str]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class AwsResponse(dict):
    """
    Represents an Amazon Web Services identity provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str):
        """
        Represents an Amazon Web Services identity provider.
        :param str account_id: The AWS account ID.
        """
        pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The AWS account ID.
        """
        return pulumi.get(self, "account_id")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class Condition(dict):
    """
    An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
    """
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        """
        An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str title: A title for the expression, i.e. a short string describing its purpose.
        :param str description: An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        A title for the expression, i.e. a short string describing its purpose.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse(dict):
    """
    Representation of a client secret configured for the OIDC provider.
    """
    def __init__(__self__, *,
                 value: 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse'):
        """
        Representation of a client secret configured for the OIDC provider.
        :param 'GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse' value: The value of the client secret.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse':
        """
        The value of the client secret.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse(dict):
    """
    Representation of the value of the client secret.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plainText":
            suggest = "plain_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plain_text: str,
                 thumbprint: str):
        """
        Representation of the value of the client secret.
        :param str plain_text: Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
        :param str thumbprint: A thumbprint to represent the current client secret value.
        """
        pulumi.set(__self__, "plain_text", plain_text)
        pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> str:
        """
        Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
        """
        return pulumi.get(self, "plain_text")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        A thumbprint to represent the current client secret value.
        """
        return pulumi.get(self, "thumbprint")


@pulumi.output_type
class GoogleIamAdminV1WorkforcePoolProviderOidcResponse(dict):
    """
    Represents an OpenId Connect 1.0 identity provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "issuerUri":
            suggest = "issuer_uri"
        elif key == "jwksJson":
            suggest = "jwks_json"
        elif key == "webSsoConfig":
            suggest = "web_sso_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleIamAdminV1WorkforcePoolProviderOidcResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse',
                 issuer_uri: str,
                 jwks_json: str,
                 web_sso_config: 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse'):
        """
        Represents an OpenId Connect 1.0 identity provider.
        :param str client_id: The client ID. Must match the audience claim of the JWT issued by the identity provider.
        :param 'GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse' client_secret: The optional client secret. Required to enable Authorization Code flow for web sign-in.
        :param str issuer_uri: The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
        :param str jwks_json: OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
        :param 'GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse' web_sso_config: Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer_uri", issuer_uri)
        pulumi.set(__self__, "jwks_json", jwks_json)
        pulumi.set(__self__, "web_sso_config", web_sso_config)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID. Must match the audience claim of the JWT issued by the identity provider.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse':
        """
        The optional client secret. Required to enable Authorization Code flow for web sign-in.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="issuerUri")
    def issuer_uri(self) -> str:
        """
        The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
        """
        return pulumi.get(self, "issuer_uri")

    @property
    @pulumi.getter(name="jwksJson")
    def jwks_json(self) -> str:
        """
        OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
        """
        return pulumi.get(self, "jwks_json")

    @property
    @pulumi.getter(name="webSsoConfig")
    def web_sso_config(self) -> 'outputs.GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse':
        """
        Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
        """
        return pulumi.get(self, "web_sso_config")


@pulumi.output_type
class GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse(dict):
    """
    Configuration for web single sign-on for the OIDC provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalScopes":
            suggest = "additional_scopes"
        elif key == "assertionClaimsBehavior":
            suggest = "assertion_claims_behavior"
        elif key == "responseType":
            suggest = "response_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_scopes: Sequence[str],
                 assertion_claims_behavior: str,
                 response_type: str):
        """
        Configuration for web single sign-on for the OIDC provider.
        :param Sequence[str] additional_scopes: Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
        :param str assertion_claims_behavior: The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
        :param str response_type: The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
        """
        pulumi.set(__self__, "additional_scopes", additional_scopes)
        pulumi.set(__self__, "assertion_claims_behavior", assertion_claims_behavior)
        pulumi.set(__self__, "response_type", response_type)

    @property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Sequence[str]:
        """
        Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
        """
        return pulumi.get(self, "additional_scopes")

    @property
    @pulumi.getter(name="assertionClaimsBehavior")
    def assertion_claims_behavior(self) -> str:
        """
        The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
        """
        return pulumi.get(self, "assertion_claims_behavior")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> str:
        """
        The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
        """
        return pulumi.get(self, "response_type")


@pulumi.output_type
class GoogleIamAdminV1WorkforcePoolProviderSamlResponse(dict):
    """
    Represents a SAML identity provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpMetadataXml":
            suggest = "idp_metadata_xml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleIamAdminV1WorkforcePoolProviderSamlResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderSamlResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleIamAdminV1WorkforcePoolProviderSamlResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_metadata_xml: str):
        """
        Represents a SAML identity provider.
        :param str idp_metadata_xml: SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
        """
        pulumi.set(__self__, "idp_metadata_xml", idp_metadata_xml)

    @property
    @pulumi.getter(name="idpMetadataXml")
    def idp_metadata_xml(self) -> str:
        """
        SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
        """
        return pulumi.get(self, "idp_metadata_xml")


@pulumi.output_type
class KeyDataResponse(dict):
    """
    Represents a public key data along with its format.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySpec":
            suggest = "key_spec"
        elif key == "notAfterTime":
            suggest = "not_after_time"
        elif key == "notBeforeTime":
            suggest = "not_before_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 key: str,
                 key_spec: str,
                 not_after_time: str,
                 not_before_time: str):
        """
        Represents a public key data along with its format.
        :param str format: The format of the key.
        :param str key: The key data. The format of the key is represented by the format field.
        :param str key_spec: The specifications for the key.
        :param str not_after_time: Latest timestamp when this key is valid. Attempts to use this key after this time will fail. Only present if the key data represents a X.509 certificate.
        :param str not_before_time: Earliest timestamp when this key is valid. Attempts to use this key before this time will fail. Only present if the key data represents a X.509 certificate.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "not_after_time", not_after_time)
        pulumi.set(__self__, "not_before_time", not_before_time)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the key.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key data. The format of the key is represented by the format field.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> str:
        """
        The specifications for the key.
        """
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="notAfterTime")
    def not_after_time(self) -> str:
        """
        Latest timestamp when this key is valid. Attempts to use this key after this time will fail. Only present if the key data represents a X.509 certificate.
        """
        return pulumi.get(self, "not_after_time")

    @property
    @pulumi.getter(name="notBeforeTime")
    def not_before_time(self) -> str:
        """
        Earliest timestamp when this key is valid. Attempts to use this key before this time will fail. Only present if the key data represents a X.509 certificate.
        """
        return pulumi.get(self, "not_before_time")


@pulumi.output_type
class OidcResponse(dict):
    """
    Represents an OpenId Connect 1.0 identity provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedAudiences":
            suggest = "allowed_audiences"
        elif key == "issuerUri":
            suggest = "issuer_uri"
        elif key == "jwksJson":
            suggest = "jwks_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OidcResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OidcResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OidcResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_audiences: Sequence[str],
                 issuer_uri: str,
                 jwks_json: str):
        """
        Represents an OpenId Connect 1.0 identity provider.
        :param Sequence[str] allowed_audiences: Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ``` //iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ ```
        :param str issuer_uri: The OIDC issuer URL. Must be an HTTPS endpoint.
        :param str jwks_json: Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
        """
        pulumi.set(__self__, "allowed_audiences", allowed_audiences)
        pulumi.set(__self__, "issuer_uri", issuer_uri)
        pulumi.set(__self__, "jwks_json", jwks_json)

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Sequence[str]:
        """
        Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ``` //iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ ```
        """
        return pulumi.get(self, "allowed_audiences")

    @property
    @pulumi.getter(name="issuerUri")
    def issuer_uri(self) -> str:
        """
        The OIDC issuer URL. Must be an HTTPS endpoint.
        """
        return pulumi.get(self, "issuer_uri")

    @property
    @pulumi.getter(name="jwksJson")
    def jwks_json(self) -> str:
        """
        Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
        """
        return pulumi.get(self, "jwks_json")


@pulumi.output_type
class SamlResponse(dict):
    """
    Represents an SAML 2.0 identity provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpMetadataXml":
            suggest = "idp_metadata_xml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamlResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamlResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamlResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idp_metadata_xml: str):
        """
        Represents an SAML 2.0 identity provider.
        :param str idp_metadata_xml: SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
        """
        pulumi.set(__self__, "idp_metadata_xml", idp_metadata_xml)

    @property
    @pulumi.getter(name="idpMetadataXml")
    def idp_metadata_xml(self) -> str:
        """
        SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
        """
        return pulumi.get(self, "idp_metadata_xml")


@pulumi.output_type
class ServiceConfigResponse(dict):
    """
    Configuration for a service.
    """
    def __init__(__self__, *,
                 domain: str):
        """
        Configuration for a service.
        :param str domain: Optional. Domain name of the service. Example: console.cloud.google
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Optional. Domain name of the service. Example: console.cloud.google
        """
        return pulumi.get(self, "domain")


