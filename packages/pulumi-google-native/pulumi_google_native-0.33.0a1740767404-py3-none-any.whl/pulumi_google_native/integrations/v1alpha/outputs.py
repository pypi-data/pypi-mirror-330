# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'EnterpriseCrmEventbusProtoAttributesResponse',
    'EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse',
    'EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse',
    'EnterpriseCrmEventbusProtoBooleanParameterArrayResponse',
    'EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse',
    'EnterpriseCrmEventbusProtoCombinedConditionResponse',
    'EnterpriseCrmEventbusProtoConditionResponse',
    'EnterpriseCrmEventbusProtoCoordinateResponse',
    'EnterpriseCrmEventbusProtoDoubleArrayResponse',
    'EnterpriseCrmEventbusProtoDoubleParameterArrayResponse',
    'EnterpriseCrmEventbusProtoEventBusPropertiesResponse',
    'EnterpriseCrmEventbusProtoEventParametersResponse',
    'EnterpriseCrmEventbusProtoFailurePolicyResponse',
    'EnterpriseCrmEventbusProtoIntArrayResponse',
    'EnterpriseCrmEventbusProtoIntParameterArrayResponse',
    'EnterpriseCrmEventbusProtoLogSettingsResponse',
    'EnterpriseCrmEventbusProtoNextTaskResponse',
    'EnterpriseCrmEventbusProtoNextTeardownTaskResponse',
    'EnterpriseCrmEventbusProtoNodeIdentifierResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexResponse',
    'EnterpriseCrmEventbusProtoParameterEntryResponse',
    'EnterpriseCrmEventbusProtoParameterValueTypeResponse',
    'EnterpriseCrmEventbusProtoPropertyEntryResponse',
    'EnterpriseCrmEventbusProtoProtoParameterArrayResponse',
    'EnterpriseCrmEventbusProtoSerializedObjectParameterResponse',
    'EnterpriseCrmEventbusProtoStringArrayResponse',
    'EnterpriseCrmEventbusProtoStringParameterArrayResponse',
    'EnterpriseCrmEventbusProtoSuccessPolicyResponse',
    'EnterpriseCrmEventbusProtoTaskAlertConfigResponse',
    'EnterpriseCrmEventbusProtoTaskMetadataAdminResponse',
    'EnterpriseCrmEventbusProtoTaskMetadataResponse',
    'EnterpriseCrmEventbusProtoTaskUiConfigResponse',
    'EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse',
    'EnterpriseCrmEventbusProtoTeardownResponse',
    'EnterpriseCrmEventbusProtoTeardownTaskConfigResponse',
    'EnterpriseCrmEventbusProtoTriggerCriteriaResponse',
    'EnterpriseCrmEventbusProtoValueTypeResponse',
    'EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse',
    'EnterpriseCrmEventbusStatsDimensionsResponse',
    'EnterpriseCrmEventbusStatsResponse',
    'EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse',
    'EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse',
    'EnterpriseCrmFrontendsEventbusProtoEventParametersResponse',
    'EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse',
    'EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse',
    'EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageResponse',
    'EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse',
    'EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse',
    'EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse',
    'EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse',
    'EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse',
    'EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse',
    'EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse',
    'EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse',
    'EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse',
    'EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse',
    'EnterpriseCrmFrontendsEventbusProtoWorkflowParametersResponse',
    'EnterpriseCrmLoggingGwsFieldLimitsResponse',
    'EnterpriseCrmLoggingGwsSanitizeOptionsResponse',
    'GoogleCloudIntegrationsV1alphaAccessTokenResponse',
    'GoogleCloudIntegrationsV1alphaAssertionResponse',
    'GoogleCloudIntegrationsV1alphaAuthTokenResponse',
    'GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse',
    'GoogleCloudIntegrationsV1alphaClientCertificateResponse',
    'GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse',
    'GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse',
    'GoogleCloudIntegrationsV1alphaCoordinateResponse',
    'GoogleCloudIntegrationsV1alphaCredentialResponse',
    'GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse',
    'GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse',
    'GoogleCloudIntegrationsV1alphaEventParameterResponse',
    'GoogleCloudIntegrationsV1alphaFailurePolicyResponse',
    'GoogleCloudIntegrationsV1alphaIntParameterArrayResponse',
    'GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse',
    'GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueResponse',
    'GoogleCloudIntegrationsV1alphaIntegrationParameterResponse',
    'GoogleCloudIntegrationsV1alphaJwtResponse',
    'GoogleCloudIntegrationsV1alphaMockConfigResponse',
    'GoogleCloudIntegrationsV1alphaNextTaskResponse',
    'GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse',
    'GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse',
    'GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse',
    'GoogleCloudIntegrationsV1alphaOidcTokenResponse',
    'GoogleCloudIntegrationsV1alphaParameterMapEntryResponse',
    'GoogleCloudIntegrationsV1alphaParameterMapFieldResponse',
    'GoogleCloudIntegrationsV1alphaParameterMapResponse',
    'GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse',
    'GoogleCloudIntegrationsV1alphaStringParameterArrayResponse',
    'GoogleCloudIntegrationsV1alphaSuccessPolicyResponse',
    'GoogleCloudIntegrationsV1alphaTaskConfigResponse',
    'GoogleCloudIntegrationsV1alphaTestTaskConfigResponse',
    'GoogleCloudIntegrationsV1alphaTriggerConfigResponse',
    'GoogleCloudIntegrationsV1alphaUsernameAndPasswordResponse',
    'GoogleCloudIntegrationsV1alphaValueTypeResponse',
]

@pulumi.output_type
class EnterpriseCrmEventbusProtoAttributesResponse(dict):
    """
    Attributes are additional options that can be associated with each event property. For more information, see
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "isSearchable":
            suggest = "is_searchable"
        elif key == "logSettings":
            suggest = "log_settings"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "taskVisibility":
            suggest = "task_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoAttributesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoAttributesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoAttributesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 default_value: 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse',
                 is_required: bool,
                 is_searchable: bool,
                 log_settings: 'outputs.EnterpriseCrmEventbusProtoLogSettingsResponse',
                 read_only: bool,
                 searchable: str,
                 task_visibility: Sequence[str]):
        """
        Attributes are additional options that can be associated with each event property. For more information, see
        :param str data_type: Things like URL, Email, Currency, Timestamp (rather than string, int64...)
        :param 'EnterpriseCrmEventbusProtoValueTypeResponse' default_value: Used to define defaults.
        :param bool is_required: Required for event execution. The validation will be done by the event bus when the event is triggered.
        :param bool is_searchable: Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.
        :param 'EnterpriseCrmEventbusProtoLogSettingsResponse' log_settings: See
        :param bool read_only: Used to indicate if the ParameterEntry is a read only field or not.
        :param Sequence[str] task_visibility: List of tasks that can view this property, if empty then all.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "is_searchable", is_searchable)
        pulumi.set(__self__, "log_settings", log_settings)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "searchable", searchable)
        pulumi.set(__self__, "task_visibility", task_visibility)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Things like URL, Email, Currency, Timestamp (rather than string, int64...)
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse':
        """
        Used to define defaults.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        Required for event execution. The validation will be done by the event bus when the event is triggered.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="isSearchable")
    @_utilities.deprecated("""Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.""")
    def is_searchable(self) -> bool:
        """
        Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.
        """
        return pulumi.get(self, "is_searchable")

    @property
    @pulumi.getter(name="logSettings")
    def log_settings(self) -> 'outputs.EnterpriseCrmEventbusProtoLogSettingsResponse':
        """
        See
        """
        return pulumi.get(self, "log_settings")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Used to indicate if the ParameterEntry is a read only field or not.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def searchable(self) -> str:
        return pulumi.get(self, "searchable")

    @property
    @pulumi.getter(name="taskVisibility")
    def task_visibility(self) -> Sequence[str]:
        """
        List of tasks that can view this property, if empty then all.
        """
        return pulumi.get(self, "task_visibility")


@pulumi.output_type
class EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse(dict):
    """
    List of error enums for alerts.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumStrings":
            suggest = "enum_strings"
        elif key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enum_strings: Sequence[str],
                 filter_type: str):
        """
        List of error enums for alerts.
        """
        pulumi.set(__self__, "enum_strings", enum_strings)
        pulumi.set(__self__, "filter_type", filter_type)

    @property
    @pulumi.getter(name="enumStrings")
    def enum_strings(self) -> Sequence[str]:
        return pulumi.get(self, "enum_strings")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")


@pulumi.output_type
class EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse(dict):
    """
    The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
    """
    def __init__(__self__, *,
                 absolute: str,
                 percentage: int):
        """
        The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
        """
        pulumi.set(__self__, "absolute", absolute)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def absolute(self) -> str:
        return pulumi.get(self, "absolute")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        return pulumi.get(self, "percentage")


@pulumi.output_type
class EnterpriseCrmEventbusProtoBooleanParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanValues":
            suggest = "boolean_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoBooleanParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoBooleanParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoBooleanParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_values: Sequence[bool]):
        pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Sequence[bool]:
        return pulumi.get(self, "boolean_values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse(dict):
    """
    Cloud Scheduler Trigger configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronTab":
            suggest = "cron_tab"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "serviceAccountEmail":
            suggest = "service_account_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_tab: str,
                 error_message: str,
                 location: str,
                 service_account_email: str):
        """
        Cloud Scheduler Trigger configuration
        :param str cron_tab: The cron tab of cloud scheduler trigger.
        :param str error_message: Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        :param str location: The location where associated cloud scheduler job will be created
        :param str service_account_email: Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        pulumi.set(__self__, "cron_tab", cron_tab)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter(name="cronTab")
    def cron_tab(self) -> str:
        """
        The cron tab of cloud scheduler trigger.
        """
        return pulumi.get(self, "cron_tab")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location where associated cloud scheduler job will be created
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> str:
        """
        Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        return pulumi.get(self, "service_account_email")


@pulumi.output_type
class EnterpriseCrmEventbusProtoCombinedConditionResponse(dict):
    """
    This message recursively combines constituent conditions using logical AND.
    """
    def __init__(__self__, *,
                 conditions: Sequence['outputs.EnterpriseCrmEventbusProtoConditionResponse']):
        """
        This message recursively combines constituent conditions using logical AND.
        :param Sequence['EnterpriseCrmEventbusProtoConditionResponse'] conditions: A set of individual constituent conditions.
        """
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoConditionResponse']:
        """
        A set of individual constituent conditions.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class EnterpriseCrmEventbusProtoConditionResponse(dict):
    """
    Condition that uses `operator` to evaluate the key against the value.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventPropertyKey":
            suggest = "event_property_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoConditionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoConditionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoConditionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_property_key: str,
                 operator: str,
                 value: 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse'):
        """
        Condition that uses `operator` to evaluate the key against the value.
        :param str event_property_key: Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.
        :param str operator: Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
        :param 'EnterpriseCrmEventbusProtoValueTypeResponse' value: Value that's checked for the key.
        """
        pulumi.set(__self__, "event_property_key", event_property_key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="eventPropertyKey")
    def event_property_key(self) -> str:
        """
        Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.
        """
        return pulumi.get(self, "event_property_key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse':
        """
        Value that's checked for the key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoCoordinateResponse(dict):
    """
    Represents two-dimensional positions.
    """
    def __init__(__self__, *,
                 x: int,
                 y: int):
        """
        Represents two-dimensional positions.
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> int:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> int:
        return pulumi.get(self, "y")


@pulumi.output_type
class EnterpriseCrmEventbusProtoDoubleArrayResponse(dict):
    def __init__(__self__, *,
                 values: Sequence[float]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[float]:
        return pulumi.get(self, "values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoDoubleParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleValues":
            suggest = "double_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoDoubleParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoDoubleParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoDoubleParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_values: Sequence[float]):
        pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Sequence[float]:
        return pulumi.get(self, "double_values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoEventBusPropertiesResponse(dict):
    """
    LINT.IfChange This message is used for storing key value pair properties for each Event / Task in the EventBus.
    """
    def __init__(__self__, *,
                 properties: Sequence['outputs.EnterpriseCrmEventbusProtoPropertyEntryResponse']):
        """
        LINT.IfChange This message is used for storing key value pair properties for each Event / Task in the EventBus.
        :param Sequence['EnterpriseCrmEventbusProtoPropertyEntryResponse'] properties: An unordered list of property entries.
        """
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoPropertyEntryResponse']:
        """
        An unordered list of property entries.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class EnterpriseCrmEventbusProtoEventParametersResponse(dict):
    """
    LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
    """
    def __init__(__self__, *,
                 parameters: Sequence['outputs.EnterpriseCrmEventbusProtoParameterEntryResponse']):
        """
        LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
        :param Sequence['EnterpriseCrmEventbusProtoParameterEntryResponse'] parameters: Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.
        """
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoParameterEntryResponse']:
        """
        Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EnterpriseCrmEventbusProtoFailurePolicyResponse(dict):
    """
    Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalInSeconds":
            suggest = "interval_in_seconds"
        elif key == "maxNumRetries":
            suggest = "max_num_retries"
        elif key == "retryStrategy":
            suggest = "retry_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoFailurePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoFailurePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoFailurePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_in_seconds: str,
                 max_num_retries: int,
                 retry_strategy: str):
        """
        Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
        :param str interval_in_seconds: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
        :param int max_num_retries: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        :param str retry_strategy: Defines what happens to the task upon failure.
        """
        pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        pulumi.set(__self__, "max_num_retries", max_num_retries)
        pulumi.set(__self__, "retry_strategy", retry_strategy)

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> str:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
        """
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="maxNumRetries")
    def max_num_retries(self) -> int:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        """
        return pulumi.get(self, "max_num_retries")

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> str:
        """
        Defines what happens to the task upon failure.
        """
        return pulumi.get(self, "retry_strategy")


@pulumi.output_type
class EnterpriseCrmEventbusProtoIntArrayResponse(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoIntParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intValues":
            suggest = "int_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoIntParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoIntParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoIntParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 int_values: Sequence[str]):
        pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Sequence[str]:
        return pulumi.get(self, "int_values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoLogSettingsResponse(dict):
    """
    The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logFieldName":
            suggest = "log_field_name"
        elif key == "sanitizeOptions":
            suggest = "sanitize_options"
        elif key == "seedPeriod":
            suggest = "seed_period"
        elif key == "seedScope":
            suggest = "seed_scope"
        elif key == "shorteningLimits":
            suggest = "shortening_limits"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoLogSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoLogSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoLogSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_field_name: str,
                 sanitize_options: 'outputs.EnterpriseCrmLoggingGwsSanitizeOptionsResponse',
                 seed_period: str,
                 seed_scope: str,
                 shortening_limits: 'outputs.EnterpriseCrmLoggingGwsFieldLimitsResponse'):
        """
        The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
        :param str log_field_name: The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.
        :param 'EnterpriseCrmLoggingGwsSanitizeOptionsResponse' sanitize_options: Contains the scrubbing options, such as whether to scrub, obfuscate, etc.
        :param 'EnterpriseCrmLoggingGwsFieldLimitsResponse' shortening_limits: Contains the field limits for shortening, such as max string length and max array length.
        """
        pulumi.set(__self__, "log_field_name", log_field_name)
        pulumi.set(__self__, "sanitize_options", sanitize_options)
        pulumi.set(__self__, "seed_period", seed_period)
        pulumi.set(__self__, "seed_scope", seed_scope)
        pulumi.set(__self__, "shortening_limits", shortening_limits)

    @property
    @pulumi.getter(name="logFieldName")
    def log_field_name(self) -> str:
        """
        The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.
        """
        return pulumi.get(self, "log_field_name")

    @property
    @pulumi.getter(name="sanitizeOptions")
    def sanitize_options(self) -> 'outputs.EnterpriseCrmLoggingGwsSanitizeOptionsResponse':
        """
        Contains the scrubbing options, such as whether to scrub, obfuscate, etc.
        """
        return pulumi.get(self, "sanitize_options")

    @property
    @pulumi.getter(name="seedPeriod")
    def seed_period(self) -> str:
        return pulumi.get(self, "seed_period")

    @property
    @pulumi.getter(name="seedScope")
    def seed_scope(self) -> str:
        return pulumi.get(self, "seed_scope")

    @property
    @pulumi.getter(name="shorteningLimits")
    def shortening_limits(self) -> 'outputs.EnterpriseCrmLoggingGwsFieldLimitsResponse':
        """
        Contains the field limits for shortening, such as max string length and max array length.
        """
        return pulumi.get(self, "shortening_limits")


@pulumi.output_type
class EnterpriseCrmEventbusProtoNextTaskResponse(dict):
    """
    The task that is next in line to be executed, if the condition specified evaluated to true.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "combinedConditions":
            suggest = "combined_conditions"
        elif key == "taskConfigId":
            suggest = "task_config_id"
        elif key == "taskNumber":
            suggest = "task_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoNextTaskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoNextTaskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoNextTaskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 combined_conditions: Sequence['outputs.EnterpriseCrmEventbusProtoCombinedConditionResponse'],
                 condition: str,
                 description: str,
                 label: str,
                 task_config_id: str,
                 task_number: str):
        """
        The task that is next in line to be executed, if the condition specified evaluated to true.
        :param Sequence['EnterpriseCrmEventbusProtoCombinedConditionResponse'] combined_conditions: Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`
        :param str condition: Standard filter expression for this task to become an eligible next task.
        :param str description: User-provided description intended to give more business context about the next task edge or condition.
        :param str label: User-provided label that is attached to this edge in the UI.
        :param str task_config_id: ID of the next task.
        :param str task_number: Task number of the next task.
        """
        pulumi.set(__self__, "combined_conditions", combined_conditions)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "task_config_id", task_config_id)
        pulumi.set(__self__, "task_number", task_number)

    @property
    @pulumi.getter(name="combinedConditions")
    @_utilities.deprecated("""Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`""")
    def combined_conditions(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoCombinedConditionResponse']:
        """
        Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`
        """
        return pulumi.get(self, "combined_conditions")

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Standard filter expression for this task to become an eligible next task.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided description intended to give more business context about the next task edge or condition.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        User-provided label that is attached to this edge in the UI.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="taskConfigId")
    def task_config_id(self) -> str:
        """
        ID of the next task.
        """
        return pulumi.get(self, "task_config_id")

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> str:
        """
        Task number of the next task.
        """
        return pulumi.get(self, "task_number")


@pulumi.output_type
class EnterpriseCrmEventbusProtoNextTeardownTaskResponse(dict):
    """
    The teardown task that is next in line to be executed. We support only sequential execution of teardown tasks (i.e. no branching).
    """
    def __init__(__self__, *,
                 name: str):
        """
        The teardown task that is next in line to be executed. We support only sequential execution of teardown tasks (i.e. no branching).
        :param str name: Name of the next teardown task.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the next teardown task.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EnterpriseCrmEventbusProtoNodeIdentifierResponse(dict):
    """
    Represents a node identifier (type + id). Next highest id: 3
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elementIdentifier":
            suggest = "element_identifier"
        elif key == "elementType":
            suggest = "element_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoNodeIdentifierResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoNodeIdentifierResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoNodeIdentifierResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 element_identifier: str,
                 element_type: str):
        """
        Represents a node identifier (type + id). Next highest id: 3
        :param str element_identifier: Configuration of the edge.
        :param str element_type: Destination node where the edge ends. It can only be a task config.
        """
        pulumi.set(__self__, "element_identifier", element_identifier)
        pulumi.set(__self__, "element_type", element_type)

    @property
    @pulumi.getter(name="elementIdentifier")
    def element_identifier(self) -> str:
        """
        Configuration of the edge.
        """
        return pulumi.get(self, "element_identifier")

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> str:
        """
        Destination node where the edge ends. It can only be a task config.
        """
        return pulumi.get(self, "element_type")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "descriptivePhrase":
            suggest = "descriptive_phrase"
        elif key == "helpText":
            suggest = "help_text"
        elif key == "hideDefaultValue":
            suggest = "hide_default_value"
        elif key == "inputDisplayOption":
            suggest = "input_display_option"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "parameterNameOption":
            suggest = "parameter_name_option"
        elif key == "subSectionLabel":
            suggest = "sub_section_label"
        elif key == "uiPlaceholderText":
            suggest = "ui_placeholder_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 descriptive_phrase: str,
                 help_text: str,
                 hide_default_value: bool,
                 input_display_option: str,
                 is_hidden: bool,
                 label: str,
                 parameter_name_option: str,
                 sub_section_label: str,
                 ui_placeholder_text: str):
        """
        :param str descriptive_phrase: A short phrase to describe what this parameter contains.
        :param str help_text: Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.
        :param bool hide_default_value: Whether the default value is hidden in the UI.
        :param bool is_hidden: Whether this field is hidden in the UI.
        :param str label: A user-friendly label for the parameter.
        :param str sub_section_label: A user-friendly label for subSection under which the parameter will be displayed.
        :param str ui_placeholder_text: Placeholder text which will appear in the UI input form for this parameter.
        """
        pulumi.set(__self__, "descriptive_phrase", descriptive_phrase)
        pulumi.set(__self__, "help_text", help_text)
        pulumi.set(__self__, "hide_default_value", hide_default_value)
        pulumi.set(__self__, "input_display_option", input_display_option)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "parameter_name_option", parameter_name_option)
        pulumi.set(__self__, "sub_section_label", sub_section_label)
        pulumi.set(__self__, "ui_placeholder_text", ui_placeholder_text)

    @property
    @pulumi.getter(name="descriptivePhrase")
    def descriptive_phrase(self) -> str:
        """
        A short phrase to describe what this parameter contains.
        """
        return pulumi.get(self, "descriptive_phrase")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> str:
        """
        Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter(name="hideDefaultValue")
    def hide_default_value(self) -> bool:
        """
        Whether the default value is hidden in the UI.
        """
        return pulumi.get(self, "hide_default_value")

    @property
    @pulumi.getter(name="inputDisplayOption")
    def input_display_option(self) -> str:
        return pulumi.get(self, "input_display_option")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> bool:
        """
        Whether this field is hidden in the UI.
        """
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A user-friendly label for the parameter.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="parameterNameOption")
    def parameter_name_option(self) -> str:
        return pulumi.get(self, "parameter_name_option")

    @property
    @pulumi.getter(name="subSectionLabel")
    def sub_section_label(self) -> str:
        """
        A user-friendly label for subSection under which the parameter will be displayed.
        """
        return pulumi.get(self, "sub_section_label")

    @property
    @pulumi.getter(name="uiPlaceholderText")
    def ui_placeholder_text(self) -> str:
        """
        Placeholder text which will appear in the UI input form for this parameter.
        """
        return pulumi.get(self, "ui_placeholder_text")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullName":
            suggest = "full_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_name: str,
                 path: str):
        """
        :param str full_name: The fully-qualified proto name. This message, for example, would be "enterprise.crm.eventbus.proto.ParamSpecEntry.ProtoDefinition".
        :param str path: Path to the proto file that contains the message type's definition.
        """
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        """
        The fully-qualified proto name. This message, for example, would be "enterprise.crm.eventbus.proto.ParamSpecEntry.ProtoDefinition".
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the proto file that contains the message type's definition.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeResponse(dict):
    """
    Range used to validate doubles and floats.
    """
    def __init__(__self__, *,
                 max: float,
                 min: float):
        """
        Range used to validate doubles and floats.
        :param float max: The inclusive maximum of the acceptable range.
        :param float min: The inclusive minimum of the acceptable range.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        The inclusive maximum of the acceptable range.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        The inclusive minimum of the acceptable range.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeResponse(dict):
    """
    Range used to validate longs and ints.
    """
    def __init__(__self__, *,
                 max: str,
                 min: str):
        """
        Range used to validate longs and ints.
        :param str max: The inclusive maximum of the acceptable range.
        :param str min: The inclusive minimum of the acceptable range.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> str:
        """
        The inclusive maximum of the acceptable range.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        """
        The inclusive minimum of the acceptable range.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleRange":
            suggest = "double_range"
        elif key == "intRange":
            suggest = "int_range"
        elif key == "stringRegex":
            suggest = "string_regex"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_range: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeResponse',
                 int_range: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeResponse',
                 string_regex: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexResponse'):
        pulumi.set(__self__, "double_range", double_range)
        pulumi.set(__self__, "int_range", int_range)
        pulumi.set(__self__, "string_regex", string_regex)

    @property
    @pulumi.getter(name="doubleRange")
    def double_range(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeResponse':
        return pulumi.get(self, "double_range")

    @property
    @pulumi.getter(name="intRange")
    def int_range(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeResponse':
        return pulumi.get(self, "int_range")

    @property
    @pulumi.getter(name="stringRegex")
    def string_regex(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexResponse':
        return pulumi.get(self, "string_regex")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexResponse(dict):
    """
    Rule used to validate strings.
    """
    def __init__(__self__, *,
                 exclusive: bool,
                 regex: str):
        """
        Rule used to validate strings.
        :param bool exclusive: Whether the regex matcher is applied exclusively (if true, matching values will be rejected).
        :param str regex: The regex applied to the input value(s).
        """
        pulumi.set(__self__, "exclusive", exclusive)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exclusive(self) -> bool:
        """
        Whether the regex matcher is applied exclusively (if true, matching values will be rejected).
        """
        return pulumi.get(self, "exclusive")

    @property
    @pulumi.getter
    def regex(self) -> str:
        """
        The regex applied to the input value(s).
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParameterEntryResponse(dict):
    """
    Key-value pair of EventBus parameters.
    """
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.EnterpriseCrmEventbusProtoParameterValueTypeResponse'):
        """
        Key-value pair of EventBus parameters.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param 'EnterpriseCrmEventbusProtoParameterValueTypeResponse' value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.EnterpriseCrmEventbusProtoParameterValueTypeResponse':
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoParameterValueTypeResponse(dict):
    """
    LINT.IfChange To support various types of parameter values. Next available id: 14
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanArray":
            suggest = "boolean_array"
        elif key == "booleanValue":
            suggest = "boolean_value"
        elif key == "doubleArray":
            suggest = "double_array"
        elif key == "doubleValue":
            suggest = "double_value"
        elif key == "intArray":
            suggest = "int_array"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "protoArray":
            suggest = "proto_array"
        elif key == "protoValue":
            suggest = "proto_value"
        elif key == "serializedObjectValue":
            suggest = "serialized_object_value"
        elif key == "stringArray":
            suggest = "string_array"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoParameterValueTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoParameterValueTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoParameterValueTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_array: 'outputs.EnterpriseCrmEventbusProtoBooleanParameterArrayResponse',
                 boolean_value: bool,
                 double_array: 'outputs.EnterpriseCrmEventbusProtoDoubleParameterArrayResponse',
                 double_value: float,
                 int_array: 'outputs.EnterpriseCrmEventbusProtoIntParameterArrayResponse',
                 int_value: str,
                 proto_array: 'outputs.EnterpriseCrmEventbusProtoProtoParameterArrayResponse',
                 proto_value: Mapping[str, Any],
                 serialized_object_value: 'outputs.EnterpriseCrmEventbusProtoSerializedObjectParameterResponse',
                 string_array: 'outputs.EnterpriseCrmEventbusProtoStringParameterArrayResponse',
                 string_value: str):
        """
        LINT.IfChange To support various types of parameter values. Next available id: 14
        """
        pulumi.set(__self__, "boolean_array", boolean_array)
        pulumi.set(__self__, "boolean_value", boolean_value)
        pulumi.set(__self__, "double_array", double_array)
        pulumi.set(__self__, "double_value", double_value)
        pulumi.set(__self__, "int_array", int_array)
        pulumi.set(__self__, "int_value", int_value)
        pulumi.set(__self__, "proto_array", proto_array)
        pulumi.set(__self__, "proto_value", proto_value)
        pulumi.set(__self__, "serialized_object_value", serialized_object_value)
        pulumi.set(__self__, "string_array", string_array)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> 'outputs.EnterpriseCrmEventbusProtoBooleanParameterArrayResponse':
        return pulumi.get(self, "boolean_array")

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> bool:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> 'outputs.EnterpriseCrmEventbusProtoDoubleParameterArrayResponse':
        return pulumi.get(self, "double_array")

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> float:
        return pulumi.get(self, "double_value")

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> 'outputs.EnterpriseCrmEventbusProtoIntParameterArrayResponse':
        return pulumi.get(self, "int_array")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> str:
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="protoArray")
    def proto_array(self) -> 'outputs.EnterpriseCrmEventbusProtoProtoParameterArrayResponse':
        return pulumi.get(self, "proto_array")

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Mapping[str, Any]:
        return pulumi.get(self, "proto_value")

    @property
    @pulumi.getter(name="serializedObjectValue")
    def serialized_object_value(self) -> 'outputs.EnterpriseCrmEventbusProtoSerializedObjectParameterResponse':
        return pulumi.get(self, "serialized_object_value")

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> 'outputs.EnterpriseCrmEventbusProtoStringParameterArrayResponse':
        return pulumi.get(self, "string_array")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        return pulumi.get(self, "string_value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoPropertyEntryResponse(dict):
    """
    Key-value pair of EventBus property.
    """
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse'):
        """
        Key-value pair of EventBus property.
        :param str key: Key is used to retrieve the corresponding property value. This should be unique for a given fired event. The Tasks should be aware of the keys used while firing the events for them to be able to retrieve the values.
        :param 'EnterpriseCrmEventbusProtoValueTypeResponse' value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding property value. This should be unique for a given fired event. The Tasks should be aware of the keys used while firing the events for them to be able to retrieve the values.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.EnterpriseCrmEventbusProtoValueTypeResponse':
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoProtoParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protoValues":
            suggest = "proto_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoProtoParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoProtoParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoProtoParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proto_values: Sequence[Mapping[str, Any]]):
        pulumi.set(__self__, "proto_values", proto_values)

    @property
    @pulumi.getter(name="protoValues")
    def proto_values(self) -> Sequence[Mapping[str, Any]]:
        return pulumi.get(self, "proto_values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoSerializedObjectParameterResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectValue":
            suggest = "object_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoSerializedObjectParameterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoSerializedObjectParameterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoSerializedObjectParameterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_value: str):
        pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> str:
        return pulumi.get(self, "object_value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoStringArrayResponse(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoStringParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValues":
            suggest = "string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoStringParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoStringParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoStringParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_values: Sequence[str]):
        pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Sequence[str]:
        return pulumi.get(self, "string_values")


@pulumi.output_type
class EnterpriseCrmEventbusProtoSuccessPolicyResponse(dict):
    """
    Policy that dictates the behavior for the task after it completes successfully.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finalState":
            suggest = "final_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoSuccessPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoSuccessPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoSuccessPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 final_state: str):
        """
        Policy that dictates the behavior for the task after it completes successfully.
        :param str final_state: State to which the execution snapshot status will be set if the task succeeds.
        """
        pulumi.set(__self__, "final_state", final_state)

    @property
    @pulumi.getter(name="finalState")
    def final_state(self) -> str:
        """
        State to which the execution snapshot status will be set if the task succeeds.
        """
        return pulumi.get(self, "final_state")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTaskAlertConfigResponse(dict):
    """
    Message to be used to configure alerting in the {@code TaskConfig} protos for tasks in an event.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationPeriod":
            suggest = "aggregation_period"
        elif key == "alertDisabled":
            suggest = "alert_disabled"
        elif key == "alertName":
            suggest = "alert_name"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "durationThresholdMs":
            suggest = "duration_threshold_ms"
        elif key == "errorEnumList":
            suggest = "error_enum_list"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "numAggregationPeriods":
            suggest = "num_aggregation_periods"
        elif key == "onlyFinalAttempt":
            suggest = "only_final_attempt"
        elif key == "playbookUrl":
            suggest = "playbook_url"
        elif key == "thresholdType":
            suggest = "threshold_type"
        elif key == "thresholdValue":
            suggest = "threshold_value"
        elif key == "warningEnumList":
            suggest = "warning_enum_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTaskAlertConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTaskAlertConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTaskAlertConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_period: str,
                 alert_disabled: bool,
                 alert_name: str,
                 client_id: str,
                 duration_threshold_ms: str,
                 error_enum_list: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse',
                 metric_type: str,
                 num_aggregation_periods: int,
                 only_final_attempt: bool,
                 playbook_url: str,
                 threshold_type: str,
                 threshold_value: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse',
                 warning_enum_list: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse'):
        """
        Message to be used to configure alerting in the {@code TaskConfig} protos for tasks in an event.
        :param str aggregation_period: The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week).
        :param bool alert_disabled: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        :param str alert_name: A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique in within the scope of the containing workflow.
        :param str client_id: Client associated with this alert configuration. Must be a client enabled in one of the containing workflow's triggers.
        :param str duration_threshold_ms: Should be specified only for TASK_AVERAGE_DURATION and TASK_PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param int num_aggregation_periods: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param bool only_final_attempt: Only count final task attempts, not retries.
        :param str playbook_url: Link to a playbook for resolving the issue that triggered this alert.
        :param str threshold_type: The threshold type for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param 'EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse' threshold_value: The metric value, above or below which the alert should be triggered.
        """
        pulumi.set(__self__, "aggregation_period", aggregation_period)
        pulumi.set(__self__, "alert_disabled", alert_disabled)
        pulumi.set(__self__, "alert_name", alert_name)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "duration_threshold_ms", duration_threshold_ms)
        pulumi.set(__self__, "error_enum_list", error_enum_list)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "num_aggregation_periods", num_aggregation_periods)
        pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        pulumi.set(__self__, "playbook_url", playbook_url)
        pulumi.set(__self__, "threshold_type", threshold_type)
        pulumi.set(__self__, "threshold_value", threshold_value)
        pulumi.set(__self__, "warning_enum_list", warning_enum_list)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> str:
        """
        The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week).
        """
        return pulumi.get(self, "aggregation_period")

    @property
    @pulumi.getter(name="alertDisabled")
    def alert_disabled(self) -> bool:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        """
        return pulumi.get(self, "alert_disabled")

    @property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> str:
        """
        A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique in within the scope of the containing workflow.
        """
        return pulumi.get(self, "alert_name")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Client associated with this alert configuration. Must be a client enabled in one of the containing workflow's triggers.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="durationThresholdMs")
    def duration_threshold_ms(self) -> str:
        """
        Should be specified only for TASK_AVERAGE_DURATION and TASK_PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold_ms")

    @property
    @pulumi.getter(name="errorEnumList")
    def error_enum_list(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse':
        return pulumi.get(self, "error_enum_list")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="numAggregationPeriods")
    def num_aggregation_periods(self) -> int:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "num_aggregation_periods")

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> bool:
        """
        Only count final task attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @property
    @pulumi.getter(name="playbookUrl")
    def playbook_url(self) -> str:
        """
        Link to a playbook for resolving the issue that triggered this alert.
        """
        return pulumi.get(self, "playbook_url")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> str:
        """
        The threshold type for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse':
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")

    @property
    @pulumi.getter(name="warningEnumList")
    def warning_enum_list(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse':
        return pulumi.get(self, "warning_enum_list")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTaskMetadataAdminResponse(dict):
    """
    Admins are owners of a Task, and have all permissions on a particular task identified by the task name. By default, Eventbus periodically scans all task metadata and syncs (adds) any new admins defined here to Zanzibar.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "googleGroupEmail":
            suggest = "google_group_email"
        elif key == "userEmail":
            suggest = "user_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTaskMetadataAdminResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTaskMetadataAdminResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTaskMetadataAdminResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 google_group_email: str,
                 user_email: str):
        """
        Admins are owners of a Task, and have all permissions on a particular task identified by the task name. By default, Eventbus periodically scans all task metadata and syncs (adds) any new admins defined here to Zanzibar.
        """
        pulumi.set(__self__, "google_group_email", google_group_email)
        pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="googleGroupEmail")
    def google_group_email(self) -> str:
        return pulumi.get(self, "google_group_email")

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> str:
        return pulumi.get(self, "user_email")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTaskMetadataResponse(dict):
    """
    TaskMetadata are attributes that are associated to every common Task we have.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeTaskName":
            suggest = "active_task_name"
        elif key == "codeSearchLink":
            suggest = "code_search_link"
        elif key == "defaultJsonValidationOption":
            suggest = "default_json_validation_option"
        elif key == "defaultSpec":
            suggest = "default_spec"
        elif key == "descriptiveName":
            suggest = "descriptive_name"
        elif key == "docMarkdown":
            suggest = "doc_markdown"
        elif key == "externalCategory":
            suggest = "external_category"
        elif key == "externalCategorySequence":
            suggest = "external_category_sequence"
        elif key == "externalDocHtml":
            suggest = "external_doc_html"
        elif key == "externalDocLink":
            suggest = "external_doc_link"
        elif key == "externalDocMarkdown":
            suggest = "external_doc_markdown"
        elif key == "g3DocLink":
            suggest = "g3_doc_link"
        elif key == "iconLink":
            suggest = "icon_link"
        elif key == "isDeprecated":
            suggest = "is_deprecated"
        elif key == "standaloneExternalDocHtml":
            suggest = "standalone_external_doc_html"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTaskMetadataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTaskMetadataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTaskMetadataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_task_name: str,
                 admins: Sequence['outputs.EnterpriseCrmEventbusProtoTaskMetadataAdminResponse'],
                 category: str,
                 code_search_link: str,
                 default_json_validation_option: str,
                 default_spec: str,
                 description: str,
                 descriptive_name: str,
                 doc_markdown: str,
                 external_category: str,
                 external_category_sequence: int,
                 external_doc_html: str,
                 external_doc_link: str,
                 external_doc_markdown: str,
                 g3_doc_link: str,
                 icon_link: str,
                 is_deprecated: bool,
                 name: str,
                 standalone_external_doc_html: str,
                 status: str,
                 system: str,
                 tags: Sequence[str]):
        """
        TaskMetadata are attributes that are associated to every common Task we have.
        :param str active_task_name: The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
        :param str code_search_link: The Code Search link to the Task Java file.
        :param str default_json_validation_option: Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
        :param str default_spec: Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
        :param str description: In a few sentences, describe the purpose and usage of the task.
        :param str descriptive_name: The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
        :param str doc_markdown: Snippet of markdown documentation to embed in the RHP for this task.
        :param int external_category_sequence: Sequence with which the task in specific category to be displayed in task discovery panel for external users.
        :param str external_doc_html: External-facing documention embedded in the RHP for this task.
        :param str external_doc_link: Doc link for external-facing documentation (separate from g3doc).
        :param str external_doc_markdown: DEPRECATED: Use external_doc_html.
        :param str g3_doc_link: URL to the associated G3 Doc for the task if available
        :param str icon_link: URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.
        :param bool is_deprecated: The deprecation status of the current task. Default value is false;
        :param str name: The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
        :param str standalone_external_doc_html: External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
        :param str status: Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
        :param Sequence[str] tags: A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
        """
        pulumi.set(__self__, "active_task_name", active_task_name)
        pulumi.set(__self__, "admins", admins)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "code_search_link", code_search_link)
        pulumi.set(__self__, "default_json_validation_option", default_json_validation_option)
        pulumi.set(__self__, "default_spec", default_spec)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "descriptive_name", descriptive_name)
        pulumi.set(__self__, "doc_markdown", doc_markdown)
        pulumi.set(__self__, "external_category", external_category)
        pulumi.set(__self__, "external_category_sequence", external_category_sequence)
        pulumi.set(__self__, "external_doc_html", external_doc_html)
        pulumi.set(__self__, "external_doc_link", external_doc_link)
        pulumi.set(__self__, "external_doc_markdown", external_doc_markdown)
        pulumi.set(__self__, "g3_doc_link", g3_doc_link)
        pulumi.set(__self__, "icon_link", icon_link)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "standalone_external_doc_html", standalone_external_doc_html)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system", system)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="activeTaskName")
    def active_task_name(self) -> str:
        """
        The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
        """
        return pulumi.get(self, "active_task_name")

    @property
    @pulumi.getter
    def admins(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoTaskMetadataAdminResponse']:
        return pulumi.get(self, "admins")

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="codeSearchLink")
    def code_search_link(self) -> str:
        """
        The Code Search link to the Task Java file.
        """
        return pulumi.get(self, "code_search_link")

    @property
    @pulumi.getter(name="defaultJsonValidationOption")
    def default_json_validation_option(self) -> str:
        """
        Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
        """
        return pulumi.get(self, "default_json_validation_option")

    @property
    @pulumi.getter(name="defaultSpec")
    def default_spec(self) -> str:
        """
        Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
        """
        return pulumi.get(self, "default_spec")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        In a few sentences, describe the purpose and usage of the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="descriptiveName")
    def descriptive_name(self) -> str:
        """
        The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
        """
        return pulumi.get(self, "descriptive_name")

    @property
    @pulumi.getter(name="docMarkdown")
    def doc_markdown(self) -> str:
        """
        Snippet of markdown documentation to embed in the RHP for this task.
        """
        return pulumi.get(self, "doc_markdown")

    @property
    @pulumi.getter(name="externalCategory")
    def external_category(self) -> str:
        return pulumi.get(self, "external_category")

    @property
    @pulumi.getter(name="externalCategorySequence")
    def external_category_sequence(self) -> int:
        """
        Sequence with which the task in specific category to be displayed in task discovery panel for external users.
        """
        return pulumi.get(self, "external_category_sequence")

    @property
    @pulumi.getter(name="externalDocHtml")
    def external_doc_html(self) -> str:
        """
        External-facing documention embedded in the RHP for this task.
        """
        return pulumi.get(self, "external_doc_html")

    @property
    @pulumi.getter(name="externalDocLink")
    def external_doc_link(self) -> str:
        """
        Doc link for external-facing documentation (separate from g3doc).
        """
        return pulumi.get(self, "external_doc_link")

    @property
    @pulumi.getter(name="externalDocMarkdown")
    @_utilities.deprecated("""DEPRECATED: Use external_doc_html.""")
    def external_doc_markdown(self) -> str:
        """
        DEPRECATED: Use external_doc_html.
        """
        return pulumi.get(self, "external_doc_markdown")

    @property
    @pulumi.getter(name="g3DocLink")
    def g3_doc_link(self) -> str:
        """
        URL to the associated G3 Doc for the task if available
        """
        return pulumi.get(self, "g3_doc_link")

    @property
    @pulumi.getter(name="iconLink")
    def icon_link(self) -> str:
        """
        URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.
        """
        return pulumi.get(self, "icon_link")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        The deprecation status of the current task. Default value is false;
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="standaloneExternalDocHtml")
    def standalone_external_doc_html(self) -> str:
        """
        External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
        """
        return pulumi.get(self, "standalone_external_doc_html")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def system(self) -> str:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTaskUiConfigResponse(dict):
    """
    Task authors would use this type to configure the UI for a particular task by specifying what UI config modules should be included to compose the UI. Learn more about config module framework:
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskUiModuleConfigs":
            suggest = "task_ui_module_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTaskUiConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTaskUiConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTaskUiConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 task_ui_module_configs: Sequence['outputs.EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse']):
        """
        Task authors would use this type to configure the UI for a particular task by specifying what UI config modules should be included to compose the UI. Learn more about config module framework:
        :param Sequence['EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse'] task_ui_module_configs: Configurations of included config modules.
        """
        pulumi.set(__self__, "task_ui_module_configs", task_ui_module_configs)

    @property
    @pulumi.getter(name="taskUiModuleConfigs")
    def task_ui_module_configs(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse']:
        """
        Configurations of included config modules.
        """
        return pulumi.get(self, "task_ui_module_configs")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse(dict):
    """
    Task author would use this type to configure a config module.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTaskUiModuleConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_id: str):
        """
        Task author would use this type to configure a config module.
        :param str module_id: ID of the config module.
        """
        pulumi.set(__self__, "module_id", module_id)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> str:
        """
        ID of the config module.
        """
        return pulumi.get(self, "module_id")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTeardownResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teardownTaskConfigs":
            suggest = "teardown_task_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTeardownResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTeardownResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTeardownResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 teardown_task_configs: Sequence['outputs.EnterpriseCrmEventbusProtoTeardownTaskConfigResponse']):
        """
        :param Sequence['EnterpriseCrmEventbusProtoTeardownTaskConfigResponse'] teardown_task_configs: Required.
        """
        pulumi.set(__self__, "teardown_task_configs", teardown_task_configs)

    @property
    @pulumi.getter(name="teardownTaskConfigs")
    def teardown_task_configs(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoTeardownTaskConfigResponse']:
        """
        Required.
        """
        return pulumi.get(self, "teardown_task_configs")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTeardownTaskConfigResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creatorEmail":
            suggest = "creator_email"
        elif key == "nextTeardownTask":
            suggest = "next_teardown_task"
        elif key == "teardownTaskImplementationClassName":
            suggest = "teardown_task_implementation_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTeardownTaskConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTeardownTaskConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTeardownTaskConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creator_email: str,
                 name: str,
                 next_teardown_task: 'outputs.EnterpriseCrmEventbusProtoNextTeardownTaskResponse',
                 parameters: 'outputs.EnterpriseCrmEventbusProtoEventParametersResponse',
                 properties: 'outputs.EnterpriseCrmEventbusProtoEventBusPropertiesResponse',
                 teardown_task_implementation_class_name: str):
        """
        :param str creator_email: The creator's email address.
        :param str name: Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.
        :param 'EnterpriseCrmEventbusProtoEventParametersResponse' parameters: The parameters the user can pass to this task.
        :param str teardown_task_implementation_class_name: Implementation class name.
        """
        pulumi.set(__self__, "creator_email", creator_email)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_teardown_task", next_teardown_task)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "teardown_task_implementation_class_name", teardown_task_implementation_class_name)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> str:
        """
        The creator's email address.
        """
        return pulumi.get(self, "creator_email")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextTeardownTask")
    def next_teardown_task(self) -> 'outputs.EnterpriseCrmEventbusProtoNextTeardownTaskResponse':
        return pulumi.get(self, "next_teardown_task")

    @property
    @pulumi.getter
    def parameters(self) -> 'outputs.EnterpriseCrmEventbusProtoEventParametersResponse':
        """
        The parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.EnterpriseCrmEventbusProtoEventBusPropertiesResponse':
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="teardownTaskImplementationClassName")
    def teardown_task_implementation_class_name(self) -> str:
        """
        Implementation class name.
        """
        return pulumi.get(self, "teardown_task_implementation_class_name")


@pulumi.output_type
class EnterpriseCrmEventbusProtoTriggerCriteriaResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerCriteriaTaskImplementationClassName":
            suggest = "trigger_criteria_task_implementation_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoTriggerCriteriaResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoTriggerCriteriaResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoTriggerCriteriaResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 parameters: 'outputs.EnterpriseCrmEventbusProtoEventParametersResponse',
                 trigger_criteria_task_implementation_class_name: str):
        """
        :param str condition: Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly.
        :param 'EnterpriseCrmEventbusProtoEventParametersResponse' parameters: Optional. To be used in TaskConfig for the implementation class.
        :param str trigger_criteria_task_implementation_class_name: Optional. Implementation class name. The class should implement the “TypedTask” interface.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "trigger_criteria_task_implementation_class_name", trigger_criteria_task_implementation_class_name)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def parameters(self) -> 'outputs.EnterpriseCrmEventbusProtoEventParametersResponse':
        """
        Optional. To be used in TaskConfig for the implementation class.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="triggerCriteriaTaskImplementationClassName")
    def trigger_criteria_task_implementation_class_name(self) -> str:
        """
        Optional. Implementation class name. The class should implement the “TypedTask” interface.
        """
        return pulumi.get(self, "trigger_criteria_task_implementation_class_name")


@pulumi.output_type
class EnterpriseCrmEventbusProtoValueTypeResponse(dict):
    """
    Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanValue":
            suggest = "boolean_value"
        elif key == "doubleArray":
            suggest = "double_array"
        elif key == "doubleValue":
            suggest = "double_value"
        elif key == "intArray":
            suggest = "int_array"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "protoValue":
            suggest = "proto_value"
        elif key == "stringArray":
            suggest = "string_array"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoValueTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoValueTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoValueTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_value: bool,
                 double_array: 'outputs.EnterpriseCrmEventbusProtoDoubleArrayResponse',
                 double_value: float,
                 int_array: 'outputs.EnterpriseCrmEventbusProtoIntArrayResponse',
                 int_value: str,
                 proto_value: Mapping[str, Any],
                 string_array: 'outputs.EnterpriseCrmEventbusProtoStringArrayResponse',
                 string_value: str):
        """
        Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
        """
        pulumi.set(__self__, "boolean_value", boolean_value)
        pulumi.set(__self__, "double_array", double_array)
        pulumi.set(__self__, "double_value", double_value)
        pulumi.set(__self__, "int_array", int_array)
        pulumi.set(__self__, "int_value", int_value)
        pulumi.set(__self__, "proto_value", proto_value)
        pulumi.set(__self__, "string_array", string_array)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> bool:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> 'outputs.EnterpriseCrmEventbusProtoDoubleArrayResponse':
        return pulumi.get(self, "double_array")

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> float:
        return pulumi.get(self, "double_value")

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> 'outputs.EnterpriseCrmEventbusProtoIntArrayResponse':
        return pulumi.get(self, "int_array")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> str:
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Mapping[str, Any]:
        return pulumi.get(self, "proto_value")

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> 'outputs.EnterpriseCrmEventbusProtoStringArrayResponse':
        return pulumi.get(self, "string_array")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        return pulumi.get(self, "string_value")


@pulumi.output_type
class EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse(dict):
    """
    Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationPeriod":
            suggest = "aggregation_period"
        elif key == "alertDisabled":
            suggest = "alert_disabled"
        elif key == "alertName":
            suggest = "alert_name"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "durationThresholdMs":
            suggest = "duration_threshold_ms"
        elif key == "errorEnumList":
            suggest = "error_enum_list"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "numAggregationPeriods":
            suggest = "num_aggregation_periods"
        elif key == "onlyFinalAttempt":
            suggest = "only_final_attempt"
        elif key == "playbookUrl":
            suggest = "playbook_url"
        elif key == "thresholdType":
            suggest = "threshold_type"
        elif key == "thresholdValue":
            suggest = "threshold_value"
        elif key == "warningEnumList":
            suggest = "warning_enum_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_period: str,
                 alert_disabled: bool,
                 alert_name: str,
                 client_id: str,
                 duration_threshold_ms: str,
                 error_enum_list: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse',
                 metric_type: str,
                 num_aggregation_periods: int,
                 only_final_attempt: bool,
                 playbook_url: str,
                 threshold_type: str,
                 threshold_value: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse',
                 warning_enum_list: 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse'):
        """
        Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
        :param str aggregation_period: For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        :param bool alert_disabled: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        :param str alert_name: A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the workflow.
        :param str client_id: Client associated with this alert configuration.
        :param str duration_threshold_ms: Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param int num_aggregation_periods: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param bool only_final_attempt: For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        :param str playbook_url: Link to a playbook for resolving the issue that triggered this alert.
        :param str threshold_type: The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param 'EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse' threshold_value: The metric value, above or below which the alert should be triggered.
        """
        pulumi.set(__self__, "aggregation_period", aggregation_period)
        pulumi.set(__self__, "alert_disabled", alert_disabled)
        pulumi.set(__self__, "alert_name", alert_name)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "duration_threshold_ms", duration_threshold_ms)
        pulumi.set(__self__, "error_enum_list", error_enum_list)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "num_aggregation_periods", num_aggregation_periods)
        pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        pulumi.set(__self__, "playbook_url", playbook_url)
        pulumi.set(__self__, "threshold_type", threshold_type)
        pulumi.set(__self__, "threshold_value", threshold_value)
        pulumi.set(__self__, "warning_enum_list", warning_enum_list)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> str:
        """
        For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        """
        return pulumi.get(self, "aggregation_period")

    @property
    @pulumi.getter(name="alertDisabled")
    def alert_disabled(self) -> bool:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        """
        return pulumi.get(self, "alert_disabled")

    @property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> str:
        """
        A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the workflow.
        """
        return pulumi.get(self, "alert_name")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Client associated with this alert configuration.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="durationThresholdMs")
    def duration_threshold_ms(self) -> str:
        """
        Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold_ms")

    @property
    @pulumi.getter(name="errorEnumList")
    def error_enum_list(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse':
        return pulumi.get(self, "error_enum_list")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="numAggregationPeriods")
    def num_aggregation_periods(self) -> int:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "num_aggregation_periods")

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> bool:
        """
        For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @property
    @pulumi.getter(name="playbookUrl")
    def playbook_url(self) -> str:
        """
        Link to a playbook for resolving the issue that triggered this alert.
        """
        return pulumi.get(self, "playbook_url")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> str:
        """
        The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueResponse':
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")

    @property
    @pulumi.getter(name="warningEnumList")
    def warning_enum_list(self) -> 'outputs.EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListResponse':
        return pulumi.get(self, "warning_enum_list")


@pulumi.output_type
class EnterpriseCrmEventbusStatsDimensionsResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "enumFilterType":
            suggest = "enum_filter_type"
        elif key == "errorEnumString":
            suggest = "error_enum_string"
        elif key == "retryAttempt":
            suggest = "retry_attempt"
        elif key == "taskName":
            suggest = "task_name"
        elif key == "taskNumber":
            suggest = "task_number"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "warningEnumString":
            suggest = "warning_enum_string"
        elif key == "workflowId":
            suggest = "workflow_id"
        elif key == "workflowName":
            suggest = "workflow_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusStatsDimensionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusStatsDimensionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusStatsDimensionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 enum_filter_type: str,
                 error_enum_string: str,
                 retry_attempt: str,
                 task_name: str,
                 task_number: str,
                 trigger_id: str,
                 warning_enum_string: str,
                 workflow_id: str,
                 workflow_name: str):
        """
        :param str enum_filter_type: Whether to include or exclude the enums matching the regex.
        :param str trigger_id: Stats have been or will be aggregated on set fields for any semantically-meaningful combination.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "enum_filter_type", enum_filter_type)
        pulumi.set(__self__, "error_enum_string", error_enum_string)
        pulumi.set(__self__, "retry_attempt", retry_attempt)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_number", task_number)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "warning_enum_string", warning_enum_string)
        pulumi.set(__self__, "workflow_id", workflow_id)
        pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="enumFilterType")
    def enum_filter_type(self) -> str:
        """
        Whether to include or exclude the enums matching the regex.
        """
        return pulumi.get(self, "enum_filter_type")

    @property
    @pulumi.getter(name="errorEnumString")
    def error_enum_string(self) -> str:
        return pulumi.get(self, "error_enum_string")

    @property
    @pulumi.getter(name="retryAttempt")
    def retry_attempt(self) -> str:
        return pulumi.get(self, "retry_attempt")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> str:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> str:
        return pulumi.get(self, "task_number")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> str:
        """
        Stats have been or will be aggregated on set fields for any semantically-meaningful combination.
        """
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="warningEnumString")
    def warning_enum_string(self) -> str:
        return pulumi.get(self, "warning_enum_string")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> str:
        return pulumi.get(self, "workflow_id")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> str:
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class EnterpriseCrmEventbusStatsResponse(dict):
    """
    Stats for the requested dimensions: QPS, duration, and error/warning rate
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInSeconds":
            suggest = "duration_in_seconds"
        elif key == "errorRate":
            suggest = "error_rate"
        elif key == "warningRate":
            suggest = "warning_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmEventbusStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmEventbusStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmEventbusStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: 'outputs.EnterpriseCrmEventbusStatsDimensionsResponse',
                 duration_in_seconds: float,
                 error_rate: float,
                 qps: float,
                 warning_rate: float):
        """
        Stats for the requested dimensions: QPS, duration, and error/warning rate
        :param 'EnterpriseCrmEventbusStatsDimensionsResponse' dimensions: Dimensions that these stats have been aggregated on.
        :param float duration_in_seconds: Average duration in seconds.
        :param float error_rate: Average error rate.
        :param float qps: Queries per second.
        :param float warning_rate: Average warning rate.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        pulumi.set(__self__, "error_rate", error_rate)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "warning_rate", warning_rate)

    @property
    @pulumi.getter
    def dimensions(self) -> 'outputs.EnterpriseCrmEventbusStatsDimensionsResponse':
        """
        Dimensions that these stats have been aggregated on.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> float:
        """
        Average duration in seconds.
        """
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> float:
        """
        Average error rate.
        """
        return pulumi.get(self, "error_rate")

    @property
    @pulumi.getter
    def qps(self) -> float:
        """
        Queries per second.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="warningRate")
    def warning_rate(self) -> float:
        """
        Average warning rate.
        """
        return pulumi.get(self, "warning_rate")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanValues":
            suggest = "boolean_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_values: Sequence[bool]):
        pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Sequence[bool]:
        return pulumi.get(self, "boolean_values")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleValues":
            suggest = "double_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_values: Sequence[float]):
        pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Sequence[float]:
        return pulumi.get(self, "double_values")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoEventParametersResponse(dict):
    """
    LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
    """
    def __init__(__self__, *,
                 parameters: Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse']):
        """
        LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
        :param Sequence['EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse'] parameters: Parameters are a part of Event and can be used to communicate between different tasks that are part of the same workflow execution.
        """
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse']:
        """
        Parameters are a part of Event and can be used to communicate between different tasks that are part of the same workflow execution.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intValues":
            suggest = "int_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 int_values: Sequence[str]):
        pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Sequence[str]:
        return pulumi.get(self, "int_values")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse(dict):
    """
    Key-value pair of EventBus task parameters. Next id: 13
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "className":
            suggest = "class_name"
        elif key == "collectionElementClassName":
            suggest = "collection_element_class_name"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "isDeprecated":
            suggest = "is_deprecated"
        elif key == "isOutput":
            suggest = "is_output"
        elif key == "jsonSchema":
            suggest = "json_schema"
        elif key == "protoDef":
            suggest = "proto_def"
        elif key == "validationRule":
            suggest = "validation_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_name: str,
                 collection_element_class_name: str,
                 config: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse',
                 data_type: str,
                 default_value: 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse',
                 is_deprecated: bool,
                 is_output: bool,
                 json_schema: str,
                 key: str,
                 proto_def: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse',
                 required: bool,
                 validation_rule: 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse'):
        """
        Key-value pair of EventBus task parameters. Next id: 13
        :param str class_name: The FQCN of the Java object this represents. A string, for example, would be "java.lang.String". If this is "java.lang.Object", the parameter can be of any type.
        :param str collection_element_class_name: If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is "java.lang.Object", the parameter is a collection of any type.
        :param 'EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse' config: Optional fields, such as help text and other useful info.
        :param str data_type: The data type of the parameter.
        :param 'EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse' default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param bool is_deprecated: If set, this entry is deprecated, so further use of this parameter should be prohibited.
        :param str json_schema: If the data_type is JSON_VALUE, then this will define its schema.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.
        :param 'EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse' proto_def: Populated if this represents a proto or proto array.
        :param bool required: If set, the user must provide an input value for this parameter.
        :param 'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse' validation_rule: Rule used to validate inputs (individual values and collection elements) for this parameter.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "collection_element_class_name", collection_element_class_name)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_output", is_output)
        pulumi.set(__self__, "json_schema", json_schema)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "proto_def", proto_def)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "validation_rule", validation_rule)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> str:
        """
        The FQCN of the Java object this represents. A string, for example, would be "java.lang.String". If this is "java.lang.Object", the parameter can be of any type.
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter(name="collectionElementClassName")
    def collection_element_class_name(self) -> str:
        """
        If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is "java.lang.Object", the parameter is a collection of any type.
        """
        return pulumi.get(self, "collection_element_class_name")

    @property
    @pulumi.getter
    def config(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryConfigResponse':
        """
        Optional fields, such as help text and other useful info.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        The data type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse':
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        If set, this entry is deprecated, so further use of this parameter should be prohibited.
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isOutput")
    def is_output(self) -> bool:
        return pulumi.get(self, "is_output")

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> str:
        """
        If the data_type is JSON_VALUE, then this will define its schema.
        """
        return pulumi.get(self, "json_schema")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="protoDef")
    def proto_def(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionResponse':
        """
        Populated if this represents a proto or proto array.
        """
        return pulumi.get(self, "proto_def")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        If set, the user must provide an input value for this parameter.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationRule")
    def validation_rule(self) -> 'outputs.EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleResponse':
        """
        Rule used to validate inputs (individual values and collection elements) for this parameter.
        """
        return pulumi.get(self, "validation_rule")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageResponse(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse']):
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoParamSpecEntryResponse']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse(dict):
    """
    Key-value pair of EventBus parameters.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 key: str,
                 value: 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse'):
        """
        Key-value pair of EventBus parameters.
        :param str data_type: Explicitly getting the type of the parameter.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        :param 'EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse' value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Explicitly getting the type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse':
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse(dict):
    """
    To support various types of parameter values. Next available id: 14
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanArray":
            suggest = "boolean_array"
        elif key == "booleanValue":
            suggest = "boolean_value"
        elif key == "doubleArray":
            suggest = "double_array"
        elif key == "doubleValue":
            suggest = "double_value"
        elif key == "intArray":
            suggest = "int_array"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "jsonValue":
            suggest = "json_value"
        elif key == "protoArray":
            suggest = "proto_array"
        elif key == "protoValue":
            suggest = "proto_value"
        elif key == "serializedObjectValue":
            suggest = "serialized_object_value"
        elif key == "stringArray":
            suggest = "string_array"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_array: 'outputs.EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse',
                 boolean_value: bool,
                 double_array: 'outputs.EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse',
                 double_value: float,
                 int_array: 'outputs.EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse',
                 int_value: str,
                 json_value: str,
                 proto_array: 'outputs.EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse',
                 proto_value: Mapping[str, Any],
                 serialized_object_value: 'outputs.EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse',
                 string_array: 'outputs.EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse',
                 string_value: str):
        """
        To support various types of parameter values. Next available id: 14
        """
        pulumi.set(__self__, "boolean_array", boolean_array)
        pulumi.set(__self__, "boolean_value", boolean_value)
        pulumi.set(__self__, "double_array", double_array)
        pulumi.set(__self__, "double_value", double_value)
        pulumi.set(__self__, "int_array", int_array)
        pulumi.set(__self__, "int_value", int_value)
        pulumi.set(__self__, "json_value", json_value)
        pulumi.set(__self__, "proto_array", proto_array)
        pulumi.set(__self__, "proto_value", proto_value)
        pulumi.set(__self__, "serialized_object_value", serialized_object_value)
        pulumi.set(__self__, "string_array", string_array)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayResponse':
        return pulumi.get(self, "boolean_array")

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> bool:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayResponse':
        return pulumi.get(self, "double_array")

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> float:
        return pulumi.get(self, "double_value")

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoIntParameterArrayResponse':
        return pulumi.get(self, "int_array")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> str:
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="jsonValue")
    def json_value(self) -> str:
        return pulumi.get(self, "json_value")

    @property
    @pulumi.getter(name="protoArray")
    def proto_array(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse':
        return pulumi.get(self, "proto_array")

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Mapping[str, Any]:
        return pulumi.get(self, "proto_value")

    @property
    @pulumi.getter(name="serializedObjectValue")
    def serialized_object_value(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse':
        return pulumi.get(self, "serialized_object_value")

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse':
        return pulumi.get(self, "string_array")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        return pulumi.get(self, "string_value")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protoValues":
            suggest = "proto_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proto_values: Sequence[Mapping[str, Any]]):
        pulumi.set(__self__, "proto_values", proto_values)

    @property
    @pulumi.getter(name="protoValues")
    def proto_values(self) -> Sequence[Mapping[str, Any]]:
        return pulumi.get(self, "proto_values")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse(dict):
    """
    Next available id: 4
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollbackTaskImplementationClassName":
            suggest = "rollback_task_implementation_class_name"
        elif key == "taskNumbersToRollback":
            suggest = "task_numbers_to_rollback"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: 'outputs.EnterpriseCrmFrontendsEventbusProtoEventParametersResponse',
                 rollback_task_implementation_class_name: str,
                 task_numbers_to_rollback: Sequence[str]):
        """
        Next available id: 4
        :param 'EnterpriseCrmFrontendsEventbusProtoEventParametersResponse' parameters: Optional. The customized parameters the user can pass to this task.
        :param str rollback_task_implementation_class_name: This is the name of the task that needs to be executed upon rollback of this task.
        :param Sequence[str] task_numbers_to_rollback: These are the tasks numbers of the tasks whose `rollback_strategy.rollback_task_implementation_class_name` needs to be executed upon failure of this task.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "rollback_task_implementation_class_name", rollback_task_implementation_class_name)
        pulumi.set(__self__, "task_numbers_to_rollback", task_numbers_to_rollback)

    @property
    @pulumi.getter
    def parameters(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoEventParametersResponse':
        """
        Optional. The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="rollbackTaskImplementationClassName")
    def rollback_task_implementation_class_name(self) -> str:
        """
        This is the name of the task that needs to be executed upon rollback of this task.
        """
        return pulumi.get(self, "rollback_task_implementation_class_name")

    @property
    @pulumi.getter(name="taskNumbersToRollback")
    def task_numbers_to_rollback(self) -> Sequence[str]:
        """
        These are the tasks numbers of the tasks whose `rollback_strategy.rollback_task_implementation_class_name` needs to be executed upon failure of this task.
        """
        return pulumi.get(self, "task_numbers_to_rollback")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectValue":
            suggest = "object_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_value: str):
        pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> str:
        return pulumi.get(self, "object_value")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValues":
            suggest = "string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoStringParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_values: Sequence[str]):
        pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Sequence[str]:
        return pulumi.get(self, "string_values")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse(dict):
    """
    The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertConfigs":
            suggest = "alert_configs"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "creatorEmail":
            suggest = "creator_email"
        elif key == "disableStrictTypeValidation":
            suggest = "disable_strict_type_validation"
        elif key == "errorCatcherId":
            suggest = "error_catcher_id"
        elif key == "externalTaskType":
            suggest = "external_task_type"
        elif key == "failurePolicy":
            suggest = "failure_policy"
        elif key == "incomingEdgeCount":
            suggest = "incoming_edge_count"
        elif key == "jsonValidationOption":
            suggest = "json_validation_option"
        elif key == "lastModifiedTime":
            suggest = "last_modified_time"
        elif key == "nextTasks":
            suggest = "next_tasks"
        elif key == "nextTasksExecutionPolicy":
            suggest = "next_tasks_execution_policy"
        elif key == "preconditionLabel":
            suggest = "precondition_label"
        elif key == "rollbackStrategy":
            suggest = "rollback_strategy"
        elif key == "successPolicy":
            suggest = "success_policy"
        elif key == "synchronousCallFailurePolicy":
            suggest = "synchronous_call_failure_policy"
        elif key == "taskEntity":
            suggest = "task_entity"
        elif key == "taskExecutionStrategy":
            suggest = "task_execution_strategy"
        elif key == "taskName":
            suggest = "task_name"
        elif key == "taskNumber":
            suggest = "task_number"
        elif key == "taskSpec":
            suggest = "task_spec"
        elif key == "taskTemplateName":
            suggest = "task_template_name"
        elif key == "taskType":
            suggest = "task_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_configs: Sequence['outputs.EnterpriseCrmEventbusProtoTaskAlertConfigResponse'],
                 create_time: str,
                 creator_email: str,
                 description: str,
                 disable_strict_type_validation: bool,
                 error_catcher_id: str,
                 external_task_type: str,
                 failure_policy: 'outputs.EnterpriseCrmEventbusProtoFailurePolicyResponse',
                 incoming_edge_count: int,
                 json_validation_option: str,
                 label: str,
                 last_modified_time: str,
                 next_tasks: Sequence['outputs.EnterpriseCrmEventbusProtoNextTaskResponse'],
                 next_tasks_execution_policy: str,
                 parameters: Mapping[str, 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse'],
                 position: 'outputs.EnterpriseCrmEventbusProtoCoordinateResponse',
                 precondition: str,
                 precondition_label: str,
                 rollback_strategy: 'outputs.EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse',
                 success_policy: 'outputs.EnterpriseCrmEventbusProtoSuccessPolicyResponse',
                 synchronous_call_failure_policy: 'outputs.EnterpriseCrmEventbusProtoFailurePolicyResponse',
                 task_entity: 'outputs.EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse',
                 task_execution_strategy: str,
                 task_name: str,
                 task_number: str,
                 task_spec: str,
                 task_template_name: str,
                 task_type: str):
        """
        The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
        :param Sequence['EnterpriseCrmEventbusProtoTaskAlertConfigResponse'] alert_configs: Alert configurations on error rate, warning rate, number of runs, durations, etc.
        :param str create_time: Auto-generated.
        :param str creator_email: The creator's email address. Auto-generated from the user's email.
        :param str description: User-provided description intended to give more business context about the task.
        :param bool disable_strict_type_validation: If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.
        :param str error_catcher_id: Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param 'EnterpriseCrmEventbusProtoFailurePolicyResponse' failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        :param int incoming_edge_count: The number of edges leading into this TaskConfig.
        :param str json_validation_option: If set, overrides the option configured in the Task implementation class.
        :param str label: User-provided label that is attached to this TaskConfig in the UI.
        :param str last_modified_time: Auto-generated.
        :param Sequence['EnterpriseCrmEventbusProtoNextTaskResponse'] next_tasks: The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        :param str next_tasks_execution_policy: The policy dictating the execution of the next set of tasks for the current task.
        :param Mapping[str, 'EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse'] parameters: The customized parameters the user can pass to this task.
        :param 'EnterpriseCrmEventbusProtoCoordinateResponse' position: Optional. Informs the front-end application where to draw this task config on the UI.
        :param str precondition: Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.
        :param str precondition_label: Optional. User-provided label that is attached to precondition in the UI.
        :param 'EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse' rollback_strategy: Optional. Contains information about what needs to be done upon failure (either a permanent error or after it has been retried too many times).
        :param 'EnterpriseCrmEventbusProtoSuccessPolicyResponse' success_policy: Determines what action to take upon successful task completion.
        :param 'EnterpriseCrmEventbusProtoFailurePolicyResponse' synchronous_call_failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        :param 'EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse' task_entity: Copy of the task entity that this task config is an instance of.
        :param str task_execution_strategy: The policy dictating the execution strategy of this task.
        :param str task_name: The name for the task.
        :param str task_number: REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).
        :param str task_spec: A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.
        :param str task_template_name: Used to define task-template name if task is of type task-template
        :param str task_type: Defines the type of the task
        """
        pulumi.set(__self__, "alert_configs", alert_configs)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_email", creator_email)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disable_strict_type_validation", disable_strict_type_validation)
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "external_task_type", external_task_type)
        pulumi.set(__self__, "failure_policy", failure_policy)
        pulumi.set(__self__, "incoming_edge_count", incoming_edge_count)
        pulumi.set(__self__, "json_validation_option", json_validation_option)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "next_tasks", next_tasks)
        pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "precondition", precondition)
        pulumi.set(__self__, "precondition_label", precondition_label)
        pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        pulumi.set(__self__, "success_policy", success_policy)
        pulumi.set(__self__, "synchronous_call_failure_policy", synchronous_call_failure_policy)
        pulumi.set(__self__, "task_entity", task_entity)
        pulumi.set(__self__, "task_execution_strategy", task_execution_strategy)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_number", task_number)
        pulumi.set(__self__, "task_spec", task_spec)
        pulumi.set(__self__, "task_template_name", task_template_name)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="alertConfigs")
    def alert_configs(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoTaskAlertConfigResponse']:
        """
        Alert configurations on error rate, warning rate, number of runs, durations, etc.
        """
        return pulumi.get(self, "alert_configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> str:
        """
        The creator's email address. Auto-generated from the user's email.
        """
        return pulumi.get(self, "creator_email")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided description intended to give more business context about the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableStrictTypeValidation")
    def disable_strict_type_validation(self) -> bool:
        """
        If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.
        """
        return pulumi.get(self, "disable_strict_type_validation")

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> str:
        """
        Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @property
    @pulumi.getter(name="externalTaskType")
    def external_task_type(self) -> str:
        return pulumi.get(self, "external_task_type")

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> 'outputs.EnterpriseCrmEventbusProtoFailurePolicyResponse':
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        """
        return pulumi.get(self, "failure_policy")

    @property
    @pulumi.getter(name="incomingEdgeCount")
    def incoming_edge_count(self) -> int:
        """
        The number of edges leading into this TaskConfig.
        """
        return pulumi.get(self, "incoming_edge_count")

    @property
    @pulumi.getter(name="jsonValidationOption")
    def json_validation_option(self) -> str:
        """
        If set, overrides the option configured in the Task implementation class.
        """
        return pulumi.get(self, "json_validation_option")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        User-provided label that is attached to this TaskConfig in the UI.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="nextTasks")
    def next_tasks(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoNextTaskResponse']:
        """
        The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        """
        return pulumi.get(self, "next_tasks")

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> str:
        """
        The policy dictating the execution of the next set of tasks for the current task.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterEntryResponse']:
        """
        The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def position(self) -> 'outputs.EnterpriseCrmEventbusProtoCoordinateResponse':
        """
        Optional. Informs the front-end application where to draw this task config on the UI.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def precondition(self) -> str:
        """
        Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.
        """
        return pulumi.get(self, "precondition")

    @property
    @pulumi.getter(name="preconditionLabel")
    def precondition_label(self) -> str:
        """
        Optional. User-provided label that is attached to precondition in the UI.
        """
        return pulumi.get(self, "precondition_label")

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoRollbackStrategyResponse':
        """
        Optional. Contains information about what needs to be done upon failure (either a permanent error or after it has been retried too many times).
        """
        return pulumi.get(self, "rollback_strategy")

    @property
    @pulumi.getter(name="successPolicy")
    def success_policy(self) -> 'outputs.EnterpriseCrmEventbusProtoSuccessPolicyResponse':
        """
        Determines what action to take upon successful task completion.
        """
        return pulumi.get(self, "success_policy")

    @property
    @pulumi.getter(name="synchronousCallFailurePolicy")
    def synchronous_call_failure_policy(self) -> 'outputs.EnterpriseCrmEventbusProtoFailurePolicyResponse':
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        """
        return pulumi.get(self, "synchronous_call_failure_policy")

    @property
    @pulumi.getter(name="taskEntity")
    def task_entity(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse':
        """
        Copy of the task entity that this task config is an instance of.
        """
        return pulumi.get(self, "task_entity")

    @property
    @pulumi.getter(name="taskExecutionStrategy")
    def task_execution_strategy(self) -> str:
        """
        The policy dictating the execution strategy of this task.
        """
        return pulumi.get(self, "task_execution_strategy")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> str:
        """
        The name for the task.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> str:
        """
        REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).
        """
        return pulumi.get(self, "task_number")

    @property
    @pulumi.getter(name="taskSpec")
    def task_spec(self) -> str:
        """
        A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.
        """
        return pulumi.get(self, "task_spec")

    @property
    @pulumi.getter(name="taskTemplateName")
    def task_template_name(self) -> str:
        """
        Used to define task-template name if task is of type task-template
        """
        return pulumi.get(self, "task_template_name")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Defines the type of the task
        """
        return pulumi.get(self, "task_type")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse(dict):
    """
    Contains a task's metadata and associated information. Next available id: 7
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disabledForVpcSc":
            suggest = "disabled_for_vpc_sc"
        elif key == "paramSpecs":
            suggest = "param_specs"
        elif key == "taskType":
            suggest = "task_type"
        elif key == "uiConfig":
            suggest = "ui_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTaskEntityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled_for_vpc_sc: bool,
                 metadata: 'outputs.EnterpriseCrmEventbusProtoTaskMetadataResponse',
                 param_specs: 'outputs.EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageResponse',
                 stats: 'outputs.EnterpriseCrmEventbusStatsResponse',
                 task_type: str,
                 ui_config: 'outputs.EnterpriseCrmEventbusProtoTaskUiConfigResponse'):
        """
        Contains a task's metadata and associated information. Next available id: 7
        :param bool disabled_for_vpc_sc: True if the task has conflict with vpcsc
        :param 'EnterpriseCrmEventbusProtoTaskMetadataResponse' metadata: Metadata inclueds the task name, author and so on.
        :param 'EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageResponse' param_specs: Declarations for inputs/outputs for a TypedTask. This is also associated with the METADATA mask.
        :param 'EnterpriseCrmEventbusStatsResponse' stats: Deprecated - statistics from the Monarch query.
        :param str task_type: Defines the type of the task
        :param 'EnterpriseCrmEventbusProtoTaskUiConfigResponse' ui_config: UI configuration for this task Also associated with the METADATA mask.
        """
        pulumi.set(__self__, "disabled_for_vpc_sc", disabled_for_vpc_sc)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "param_specs", param_specs)
        pulumi.set(__self__, "stats", stats)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "ui_config", ui_config)

    @property
    @pulumi.getter(name="disabledForVpcSc")
    def disabled_for_vpc_sc(self) -> bool:
        """
        True if the task has conflict with vpcsc
        """
        return pulumi.get(self, "disabled_for_vpc_sc")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.EnterpriseCrmEventbusProtoTaskMetadataResponse':
        """
        Metadata inclueds the task name, author and so on.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="paramSpecs")
    def param_specs(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageResponse':
        """
        Declarations for inputs/outputs for a TypedTask. This is also associated with the METADATA mask.
        """
        return pulumi.get(self, "param_specs")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated - statistics from the Monarch query.""")
    def stats(self) -> 'outputs.EnterpriseCrmEventbusStatsResponse':
        """
        Deprecated - statistics from the Monarch query.
        """
        return pulumi.get(self, "stats")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Defines the type of the task
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="uiConfig")
    def ui_config(self) -> 'outputs.EnterpriseCrmEventbusProtoTaskUiConfigResponse':
        """
        UI configuration for this task Also associated with the METADATA mask.
        """
        return pulumi.get(self, "ui_config")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse(dict):
    """
    Configuration detail of a trigger. Next available id: 20
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertConfig":
            suggest = "alert_config"
        elif key == "cloudSchedulerConfig":
            suggest = "cloud_scheduler_config"
        elif key == "enabledClients":
            suggest = "enabled_clients"
        elif key == "errorCatcherId":
            suggest = "error_catcher_id"
        elif key == "nextTasksExecutionPolicy":
            suggest = "next_tasks_execution_policy"
        elif key == "pauseWorkflowExecutions":
            suggest = "pause_workflow_executions"
        elif key == "startTasks":
            suggest = "start_tasks"
        elif key == "triggerCriteria":
            suggest = "trigger_criteria"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerNumber":
            suggest = "trigger_number"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_config: Sequence['outputs.EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse'],
                 cloud_scheduler_config: 'outputs.EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse',
                 description: str,
                 enabled_clients: Sequence[str],
                 error_catcher_id: str,
                 label: str,
                 next_tasks_execution_policy: str,
                 pause_workflow_executions: bool,
                 position: 'outputs.EnterpriseCrmEventbusProtoCoordinateResponse',
                 properties: Mapping[str, str],
                 start_tasks: Sequence['outputs.EnterpriseCrmEventbusProtoNextTaskResponse'],
                 trigger_criteria: 'outputs.EnterpriseCrmEventbusProtoTriggerCriteriaResponse',
                 trigger_id: str,
                 trigger_name: str,
                 trigger_number: str,
                 trigger_type: str):
        """
        Configuration detail of a trigger. Next available id: 20
        :param Sequence['EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse'] alert_config: An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.
        :param str description: User-provided description intended to give more business context about the task.
        :param Sequence[str] enabled_clients: The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.
        :param str error_catcher_id: Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param str label: The user created label for a particular trigger.
        :param str next_tasks_execution_policy: Dictates how next tasks will be executed.
        :param bool pause_workflow_executions: Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.
        :param 'EnterpriseCrmEventbusProtoCoordinateResponse' position: Optional. Informs the front-end application where to draw this trigger config on the UI.
        :param Mapping[str, str] properties: Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.
        :param Sequence['EnterpriseCrmEventbusProtoNextTaskResponse'] start_tasks: Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).
        :param 'EnterpriseCrmEventbusProtoTriggerCriteriaResponse' trigger_criteria: Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.
        :param str trigger_id: The backend trigger ID.
        :param str trigger_name: Optional. Name of the trigger This is added to identify the type of trigger. This is avoid the logic on triggerId to identify the trigger_type and push the same to monitoring.
        :param str trigger_number: A number to uniquely identify each trigger config within the workflow on UI.
        """
        pulumi.set(__self__, "alert_config", alert_config)
        pulumi.set(__self__, "cloud_scheduler_config", cloud_scheduler_config)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled_clients", enabled_clients)
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        pulumi.set(__self__, "pause_workflow_executions", pause_workflow_executions)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "start_tasks", start_tasks)
        pulumi.set(__self__, "trigger_criteria", trigger_criteria)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_number", trigger_number)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="alertConfig")
    def alert_config(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse']:
        """
        An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.
        """
        return pulumi.get(self, "alert_config")

    @property
    @pulumi.getter(name="cloudSchedulerConfig")
    def cloud_scheduler_config(self) -> 'outputs.EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse':
        return pulumi.get(self, "cloud_scheduler_config")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided description intended to give more business context about the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enabledClients")
    def enabled_clients(self) -> Sequence[str]:
        """
        The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.
        """
        return pulumi.get(self, "enabled_clients")

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> str:
        """
        Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The user created label for a particular trigger.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> str:
        """
        Dictates how next tasks will be executed.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @property
    @pulumi.getter(name="pauseWorkflowExecutions")
    def pause_workflow_executions(self) -> bool:
        """
        Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.
        """
        return pulumi.get(self, "pause_workflow_executions")

    @property
    @pulumi.getter
    def position(self) -> 'outputs.EnterpriseCrmEventbusProtoCoordinateResponse':
        """
        Optional. Informs the front-end application where to draw this trigger config on the UI.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        """
        Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="startTasks")
    def start_tasks(self) -> Sequence['outputs.EnterpriseCrmEventbusProtoNextTaskResponse']:
        """
        Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).
        """
        return pulumi.get(self, "start_tasks")

    @property
    @pulumi.getter(name="triggerCriteria")
    def trigger_criteria(self) -> 'outputs.EnterpriseCrmEventbusProtoTriggerCriteriaResponse':
        """
        Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.
        """
        return pulumi.get(self, "trigger_criteria")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> str:
        """
        The backend trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        """
        Optional. Name of the trigger This is added to identify the type of trigger. This is avoid the logic on triggerId to identify the trigger_type and push the same to monitoring.
        """
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter(name="triggerNumber")
    def trigger_number(self) -> str:
        """
        A number to uniquely identify each trigger config within the workflow on UI.
        """
        return pulumi.get(self, "trigger_number")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> str:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "inOutType":
            suggest = "in_out_type"
        elif key == "isTransient":
            suggest = "is_transient"
        elif key == "jsonSchema":
            suggest = "json_schema"
        elif key == "producedBy":
            suggest = "produced_by"
        elif key == "protoDefName":
            suggest = "proto_def_name"
        elif key == "protoDefPath":
            suggest = "proto_def_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: 'outputs.EnterpriseCrmEventbusProtoAttributesResponse',
                 children: Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse'],
                 data_type: str,
                 default_value: 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse',
                 description: str,
                 in_out_type: str,
                 is_transient: bool,
                 json_schema: str,
                 key: str,
                 name: str,
                 produced_by: 'outputs.EnterpriseCrmEventbusProtoNodeIdentifierResponse',
                 producer: str,
                 proto_def_name: str,
                 proto_def_path: str):
        """
        :param 'EnterpriseCrmEventbusProtoAttributesResponse' attributes: Metadata information about the parameters.
        :param Sequence['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse'] children: Child parameters nested within this parameter. This field only applies to protobuf parameters
        :param str data_type: The data type of the parameter.
        :param 'EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse' default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param str description: Optional. The description about the parameter
        :param str in_out_type: Specifies the input/output type for the parameter.
        :param bool is_transient: Whether this parameter is a transient parameter.
        :param str json_schema: This schema will be used to validate runtime JSON-typed values of this parameter.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        :param str name: The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        :param 'EnterpriseCrmEventbusProtoNodeIdentifierResponse' produced_by: The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        :param str proto_def_name: The name of the protobuf type if the parameter has a protobuf data type.
        :param str proto_def_path: If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".
        """
        pulumi.set(__self__, "attributes", attributes)
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "in_out_type", in_out_type)
        pulumi.set(__self__, "is_transient", is_transient)
        pulumi.set(__self__, "json_schema", json_schema)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "produced_by", produced_by)
        pulumi.set(__self__, "producer", producer)
        pulumi.set(__self__, "proto_def_name", proto_def_name)
        pulumi.set(__self__, "proto_def_path", proto_def_path)

    @property
    @pulumi.getter
    def attributes(self) -> 'outputs.EnterpriseCrmEventbusProtoAttributesResponse':
        """
        Metadata information about the parameters.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def children(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse']:
        """
        Child parameters nested within this parameter. This field only applies to protobuf parameters
        """
        return pulumi.get(self, "children")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        The data type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> 'outputs.EnterpriseCrmFrontendsEventbusProtoParameterValueTypeResponse':
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. The description about the parameter
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inOutType")
    def in_out_type(self) -> str:
        """
        Specifies the input/output type for the parameter.
        """
        return pulumi.get(self, "in_out_type")

    @property
    @pulumi.getter(name="isTransient")
    def is_transient(self) -> bool:
        """
        Whether this parameter is a transient parameter.
        """
        return pulumi.get(self, "is_transient")

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> str:
        """
        This schema will be used to validate runtime JSON-typed values of this parameter.
        """
        return pulumi.get(self, "json_schema")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="producedBy")
    def produced_by(self) -> 'outputs.EnterpriseCrmEventbusProtoNodeIdentifierResponse':
        """
        The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        """
        return pulumi.get(self, "produced_by")

    @property
    @pulumi.getter
    def producer(self) -> str:
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter(name="protoDefName")
    def proto_def_name(self) -> str:
        """
        The name of the protobuf type if the parameter has a protobuf data type.
        """
        return pulumi.get(self, "proto_def_name")

    @property
    @pulumi.getter(name="protoDefPath")
    def proto_def_path(self) -> str:
        """
        If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".
        """
        return pulumi.get(self, "proto_def_path")


@pulumi.output_type
class EnterpriseCrmFrontendsEventbusProtoWorkflowParametersResponse(dict):
    """
    LINT.IfChange This is the frontend version of WorkflowParameters. It's exactly like the backend version except that instead of flattening protobuf parameters and treating every field and subfield of a protobuf parameter as a separate parameter, the fields/subfields of a protobuf parameter will be nested as "children" (see 'children' field below) parameters of the parent parameter. Please refer to enterprise/crm/eventbus/proto/workflow_parameters.proto for more information about WorkflowParameters.
    """
    def __init__(__self__, *,
                 parameters: Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse']):
        """
        LINT.IfChange This is the frontend version of WorkflowParameters. It's exactly like the backend version except that instead of flattening protobuf parameters and treating every field and subfield of a protobuf parameter as a separate parameter, the fields/subfields of a protobuf parameter will be nested as "children" (see 'children' field below) parameters of the parent parameter. Please refer to enterprise/crm/eventbus/proto/workflow_parameters.proto for more information about WorkflowParameters.
        :param Sequence['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse'] parameters: Parameters are a part of Event and can be used to communiticate between different tasks that are part of the same workflow execution.
        """
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryResponse']:
        """
        Parameters are a part of Event and can be used to communiticate between different tasks that are part of the same workflow execution.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class EnterpriseCrmLoggingGwsFieldLimitsResponse(dict):
    """
    Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAction":
            suggest = "log_action"
        elif key == "logType":
            suggest = "log_type"
        elif key == "maxArraySize":
            suggest = "max_array_size"
        elif key == "maxStringLength":
            suggest = "max_string_length"
        elif key == "shortenerType":
            suggest = "shortener_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmLoggingGwsFieldLimitsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmLoggingGwsFieldLimitsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmLoggingGwsFieldLimitsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_action: str,
                 log_type: Sequence[str],
                 max_array_size: int,
                 max_string_length: int,
                 shortener_type: str):
        """
        Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6
        :param Sequence[str] log_type: To which type(s) of logs the limits apply.
        :param int max_array_size: maximum array size. If the array exceds this size, the field (list) is truncated.
        :param int max_string_length: maximum string length. If the field exceeds this amount the field is shortened.
        """
        pulumi.set(__self__, "log_action", log_action)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "max_array_size", max_array_size)
        pulumi.set(__self__, "max_string_length", max_string_length)
        pulumi.set(__self__, "shortener_type", shortener_type)

    @property
    @pulumi.getter(name="logAction")
    def log_action(self) -> str:
        return pulumi.get(self, "log_action")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Sequence[str]:
        """
        To which type(s) of logs the limits apply.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="maxArraySize")
    def max_array_size(self) -> int:
        """
        maximum array size. If the array exceds this size, the field (list) is truncated.
        """
        return pulumi.get(self, "max_array_size")

    @property
    @pulumi.getter(name="maxStringLength")
    def max_string_length(self) -> int:
        """
        maximum string length. If the field exceeds this amount the field is shortened.
        """
        return pulumi.get(self, "max_string_length")

    @property
    @pulumi.getter(name="shortenerType")
    def shortener_type(self) -> str:
        return pulumi.get(self, "shortener_type")


@pulumi.output_type
class EnterpriseCrmLoggingGwsSanitizeOptionsResponse(dict):
    """
    Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAlreadySanitized":
            suggest = "is_already_sanitized"
        elif key == "logType":
            suggest = "log_type"
        elif key == "sanitizeType":
            suggest = "sanitize_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseCrmLoggingGwsSanitizeOptionsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseCrmLoggingGwsSanitizeOptionsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseCrmLoggingGwsSanitizeOptionsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_already_sanitized: bool,
                 log_type: Sequence[str],
                 privacy: str,
                 sanitize_type: str):
        """
        Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5
        :param bool is_already_sanitized: If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
        :param Sequence[str] log_type: To which type(s) of logs the sanitize options apply.
        """
        pulumi.set(__self__, "is_already_sanitized", is_already_sanitized)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "privacy", privacy)
        pulumi.set(__self__, "sanitize_type", sanitize_type)

    @property
    @pulumi.getter(name="isAlreadySanitized")
    def is_already_sanitized(self) -> bool:
        """
        If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
        """
        return pulumi.get(self, "is_already_sanitized")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Sequence[str]:
        """
        To which type(s) of logs the sanitize options apply.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def privacy(self) -> str:
        return pulumi.get(self, "privacy")

    @property
    @pulumi.getter(name="sanitizeType")
    def sanitize_type(self) -> str:
        return pulumi.get(self, "sanitize_type")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaAccessTokenResponse(dict):
    """
    The access token represents the authorization of a specific application to access specific parts of a user’s data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "accessTokenExpireTime":
            suggest = "access_token_expire_time"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "refreshTokenExpireTime":
            suggest = "refresh_token_expire_time"
        elif key == "tokenType":
            suggest = "token_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaAccessTokenResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaAccessTokenResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaAccessTokenResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 access_token_expire_time: str,
                 refresh_token: str,
                 refresh_token_expire_time: str,
                 token_type: str):
        """
        The access token represents the authorization of a specific application to access specific parts of a user’s data.
        :param str access_token: The access token encapsulating the security identity of a process or thread.
        :param str access_token_expire_time: The approximate time until the access token retrieved is valid.
        :param str refresh_token: If the access token will expire, use the refresh token to obtain another access token.
        :param str refresh_token_expire_time: The approximate time until the refresh token retrieved is valid.
        :param str token_type: Only support "bearer" token in v1 as bearer token is the predominant type used with OAuth 2.0.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "access_token_expire_time", access_token_expire_time)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "refresh_token_expire_time", refresh_token_expire_time)
        pulumi.set(__self__, "token_type", token_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        The access token encapsulating the security identity of a process or thread.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="accessTokenExpireTime")
    def access_token_expire_time(self) -> str:
        """
        The approximate time until the access token retrieved is valid.
        """
        return pulumi.get(self, "access_token_expire_time")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        """
        If the access token will expire, use the refresh token to obtain another access token.
        """
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="refreshTokenExpireTime")
    def refresh_token_expire_time(self) -> str:
        """
        The approximate time until the refresh token retrieved is valid.
        """
        return pulumi.get(self, "refresh_token_expire_time")

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> str:
        """
        Only support "bearer" token in v1 as bearer token is the predominant type used with OAuth 2.0.
        """
        return pulumi.get(self, "token_type")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaAssertionResponse(dict):
    """
    An assertion which will check for a condition over task execution status or an expression for task output variables Next available id: 5
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assertionStrategy":
            suggest = "assertion_strategy"
        elif key == "retryCount":
            suggest = "retry_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaAssertionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaAssertionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaAssertionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertion_strategy: str,
                 condition: str,
                 parameter: 'outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse',
                 retry_count: int):
        """
        An assertion which will check for a condition over task execution status or an expression for task output variables Next available id: 5
        :param str assertion_strategy: The type of assertion to perform.
        :param str condition: Optional. Standard filter expression for ASSERT_CONDITION to succeed
        :param 'GoogleCloudIntegrationsV1alphaEventParameterResponse' parameter: Optional. Key-value pair for ASSERT_EQUALS, ASSERT_NOT_EQUALS, ASSERT_CONTAINS to succeed
        :param int retry_count: Number of times given task should be retried in case of ASSERT_FAILED_EXECUTION
        """
        pulumi.set(__self__, "assertion_strategy", assertion_strategy)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "parameter", parameter)
        pulumi.set(__self__, "retry_count", retry_count)

    @property
    @pulumi.getter(name="assertionStrategy")
    def assertion_strategy(self) -> str:
        """
        The type of assertion to perform.
        """
        return pulumi.get(self, "assertion_strategy")

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Optional. Standard filter expression for ASSERT_CONDITION to succeed
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def parameter(self) -> 'outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse':
        """
        Optional. Key-value pair for ASSERT_EQUALS, ASSERT_NOT_EQUALS, ASSERT_CONTAINS to succeed
        """
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> int:
        """
        Number of times given task should be retried in case of ASSERT_FAILED_EXECUTION
        """
        return pulumi.get(self, "retry_count")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaAuthTokenResponse(dict):
    """
    The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.
    """
    def __init__(__self__, *,
                 token: str,
                 type: str):
        """
        The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.
        :param str token: The token for the auth type.
        :param str type: Authentication type, e.g. "Basic", "Bearer", etc.
        """
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token for the auth type.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Authentication type, e.g. "Basic", "Bearer", etc.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse(dict):
    """
    This message only contains a field of boolean array.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanValues":
            suggest = "boolean_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_values: Sequence[bool]):
        """
        This message only contains a field of boolean array.
        :param Sequence[bool] boolean_values: Boolean array.
        """
        pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Sequence[bool]:
        """
        Boolean array.
        """
        return pulumi.get(self, "boolean_values")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaClientCertificateResponse(dict):
    """
    Contains client certificate information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptedPrivateKey":
            suggest = "encrypted_private_key"
        elif key == "sslCertificate":
            suggest = "ssl_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaClientCertificateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaClientCertificateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaClientCertificateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypted_private_key: str,
                 passphrase: str,
                 ssl_certificate: str):
        """
        Contains client certificate information
        :param str encrypted_private_key: The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        :param str passphrase: 'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.
        :param str ssl_certificate: The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        pulumi.set(__self__, "encrypted_private_key", encrypted_private_key)
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptedPrivateKey")
    def encrypted_private_key(self) -> str:
        """
        The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        return pulumi.get(self, "encrypted_private_key")

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        """
        'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> str:
        """
        The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        return pulumi.get(self, "ssl_certificate")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse(dict):
    """
    Cloud Logging details for execution info
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudLoggingSeverity":
            suggest = "cloud_logging_severity"
        elif key == "enableCloudLogging":
            suggest = "enable_cloud_logging"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_logging_severity: str,
                 enable_cloud_logging: bool):
        """
        Cloud Logging details for execution info
        :param str cloud_logging_severity: Optional. Severity selected by the customer for the logs to be sent to Cloud Logging, for the integration version getting executed.
        :param bool enable_cloud_logging: Optional. Status of whether Cloud Logging is enabled or not for the integration version getting executed.
        """
        pulumi.set(__self__, "cloud_logging_severity", cloud_logging_severity)
        pulumi.set(__self__, "enable_cloud_logging", enable_cloud_logging)

    @property
    @pulumi.getter(name="cloudLoggingSeverity")
    def cloud_logging_severity(self) -> str:
        """
        Optional. Severity selected by the customer for the logs to be sent to Cloud Logging, for the integration version getting executed.
        """
        return pulumi.get(self, "cloud_logging_severity")

    @property
    @pulumi.getter(name="enableCloudLogging")
    def enable_cloud_logging(self) -> bool:
        """
        Optional. Status of whether Cloud Logging is enabled or not for the integration version getting executed.
        """
        return pulumi.get(self, "enable_cloud_logging")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse(dict):
    """
    Cloud Scheduler Trigger configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronTab":
            suggest = "cron_tab"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "serviceAccountEmail":
            suggest = "service_account_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_tab: str,
                 error_message: str,
                 location: str,
                 service_account_email: str):
        """
        Cloud Scheduler Trigger configuration
        :param str cron_tab: The cron tab of cloud scheduler trigger.
        :param str error_message: Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        :param str location: The location where associated cloud scheduler job will be created
        :param str service_account_email: Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        pulumi.set(__self__, "cron_tab", cron_tab)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter(name="cronTab")
    def cron_tab(self) -> str:
        """
        The cron tab of cloud scheduler trigger.
        """
        return pulumi.get(self, "cron_tab")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location where associated cloud scheduler job will be created
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> str:
        """
        Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        return pulumi.get(self, "service_account_email")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaCoordinateResponse(dict):
    """
    Configuration detail of coordinate, it used for UI
    """
    def __init__(__self__, *,
                 x: int,
                 y: int):
        """
        Configuration detail of coordinate, it used for UI
        :param int x: X axis of the coordinate
        :param int y: Y axis of the coordinate
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> int:
        """
        X axis of the coordinate
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> int:
        """
        Y axis of the coordinate
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaCredentialResponse(dict):
    """
    Defines parameters for a single, canonical credential.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "oauth2AuthorizationCode":
            suggest = "oauth2_authorization_code"
        elif key == "oauth2ClientCredentials":
            suggest = "oauth2_client_credentials"
        elif key == "oauth2ResourceOwnerCredentials":
            suggest = "oauth2_resource_owner_credentials"
        elif key == "oidcToken":
            suggest = "oidc_token"
        elif key == "serviceAccountCredentials":
            suggest = "service_account_credentials"
        elif key == "usernameAndPassword":
            suggest = "username_and_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaCredentialResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaCredentialResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaCredentialResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: 'outputs.GoogleCloudIntegrationsV1alphaAuthTokenResponse',
                 credential_type: str,
                 jwt: 'outputs.GoogleCloudIntegrationsV1alphaJwtResponse',
                 oauth2_authorization_code: 'outputs.GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse',
                 oauth2_client_credentials: 'outputs.GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse',
                 oauth2_resource_owner_credentials: 'outputs.GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse',
                 oidc_token: 'outputs.GoogleCloudIntegrationsV1alphaOidcTokenResponse',
                 service_account_credentials: 'outputs.GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse',
                 username_and_password: 'outputs.GoogleCloudIntegrationsV1alphaUsernameAndPasswordResponse'):
        """
        Defines parameters for a single, canonical credential.
        :param 'GoogleCloudIntegrationsV1alphaAuthTokenResponse' auth_token: Auth token credential
        :param str credential_type: Credential type associated with auth config.
        :param 'GoogleCloudIntegrationsV1alphaJwtResponse' jwt: JWT credential
        :param 'GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse' oauth2_authorization_code: The api_key and oauth2_implicit are not covered in v1 and will be picked up once v1 is implemented. ApiKey api_key = 3; OAuth2 authorization code credential
        :param 'GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse' oauth2_client_credentials: OAuth2Implicit oauth2_implicit = 5; OAuth2 client credentials
        :param 'GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse' oauth2_resource_owner_credentials: OAuth2 resource owner credentials
        :param 'GoogleCloudIntegrationsV1alphaOidcTokenResponse' oidc_token: Google OIDC ID Token
        :param 'GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse' service_account_credentials: Service account credential
        :param 'GoogleCloudIntegrationsV1alphaUsernameAndPasswordResponse' username_and_password: Username and password credential
        """
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "jwt", jwt)
        pulumi.set(__self__, "oauth2_authorization_code", oauth2_authorization_code)
        pulumi.set(__self__, "oauth2_client_credentials", oauth2_client_credentials)
        pulumi.set(__self__, "oauth2_resource_owner_credentials", oauth2_resource_owner_credentials)
        pulumi.set(__self__, "oidc_token", oidc_token)
        pulumi.set(__self__, "service_account_credentials", service_account_credentials)
        pulumi.set(__self__, "username_and_password", username_and_password)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> 'outputs.GoogleCloudIntegrationsV1alphaAuthTokenResponse':
        """
        Auth token credential
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type associated with auth config.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def jwt(self) -> 'outputs.GoogleCloudIntegrationsV1alphaJwtResponse':
        """
        JWT credential
        """
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter(name="oauth2AuthorizationCode")
    def oauth2_authorization_code(self) -> 'outputs.GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse':
        """
        The api_key and oauth2_implicit are not covered in v1 and will be picked up once v1 is implemented. ApiKey api_key = 3; OAuth2 authorization code credential
        """
        return pulumi.get(self, "oauth2_authorization_code")

    @property
    @pulumi.getter(name="oauth2ClientCredentials")
    def oauth2_client_credentials(self) -> 'outputs.GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse':
        """
        OAuth2Implicit oauth2_implicit = 5; OAuth2 client credentials
        """
        return pulumi.get(self, "oauth2_client_credentials")

    @property
    @pulumi.getter(name="oauth2ResourceOwnerCredentials")
    def oauth2_resource_owner_credentials(self) -> 'outputs.GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse':
        """
        OAuth2 resource owner credentials
        """
        return pulumi.get(self, "oauth2_resource_owner_credentials")

    @property
    @pulumi.getter(name="oidcToken")
    def oidc_token(self) -> 'outputs.GoogleCloudIntegrationsV1alphaOidcTokenResponse':
        """
        Google OIDC ID Token
        """
        return pulumi.get(self, "oidc_token")

    @property
    @pulumi.getter(name="serviceAccountCredentials")
    def service_account_credentials(self) -> 'outputs.GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse':
        """
        Service account credential
        """
        return pulumi.get(self, "service_account_credentials")

    @property
    @pulumi.getter(name="usernameAndPassword")
    def username_and_password(self) -> 'outputs.GoogleCloudIntegrationsV1alphaUsernameAndPasswordResponse':
        """
        Username and password credential
        """
        return pulumi.get(self, "username_and_password")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse(dict):
    """
    This message only contains a field of double number array.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleValues":
            suggest = "double_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_values: Sequence[float]):
        """
        This message only contains a field of double number array.
        :param Sequence[float] double_values: Double number array.
        """
        pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Sequence[float]:
        """
        Double number array.
        """
        return pulumi.get(self, "double_values")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse(dict):
    """
    Configuration detail of a error catch task
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCatcherId":
            suggest = "error_catcher_id"
        elif key == "errorCatcherNumber":
            suggest = "error_catcher_number"
        elif key == "startErrorTasks":
            suggest = "start_error_tasks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 error_catcher_id: str,
                 error_catcher_number: str,
                 label: str,
                 position: 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse',
                 start_error_tasks: Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse']):
        """
        Configuration detail of a error catch task
        :param str description: Optional. User-provided description intended to give more business context about the error catcher config.
        :param str error_catcher_id: An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow
        :param str error_catcher_number: A number to uniquely identify each error catcher config within the workflow on UI.
        :param str label: Optional. The user created label for a particular error catcher. Optional.
        :param 'GoogleCloudIntegrationsV1alphaCoordinateResponse' position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        :param Sequence['GoogleCloudIntegrationsV1alphaNextTaskResponse'] start_error_tasks: The set of start tasks that are to be executed for the error catch flow
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "error_catcher_number", error_catcher_number)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "start_error_tasks", start_error_tasks)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description intended to give more business context about the error catcher config.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> str:
        """
        An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow
        """
        return pulumi.get(self, "error_catcher_id")

    @property
    @pulumi.getter(name="errorCatcherNumber")
    def error_catcher_number(self) -> str:
        """
        A number to uniquely identify each error catcher config within the workflow on UI.
        """
        return pulumi.get(self, "error_catcher_number")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Optional. The user created label for a particular error catcher. Optional.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def position(self) -> 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse':
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="startErrorTasks")
    def start_error_tasks(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse']:
        """
        The set of start tasks that are to be executed for the error catch flow
        """
        return pulumi.get(self, "start_error_tasks")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaEventParameterResponse(dict):
    """
    This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus.
    """
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse'):
        """
        This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param 'GoogleCloudIntegrationsV1alphaValueTypeResponse' value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse':
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaFailurePolicyResponse(dict):
    """
    Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalTime":
            suggest = "interval_time"
        elif key == "maxRetries":
            suggest = "max_retries"
        elif key == "retryStrategy":
            suggest = "retry_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaFailurePolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaFailurePolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaFailurePolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_time: str,
                 max_retries: int,
                 retry_strategy: str):
        """
        Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
        :param str interval_time: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff.
        :param int max_retries: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        :param str retry_strategy: Defines what happens to the task upon failure.
        """
        pulumi.set(__self__, "interval_time", interval_time)
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "retry_strategy", retry_strategy)

    @property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> str:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff.
        """
        return pulumi.get(self, "interval_time")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> str:
        """
        Defines what happens to the task upon failure.
        """
        return pulumi.get(self, "retry_strategy")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaIntParameterArrayResponse(dict):
    """
    This message only contains a field of integer array.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intValues":
            suggest = "int_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaIntParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaIntParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaIntParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 int_values: Sequence[str]):
        """
        This message only contains a field of integer array.
        :param Sequence[str] int_values: Integer array.
        """
        pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Sequence[str]:
        """
        Integer array.
        """
        return pulumi.get(self, "int_values")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse(dict):
    """
    Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationPeriod":
            suggest = "aggregation_period"
        elif key == "alertThreshold":
            suggest = "alert_threshold"
        elif key == "disableAlert":
            suggest = "disable_alert"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "durationThreshold":
            suggest = "duration_threshold"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "onlyFinalAttempt":
            suggest = "only_final_attempt"
        elif key == "thresholdType":
            suggest = "threshold_type"
        elif key == "thresholdValue":
            suggest = "threshold_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_period: str,
                 alert_threshold: int,
                 disable_alert: bool,
                 display_name: str,
                 duration_threshold: str,
                 metric_type: str,
                 only_final_attempt: bool,
                 threshold_type: str,
                 threshold_value: 'outputs.GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueResponse'):
        """
        Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
        :param str aggregation_period: The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        :param int alert_threshold: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param bool disable_alert: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.
        :param str display_name: Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.
        :param str duration_threshold: Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param str metric_type: The type of metric.
        :param bool only_final_attempt: For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        :param str threshold_type: The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param 'GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueResponse' threshold_value: The metric value, above or below which the alert should be triggered.
        """
        pulumi.set(__self__, "aggregation_period", aggregation_period)
        pulumi.set(__self__, "alert_threshold", alert_threshold)
        pulumi.set(__self__, "disable_alert", disable_alert)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "duration_threshold", duration_threshold)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        pulumi.set(__self__, "threshold_type", threshold_type)
        pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> str:
        """
        The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        """
        return pulumi.get(self, "aggregation_period")

    @property
    @pulumi.getter(name="alertThreshold")
    def alert_threshold(self) -> int:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "alert_threshold")

    @property
    @pulumi.getter(name="disableAlert")
    def disable_alert(self) -> bool:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.
        """
        return pulumi.get(self, "disable_alert")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> str:
        """
        Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        The type of metric.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> bool:
        """
        For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> str:
        """
        The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> 'outputs.GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueResponse':
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueResponse(dict):
    """
    The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
    """
    def __init__(__self__, *,
                 absolute: str,
                 percentage: int):
        """
        The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
        :param str absolute: Absolute value threshold.
        :param int percentage: Percentage threshold.
        """
        pulumi.set(__self__, "absolute", absolute)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def absolute(self) -> str:
        """
        Absolute value threshold.
        """
        return pulumi.get(self, "absolute")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        Percentage threshold.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaIntegrationParameterResponse(dict):
    """
    Integration Parameter is defined in the integration config and are used to provide information about data types of the expected parameters and provide any default values if needed. They can also be used to add custom attributes. These are static in nature and should not be used for dynamic event definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "inputOutputType":
            suggest = "input_output_type"
        elif key == "isTransient":
            suggest = "is_transient"
        elif key == "jsonSchema":
            suggest = "json_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaIntegrationParameterResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaIntegrationParameterResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaIntegrationParameterResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 default_value: 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse',
                 display_name: str,
                 input_output_type: str,
                 is_transient: bool,
                 json_schema: str,
                 key: str,
                 producer: str,
                 searchable: bool):
        """
        Integration Parameter is defined in the integration config and are used to provide information about data types of the expected parameters and provide any default values if needed. They can also be used to add custom attributes. These are static in nature and should not be used for dynamic event definition.
        :param str data_type: Type of the parameter.
        :param 'GoogleCloudIntegrationsV1alphaValueTypeResponse' default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param str display_name: The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        :param str input_output_type: Specifies the input/output type for the parameter.
        :param bool is_transient: Whether this parameter is a transient parameter.
        :param str json_schema: This schema will be used to validate runtime JSON-typed values of this parameter.
        :param str key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param str producer: The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        :param bool searchable: Searchable in the execution log or not.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "input_output_type", input_output_type)
        pulumi.set(__self__, "is_transient", is_transient)
        pulumi.set(__self__, "json_schema", json_schema)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "producer", producer)
        pulumi.set(__self__, "searchable", searchable)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse':
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="inputOutputType")
    def input_output_type(self) -> str:
        """
        Specifies the input/output type for the parameter.
        """
        return pulumi.get(self, "input_output_type")

    @property
    @pulumi.getter(name="isTransient")
    def is_transient(self) -> bool:
        """
        Whether this parameter is a transient parameter.
        """
        return pulumi.get(self, "is_transient")

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> str:
        """
        This schema will be used to validate runtime JSON-typed values of this parameter.
        """
        return pulumi.get(self, "json_schema")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def producer(self) -> str:
        """
        The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        """
        return pulumi.get(self, "producer")

    @property
    @pulumi.getter
    def searchable(self) -> bool:
        """
        Searchable in the execution log or not.
        """
        return pulumi.get(self, "searchable")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaJwtResponse(dict):
    """
    Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jwtHeader":
            suggest = "jwt_header"
        elif key == "jwtPayload":
            suggest = "jwt_payload"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaJwtResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaJwtResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaJwtResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jwt: str,
                 jwt_header: str,
                 jwt_payload: str,
                 secret: str):
        """
        Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.
        :param str jwt: The token calculated by the header, payload and signature.
        :param str jwt_header: Identifies which algorithm is used to generate the signature.
        :param str jwt_payload: Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
        :param str secret: User's pre-shared secret to sign the token.
        """
        pulumi.set(__self__, "jwt", jwt)
        pulumi.set(__self__, "jwt_header", jwt_header)
        pulumi.set(__self__, "jwt_payload", jwt_payload)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def jwt(self) -> str:
        """
        The token calculated by the header, payload and signature.
        """
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter(name="jwtHeader")
    def jwt_header(self) -> str:
        """
        Identifies which algorithm is used to generate the signature.
        """
        return pulumi.get(self, "jwt_header")

    @property
    @pulumi.getter(name="jwtPayload")
    def jwt_payload(self) -> str:
        """
        Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
        """
        return pulumi.get(self, "jwt_payload")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        User's pre-shared secret to sign the token.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaMockConfigResponse(dict):
    """
    The configuration for mocking of a task during test execution Next available id: 4
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedExecutions":
            suggest = "failed_executions"
        elif key == "mockStrategy":
            suggest = "mock_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaMockConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaMockConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaMockConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_executions: str,
                 mock_strategy: str,
                 parameters: Sequence['outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse']):
        """
        The configuration for mocking of a task during test execution Next available id: 4
        :param str failed_executions: Optional. Number of times the given task should fail for failure mock strategy
        :param str mock_strategy: Mockstrategy defines how the particular task should be mocked during test execution
        :param Sequence['GoogleCloudIntegrationsV1alphaEventParameterResponse'] parameters: Optional. List of key-value pairs for specific mock strategy
        """
        pulumi.set(__self__, "failed_executions", failed_executions)
        pulumi.set(__self__, "mock_strategy", mock_strategy)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="failedExecutions")
    def failed_executions(self) -> str:
        """
        Optional. Number of times the given task should fail for failure mock strategy
        """
        return pulumi.get(self, "failed_executions")

    @property
    @pulumi.getter(name="mockStrategy")
    def mock_strategy(self) -> str:
        """
        Mockstrategy defines how the particular task should be mocked during test execution
        """
        return pulumi.get(self, "mock_strategy")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse']:
        """
        Optional. List of key-value pairs for specific mock strategy
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaNextTaskResponse(dict):
    """
    The task that is next in line to be executed, if the condition specified evaluated to true.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "taskConfigId":
            suggest = "task_config_id"
        elif key == "taskId":
            suggest = "task_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaNextTaskResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaNextTaskResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaNextTaskResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 description: str,
                 display_name: str,
                 task_config_id: str,
                 task_id: str):
        """
        The task that is next in line to be executed, if the condition specified evaluated to true.
        :param str condition: Standard filter expression for this task to become an eligible next task.
        :param str description: User-provided description intended to give additional business context about the task.
        :param str display_name: User-provided label that is attached to this edge in the UI.
        :param str task_config_id: ID of the next task.
        :param str task_id: Task number of the next task.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "task_config_id", task_config_id)
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Standard filter expression for this task to become an eligible next task.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-provided label that is attached to this edge in the UI.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="taskConfigId")
    def task_config_id(self) -> str:
        """
        ID of the next task.
        """
        return pulumi.get(self, "task_config_id")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        """
        Task number of the next task.
        """
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse(dict):
    """
    The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "applyReauthPolicy":
            suggest = "apply_reauth_policy"
        elif key == "authCode":
            suggest = "auth_code"
        elif key == "authEndpoint":
            suggest = "auth_endpoint"
        elif key == "authParams":
            suggest = "auth_params"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "requestType":
            suggest = "request_type"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "tokenParams":
            suggest = "token_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse',
                 apply_reauth_policy: bool,
                 auth_code: str,
                 auth_endpoint: str,
                 auth_params: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse',
                 client_id: str,
                 client_secret: str,
                 request_type: str,
                 scope: str,
                 token_endpoint: str,
                 token_params: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse'):
        """
        The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.
        :param 'GoogleCloudIntegrationsV1alphaAccessTokenResponse' access_token: The access token received from the token endpoint.
        :param bool apply_reauth_policy: Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.
        :param str auth_code: The Auth Code that is used to initially retrieve the access token.
        :param str auth_endpoint: The auth url endpoint to send the auth code request to.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapResponse' auth_params: The auth parameters sent along with the auth code request.
        :param str client_id: The client's id.
        :param str client_secret: The client's secret.
        :param str request_type: Represent how to pass parameters to fetch access token
        :param str scope: A space-delimited list of requested scope permissions.
        :param str token_endpoint: The token url endpoint to send the token request to.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapResponse' token_params: The token parameters sent along with the token request.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "apply_reauth_policy", apply_reauth_policy)
        pulumi.set(__self__, "auth_code", auth_code)
        pulumi.set(__self__, "auth_endpoint", auth_endpoint)
        pulumi.set(__self__, "auth_params", auth_params)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "token_params", token_params)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse':
        """
        The access token received from the token endpoint.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="applyReauthPolicy")
    def apply_reauth_policy(self) -> bool:
        """
        Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.
        """
        return pulumi.get(self, "apply_reauth_policy")

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> str:
        """
        The Auth Code that is used to initially retrieve the access token.
        """
        return pulumi.get(self, "auth_code")

    @property
    @pulumi.getter(name="authEndpoint")
    def auth_endpoint(self) -> str:
        """
        The auth url endpoint to send the auth code request to.
        """
        return pulumi.get(self, "auth_endpoint")

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse':
        """
        The auth parameters sent along with the auth code request.
        """
        return pulumi.get(self, "auth_params")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client's id.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        The token url endpoint to send the token request to.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse':
        """
        The token parameters sent along with the token request.
        """
        return pulumi.get(self, "token_params")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse(dict):
    """
    For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "requestType":
            suggest = "request_type"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "tokenParams":
            suggest = "token_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse',
                 client_id: str,
                 client_secret: str,
                 request_type: str,
                 scope: str,
                 token_endpoint: str,
                 token_params: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse'):
        """
        For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.
        :param 'GoogleCloudIntegrationsV1alphaAccessTokenResponse' access_token: Access token fetched from the authorization server.
        :param str client_id: The client's ID.
        :param str client_secret: The client's secret.
        :param str request_type: Represent how to pass parameters to fetch access token
        :param str scope: A space-delimited list of requested scope permissions.
        :param str token_endpoint: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapResponse' token_params: Token parameters for the auth request.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "token_params", token_params)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse':
        """
        Access token fetched from the authorization server.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client's ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse':
        """
        Token parameters for the auth request.
        """
        return pulumi.get(self, "token_params")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse(dict):
    """
    For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "requestType":
            suggest = "request_type"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "tokenParams":
            suggest = "token_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse',
                 client_id: str,
                 client_secret: str,
                 password: str,
                 request_type: str,
                 scope: str,
                 token_endpoint: str,
                 token_params: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse',
                 username: str):
        """
        For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.
        :param 'GoogleCloudIntegrationsV1alphaAccessTokenResponse' access_token: Access token fetched from the authorization server.
        :param str client_id: The client's ID.
        :param str client_secret: The client's secret.
        :param str password: The user's password.
        :param str request_type: Represent how to pass parameters to fetch access token
        :param str scope: A space-delimited list of requested scope permissions.
        :param str token_endpoint: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapResponse' token_params: Token parameters for the auth request.
        :param str username: The user's username.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "token_params", token_params)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> 'outputs.GoogleCloudIntegrationsV1alphaAccessTokenResponse':
        """
        Access token fetched from the authorization server.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client's ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The user's password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapResponse':
        """
        Token parameters for the auth request.
        """
        return pulumi.get(self, "token_params")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The user's username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaOidcTokenResponse(dict):
    """
    OIDC Token
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountEmail":
            suggest = "service_account_email"
        elif key == "tokenExpireTime":
            suggest = "token_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaOidcTokenResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaOidcTokenResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaOidcTokenResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: str,
                 service_account_email: str,
                 token: str,
                 token_expire_time: str):
        """
        OIDC Token
        :param str audience: Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
        :param str service_account_email: The service account email to be used as the identity for the token.
        :param str token: ID token obtained for the service account
        :param str token_expire_time: The approximate time until the token retrieved is valid.
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "service_account_email", service_account_email)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "token_expire_time", token_expire_time)

    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> str:
        """
        The service account email to be used as the identity for the token.
        """
        return pulumi.get(self, "service_account_email")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        ID token obtained for the service account
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenExpireTime")
    def token_expire_time(self) -> str:
        """
        The approximate time until the token retrieved is valid.
        """
        return pulumi.get(self, "token_expire_time")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaParameterMapEntryResponse(dict):
    """
    Entry is a pair of key and value.
    """
    def __init__(__self__, *,
                 key: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapFieldResponse',
                 value: 'outputs.GoogleCloudIntegrationsV1alphaParameterMapFieldResponse'):
        """
        Entry is a pair of key and value.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapFieldResponse' key: Key of the map entry.
        :param 'GoogleCloudIntegrationsV1alphaParameterMapFieldResponse' value: Value of the map entry.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapFieldResponse':
        """
        Key of the map entry.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.GoogleCloudIntegrationsV1alphaParameterMapFieldResponse':
        """
        Value of the map entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaParameterMapFieldResponse(dict):
    """
    Field represents either the key or value in an entry.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "literalValue":
            suggest = "literal_value"
        elif key == "referenceKey":
            suggest = "reference_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaParameterMapFieldResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaParameterMapFieldResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaParameterMapFieldResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 literal_value: 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse',
                 reference_key: str):
        """
        Field represents either the key or value in an entry.
        :param 'GoogleCloudIntegrationsV1alphaValueTypeResponse' literal_value: Passing a literal value.
        :param str reference_key: Referencing one of the Integration variables.
        """
        pulumi.set(__self__, "literal_value", literal_value)
        pulumi.set(__self__, "reference_key", reference_key)

    @property
    @pulumi.getter(name="literalValue")
    def literal_value(self) -> 'outputs.GoogleCloudIntegrationsV1alphaValueTypeResponse':
        """
        Passing a literal value.
        """
        return pulumi.get(self, "literal_value")

    @property
    @pulumi.getter(name="referenceKey")
    def reference_key(self) -> str:
        """
        Referencing one of the Integration variables.
        """
        return pulumi.get(self, "reference_key")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaParameterMapResponse(dict):
    """
    A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyType":
            suggest = "key_type"
        elif key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaParameterMapResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaParameterMapResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaParameterMapResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entries: Sequence['outputs.GoogleCloudIntegrationsV1alphaParameterMapEntryResponse'],
                 key_type: str,
                 value_type: str):
        """
        A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.
        :param Sequence['GoogleCloudIntegrationsV1alphaParameterMapEntryResponse'] entries: A list of parameter map entries.
        :param str key_type: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.
        :param str value_type: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        pulumi.set(__self__, "entries", entries)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaParameterMapEntryResponse']:
        """
        A list of parameter map entries.
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        """
        Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse(dict):
    """
    Represents the service account which can be used to generate access token for authenticating the service call.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaServiceAccountCredentialsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: str,
                 service_account: str):
        """
        Represents the service account which can be used to generate access token for authenticating the service call.
        :param str scope: A space-delimited list of requested scope permissions.
        :param str service_account: Name of the service account that has the permission to make the request.
        """
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Name of the service account that has the permission to make the request.
        """
        return pulumi.get(self, "service_account")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaStringParameterArrayResponse(dict):
    """
    This message only contains a field of string array.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValues":
            suggest = "string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaStringParameterArrayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaStringParameterArrayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaStringParameterArrayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_values: Sequence[str]):
        """
        This message only contains a field of string array.
        :param Sequence[str] string_values: String array.
        """
        pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Sequence[str]:
        """
        String array.
        """
        return pulumi.get(self, "string_values")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaSuccessPolicyResponse(dict):
    """
    Policy that dictates the behavior for the task after it completes successfully.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "finalState":
            suggest = "final_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaSuccessPolicyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaSuccessPolicyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaSuccessPolicyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 final_state: str):
        """
        Policy that dictates the behavior for the task after it completes successfully.
        :param str final_state: State to which the execution snapshot status will be set if the task succeeds.
        """
        pulumi.set(__self__, "final_state", final_state)

    @property
    @pulumi.getter(name="finalState")
    def final_state(self) -> str:
        """
        State to which the execution snapshot status will be set if the task succeeds.
        """
        return pulumi.get(self, "final_state")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaTaskConfigResponse(dict):
    """
    The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "errorCatcherId":
            suggest = "error_catcher_id"
        elif key == "externalTaskType":
            suggest = "external_task_type"
        elif key == "failurePolicy":
            suggest = "failure_policy"
        elif key == "jsonValidationOption":
            suggest = "json_validation_option"
        elif key == "nextTasks":
            suggest = "next_tasks"
        elif key == "nextTasksExecutionPolicy":
            suggest = "next_tasks_execution_policy"
        elif key == "successPolicy":
            suggest = "success_policy"
        elif key == "synchronousCallFailurePolicy":
            suggest = "synchronous_call_failure_policy"
        elif key == "taskExecutionStrategy":
            suggest = "task_execution_strategy"
        elif key == "taskId":
            suggest = "task_id"
        elif key == "taskTemplate":
            suggest = "task_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaTaskConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaTaskConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaTaskConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 error_catcher_id: str,
                 external_task_type: str,
                 failure_policy: 'outputs.GoogleCloudIntegrationsV1alphaFailurePolicyResponse',
                 json_validation_option: str,
                 next_tasks: Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse'],
                 next_tasks_execution_policy: str,
                 parameters: Mapping[str, 'outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse'],
                 position: 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse',
                 success_policy: 'outputs.GoogleCloudIntegrationsV1alphaSuccessPolicyResponse',
                 synchronous_call_failure_policy: 'outputs.GoogleCloudIntegrationsV1alphaFailurePolicyResponse',
                 task: str,
                 task_execution_strategy: str,
                 task_id: str,
                 task_template: str):
        """
        The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
        :param str description: Optional. User-provided description intended to give additional business context about the task.
        :param str display_name: Optional. User-provided label that is attached to this TaskConfig in the UI.
        :param str error_catcher_id: Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param str external_task_type: Optional. External task type of the task
        :param 'GoogleCloudIntegrationsV1alphaFailurePolicyResponse' failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        :param str json_validation_option: Optional. If set, overrides the option configured in the Task implementation class.
        :param Sequence['GoogleCloudIntegrationsV1alphaNextTaskResponse'] next_tasks: Optional. The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        :param str next_tasks_execution_policy: Optional. The policy dictating the execution of the next set of tasks for the current task.
        :param Mapping[str, 'GoogleCloudIntegrationsV1alphaEventParameterResponse'] parameters: Optional. The customized parameters the user can pass to this task.
        :param 'GoogleCloudIntegrationsV1alphaCoordinateResponse' position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        :param 'GoogleCloudIntegrationsV1alphaSuccessPolicyResponse' success_policy: Optional. Determines what action to take upon successful task completion.
        :param 'GoogleCloudIntegrationsV1alphaFailurePolicyResponse' synchronous_call_failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        :param str task: Optional. The name for the task.
        :param str task_execution_strategy: Optional. The policy dictating the execution strategy of this task.
        :param str task_id: The identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_id`).
        :param str task_template: Optional. Used to define task-template name if task is of type task-template
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "external_task_type", external_task_type)
        pulumi.set(__self__, "failure_policy", failure_policy)
        pulumi.set(__self__, "json_validation_option", json_validation_option)
        pulumi.set(__self__, "next_tasks", next_tasks)
        pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "success_policy", success_policy)
        pulumi.set(__self__, "synchronous_call_failure_policy", synchronous_call_failure_policy)
        pulumi.set(__self__, "task", task)
        pulumi.set(__self__, "task_execution_strategy", task_execution_strategy)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_template", task_template)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. User-provided label that is attached to this TaskConfig in the UI.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> str:
        """
        Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @property
    @pulumi.getter(name="externalTaskType")
    def external_task_type(self) -> str:
        """
        Optional. External task type of the task
        """
        return pulumi.get(self, "external_task_type")

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> 'outputs.GoogleCloudIntegrationsV1alphaFailurePolicyResponse':
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        """
        return pulumi.get(self, "failure_policy")

    @property
    @pulumi.getter(name="jsonValidationOption")
    def json_validation_option(self) -> str:
        """
        Optional. If set, overrides the option configured in the Task implementation class.
        """
        return pulumi.get(self, "json_validation_option")

    @property
    @pulumi.getter(name="nextTasks")
    def next_tasks(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse']:
        """
        Optional. The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        """
        return pulumi.get(self, "next_tasks")

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> str:
        """
        Optional. The policy dictating the execution of the next set of tasks for the current task.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, 'outputs.GoogleCloudIntegrationsV1alphaEventParameterResponse']:
        """
        Optional. The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def position(self) -> 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse':
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="successPolicy")
    def success_policy(self) -> 'outputs.GoogleCloudIntegrationsV1alphaSuccessPolicyResponse':
        """
        Optional. Determines what action to take upon successful task completion.
        """
        return pulumi.get(self, "success_policy")

    @property
    @pulumi.getter(name="synchronousCallFailurePolicy")
    def synchronous_call_failure_policy(self) -> 'outputs.GoogleCloudIntegrationsV1alphaFailurePolicyResponse':
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        """
        return pulumi.get(self, "synchronous_call_failure_policy")

    @property
    @pulumi.getter
    def task(self) -> str:
        """
        Optional. The name for the task.
        """
        return pulumi.get(self, "task")

    @property
    @pulumi.getter(name="taskExecutionStrategy")
    def task_execution_strategy(self) -> str:
        """
        Optional. The policy dictating the execution strategy of this task.
        """
        return pulumi.get(self, "task_execution_strategy")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        """
        The identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_id`).
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskTemplate")
    def task_template(self) -> str:
        """
        Optional. Used to define task-template name if task is of type task-template
        """
        return pulumi.get(self, "task_template")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaTestTaskConfigResponse(dict):
    """
    The task mock configuration details and assertions for functional tests. Next available id: 5
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mockConfig":
            suggest = "mock_config"
        elif key == "taskNumber":
            suggest = "task_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaTestTaskConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaTestTaskConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaTestTaskConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertions: Sequence['outputs.GoogleCloudIntegrationsV1alphaAssertionResponse'],
                 mock_config: 'outputs.GoogleCloudIntegrationsV1alphaMockConfigResponse',
                 task: str,
                 task_number: str):
        """
        The task mock configuration details and assertions for functional tests. Next available id: 5
        :param Sequence['GoogleCloudIntegrationsV1alphaAssertionResponse'] assertions: Optional. List of conditions or expressions which should be evaluated to true unless there is a bug/problem in the integration. These are evaluated one the task execution is completed as per the mock strategy in test case
        :param 'GoogleCloudIntegrationsV1alphaMockConfigResponse' mock_config: Optional. Defines how to mock the given task during test execution
        :param str task: This defines in the test case, the task name in integration which will be mocked by this test task config
        :param str task_number: This defines in the test case, the task in integration which will be mocked by this test task config
        """
        pulumi.set(__self__, "assertions", assertions)
        pulumi.set(__self__, "mock_config", mock_config)
        pulumi.set(__self__, "task", task)
        pulumi.set(__self__, "task_number", task_number)

    @property
    @pulumi.getter
    def assertions(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaAssertionResponse']:
        """
        Optional. List of conditions or expressions which should be evaluated to true unless there is a bug/problem in the integration. These are evaluated one the task execution is completed as per the mock strategy in test case
        """
        return pulumi.get(self, "assertions")

    @property
    @pulumi.getter(name="mockConfig")
    def mock_config(self) -> 'outputs.GoogleCloudIntegrationsV1alphaMockConfigResponse':
        """
        Optional. Defines how to mock the given task during test execution
        """
        return pulumi.get(self, "mock_config")

    @property
    @pulumi.getter
    def task(self) -> str:
        """
        This defines in the test case, the task name in integration which will be mocked by this test task config
        """
        return pulumi.get(self, "task")

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> str:
        """
        This defines in the test case, the task in integration which will be mocked by this test task config
        """
        return pulumi.get(self, "task_number")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaTriggerConfigResponse(dict):
    """
    Configuration detail of a trigger.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertConfig":
            suggest = "alert_config"
        elif key == "cloudSchedulerConfig":
            suggest = "cloud_scheduler_config"
        elif key == "errorCatcherId":
            suggest = "error_catcher_id"
        elif key == "nextTasksExecutionPolicy":
            suggest = "next_tasks_execution_policy"
        elif key == "startTasks":
            suggest = "start_tasks"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "triggerNumber":
            suggest = "trigger_number"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaTriggerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaTriggerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaTriggerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_config: Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse'],
                 cloud_scheduler_config: 'outputs.GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse',
                 description: str,
                 error_catcher_id: str,
                 label: str,
                 next_tasks_execution_policy: str,
                 position: 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse',
                 properties: Mapping[str, str],
                 start_tasks: Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse'],
                 trigger: str,
                 trigger_id: str,
                 trigger_number: str,
                 trigger_type: str):
        """
        Configuration detail of a trigger.
        :param Sequence['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse'] alert_config: Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.
        :param 'GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse' cloud_scheduler_config: Optional. Cloud Scheduler Trigger related metadata
        :param str description: Optional. User-provided description intended to give additional business context about the task.
        :param str error_catcher_id: Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param str label: Optional. The user created label for a particular trigger.
        :param str next_tasks_execution_policy: Optional. Dictates how next tasks will be executed.
        :param 'GoogleCloudIntegrationsV1alphaCoordinateResponse' position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        :param Mapping[str, str] properties: Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Pub/sub triggers.
        :param Sequence['GoogleCloudIntegrationsV1alphaNextTaskResponse'] start_tasks: Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).
        :param str trigger: Optional. Name of the trigger. Example: "API Trigger", "Cloud Pub Sub Trigger" When set will be sent out to monitoring dashabord for tracking purpose.
        :param str trigger_id: Optional. The backend trigger ID.
        :param str trigger_number: A number to uniquely identify each trigger config within the integration on UI.
        :param str trigger_type: Optional. Type of trigger
        """
        pulumi.set(__self__, "alert_config", alert_config)
        pulumi.set(__self__, "cloud_scheduler_config", cloud_scheduler_config)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "start_tasks", start_tasks)
        pulumi.set(__self__, "trigger", trigger)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "trigger_number", trigger_number)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="alertConfig")
    def alert_config(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationAlertConfigResponse']:
        """
        Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.
        """
        return pulumi.get(self, "alert_config")

    @property
    @pulumi.getter(name="cloudSchedulerConfig")
    def cloud_scheduler_config(self) -> 'outputs.GoogleCloudIntegrationsV1alphaCloudSchedulerConfigResponse':
        """
        Optional. Cloud Scheduler Trigger related metadata
        """
        return pulumi.get(self, "cloud_scheduler_config")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> str:
        """
        Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Optional. The user created label for a particular trigger.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> str:
        """
        Optional. Dictates how next tasks will be executed.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @property
    @pulumi.getter
    def position(self) -> 'outputs.GoogleCloudIntegrationsV1alphaCoordinateResponse':
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        """
        Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Pub/sub triggers.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="startTasks")
    def start_tasks(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaNextTaskResponse']:
        """
        Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).
        """
        return pulumi.get(self, "start_tasks")

    @property
    @pulumi.getter
    def trigger(self) -> str:
        """
        Optional. Name of the trigger. Example: "API Trigger", "Cloud Pub Sub Trigger" When set will be sent out to monitoring dashabord for tracking purpose.
        """
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> str:
        """
        Optional. The backend trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="triggerNumber")
    def trigger_number(self) -> str:
        """
        A number to uniquely identify each trigger config within the integration on UI.
        """
        return pulumi.get(self, "trigger_number")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> str:
        """
        Optional. Type of trigger
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaUsernameAndPasswordResponse(dict):
    """
    Username and password pair.
    """
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        Username and password pair.
        :param str password: Password to be used
        :param str username: Username to be used
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password to be used
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username to be used
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GoogleCloudIntegrationsV1alphaValueTypeResponse(dict):
    """
    The type of the parameter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanArray":
            suggest = "boolean_array"
        elif key == "booleanValue":
            suggest = "boolean_value"
        elif key == "doubleArray":
            suggest = "double_array"
        elif key == "doubleValue":
            suggest = "double_value"
        elif key == "intArray":
            suggest = "int_array"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "jsonValue":
            suggest = "json_value"
        elif key == "stringArray":
            suggest = "string_array"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleCloudIntegrationsV1alphaValueTypeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleCloudIntegrationsV1alphaValueTypeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleCloudIntegrationsV1alphaValueTypeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_array: 'outputs.GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse',
                 boolean_value: bool,
                 double_array: 'outputs.GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse',
                 double_value: float,
                 int_array: 'outputs.GoogleCloudIntegrationsV1alphaIntParameterArrayResponse',
                 int_value: str,
                 json_value: str,
                 string_array: 'outputs.GoogleCloudIntegrationsV1alphaStringParameterArrayResponse',
                 string_value: str):
        """
        The type of the parameter.
        :param 'GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse' boolean_array: Boolean Array.
        :param bool boolean_value: Boolean.
        :param 'GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse' double_array: Double Number Array.
        :param float double_value: Double Number.
        :param 'GoogleCloudIntegrationsV1alphaIntParameterArrayResponse' int_array: Integer Array.
        :param str int_value: Integer.
        :param str json_value: Json.
        :param 'GoogleCloudIntegrationsV1alphaStringParameterArrayResponse' string_array: String Array.
        :param str string_value: String.
        """
        pulumi.set(__self__, "boolean_array", boolean_array)
        pulumi.set(__self__, "boolean_value", boolean_value)
        pulumi.set(__self__, "double_array", double_array)
        pulumi.set(__self__, "double_value", double_value)
        pulumi.set(__self__, "int_array", int_array)
        pulumi.set(__self__, "int_value", int_value)
        pulumi.set(__self__, "json_value", json_value)
        pulumi.set(__self__, "string_array", string_array)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> 'outputs.GoogleCloudIntegrationsV1alphaBooleanParameterArrayResponse':
        """
        Boolean Array.
        """
        return pulumi.get(self, "boolean_array")

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> bool:
        """
        Boolean.
        """
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> 'outputs.GoogleCloudIntegrationsV1alphaDoubleParameterArrayResponse':
        """
        Double Number Array.
        """
        return pulumi.get(self, "double_array")

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> float:
        """
        Double Number.
        """
        return pulumi.get(self, "double_value")

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> 'outputs.GoogleCloudIntegrationsV1alphaIntParameterArrayResponse':
        """
        Integer Array.
        """
        return pulumi.get(self, "int_array")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> str:
        """
        Integer.
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="jsonValue")
    def json_value(self) -> str:
        """
        Json.
        """
        return pulumi.get(self, "json_value")

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> 'outputs.GoogleCloudIntegrationsV1alphaStringParameterArrayResponse':
        """
        String Array.
        """
        return pulumi.get(self, "string_array")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        """
        String.
        """
        return pulumi.get(self, "string_value")


