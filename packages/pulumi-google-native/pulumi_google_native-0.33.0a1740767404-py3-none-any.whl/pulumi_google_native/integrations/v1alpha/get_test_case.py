# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTestCaseResult',
    'AwaitableGetTestCaseResult',
    'get_test_case',
    'get_test_case_output',
]

@pulumi.output_type
class GetTestCaseResult:
    def __init__(__self__, create_time=None, creator_email=None, database_persistence_policy=None, description=None, display_name=None, last_modifier_email=None, lock_holder_email=None, name=None, test_input_parameters=None, test_task_configs=None, trigger_id=None, update_time=None, workflow_id=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if creator_email and not isinstance(creator_email, str):
            raise TypeError("Expected argument 'creator_email' to be a str")
        pulumi.set(__self__, "creator_email", creator_email)
        if database_persistence_policy and not isinstance(database_persistence_policy, str):
            raise TypeError("Expected argument 'database_persistence_policy' to be a str")
        pulumi.set(__self__, "database_persistence_policy", database_persistence_policy)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if last_modifier_email and not isinstance(last_modifier_email, str):
            raise TypeError("Expected argument 'last_modifier_email' to be a str")
        pulumi.set(__self__, "last_modifier_email", last_modifier_email)
        if lock_holder_email and not isinstance(lock_holder_email, str):
            raise TypeError("Expected argument 'lock_holder_email' to be a str")
        pulumi.set(__self__, "lock_holder_email", lock_holder_email)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if test_input_parameters and not isinstance(test_input_parameters, list):
            raise TypeError("Expected argument 'test_input_parameters' to be a list")
        pulumi.set(__self__, "test_input_parameters", test_input_parameters)
        if test_task_configs and not isinstance(test_task_configs, list):
            raise TypeError("Expected argument 'test_task_configs' to be a list")
        pulumi.set(__self__, "test_task_configs", test_task_configs)
        if trigger_id and not isinstance(trigger_id, str):
            raise TypeError("Expected argument 'trigger_id' to be a str")
        pulumi.set(__self__, "trigger_id", trigger_id)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if workflow_id and not isinstance(workflow_id, str):
            raise TypeError("Expected argument 'workflow_id' to be a str")
        pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> str:
        """
        Optional. The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "creator_email")

    @property
    @pulumi.getter(name="databasePersistencePolicy")
    def database_persistence_policy(self) -> str:
        """
        Optional. Various policies for how to persist the test execution info including execution info, execution export info, execution metadata index and execution param index..
        """
        return pulumi.get(self, "database_persistence_policy")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the test case.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of test case.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lastModifierEmail")
    def last_modifier_email(self) -> str:
        """
        The last modifer's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "last_modifier_email")

    @property
    @pulumi.getter(name="lockHolderEmail")
    def lock_holder_email(self) -> str:
        """
        Optional. The edit lock holder's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "lock_holder_email")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto-generated primary key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="testInputParameters")
    def test_input_parameters(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationParameterResponse']:
        """
        Optional. Parameters that are expected to be passed to the test case when the test case is triggered. This gives the user the ability to provide default values. This should include all the output variables of the trigger as input variables.
        """
        return pulumi.get(self, "test_input_parameters")

    @property
    @pulumi.getter(name="testTaskConfigs")
    def test_task_configs(self) -> Sequence['outputs.GoogleCloudIntegrationsV1alphaTestTaskConfigResponse']:
        """
        Optional. However, the test case doesn't mock or assert anything without test_task_configs.
        """
        return pulumi.get(self, "test_task_configs")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> str:
        """
        This defines the trigger ID in workflow which is considered to be executed as starting point of the test case
        """
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Auto-generated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> str:
        """
        ID of the workflow with which this test case is associated
        """
        return pulumi.get(self, "workflow_id")


class AwaitableGetTestCaseResult(GetTestCaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTestCaseResult(
            create_time=self.create_time,
            creator_email=self.creator_email,
            database_persistence_policy=self.database_persistence_policy,
            description=self.description,
            display_name=self.display_name,
            last_modifier_email=self.last_modifier_email,
            lock_holder_email=self.lock_holder_email,
            name=self.name,
            test_input_parameters=self.test_input_parameters,
            test_task_configs=self.test_task_configs,
            trigger_id=self.trigger_id,
            update_time=self.update_time,
            workflow_id=self.workflow_id)


def get_test_case(integration_id: Optional[str] = None,
                  location: Optional[str] = None,
                  project: Optional[str] = None,
                  test_case_id: Optional[str] = None,
                  version_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTestCaseResult:
    """
    Get a test case
    """
    __args__ = dict()
    __args__['integrationId'] = integration_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['testCaseId'] = test_case_id
    __args__['versionId'] = version_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:integrations/v1alpha:getTestCase', __args__, opts=opts, typ=GetTestCaseResult).value

    return AwaitableGetTestCaseResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        creator_email=pulumi.get(__ret__, 'creator_email'),
        database_persistence_policy=pulumi.get(__ret__, 'database_persistence_policy'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        last_modifier_email=pulumi.get(__ret__, 'last_modifier_email'),
        lock_holder_email=pulumi.get(__ret__, 'lock_holder_email'),
        name=pulumi.get(__ret__, 'name'),
        test_input_parameters=pulumi.get(__ret__, 'test_input_parameters'),
        test_task_configs=pulumi.get(__ret__, 'test_task_configs'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'),
        update_time=pulumi.get(__ret__, 'update_time'),
        workflow_id=pulumi.get(__ret__, 'workflow_id'))


@_utilities.lift_output_func(get_test_case)
def get_test_case_output(integration_id: Optional[pulumi.Input[str]] = None,
                         location: Optional[pulumi.Input[str]] = None,
                         project: Optional[pulumi.Input[Optional[str]]] = None,
                         test_case_id: Optional[pulumi.Input[str]] = None,
                         version_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTestCaseResult]:
    """
    Get a test case
    """
    ...
