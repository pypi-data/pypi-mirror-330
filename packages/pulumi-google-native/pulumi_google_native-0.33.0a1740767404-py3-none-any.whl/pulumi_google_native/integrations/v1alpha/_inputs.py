# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'EnterpriseCrmEventbusProtoAttributesArgs',
    'EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs',
    'EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs',
    'EnterpriseCrmEventbusProtoBooleanParameterArrayArgs',
    'EnterpriseCrmEventbusProtoCloudSchedulerConfigArgs',
    'EnterpriseCrmEventbusProtoCombinedConditionArgs',
    'EnterpriseCrmEventbusProtoConditionArgs',
    'EnterpriseCrmEventbusProtoCoordinateArgs',
    'EnterpriseCrmEventbusProtoDoubleArrayArgs',
    'EnterpriseCrmEventbusProtoDoubleParameterArrayArgs',
    'EnterpriseCrmEventbusProtoEventBusPropertiesArgs',
    'EnterpriseCrmEventbusProtoEventParametersArgs',
    'EnterpriseCrmEventbusProtoFailurePolicyArgs',
    'EnterpriseCrmEventbusProtoIntArrayArgs',
    'EnterpriseCrmEventbusProtoIntParameterArrayArgs',
    'EnterpriseCrmEventbusProtoLogSettingsArgs',
    'EnterpriseCrmEventbusProtoNextTaskArgs',
    'EnterpriseCrmEventbusProtoNextTeardownTaskArgs',
    'EnterpriseCrmEventbusProtoNodeIdentifierArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexArgs',
    'EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs',
    'EnterpriseCrmEventbusProtoParameterEntryArgs',
    'EnterpriseCrmEventbusProtoParameterValueTypeArgs',
    'EnterpriseCrmEventbusProtoPropertyEntryArgs',
    'EnterpriseCrmEventbusProtoProtoParameterArrayArgs',
    'EnterpriseCrmEventbusProtoSerializedObjectParameterArgs',
    'EnterpriseCrmEventbusProtoStringArrayArgs',
    'EnterpriseCrmEventbusProtoStringParameterArrayArgs',
    'EnterpriseCrmEventbusProtoSuccessPolicyArgs',
    'EnterpriseCrmEventbusProtoTaskAlertConfigArgs',
    'EnterpriseCrmEventbusProtoTaskMetadataAdminArgs',
    'EnterpriseCrmEventbusProtoTaskMetadataArgs',
    'EnterpriseCrmEventbusProtoTaskUiConfigArgs',
    'EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs',
    'EnterpriseCrmEventbusProtoTeardownTaskConfigArgs',
    'EnterpriseCrmEventbusProtoTeardownArgs',
    'EnterpriseCrmEventbusProtoTriggerCriteriaArgs',
    'EnterpriseCrmEventbusProtoValueTypeArgs',
    'EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs',
    'EnterpriseCrmEventbusStatsDimensionsArgs',
    'EnterpriseCrmEventbusStatsArgs',
    'EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayArgs',
    'EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayArgs',
    'EnterpriseCrmFrontendsEventbusProtoEventParametersArgs',
    'EnterpriseCrmFrontendsEventbusProtoIntParameterArrayArgs',
    'EnterpriseCrmFrontendsEventbusProtoParamSpecEntryArgs',
    'EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs',
    'EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs',
    'EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs',
    'EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayArgs',
    'EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs',
    'EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterArgs',
    'EnterpriseCrmFrontendsEventbusProtoStringParameterArrayArgs',
    'EnterpriseCrmFrontendsEventbusProtoTaskConfigArgs',
    'EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs',
    'EnterpriseCrmFrontendsEventbusProtoTriggerConfigArgs',
    'EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs',
    'EnterpriseCrmFrontendsEventbusProtoWorkflowParametersArgs',
    'EnterpriseCrmLoggingGwsFieldLimitsArgs',
    'EnterpriseCrmLoggingGwsSanitizeOptionsArgs',
    'GoogleCloudIntegrationsV1alphaAccessTokenArgs',
    'GoogleCloudIntegrationsV1alphaAssertionArgs',
    'GoogleCloudIntegrationsV1alphaAuthTokenArgs',
    'GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs',
    'GoogleCloudIntegrationsV1alphaClientCertificateArgs',
    'GoogleCloudIntegrationsV1alphaCloudLoggingDetailsArgs',
    'GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs',
    'GoogleCloudIntegrationsV1alphaCoordinateArgs',
    'GoogleCloudIntegrationsV1alphaCredentialArgs',
    'GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs',
    'GoogleCloudIntegrationsV1alphaErrorCatcherConfigArgs',
    'GoogleCloudIntegrationsV1alphaEventParameterArgs',
    'GoogleCloudIntegrationsV1alphaFailurePolicyArgs',
    'GoogleCloudIntegrationsV1alphaIntParameterArrayArgs',
    'GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs',
    'GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs',
    'GoogleCloudIntegrationsV1alphaIntegrationParameterArgs',
    'GoogleCloudIntegrationsV1alphaJwtArgs',
    'GoogleCloudIntegrationsV1alphaMockConfigArgs',
    'GoogleCloudIntegrationsV1alphaNextTaskArgs',
    'GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs',
    'GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs',
    'GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs',
    'GoogleCloudIntegrationsV1alphaOidcTokenArgs',
    'GoogleCloudIntegrationsV1alphaParameterMapEntryArgs',
    'GoogleCloudIntegrationsV1alphaParameterMapFieldArgs',
    'GoogleCloudIntegrationsV1alphaParameterMapArgs',
    'GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs',
    'GoogleCloudIntegrationsV1alphaStringParameterArrayArgs',
    'GoogleCloudIntegrationsV1alphaSuccessPolicyArgs',
    'GoogleCloudIntegrationsV1alphaTaskConfigArgs',
    'GoogleCloudIntegrationsV1alphaTestTaskConfigArgs',
    'GoogleCloudIntegrationsV1alphaTriggerConfigArgs',
    'GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs',
    'GoogleCloudIntegrationsV1alphaValueTypeArgs',
]

@pulumi.input_type
class EnterpriseCrmEventbusProtoAttributesArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesDataType']] = None,
                 default_value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 is_searchable: Optional[pulumi.Input[bool]] = None,
                 log_settings: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 searchable: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesSearchable']] = None,
                 task_visibility: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Attributes are additional options that can be associated with each event property. For more information, see
        :param pulumi.Input['EnterpriseCrmEventbusProtoAttributesDataType'] data_type: Things like URL, Email, Currency, Timestamp (rather than string, int64...)
        :param pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs'] default_value: Used to define defaults.
        :param pulumi.Input[bool] is_required: Required for event execution. The validation will be done by the event bus when the event is triggered.
        :param pulumi.Input[bool] is_searchable: Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.
        :param pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsArgs'] log_settings: See
        :param pulumi.Input[bool] read_only: Used to indicate if the ParameterEntry is a read only field or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] task_visibility: List of tasks that can view this property, if empty then all.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if is_searchable is not None:
            warnings.warn("""Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.""", DeprecationWarning)
            pulumi.log.warn("""is_searchable is deprecated: Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.""")
        if is_searchable is not None:
            pulumi.set(__self__, "is_searchable", is_searchable)
        if log_settings is not None:
            pulumi.set(__self__, "log_settings", log_settings)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if task_visibility is not None:
            pulumi.set(__self__, "task_visibility", task_visibility)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesDataType']]:
        """
        Things like URL, Email, Currency, Timestamp (rather than string, int64...)
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesDataType']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]:
        """
        Used to define defaults.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Required for event execution. The validation will be done by the event bus when the event is triggered.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter(name="isSearchable")
    @_utilities.deprecated("""Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.""")
    def is_searchable(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.
        """
        return pulumi.get(self, "is_searchable")

    @is_searchable.setter
    def is_searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_searchable", value)

    @property
    @pulumi.getter(name="logSettings")
    def log_settings(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsArgs']]:
        """
        See
        """
        return pulumi.get(self, "log_settings")

    @log_settings.setter
    def log_settings(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsArgs']]):
        pulumi.set(self, "log_settings", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to indicate if the ParameterEntry is a read only field or not.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesSearchable']]:
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesSearchable']]):
        pulumi.set(self, "searchable", value)

    @property
    @pulumi.getter(name="taskVisibility")
    def task_visibility(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of tasks that can view this property, if empty then all.
        """
        return pulumi.get(self, "task_visibility")

    @task_visibility.setter
    def task_visibility(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "task_visibility", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs:
    def __init__(__self__, *,
                 enum_strings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterType']] = None):
        """
        List of error enums for alerts.
        """
        if enum_strings is not None:
            pulumi.set(__self__, "enum_strings", enum_strings)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)

    @property
    @pulumi.getter(name="enumStrings")
    def enum_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_strings")

    @enum_strings.setter
    def enum_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enum_strings", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterType']]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterType']]):
        pulumi.set(self, "filter_type", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs:
    def __init__(__self__, *,
                 absolute: Optional[pulumi.Input[str]] = None,
                 percentage: Optional[pulumi.Input[int]] = None):
        """
        The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
        """
        if absolute is not None:
            pulumi.set(__self__, "absolute", absolute)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def absolute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "absolute")

    @absolute.setter
    def absolute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "absolute", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoBooleanParameterArrayArgs:
    def __init__(__self__, *,
                 boolean_values: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        if boolean_values is not None:
            pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "boolean_values")

    @boolean_values.setter
    def boolean_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoCloudSchedulerConfigArgs:
    def __init__(__self__, *,
                 cron_tab: pulumi.Input[str],
                 location: pulumi.Input[str],
                 service_account_email: pulumi.Input[str],
                 error_message: Optional[pulumi.Input[str]] = None):
        """
        Cloud Scheduler Trigger configuration
        :param pulumi.Input[str] cron_tab: The cron tab of cloud scheduler trigger.
        :param pulumi.Input[str] location: The location where associated cloud scheduler job will be created
        :param pulumi.Input[str] service_account_email: Service account used by Cloud Scheduler to trigger the integration at scheduled time
        :param pulumi.Input[str] error_message: Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        pulumi.set(__self__, "cron_tab", cron_tab)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_account_email", service_account_email)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter(name="cronTab")
    def cron_tab(self) -> pulumi.Input[str]:
        """
        The cron tab of cloud scheduler trigger.
        """
        return pulumi.get(self, "cron_tab")

    @cron_tab.setter
    def cron_tab(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_tab", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location where associated cloud scheduler job will be created
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> pulumi.Input[str]:
        """
        Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_email", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoCombinedConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoConditionArgs']]]] = None):
        """
        This message recursively combines constituent conditions using logical AND.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoConditionArgs']]] conditions: A set of individual constituent conditions.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoConditionArgs']]]]:
        """
        A set of individual constituent conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoConditionArgs:
    def __init__(__self__, *,
                 event_property_key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input['EnterpriseCrmEventbusProtoConditionOperator']] = None,
                 value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']] = None):
        """
        Condition that uses `operator` to evaluate the key against the value.
        :param pulumi.Input[str] event_property_key: Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.
        :param pulumi.Input['EnterpriseCrmEventbusProtoConditionOperator'] operator: Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
        :param pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs'] value: Value that's checked for the key.
        """
        if event_property_key is not None:
            pulumi.set(__self__, "event_property_key", event_property_key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="eventPropertyKey")
    def event_property_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.
        """
        return pulumi.get(self, "event_property_key")

    @event_property_key.setter
    def event_property_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_property_key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoConditionOperator']]:
        """
        Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoConditionOperator']]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]:
        """
        Value that's checked for the key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoCoordinateArgs:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None,
                 y: Optional[pulumi.Input[int]] = None):
        """
        Represents two-dimensional positions.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoDoubleArrayArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoDoubleParameterArrayArgs:
    def __init__(__self__, *,
                 double_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if double_values is not None:
            pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "double_values")

    @double_values.setter
    def double_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "double_values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoEventBusPropertiesArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoPropertyEntryArgs']]]] = None):
        """
        LINT.IfChange This message is used for storing key value pair properties for each Event / Task in the EventBus.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoPropertyEntryArgs']]] properties: An unordered list of property entries.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoPropertyEntryArgs']]]]:
        """
        An unordered list of property entries.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoPropertyEntryArgs']]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoEventParametersArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoParameterEntryArgs']]]] = None):
        """
        LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoParameterEntryArgs']]] parameters: Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoParameterEntryArgs']]]]:
        """
        Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoParameterEntryArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoFailurePolicyArgs:
    def __init__(__self__, *,
                 interval_in_seconds: Optional[pulumi.Input[str]] = None,
                 max_num_retries: Optional[pulumi.Input[int]] = None,
                 retry_strategy: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyRetryStrategy']] = None):
        """
        Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
        :param pulumi.Input[str] interval_in_seconds: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
        :param pulumi.Input[int] max_num_retries: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        :param pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyRetryStrategy'] retry_strategy: Defines what happens to the task upon failure.
        """
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if max_num_retries is not None:
            pulumi.set(__self__, "max_num_retries", max_num_retries)
        if retry_strategy is not None:
            pulumi.set(__self__, "retry_strategy", retry_strategy)

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
        """
        return pulumi.get(self, "interval_in_seconds")

    @interval_in_seconds.setter
    def interval_in_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval_in_seconds", value)

    @property
    @pulumi.getter(name="maxNumRetries")
    def max_num_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        """
        return pulumi.get(self, "max_num_retries")

    @max_num_retries.setter
    def max_num_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_num_retries", value)

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyRetryStrategy']]:
        """
        Defines what happens to the task upon failure.
        """
        return pulumi.get(self, "retry_strategy")

    @retry_strategy.setter
    def retry_strategy(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyRetryStrategy']]):
        pulumi.set(self, "retry_strategy", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoIntArrayArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoIntParameterArrayArgs:
    def __init__(__self__, *,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "int_values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoLogSettingsArgs:
    def __init__(__self__, *,
                 log_field_name: Optional[pulumi.Input[str]] = None,
                 sanitize_options: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsArgs']] = None,
                 seed_period: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedPeriod']] = None,
                 seed_scope: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedScope']] = None,
                 shortening_limits: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsArgs']] = None):
        """
        The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
        :param pulumi.Input[str] log_field_name: The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.
        :param pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsArgs'] sanitize_options: Contains the scrubbing options, such as whether to scrub, obfuscate, etc.
        :param pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsArgs'] shortening_limits: Contains the field limits for shortening, such as max string length and max array length.
        """
        if log_field_name is not None:
            pulumi.set(__self__, "log_field_name", log_field_name)
        if sanitize_options is not None:
            pulumi.set(__self__, "sanitize_options", sanitize_options)
        if seed_period is not None:
            pulumi.set(__self__, "seed_period", seed_period)
        if seed_scope is not None:
            pulumi.set(__self__, "seed_scope", seed_scope)
        if shortening_limits is not None:
            pulumi.set(__self__, "shortening_limits", shortening_limits)

    @property
    @pulumi.getter(name="logFieldName")
    def log_field_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.
        """
        return pulumi.get(self, "log_field_name")

    @log_field_name.setter
    def log_field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_field_name", value)

    @property
    @pulumi.getter(name="sanitizeOptions")
    def sanitize_options(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsArgs']]:
        """
        Contains the scrubbing options, such as whether to scrub, obfuscate, etc.
        """
        return pulumi.get(self, "sanitize_options")

    @sanitize_options.setter
    def sanitize_options(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsArgs']]):
        pulumi.set(self, "sanitize_options", value)

    @property
    @pulumi.getter(name="seedPeriod")
    def seed_period(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedPeriod']]:
        return pulumi.get(self, "seed_period")

    @seed_period.setter
    def seed_period(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedPeriod']]):
        pulumi.set(self, "seed_period", value)

    @property
    @pulumi.getter(name="seedScope")
    def seed_scope(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedScope']]:
        return pulumi.get(self, "seed_scope")

    @seed_scope.setter
    def seed_scope(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoLogSettingsSeedScope']]):
        pulumi.set(self, "seed_scope", value)

    @property
    @pulumi.getter(name="shorteningLimits")
    def shortening_limits(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsArgs']]:
        """
        Contains the field limits for shortening, such as max string length and max array length.
        """
        return pulumi.get(self, "shortening_limits")

    @shortening_limits.setter
    def shortening_limits(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsArgs']]):
        pulumi.set(self, "shortening_limits", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoNextTaskArgs:
    def __init__(__self__, *,
                 combined_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoCombinedConditionArgs']]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 task_config_id: Optional[pulumi.Input[str]] = None,
                 task_number: Optional[pulumi.Input[str]] = None):
        """
        The task that is next in line to be executed, if the condition specified evaluated to true.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoCombinedConditionArgs']]] combined_conditions: Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`
        :param pulumi.Input[str] condition: Standard filter expression for this task to become an eligible next task.
        :param pulumi.Input[str] description: User-provided description intended to give more business context about the next task edge or condition.
        :param pulumi.Input[str] label: User-provided label that is attached to this edge in the UI.
        :param pulumi.Input[str] task_config_id: ID of the next task.
        :param pulumi.Input[str] task_number: Task number of the next task.
        """
        if combined_conditions is not None:
            warnings.warn("""Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`""", DeprecationWarning)
            pulumi.log.warn("""combined_conditions is deprecated: Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`""")
        if combined_conditions is not None:
            pulumi.set(__self__, "combined_conditions", combined_conditions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if task_config_id is not None:
            pulumi.set(__self__, "task_config_id", task_config_id)
        if task_number is not None:
            pulumi.set(__self__, "task_number", task_number)

    @property
    @pulumi.getter(name="combinedConditions")
    @_utilities.deprecated("""Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`""")
    def combined_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoCombinedConditionArgs']]]]:
        """
        Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`
        """
        return pulumi.get(self, "combined_conditions")

    @combined_conditions.setter
    def combined_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoCombinedConditionArgs']]]]):
        pulumi.set(self, "combined_conditions", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Standard filter expression for this task to become an eligible next task.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided description intended to give more business context about the next task edge or condition.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided label that is attached to this edge in the UI.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="taskConfigId")
    def task_config_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the next task.
        """
        return pulumi.get(self, "task_config_id")

    @task_config_id.setter
    def task_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_config_id", value)

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> Optional[pulumi.Input[str]]:
        """
        Task number of the next task.
        """
        return pulumi.get(self, "task_number")

    @task_number.setter
    def task_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_number", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoNextTeardownTaskArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The teardown task that is next in line to be executed. We support only sequential execution of teardown tasks (i.e. no branching).
        :param pulumi.Input[str] name: Name of the next teardown task.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the next teardown task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoNodeIdentifierArgs:
    def __init__(__self__, *,
                 element_identifier: Optional[pulumi.Input[str]] = None,
                 element_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierElementType']] = None):
        """
        Represents a node identifier (type + id). Next highest id: 3
        :param pulumi.Input[str] element_identifier: Configuration of the edge.
        :param pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierElementType'] element_type: Destination node where the edge ends. It can only be a task config.
        """
        if element_identifier is not None:
            pulumi.set(__self__, "element_identifier", element_identifier)
        if element_type is not None:
            pulumi.set(__self__, "element_type", element_type)

    @property
    @pulumi.getter(name="elementIdentifier")
    def element_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration of the edge.
        """
        return pulumi.get(self, "element_identifier")

    @element_identifier.setter
    def element_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "element_identifier", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierElementType']]:
        """
        Destination node where the edge ends. It can only be a task config.
        """
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierElementType']]):
        pulumi.set(self, "element_type", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs:
    def __init__(__self__, *,
                 descriptive_phrase: Optional[pulumi.Input[str]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 hide_default_value: Optional[pulumi.Input[bool]] = None,
                 input_display_option: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigInputDisplayOption']] = None,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 parameter_name_option: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigParameterNameOption']] = None,
                 sub_section_label: Optional[pulumi.Input[str]] = None,
                 ui_placeholder_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] descriptive_phrase: A short phrase to describe what this parameter contains.
        :param pulumi.Input[str] help_text: Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.
        :param pulumi.Input[bool] hide_default_value: Whether the default value is hidden in the UI.
        :param pulumi.Input[bool] is_hidden: Whether this field is hidden in the UI.
        :param pulumi.Input[str] label: A user-friendly label for the parameter.
        :param pulumi.Input[str] sub_section_label: A user-friendly label for subSection under which the parameter will be displayed.
        :param pulumi.Input[str] ui_placeholder_text: Placeholder text which will appear in the UI input form for this parameter.
        """
        if descriptive_phrase is not None:
            pulumi.set(__self__, "descriptive_phrase", descriptive_phrase)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if hide_default_value is not None:
            pulumi.set(__self__, "hide_default_value", hide_default_value)
        if input_display_option is not None:
            pulumi.set(__self__, "input_display_option", input_display_option)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if parameter_name_option is not None:
            pulumi.set(__self__, "parameter_name_option", parameter_name_option)
        if sub_section_label is not None:
            pulumi.set(__self__, "sub_section_label", sub_section_label)
        if ui_placeholder_text is not None:
            pulumi.set(__self__, "ui_placeholder_text", ui_placeholder_text)

    @property
    @pulumi.getter(name="descriptivePhrase")
    def descriptive_phrase(self) -> Optional[pulumi.Input[str]]:
        """
        A short phrase to describe what this parameter contains.
        """
        return pulumi.get(self, "descriptive_phrase")

    @descriptive_phrase.setter
    def descriptive_phrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptive_phrase", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter(name="hideDefaultValue")
    def hide_default_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the default value is hidden in the UI.
        """
        return pulumi.get(self, "hide_default_value")

    @hide_default_value.setter
    def hide_default_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_default_value", value)

    @property
    @pulumi.getter(name="inputDisplayOption")
    def input_display_option(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigInputDisplayOption']]:
        return pulumi.get(self, "input_display_option")

    @input_display_option.setter
    def input_display_option(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigInputDisplayOption']]):
        pulumi.set(self, "input_display_option", value)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this field is hidden in the UI.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        A user-friendly label for the parameter.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="parameterNameOption")
    def parameter_name_option(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigParameterNameOption']]:
        return pulumi.get(self, "parameter_name_option")

    @parameter_name_option.setter
    def parameter_name_option(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigParameterNameOption']]):
        pulumi.set(self, "parameter_name_option", value)

    @property
    @pulumi.getter(name="subSectionLabel")
    def sub_section_label(self) -> Optional[pulumi.Input[str]]:
        """
        A user-friendly label for subSection under which the parameter will be displayed.
        """
        return pulumi.get(self, "sub_section_label")

    @sub_section_label.setter
    def sub_section_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_section_label", value)

    @property
    @pulumi.getter(name="uiPlaceholderText")
    def ui_placeholder_text(self) -> Optional[pulumi.Input[str]]:
        """
        Placeholder text which will appear in the UI input form for this parameter.
        """
        return pulumi.get(self, "ui_placeholder_text")

    @ui_placeholder_text.setter
    def ui_placeholder_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ui_placeholder_text", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs:
    def __init__(__self__, *,
                 full_name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] full_name: The fully-qualified proto name. This message, for example, would be "enterprise.crm.eventbus.proto.ParamSpecEntry.ProtoDefinition".
        :param pulumi.Input[str] path: Path to the proto file that contains the message type's definition.
        """
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully-qualified proto name. This message, for example, would be "enterprise.crm.eventbus.proto.ParamSpecEntry.ProtoDefinition".
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the proto file that contains the message type's definition.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        """
        Range used to validate doubles and floats.
        :param pulumi.Input[float] max: The inclusive maximum of the acceptable range.
        :param pulumi.Input[float] min: The inclusive minimum of the acceptable range.
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        """
        The inclusive maximum of the acceptable range.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        """
        The inclusive minimum of the acceptable range.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None):
        """
        Range used to validate longs and ints.
        :param pulumi.Input[str] max: The inclusive maximum of the acceptable range.
        :param pulumi.Input[str] min: The inclusive minimum of the acceptable range.
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        The inclusive maximum of the acceptable range.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        The inclusive minimum of the acceptable range.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexArgs:
    def __init__(__self__, *,
                 exclusive: Optional[pulumi.Input[bool]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        """
        Rule used to validate strings.
        :param pulumi.Input[bool] exclusive: Whether the regex matcher is applied exclusively (if true, matching values will be rejected).
        :param pulumi.Input[str] regex: The regex applied to the input value(s).
        """
        if exclusive is not None:
            pulumi.set(__self__, "exclusive", exclusive)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exclusive(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the regex matcher is applied exclusively (if true, matching values will be rejected).
        """
        return pulumi.get(self, "exclusive")

    @exclusive.setter
    def exclusive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        The regex applied to the input value(s).
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs:
    def __init__(__self__, *,
                 double_range: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeArgs']] = None,
                 int_range: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeArgs']] = None,
                 string_regex: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexArgs']] = None):
        if double_range is not None:
            pulumi.set(__self__, "double_range", double_range)
        if int_range is not None:
            pulumi.set(__self__, "int_range", int_range)
        if string_regex is not None:
            pulumi.set(__self__, "string_regex", string_regex)

    @property
    @pulumi.getter(name="doubleRange")
    def double_range(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeArgs']]:
        return pulumi.get(self, "double_range")

    @double_range.setter
    def double_range(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRangeArgs']]):
        pulumi.set(self, "double_range", value)

    @property
    @pulumi.getter(name="intRange")
    def int_range(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeArgs']]:
        return pulumi.get(self, "int_range")

    @int_range.setter
    def int_range(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRangeArgs']]):
        pulumi.set(self, "int_range", value)

    @property
    @pulumi.getter(name="stringRegex")
    def string_regex(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexArgs']]:
        return pulumi.get(self, "string_regex")

    @string_regex.setter
    def string_regex(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegexArgs']]):
        pulumi.set(self, "string_regex", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParameterEntryArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParameterValueTypeArgs']] = None):
        """
        Key-value pair of EventBus parameters.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param pulumi.Input['EnterpriseCrmEventbusProtoParameterValueTypeArgs'] value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParameterValueTypeArgs']]:
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParameterValueTypeArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoParameterValueTypeArgs:
    def __init__(__self__, *,
                 boolean_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBooleanParameterArrayArgs']] = None,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleParameterArrayArgs']] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntParameterArrayArgs']] = None,
                 int_value: Optional[pulumi.Input[str]] = None,
                 proto_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoProtoParameterArrayArgs']] = None,
                 proto_value: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 serialized_object_value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSerializedObjectParameterArgs']] = None,
                 string_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringParameterArrayArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        LINT.IfChange To support various types of parameter values. Next available id: 14
        """
        if boolean_array is not None:
            pulumi.set(__self__, "boolean_array", boolean_array)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_array is not None:
            pulumi.set(__self__, "double_array", double_array)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_array is not None:
            pulumi.set(__self__, "int_array", int_array)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if proto_array is not None:
            pulumi.set(__self__, "proto_array", proto_array)
        if proto_value is not None:
            pulumi.set(__self__, "proto_value", proto_value)
        if serialized_object_value is not None:
            pulumi.set(__self__, "serialized_object_value", serialized_object_value)
        if string_array is not None:
            pulumi.set(__self__, "string_array", string_array)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBooleanParameterArrayArgs']]:
        return pulumi.get(self, "boolean_array")

    @boolean_array.setter
    def boolean_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBooleanParameterArrayArgs']]):
        pulumi.set(self, "boolean_array", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleParameterArrayArgs']]:
        return pulumi.get(self, "double_array")

    @double_array.setter
    def double_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleParameterArrayArgs']]):
        pulumi.set(self, "double_array", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntParameterArrayArgs']]:
        return pulumi.get(self, "int_array")

    @int_array.setter
    def int_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntParameterArrayArgs']]):
        pulumi.set(self, "int_array", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="protoArray")
    def proto_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoProtoParameterArrayArgs']]:
        return pulumi.get(self, "proto_array")

    @proto_array.setter
    def proto_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoProtoParameterArrayArgs']]):
        pulumi.set(self, "proto_array", value)

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "proto_value")

    @proto_value.setter
    def proto_value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "proto_value", value)

    @property
    @pulumi.getter(name="serializedObjectValue")
    def serialized_object_value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoSerializedObjectParameterArgs']]:
        return pulumi.get(self, "serialized_object_value")

    @serialized_object_value.setter
    def serialized_object_value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSerializedObjectParameterArgs']]):
        pulumi.set(self, "serialized_object_value", value)

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringParameterArrayArgs']]:
        return pulumi.get(self, "string_array")

    @string_array.setter
    def string_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringParameterArrayArgs']]):
        pulumi.set(self, "string_array", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoPropertyEntryArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']] = None):
        """
        Key-value pair of EventBus property.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding property value. This should be unique for a given fired event. The Tasks should be aware of the keys used while firing the events for them to be able to retrieve the values.
        :param pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs'] value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding property value. This should be unique for a given fired event. The Tasks should be aware of the keys used while firing the events for them to be able to retrieve the values.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]:
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoValueTypeArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoProtoParameterArrayArgs:
    def __init__(__self__, *,
                 proto_values: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        if proto_values is not None:
            pulumi.set(__self__, "proto_values", proto_values)

    @property
    @pulumi.getter(name="protoValues")
    def proto_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "proto_values")

    @proto_values.setter
    def proto_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "proto_values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoSerializedObjectParameterArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[str]] = None):
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoStringArrayArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoStringParameterArrayArgs:
    def __init__(__self__, *,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoSuccessPolicyArgs:
    def __init__(__self__, *,
                 final_state: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyFinalState']] = None):
        """
        Policy that dictates the behavior for the task after it completes successfully.
        :param pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyFinalState'] final_state: State to which the execution snapshot status will be set if the task succeeds.
        """
        if final_state is not None:
            pulumi.set(__self__, "final_state", final_state)

    @property
    @pulumi.getter(name="finalState")
    def final_state(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyFinalState']]:
        """
        State to which the execution snapshot status will be set if the task succeeds.
        """
        return pulumi.get(self, "final_state")

    @final_state.setter
    def final_state(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyFinalState']]):
        pulumi.set(self, "final_state", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTaskAlertConfigArgs:
    def __init__(__self__, *,
                 aggregation_period: Optional[pulumi.Input[str]] = None,
                 alert_disabled: Optional[pulumi.Input[bool]] = None,
                 alert_name: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 duration_threshold_ms: Optional[pulumi.Input[str]] = None,
                 error_enum_list: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']] = None,
                 metric_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigMetricType']] = None,
                 num_aggregation_periods: Optional[pulumi.Input[int]] = None,
                 only_final_attempt: Optional[pulumi.Input[bool]] = None,
                 playbook_url: Optional[pulumi.Input[str]] = None,
                 threshold_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigThresholdType']] = None,
                 threshold_value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']] = None,
                 warning_enum_list: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']] = None):
        """
        Message to be used to configure alerting in the {@code TaskConfig} protos for tasks in an event.
        :param pulumi.Input[str] aggregation_period: The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week).
        :param pulumi.Input[bool] alert_disabled: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        :param pulumi.Input[str] alert_name: A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique in within the scope of the containing workflow.
        :param pulumi.Input[str] client_id: Client associated with this alert configuration. Must be a client enabled in one of the containing workflow's triggers.
        :param pulumi.Input[str] duration_threshold_ms: Should be specified only for TASK_AVERAGE_DURATION and TASK_PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param pulumi.Input[int] num_aggregation_periods: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param pulumi.Input[bool] only_final_attempt: Only count final task attempts, not retries.
        :param pulumi.Input[str] playbook_url: Link to a playbook for resolving the issue that triggered this alert.
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigThresholdType'] threshold_type: The threshold type for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs'] threshold_value: The metric value, above or below which the alert should be triggered.
        """
        if aggregation_period is not None:
            pulumi.set(__self__, "aggregation_period", aggregation_period)
        if alert_disabled is not None:
            pulumi.set(__self__, "alert_disabled", alert_disabled)
        if alert_name is not None:
            pulumi.set(__self__, "alert_name", alert_name)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if duration_threshold_ms is not None:
            pulumi.set(__self__, "duration_threshold_ms", duration_threshold_ms)
        if error_enum_list is not None:
            pulumi.set(__self__, "error_enum_list", error_enum_list)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if num_aggregation_periods is not None:
            pulumi.set(__self__, "num_aggregation_periods", num_aggregation_periods)
        if only_final_attempt is not None:
            pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        if playbook_url is not None:
            pulumi.set(__self__, "playbook_url", playbook_url)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)
        if warning_enum_list is not None:
            pulumi.set(__self__, "warning_enum_list", warning_enum_list)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> Optional[pulumi.Input[str]]:
        """
        The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week).
        """
        return pulumi.get(self, "aggregation_period")

    @aggregation_period.setter
    def aggregation_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_period", value)

    @property
    @pulumi.getter(name="alertDisabled")
    def alert_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        """
        return pulumi.get(self, "alert_disabled")

    @alert_disabled.setter
    def alert_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_disabled", value)

    @property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> Optional[pulumi.Input[str]]:
        """
        A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique in within the scope of the containing workflow.
        """
        return pulumi.get(self, "alert_name")

    @alert_name.setter
    def alert_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_name", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client associated with this alert configuration. Must be a client enabled in one of the containing workflow's triggers.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="durationThresholdMs")
    def duration_threshold_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Should be specified only for TASK_AVERAGE_DURATION and TASK_PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold_ms")

    @duration_threshold_ms.setter
    def duration_threshold_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration_threshold_ms", value)

    @property
    @pulumi.getter(name="errorEnumList")
    def error_enum_list(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]:
        return pulumi.get(self, "error_enum_list")

    @error_enum_list.setter
    def error_enum_list(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]):
        pulumi.set(self, "error_enum_list", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigMetricType']]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigMetricType']]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter(name="numAggregationPeriods")
    def num_aggregation_periods(self) -> Optional[pulumi.Input[int]]:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "num_aggregation_periods")

    @num_aggregation_periods.setter
    def num_aggregation_periods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_aggregation_periods", value)

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> Optional[pulumi.Input[bool]]:
        """
        Only count final task attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @only_final_attempt.setter
    def only_final_attempt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_final_attempt", value)

    @property
    @pulumi.getter(name="playbookUrl")
    def playbook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Link to a playbook for resolving the issue that triggered this alert.
        """
        return pulumi.get(self, "playbook_url")

    @playbook_url.setter
    def playbook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "playbook_url", value)

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigThresholdType']]:
        """
        The threshold type for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @threshold_type.setter
    def threshold_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigThresholdType']]):
        pulumi.set(self, "threshold_type", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']]:
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']]):
        pulumi.set(self, "threshold_value", value)

    @property
    @pulumi.getter(name="warningEnumList")
    def warning_enum_list(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]:
        return pulumi.get(self, "warning_enum_list")

    @warning_enum_list.setter
    def warning_enum_list(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]):
        pulumi.set(self, "warning_enum_list", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTaskMetadataAdminArgs:
    def __init__(__self__, *,
                 google_group_email: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        """
        Admins are owners of a Task, and have all permissions on a particular task identified by the task name. By default, Eventbus periodically scans all task metadata and syncs (adds) any new admins defined here to Zanzibar.
        """
        if google_group_email is not None:
            pulumi.set(__self__, "google_group_email", google_group_email)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="googleGroupEmail")
    def google_group_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "google_group_email")

    @google_group_email.setter
    def google_group_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_group_email", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTaskMetadataArgs:
    def __init__(__self__, *,
                 active_task_name: Optional[pulumi.Input[str]] = None,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataAdminArgs']]]] = None,
                 category: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataCategory']] = None,
                 code_search_link: Optional[pulumi.Input[str]] = None,
                 default_json_validation_option: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOption']] = None,
                 default_spec: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 descriptive_name: Optional[pulumi.Input[str]] = None,
                 doc_markdown: Optional[pulumi.Input[str]] = None,
                 external_category: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataExternalCategory']] = None,
                 external_category_sequence: Optional[pulumi.Input[int]] = None,
                 external_doc_html: Optional[pulumi.Input[str]] = None,
                 external_doc_link: Optional[pulumi.Input[str]] = None,
                 external_doc_markdown: Optional[pulumi.Input[str]] = None,
                 g3_doc_link: Optional[pulumi.Input[str]] = None,
                 icon_link: Optional[pulumi.Input[str]] = None,
                 is_deprecated: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 standalone_external_doc_html: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataStatus']] = None,
                 system: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataSystem']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        TaskMetadata are attributes that are associated to every common Task we have.
        :param pulumi.Input[str] active_task_name: The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
        :param pulumi.Input[str] code_search_link: The Code Search link to the Task Java file.
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOption'] default_json_validation_option: Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
        :param pulumi.Input[str] default_spec: Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
        :param pulumi.Input[str] description: In a few sentences, describe the purpose and usage of the task.
        :param pulumi.Input[str] descriptive_name: The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
        :param pulumi.Input[str] doc_markdown: Snippet of markdown documentation to embed in the RHP for this task.
        :param pulumi.Input[int] external_category_sequence: Sequence with which the task in specific category to be displayed in task discovery panel for external users.
        :param pulumi.Input[str] external_doc_html: External-facing documention embedded in the RHP for this task.
        :param pulumi.Input[str] external_doc_link: Doc link for external-facing documentation (separate from g3doc).
        :param pulumi.Input[str] external_doc_markdown: DEPRECATED: Use external_doc_html.
        :param pulumi.Input[str] g3_doc_link: URL to the associated G3 Doc for the task if available
        :param pulumi.Input[str] icon_link: URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.
        :param pulumi.Input[bool] is_deprecated: The deprecation status of the current task. Default value is false;
        :param pulumi.Input[str] name: The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
        :param pulumi.Input[str] standalone_external_doc_html: External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataStatus'] status: Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
        """
        if active_task_name is not None:
            pulumi.set(__self__, "active_task_name", active_task_name)
        if admins is not None:
            pulumi.set(__self__, "admins", admins)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if code_search_link is not None:
            pulumi.set(__self__, "code_search_link", code_search_link)
        if default_json_validation_option is not None:
            pulumi.set(__self__, "default_json_validation_option", default_json_validation_option)
        if default_spec is not None:
            pulumi.set(__self__, "default_spec", default_spec)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if descriptive_name is not None:
            pulumi.set(__self__, "descriptive_name", descriptive_name)
        if doc_markdown is not None:
            pulumi.set(__self__, "doc_markdown", doc_markdown)
        if external_category is not None:
            pulumi.set(__self__, "external_category", external_category)
        if external_category_sequence is not None:
            pulumi.set(__self__, "external_category_sequence", external_category_sequence)
        if external_doc_html is not None:
            pulumi.set(__self__, "external_doc_html", external_doc_html)
        if external_doc_link is not None:
            pulumi.set(__self__, "external_doc_link", external_doc_link)
        if external_doc_markdown is not None:
            warnings.warn("""DEPRECATED: Use external_doc_html.""", DeprecationWarning)
            pulumi.log.warn("""external_doc_markdown is deprecated: DEPRECATED: Use external_doc_html.""")
        if external_doc_markdown is not None:
            pulumi.set(__self__, "external_doc_markdown", external_doc_markdown)
        if g3_doc_link is not None:
            pulumi.set(__self__, "g3_doc_link", g3_doc_link)
        if icon_link is not None:
            pulumi.set(__self__, "icon_link", icon_link)
        if is_deprecated is not None:
            pulumi.set(__self__, "is_deprecated", is_deprecated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if standalone_external_doc_html is not None:
            pulumi.set(__self__, "standalone_external_doc_html", standalone_external_doc_html)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="activeTaskName")
    def active_task_name(self) -> Optional[pulumi.Input[str]]:
        """
        The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
        """
        return pulumi.get(self, "active_task_name")

    @active_task_name.setter
    def active_task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_task_name", value)

    @property
    @pulumi.getter
    def admins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataAdminArgs']]]]:
        return pulumi.get(self, "admins")

    @admins.setter
    def admins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataAdminArgs']]]]):
        pulumi.set(self, "admins", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataCategory']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataCategory']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="codeSearchLink")
    def code_search_link(self) -> Optional[pulumi.Input[str]]:
        """
        The Code Search link to the Task Java file.
        """
        return pulumi.get(self, "code_search_link")

    @code_search_link.setter
    def code_search_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code_search_link", value)

    @property
    @pulumi.getter(name="defaultJsonValidationOption")
    def default_json_validation_option(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOption']]:
        """
        Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
        """
        return pulumi.get(self, "default_json_validation_option")

    @default_json_validation_option.setter
    def default_json_validation_option(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataDefaultJsonValidationOption']]):
        pulumi.set(self, "default_json_validation_option", value)

    @property
    @pulumi.getter(name="defaultSpec")
    def default_spec(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
        """
        return pulumi.get(self, "default_spec")

    @default_spec.setter
    def default_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_spec", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        In a few sentences, describe the purpose and usage of the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="descriptiveName")
    def descriptive_name(self) -> Optional[pulumi.Input[str]]:
        """
        The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
        """
        return pulumi.get(self, "descriptive_name")

    @descriptive_name.setter
    def descriptive_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptive_name", value)

    @property
    @pulumi.getter(name="docMarkdown")
    def doc_markdown(self) -> Optional[pulumi.Input[str]]:
        """
        Snippet of markdown documentation to embed in the RHP for this task.
        """
        return pulumi.get(self, "doc_markdown")

    @doc_markdown.setter
    def doc_markdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doc_markdown", value)

    @property
    @pulumi.getter(name="externalCategory")
    def external_category(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataExternalCategory']]:
        return pulumi.get(self, "external_category")

    @external_category.setter
    def external_category(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataExternalCategory']]):
        pulumi.set(self, "external_category", value)

    @property
    @pulumi.getter(name="externalCategorySequence")
    def external_category_sequence(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence with which the task in specific category to be displayed in task discovery panel for external users.
        """
        return pulumi.get(self, "external_category_sequence")

    @external_category_sequence.setter
    def external_category_sequence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_category_sequence", value)

    @property
    @pulumi.getter(name="externalDocHtml")
    def external_doc_html(self) -> Optional[pulumi.Input[str]]:
        """
        External-facing documention embedded in the RHP for this task.
        """
        return pulumi.get(self, "external_doc_html")

    @external_doc_html.setter
    def external_doc_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_doc_html", value)

    @property
    @pulumi.getter(name="externalDocLink")
    def external_doc_link(self) -> Optional[pulumi.Input[str]]:
        """
        Doc link for external-facing documentation (separate from g3doc).
        """
        return pulumi.get(self, "external_doc_link")

    @external_doc_link.setter
    def external_doc_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_doc_link", value)

    @property
    @pulumi.getter(name="externalDocMarkdown")
    @_utilities.deprecated("""DEPRECATED: Use external_doc_html.""")
    def external_doc_markdown(self) -> Optional[pulumi.Input[str]]:
        """
        DEPRECATED: Use external_doc_html.
        """
        return pulumi.get(self, "external_doc_markdown")

    @external_doc_markdown.setter
    def external_doc_markdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_doc_markdown", value)

    @property
    @pulumi.getter(name="g3DocLink")
    def g3_doc_link(self) -> Optional[pulumi.Input[str]]:
        """
        URL to the associated G3 Doc for the task if available
        """
        return pulumi.get(self, "g3_doc_link")

    @g3_doc_link.setter
    def g3_doc_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "g3_doc_link", value)

    @property
    @pulumi.getter(name="iconLink")
    def icon_link(self) -> Optional[pulumi.Input[str]]:
        """
        URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.
        """
        return pulumi.get(self, "icon_link")

    @icon_link.setter
    def icon_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_link", value)

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> Optional[pulumi.Input[bool]]:
        """
        The deprecation status of the current task. Default value is false;
        """
        return pulumi.get(self, "is_deprecated")

    @is_deprecated.setter
    def is_deprecated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deprecated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="standaloneExternalDocHtml")
    def standalone_external_doc_html(self) -> Optional[pulumi.Input[str]]:
        """
        External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
        """
        return pulumi.get(self, "standalone_external_doc_html")

    @standalone_external_doc_html.setter
    def standalone_external_doc_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_external_doc_html", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataStatus']]:
        """
        Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataSystem']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataSystem']]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTaskUiConfigArgs:
    def __init__(__self__, *,
                 task_ui_module_configs: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs']]]] = None):
        """
        Task authors would use this type to configure the UI for a particular task by specifying what UI config modules should be included to compose the UI. Learn more about config module framework:
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs']]] task_ui_module_configs: Configurations of included config modules.
        """
        if task_ui_module_configs is not None:
            pulumi.set(__self__, "task_ui_module_configs", task_ui_module_configs)

    @property
    @pulumi.getter(name="taskUiModuleConfigs")
    def task_ui_module_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs']]]]:
        """
        Configurations of included config modules.
        """
        return pulumi.get(self, "task_ui_module_configs")

    @task_ui_module_configs.setter
    def task_ui_module_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs']]]]):
        pulumi.set(self, "task_ui_module_configs", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTaskUiModuleConfigArgs:
    def __init__(__self__, *,
                 module_id: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigModuleId']] = None):
        """
        Task author would use this type to configure a config module.
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigModuleId'] module_id: ID of the config module.
        """
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigModuleId']]:
        """
        ID of the config module.
        """
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiModuleConfigModuleId']]):
        pulumi.set(self, "module_id", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTeardownTaskConfigArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 teardown_task_implementation_class_name: pulumi.Input[str],
                 creator_email: Optional[pulumi.Input[str]] = None,
                 next_teardown_task: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNextTeardownTaskArgs']] = None,
                 parameters: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']] = None,
                 properties: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventBusPropertiesArgs']] = None):
        """
        :param pulumi.Input[str] name: Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.
        :param pulumi.Input[str] teardown_task_implementation_class_name: Implementation class name.
        :param pulumi.Input[str] creator_email: The creator's email address.
        :param pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs'] parameters: The parameters the user can pass to this task.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "teardown_task_implementation_class_name", teardown_task_implementation_class_name)
        if creator_email is not None:
            pulumi.set(__self__, "creator_email", creator_email)
        if next_teardown_task is not None:
            pulumi.set(__self__, "next_teardown_task", next_teardown_task)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="teardownTaskImplementationClassName")
    def teardown_task_implementation_class_name(self) -> pulumi.Input[str]:
        """
        Implementation class name.
        """
        return pulumi.get(self, "teardown_task_implementation_class_name")

    @teardown_task_implementation_class_name.setter
    def teardown_task_implementation_class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "teardown_task_implementation_class_name", value)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> Optional[pulumi.Input[str]]:
        """
        The creator's email address.
        """
        return pulumi.get(self, "creator_email")

    @creator_email.setter
    def creator_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_email", value)

    @property
    @pulumi.getter(name="nextTeardownTask")
    def next_teardown_task(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoNextTeardownTaskArgs']]:
        return pulumi.get(self, "next_teardown_task")

    @next_teardown_task.setter
    def next_teardown_task(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNextTeardownTaskArgs']]):
        pulumi.set(self, "next_teardown_task", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']]:
        """
        The parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventBusPropertiesArgs']]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventBusPropertiesArgs']]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTeardownArgs:
    def __init__(__self__, *,
                 teardown_task_configs: pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTeardownTaskConfigArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTeardownTaskConfigArgs']]] teardown_task_configs: Required.
        """
        pulumi.set(__self__, "teardown_task_configs", teardown_task_configs)

    @property
    @pulumi.getter(name="teardownTaskConfigs")
    def teardown_task_configs(self) -> pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTeardownTaskConfigArgs']]]:
        """
        Required.
        """
        return pulumi.get(self, "teardown_task_configs")

    @teardown_task_configs.setter
    def teardown_task_configs(self, value: pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTeardownTaskConfigArgs']]]):
        pulumi.set(self, "teardown_task_configs", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoTriggerCriteriaArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 parameters: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']] = None,
                 trigger_criteria_task_implementation_class_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] condition: Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly.
        :param pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs'] parameters: Optional. To be used in TaskConfig for the implementation class.
        :param pulumi.Input[str] trigger_criteria_task_implementation_class_name: Optional. Implementation class name. The class should implement the “TypedTask” interface.
        """
        pulumi.set(__self__, "condition", condition)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if trigger_criteria_task_implementation_class_name is not None:
            pulumi.set(__self__, "trigger_criteria_task_implementation_class_name", trigger_criteria_task_implementation_class_name)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        """
        Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']]:
        """
        Optional. To be used in TaskConfig for the implementation class.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoEventParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="triggerCriteriaTaskImplementationClassName")
    def trigger_criteria_task_implementation_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Implementation class name. The class should implement the “TypedTask” interface.
        """
        return pulumi.get(self, "trigger_criteria_task_implementation_class_name")

    @trigger_criteria_task_implementation_class_name.setter
    def trigger_criteria_task_implementation_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_criteria_task_implementation_class_name", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoValueTypeArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleArrayArgs']] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntArrayArgs']] = None,
                 int_value: Optional[pulumi.Input[str]] = None,
                 proto_value: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 string_array: Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringArrayArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_array is not None:
            pulumi.set(__self__, "double_array", double_array)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_array is not None:
            pulumi.set(__self__, "int_array", int_array)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if proto_value is not None:
            pulumi.set(__self__, "proto_value", proto_value)
        if string_array is not None:
            pulumi.set(__self__, "string_array", string_array)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleArrayArgs']]:
        return pulumi.get(self, "double_array")

    @double_array.setter
    def double_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoDoubleArrayArgs']]):
        pulumi.set(self, "double_array", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntArrayArgs']]:
        return pulumi.get(self, "int_array")

    @int_array.setter
    def int_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoIntArrayArgs']]):
        pulumi.set(self, "int_array", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "proto_value")

    @proto_value.setter
    def proto_value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "proto_value", value)

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringArrayArgs']]:
        return pulumi.get(self, "string_array")

    @string_array.setter
    def string_array(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoStringArrayArgs']]):
        pulumi.set(self, "string_array", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs:
    def __init__(__self__, *,
                 aggregation_period: Optional[pulumi.Input[str]] = None,
                 alert_disabled: Optional[pulumi.Input[bool]] = None,
                 alert_name: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 duration_threshold_ms: Optional[pulumi.Input[str]] = None,
                 error_enum_list: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']] = None,
                 metric_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigMetricType']] = None,
                 num_aggregation_periods: Optional[pulumi.Input[int]] = None,
                 only_final_attempt: Optional[pulumi.Input[bool]] = None,
                 playbook_url: Optional[pulumi.Input[str]] = None,
                 threshold_type: Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigThresholdType']] = None,
                 threshold_value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']] = None,
                 warning_enum_list: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']] = None):
        """
        Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
        :param pulumi.Input[str] aggregation_period: For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        :param pulumi.Input[bool] alert_disabled: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        :param pulumi.Input[str] alert_name: A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the workflow.
        :param pulumi.Input[str] client_id: Client associated with this alert configuration.
        :param pulumi.Input[str] duration_threshold_ms: Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param pulumi.Input[int] num_aggregation_periods: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param pulumi.Input[bool] only_final_attempt: For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        :param pulumi.Input[str] playbook_url: Link to a playbook for resolving the issue that triggered this alert.
        :param pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigThresholdType'] threshold_type: The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs'] threshold_value: The metric value, above or below which the alert should be triggered.
        """
        if aggregation_period is not None:
            pulumi.set(__self__, "aggregation_period", aggregation_period)
        if alert_disabled is not None:
            pulumi.set(__self__, "alert_disabled", alert_disabled)
        if alert_name is not None:
            pulumi.set(__self__, "alert_name", alert_name)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if duration_threshold_ms is not None:
            pulumi.set(__self__, "duration_threshold_ms", duration_threshold_ms)
        if error_enum_list is not None:
            pulumi.set(__self__, "error_enum_list", error_enum_list)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if num_aggregation_periods is not None:
            pulumi.set(__self__, "num_aggregation_periods", num_aggregation_periods)
        if only_final_attempt is not None:
            pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        if playbook_url is not None:
            pulumi.set(__self__, "playbook_url", playbook_url)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)
        if warning_enum_list is not None:
            pulumi.set(__self__, "warning_enum_list", warning_enum_list)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> Optional[pulumi.Input[str]]:
        """
        For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        """
        return pulumi.get(self, "aggregation_period")

    @aggregation_period.setter
    def aggregation_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_period", value)

    @property
    @pulumi.getter(name="alertDisabled")
    def alert_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.
        """
        return pulumi.get(self, "alert_disabled")

    @alert_disabled.setter
    def alert_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_disabled", value)

    @property
    @pulumi.getter(name="alertName")
    def alert_name(self) -> Optional[pulumi.Input[str]]:
        """
        A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the workflow.
        """
        return pulumi.get(self, "alert_name")

    @alert_name.setter
    def alert_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_name", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client associated with this alert configuration.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="durationThresholdMs")
    def duration_threshold_ms(self) -> Optional[pulumi.Input[str]]:
        """
        Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold_ms")

    @duration_threshold_ms.setter
    def duration_threshold_ms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration_threshold_ms", value)

    @property
    @pulumi.getter(name="errorEnumList")
    def error_enum_list(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]:
        return pulumi.get(self, "error_enum_list")

    @error_enum_list.setter
    def error_enum_list(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]):
        pulumi.set(self, "error_enum_list", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigMetricType']]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigMetricType']]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter(name="numAggregationPeriods")
    def num_aggregation_periods(self) -> Optional[pulumi.Input[int]]:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "num_aggregation_periods")

    @num_aggregation_periods.setter
    def num_aggregation_periods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_aggregation_periods", value)

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> Optional[pulumi.Input[bool]]:
        """
        For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @only_final_attempt.setter
    def only_final_attempt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_final_attempt", value)

    @property
    @pulumi.getter(name="playbookUrl")
    def playbook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Link to a playbook for resolving the issue that triggered this alert.
        """
        return pulumi.get(self, "playbook_url")

    @playbook_url.setter
    def playbook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "playbook_url", value)

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigThresholdType']]:
        """
        The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @threshold_type.setter
    def threshold_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigThresholdType']]):
        pulumi.set(self, "threshold_type", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']]:
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValueArgs']]):
        pulumi.set(self, "threshold_value", value)

    @property
    @pulumi.getter(name="warningEnumList")
    def warning_enum_list(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]:
        return pulumi.get(self, "warning_enum_list")

    @warning_enum_list.setter
    def warning_enum_list(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListArgs']]):
        pulumi.set(self, "warning_enum_list", value)


@pulumi.input_type
class EnterpriseCrmEventbusStatsDimensionsArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 enum_filter_type: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsEnumFilterType']] = None,
                 error_enum_string: Optional[pulumi.Input[str]] = None,
                 retry_attempt: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsRetryAttempt']] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_number: Optional[pulumi.Input[str]] = None,
                 trigger_id: Optional[pulumi.Input[str]] = None,
                 warning_enum_string: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['EnterpriseCrmEventbusStatsDimensionsEnumFilterType'] enum_filter_type: Whether to include or exclude the enums matching the regex.
        :param pulumi.Input[str] trigger_id: Stats have been or will be aggregated on set fields for any semantically-meaningful combination.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if enum_filter_type is not None:
            pulumi.set(__self__, "enum_filter_type", enum_filter_type)
        if error_enum_string is not None:
            pulumi.set(__self__, "error_enum_string", error_enum_string)
        if retry_attempt is not None:
            pulumi.set(__self__, "retry_attempt", retry_attempt)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_number is not None:
            pulumi.set(__self__, "task_number", task_number)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if warning_enum_string is not None:
            pulumi.set(__self__, "warning_enum_string", warning_enum_string)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="enumFilterType")
    def enum_filter_type(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsEnumFilterType']]:
        """
        Whether to include or exclude the enums matching the regex.
        """
        return pulumi.get(self, "enum_filter_type")

    @enum_filter_type.setter
    def enum_filter_type(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsEnumFilterType']]):
        pulumi.set(self, "enum_filter_type", value)

    @property
    @pulumi.getter(name="errorEnumString")
    def error_enum_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_enum_string")

    @error_enum_string.setter
    def error_enum_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_enum_string", value)

    @property
    @pulumi.getter(name="retryAttempt")
    def retry_attempt(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsRetryAttempt']]:
        return pulumi.get(self, "retry_attempt")

    @retry_attempt.setter
    def retry_attempt(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsRetryAttempt']]):
        pulumi.set(self, "retry_attempt", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_number")

    @task_number.setter
    def task_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_number", value)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[str]]:
        """
        Stats have been or will be aggregated on set fields for any semantically-meaningful combination.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_id", value)

    @property
    @pulumi.getter(name="warningEnumString")
    def warning_enum_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_enum_string")

    @warning_enum_string.setter
    def warning_enum_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_enum_string", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_name", value)


@pulumi.input_type
class EnterpriseCrmEventbusStatsArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsArgs']] = None,
                 duration_in_seconds: Optional[pulumi.Input[float]] = None,
                 error_rate: Optional[pulumi.Input[float]] = None,
                 qps: Optional[pulumi.Input[float]] = None,
                 warning_rate: Optional[pulumi.Input[float]] = None):
        """
        Stats for the requested dimensions: QPS, duration, and error/warning rate
        :param pulumi.Input['EnterpriseCrmEventbusStatsDimensionsArgs'] dimensions: Dimensions that these stats have been aggregated on.
        :param pulumi.Input[float] duration_in_seconds: Average duration in seconds.
        :param pulumi.Input[float] error_rate: Average error rate.
        :param pulumi.Input[float] qps: Queries per second.
        :param pulumi.Input[float] warning_rate: Average warning rate.
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if duration_in_seconds is not None:
            pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        if error_rate is not None:
            pulumi.set(__self__, "error_rate", error_rate)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)
        if warning_rate is not None:
            pulumi.set(__self__, "warning_rate", warning_rate)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsArgs']]:
        """
        Dimensions that these stats have been aggregated on.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusStatsDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        Average duration in seconds.
        """
        return pulumi.get(self, "duration_in_seconds")

    @duration_in_seconds.setter
    def duration_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "duration_in_seconds", value)

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Average error rate.
        """
        return pulumi.get(self, "error_rate")

    @error_rate.setter
    def error_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "error_rate", value)

    @property
    @pulumi.getter
    def qps(self) -> Optional[pulumi.Input[float]]:
        """
        Queries per second.
        """
        return pulumi.get(self, "qps")

    @qps.setter
    def qps(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "qps", value)

    @property
    @pulumi.getter(name="warningRate")
    def warning_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Average warning rate.
        """
        return pulumi.get(self, "warning_rate")

    @warning_rate.setter
    def warning_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "warning_rate", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayArgs:
    def __init__(__self__, *,
                 boolean_values: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        if boolean_values is not None:
            pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "boolean_values")

    @boolean_values.setter
    def boolean_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_values", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayArgs:
    def __init__(__self__, *,
                 double_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if double_values is not None:
            pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "double_values")

    @double_values.setter
    def double_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "double_values", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoEventParametersArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]] = None):
        """
        LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]] parameters: Parameters are a part of Event and can be used to communicate between different tasks that are part of the same workflow execution.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]]:
        """
        Parameters are a part of Event and can be used to communicate between different tasks that are part of the same workflow execution.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoIntParameterArrayArgs:
    def __init__(__self__, *,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "int_values", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoParamSpecEntryArgs:
    def __init__(__self__, *,
                 class_name: Optional[pulumi.Input[str]] = None,
                 collection_element_class_name: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs']] = None,
                 data_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryDataType']] = None,
                 default_value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']] = None,
                 is_deprecated: Optional[pulumi.Input[bool]] = None,
                 is_output: Optional[pulumi.Input[bool]] = None,
                 json_schema: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 proto_def: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 validation_rule: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs']] = None):
        """
        Key-value pair of EventBus task parameters. Next id: 13
        :param pulumi.Input[str] class_name: The FQCN of the Java object this represents. A string, for example, would be "java.lang.String". If this is "java.lang.Object", the parameter can be of any type.
        :param pulumi.Input[str] collection_element_class_name: If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is "java.lang.Object", the parameter is a collection of any type.
        :param pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs'] config: Optional fields, such as help text and other useful info.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryDataType'] data_type: The data type of the parameter.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs'] default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param pulumi.Input[bool] is_deprecated: If set, this entry is deprecated, so further use of this parameter should be prohibited.
        :param pulumi.Input[str] json_schema: If the data_type is JSON_VALUE, then this will define its schema.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.
        :param pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs'] proto_def: Populated if this represents a proto or proto array.
        :param pulumi.Input[bool] required: If set, the user must provide an input value for this parameter.
        :param pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs'] validation_rule: Rule used to validate inputs (individual values and collection elements) for this parameter.
        """
        if class_name is not None:
            pulumi.set(__self__, "class_name", class_name)
        if collection_element_class_name is not None:
            pulumi.set(__self__, "collection_element_class_name", collection_element_class_name)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_deprecated is not None:
            pulumi.set(__self__, "is_deprecated", is_deprecated)
        if is_output is not None:
            pulumi.set(__self__, "is_output", is_output)
        if json_schema is not None:
            pulumi.set(__self__, "json_schema", json_schema)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if proto_def is not None:
            pulumi.set(__self__, "proto_def", proto_def)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_rule is not None:
            pulumi.set(__self__, "validation_rule", validation_rule)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> Optional[pulumi.Input[str]]:
        """
        The FQCN of the Java object this represents. A string, for example, would be "java.lang.String". If this is "java.lang.Object", the parameter can be of any type.
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter(name="collectionElementClassName")
    def collection_element_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is "java.lang.Object", the parameter is a collection of any type.
        """
        return pulumi.get(self, "collection_element_class_name")

    @collection_element_class_name.setter
    def collection_element_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_element_class_name", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs']]:
        """
        Optional fields, such as help text and other useful info.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryDataType']]:
        """
        The data type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryDataType']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]:
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, this entry is deprecated, so further use of this parameter should be prohibited.
        """
        return pulumi.get(self, "is_deprecated")

    @is_deprecated.setter
    def is_deprecated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_deprecated", value)

    @property
    @pulumi.getter(name="isOutput")
    def is_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_output")

    @is_output.setter
    def is_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_output", value)

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> Optional[pulumi.Input[str]]:
        """
        If the data_type is JSON_VALUE, then this will define its schema.
        """
        return pulumi.get(self, "json_schema")

    @json_schema.setter
    def json_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_schema", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="protoDef")
    def proto_def(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs']]:
        """
        Populated if this represents a proto or proto array.
        """
        return pulumi.get(self, "proto_def")

    @proto_def.setter
    def proto_def(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinitionArgs']]):
        pulumi.set(self, "proto_def", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, the user must provide an input value for this parameter.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="validationRule")
    def validation_rule(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs']]:
        """
        Rule used to validate inputs (individual values and collection elements) for this parameter.
        """
        return pulumi.get(self, "validation_rule")

    @validation_rule.setter
    def validation_rule(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleArgs']]):
        pulumi.set(self, "validation_rule", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryArgs']]]] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecEntryArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryDataType']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']] = None):
        """
        Key-value pair of EventBus parameters.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryDataType'] data_type: Explicitly getting the type of the parameter.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs'] value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryDataType']]:
        """
        Explicitly getting the type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryDataType']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]:
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs:
    def __init__(__self__, *,
                 boolean_array: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayArgs']] = None,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_array: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayArgs']] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_array: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoIntParameterArrayArgs']] = None,
                 int_value: Optional[pulumi.Input[str]] = None,
                 json_value: Optional[pulumi.Input[str]] = None,
                 proto_array: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayArgs']] = None,
                 proto_value: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 serialized_object_value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterArgs']] = None,
                 string_array: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoStringParameterArrayArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        To support various types of parameter values. Next available id: 14
        """
        if boolean_array is not None:
            pulumi.set(__self__, "boolean_array", boolean_array)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_array is not None:
            pulumi.set(__self__, "double_array", double_array)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_array is not None:
            pulumi.set(__self__, "int_array", int_array)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if json_value is not None:
            pulumi.set(__self__, "json_value", json_value)
        if proto_array is not None:
            pulumi.set(__self__, "proto_array", proto_array)
        if proto_value is not None:
            pulumi.set(__self__, "proto_value", proto_value)
        if serialized_object_value is not None:
            pulumi.set(__self__, "serialized_object_value", serialized_object_value)
        if string_array is not None:
            pulumi.set(__self__, "string_array", string_array)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayArgs']]:
        return pulumi.get(self, "boolean_array")

    @boolean_array.setter
    def boolean_array(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoBooleanParameterArrayArgs']]):
        pulumi.set(self, "boolean_array", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayArgs']]:
        return pulumi.get(self, "double_array")

    @double_array.setter
    def double_array(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoDoubleParameterArrayArgs']]):
        pulumi.set(self, "double_array", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoIntParameterArrayArgs']]:
        return pulumi.get(self, "int_array")

    @int_array.setter
    def int_array(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoIntParameterArrayArgs']]):
        pulumi.set(self, "int_array", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="jsonValue")
    def json_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_value")

    @json_value.setter
    def json_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_value", value)

    @property
    @pulumi.getter(name="protoArray")
    def proto_array(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayArgs']]:
        return pulumi.get(self, "proto_array")

    @proto_array.setter
    def proto_array(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayArgs']]):
        pulumi.set(self, "proto_array", value)

    @property
    @pulumi.getter(name="protoValue")
    def proto_value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "proto_value")

    @proto_value.setter
    def proto_value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "proto_value", value)

    @property
    @pulumi.getter(name="serializedObjectValue")
    def serialized_object_value(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterArgs']]:
        return pulumi.get(self, "serialized_object_value")

    @serialized_object_value.setter
    def serialized_object_value(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterArgs']]):
        pulumi.set(self, "serialized_object_value", value)

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoStringParameterArrayArgs']]:
        return pulumi.get(self, "string_array")

    @string_array.setter
    def string_array(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoStringParameterArrayArgs']]):
        pulumi.set(self, "string_array", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoProtoParameterArrayArgs:
    def __init__(__self__, *,
                 proto_values: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        if proto_values is not None:
            pulumi.set(__self__, "proto_values", proto_values)

    @property
    @pulumi.getter(name="protoValues")
    def proto_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "proto_values")

    @proto_values.setter
    def proto_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "proto_values", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs:
    def __init__(__self__, *,
                 rollback_task_implementation_class_name: pulumi.Input[str],
                 task_numbers_to_rollback: pulumi.Input[Sequence[pulumi.Input[str]]],
                 parameters: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoEventParametersArgs']] = None):
        """
        Next available id: 4
        :param pulumi.Input[str] rollback_task_implementation_class_name: This is the name of the task that needs to be executed upon rollback of this task.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] task_numbers_to_rollback: These are the tasks numbers of the tasks whose `rollback_strategy.rollback_task_implementation_class_name` needs to be executed upon failure of this task.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoEventParametersArgs'] parameters: Optional. The customized parameters the user can pass to this task.
        """
        pulumi.set(__self__, "rollback_task_implementation_class_name", rollback_task_implementation_class_name)
        pulumi.set(__self__, "task_numbers_to_rollback", task_numbers_to_rollback)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="rollbackTaskImplementationClassName")
    def rollback_task_implementation_class_name(self) -> pulumi.Input[str]:
        """
        This is the name of the task that needs to be executed upon rollback of this task.
        """
        return pulumi.get(self, "rollback_task_implementation_class_name")

    @rollback_task_implementation_class_name.setter
    def rollback_task_implementation_class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rollback_task_implementation_class_name", value)

    @property
    @pulumi.getter(name="taskNumbersToRollback")
    def task_numbers_to_rollback(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        These are the tasks numbers of the tasks whose `rollback_strategy.rollback_task_implementation_class_name` needs to be executed upon failure of this task.
        """
        return pulumi.get(self, "task_numbers_to_rollback")

    @task_numbers_to_rollback.setter
    def task_numbers_to_rollback(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "task_numbers_to_rollback", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoEventParametersArgs']]:
        """
        Optional. The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoEventParametersArgs']]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameterArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[str]] = None):
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoStringParameterArrayArgs:
    def __init__(__self__, *,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoTaskConfigArgs:
    def __init__(__self__, *,
                 alert_configs: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_strict_type_validation: Optional[pulumi.Input[bool]] = None,
                 error_catcher_id: Optional[pulumi.Input[str]] = None,
                 external_task_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigExternalTaskType']] = None,
                 failure_policy: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']] = None,
                 incoming_edge_count: Optional[pulumi.Input[int]] = None,
                 json_validation_option: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOption']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 last_modified_time: Optional[pulumi.Input[str]] = None,
                 next_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]] = None,
                 next_tasks_execution_policy: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicy']] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]] = None,
                 position: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']] = None,
                 precondition: Optional[pulumi.Input[str]] = None,
                 precondition_label: Optional[pulumi.Input[str]] = None,
                 rollback_strategy: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs']] = None,
                 success_policy: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyArgs']] = None,
                 synchronous_call_failure_policy: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']] = None,
                 task_entity: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs']] = None,
                 task_execution_strategy: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategy']] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_number: Optional[pulumi.Input[str]] = None,
                 task_spec: Optional[pulumi.Input[str]] = None,
                 task_template_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskType']] = None):
        """
        The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigArgs']]] alert_configs: Alert configurations on error rate, warning rate, number of runs, durations, etc.
        :param pulumi.Input[str] create_time: Auto-generated.
        :param pulumi.Input[str] creator_email: The creator's email address. Auto-generated from the user's email.
        :param pulumi.Input[str] description: User-provided description intended to give more business context about the task.
        :param pulumi.Input[bool] disable_strict_type_validation: If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.
        :param pulumi.Input[str] error_catcher_id: Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs'] failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        :param pulumi.Input[int] incoming_edge_count: The number of edges leading into this TaskConfig.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOption'] json_validation_option: If set, overrides the option configured in the Task implementation class.
        :param pulumi.Input[str] label: User-provided label that is attached to this TaskConfig in the UI.
        :param pulumi.Input[str] last_modified_time: Auto-generated.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]] next_tasks: The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicy'] next_tasks_execution_policy: The policy dictating the execution of the next set of tasks for the current task.
        :param pulumi.Input[Mapping[str, pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]] parameters: The customized parameters the user can pass to this task.
        :param pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs'] position: Optional. Informs the front-end application where to draw this task config on the UI.
        :param pulumi.Input[str] precondition: Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.
        :param pulumi.Input[str] precondition_label: Optional. User-provided label that is attached to precondition in the UI.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs'] rollback_strategy: Optional. Contains information about what needs to be done upon failure (either a permanent error or after it has been retried too many times).
        :param pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyArgs'] success_policy: Determines what action to take upon successful task completion.
        :param pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs'] synchronous_call_failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs'] task_entity: Copy of the task entity that this task config is an instance of.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategy'] task_execution_strategy: The policy dictating the execution strategy of this task.
        :param pulumi.Input[str] task_name: The name for the task.
        :param pulumi.Input[str] task_number: REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).
        :param pulumi.Input[str] task_spec: A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.
        :param pulumi.Input[str] task_template_name: Used to define task-template name if task is of type task-template
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskType'] task_type: Defines the type of the task
        """
        if alert_configs is not None:
            pulumi.set(__self__, "alert_configs", alert_configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_email is not None:
            pulumi.set(__self__, "creator_email", creator_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_strict_type_validation is not None:
            pulumi.set(__self__, "disable_strict_type_validation", disable_strict_type_validation)
        if error_catcher_id is not None:
            pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        if external_task_type is not None:
            pulumi.set(__self__, "external_task_type", external_task_type)
        if failure_policy is not None:
            pulumi.set(__self__, "failure_policy", failure_policy)
        if incoming_edge_count is not None:
            pulumi.set(__self__, "incoming_edge_count", incoming_edge_count)
        if json_validation_option is not None:
            pulumi.set(__self__, "json_validation_option", json_validation_option)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if last_modified_time is not None:
            pulumi.set(__self__, "last_modified_time", last_modified_time)
        if next_tasks is not None:
            pulumi.set(__self__, "next_tasks", next_tasks)
        if next_tasks_execution_policy is not None:
            pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if precondition is not None:
            pulumi.set(__self__, "precondition", precondition)
        if precondition_label is not None:
            pulumi.set(__self__, "precondition_label", precondition_label)
        if rollback_strategy is not None:
            pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        if success_policy is not None:
            pulumi.set(__self__, "success_policy", success_policy)
        if synchronous_call_failure_policy is not None:
            pulumi.set(__self__, "synchronous_call_failure_policy", synchronous_call_failure_policy)
        if task_entity is not None:
            pulumi.set(__self__, "task_entity", task_entity)
        if task_execution_strategy is not None:
            pulumi.set(__self__, "task_execution_strategy", task_execution_strategy)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_number is not None:
            pulumi.set(__self__, "task_number", task_number)
        if task_spec is not None:
            pulumi.set(__self__, "task_spec", task_spec)
        if task_template_name is not None:
            pulumi.set(__self__, "task_template_name", task_template_name)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="alertConfigs")
    def alert_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigArgs']]]]:
        """
        Alert configurations on error rate, warning rate, number of runs, durations, etc.
        """
        return pulumi.get(self, "alert_configs")

    @alert_configs.setter
    def alert_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoTaskAlertConfigArgs']]]]):
        pulumi.set(self, "alert_configs", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorEmail")
    def creator_email(self) -> Optional[pulumi.Input[str]]:
        """
        The creator's email address. Auto-generated from the user's email.
        """
        return pulumi.get(self, "creator_email")

    @creator_email.setter
    def creator_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided description intended to give more business context about the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableStrictTypeValidation")
    def disable_strict_type_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.
        """
        return pulumi.get(self, "disable_strict_type_validation")

    @disable_strict_type_validation.setter
    def disable_strict_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_strict_type_validation", value)

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @error_catcher_id.setter
    def error_catcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_catcher_id", value)

    @property
    @pulumi.getter(name="externalTaskType")
    def external_task_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigExternalTaskType']]:
        return pulumi.get(self, "external_task_type")

    @external_task_type.setter
    def external_task_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigExternalTaskType']]):
        pulumi.set(self, "external_task_type", value)

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']]:
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        """
        return pulumi.get(self, "failure_policy")

    @failure_policy.setter
    def failure_policy(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']]):
        pulumi.set(self, "failure_policy", value)

    @property
    @pulumi.getter(name="incomingEdgeCount")
    def incoming_edge_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of edges leading into this TaskConfig.
        """
        return pulumi.get(self, "incoming_edge_count")

    @incoming_edge_count.setter
    def incoming_edge_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incoming_edge_count", value)

    @property
    @pulumi.getter(name="jsonValidationOption")
    def json_validation_option(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOption']]:
        """
        If set, overrides the option configured in the Task implementation class.
        """
        return pulumi.get(self, "json_validation_option")

    @json_validation_option.setter
    def json_validation_option(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigJsonValidationOption']]):
        pulumi.set(self, "json_validation_option", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided label that is attached to this TaskConfig in the UI.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated.
        """
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="nextTasks")
    def next_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]]:
        """
        The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        """
        return pulumi.get(self, "next_tasks")

    @next_tasks.setter
    def next_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]]):
        pulumi.set(self, "next_tasks", value)

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicy']]:
        """
        The policy dictating the execution of the next set of tasks for the current task.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @next_tasks_execution_policy.setter
    def next_tasks_execution_policy(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigNextTasksExecutionPolicy']]):
        pulumi.set(self, "next_tasks_execution_policy", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]]:
        """
        The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterEntryArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']]:
        """
        Optional. Informs the front-end application where to draw this task config on the UI.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def precondition(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.
        """
        return pulumi.get(self, "precondition")

    @precondition.setter
    def precondition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precondition", value)

    @property
    @pulumi.getter(name="preconditionLabel")
    def precondition_label(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-provided label that is attached to precondition in the UI.
        """
        return pulumi.get(self, "precondition_label")

    @precondition_label.setter
    def precondition_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precondition_label", value)

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs']]:
        """
        Optional. Contains information about what needs to be done upon failure (either a permanent error or after it has been retried too many times).
        """
        return pulumi.get(self, "rollback_strategy")

    @rollback_strategy.setter
    def rollback_strategy(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoRollbackStrategyArgs']]):
        pulumi.set(self, "rollback_strategy", value)

    @property
    @pulumi.getter(name="successPolicy")
    def success_policy(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyArgs']]:
        """
        Determines what action to take upon successful task completion.
        """
        return pulumi.get(self, "success_policy")

    @success_policy.setter
    def success_policy(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoSuccessPolicyArgs']]):
        pulumi.set(self, "success_policy", value)

    @property
    @pulumi.getter(name="synchronousCallFailurePolicy")
    def synchronous_call_failure_policy(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']]:
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        """
        return pulumi.get(self, "synchronous_call_failure_policy")

    @synchronous_call_failure_policy.setter
    def synchronous_call_failure_policy(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoFailurePolicyArgs']]):
        pulumi.set(self, "synchronous_call_failure_policy", value)

    @property
    @pulumi.getter(name="taskEntity")
    def task_entity(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs']]:
        """
        Copy of the task entity that this task config is an instance of.
        """
        return pulumi.get(self, "task_entity")

    @task_entity.setter
    def task_entity(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs']]):
        pulumi.set(self, "task_entity", value)

    @property
    @pulumi.getter(name="taskExecutionStrategy")
    def task_execution_strategy(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategy']]:
        """
        The policy dictating the execution strategy of this task.
        """
        return pulumi.get(self, "task_execution_strategy")

    @task_execution_strategy.setter
    def task_execution_strategy(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskExecutionStrategy']]):
        pulumi.set(self, "task_execution_strategy", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the task.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> Optional[pulumi.Input[str]]:
        """
        REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).
        """
        return pulumi.get(self, "task_number")

    @task_number.setter
    def task_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_number", value)

    @property
    @pulumi.getter(name="taskSpec")
    def task_spec(self) -> Optional[pulumi.Input[str]]:
        """
        A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.
        """
        return pulumi.get(self, "task_spec")

    @task_spec.setter
    def task_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_spec", value)

    @property
    @pulumi.getter(name="taskTemplateName")
    def task_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to define task-template name if task is of type task-template
        """
        return pulumi.get(self, "task_template_name")

    @task_template_name.setter
    def task_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_template_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskType']]:
        """
        Defines the type of the task
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskConfigTaskType']]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoTaskEntityArgs:
    def __init__(__self__, *,
                 disabled_for_vpc_sc: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataArgs']] = None,
                 param_specs: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs']] = None,
                 stats: Optional[pulumi.Input['EnterpriseCrmEventbusStatsArgs']] = None,
                 task_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskType']] = None,
                 ui_config: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiConfigArgs']] = None):
        """
        Contains a task's metadata and associated information. Next available id: 7
        :param pulumi.Input[bool] disabled_for_vpc_sc: True if the task has conflict with vpcsc
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataArgs'] metadata: Metadata inclueds the task name, author and so on.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs'] param_specs: Declarations for inputs/outputs for a TypedTask. This is also associated with the METADATA mask.
        :param pulumi.Input['EnterpriseCrmEventbusStatsArgs'] stats: Deprecated - statistics from the Monarch query.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskType'] task_type: Defines the type of the task
        :param pulumi.Input['EnterpriseCrmEventbusProtoTaskUiConfigArgs'] ui_config: UI configuration for this task Also associated with the METADATA mask.
        """
        if disabled_for_vpc_sc is not None:
            pulumi.set(__self__, "disabled_for_vpc_sc", disabled_for_vpc_sc)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if param_specs is not None:
            pulumi.set(__self__, "param_specs", param_specs)
        if stats is not None:
            warnings.warn("""Deprecated - statistics from the Monarch query.""", DeprecationWarning)
            pulumi.log.warn("""stats is deprecated: Deprecated - statistics from the Monarch query.""")
        if stats is not None:
            pulumi.set(__self__, "stats", stats)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if ui_config is not None:
            pulumi.set(__self__, "ui_config", ui_config)

    @property
    @pulumi.getter(name="disabledForVpcSc")
    def disabled_for_vpc_sc(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the task has conflict with vpcsc
        """
        return pulumi.get(self, "disabled_for_vpc_sc")

    @disabled_for_vpc_sc.setter
    def disabled_for_vpc_sc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled_for_vpc_sc", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataArgs']]:
        """
        Metadata inclueds the task name, author and so on.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="paramSpecs")
    def param_specs(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs']]:
        """
        Declarations for inputs/outputs for a TypedTask. This is also associated with the METADATA mask.
        """
        return pulumi.get(self, "param_specs")

    @param_specs.setter
    def param_specs(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParamSpecsMessageArgs']]):
        pulumi.set(self, "param_specs", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated - statistics from the Monarch query.""")
    def stats(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusStatsArgs']]:
        """
        Deprecated - statistics from the Monarch query.
        """
        return pulumi.get(self, "stats")

    @stats.setter
    def stats(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusStatsArgs']]):
        pulumi.set(self, "stats", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskType']]:
        """
        Defines the type of the task
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskType']]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="uiConfig")
    def ui_config(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiConfigArgs']]:
        """
        UI configuration for this task Also associated with the METADATA mask.
        """
        return pulumi.get(self, "ui_config")

    @ui_config.setter
    def ui_config(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTaskUiConfigArgs']]):
        pulumi.set(self, "ui_config", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoTriggerConfigArgs:
    def __init__(__self__, *,
                 enabled_clients: pulumi.Input[Sequence[pulumi.Input[str]]],
                 trigger_number: pulumi.Input[str],
                 alert_config: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs']]]] = None,
                 cloud_scheduler_config: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCloudSchedulerConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 error_catcher_id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 next_tasks_execution_policy: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigNextTasksExecutionPolicy']] = None,
                 pause_workflow_executions: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 start_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]] = None,
                 trigger_criteria: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTriggerCriteriaArgs']] = None,
                 trigger_id: Optional[pulumi.Input[str]] = None,
                 trigger_name: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigTriggerType']] = None):
        """
        Configuration detail of a trigger. Next available id: 20
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_clients: The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.
        :param pulumi.Input[str] trigger_number: A number to uniquely identify each trigger config within the workflow on UI.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs']]] alert_config: An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.
        :param pulumi.Input[str] description: User-provided description intended to give more business context about the task.
        :param pulumi.Input[str] error_catcher_id: Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param pulumi.Input[str] label: The user created label for a particular trigger.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigNextTasksExecutionPolicy'] next_tasks_execution_policy: Dictates how next tasks will be executed.
        :param pulumi.Input[bool] pause_workflow_executions: Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.
        :param pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs'] position: Optional. Informs the front-end application where to draw this trigger config on the UI.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]] start_tasks: Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).
        :param pulumi.Input['EnterpriseCrmEventbusProtoTriggerCriteriaArgs'] trigger_criteria: Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.
        :param pulumi.Input[str] trigger_id: The backend trigger ID.
        :param pulumi.Input[str] trigger_name: Optional. Name of the trigger This is added to identify the type of trigger. This is avoid the logic on triggerId to identify the trigger_type and push the same to monitoring.
        """
        pulumi.set(__self__, "enabled_clients", enabled_clients)
        pulumi.set(__self__, "trigger_number", trigger_number)
        if alert_config is not None:
            pulumi.set(__self__, "alert_config", alert_config)
        if cloud_scheduler_config is not None:
            pulumi.set(__self__, "cloud_scheduler_config", cloud_scheduler_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error_catcher_id is not None:
            pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if next_tasks_execution_policy is not None:
            pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        if pause_workflow_executions is not None:
            pulumi.set(__self__, "pause_workflow_executions", pause_workflow_executions)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if start_tasks is not None:
            pulumi.set(__self__, "start_tasks", start_tasks)
        if trigger_criteria is not None:
            pulumi.set(__self__, "trigger_criteria", trigger_criteria)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="enabledClients")
    def enabled_clients(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.
        """
        return pulumi.get(self, "enabled_clients")

    @enabled_clients.setter
    def enabled_clients(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "enabled_clients", value)

    @property
    @pulumi.getter(name="triggerNumber")
    def trigger_number(self) -> pulumi.Input[str]:
        """
        A number to uniquely identify each trigger config within the workflow on UI.
        """
        return pulumi.get(self, "trigger_number")

    @trigger_number.setter
    def trigger_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger_number", value)

    @property
    @pulumi.getter(name="alertConfig")
    def alert_config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs']]]]:
        """
        An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.
        """
        return pulumi.get(self, "alert_config")

    @alert_config.setter
    def alert_config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoWorkflowAlertConfigArgs']]]]):
        pulumi.set(self, "alert_config", value)

    @property
    @pulumi.getter(name="cloudSchedulerConfig")
    def cloud_scheduler_config(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoCloudSchedulerConfigArgs']]:
        return pulumi.get(self, "cloud_scheduler_config")

    @cloud_scheduler_config.setter
    def cloud_scheduler_config(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCloudSchedulerConfigArgs']]):
        pulumi.set(self, "cloud_scheduler_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided description intended to give more business context about the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @error_catcher_id.setter
    def error_catcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_catcher_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The user created label for a particular trigger.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigNextTasksExecutionPolicy']]:
        """
        Dictates how next tasks will be executed.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @next_tasks_execution_policy.setter
    def next_tasks_execution_policy(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigNextTasksExecutionPolicy']]):
        pulumi.set(self, "next_tasks_execution_policy", value)

    @property
    @pulumi.getter(name="pauseWorkflowExecutions")
    def pause_workflow_executions(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.
        """
        return pulumi.get(self, "pause_workflow_executions")

    @pause_workflow_executions.setter
    def pause_workflow_executions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pause_workflow_executions", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']]:
        """
        Optional. Informs the front-end application where to draw this trigger config on the UI.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoCoordinateArgs']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="startTasks")
    def start_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]]:
        """
        Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).
        """
        return pulumi.get(self, "start_tasks")

    @start_tasks.setter
    def start_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmEventbusProtoNextTaskArgs']]]]):
        pulumi.set(self, "start_tasks", value)

    @property
    @pulumi.getter(name="triggerCriteria")
    def trigger_criteria(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoTriggerCriteriaArgs']]:
        """
        Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.
        """
        return pulumi.get(self, "trigger_criteria")

    @trigger_criteria.setter
    def trigger_criteria(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoTriggerCriteriaArgs']]):
        pulumi.set(self, "trigger_criteria", value)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[str]]:
        """
        The backend trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_id", value)

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Name of the trigger This is added to identify the type of trigger. This is avoid the logic on triggerId to identify the trigger_type and push the same to monitoring.
        """
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_name", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigTriggerType']]:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoTriggerConfigTriggerType']]):
        pulumi.set(self, "trigger_type", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesArgs']] = None,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]] = None,
                 data_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataType']] = None,
                 default_value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 in_out_type: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutType']] = None,
                 is_transient: Optional[pulumi.Input[bool]] = None,
                 json_schema: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 produced_by: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierArgs']] = None,
                 producer: Optional[pulumi.Input[str]] = None,
                 proto_def_name: Optional[pulumi.Input[str]] = None,
                 proto_def_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['EnterpriseCrmEventbusProtoAttributesArgs'] attributes: Metadata information about the parameters.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]] children: Child parameters nested within this parameter. This field only applies to protobuf parameters
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataType'] data_type: The data type of the parameter.
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs'] default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param pulumi.Input[str] description: Optional. The description about the parameter
        :param pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutType'] in_out_type: Specifies the input/output type for the parameter.
        :param pulumi.Input[bool] is_transient: Whether this parameter is a transient parameter.
        :param pulumi.Input[str] json_schema: This schema will be used to validate runtime JSON-typed values of this parameter.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        :param pulumi.Input[str] name: The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        :param pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierArgs'] produced_by: The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        :param pulumi.Input[str] proto_def_name: The name of the protobuf type if the parameter has a protobuf data type.
        :param pulumi.Input[str] proto_def_path: If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if children is not None:
            pulumi.set(__self__, "children", children)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if in_out_type is not None:
            pulumi.set(__self__, "in_out_type", in_out_type)
        if is_transient is not None:
            pulumi.set(__self__, "is_transient", is_transient)
        if json_schema is not None:
            pulumi.set(__self__, "json_schema", json_schema)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if produced_by is not None:
            pulumi.set(__self__, "produced_by", produced_by)
        if producer is not None:
            pulumi.set(__self__, "producer", producer)
        if proto_def_name is not None:
            pulumi.set(__self__, "proto_def_name", proto_def_name)
        if proto_def_path is not None:
            pulumi.set(__self__, "proto_def_path", proto_def_path)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesArgs']]:
        """
        Metadata information about the parameters.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]]:
        """
        Child parameters nested within this parameter. This field only applies to protobuf parameters
        """
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataType']]:
        """
        The data type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataType']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]:
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoParameterValueTypeArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The description about the parameter
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inOutType")
    def in_out_type(self) -> Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutType']]:
        """
        Specifies the input/output type for the parameter.
        """
        return pulumi.get(self, "in_out_type")

    @in_out_type.setter
    def in_out_type(self, value: Optional[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutType']]):
        pulumi.set(self, "in_out_type", value)

    @property
    @pulumi.getter(name="isTransient")
    def is_transient(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this parameter is a transient parameter.
        """
        return pulumi.get(self, "is_transient")

    @is_transient.setter
    def is_transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transient", value)

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> Optional[pulumi.Input[str]]:
        """
        This schema will be used to validate runtime JSON-typed values of this parameter.
        """
        return pulumi.get(self, "json_schema")

    @json_schema.setter
    def json_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_schema", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="producedBy")
    def produced_by(self) -> Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierArgs']]:
        """
        The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        """
        return pulumi.get(self, "produced_by")

    @produced_by.setter
    def produced_by(self, value: Optional[pulumi.Input['EnterpriseCrmEventbusProtoNodeIdentifierArgs']]):
        pulumi.set(self, "produced_by", value)

    @property
    @pulumi.getter
    def producer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "producer")

    @producer.setter
    def producer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer", value)

    @property
    @pulumi.getter(name="protoDefName")
    def proto_def_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the protobuf type if the parameter has a protobuf data type.
        """
        return pulumi.get(self, "proto_def_name")

    @proto_def_name.setter
    def proto_def_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto_def_name", value)

    @property
    @pulumi.getter(name="protoDefPath")
    def proto_def_path(self) -> Optional[pulumi.Input[str]]:
        """
        If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".
        """
        return pulumi.get(self, "proto_def_path")

    @proto_def_path.setter
    def proto_def_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto_def_path", value)


@pulumi.input_type
class EnterpriseCrmFrontendsEventbusProtoWorkflowParametersArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]] = None):
        """
        LINT.IfChange This is the frontend version of WorkflowParameters. It's exactly like the backend version except that instead of flattening protobuf parameters and treating every field and subfield of a protobuf parameter as a separate parameter, the fields/subfields of a protobuf parameter will be nested as "children" (see 'children' field below) parameters of the parent parameter. Please refer to enterprise/crm/eventbus/proto/workflow_parameters.proto for more information about WorkflowParameters.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]] parameters: Parameters are a part of Event and can be used to communiticate between different tasks that are part of the same workflow execution.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]]:
        """
        Parameters are a part of Event and can be used to communiticate between different tasks that are part of the same workflow execution.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class EnterpriseCrmLoggingGwsFieldLimitsArgs:
    def __init__(__self__, *,
                 log_action: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogAction']] = None,
                 log_type: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogTypeItem']]]] = None,
                 max_array_size: Optional[pulumi.Input[int]] = None,
                 max_string_length: Optional[pulumi.Input[int]] = None,
                 shortener_type: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsShortenerType']] = None):
        """
        Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogTypeItem']]] log_type: To which type(s) of logs the limits apply.
        :param pulumi.Input[int] max_array_size: maximum array size. If the array exceds this size, the field (list) is truncated.
        :param pulumi.Input[int] max_string_length: maximum string length. If the field exceeds this amount the field is shortened.
        """
        if log_action is not None:
            pulumi.set(__self__, "log_action", log_action)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if max_array_size is not None:
            pulumi.set(__self__, "max_array_size", max_array_size)
        if max_string_length is not None:
            pulumi.set(__self__, "max_string_length", max_string_length)
        if shortener_type is not None:
            pulumi.set(__self__, "shortener_type", shortener_type)

    @property
    @pulumi.getter(name="logAction")
    def log_action(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogAction']]:
        return pulumi.get(self, "log_action")

    @log_action.setter
    def log_action(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogAction']]):
        pulumi.set(self, "log_action", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogTypeItem']]]]:
        """
        To which type(s) of logs the limits apply.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsLogTypeItem']]]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="maxArraySize")
    def max_array_size(self) -> Optional[pulumi.Input[int]]:
        """
        maximum array size. If the array exceds this size, the field (list) is truncated.
        """
        return pulumi.get(self, "max_array_size")

    @max_array_size.setter
    def max_array_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_array_size", value)

    @property
    @pulumi.getter(name="maxStringLength")
    def max_string_length(self) -> Optional[pulumi.Input[int]]:
        """
        maximum string length. If the field exceeds this amount the field is shortened.
        """
        return pulumi.get(self, "max_string_length")

    @max_string_length.setter
    def max_string_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_string_length", value)

    @property
    @pulumi.getter(name="shortenerType")
    def shortener_type(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsShortenerType']]:
        return pulumi.get(self, "shortener_type")

    @shortener_type.setter
    def shortener_type(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsFieldLimitsShortenerType']]):
        pulumi.set(self, "shortener_type", value)


@pulumi.input_type
class EnterpriseCrmLoggingGwsSanitizeOptionsArgs:
    def __init__(__self__, *,
                 is_already_sanitized: Optional[pulumi.Input[bool]] = None,
                 log_type: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeItem']]]] = None,
                 privacy: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsPrivacy']] = None,
                 sanitize_type: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeType']] = None):
        """
        Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5
        :param pulumi.Input[bool] is_already_sanitized: If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeItem']]] log_type: To which type(s) of logs the sanitize options apply.
        """
        if is_already_sanitized is not None:
            pulumi.set(__self__, "is_already_sanitized", is_already_sanitized)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if sanitize_type is not None:
            pulumi.set(__self__, "sanitize_type", sanitize_type)

    @property
    @pulumi.getter(name="isAlreadySanitized")
    def is_already_sanitized(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
        """
        return pulumi.get(self, "is_already_sanitized")

    @is_already_sanitized.setter
    def is_already_sanitized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_already_sanitized", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeItem']]]]:
        """
        To which type(s) of logs the sanitize options apply.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeItem']]]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def privacy(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsPrivacy']]:
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsPrivacy']]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="sanitizeType")
    def sanitize_type(self) -> Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeType']]:
        return pulumi.get(self, "sanitize_type")

    @sanitize_type.setter
    def sanitize_type(self, value: Optional[pulumi.Input['EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeType']]):
        pulumi.set(self, "sanitize_type", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaAccessTokenArgs:
    def __init__(__self__, *,
                 access_token_expire_time: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 refresh_token_expire_time: Optional[pulumi.Input[str]] = None,
                 token_type: Optional[pulumi.Input[str]] = None):
        """
        The access token represents the authorization of a specific application to access specific parts of a user’s data.
        :param pulumi.Input[str] access_token_expire_time: The approximate time until the access token retrieved is valid.
        :param pulumi.Input[str] access_token: The access token encapsulating the security identity of a process or thread.
        :param pulumi.Input[str] refresh_token: If the access token will expire, use the refresh token to obtain another access token.
        :param pulumi.Input[str] refresh_token_expire_time: The approximate time until the refresh token retrieved is valid.
        :param pulumi.Input[str] token_type: Only support "bearer" token in v1 as bearer token is the predominant type used with OAuth 2.0.
        """
        pulumi.set(__self__, "access_token_expire_time", access_token_expire_time)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if refresh_token_expire_time is not None:
            pulumi.set(__self__, "refresh_token_expire_time", refresh_token_expire_time)
        if token_type is not None:
            pulumi.set(__self__, "token_type", token_type)

    @property
    @pulumi.getter(name="accessTokenExpireTime")
    def access_token_expire_time(self) -> pulumi.Input[str]:
        """
        The approximate time until the access token retrieved is valid.
        """
        return pulumi.get(self, "access_token_expire_time")

    @access_token_expire_time.setter
    def access_token_expire_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token_expire_time", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token encapsulating the security identity of a process or thread.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        If the access token will expire, use the refresh token to obtain another access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="refreshTokenExpireTime")
    def refresh_token_expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The approximate time until the refresh token retrieved is valid.
        """
        return pulumi.get(self, "refresh_token_expire_time")

    @refresh_token_expire_time.setter
    def refresh_token_expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token_expire_time", value)

    @property
    @pulumi.getter(name="tokenType")
    def token_type(self) -> Optional[pulumi.Input[str]]:
        """
        Only support "bearer" token in v1 as bearer token is the predominant type used with OAuth 2.0.
        """
        return pulumi.get(self, "token_type")

    @token_type.setter
    def token_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_type", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaAssertionArgs:
    def __init__(__self__, *,
                 assertion_strategy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionAssertionStrategy']] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']] = None,
                 retry_count: Optional[pulumi.Input[int]] = None):
        """
        An assertion which will check for a condition over task execution status or an expression for task output variables Next available id: 5
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionAssertionStrategy'] assertion_strategy: The type of assertion to perform.
        :param pulumi.Input[str] condition: Optional. Standard filter expression for ASSERT_CONDITION to succeed
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs'] parameter: Optional. Key-value pair for ASSERT_EQUALS, ASSERT_NOT_EQUALS, ASSERT_CONTAINS to succeed
        :param pulumi.Input[int] retry_count: Number of times given task should be retried in case of ASSERT_FAILED_EXECUTION
        """
        if assertion_strategy is not None:
            pulumi.set(__self__, "assertion_strategy", assertion_strategy)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)

    @property
    @pulumi.getter(name="assertionStrategy")
    def assertion_strategy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionAssertionStrategy']]:
        """
        The type of assertion to perform.
        """
        return pulumi.get(self, "assertion_strategy")

    @assertion_strategy.setter
    def assertion_strategy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionAssertionStrategy']]):
        pulumi.set(self, "assertion_strategy", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Standard filter expression for ASSERT_CONDITION to succeed
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]:
        """
        Optional. Key-value pair for ASSERT_EQUALS, ASSERT_NOT_EQUALS, ASSERT_CONTAINS to succeed
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times given task should be retried in case of ASSERT_FAILED_EXECUTION
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaAuthTokenArgs:
    def __init__(__self__, *,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.
        :param pulumi.Input[str] token: The token for the auth type.
        :param pulumi.Input[str] type: Authentication type, e.g. "Basic", "Bearer", etc.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The token for the auth type.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type, e.g. "Basic", "Bearer", etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs:
    def __init__(__self__, *,
                 boolean_values: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        """
        This message only contains a field of boolean array.
        :param pulumi.Input[Sequence[pulumi.Input[bool]]] boolean_values: Boolean array.
        """
        if boolean_values is not None:
            pulumi.set(__self__, "boolean_values", boolean_values)

    @property
    @pulumi.getter(name="booleanValues")
    def boolean_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        """
        Boolean array.
        """
        return pulumi.get(self, "boolean_values")

    @boolean_values.setter
    def boolean_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_values", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaClientCertificateArgs:
    def __init__(__self__, *,
                 encrypted_private_key: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None):
        """
        Contains client certificate information
        :param pulumi.Input[str] encrypted_private_key: The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        :param pulumi.Input[str] passphrase: 'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.
        :param pulumi.Input[str] ssl_certificate: The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        if encrypted_private_key is not None:
            pulumi.set(__self__, "encrypted_private_key", encrypted_private_key)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptedPrivateKey")
    def encrypted_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        return pulumi.get(self, "encrypted_private_key")

    @encrypted_private_key.setter
    def encrypted_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_private_key", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaCloudLoggingDetailsArgs:
    def __init__(__self__, *,
                 cloud_logging_severity: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudLoggingDetailsCloudLoggingSeverity']] = None,
                 enable_cloud_logging: Optional[pulumi.Input[bool]] = None):
        """
        Cloud Logging details for execution info
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCloudLoggingDetailsCloudLoggingSeverity'] cloud_logging_severity: Optional. Severity selected by the customer for the logs to be sent to Cloud Logging, for the integration version getting executed.
        :param pulumi.Input[bool] enable_cloud_logging: Optional. Status of whether Cloud Logging is enabled or not for the integration version getting executed.
        """
        if cloud_logging_severity is not None:
            pulumi.set(__self__, "cloud_logging_severity", cloud_logging_severity)
        if enable_cloud_logging is not None:
            pulumi.set(__self__, "enable_cloud_logging", enable_cloud_logging)

    @property
    @pulumi.getter(name="cloudLoggingSeverity")
    def cloud_logging_severity(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudLoggingDetailsCloudLoggingSeverity']]:
        """
        Optional. Severity selected by the customer for the logs to be sent to Cloud Logging, for the integration version getting executed.
        """
        return pulumi.get(self, "cloud_logging_severity")

    @cloud_logging_severity.setter
    def cloud_logging_severity(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudLoggingDetailsCloudLoggingSeverity']]):
        pulumi.set(self, "cloud_logging_severity", value)

    @property
    @pulumi.getter(name="enableCloudLogging")
    def enable_cloud_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Status of whether Cloud Logging is enabled or not for the integration version getting executed.
        """
        return pulumi.get(self, "enable_cloud_logging")

    @enable_cloud_logging.setter
    def enable_cloud_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cloud_logging", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs:
    def __init__(__self__, *,
                 cron_tab: pulumi.Input[str],
                 location: pulumi.Input[str],
                 service_account_email: pulumi.Input[str],
                 error_message: Optional[pulumi.Input[str]] = None):
        """
        Cloud Scheduler Trigger configuration
        :param pulumi.Input[str] cron_tab: The cron tab of cloud scheduler trigger.
        :param pulumi.Input[str] location: The location where associated cloud scheduler job will be created
        :param pulumi.Input[str] service_account_email: Service account used by Cloud Scheduler to trigger the integration at scheduled time
        :param pulumi.Input[str] error_message: Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        pulumi.set(__self__, "cron_tab", cron_tab)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_account_email", service_account_email)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @property
    @pulumi.getter(name="cronTab")
    def cron_tab(self) -> pulumi.Input[str]:
        """
        The cron tab of cloud scheduler trigger.
        """
        return pulumi.get(self, "cron_tab")

    @cron_tab.setter
    def cron_tab(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_tab", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location where associated cloud scheduler job will be created
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> pulumi.Input[str]:
        """
        Service account used by Cloud Scheduler to trigger the integration at scheduled time
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_email", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaCoordinateArgs:
    def __init__(__self__, *,
                 x: pulumi.Input[int],
                 y: pulumi.Input[int]):
        """
        Configuration detail of coordinate, it used for UI
        :param pulumi.Input[int] x: X axis of the coordinate
        :param pulumi.Input[int] y: Y axis of the coordinate
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[int]:
        """
        X axis of the coordinate
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[int]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[int]:
        """
        Y axis of the coordinate
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[int]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaCredentialArgs:
    def __init__(__self__, *,
                 auth_token: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAuthTokenArgs']] = None,
                 credential_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCredentialCredentialType']] = None,
                 jwt: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaJwtArgs']] = None,
                 oauth2_authorization_code: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs']] = None,
                 oauth2_client_credentials: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs']] = None,
                 oauth2_resource_owner_credentials: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs']] = None,
                 oidc_token: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOidcTokenArgs']] = None,
                 service_account_credentials: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs']] = None,
                 username_and_password: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs']] = None):
        """
        Defines parameters for a single, canonical credential.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaAuthTokenArgs'] auth_token: Auth token credential
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCredentialCredentialType'] credential_type: Credential type associated with auth config.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaJwtArgs'] jwt: JWT credential
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs'] oauth2_authorization_code: The api_key and oauth2_implicit are not covered in v1 and will be picked up once v1 is implemented. ApiKey api_key = 3; OAuth2 authorization code credential
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs'] oauth2_client_credentials: OAuth2Implicit oauth2_implicit = 5; OAuth2 client credentials
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs'] oauth2_resource_owner_credentials: OAuth2 resource owner credentials
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOidcTokenArgs'] oidc_token: Google OIDC ID Token
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs'] service_account_credentials: Service account credential
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs'] username_and_password: Username and password credential
        """
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if oauth2_authorization_code is not None:
            pulumi.set(__self__, "oauth2_authorization_code", oauth2_authorization_code)
        if oauth2_client_credentials is not None:
            pulumi.set(__self__, "oauth2_client_credentials", oauth2_client_credentials)
        if oauth2_resource_owner_credentials is not None:
            pulumi.set(__self__, "oauth2_resource_owner_credentials", oauth2_resource_owner_credentials)
        if oidc_token is not None:
            pulumi.set(__self__, "oidc_token", oidc_token)
        if service_account_credentials is not None:
            pulumi.set(__self__, "service_account_credentials", service_account_credentials)
        if username_and_password is not None:
            pulumi.set(__self__, "username_and_password", username_and_password)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAuthTokenArgs']]:
        """
        Auth token credential
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAuthTokenArgs']]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCredentialCredentialType']]:
        """
        Credential type associated with auth config.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCredentialCredentialType']]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaJwtArgs']]:
        """
        JWT credential
        """
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaJwtArgs']]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter(name="oauth2AuthorizationCode")
    def oauth2_authorization_code(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs']]:
        """
        The api_key and oauth2_implicit are not covered in v1 and will be picked up once v1 is implemented. ApiKey api_key = 3; OAuth2 authorization code credential
        """
        return pulumi.get(self, "oauth2_authorization_code")

    @oauth2_authorization_code.setter
    def oauth2_authorization_code(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs']]):
        pulumi.set(self, "oauth2_authorization_code", value)

    @property
    @pulumi.getter(name="oauth2ClientCredentials")
    def oauth2_client_credentials(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs']]:
        """
        OAuth2Implicit oauth2_implicit = 5; OAuth2 client credentials
        """
        return pulumi.get(self, "oauth2_client_credentials")

    @oauth2_client_credentials.setter
    def oauth2_client_credentials(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs']]):
        pulumi.set(self, "oauth2_client_credentials", value)

    @property
    @pulumi.getter(name="oauth2ResourceOwnerCredentials")
    def oauth2_resource_owner_credentials(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs']]:
        """
        OAuth2 resource owner credentials
        """
        return pulumi.get(self, "oauth2_resource_owner_credentials")

    @oauth2_resource_owner_credentials.setter
    def oauth2_resource_owner_credentials(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs']]):
        pulumi.set(self, "oauth2_resource_owner_credentials", value)

    @property
    @pulumi.getter(name="oidcToken")
    def oidc_token(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOidcTokenArgs']]:
        """
        Google OIDC ID Token
        """
        return pulumi.get(self, "oidc_token")

    @oidc_token.setter
    def oidc_token(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOidcTokenArgs']]):
        pulumi.set(self, "oidc_token", value)

    @property
    @pulumi.getter(name="serviceAccountCredentials")
    def service_account_credentials(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs']]:
        """
        Service account credential
        """
        return pulumi.get(self, "service_account_credentials")

    @service_account_credentials.setter
    def service_account_credentials(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs']]):
        pulumi.set(self, "service_account_credentials", value)

    @property
    @pulumi.getter(name="usernameAndPassword")
    def username_and_password(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs']]:
        """
        Username and password credential
        """
        return pulumi.get(self, "username_and_password")

    @username_and_password.setter
    def username_and_password(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs']]):
        pulumi.set(self, "username_and_password", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs:
    def __init__(__self__, *,
                 double_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        This message only contains a field of double number array.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] double_values: Double number array.
        """
        if double_values is not None:
            pulumi.set(__self__, "double_values", double_values)

    @property
    @pulumi.getter(name="doubleValues")
    def double_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        Double number array.
        """
        return pulumi.get(self, "double_values")

    @double_values.setter
    def double_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "double_values", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaErrorCatcherConfigArgs:
    def __init__(__self__, *,
                 error_catcher_id: pulumi.Input[str],
                 error_catcher_number: pulumi.Input[str],
                 start_error_tasks: pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']] = None):
        """
        Configuration detail of a error catch task
        :param pulumi.Input[str] error_catcher_id: An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow
        :param pulumi.Input[str] error_catcher_number: A number to uniquely identify each error catcher config within the workflow on UI.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]] start_error_tasks: The set of start tasks that are to be executed for the error catch flow
        :param pulumi.Input[str] description: Optional. User-provided description intended to give more business context about the error catcher config.
        :param pulumi.Input[str] label: Optional. The user created label for a particular error catcher. Optional.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs'] position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        pulumi.set(__self__, "error_catcher_number", error_catcher_number)
        pulumi.set(__self__, "start_error_tasks", start_error_tasks)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> pulumi.Input[str]:
        """
        An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow
        """
        return pulumi.get(self, "error_catcher_id")

    @error_catcher_id.setter
    def error_catcher_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "error_catcher_id", value)

    @property
    @pulumi.getter(name="errorCatcherNumber")
    def error_catcher_number(self) -> pulumi.Input[str]:
        """
        A number to uniquely identify each error catcher config within the workflow on UI.
        """
        return pulumi.get(self, "error_catcher_number")

    @error_catcher_number.setter
    def error_catcher_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "error_catcher_number", value)

    @property
    @pulumi.getter(name="startErrorTasks")
    def start_error_tasks(self) -> pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]:
        """
        The set of start tasks that are to be executed for the error catch flow
        """
        return pulumi.get(self, "start_error_tasks")

    @start_error_tasks.setter
    def start_error_tasks(self, value: pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]):
        pulumi.set(self, "start_error_tasks", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-provided description intended to give more business context about the error catcher config.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The user created label for a particular error catcher. Optional.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]:
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaEventParameterArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']] = None):
        """
        This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs'] value: Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]:
        """
        Values for the defined keys. Each value can either be string, int, double or any proto message.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaFailurePolicyArgs:
    def __init__(__self__, *,
                 interval_time: Optional[pulumi.Input[str]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 retry_strategy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategy']] = None):
        """
        Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
        :param pulumi.Input[str] interval_time: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff.
        :param pulumi.Input[int] max_retries: Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategy'] retry_strategy: Defines what happens to the task upon failure.
        """
        if interval_time is not None:
            pulumi.set(__self__, "interval_time", interval_time)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if retry_strategy is not None:
            pulumi.set(__self__, "retry_strategy", retry_strategy)

    @property
    @pulumi.getter(name="intervalTime")
    def interval_time(self) -> Optional[pulumi.Input[str]]:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff.
        """
        return pulumi.get(self, "interval_time")

    @interval_time.setter
    def interval_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval_time", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategy']]:
        """
        Defines what happens to the task upon failure.
        """
        return pulumi.get(self, "retry_strategy")

    @retry_strategy.setter
    def retry_strategy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategy']]):
        pulumi.set(self, "retry_strategy", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaIntParameterArrayArgs:
    def __init__(__self__, *,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        This message only contains a field of integer array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] int_values: Integer array.
        """
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Integer array.
        """
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "int_values", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs:
    def __init__(__self__, *,
                 absolute: Optional[pulumi.Input[str]] = None,
                 percentage: Optional[pulumi.Input[int]] = None):
        """
        The threshold value of the metric, above or below which the alert should be triggered. See EventAlertConfig or TaskAlertConfig for the different alert metric types in each case. For the *RATE metrics, one or both of these fields may be set. Zero is the default value and can be left at that. For *PERCENTILE_DURATION metrics, one or both of these fields may be set, and also, the duration threshold value should be specified in the threshold_duration_ms member below. For *AVERAGE_DURATION metrics, these fields should not be set at all. A different member, threshold_duration_ms, must be set in the EventAlertConfig or the TaskAlertConfig.
        :param pulumi.Input[str] absolute: Absolute value threshold.
        :param pulumi.Input[int] percentage: Percentage threshold.
        """
        if absolute is not None:
            pulumi.set(__self__, "absolute", absolute)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def absolute(self) -> Optional[pulumi.Input[str]]:
        """
        Absolute value threshold.
        """
        return pulumi.get(self, "absolute")

    @absolute.setter
    def absolute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "absolute", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage threshold.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs:
    def __init__(__self__, *,
                 aggregation_period: Optional[pulumi.Input[str]] = None,
                 alert_threshold: Optional[pulumi.Input[int]] = None,
                 disable_alert: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 duration_threshold: Optional[pulumi.Input[str]] = None,
                 metric_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigMetricType']] = None,
                 only_final_attempt: Optional[pulumi.Input[bool]] = None,
                 threshold_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdType']] = None,
                 threshold_value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs']] = None):
        """
        Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
        :param pulumi.Input[str] aggregation_period: The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        :param pulumi.Input[int] alert_threshold: For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        :param pulumi.Input[bool] disable_alert: Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.
        :param pulumi.Input[str] display_name: Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.
        :param pulumi.Input[str] duration_threshold: Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigMetricType'] metric_type: The type of metric.
        :param pulumi.Input[bool] only_final_attempt: For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdType'] threshold_type: The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs'] threshold_value: The metric value, above or below which the alert should be triggered.
        """
        if aggregation_period is not None:
            pulumi.set(__self__, "aggregation_period", aggregation_period)
        if alert_threshold is not None:
            pulumi.set(__self__, "alert_threshold", alert_threshold)
        if disable_alert is not None:
            pulumi.set(__self__, "disable_alert", disable_alert)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if duration_threshold is not None:
            pulumi.set(__self__, "duration_threshold", duration_threshold)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if only_final_attempt is not None:
            pulumi.set(__self__, "only_final_attempt", only_final_attempt)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="aggregationPeriod")
    def aggregation_period(self) -> Optional[pulumi.Input[str]]:
        """
        The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.
        """
        return pulumi.get(self, "aggregation_period")

    @aggregation_period.setter
    def aggregation_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_period", value)

    @property
    @pulumi.getter(name="alertThreshold")
    def alert_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.
        """
        return pulumi.get(self, "alert_threshold")

    @alert_threshold.setter
    def alert_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_threshold", value)

    @property
    @pulumi.getter(name="disableAlert")
    def disable_alert(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.
        """
        return pulumi.get(self, "disable_alert")

    @disable_alert.setter
    def disable_alert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_alert", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.
        """
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration_threshold", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigMetricType']]:
        """
        The type of metric.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigMetricType']]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter(name="onlyFinalAttempt")
    def only_final_attempt(self) -> Optional[pulumi.Input[bool]]:
        """
        For either events or tasks, depending on the type of alert, count only final attempts, not retries.
        """
        return pulumi.get(self, "only_final_attempt")

    @only_final_attempt.setter
    def only_final_attempt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_final_attempt", value)

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdType']]:
        """
        The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.
        """
        return pulumi.get(self, "threshold_type")

    @threshold_type.setter
    def threshold_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdType']]):
        pulumi.set(self, "threshold_type", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs']]:
        """
        The metric value, above or below which the alert should be triggered.
        """
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValueArgs']]):
        pulumi.set(self, "threshold_value", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaIntegrationParameterArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterDataType']] = None,
                 default_value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 input_output_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterInputOutputType']] = None,
                 is_transient: Optional[pulumi.Input[bool]] = None,
                 json_schema: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 producer: Optional[pulumi.Input[str]] = None,
                 searchable: Optional[pulumi.Input[bool]] = None):
        """
        Integration Parameter is defined in the integration config and are used to provide information about data types of the expected parameters and provide any default values if needed. They can also be used to add custom attributes. These are static in nature and should not be used for dynamic event definition.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterDataType'] data_type: Type of the parameter.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs'] default_value: Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        :param pulumi.Input[str] display_name: The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterInputOutputType'] input_output_type: Specifies the input/output type for the parameter.
        :param pulumi.Input[bool] is_transient: Whether this parameter is a transient parameter.
        :param pulumi.Input[str] json_schema: This schema will be used to validate runtime JSON-typed values of this parameter.
        :param pulumi.Input[str] key: Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        :param pulumi.Input[str] producer: The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        :param pulumi.Input[bool] searchable: Searchable in the execution log or not.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if input_output_type is not None:
            pulumi.set(__self__, "input_output_type", input_output_type)
        if is_transient is not None:
            pulumi.set(__self__, "is_transient", is_transient)
        if json_schema is not None:
            pulumi.set(__self__, "json_schema", json_schema)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if producer is not None:
            pulumi.set(__self__, "producer", producer)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterDataType']]:
        """
        Type of the parameter.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterDataType']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]:
        """
        Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="inputOutputType")
    def input_output_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterInputOutputType']]:
        """
        Specifies the input/output type for the parameter.
        """
        return pulumi.get(self, "input_output_type")

    @input_output_type.setter
    def input_output_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationParameterInputOutputType']]):
        pulumi.set(self, "input_output_type", value)

    @property
    @pulumi.getter(name="isTransient")
    def is_transient(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this parameter is a transient parameter.
        """
        return pulumi.get(self, "is_transient")

    @is_transient.setter
    def is_transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transient", value)

    @property
    @pulumi.getter(name="jsonSchema")
    def json_schema(self) -> Optional[pulumi.Input[str]]:
        """
        This schema will be used to validate runtime JSON-typed values of this parameter.
        """
        return pulumi.get(self, "json_schema")

    @json_schema.setter
    def json_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_schema", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def producer(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.
        """
        return pulumi.get(self, "producer")

    @producer.setter
    def producer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "producer", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[bool]]:
        """
        Searchable in the execution log or not.
        """
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "searchable", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaJwtArgs:
    def __init__(__self__, *,
                 jwt: Optional[pulumi.Input[str]] = None,
                 jwt_header: Optional[pulumi.Input[str]] = None,
                 jwt_payload: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.
        :param pulumi.Input[str] jwt: The token calculated by the header, payload and signature.
        :param pulumi.Input[str] jwt_header: Identifies which algorithm is used to generate the signature.
        :param pulumi.Input[str] jwt_payload: Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
        :param pulumi.Input[str] secret: User's pre-shared secret to sign the token.
        """
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if jwt_header is not None:
            pulumi.set(__self__, "jwt_header", jwt_header)
        if jwt_payload is not None:
            pulumi.set(__self__, "jwt_payload", jwt_payload)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[pulumi.Input[str]]:
        """
        The token calculated by the header, payload and signature.
        """
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter(name="jwtHeader")
    def jwt_header(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies which algorithm is used to generate the signature.
        """
        return pulumi.get(self, "jwt_header")

    @jwt_header.setter
    def jwt_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_header", value)

    @property
    @pulumi.getter(name="jwtPayload")
    def jwt_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
        """
        return pulumi.get(self, "jwt_payload")

    @jwt_payload.setter
    def jwt_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_payload", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        User's pre-shared secret to sign the token.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaMockConfigArgs:
    def __init__(__self__, *,
                 failed_executions: Optional[pulumi.Input[str]] = None,
                 mock_strategy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigMockStrategy']] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]] = None):
        """
        The configuration for mocking of a task during test execution Next available id: 4
        :param pulumi.Input[str] failed_executions: Optional. Number of times the given task should fail for failure mock strategy
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigMockStrategy'] mock_strategy: Mockstrategy defines how the particular task should be mocked during test execution
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]] parameters: Optional. List of key-value pairs for specific mock strategy
        """
        if failed_executions is not None:
            pulumi.set(__self__, "failed_executions", failed_executions)
        if mock_strategy is not None:
            pulumi.set(__self__, "mock_strategy", mock_strategy)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="failedExecutions")
    def failed_executions(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Number of times the given task should fail for failure mock strategy
        """
        return pulumi.get(self, "failed_executions")

    @failed_executions.setter
    def failed_executions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_executions", value)

    @property
    @pulumi.getter(name="mockStrategy")
    def mock_strategy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigMockStrategy']]:
        """
        Mockstrategy defines how the particular task should be mocked during test execution
        """
        return pulumi.get(self, "mock_strategy")

    @mock_strategy.setter
    def mock_strategy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigMockStrategy']]):
        pulumi.set(self, "mock_strategy", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]]:
        """
        Optional. List of key-value pairs for specific mock strategy
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaNextTaskArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 task_config_id: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None):
        """
        The task that is next in line to be executed, if the condition specified evaluated to true.
        :param pulumi.Input[str] condition: Standard filter expression for this task to become an eligible next task.
        :param pulumi.Input[str] description: User-provided description intended to give additional business context about the task.
        :param pulumi.Input[str] display_name: User-provided label that is attached to this edge in the UI.
        :param pulumi.Input[str] task_config_id: ID of the next task.
        :param pulumi.Input[str] task_id: Task number of the next task.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if task_config_id is not None:
            pulumi.set(__self__, "task_config_id", task_config_id)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Standard filter expression for this task to become an eligible next task.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided label that is attached to this edge in the UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="taskConfigId")
    def task_config_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the next task.
        """
        return pulumi.get(self, "task_config_id")

    @task_config_id.setter
    def task_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_config_id", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Task number of the next task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']] = None,
                 apply_reauth_policy: Optional[pulumi.Input[bool]] = None,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 auth_endpoint: Optional[pulumi.Input[str]] = None,
                 auth_params: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 request_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestType']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 token_params: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']] = None):
        """
        The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs'] access_token: The access token received from the token endpoint.
        :param pulumi.Input[bool] apply_reauth_policy: Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.
        :param pulumi.Input[str] auth_code: The Auth Code that is used to initially retrieve the access token.
        :param pulumi.Input[str] auth_endpoint: The auth url endpoint to send the auth code request to.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs'] auth_params: The auth parameters sent along with the auth code request.
        :param pulumi.Input[str] client_id: The client's id.
        :param pulumi.Input[str] client_secret: The client's secret.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestType'] request_type: Represent how to pass parameters to fetch access token
        :param pulumi.Input[str] scope: A space-delimited list of requested scope permissions.
        :param pulumi.Input[str] token_endpoint: The token url endpoint to send the token request to.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs'] token_params: The token parameters sent along with the token request.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if apply_reauth_policy is not None:
            pulumi.set(__self__, "apply_reauth_policy", apply_reauth_policy)
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if auth_endpoint is not None:
            pulumi.set(__self__, "auth_endpoint", auth_endpoint)
        if auth_params is not None:
            pulumi.set(__self__, "auth_params", auth_params)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if token_params is not None:
            pulumi.set(__self__, "token_params", token_params)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]:
        """
        The access token received from the token endpoint.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="applyReauthPolicy")
    def apply_reauth_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.
        """
        return pulumi.get(self, "apply_reauth_policy")

    @apply_reauth_policy.setter
    def apply_reauth_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_reauth_policy", value)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The Auth Code that is used to initially retrieve the access token.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="authEndpoint")
    def auth_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The auth url endpoint to send the auth code request to.
        """
        return pulumi.get(self, "auth_endpoint")

    @auth_endpoint.setter
    def auth_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_endpoint", value)

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]:
        """
        The auth parameters sent along with the auth code request.
        """
        return pulumi.get(self, "auth_params")

    @auth_params.setter
    def auth_params(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]):
        pulumi.set(self, "auth_params", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client's id.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestType']]:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestType']]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The token url endpoint to send the token request to.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]:
        """
        The token parameters sent along with the token request.
        """
        return pulumi.get(self, "token_params")

    @token_params.setter
    def token_params(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]):
        pulumi.set(self, "token_params", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 request_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsRequestType']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 token_params: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']] = None):
        """
        For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs'] access_token: Access token fetched from the authorization server.
        :param pulumi.Input[str] client_id: The client's ID.
        :param pulumi.Input[str] client_secret: The client's secret.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsRequestType'] request_type: Represent how to pass parameters to fetch access token
        :param pulumi.Input[str] scope: A space-delimited list of requested scope permissions.
        :param pulumi.Input[str] token_endpoint: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs'] token_params: Token parameters for the auth request.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if token_params is not None:
            pulumi.set(__self__, "token_params", token_params)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]:
        """
        Access token fetched from the authorization server.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client's ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsRequestType']]:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ClientCredentialsRequestType']]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]:
        """
        Token parameters for the auth request.
        """
        return pulumi.get(self, "token_params")

    @token_params.setter
    def token_params(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]):
        pulumi.set(self, "token_params", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 request_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestType']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 token_params: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs'] access_token: Access token fetched from the authorization server.
        :param pulumi.Input[str] client_id: The client's ID.
        :param pulumi.Input[str] client_secret: The client's secret.
        :param pulumi.Input[str] password: The user's password.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestType'] request_type: Represent how to pass parameters to fetch access token
        :param pulumi.Input[str] scope: A space-delimited list of requested scope permissions.
        :param pulumi.Input[str] token_endpoint: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs'] token_params: Token parameters for the auth request.
        :param pulumi.Input[str] username: The user's username.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if token_params is not None:
            pulumi.set(__self__, "token_params", token_params)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]:
        """
        Access token fetched from the authorization server.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaAccessTokenArgs']]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client's ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client's secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The user's password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestType']]:
        """
        Represent how to pass parameters to fetch access token
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestType']]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="tokenParams")
    def token_params(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]:
        """
        Token parameters for the auth request.
        """
        return pulumi.get(self, "token_params")

    @token_params.setter
    def token_params(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapArgs']]):
        pulumi.set(self, "token_params", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user's username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaOidcTokenArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 service_account_email: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 token_expire_time: Optional[pulumi.Input[str]] = None):
        """
        OIDC Token
        :param pulumi.Input[str] audience: Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
        :param pulumi.Input[str] service_account_email: The service account email to be used as the identity for the token.
        :param pulumi.Input[str] token: ID token obtained for the service account
        :param pulumi.Input[str] token_expire_time: The approximate time until the token retrieved is valid.
        """
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if service_account_email is not None:
            pulumi.set(__self__, "service_account_email", service_account_email)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if token_expire_time is not None:
            pulumi.set(__self__, "token_expire_time", token_expire_time)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The service account email to be used as the identity for the token.
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        ID token obtained for the service account
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="tokenExpireTime")
    def token_expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The approximate time until the token retrieved is valid.
        """
        return pulumi.get(self, "token_expire_time")

    @token_expire_time.setter
    def token_expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_expire_time", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaParameterMapEntryArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']] = None,
                 value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']] = None):
        """
        Entry is a pair of key and value.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs'] key: Key of the map entry.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs'] value: Value of the map entry.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']]:
        """
        Key of the map entry.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']]:
        """
        Value of the map entry.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaParameterMapFieldArgs:
    def __init__(__self__, *,
                 literal_value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']] = None,
                 reference_key: Optional[pulumi.Input[str]] = None):
        """
        Field represents either the key or value in an entry.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs'] literal_value: Passing a literal value.
        :param pulumi.Input[str] reference_key: Referencing one of the Integration variables.
        """
        if literal_value is not None:
            pulumi.set(__self__, "literal_value", literal_value)
        if reference_key is not None:
            pulumi.set(__self__, "reference_key", reference_key)

    @property
    @pulumi.getter(name="literalValue")
    def literal_value(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]:
        """
        Passing a literal value.
        """
        return pulumi.get(self, "literal_value")

    @literal_value.setter
    def literal_value(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaValueTypeArgs']]):
        pulumi.set(self, "literal_value", value)

    @property
    @pulumi.getter(name="referenceKey")
    def reference_key(self) -> Optional[pulumi.Input[str]]:
        """
        Referencing one of the Integration variables.
        """
        return pulumi.get(self, "reference_key")

    @reference_key.setter
    def reference_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_key", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaParameterMapArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapEntryArgs']]]] = None,
                 key_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapKeyType']] = None,
                 value_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapValueType']] = None):
        """
        A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapEntryArgs']]] entries: A list of parameter map entries.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapKeyType'] key_type: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapValueType'] value_type: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapEntryArgs']]]]:
        """
        A list of parameter map entries.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapKeyType']]:
        """
        Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapKeyType']]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapValueType']]:
        """
        Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaParameterMapValueType']]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaServiceAccountCredentialsArgs:
    def __init__(__self__, *,
                 scope: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        """
        Represents the service account which can be used to generate access token for authenticating the service call.
        :param pulumi.Input[str] scope: A space-delimited list of requested scope permissions.
        :param pulumi.Input[str] service_account: Name of the service account that has the permission to make the request.
        """
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        A space-delimited list of requested scope permissions.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service account that has the permission to make the request.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaStringParameterArrayArgs:
    def __init__(__self__, *,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        This message only contains a field of string array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] string_values: String array.
        """
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        String array.
        """
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaSuccessPolicyArgs:
    def __init__(__self__, *,
                 final_state: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyFinalState']] = None):
        """
        Policy that dictates the behavior for the task after it completes successfully.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyFinalState'] final_state: State to which the execution snapshot status will be set if the task succeeds.
        """
        if final_state is not None:
            pulumi.set(__self__, "final_state", final_state)

    @property
    @pulumi.getter(name="finalState")
    def final_state(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyFinalState']]:
        """
        State to which the execution snapshot status will be set if the task succeeds.
        """
        return pulumi.get(self, "final_state")

    @final_state.setter
    def final_state(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyFinalState']]):
        pulumi.set(self, "final_state", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaTaskConfigArgs:
    def __init__(__self__, *,
                 task_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 error_catcher_id: Optional[pulumi.Input[str]] = None,
                 external_task_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigExternalTaskType']] = None,
                 failure_policy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']] = None,
                 json_validation_option: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigJsonValidationOption']] = None,
                 next_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]] = None,
                 next_tasks_execution_policy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigNextTasksExecutionPolicy']] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]] = None,
                 position: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']] = None,
                 success_policy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyArgs']] = None,
                 synchronous_call_failure_policy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']] = None,
                 task: Optional[pulumi.Input[str]] = None,
                 task_execution_strategy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigTaskExecutionStrategy']] = None,
                 task_template: Optional[pulumi.Input[str]] = None):
        """
        The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
        :param pulumi.Input[str] task_id: The identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_id`).
        :param pulumi.Input[str] description: Optional. User-provided description intended to give additional business context about the task.
        :param pulumi.Input[str] display_name: Optional. User-provided label that is attached to this TaskConfig in the UI.
        :param pulumi.Input[str] error_catcher_id: Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigExternalTaskType'] external_task_type: Optional. External task type of the task
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs'] failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigJsonValidationOption'] json_validation_option: Optional. If set, overrides the option configured in the Task implementation class.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]] next_tasks: Optional. The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigNextTasksExecutionPolicy'] next_tasks_execution_policy: Optional. The policy dictating the execution of the next set of tasks for the current task.
        :param pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]] parameters: Optional. The customized parameters the user can pass to this task.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs'] position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyArgs'] success_policy: Optional. Determines what action to take upon successful task completion.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs'] synchronous_call_failure_policy: Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        :param pulumi.Input[str] task: Optional. The name for the task.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigTaskExecutionStrategy'] task_execution_strategy: Optional. The policy dictating the execution strategy of this task.
        :param pulumi.Input[str] task_template: Optional. Used to define task-template name if task is of type task-template
        """
        pulumi.set(__self__, "task_id", task_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_catcher_id is not None:
            pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        if external_task_type is not None:
            pulumi.set(__self__, "external_task_type", external_task_type)
        if failure_policy is not None:
            pulumi.set(__self__, "failure_policy", failure_policy)
        if json_validation_option is not None:
            pulumi.set(__self__, "json_validation_option", json_validation_option)
        if next_tasks is not None:
            pulumi.set(__self__, "next_tasks", next_tasks)
        if next_tasks_execution_policy is not None:
            pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if success_policy is not None:
            pulumi.set(__self__, "success_policy", success_policy)
        if synchronous_call_failure_policy is not None:
            pulumi.set(__self__, "synchronous_call_failure_policy", synchronous_call_failure_policy)
        if task is not None:
            pulumi.set(__self__, "task", task)
        if task_execution_strategy is not None:
            pulumi.set(__self__, "task_execution_strategy", task_execution_strategy)
        if task_template is not None:
            pulumi.set(__self__, "task_template", task_template)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[str]:
        """
        The identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_id`).
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-provided label that is attached to this TaskConfig in the UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @error_catcher_id.setter
    def error_catcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_catcher_id", value)

    @property
    @pulumi.getter(name="externalTaskType")
    def external_task_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigExternalTaskType']]:
        """
        Optional. External task type of the task
        """
        return pulumi.get(self, "external_task_type")

    @external_task_type.setter
    def external_task_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigExternalTaskType']]):
        pulumi.set(self, "external_task_type", value)

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']]:
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).
        """
        return pulumi.get(self, "failure_policy")

    @failure_policy.setter
    def failure_policy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']]):
        pulumi.set(self, "failure_policy", value)

    @property
    @pulumi.getter(name="jsonValidationOption")
    def json_validation_option(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigJsonValidationOption']]:
        """
        Optional. If set, overrides the option configured in the Task implementation class.
        """
        return pulumi.get(self, "json_validation_option")

    @json_validation_option.setter
    def json_validation_option(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigJsonValidationOption']]):
        pulumi.set(self, "json_validation_option", value)

    @property
    @pulumi.getter(name="nextTasks")
    def next_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]]:
        """
        Optional. The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.
        """
        return pulumi.get(self, "next_tasks")

    @next_tasks.setter
    def next_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]]):
        pulumi.set(self, "next_tasks", value)

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigNextTasksExecutionPolicy']]:
        """
        Optional. The policy dictating the execution of the next set of tasks for the current task.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @next_tasks_execution_policy.setter
    def next_tasks_execution_policy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigNextTasksExecutionPolicy']]):
        pulumi.set(self, "next_tasks_execution_policy", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]]:
        """
        Optional. The customized parameters the user can pass to this task.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GoogleCloudIntegrationsV1alphaEventParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]:
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="successPolicy")
    def success_policy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyArgs']]:
        """
        Optional. Determines what action to take upon successful task completion.
        """
        return pulumi.get(self, "success_policy")

    @success_policy.setter
    def success_policy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaSuccessPolicyArgs']]):
        pulumi.set(self, "success_policy", value)

    @property
    @pulumi.getter(name="synchronousCallFailurePolicy")
    def synchronous_call_failure_policy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']]:
        """
        Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).
        """
        return pulumi.get(self, "synchronous_call_failure_policy")

    @synchronous_call_failure_policy.setter
    def synchronous_call_failure_policy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaFailurePolicyArgs']]):
        pulumi.set(self, "synchronous_call_failure_policy", value)

    @property
    @pulumi.getter
    def task(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name for the task.
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task", value)

    @property
    @pulumi.getter(name="taskExecutionStrategy")
    def task_execution_strategy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigTaskExecutionStrategy']]:
        """
        Optional. The policy dictating the execution strategy of this task.
        """
        return pulumi.get(self, "task_execution_strategy")

    @task_execution_strategy.setter
    def task_execution_strategy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTaskConfigTaskExecutionStrategy']]):
        pulumi.set(self, "task_execution_strategy", value)

    @property
    @pulumi.getter(name="taskTemplate")
    def task_template(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Used to define task-template name if task is of type task-template
        """
        return pulumi.get(self, "task_template")

    @task_template.setter
    def task_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_template", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaTestTaskConfigArgs:
    def __init__(__self__, *,
                 task: pulumi.Input[str],
                 task_number: pulumi.Input[str],
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionArgs']]]] = None,
                 mock_config: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigArgs']] = None):
        """
        The task mock configuration details and assertions for functional tests. Next available id: 5
        :param pulumi.Input[str] task: This defines in the test case, the task name in integration which will be mocked by this test task config
        :param pulumi.Input[str] task_number: This defines in the test case, the task in integration which will be mocked by this test task config
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionArgs']]] assertions: Optional. List of conditions or expressions which should be evaluated to true unless there is a bug/problem in the integration. These are evaluated one the task execution is completed as per the mock strategy in test case
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigArgs'] mock_config: Optional. Defines how to mock the given task during test execution
        """
        pulumi.set(__self__, "task", task)
        pulumi.set(__self__, "task_number", task_number)
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if mock_config is not None:
            pulumi.set(__self__, "mock_config", mock_config)

    @property
    @pulumi.getter
    def task(self) -> pulumi.Input[str]:
        """
        This defines in the test case, the task name in integration which will be mocked by this test task config
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: pulumi.Input[str]):
        pulumi.set(self, "task", value)

    @property
    @pulumi.getter(name="taskNumber")
    def task_number(self) -> pulumi.Input[str]:
        """
        This defines in the test case, the task in integration which will be mocked by this test task config
        """
        return pulumi.get(self, "task_number")

    @task_number.setter
    def task_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_number", value)

    @property
    @pulumi.getter
    def assertions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionArgs']]]]:
        """
        Optional. List of conditions or expressions which should be evaluated to true unless there is a bug/problem in the integration. These are evaluated one the task execution is completed as per the mock strategy in test case
        """
        return pulumi.get(self, "assertions")

    @assertions.setter
    def assertions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaAssertionArgs']]]]):
        pulumi.set(self, "assertions", value)

    @property
    @pulumi.getter(name="mockConfig")
    def mock_config(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigArgs']]:
        """
        Optional. Defines how to mock the given task during test execution
        """
        return pulumi.get(self, "mock_config")

    @mock_config.setter
    def mock_config(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaMockConfigArgs']]):
        pulumi.set(self, "mock_config", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaTriggerConfigArgs:
    def __init__(__self__, *,
                 trigger_number: pulumi.Input[str],
                 alert_config: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs']]]] = None,
                 cloud_scheduler_config: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 error_catcher_id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 next_tasks_execution_policy: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigNextTasksExecutionPolicy']] = None,
                 position: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 start_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 trigger_id: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigTriggerType']] = None):
        """
        Configuration detail of a trigger.
        :param pulumi.Input[str] trigger_number: A number to uniquely identify each trigger config within the integration on UI.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs']]] alert_config: Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs'] cloud_scheduler_config: Optional. Cloud Scheduler Trigger related metadata
        :param pulumi.Input[str] description: Optional. User-provided description intended to give additional business context about the task.
        :param pulumi.Input[str] error_catcher_id: Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        :param pulumi.Input[str] label: Optional. The user created label for a particular trigger.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigNextTasksExecutionPolicy'] next_tasks_execution_policy: Optional. Dictates how next tasks will be executed.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs'] position: Optional. Informs the front-end application where to draw this error catcher config on the UI.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Pub/sub triggers.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]] start_tasks: Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).
        :param pulumi.Input[str] trigger: Optional. Name of the trigger. Example: "API Trigger", "Cloud Pub Sub Trigger" When set will be sent out to monitoring dashabord for tracking purpose.
        :param pulumi.Input[str] trigger_id: Optional. The backend trigger ID.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigTriggerType'] trigger_type: Optional. Type of trigger
        """
        pulumi.set(__self__, "trigger_number", trigger_number)
        if alert_config is not None:
            pulumi.set(__self__, "alert_config", alert_config)
        if cloud_scheduler_config is not None:
            pulumi.set(__self__, "cloud_scheduler_config", cloud_scheduler_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error_catcher_id is not None:
            pulumi.set(__self__, "error_catcher_id", error_catcher_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if next_tasks_execution_policy is not None:
            pulumi.set(__self__, "next_tasks_execution_policy", next_tasks_execution_policy)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if start_tasks is not None:
            pulumi.set(__self__, "start_tasks", start_tasks)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="triggerNumber")
    def trigger_number(self) -> pulumi.Input[str]:
        """
        A number to uniquely identify each trigger config within the integration on UI.
        """
        return pulumi.get(self, "trigger_number")

    @trigger_number.setter
    def trigger_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger_number", value)

    @property
    @pulumi.getter(name="alertConfig")
    def alert_config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs']]]]:
        """
        Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.
        """
        return pulumi.get(self, "alert_config")

    @alert_config.setter
    def alert_config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaIntegrationAlertConfigArgs']]]]):
        pulumi.set(self, "alert_config", value)

    @property
    @pulumi.getter(name="cloudSchedulerConfig")
    def cloud_scheduler_config(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs']]:
        """
        Optional. Cloud Scheduler Trigger related metadata
        """
        return pulumi.get(self, "cloud_scheduler_config")

    @cloud_scheduler_config.setter
    def cloud_scheduler_config(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCloudSchedulerConfigArgs']]):
        pulumi.set(self, "cloud_scheduler_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-provided description intended to give additional business context about the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="errorCatcherId")
    def error_catcher_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        """
        return pulumi.get(self, "error_catcher_id")

    @error_catcher_id.setter
    def error_catcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_catcher_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The user created label for a particular trigger.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="nextTasksExecutionPolicy")
    def next_tasks_execution_policy(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigNextTasksExecutionPolicy']]:
        """
        Optional. Dictates how next tasks will be executed.
        """
        return pulumi.get(self, "next_tasks_execution_policy")

    @next_tasks_execution_policy.setter
    def next_tasks_execution_policy(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigNextTasksExecutionPolicy']]):
        pulumi.set(self, "next_tasks_execution_policy", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]:
        """
        Optional. Informs the front-end application where to draw this error catcher config on the UI.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaCoordinateArgs']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Pub/sub triggers.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="startTasks")
    def start_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]]:
        """
        Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).
        """
        return pulumi.get(self, "start_tasks")

    @start_tasks.setter
    def start_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudIntegrationsV1alphaNextTaskArgs']]]]):
        pulumi.set(self, "start_tasks", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Name of the trigger. Example: "API Trigger", "Cloud Pub Sub Trigger" When set will be sent out to monitoring dashabord for tracking purpose.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The backend trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_id", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigTriggerType']]:
        """
        Optional. Type of trigger
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaTriggerConfigTriggerType']]):
        pulumi.set(self, "trigger_type", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Username and password pair.
        :param pulumi.Input[str] password: Password to be used
        :param pulumi.Input[str] username: Username to be used
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to be used
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to be used
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GoogleCloudIntegrationsV1alphaValueTypeArgs:
    def __init__(__self__, *,
                 boolean_array: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs']] = None,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_array: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs']] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_array: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntParameterArrayArgs']] = None,
                 int_value: Optional[pulumi.Input[str]] = None,
                 json_value: Optional[pulumi.Input[str]] = None,
                 string_array: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaStringParameterArrayArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        The type of the parameter.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs'] boolean_array: Boolean Array.
        :param pulumi.Input[bool] boolean_value: Boolean.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs'] double_array: Double Number Array.
        :param pulumi.Input[float] double_value: Double Number.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaIntParameterArrayArgs'] int_array: Integer Array.
        :param pulumi.Input[str] int_value: Integer.
        :param pulumi.Input[str] json_value: Json.
        :param pulumi.Input['GoogleCloudIntegrationsV1alphaStringParameterArrayArgs'] string_array: String Array.
        :param pulumi.Input[str] string_value: String.
        """
        if boolean_array is not None:
            pulumi.set(__self__, "boolean_array", boolean_array)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_array is not None:
            pulumi.set(__self__, "double_array", double_array)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_array is not None:
            pulumi.set(__self__, "int_array", int_array)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if json_value is not None:
            pulumi.set(__self__, "json_value", json_value)
        if string_array is not None:
            pulumi.set(__self__, "string_array", string_array)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanArray")
    def boolean_array(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs']]:
        """
        Boolean Array.
        """
        return pulumi.get(self, "boolean_array")

    @boolean_array.setter
    def boolean_array(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaBooleanParameterArrayArgs']]):
        pulumi.set(self, "boolean_array", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleArray")
    def double_array(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs']]:
        """
        Double Number Array.
        """
        return pulumi.get(self, "double_array")

    @double_array.setter
    def double_array(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaDoubleParameterArrayArgs']]):
        pulumi.set(self, "double_array", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        """
        Double Number.
        """
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intArray")
    def int_array(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntParameterArrayArgs']]:
        """
        Integer Array.
        """
        return pulumi.get(self, "int_array")

    @int_array.setter
    def int_array(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaIntParameterArrayArgs']]):
        pulumi.set(self, "int_array", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[str]]:
        """
        Integer.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="jsonValue")
    def json_value(self) -> Optional[pulumi.Input[str]]:
        """
        Json.
        """
        return pulumi.get(self, "json_value")

    @json_value.setter
    def json_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_value", value)

    @property
    @pulumi.getter(name="stringArray")
    def string_array(self) -> Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaStringParameterArrayArgs']]:
        """
        String Array.
        """
        return pulumi.get(self, "string_array")

    @string_array.setter
    def string_array(self, value: Optional[pulumi.Input['GoogleCloudIntegrationsV1alphaStringParameterArrayArgs']]):
        pulumi.set(self, "string_array", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


