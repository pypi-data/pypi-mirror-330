# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AccessConfigNetworkTier',
    'AccessConfigType',
    'AddressAddressType',
    'AddressIpVersion',
    'AddressIpv6EndpointType',
    'AddressNetworkTier',
    'AddressPurpose',
    'AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface',
    'AttachedDiskInitializeParamsArchitecture',
    'AttachedDiskInitializeParamsOnUpdateAction',
    'AttachedDiskInterface',
    'AttachedDiskMode',
    'AttachedDiskSavedState',
    'AttachedDiskType',
    'AuditLogConfigLogType',
    'AuthorizationLoggingOptionsPermissionType',
    'AutoscalingPolicyCpuUtilizationPredictiveMethod',
    'AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType',
    'AutoscalingPolicyMode',
    'BackendBalancingMode',
    'BackendBucketCdnPolicyCacheMode',
    'BackendBucketCompressionMode',
    'BackendServiceCdnPolicyCacheMode',
    'BackendServiceCompressionMode',
    'BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends',
    'BackendServiceConnectionTrackingPolicyTrackingMode',
    'BackendServiceLoadBalancingScheme',
    'BackendServiceLocalityLbPolicy',
    'BackendServiceLocalityLoadBalancingPolicyConfigPolicyName',
    'BackendServiceLogConfigOptionalMode',
    'BackendServiceProtocol',
    'BackendServiceSessionAffinity',
    'ConditionIam',
    'ConditionOp',
    'ConditionSys',
    'DeprecationStatusState',
    'DiskArchitecture',
    'DiskInstantiationConfigInstantiateFrom',
    'DistributionPolicyTargetShape',
    'ExternalVpnGatewayRedundancyType',
    'FileContentBufferFileType',
    'FirewallDirection',
    'FirewallLogConfigMetadata',
    'FirewallPolicyRuleDirection',
    'ForwardingRuleIpProtocol',
    'ForwardingRuleIpVersion',
    'ForwardingRuleLoadBalancingScheme',
    'ForwardingRuleNetworkTier',
    'ForwardingRulePscConnectionStatus',
    'GRPCHealthCheckPortSpecification',
    'GlobalAddressAddressType',
    'GlobalAddressIpVersion',
    'GlobalAddressIpv6EndpointType',
    'GlobalAddressNetworkTier',
    'GlobalAddressPurpose',
    'GlobalForwardingRuleIpProtocol',
    'GlobalForwardingRuleIpVersion',
    'GlobalForwardingRuleLoadBalancingScheme',
    'GlobalForwardingRuleNetworkTier',
    'GlobalForwardingRulePscConnectionStatus',
    'GlobalNetworkEndpointGroupNetworkEndpointType',
    'GuestOsFeatureType',
    'HTTP2HealthCheckPortSpecification',
    'HTTP2HealthCheckProxyHeader',
    'HTTPHealthCheckPortSpecification',
    'HTTPHealthCheckProxyHeader',
    'HTTPSHealthCheckPortSpecification',
    'HTTPSHealthCheckProxyHeader',
    'HealthCheckType',
    'HttpRedirectActionRedirectResponseCode',
    'ImageArchitecture',
    'ImageRawDiskContainerType',
    'ImageSourceType',
    'InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair',
    'InstanceGroupManagerListManagedInstancesResults',
    'InstanceGroupManagerUpdatePolicyInstanceRedistributionType',
    'InstanceGroupManagerUpdatePolicyMinimalAction',
    'InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction',
    'InstanceGroupManagerUpdatePolicyReplacementMethod',
    'InstanceGroupManagerUpdatePolicyType',
    'InstanceKeyRevocationActionType',
    'InstancePrivateIpv6GoogleAccess',
    'InstancePropertiesKeyRevocationActionType',
    'InstancePropertiesPrivateIpv6GoogleAccess',
    'InterconnectAttachmentBandwidth',
    'InterconnectAttachmentEdgeAvailabilityDomain',
    'InterconnectAttachmentEncryption',
    'InterconnectAttachmentStackType',
    'InterconnectAttachmentType',
    'InterconnectInterconnectType',
    'InterconnectLinkType',
    'InterconnectRequestedFeaturesItem',
    'LogConfigCloudAuditOptionsLogName',
    'LogConfigDataAccessOptionsLogMode',
    'MetadataFilterFilterMatchCriteria',
    'NetworkAttachmentConnectionPreference',
    'NetworkEndpointGroupNetworkEndpointType',
    'NetworkInterfaceNicType',
    'NetworkInterfaceStackType',
    'NetworkNetworkFirewallPolicyEnforcementOrder',
    'NetworkPerformanceConfigTotalEgressBandwidthTier',
    'NetworkRoutingConfigRoutingMode',
    'NodeGroupAutoscalingPolicyMode',
    'NodeGroupMaintenancePolicy',
    'NodeGroupStatus',
    'NodeTemplateCpuOvercommitType',
    'PacketMirroringEnable',
    'PacketMirroringFilterDirection',
    'PublicAdvertisedPrefixPdpScope',
    'PublicAdvertisedPrefixStatus',
    'RegionBackendServiceCompressionMode',
    'RegionBackendServiceLoadBalancingScheme',
    'RegionBackendServiceLocalityLbPolicy',
    'RegionBackendServiceProtocol',
    'RegionBackendServiceSessionAffinity',
    'RegionCommitmentCategory',
    'RegionCommitmentPlan',
    'RegionCommitmentType',
    'RegionDiskArchitecture',
    'RegionHealthCheckServiceHealthStatusAggregationPolicy',
    'RegionHealthCheckType',
    'RegionInstanceGroupManagerListManagedInstancesResults',
    'RegionNetworkEndpointGroupNetworkEndpointType',
    'RegionSecurityPolicyType',
    'RegionSslCertificateType',
    'RegionSslPolicyMinTlsVersion',
    'RegionSslPolicyProfile',
    'RegionTargetHttpsProxyQuicOverride',
    'RegionTargetTcpProxyProxyHeader',
    'ReservationAffinityConsumeReservationType',
    'ResourceCommitmentType',
    'ResourcePolicyGroupPlacementPolicyCollocation',
    'ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete',
    'ResourcePolicyWeeklyCycleDayOfWeekDay',
    'RouterBgpAdvertiseMode',
    'RouterBgpAdvertisedGroupsItem',
    'RouterBgpPeerAdvertiseMode',
    'RouterBgpPeerAdvertisedGroupsItem',
    'RouterBgpPeerBfdSessionInitializationMode',
    'RouterBgpPeerEnable',
    'RouterNatAutoNetworkTier',
    'RouterNatEndpointTypesItem',
    'RouterNatLogConfigFilter',
    'RouterNatNatIpAllocateOption',
    'RouterNatSourceSubnetworkIpRangesToNat',
    'RouterNatSubnetworkToNatSourceIpRangesToNatItem',
    'RouterNatType',
    'RuleAction',
    'SSLHealthCheckPortSpecification',
    'SSLHealthCheckProxyHeader',
    'SchedulingInstanceTerminationAction',
    'SchedulingNodeAffinityOperator',
    'SchedulingOnHostMaintenance',
    'SchedulingProvisioningModel',
    'SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility',
    'SecurityPolicyAdvancedOptionsConfigJsonParsing',
    'SecurityPolicyAdvancedOptionsConfigLogLevel',
    'SecurityPolicyDdosProtectionConfigDdosProtection',
    'SecurityPolicyRuleMatcherVersionedExpr',
    'SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp',
    'SecurityPolicyRuleRateLimitOptionsEnforceOnKey',
    'SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyType',
    'SecurityPolicyRuleRedirectOptionsType',
    'SecurityPolicyType',
    'SecurityPolicyUserDefinedFieldBase',
    'ServerBindingType',
    'ServiceAttachmentConnectionPreference',
    'ShareSettingsShareType',
    'SnapshotSnapshotType',
    'SslCertificateType',
    'SslPolicyMinTlsVersion',
    'SslPolicyProfile',
    'StatefulPolicyPreservedStateDiskDeviceAutoDelete',
    'StatefulPolicyPreservedStateNetworkIpAutoDelete',
    'SubnetworkIpv6AccessType',
    'SubnetworkLogConfigAggregationInterval',
    'SubnetworkLogConfigMetadata',
    'SubnetworkPrivateIpv6GoogleAccess',
    'SubnetworkPurpose',
    'SubnetworkRole',
    'SubnetworkStackType',
    'SubsettingPolicy',
    'TCPHealthCheckPortSpecification',
    'TCPHealthCheckProxyHeader',
    'TargetHttpsProxyQuicOverride',
    'TargetInstanceNatPolicy',
    'TargetPoolSessionAffinity',
    'TargetSslProxyProxyHeader',
    'TargetTcpProxyProxyHeader',
    'VpnGatewayStackType',
]


class AccessConfigNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class AccessConfigType(str, Enum):
    """
    The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6.
    """
    DIRECT_IPV6 = "DIRECT_IPV6"
    ONE_TO_ONE_NAT = "ONE_TO_ONE_NAT"


class AddressAddressType(str, Enum):
    """
    The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    """
    EXTERNAL = "EXTERNAL"
    """
    A publicly visible external IP address.
    """
    INTERNAL = "INTERNAL"
    """
    A private network IP address, for use with an Instance or Internal Load Balancer forwarding rule.
    """
    UNSPECIFIED_TYPE = "UNSPECIFIED_TYPE"


class AddressIpVersion(str, Enum):
    """
    The IP version that will be used by this address. Valid options are IPV4 or IPV6.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class AddressIpv6EndpointType(str, Enum):
    """
    The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
    """
    NETLB = "NETLB"
    """
    Reserved IPv6 address can be used on network load balancer.
    """
    VM = "VM"
    """
    Reserved IPv6 address can be used on VM.
    """


class AddressNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class AddressPurpose(str, Enum):
    """
    The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. 
    """
    DNS_RESOLVER = "DNS_RESOLVER"
    """
    DNS resolver address in the subnetwork.
    """
    GCE_ENDPOINT = "GCE_ENDPOINT"
    """
    VM internal/alias IP, Internal LB service IP, etc.
    """
    IPSEC_INTERCONNECT = "IPSEC_INTERCONNECT"
    """
    A regional internal IP address range reserved for the VLAN attachment that is used in HA VPN over Cloud Interconnect. This regional internal IP address range must not overlap with any IP address range of subnet/route in the VPC network and its peering networks. After the VLAN attachment is created with the reserved IP address range, when creating a new VPN gateway, its interface IP address is allocated from the associated VLAN attachment’s IP address range.
    """
    NAT_AUTO = "NAT_AUTO"
    """
    External IP automatically reserved for Cloud NAT.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    A private network IP address that can be used to configure Private Service Connect. This purpose can be specified only for GLOBAL addresses of Type INTERNAL
    """
    SERVERLESS = "SERVERLESS"
    """
    A regional internal IP address range reserved for Serverless.
    """
    SHARED_LOADBALANCER_VIP = "SHARED_LOADBALANCER_VIP"
    """
    A private network IP address that can be shared by multiple Internal Load Balancer forwarding rules.
    """
    VPC_PEERING = "VPC_PEERING"
    """
    IP range for peer networks.
    """


class AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
    """
    NVME = "NVME"
    SCSI = "SCSI"


class AttachedDiskInitializeParamsArchitecture(str, Enum):
    """
    The architecture of the attached disk. Valid values are arm64 or x86_64.
    """
    ARCHITECTURE_UNSPECIFIED = "ARCHITECTURE_UNSPECIFIED"
    """
    Default value indicating Architecture is not set.
    """
    ARM64 = "ARM64"
    """
    Machines with architecture ARM64
    """
    X8664 = "X86_64"
    """
    Machines with architecture X86_64
    """


class AttachedDiskInitializeParamsOnUpdateAction(str, Enum):
    """
    Specifies which action to take on instance update with this disk. Default is to use the existing disk.
    """
    RECREATE_DISK = "RECREATE_DISK"
    """
    Always recreate the disk.
    """
    RECREATE_DISK_IF_SOURCE_CHANGED = "RECREATE_DISK_IF_SOURCE_CHANGED"
    """
    Recreate the disk if source (image, snapshot) of this disk is different from source of existing disk.
    """
    USE_EXISTING_DISK = "USE_EXISTING_DISK"
    """
    Use the existing disk, this is the default behaviour.
    """


class AttachedDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
    """
    NVME = "NVME"
    SCSI = "SCSI"


class AttachedDiskMode(str, Enum):
    """
    The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    """
    READ_ONLY = "READ_ONLY"
    """
    Attaches this disk in read-only mode. Multiple virtual machines can use a disk in read-only mode at a time.
    """
    READ_WRITE = "READ_WRITE"
    """
    *[Default]* Attaches this disk in read-write mode. Only one virtual machine at a time can be attached to a disk in read-write mode.
    """


class AttachedDiskSavedState(str, Enum):
    """
    For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api.
    """
    DISK_SAVED_STATE_UNSPECIFIED = "DISK_SAVED_STATE_UNSPECIFIED"
    """
    *[Default]* Disk state has not been preserved.
    """
    PRESERVED = "PRESERVED"
    """
    Disk state has been preserved.
    """


class AttachedDiskType(str, Enum):
    """
    Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
    """
    PERSISTENT = "PERSISTENT"
    SCRATCH = "SCRATCH"


class AuditLogConfigLogType(str, Enum):
    """
    The log type that this config enables.
    """
    ADMIN_READ = "ADMIN_READ"
    """
    Admin reads. Example: CloudIAM getIamPolicy
    """
    DATA_READ = "DATA_READ"
    """
    Data reads. Example: CloudSQL Users list
    """
    DATA_WRITE = "DATA_WRITE"
    """
    Data writes. Example: CloudSQL Users create
    """
    LOG_TYPE_UNSPECIFIED = "LOG_TYPE_UNSPECIFIED"
    """
    Default case. Should never be this.
    """


class AuthorizationLoggingOptionsPermissionType(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    ADMIN_READ = "ADMIN_READ"
    """
    This is deprecated and has no effect. Do not use.
    """
    ADMIN_WRITE = "ADMIN_WRITE"
    """
    This is deprecated and has no effect. Do not use.
    """
    DATA_READ = "DATA_READ"
    """
    This is deprecated and has no effect. Do not use.
    """
    DATA_WRITE = "DATA_WRITE"
    """
    This is deprecated and has no effect. Do not use.
    """
    PERMISSION_TYPE_UNSPECIFIED = "PERMISSION_TYPE_UNSPECIFIED"
    """
    This is deprecated and has no effect. Do not use.
    """


class AutoscalingPolicyCpuUtilizationPredictiveMethod(str, Enum):
    """
    Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    """
    NONE = "NONE"
    """
    No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics
    """
    OPTIMIZE_AVAILABILITY = "OPTIMIZE_AVAILABILITY"
    """
    Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    """


class AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType(str, Enum):
    """
    Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
    """
    DELTA_PER_MINUTE = "DELTA_PER_MINUTE"
    """
    Sets the utilization target value for a cumulative or delta metric, expressed as the rate of growth per minute.
    """
    DELTA_PER_SECOND = "DELTA_PER_SECOND"
    """
    Sets the utilization target value for a cumulative or delta metric, expressed as the rate of growth per second.
    """
    GAUGE = "GAUGE"
    """
    Sets the utilization target value for a gauge metric. The autoscaler will collect the average utilization of the virtual machines from the last couple of minutes, and compare the value to the utilization target value to perform autoscaling.
    """


class AutoscalingPolicyMode(str, Enum):
    """
    Defines the operating mode for this policy. The following modes are available: - OFF: Disables the autoscaler but maintains its configuration. - ONLY_SCALE_OUT: Restricts the autoscaler to add VM instances only. - ON: Enables all autoscaler activities according to its policy. For more information, see "Turning off or restricting an autoscaler"
    """
    OFF = "OFF"
    """
    Do not automatically scale the MIG in or out. The recommended_size field contains the size of MIG that would be set if the actuation mode was enabled.
    """
    ON = "ON"
    """
    Automatically scale the MIG in and out according to the policy.
    """
    ONLY_SCALE_OUT = "ONLY_SCALE_OUT"
    """
    Automatically create VMs according to the policy, but do not scale the MIG in.
    """
    ONLY_UP = "ONLY_UP"
    """
    Automatically create VMs according to the policy, but do not scale the MIG in.
    """


class BackendBalancingMode(str, Enum):
    """
    Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
    """
    CONNECTION = "CONNECTION"
    """
    Balance based on the number of simultaneous connections.
    """
    RATE = "RATE"
    """
    Balance based on requests per second (RPS).
    """
    UTILIZATION = "UTILIZATION"
    """
    Balance based on the backend utilization.
    """


class BackendBucketCdnPolicyCacheMode(str, Enum):
    """
    Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    CACHE_ALL_STATIC = "CACHE_ALL_STATIC"
    """
    Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    FORCE_CACHE_ALL = "FORCE_CACHE_ALL"
    """
    Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
    """
    INVALID_CACHE_MODE = "INVALID_CACHE_MODE"
    USE_ORIGIN_HEADERS = "USE_ORIGIN_HEADERS"
    """
    Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
    """


class BackendBucketCompressionMode(str, Enum):
    """
    Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    """
    AUTOMATIC = "AUTOMATIC"
    """
    Automatically uses the best compression based on the Accept-Encoding header sent by the client.
    """
    DISABLED = "DISABLED"
    """
    Disables compression. Existing compressed responses cached by Cloud CDN will not be served to clients.
    """


class BackendServiceCdnPolicyCacheMode(str, Enum):
    """
    Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    CACHE_ALL_STATIC = "CACHE_ALL_STATIC"
    """
    Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    FORCE_CACHE_ALL = "FORCE_CACHE_ALL"
    """
    Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
    """
    INVALID_CACHE_MODE = "INVALID_CACHE_MODE"
    USE_ORIGIN_HEADERS = "USE_ORIGIN_HEADERS"
    """
    Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
    """


class BackendServiceCompressionMode(str, Enum):
    """
    Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    """
    AUTOMATIC = "AUTOMATIC"
    """
    Automatically uses the best compression based on the Accept-Encoding header sent by the client.
    """
    DISABLED = "DISABLED"
    """
    Disables compression. Existing compressed responses cached by Cloud CDN will not be served to clients.
    """


class BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends(str, Enum):
    """
    Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
    """
    ALWAYS_PERSIST = "ALWAYS_PERSIST"
    DEFAULT_FOR_PROTOCOL = "DEFAULT_FOR_PROTOCOL"
    NEVER_PERSIST = "NEVER_PERSIST"


class BackendServiceConnectionTrackingPolicyTrackingMode(str, Enum):
    """
    Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
    """
    INVALID_TRACKING_MODE = "INVALID_TRACKING_MODE"
    PER_CONNECTION = "PER_CONNECTION"
    PER_SESSION = "PER_SESSION"


class BackendServiceLoadBalancingScheme(str, Enum):
    """
    Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    """
    EXTERNAL = "EXTERNAL"
    """
    Signifies that this will be used for external HTTP(S), SSL Proxy, TCP Proxy, or Network Load Balancing
    """
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    """
    Signifies that this will be used for External Managed HTTP(S) Load Balancing.
    """
    INTERNAL = "INTERNAL"
    """
    Signifies that this will be used for Internal TCP/UDP Load Balancing.
    """
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    """
    Signifies that this will be used for Internal HTTP(S) Load Balancing.
    """
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    """
    Signifies that this will be used by Traffic Director.
    """
    INVALID_LOAD_BALANCING_SCHEME = "INVALID_LOAD_BALANCING_SCHEME"


class BackendServiceLocalityLbPolicy(str, Enum):
    """
    The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    INVALID_LB_POLICY = "INVALID_LB_POLICY"
    LEAST_REQUEST = "LEAST_REQUEST"
    """
    An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
    """
    MAGLEV = "MAGLEV"
    """
    This algorithm implements consistent hashing to backends. Maglev can be used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
    """
    ORIGINAL_DESTINATION = "ORIGINAL_DESTINATION"
    """
    Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
    """
    RANDOM = "RANDOM"
    """
    The load balancer selects a random healthy host.
    """
    RING_HASH = "RING_HASH"
    """
    The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
    """
    ROUND_ROBIN = "ROUND_ROBIN"
    """
    This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
    """
    WEIGHTED_MAGLEV = "WEIGHTED_MAGLEV"
    """
    Per-instance weighted Load Balancing via health check reported weights. If set, the Backend Service must configure a non legacy HTTP-based Health Check, and health check replies are expected to contain non-standard HTTP response header field X-Load-Balancing-Endpoint-Weight to specify the per-instance weights. If set, Load Balancing is weighted based on the per-instance weights reported in the last processed health check replies, as long as every instance either reported a valid weight or had UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains equal-weight. This option is only supported in Network Load Balancing.
    """


class BackendServiceLocalityLoadBalancingPolicyConfigPolicyName(str, Enum):
    """
    The name of a locality load-balancing policy. Valid values include ROUND_ROBIN and, for Java clients, LEAST_REQUEST. For information about these values, see the description of localityLbPolicy. Do not specify the same policy more than once for a backend. If you do, the configuration is rejected.
    """
    INVALID_LB_POLICY = "INVALID_LB_POLICY"
    LEAST_REQUEST = "LEAST_REQUEST"
    """
    An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
    """
    MAGLEV = "MAGLEV"
    """
    This algorithm implements consistent hashing to backends. Maglev can be used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
    """
    ORIGINAL_DESTINATION = "ORIGINAL_DESTINATION"
    """
    Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
    """
    RANDOM = "RANDOM"
    """
    The load balancer selects a random healthy host.
    """
    RING_HASH = "RING_HASH"
    """
    The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
    """
    ROUND_ROBIN = "ROUND_ROBIN"
    """
    This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
    """
    WEIGHTED_MAGLEV = "WEIGHTED_MAGLEV"
    """
    Per-instance weighted Load Balancing via health check reported weights. If set, the Backend Service must configure a non legacy HTTP-based Health Check, and health check replies are expected to contain non-standard HTTP response header field X-Load-Balancing-Endpoint-Weight to specify the per-instance weights. If set, Load Balancing is weighted based on the per-instance weights reported in the last processed health check replies, as long as every instance either reported a valid weight or had UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains equal-weight. This option is only supported in Network Load Balancing.
    """


class BackendServiceLogConfigOptionalMode(str, Enum):
    """
    This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.
    """
    CUSTOM = "CUSTOM"
    """
    A subset of optional fields.
    """
    EXCLUDE_ALL_OPTIONAL = "EXCLUDE_ALL_OPTIONAL"
    """
    None optional fields.
    """
    INCLUDE_ALL_OPTIONAL = "INCLUDE_ALL_OPTIONAL"
    """
    All optional fields.
    """


class BackendServiceProtocol(str, Enum):
    """
    The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    """
    GRPC = "GRPC"
    """
    gRPC (available for Traffic Director).
    """
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    """
    HTTP/2 with SSL.
    """
    HTTPS = "HTTPS"
    SSL = "SSL"
    """
    TCP proxying with SSL.
    """
    TCP = "TCP"
    """
    TCP proxying or TCP pass-through.
    """
    UDP = "UDP"
    """
    UDP.
    """
    UNSPECIFIED = "UNSPECIFIED"
    """
    If a Backend Service has UNSPECIFIED as its protocol, it can be used with any L3/L4 Forwarding Rules.
    """


class BackendServiceSessionAffinity(str, Enum):
    """
    Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
    """
    CLIENT_IP = "CLIENT_IP"
    """
    2-tuple hash on packet's source and destination IP addresses. Connections from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy.
    """
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    """
    1-tuple hash only on packet's source IP address. Connections from the same source IP address will be served by the same backend VM while that VM remains healthy. This option can only be used for Internal TCP/UDP Load Balancing.
    """
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    """
    5-tuple hash on packet's source and destination IP addresses, IP protocol, and source and destination ports. Connections for the same IP protocol from the same source IP address and port to the same destination IP address and port will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    """
    3-tuple hash on packet's source and destination IP addresses, and IP protocol. Connections for the same IP protocol from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    GENERATED_COOKIE = "GENERATED_COOKIE"
    """
    Hash based on a cookie generated by the L7 loadbalancer. Only valid for HTTP(S) load balancing.
    """
    HEADER_FIELD = "HEADER_FIELD"
    """
    The hash is based on a user specified header field.
    """
    HTTP_COOKIE = "HTTP_COOKIE"
    """
    The hash is based on a user provided cookie.
    """
    NONE = "NONE"
    """
    No session affinity. Connections from the same client IP may go to any instance in the pool.
    """


class ConditionIam(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    APPROVER = "APPROVER"
    """
    This is deprecated and has no effect. Do not use.
    """
    ATTRIBUTION = "ATTRIBUTION"
    """
    This is deprecated and has no effect. Do not use.
    """
    AUTHORITY = "AUTHORITY"
    """
    This is deprecated and has no effect. Do not use.
    """
    CREDENTIALS_TYPE = "CREDENTIALS_TYPE"
    """
    This is deprecated and has no effect. Do not use.
    """
    CREDS_ASSERTION = "CREDS_ASSERTION"
    """
    This is deprecated and has no effect. Do not use.
    """
    JUSTIFICATION_TYPE = "JUSTIFICATION_TYPE"
    """
    This is deprecated and has no effect. Do not use.
    """
    NO_ATTR = "NO_ATTR"
    """
    This is deprecated and has no effect. Do not use.
    """
    SECURITY_REALM = "SECURITY_REALM"
    """
    This is deprecated and has no effect. Do not use.
    """


class ConditionOp(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    DISCHARGED = "DISCHARGED"
    """
    This is deprecated and has no effect. Do not use.
    """
    EQUALS = "EQUALS"
    """
    This is deprecated and has no effect. Do not use.
    """
    IN_ = "IN"
    """
    This is deprecated and has no effect. Do not use.
    """
    NOT_EQUALS = "NOT_EQUALS"
    """
    This is deprecated and has no effect. Do not use.
    """
    NOT_IN = "NOT_IN"
    """
    This is deprecated and has no effect. Do not use.
    """
    NO_OP = "NO_OP"
    """
    This is deprecated and has no effect. Do not use.
    """


class ConditionSys(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    IP = "IP"
    """
    This is deprecated and has no effect. Do not use.
    """
    NAME = "NAME"
    """
    This is deprecated and has no effect. Do not use.
    """
    NO_ATTR = "NO_ATTR"
    """
    This is deprecated and has no effect. Do not use.
    """
    REGION = "REGION"
    """
    This is deprecated and has no effect. Do not use.
    """
    SERVICE = "SERVICE"
    """
    This is deprecated and has no effect. Do not use.
    """


class DeprecationStatusState(str, Enum):
    """
    The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
    """
    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    DEPRECATED = "DEPRECATED"
    OBSOLETE = "OBSOLETE"


class DiskArchitecture(str, Enum):
    """
    The architecture of the disk. Valid values are ARM64 or X86_64.
    """
    ARCHITECTURE_UNSPECIFIED = "ARCHITECTURE_UNSPECIFIED"
    """
    Default value indicating Architecture is not set.
    """
    ARM64 = "ARM64"
    """
    Machines with architecture ARM64
    """
    X8664 = "X86_64"
    """
    Machines with architecture X86_64
    """


class DiskInstantiationConfigInstantiateFrom(str, Enum):
    """
    Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. 
    """
    ATTACH_READ_ONLY = "ATTACH_READ_ONLY"
    """
    Attach the existing disk in read-only mode. The request will fail if the disk was attached in read-write mode on the source instance. Applicable to: read-only disks.
    """
    BLANK = "BLANK"
    """
    Create a blank disk. The disk will be created unformatted. Applicable to: additional read-write disks, local SSDs.
    """
    CUSTOM_IMAGE = "CUSTOM_IMAGE"
    """
    Use the custom image specified in the custom_image field. Applicable to: boot disk, additional read-write disks.
    """
    DEFAULT = "DEFAULT"
    """
    Use the default instantiation option for the corresponding type of disk. For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
    """
    DO_NOT_INCLUDE = "DO_NOT_INCLUDE"
    """
    Do not include the disk in the instance template. Applicable to: additional read-write disks, local SSDs, read-only disks.
    """
    SOURCE_IMAGE = "SOURCE_IMAGE"
    """
    Use the same source image used for creation of the source instance's corresponding disk. The request will fail if the source VM's disk was created from a snapshot. Applicable to: boot disk, additional read-write disks.
    """
    SOURCE_IMAGE_FAMILY = "SOURCE_IMAGE_FAMILY"
    """
    Use the same source image family used for creation of the source instance's corresponding disk. The request will fail if the source image of the source disk does not belong to any image family. Applicable to: boot disk, additional read-write disks.
    """


class DistributionPolicyTargetShape(str, Enum):
    """
    The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
    """
    ANY = "ANY"
    """
    The group picks zones for creating VM instances to fulfill the requested number of VMs within present resource constraints and to maximize utilization of unused zonal reservations. Recommended for batch workloads that do not require high availability.
    """
    ANY_SINGLE_ZONE = "ANY_SINGLE_ZONE"
    """
    The group creates all VM instances within a single zone. The zone is selected based on the present resource constraints and to maximize utilization of unused zonal reservations. Recommended for batch workloads with heavy interprocess communication.
    """
    BALANCED = "BALANCED"
    """
    The group prioritizes acquisition of resources, scheduling VMs in zones where resources are available while distributing VMs as evenly as possible across selected zones to minimize the impact of zonal failure. Recommended for highly available serving workloads.
    """
    EVEN = "EVEN"
    """
    The group schedules VM instance creation and deletion to achieve and maintain an even number of managed instances across the selected zones. The distribution is even when the number of managed instances does not differ by more than 1 between any two zones. Recommended for highly available serving workloads.
    """


class ExternalVpnGatewayRedundancyType(str, Enum):
    """
    Indicates the user-supplied redundancy type of this external VPN gateway.
    """
    FOUR_IPS_REDUNDANCY = "FOUR_IPS_REDUNDANCY"
    """
    The external VPN gateway has four public IP addresses; at the time of writing this API, the AWS virtual private gateway is an example which has four public IP addresses for high availability connections; there should be two VPN connections in the AWS virtual private gateway , each AWS VPN connection has two public IP addresses; please make sure to put two public IP addresses from one AWS VPN connection into interfaces 0 and 1 of this external VPN gateway, and put the other two public IP addresses from another AWS VPN connection into interfaces 2 and 3 of this external VPN gateway. When displaying highly available configuration status for the VPN tunnels connected to FOUR_IPS_REDUNDANCY external VPN gateway, Google will always detect whether interfaces 0 and 1 are connected on one interface of HA Cloud VPN gateway, and detect whether interfaces 2 and 3 are connected to another interface of the HA Cloud VPN gateway.
    """
    SINGLE_IP_INTERNALLY_REDUNDANT = "SINGLE_IP_INTERNALLY_REDUNDANT"
    """
    The external VPN gateway has only one public IP address which internally provide redundancy or failover.
    """
    TWO_IPS_REDUNDANCY = "TWO_IPS_REDUNDANCY"
    """
    The external VPN gateway has two public IP addresses which are redundant with each other, the following two types of setup on your on-premises side would have this type of redundancy: (1) Two separate on-premises gateways, each with one public IP address, the two on-premises gateways are redundant with each other. (2) A single on-premise gateway with two public IP addresses that are redundant with eatch other.
    """


class FileContentBufferFileType(str, Enum):
    """
    The file type of source file.
    """
    BIN = "BIN"
    UNDEFINED = "UNDEFINED"
    X509 = "X509"


class FirewallDirection(str, Enum):
    """
    Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields.
    """
    EGRESS = "EGRESS"
    """
    Indicates that firewall should apply to outgoing traffic.
    """
    INGRESS = "INGRESS"
    """
    Indicates that firewall should apply to incoming traffic.
    """


class FirewallLogConfigMetadata(str, Enum):
    """
    This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
    """
    EXCLUDE_ALL_METADATA = "EXCLUDE_ALL_METADATA"
    INCLUDE_ALL_METADATA = "INCLUDE_ALL_METADATA"


class FirewallPolicyRuleDirection(str, Enum):
    """
    The direction in which this rule applies.
    """
    EGRESS = "EGRESS"
    INGRESS = "INGRESS"


class ForwardingRuleIpProtocol(str, Enum):
    """
    The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
    """
    AH = "AH"
    ESP = "ESP"
    ICMP = "ICMP"
    L3_DEFAULT = "L3_DEFAULT"
    SCTP = "SCTP"
    TCP = "TCP"
    UDP = "UDP"


class ForwardingRuleIpVersion(str, Enum):
    """
    The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class ForwardingRuleLoadBalancingScheme(str, Enum):
    """
    Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID = "INVALID"


class ForwardingRuleNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class ForwardingRulePscConnectionStatus(str, Enum):
    ACCEPTED = "ACCEPTED"
    """
    The connection has been accepted by the producer.
    """
    CLOSED = "CLOSED"
    """
    The connection has been closed by the producer and will not serve traffic going forward.
    """
    NEEDS_ATTENTION = "NEEDS_ATTENTION"
    """
    The connection has been accepted by the producer, but the producer needs to take further action before the forwarding rule can serve traffic.
    """
    PENDING = "PENDING"
    """
    The connection is pending acceptance by the producer.
    """
    REJECTED = "REJECTED"
    """
    The connection has been rejected by the producer.
    """
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class GRPCHealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class GlobalAddressAddressType(str, Enum):
    """
    The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    """
    EXTERNAL = "EXTERNAL"
    """
    A publicly visible external IP address.
    """
    INTERNAL = "INTERNAL"
    """
    A private network IP address, for use with an Instance or Internal Load Balancer forwarding rule.
    """
    UNSPECIFIED_TYPE = "UNSPECIFIED_TYPE"


class GlobalAddressIpVersion(str, Enum):
    """
    The IP version that will be used by this address. Valid options are IPV4 or IPV6.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class GlobalAddressIpv6EndpointType(str, Enum):
    """
    The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
    """
    NETLB = "NETLB"
    """
    Reserved IPv6 address can be used on network load balancer.
    """
    VM = "VM"
    """
    Reserved IPv6 address can be used on VM.
    """


class GlobalAddressNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class GlobalAddressPurpose(str, Enum):
    """
    The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose. 
    """
    DNS_RESOLVER = "DNS_RESOLVER"
    """
    DNS resolver address in the subnetwork.
    """
    GCE_ENDPOINT = "GCE_ENDPOINT"
    """
    VM internal/alias IP, Internal LB service IP, etc.
    """
    IPSEC_INTERCONNECT = "IPSEC_INTERCONNECT"
    """
    A regional internal IP address range reserved for the VLAN attachment that is used in HA VPN over Cloud Interconnect. This regional internal IP address range must not overlap with any IP address range of subnet/route in the VPC network and its peering networks. After the VLAN attachment is created with the reserved IP address range, when creating a new VPN gateway, its interface IP address is allocated from the associated VLAN attachment’s IP address range.
    """
    NAT_AUTO = "NAT_AUTO"
    """
    External IP automatically reserved for Cloud NAT.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    A private network IP address that can be used to configure Private Service Connect. This purpose can be specified only for GLOBAL addresses of Type INTERNAL
    """
    SERVERLESS = "SERVERLESS"
    """
    A regional internal IP address range reserved for Serverless.
    """
    SHARED_LOADBALANCER_VIP = "SHARED_LOADBALANCER_VIP"
    """
    A private network IP address that can be shared by multiple Internal Load Balancer forwarding rules.
    """
    VPC_PEERING = "VPC_PEERING"
    """
    IP range for peer networks.
    """


class GlobalForwardingRuleIpProtocol(str, Enum):
    """
    The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
    """
    AH = "AH"
    ESP = "ESP"
    ICMP = "ICMP"
    L3_DEFAULT = "L3_DEFAULT"
    SCTP = "SCTP"
    TCP = "TCP"
    UDP = "UDP"


class GlobalForwardingRuleIpVersion(str, Enum):
    """
    The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class GlobalForwardingRuleLoadBalancingScheme(str, Enum):
    """
    Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID = "INVALID"


class GlobalForwardingRuleNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class GlobalForwardingRulePscConnectionStatus(str, Enum):
    ACCEPTED = "ACCEPTED"
    """
    The connection has been accepted by the producer.
    """
    CLOSED = "CLOSED"
    """
    The connection has been closed by the producer and will not serve traffic going forward.
    """
    NEEDS_ATTENTION = "NEEDS_ATTENTION"
    """
    The connection has been accepted by the producer, but the producer needs to take further action before the forwarding rule can serve traffic.
    """
    PENDING = "PENDING"
    """
    The connection is pending acceptance by the producer.
    """
    REJECTED = "REJECTED"
    """
    The connection has been rejected by the producer.
    """
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class GlobalNetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT.
    """
    GCE_VM_IP = "GCE_VM_IP"
    """
    The network endpoint is represented by an IP address.
    """
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    """
    The network endpoint is represented by IP address and port pair.
    """
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    """
    The network endpoint is represented by fully qualified domain name and port.
    """
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    """
    The network endpoint is represented by an internet IP address and port.
    """
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    """
    The network endpoint is represented by an IP address and port. The endpoint belongs to a VM or pod running in a customer's on-premises.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    The network endpoint is either public Google APIs or services exposed by other GCP Project with a Service Attachment. The connection is set up by private service connect
    """
    SERVERLESS = "SERVERLESS"
    """
    The network endpoint is handled by specified serverless infrastructure.
    """


class GuestOsFeatureType(str, Enum):
    """
    The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_LIVE_MIGRATABLE - SEV_SNP_CAPABLE For more information, see Enabling guest operating system features.
    """
    FEATURE_TYPE_UNSPECIFIED = "FEATURE_TYPE_UNSPECIFIED"
    GVNIC = "GVNIC"
    MULTI_IP_SUBNET = "MULTI_IP_SUBNET"
    SECURE_BOOT = "SECURE_BOOT"
    SEV_CAPABLE = "SEV_CAPABLE"
    SEV_LIVE_MIGRATABLE = "SEV_LIVE_MIGRATABLE"
    SEV_LIVE_MIGRATABLE_V2 = "SEV_LIVE_MIGRATABLE_V2"
    SEV_SNP_CAPABLE = "SEV_SNP_CAPABLE"
    UEFI_COMPATIBLE = "UEFI_COMPATIBLE"
    VIRTIO_SCSI_MULTIQUEUE = "VIRTIO_SCSI_MULTIQUEUE"
    WINDOWS = "WINDOWS"


class HTTP2HealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class HTTP2HealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HTTPHealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class HTTPHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HTTPSHealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class HTTPSHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HealthCheckType(str, Enum):
    """
    Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
    """
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    INVALID = "INVALID"
    SSL = "SSL"
    TCP = "TCP"


class HttpRedirectActionRedirectResponseCode(str, Enum):
    """
    The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. 
    """
    FOUND = "FOUND"
    """
    Http Status Code 302 - Found.
    """
    MOVED_PERMANENTLY_DEFAULT = "MOVED_PERMANENTLY_DEFAULT"
    """
    Http Status Code 301 - Moved Permanently.
    """
    PERMANENT_REDIRECT = "PERMANENT_REDIRECT"
    """
    Http Status Code 308 - Permanent Redirect maintaining HTTP method.
    """
    SEE_OTHER = "SEE_OTHER"
    """
    Http Status Code 303 - See Other.
    """
    TEMPORARY_REDIRECT = "TEMPORARY_REDIRECT"
    """
    Http Status Code 307 - Temporary Redirect maintaining HTTP method.
    """


class ImageArchitecture(str, Enum):
    """
    The architecture of the image. Valid values are ARM64 or X86_64.
    """
    ARCHITECTURE_UNSPECIFIED = "ARCHITECTURE_UNSPECIFIED"
    """
    Default value indicating Architecture is not set.
    """
    ARM64 = "ARM64"
    """
    Machines with architecture ARM64
    """
    X8664 = "X86_64"
    """
    Machines with architecture X86_64
    """


class ImageRawDiskContainerType(str, Enum):
    """
    The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
    """
    TAR = "TAR"


class ImageSourceType(str, Enum):
    """
    The type of the image used to create this disk. The default and only valid value is RAW.
    """
    RAW = "RAW"


class InstanceGroupManagerInstanceLifecyclePolicyForceUpdateOnRepair(str, Enum):
    """
    A bit indicating whether to forcefully apply the group's latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. Instead, configuration updates are applied according to the group's update policy. - YES: If configuration updates are available, they are applied during repair. 
    """
    NO = "NO"
    YES = "YES"


class InstanceGroupManagerListManagedInstancesResults(str, Enum):
    """
    Pagination behavior of the listManagedInstances API method for this managed instance group.
    """
    PAGELESS = "PAGELESS"
    """
    (Default) Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response.
    """
    PAGINATED = "PAGINATED"
    """
    Pagination is enabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are respected.
    """


class InstanceGroupManagerUpdatePolicyInstanceRedistributionType(str, Enum):
    """
    The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. 
    """
    NONE = "NONE"
    """
    No action is being proactively performed in order to bring this IGM to its target instance distribution.
    """
    PROACTIVE = "PROACTIVE"
    """
    This IGM will actively converge to its target instance distribution.
    """


class InstanceGroupManagerUpdatePolicyMinimalAction(str, Enum):
    """
    Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. 
    """
    NONE = "NONE"
    """
    Do not perform any action.
    """
    REFRESH = "REFRESH"
    """
    Do not stop the instance.
    """
    REPLACE = "REPLACE"
    """
    (Default.) Replace the instance according to the replacement method option.
    """
    RESTART = "RESTART"
    """
    Stop the instance and start it again.
    """


class InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction(str, Enum):
    """
    Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to avoid restarting the VM and to limit disruption as much as possible. RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
    """
    NONE = "NONE"
    """
    Do not perform any action.
    """
    REFRESH = "REFRESH"
    """
    Do not stop the instance.
    """
    REPLACE = "REPLACE"
    """
    (Default.) Replace the instance according to the replacement method option.
    """
    RESTART = "RESTART"
    """
    Stop the instance and start it again.
    """


class InstanceGroupManagerUpdatePolicyReplacementMethod(str, Enum):
    """
    What action should be used to replace instances. See minimal_action.REPLACE
    """
    RECREATE = "RECREATE"
    """
    Instances will be recreated (with the same name)
    """
    SUBSTITUTE = "SUBSTITUTE"
    """
    Default option: instances will be deleted and created (with a new name)
    """


class InstanceGroupManagerUpdatePolicyType(str, Enum):
    """
    The type of update process. You can specify either PROACTIVE so that the MIG automatically updates VMs to the latest configurations or OPPORTUNISTIC so that you can select the VMs that you want to update.
    """
    OPPORTUNISTIC = "OPPORTUNISTIC"
    """
    MIG will apply new configurations to existing VMs only when you selectively target specific or all VMs to be updated.
    """
    PROACTIVE = "PROACTIVE"
    """
    MIG will automatically apply new configurations to all or a subset of existing VMs and also to new VMs that are added to the group.
    """


class InstanceKeyRevocationActionType(str, Enum):
    """
    KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
    """
    KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    """
    Default value. This value is unused.
    """
    NONE = "NONE"
    """
    Indicates user chose no operation.
    """
    STOP = "STOP"
    """
    Indicates user chose to opt for VM shutdown on key revocation.
    """


class InstancePrivateIpv6GoogleAccess(str, Enum):
    """
    The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default.
    """
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    """
    Bidirectional private IPv6 access to/from Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    """
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    """
    Outbound private IPv6 access from VMs in this subnet to Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    """
    INHERIT_FROM_SUBNETWORK = "INHERIT_FROM_SUBNETWORK"
    """
    Each network interface inherits PrivateIpv6GoogleAccess from its subnetwork.
    """


class InstancePropertiesKeyRevocationActionType(str, Enum):
    """
    KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
    """
    KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    """
    Default value. This value is unused.
    """
    NONE = "NONE"
    """
    Indicates user chose no operation.
    """
    STOP = "STOP"
    """
    Indicates user chose to opt for VM shutdown on key revocation.
    """


class InstancePropertiesPrivateIpv6GoogleAccess(str, Enum):
    """
    The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet.
    """
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    """
    Bidirectional private IPv6 access to/from Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    """
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    """
    Outbound private IPv6 access from VMs in this subnet to Google services. If specified, the subnetwork who is attached to the instance's default network interface will be assigned an internal IPv6 prefix if it doesn't have before.
    """
    INHERIT_FROM_SUBNETWORK = "INHERIT_FROM_SUBNETWORK"
    """
    Each network interface inherits PrivateIpv6GoogleAccess from its subnetwork.
    """


class InterconnectAttachmentBandwidth(str, Enum):
    """
    Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s 
    """
    BPS100M = "BPS_100M"
    """
    100 Mbit/s
    """
    BPS10G = "BPS_10G"
    """
    10 Gbit/s
    """
    BPS1G = "BPS_1G"
    """
    1 Gbit/s
    """
    BPS200M = "BPS_200M"
    """
    200 Mbit/s
    """
    BPS20G = "BPS_20G"
    """
    20 Gbit/s
    """
    BPS2G = "BPS_2G"
    """
    2 Gbit/s
    """
    BPS300M = "BPS_300M"
    """
    300 Mbit/s
    """
    BPS400M = "BPS_400M"
    """
    400 Mbit/s
    """
    BPS500M = "BPS_500M"
    """
    500 Mbit/s
    """
    BPS50G = "BPS_50G"
    """
    50 Gbit/s
    """
    BPS50M = "BPS_50M"
    """
    50 Mbit/s
    """
    BPS5G = "BPS_5G"
    """
    5 Gbit/s
    """


class InterconnectAttachmentEdgeAvailabilityDomain(str, Enum):
    """
    Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
    """
    AVAILABILITY_DOMAIN1 = "AVAILABILITY_DOMAIN_1"
    AVAILABILITY_DOMAIN2 = "AVAILABILITY_DOMAIN_2"
    AVAILABILITY_DOMAIN_ANY = "AVAILABILITY_DOMAIN_ANY"


class InterconnectAttachmentEncryption(str, Enum):
    """
    Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. 
    """
    IPSEC = "IPSEC"
    """
    The interconnect attachment will carry only encrypted traffic that is encrypted by an IPsec device such as HA VPN gateway; VMs cannot directly send traffic to or receive traffic from such an interconnect attachment. To use HA VPN over Cloud Interconnect, the interconnect attachment must be created with this option.
    """
    NONE = "NONE"
    """
    This is the default value, which means the Interconnect Attachment will carry unencrypted traffic. VMs will be able to send traffic to or receive traffic from such interconnect attachment.
    """


class InterconnectAttachmentStackType(str, Enum):
    """
    The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    """
    The interconnect attachment can have both IPv4 and IPv6 addresses.
    """
    IPV4_ONLY = "IPV4_ONLY"
    """
    The interconnect attachment will only be assigned IPv4 addresses.
    """


class InterconnectAttachmentType(str, Enum):
    """
    The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. 
    """
    DEDICATED = "DEDICATED"
    """
    Attachment to a dedicated interconnect.
    """
    PARTNER = "PARTNER"
    """
    Attachment to a partner interconnect, created by the customer.
    """
    PARTNER_PROVIDER = "PARTNER_PROVIDER"
    """
    Attachment to a partner interconnect, created by the partner.
    """


class InterconnectInterconnectType(str, Enum):
    """
    Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
    """
    DEDICATED = "DEDICATED"
    """
    A dedicated physical interconnection with the customer.
    """
    IT_PRIVATE = "IT_PRIVATE"
    """
    [Deprecated] A private, physical interconnection with the customer.
    """
    PARTNER = "PARTNER"
    """
    A partner-managed interconnection shared between customers via partner.
    """


class InterconnectLinkType(str, Enum):
    """
    Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
    """
    LINK_TYPE_ETHERNET100G_LR = "LINK_TYPE_ETHERNET_100G_LR"
    """
    100G Ethernet, LR Optics.
    """
    LINK_TYPE_ETHERNET10G_LR = "LINK_TYPE_ETHERNET_10G_LR"
    """
    10G Ethernet, LR Optics. [(rate_bps) = 10000000000];
    """


class InterconnectRequestedFeaturesItem(str, Enum):
    IF_MACSEC = "IF_MACSEC"
    """
    Media Access Control security (MACsec)
    """


class LogConfigCloudAuditOptionsLogName(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    ADMIN_ACTIVITY = "ADMIN_ACTIVITY"
    """
    This is deprecated and has no effect. Do not use.
    """
    DATA_ACCESS = "DATA_ACCESS"
    """
    This is deprecated and has no effect. Do not use.
    """
    UNSPECIFIED_LOG_NAME = "UNSPECIFIED_LOG_NAME"
    """
    This is deprecated and has no effect. Do not use.
    """


class LogConfigDataAccessOptionsLogMode(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    LOG_FAIL_CLOSED = "LOG_FAIL_CLOSED"
    """
    This is deprecated and has no effect. Do not use.
    """
    LOG_MODE_UNSPECIFIED = "LOG_MODE_UNSPECIFIED"
    """
    This is deprecated and has no effect. Do not use.
    """


class MetadataFilterFilterMatchCriteria(str, Enum):
    """
    Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. 
    """
    MATCH_ALL = "MATCH_ALL"
    """
    Specifies that all filterLabels must match for the metadataFilter to be considered a match.
    """
    MATCH_ANY = "MATCH_ANY"
    """
    Specifies that any filterLabel must match for the metadataFilter to be considered a match.
    """
    NOT_SET = "NOT_SET"
    """
    Indicates that the match criteria was not set. A metadataFilter must never be created with this value.
    """


class NetworkAttachmentConnectionPreference(str, Enum):
    ACCEPT_AUTOMATIC = "ACCEPT_AUTOMATIC"
    ACCEPT_MANUAL = "ACCEPT_MANUAL"
    INVALID = "INVALID"


class NetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT.
    """
    GCE_VM_IP = "GCE_VM_IP"
    """
    The network endpoint is represented by an IP address.
    """
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    """
    The network endpoint is represented by IP address and port pair.
    """
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    """
    The network endpoint is represented by fully qualified domain name and port.
    """
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    """
    The network endpoint is represented by an internet IP address and port.
    """
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    """
    The network endpoint is represented by an IP address and port. The endpoint belongs to a VM or pod running in a customer's on-premises.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    The network endpoint is either public Google APIs or services exposed by other GCP Project with a Service Attachment. The connection is set up by private service connect
    """
    SERVERLESS = "SERVERLESS"
    """
    The network endpoint is handled by specified serverless infrastructure.
    """


class NetworkInterfaceNicType(str, Enum):
    """
    The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    """
    GVNIC = "GVNIC"
    """
    GVNIC
    """
    UNSPECIFIED_NIC_TYPE = "UNSPECIFIED_NIC_TYPE"
    """
    No type specified.
    """
    VIRTIO_NET = "VIRTIO_NET"
    """
    VIRTIO
    """


class NetworkInterfaceStackType(str, Enum):
    """
    The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    """
    The network interface can have both IPv4 and IPv6 addresses.
    """
    IPV4_ONLY = "IPV4_ONLY"
    """
    The network interface will be assigned IPv4 address.
    """


class NetworkNetworkFirewallPolicyEnforcementOrder(str, Enum):
    """
    The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified.
    """
    AFTER_CLASSIC_FIREWALL = "AFTER_CLASSIC_FIREWALL"
    BEFORE_CLASSIC_FIREWALL = "BEFORE_CLASSIC_FIREWALL"


class NetworkPerformanceConfigTotalEgressBandwidthTier(str, Enum):
    DEFAULT = "DEFAULT"
    TIER1 = "TIER_1"


class NetworkRoutingConfigRoutingMode(str, Enum):
    """
    The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
    """
    GLOBAL_ = "GLOBAL"
    REGIONAL = "REGIONAL"


class NodeGroupAutoscalingPolicyMode(str, Enum):
    """
    The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
    """
    MODE_UNSPECIFIED = "MODE_UNSPECIFIED"
    OFF = "OFF"
    """
    Autoscaling is disabled.
    """
    ON = "ON"
    """
    Autocaling is fully enabled.
    """
    ONLY_SCALE_OUT = "ONLY_SCALE_OUT"
    """
    Autoscaling will only scale out and will not remove nodes.
    """


class NodeGroupMaintenancePolicy(str, Enum):
    """
    Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies.
    """
    DEFAULT = "DEFAULT"
    """
    Allow the node and corresponding instances to retain default maintenance behavior.
    """
    MAINTENANCE_POLICY_UNSPECIFIED = "MAINTENANCE_POLICY_UNSPECIFIED"
    MIGRATE_WITHIN_NODE_GROUP = "MIGRATE_WITHIN_NODE_GROUP"
    """
    When maintenance must be done on a node, the instances on that node will be moved to other nodes in the group. Instances with onHostMaintenance = MIGRATE will live migrate to their destinations while instances with onHostMaintenance = TERMINATE will terminate and then restart on their destination nodes if automaticRestart = true.
    """
    RESTART_IN_PLACE = "RESTART_IN_PLACE"
    """
    Instances in this group will restart on the same node when maintenance has completed. Instances must have onHostMaintenance = TERMINATE, and they will only restart if automaticRestart = true.
    """


class NodeGroupStatus(str, Enum):
    CREATING = "CREATING"
    DELETING = "DELETING"
    INVALID = "INVALID"
    READY = "READY"


class NodeTemplateCpuOvercommitType(str, Enum):
    """
    CPU overcommit.
    """
    CPU_OVERCOMMIT_TYPE_UNSPECIFIED = "CPU_OVERCOMMIT_TYPE_UNSPECIFIED"
    ENABLED = "ENABLED"
    NONE = "NONE"


class PacketMirroringEnable(str, Enum):
    """
    Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
    """
    FALSE = "FALSE"
    TRUE = "TRUE"


class PacketMirroringFilterDirection(str, Enum):
    """
    Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
    """
    BOTH = "BOTH"
    """
    Default, both directions are mirrored.
    """
    EGRESS = "EGRESS"
    """
    Only egress traffic is mirrored.
    """
    INGRESS = "INGRESS"
    """
    Only ingress traffic is mirrored.
    """


class PublicAdvertisedPrefixPdpScope(str, Enum):
    """
    Specifies how child public delegated prefix will be scoped. It could be one of following values: - `REGIONAL`: The public delegated prefix is regional only. The provisioning will take a few minutes. - `GLOBAL`: The public delegated prefix is global only. The provisioning will take ~4 weeks. - `GLOBAL_AND_REGIONAL` [output only]: The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2. 
    """
    GLOBAL_ = "GLOBAL"
    """
    The public delegated prefix is global only. The provisioning will take ~4 weeks.
    """
    GLOBAL_AND_REGIONAL = "GLOBAL_AND_REGIONAL"
    """
    The public delegated prefixes is BYOIP V1 legacy prefix. This is output only value and no longer supported in BYOIP V2.
    """
    REGIONAL = "REGIONAL"
    """
    The public delegated prefix is regional only. The provisioning will take a few minutes.
    """


class PublicAdvertisedPrefixStatus(str, Enum):
    """
    The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`: Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. - `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed. 
    """
    ANNOUNCED_TO_INTERNET = "ANNOUNCED_TO_INTERNET"
    """
    The prefix is announced to Internet.
    """
    INITIAL = "INITIAL"
    """
    RPKI validation is complete.
    """
    PREFIX_CONFIGURATION_COMPLETE = "PREFIX_CONFIGURATION_COMPLETE"
    """
    The prefix is fully configured.
    """
    PREFIX_CONFIGURATION_IN_PROGRESS = "PREFIX_CONFIGURATION_IN_PROGRESS"
    """
    The prefix is being configured.
    """
    PREFIX_REMOVAL_IN_PROGRESS = "PREFIX_REMOVAL_IN_PROGRESS"
    """
    The prefix is being removed.
    """
    PTR_CONFIGURED = "PTR_CONFIGURED"
    """
    User has configured the PTR.
    """
    READY_TO_ANNOUNCE = "READY_TO_ANNOUNCE"
    """
    The prefix is currently withdrawn but ready to be announced.
    """
    REVERSE_DNS_LOOKUP_FAILED = "REVERSE_DNS_LOOKUP_FAILED"
    """
    Reverse DNS lookup failed.
    """
    VALIDATED = "VALIDATED"
    """
    Reverse DNS lookup is successful.
    """


class RegionBackendServiceCompressionMode(str, Enum):
    """
    Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    """
    AUTOMATIC = "AUTOMATIC"
    """
    Automatically uses the best compression based on the Accept-Encoding header sent by the client.
    """
    DISABLED = "DISABLED"
    """
    Disables compression. Existing compressed responses cached by Cloud CDN will not be served to clients.
    """


class RegionBackendServiceLoadBalancingScheme(str, Enum):
    """
    Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    """
    EXTERNAL = "EXTERNAL"
    """
    Signifies that this will be used for external HTTP(S), SSL Proxy, TCP Proxy, or Network Load Balancing
    """
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    """
    Signifies that this will be used for External Managed HTTP(S) Load Balancing.
    """
    INTERNAL = "INTERNAL"
    """
    Signifies that this will be used for Internal TCP/UDP Load Balancing.
    """
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    """
    Signifies that this will be used for Internal HTTP(S) Load Balancing.
    """
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    """
    Signifies that this will be used by Traffic Director.
    """
    INVALID_LOAD_BALANCING_SCHEME = "INVALID_LOAD_BALANCING_SCHEME"


class RegionBackendServiceLocalityLbPolicy(str, Enum):
    """
    The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    INVALID_LB_POLICY = "INVALID_LB_POLICY"
    LEAST_REQUEST = "LEAST_REQUEST"
    """
    An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
    """
    MAGLEV = "MAGLEV"
    """
    This algorithm implements consistent hashing to backends. Maglev can be used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
    """
    ORIGINAL_DESTINATION = "ORIGINAL_DESTINATION"
    """
    Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
    """
    RANDOM = "RANDOM"
    """
    The load balancer selects a random healthy host.
    """
    RING_HASH = "RING_HASH"
    """
    The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
    """
    ROUND_ROBIN = "ROUND_ROBIN"
    """
    This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
    """
    WEIGHTED_MAGLEV = "WEIGHTED_MAGLEV"
    """
    Per-instance weighted Load Balancing via health check reported weights. If set, the Backend Service must configure a non legacy HTTP-based Health Check, and health check replies are expected to contain non-standard HTTP response header field X-Load-Balancing-Endpoint-Weight to specify the per-instance weights. If set, Load Balancing is weighted based on the per-instance weights reported in the last processed health check replies, as long as every instance either reported a valid weight or had UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains equal-weight. This option is only supported in Network Load Balancing.
    """


class RegionBackendServiceProtocol(str, Enum):
    """
    The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    """
    GRPC = "GRPC"
    """
    gRPC (available for Traffic Director).
    """
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    """
    HTTP/2 with SSL.
    """
    HTTPS = "HTTPS"
    SSL = "SSL"
    """
    TCP proxying with SSL.
    """
    TCP = "TCP"
    """
    TCP proxying or TCP pass-through.
    """
    UDP = "UDP"
    """
    UDP.
    """
    UNSPECIFIED = "UNSPECIFIED"
    """
    If a Backend Service has UNSPECIFIED as its protocol, it can be used with any L3/L4 Forwarding Rules.
    """


class RegionBackendServiceSessionAffinity(str, Enum):
    """
    Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
    """
    CLIENT_IP = "CLIENT_IP"
    """
    2-tuple hash on packet's source and destination IP addresses. Connections from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy.
    """
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    """
    1-tuple hash only on packet's source IP address. Connections from the same source IP address will be served by the same backend VM while that VM remains healthy. This option can only be used for Internal TCP/UDP Load Balancing.
    """
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    """
    5-tuple hash on packet's source and destination IP addresses, IP protocol, and source and destination ports. Connections for the same IP protocol from the same source IP address and port to the same destination IP address and port will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    """
    3-tuple hash on packet's source and destination IP addresses, and IP protocol. Connections for the same IP protocol from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    GENERATED_COOKIE = "GENERATED_COOKIE"
    """
    Hash based on a cookie generated by the L7 loadbalancer. Only valid for HTTP(S) load balancing.
    """
    HEADER_FIELD = "HEADER_FIELD"
    """
    The hash is based on a user specified header field.
    """
    HTTP_COOKIE = "HTTP_COOKIE"
    """
    The hash is based on a user provided cookie.
    """
    NONE = "NONE"
    """
    No session affinity. Connections from the same client IP may go to any instance in the pool.
    """


class RegionCommitmentCategory(str, Enum):
    """
    The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
    """
    CATEGORY_UNSPECIFIED = "CATEGORY_UNSPECIFIED"
    LICENSE = "LICENSE"
    MACHINE = "MACHINE"


class RegionCommitmentPlan(str, Enum):
    """
    The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
    """
    INVALID = "INVALID"
    THIRTY_SIX_MONTH = "THIRTY_SIX_MONTH"
    TWELVE_MONTH = "TWELVE_MONTH"


class RegionCommitmentType(str, Enum):
    """
    The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
    """
    ACCELERATOR_OPTIMIZED = "ACCELERATOR_OPTIMIZED"
    ACCELERATOR_OPTIMIZED_A3 = "ACCELERATOR_OPTIMIZED_A3"
    COMPUTE_OPTIMIZED = "COMPUTE_OPTIMIZED"
    COMPUTE_OPTIMIZED_C2D = "COMPUTE_OPTIMIZED_C2D"
    COMPUTE_OPTIMIZED_C3 = "COMPUTE_OPTIMIZED_C3"
    COMPUTE_OPTIMIZED_C3D = "COMPUTE_OPTIMIZED_C3D"
    COMPUTE_OPTIMIZED_H3 = "COMPUTE_OPTIMIZED_H3"
    GENERAL_PURPOSE = "GENERAL_PURPOSE"
    GENERAL_PURPOSE_E2 = "GENERAL_PURPOSE_E2"
    GENERAL_PURPOSE_N2 = "GENERAL_PURPOSE_N2"
    GENERAL_PURPOSE_N2D = "GENERAL_PURPOSE_N2D"
    GENERAL_PURPOSE_T2D = "GENERAL_PURPOSE_T2D"
    GRAPHICS_OPTIMIZED = "GRAPHICS_OPTIMIZED"
    MEMORY_OPTIMIZED = "MEMORY_OPTIMIZED"
    MEMORY_OPTIMIZED_M3 = "MEMORY_OPTIMIZED_M3"
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class RegionDiskArchitecture(str, Enum):
    """
    The architecture of the disk. Valid values are ARM64 or X86_64.
    """
    ARCHITECTURE_UNSPECIFIED = "ARCHITECTURE_UNSPECIFIED"
    """
    Default value indicating Architecture is not set.
    """
    ARM64 = "ARM64"
    """
    Machines with architecture ARM64
    """
    X8664 = "X86_64"
    """
    Machines with architecture X86_64
    """


class RegionHealthCheckServiceHealthStatusAggregationPolicy(str, Enum):
    """
    Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService.
    """
    AND_ = "AND"
    """
    If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY.
    """
    NO_AGGREGATION = "NO_AGGREGATION"
    """
    An EndpointHealth message is returned for each backend in the health check service.
    """


class RegionHealthCheckType(str, Enum):
    """
    Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
    """
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    INVALID = "INVALID"
    SSL = "SSL"
    TCP = "TCP"


class RegionInstanceGroupManagerListManagedInstancesResults(str, Enum):
    """
    Pagination behavior of the listManagedInstances API method for this managed instance group.
    """
    PAGELESS = "PAGELESS"
    """
    (Default) Pagination is disabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are ignored and all instances are returned in a single response.
    """
    PAGINATED = "PAGINATED"
    """
    Pagination is enabled for the group's listManagedInstances API method. maxResults and pageToken query parameters are respected.
    """


class RegionNetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS, PRIVATE_SERVICE_CONNECT.
    """
    GCE_VM_IP = "GCE_VM_IP"
    """
    The network endpoint is represented by an IP address.
    """
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    """
    The network endpoint is represented by IP address and port pair.
    """
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    """
    The network endpoint is represented by fully qualified domain name and port.
    """
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    """
    The network endpoint is represented by an internet IP address and port.
    """
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    """
    The network endpoint is represented by an IP address and port. The endpoint belongs to a VM or pod running in a customer's on-premises.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    The network endpoint is either public Google APIs or services exposed by other GCP Project with a Service Attachment. The connection is set up by private service connect
    """
    SERVERLESS = "SERVERLESS"
    """
    The network endpoint is handled by specified serverless infrastructure.
    """


class RegionSecurityPolicyType(str, Enum):
    """
    The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time.
    """
    CLOUD_ARMOR = "CLOUD_ARMOR"
    CLOUD_ARMOR_EDGE = "CLOUD_ARMOR_EDGE"
    CLOUD_ARMOR_NETWORK = "CLOUD_ARMOR_NETWORK"


class RegionSslCertificateType(str, Enum):
    """
    (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
    """
    MANAGED = "MANAGED"
    """
    Google-managed SSLCertificate.
    """
    SELF_MANAGED = "SELF_MANAGED"
    """
    Certificate uploaded by user.
    """
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class RegionSslPolicyMinTlsVersion(str, Enum):
    """
    The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
    """
    TLS10 = "TLS_1_0"
    """
    TLS 1.0
    """
    TLS11 = "TLS_1_1"
    """
    TLS 1.1
    """
    TLS12 = "TLS_1_2"
    """
    TLS 1.2
    """


class RegionSslPolicyProfile(str, Enum):
    """
    Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
    """
    COMPATIBLE = "COMPATIBLE"
    """
    Compatible profile. Allows the broadset set of clients, even those which support only out-of-date SSL features to negotiate with the load balancer.
    """
    CUSTOM = "CUSTOM"
    """
    Custom profile. Allow only the set of allowed SSL features specified in the customFeatures field.
    """
    MODERN = "MODERN"
    """
    Modern profile. Supports a wide set of SSL features, allowing modern clients to negotiate SSL with the load balancer.
    """
    RESTRICTED = "RESTRICTED"
    """
    Restricted profile. Supports a reduced set of SSL features, intended to meet stricter compliance requirements.
    """


class RegionTargetHttpsProxyQuicOverride(str, Enum):
    """
    Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. 
    """
    DISABLE = "DISABLE"
    """
    The load balancer will not attempt to negotiate QUIC with clients.
    """
    ENABLE = "ENABLE"
    """
    The load balancer will attempt to negotiate QUIC with clients.
    """
    NONE = "NONE"
    """
    No overrides to the default QUIC policy. This option is implicit if no QUIC override has been specified in the request.
    """


class RegionTargetTcpProxyProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class ReservationAffinityConsumeReservationType(str, Enum):
    """
    Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
    """
    ANY_RESERVATION = "ANY_RESERVATION"
    """
    Consume any allocation available.
    """
    NO_RESERVATION = "NO_RESERVATION"
    """
    Do not consume from any allocated capacity.
    """
    SPECIFIC_RESERVATION = "SPECIFIC_RESERVATION"
    """
    Must consume from a specific reservation. Must specify key value fields for specifying the reservations.
    """
    UNSPECIFIED = "UNSPECIFIED"


class ResourceCommitmentType(str, Enum):
    """
    Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR.
    """
    ACCELERATOR = "ACCELERATOR"
    LOCAL_SSD = "LOCAL_SSD"
    MEMORY = "MEMORY"
    UNSPECIFIED = "UNSPECIFIED"
    VCPU = "VCPU"


class ResourcePolicyGroupPlacementPolicyCollocation(str, Enum):
    """
    Specifies network collocation
    """
    COLLOCATED = "COLLOCATED"
    UNSPECIFIED_COLLOCATION = "UNSPECIFIED_COLLOCATION"


class ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete(str, Enum):
    """
    Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
    """
    APPLY_RETENTION_POLICY = "APPLY_RETENTION_POLICY"
    KEEP_AUTO_SNAPSHOTS = "KEEP_AUTO_SNAPSHOTS"
    UNSPECIFIED_ON_SOURCE_DISK_DELETE = "UNSPECIFIED_ON_SOURCE_DISK_DELETE"


class ResourcePolicyWeeklyCycleDayOfWeekDay(str, Enum):
    """
    Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    """
    FRIDAY = "FRIDAY"
    INVALID = "INVALID"
    MONDAY = "MONDAY"
    SATURDAY = "SATURDAY"
    SUNDAY = "SUNDAY"
    THURSDAY = "THURSDAY"
    TUESDAY = "TUESDAY"
    WEDNESDAY = "WEDNESDAY"


class RouterBgpAdvertiseMode(str, Enum):
    """
    User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
    """
    CUSTOM = "CUSTOM"
    DEFAULT = "DEFAULT"


class RouterBgpAdvertisedGroupsItem(str, Enum):
    ALL_SUBNETS = "ALL_SUBNETS"
    """
    Advertise all available subnets (including peer VPC subnets).
    """


class RouterBgpPeerAdvertiseMode(str, Enum):
    """
    User-specified flag to indicate which mode to use for advertisement.
    """
    CUSTOM = "CUSTOM"
    DEFAULT = "DEFAULT"


class RouterBgpPeerAdvertisedGroupsItem(str, Enum):
    ALL_SUBNETS = "ALL_SUBNETS"
    """
    Advertise all available subnets (including peer VPC subnets).
    """


class RouterBgpPeerBfdSessionInitializationMode(str, Enum):
    """
    The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
    """
    ACTIVE = "ACTIVE"
    DISABLED = "DISABLED"
    PASSIVE = "PASSIVE"


class RouterBgpPeerEnable(str, Enum):
    """
    The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
    """
    FALSE = "FALSE"
    TRUE = "TRUE"


class RouterNatAutoNetworkTier(str, Enum):
    """
    The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not specified, then the current project-level default tier is used.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    """
    Public internet quality with fixed bandwidth.
    """
    PREMIUM = "PREMIUM"
    """
    High quality, Google-grade network tier, support for all networking products.
    """
    STANDARD = "STANDARD"
    """
    Public internet quality, only limited support for other networking products.
    """
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"
    """
    (Output only) Temporary tier for FIXED_STANDARD when fixed standard tier is expired or not configured.
    """


class RouterNatEndpointTypesItem(str, Enum):
    ENDPOINT_TYPE_MANAGED_PROXY_LB = "ENDPOINT_TYPE_MANAGED_PROXY_LB"
    """
    This is used for regional Application Load Balancers (internal and external) and regional proxy Network Load Balancers (internal and external) endpoints.
    """
    ENDPOINT_TYPE_SWG = "ENDPOINT_TYPE_SWG"
    """
    This is used for Secure Web Gateway endpoints.
    """
    ENDPOINT_TYPE_VM = "ENDPOINT_TYPE_VM"
    """
    This is the default.
    """


class RouterNatLogConfigFilter(str, Enum):
    """
    Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. 
    """
    ALL = "ALL"
    """
    Export logs for all (successful and unsuccessful) connections.
    """
    ERRORS_ONLY = "ERRORS_ONLY"
    """
    Export logs for connection failures only.
    """
    TRANSLATIONS_ONLY = "TRANSLATIONS_ONLY"
    """
    Export logs for successful connections only.
    """


class RouterNatNatIpAllocateOption(str, Enum):
    """
    Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. 
    """
    AUTO_ONLY = "AUTO_ONLY"
    """
    Nat IPs are allocated by GCP; customers can not specify any Nat IPs.
    """
    MANUAL_ONLY = "MANUAL_ONLY"
    """
    Only use Nat IPs provided by customers. When specified Nat IPs are not enough then the Nat service fails for new VMs.
    """


class RouterNatSourceSubnetworkIpRangesToNat(str, Enum):
    """
    Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES then there should not be any other Router.Nat section in any Router for this network in this region.
    """
    ALL_SUBNETWORKS_ALL_IP_RANGES = "ALL_SUBNETWORKS_ALL_IP_RANGES"
    """
    All the IP ranges in every Subnetwork are allowed to Nat.
    """
    ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES"
    """
    All the primary IP ranges in every Subnetwork are allowed to Nat.
    """
    LIST_OF_SUBNETWORKS = "LIST_OF_SUBNETWORKS"
    """
    A list of Subnetworks are allowed to Nat (specified in the field subnetwork below)
    """


class RouterNatSubnetworkToNatSourceIpRangesToNatItem(str, Enum):
    ALL_IP_RANGES = "ALL_IP_RANGES"
    """
    The primary and all the secondary ranges are allowed to Nat.
    """
    LIST_OF_SECONDARY_IP_RANGES = "LIST_OF_SECONDARY_IP_RANGES"
    """
    A list of secondary ranges are allowed to Nat.
    """
    PRIMARY_IP_RANGE = "PRIMARY_IP_RANGE"
    """
    The primary range is allowed to Nat.
    """


class RouterNatType(str, Enum):
    """
    Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC.
    """
    PRIVATE = "PRIVATE"
    """
    NAT used for private IP translation.
    """
    PUBLIC = "PUBLIC"
    """
    NAT used for public IP translation. This is the default.
    """


class RuleAction(str, Enum):
    """
    This is deprecated and has no effect. Do not use.
    """
    ALLOW = "ALLOW"
    """
    This is deprecated and has no effect. Do not use.
    """
    ALLOW_WITH_LOG = "ALLOW_WITH_LOG"
    """
    This is deprecated and has no effect. Do not use.
    """
    DENY = "DENY"
    """
    This is deprecated and has no effect. Do not use.
    """
    DENY_WITH_LOG = "DENY_WITH_LOG"
    """
    This is deprecated and has no effect. Do not use.
    """
    LOG = "LOG"
    """
    This is deprecated and has no effect. Do not use.
    """
    NO_ACTION = "NO_ACTION"
    """
    This is deprecated and has no effect. Do not use.
    """


class SSLHealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class SSLHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class SchedulingInstanceTerminationAction(str, Enum):
    """
    Specifies the termination action for the instance.
    """
    DELETE = "DELETE"
    """
    Delete the VM.
    """
    INSTANCE_TERMINATION_ACTION_UNSPECIFIED = "INSTANCE_TERMINATION_ACTION_UNSPECIFIED"
    """
    Default value. This value is unused.
    """
    STOP = "STOP"
    """
    Stop the VM without storing in-memory content. default action.
    """


class SchedulingNodeAffinityOperator(str, Enum):
    """
    Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
    """
    IN_ = "IN"
    """
    Requires Compute Engine to seek for matched nodes.
    """
    NOT_IN = "NOT_IN"
    """
    Requires Compute Engine to avoid certain nodes.
    """
    OPERATOR_UNSPECIFIED = "OPERATOR_UNSPECIFIED"


class SchedulingOnHostMaintenance(str, Enum):
    """
    Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
    """
    MIGRATE = "MIGRATE"
    """
    *[Default]* Allows Compute Engine to automatically migrate instances out of the way of maintenance events.
    """
    TERMINATE = "TERMINATE"
    """
    Tells Compute Engine to terminate and (optionally) restart the instance away from the maintenance activity. If you would like your instance to be restarted, set the automaticRestart flag to true. Your instance may be restarted more than once, and it may be restarted outside the window of maintenance events.
    """


class SchedulingProvisioningModel(str, Enum):
    """
    Specifies the provisioning model of the instance.
    """
    SPOT = "SPOT"
    """
    Heavily discounted, no guaranteed runtime.
    """
    STANDARD = "STANDARD"
    """
    Standard provisioning with user controlled runtime, no discounts.
    """


class SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility(str, Enum):
    """
    Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
    """
    PREMIUM = "PREMIUM"
    STANDARD = "STANDARD"


class SecurityPolicyAdvancedOptionsConfigJsonParsing(str, Enum):
    DISABLED = "DISABLED"
    STANDARD = "STANDARD"
    STANDARD_WITH_GRAPHQL = "STANDARD_WITH_GRAPHQL"


class SecurityPolicyAdvancedOptionsConfigLogLevel(str, Enum):
    NORMAL = "NORMAL"
    VERBOSE = "VERBOSE"


class SecurityPolicyDdosProtectionConfigDdosProtection(str, Enum):
    ADVANCED = "ADVANCED"
    STANDARD = "STANDARD"


class SecurityPolicyRuleMatcherVersionedExpr(str, Enum):
    """
    Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
    """
    SRC_IPS_V1 = "SRC_IPS_V1"
    """
    Matches the source IP address of a request to the IP ranges supplied in config.
    """


class SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsOp(str, Enum):
    """
    The match operator for the field.
    """
    CONTAINS = "CONTAINS"
    """
    The operator matches if the field value contains the specified value.
    """
    ENDS_WITH = "ENDS_WITH"
    """
    The operator matches if the field value ends with the specified value.
    """
    EQUALS = "EQUALS"
    """
    The operator matches if the field value equals the specified value.
    """
    EQUALS_ANY = "EQUALS_ANY"
    """
    The operator matches if the field value is any value.
    """
    STARTS_WITH = "STARTS_WITH"
    """
    The operator matches if the field value starts with the specified value.
    """


class SecurityPolicyRuleRateLimitOptionsEnforceOnKey(str, Enum):
    """
    Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
    """
    ALL = "ALL"
    HTTP_COOKIE = "HTTP_COOKIE"
    HTTP_HEADER = "HTTP_HEADER"
    HTTP_PATH = "HTTP_PATH"
    IP = "IP"
    REGION_CODE = "REGION_CODE"
    SNI = "SNI"
    XFF_IP = "XFF_IP"


class SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigEnforceOnKeyType(str, Enum):
    """
    Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKeyConfigs" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
    """
    ALL = "ALL"
    HTTP_COOKIE = "HTTP_COOKIE"
    HTTP_HEADER = "HTTP_HEADER"
    HTTP_PATH = "HTTP_PATH"
    IP = "IP"
    REGION_CODE = "REGION_CODE"
    SNI = "SNI"
    XFF_IP = "XFF_IP"


class SecurityPolicyRuleRedirectOptionsType(str, Enum):
    """
    Type of the redirect action.
    """
    EXTERNAL302 = "EXTERNAL_302"
    GOOGLE_RECAPTCHA = "GOOGLE_RECAPTCHA"


class SecurityPolicyType(str, Enum):
    """
    The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time.
    """
    CLOUD_ARMOR = "CLOUD_ARMOR"
    CLOUD_ARMOR_EDGE = "CLOUD_ARMOR_EDGE"
    CLOUD_ARMOR_NETWORK = "CLOUD_ARMOR_NETWORK"


class SecurityPolicyUserDefinedFieldBase(str, Enum):
    """
    The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    TCP = "TCP"
    UDP = "UDP"


class ServerBindingType(str, Enum):
    RESTART_NODE_ON_ANY_SERVER = "RESTART_NODE_ON_ANY_SERVER"
    """
    Node may associate with any physical server over its lifetime.
    """
    RESTART_NODE_ON_MINIMAL_SERVERS = "RESTART_NODE_ON_MINIMAL_SERVERS"
    """
    Node may associate with minimal physical servers over its lifetime.
    """
    SERVER_BINDING_TYPE_UNSPECIFIED = "SERVER_BINDING_TYPE_UNSPECIFIED"


class ServiceAttachmentConnectionPreference(str, Enum):
    """
    The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
    """
    ACCEPT_AUTOMATIC = "ACCEPT_AUTOMATIC"
    ACCEPT_MANUAL = "ACCEPT_MANUAL"
    CONNECTION_PREFERENCE_UNSPECIFIED = "CONNECTION_PREFERENCE_UNSPECIFIED"


class ShareSettingsShareType(str, Enum):
    """
    Type of sharing for this shared-reservation
    """
    LOCAL = "LOCAL"
    """
    Default value.
    """
    ORGANIZATION = "ORGANIZATION"
    """
    Shared-reservation is open to entire Organization
    """
    SHARE_TYPE_UNSPECIFIED = "SHARE_TYPE_UNSPECIFIED"
    """
    Default value. This value is unused.
    """
    SPECIFIC_PROJECTS = "SPECIFIC_PROJECTS"
    """
    Shared-reservation is open to specific projects
    """


class SnapshotSnapshotType(str, Enum):
    """
    Indicates the type of the snapshot.
    """
    ARCHIVE = "ARCHIVE"
    STANDARD = "STANDARD"


class SslCertificateType(str, Enum):
    """
    (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
    """
    MANAGED = "MANAGED"
    """
    Google-managed SSLCertificate.
    """
    SELF_MANAGED = "SELF_MANAGED"
    """
    Certificate uploaded by user.
    """
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class SslPolicyMinTlsVersion(str, Enum):
    """
    The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
    """
    TLS10 = "TLS_1_0"
    """
    TLS 1.0
    """
    TLS11 = "TLS_1_1"
    """
    TLS 1.1
    """
    TLS12 = "TLS_1_2"
    """
    TLS 1.2
    """


class SslPolicyProfile(str, Enum):
    """
    Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
    """
    COMPATIBLE = "COMPATIBLE"
    """
    Compatible profile. Allows the broadset set of clients, even those which support only out-of-date SSL features to negotiate with the load balancer.
    """
    CUSTOM = "CUSTOM"
    """
    Custom profile. Allow only the set of allowed SSL features specified in the customFeatures field.
    """
    MODERN = "MODERN"
    """
    Modern profile. Supports a wide set of SSL features, allowing modern clients to negotiate SSL with the load balancer.
    """
    RESTRICTED = "RESTRICTED"
    """
    Restricted profile. Supports a reduced set of SSL features, intended to meet stricter compliance requirements.
    """


class StatefulPolicyPreservedStateDiskDeviceAutoDelete(str, Enum):
    """
    These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
    """
    NEVER = "NEVER"
    ON_PERMANENT_INSTANCE_DELETION = "ON_PERMANENT_INSTANCE_DELETION"


class StatefulPolicyPreservedStateNetworkIpAutoDelete(str, Enum):
    """
    These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted.
    """
    NEVER = "NEVER"
    ON_PERMANENT_INSTANCE_DELETION = "ON_PERMANENT_INSTANCE_DELETION"


class SubnetworkIpv6AccessType(str, Enum):
    """
    The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
    """
    EXTERNAL = "EXTERNAL"
    """
    VMs on this subnet will be assigned IPv6 addresses that are accessible via the Internet, as well as the VPC network.
    """
    INTERNAL = "INTERNAL"
    """
    VMs on this subnet will be assigned IPv6 addresses that are only accessible over the VPC network.
    """


class SubnetworkLogConfigAggregationInterval(str, Enum):
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
    """
    INTERVAL10_MIN = "INTERVAL_10_MIN"
    INTERVAL15_MIN = "INTERVAL_15_MIN"
    INTERVAL1_MIN = "INTERVAL_1_MIN"
    INTERVAL30_SEC = "INTERVAL_30_SEC"
    INTERVAL5_MIN = "INTERVAL_5_MIN"
    INTERVAL5_SEC = "INTERVAL_5_SEC"


class SubnetworkLogConfigMetadata(str, Enum):
    """
    Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
    """
    CUSTOM_METADATA = "CUSTOM_METADATA"
    EXCLUDE_ALL_METADATA = "EXCLUDE_ALL_METADATA"
    INCLUDE_ALL_METADATA = "INCLUDE_ALL_METADATA"


class SubnetworkPrivateIpv6GoogleAccess(str, Enum):
    """
    This field is for internal use. This field can be both set at resource creation time and updated using patch.
    """
    DISABLE_GOOGLE_ACCESS = "DISABLE_GOOGLE_ACCESS"
    """
    Disable private IPv6 access to/from Google services.
    """
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    """
    Bidirectional private IPv6 access to/from Google services.
    """
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    """
    Outbound private IPv6 access from VMs in this subnet to Google services.
    """


class SubnetworkPurpose(str, Enum):
    """
    The purpose of the resource. This field can be either PRIVATE, REGIONAL_MANAGED_PROXY, PRIVATE_SERVICE_CONNECT, or INTERNAL_HTTPS_LOAD_BALANCER. PRIVATE is the default purpose for user-created subnets or subnets that are automatically created in auto mode networks. A subnet with purpose set to REGIONAL_MANAGED_PROXY is a user-created subnetwork that is reserved for regional Envoy-based load balancers. A subnet with purpose set to PRIVATE_SERVICE_CONNECT is used to publish services using Private Service Connect. A subnet with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a proxy-only subnet that can be used only by regional internal HTTP(S) load balancers. Note that REGIONAL_MANAGED_PROXY is the preferred setting for all regional Envoy load balancers. If unspecified, the subnet purpose defaults to PRIVATE. The enableFlowLogs field isn't supported if the subnet purpose field is set to REGIONAL_MANAGED_PROXY.
    """
    GLOBAL_MANAGED_PROXY = "GLOBAL_MANAGED_PROXY"
    """
    Subnet reserved for Global Envoy-based Load Balancing.
    """
    INTERNAL_HTTPS_LOAD_BALANCER = "INTERNAL_HTTPS_LOAD_BALANCER"
    """
    Subnet reserved for Internal HTTP(S) Load Balancing.
    """
    PRIVATE = "PRIVATE"
    """
    Regular user created or automatically created subnet.
    """
    PRIVATE_NAT = "PRIVATE_NAT"
    """
    Subnetwork used as source range for Private NAT Gateways.
    """
    PRIVATE_RFC1918 = "PRIVATE_RFC_1918"
    """
    Regular user created or automatically created subnet.
    """
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    """
    Subnetworks created for Private Service Connect in the producer network.
    """
    REGIONAL_MANAGED_PROXY = "REGIONAL_MANAGED_PROXY"
    """
    Subnetwork used for Regional Envoy-based Load Balancing.
    """


class SubnetworkRole(str, Enum):
    """
    The role of subnetwork. Currently, this field is only used when purpose = REGIONAL_MANAGED_PROXY. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Envoy-based load balancers in a region. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    """
    ACTIVE = "ACTIVE"
    """
    The ACTIVE subnet that is currently used.
    """
    BACKUP = "BACKUP"
    """
    The BACKUP subnet that could be promoted to ACTIVE.
    """


class SubnetworkStackType(str, Enum):
    """
    The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    """
    New VMs in this subnet can have both IPv4 and IPv6 addresses.
    """
    IPV4_ONLY = "IPV4_ONLY"
    """
    New VMs in this subnet will only be assigned IPv4 addresses.
    """


class SubsettingPolicy(str, Enum):
    CONSISTENT_HASH_SUBSETTING = "CONSISTENT_HASH_SUBSETTING"
    """
    Subsetting based on consistent hashing. For Traffic Director, the number of backends per backend group (the subset size) is based on the `subset_size` parameter. For Internal HTTP(S) load balancing, the number of backends per backend group (the subset size) is dynamically adjusted in two cases: - As the number of proxy instances participating in Internal HTTP(S) load balancing increases, the subset size decreases. - When the total number of backends in a network exceeds the capacity of a single proxy instance, subset sizes are reduced automatically for each service that has backend subsetting enabled.
    """
    NONE = "NONE"
    """
    No Subsetting. Clients may open connections and send traffic to all backends of this backend service. This can lead to performance issues if there is substantial imbalance in the count of clients and backends.
    """


class TCPHealthCheckPortSpecification(str, Enum):
    """
    Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    """
    The port number in the health check's port is used for health checking. Applies to network endpoint group and instance group backends.
    """
    USE_NAMED_PORT = "USE_NAMED_PORT"
    """
    Not supported.
    """
    USE_SERVING_PORT = "USE_SERVING_PORT"
    """
    For network endpoint group backends, the health check uses the port number specified on each endpoint in the network endpoint group. For instance group backends, the health check uses the port number specified for the backend service's named port defined in the instance group's named ports.
    """


class TCPHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class TargetHttpsProxyQuicOverride(str, Enum):
    """
    Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied. 
    """
    DISABLE = "DISABLE"
    """
    The load balancer will not attempt to negotiate QUIC with clients.
    """
    ENABLE = "ENABLE"
    """
    The load balancer will attempt to negotiate QUIC with clients.
    """
    NONE = "NONE"
    """
    No overrides to the default QUIC policy. This option is implicit if no QUIC override has been specified in the request.
    """


class TargetInstanceNatPolicy(str, Enum):
    """
    Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance.
    """
    NO_NAT = "NO_NAT"
    """
    No NAT performed.
    """


class TargetPoolSessionAffinity(str, Enum):
    """
    Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
    """
    CLIENT_IP = "CLIENT_IP"
    """
    2-tuple hash on packet's source and destination IP addresses. Connections from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy.
    """
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    """
    1-tuple hash only on packet's source IP address. Connections from the same source IP address will be served by the same backend VM while that VM remains healthy. This option can only be used for Internal TCP/UDP Load Balancing.
    """
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    """
    5-tuple hash on packet's source and destination IP addresses, IP protocol, and source and destination ports. Connections for the same IP protocol from the same source IP address and port to the same destination IP address and port will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    """
    3-tuple hash on packet's source and destination IP addresses, and IP protocol. Connections for the same IP protocol from the same source IP address to the same destination IP address will be served by the same backend VM while that VM remains healthy. This option cannot be used for HTTP(S) load balancing.
    """
    GENERATED_COOKIE = "GENERATED_COOKIE"
    """
    Hash based on a cookie generated by the L7 loadbalancer. Only valid for HTTP(S) load balancing.
    """
    HEADER_FIELD = "HEADER_FIELD"
    """
    The hash is based on a user specified header field.
    """
    HTTP_COOKIE = "HTTP_COOKIE"
    """
    The hash is based on a user provided cookie.
    """
    NONE = "NONE"
    """
    No session affinity. Connections from the same client IP may go to any instance in the pool.
    """


class TargetSslProxyProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class TargetTcpProxyProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class VpnGatewayStackType(str, Enum):
    """
    The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    """
    Enable VPN gateway with both IPv4 and IPv6 protocols.
    """
    IPV4_ONLY = "IPV4_ONLY"
    """
    Enable VPN gateway with only IPv4 protocol.
    """
