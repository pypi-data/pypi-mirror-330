# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetFutureReservationResult',
    'AwaitableGetFutureReservationResult',
    'get_future_reservation',
    'get_future_reservation_output',
]

@pulumi.output_type
class GetFutureReservationResult:
    def __init__(__self__, auto_created_reservations_delete_time=None, auto_created_reservations_duration=None, auto_delete_auto_created_reservations=None, creation_timestamp=None, description=None, kind=None, name=None, name_prefix=None, planning_status=None, self_link=None, self_link_with_id=None, share_settings=None, specific_sku_properties=None, status=None, time_window=None, zone=None):
        if auto_created_reservations_delete_time and not isinstance(auto_created_reservations_delete_time, str):
            raise TypeError("Expected argument 'auto_created_reservations_delete_time' to be a str")
        pulumi.set(__self__, "auto_created_reservations_delete_time", auto_created_reservations_delete_time)
        if auto_created_reservations_duration and not isinstance(auto_created_reservations_duration, dict):
            raise TypeError("Expected argument 'auto_created_reservations_duration' to be a dict")
        pulumi.set(__self__, "auto_created_reservations_duration", auto_created_reservations_duration)
        if auto_delete_auto_created_reservations and not isinstance(auto_delete_auto_created_reservations, bool):
            raise TypeError("Expected argument 'auto_delete_auto_created_reservations' to be a bool")
        pulumi.set(__self__, "auto_delete_auto_created_reservations", auto_delete_auto_created_reservations)
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_prefix and not isinstance(name_prefix, str):
            raise TypeError("Expected argument 'name_prefix' to be a str")
        pulumi.set(__self__, "name_prefix", name_prefix)
        if planning_status and not isinstance(planning_status, str):
            raise TypeError("Expected argument 'planning_status' to be a str")
        pulumi.set(__self__, "planning_status", planning_status)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if self_link_with_id and not isinstance(self_link_with_id, str):
            raise TypeError("Expected argument 'self_link_with_id' to be a str")
        pulumi.set(__self__, "self_link_with_id", self_link_with_id)
        if share_settings and not isinstance(share_settings, dict):
            raise TypeError("Expected argument 'share_settings' to be a dict")
        pulumi.set(__self__, "share_settings", share_settings)
        if specific_sku_properties and not isinstance(specific_sku_properties, dict):
            raise TypeError("Expected argument 'specific_sku_properties' to be a dict")
        pulumi.set(__self__, "specific_sku_properties", specific_sku_properties)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if time_window and not isinstance(time_window, dict):
            raise TypeError("Expected argument 'time_window' to be a dict")
        pulumi.set(__self__, "time_window", time_window)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoCreatedReservationsDeleteTime")
    def auto_created_reservations_delete_time(self) -> str:
        """
        Future timestamp when the FR auto-created reservations will be deleted by GCE. Format of this field must be a valid href="https://www.ietf.org/rfc/rfc3339.txt">RFC3339 value.
        """
        return pulumi.get(self, "auto_created_reservations_delete_time")

    @property
    @pulumi.getter(name="autoCreatedReservationsDuration")
    def auto_created_reservations_duration(self) -> 'outputs.DurationResponse':
        """
        Specifies the duration of auto-created reservations. It represents relative time to future reservation start_time when auto-created reservations will be automatically deleted by GCE. Duration time unit is represented as a count of seconds and fractions of seconds at nanosecond resolution.
        """
        return pulumi.get(self, "auto_created_reservations_duration")

    @property
    @pulumi.getter(name="autoDeleteAutoCreatedReservations")
    def auto_delete_auto_created_reservations(self) -> bool:
        """
        Setting for enabling or disabling automatic deletion for auto-created reservation. If set to true, auto-created reservations will be deleted at Future Reservation's end time (default) or at user's defined timestamp if any of the [auto_created_reservations_delete_time, auto_created_reservations_duration] values is specified. For keeping auto-created reservation indefinitely, this value should be set to false.
        """
        return pulumi.get(self, "auto_delete_auto_created_reservations")

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> str:
        """
        The creation timestamp for this future reservation in RFC3339 text format.
        """
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An optional description of this resource. Provide this property when you create the future reservation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Type of the resource. Always compute#futureReservation for future reservations.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        """
        Name prefix for the reservations to be created at the time of delivery. The name prefix must comply with RFC1035. Maximum allowed length for name prefix is 20. Automatically created reservations name format will be -date-####.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="planningStatus")
    def planning_status(self) -> str:
        """
        Planning state before being submitted for evaluation
        """
        return pulumi.get(self, "planning_status")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> str:
        """
        Server-defined fully-qualified URL for this resource.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="selfLinkWithId")
    def self_link_with_id(self) -> str:
        """
        Server-defined URL for this resource with the resource id.
        """
        return pulumi.get(self, "self_link_with_id")

    @property
    @pulumi.getter(name="shareSettings")
    def share_settings(self) -> 'outputs.ShareSettingsResponse':
        """
        List of Projects/Folders to share with.
        """
        return pulumi.get(self, "share_settings")

    @property
    @pulumi.getter(name="specificSkuProperties")
    def specific_sku_properties(self) -> 'outputs.FutureReservationSpecificSKUPropertiesResponse':
        """
        Future Reservation configuration to indicate instance properties and total count.
        """
        return pulumi.get(self, "specific_sku_properties")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.FutureReservationStatusResponse':
        """
        [Output only] Status of the Future Reservation
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> 'outputs.FutureReservationTimeWindowResponse':
        """
        Time window for this Future Reservation.
        """
        return pulumi.get(self, "time_window")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        URL of the Zone where this future reservation resides.
        """
        return pulumi.get(self, "zone")


class AwaitableGetFutureReservationResult(GetFutureReservationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFutureReservationResult(
            auto_created_reservations_delete_time=self.auto_created_reservations_delete_time,
            auto_created_reservations_duration=self.auto_created_reservations_duration,
            auto_delete_auto_created_reservations=self.auto_delete_auto_created_reservations,
            creation_timestamp=self.creation_timestamp,
            description=self.description,
            kind=self.kind,
            name=self.name,
            name_prefix=self.name_prefix,
            planning_status=self.planning_status,
            self_link=self.self_link,
            self_link_with_id=self.self_link_with_id,
            share_settings=self.share_settings,
            specific_sku_properties=self.specific_sku_properties,
            status=self.status,
            time_window=self.time_window,
            zone=self.zone)


def get_future_reservation(future_reservation: Optional[str] = None,
                           project: Optional[str] = None,
                           zone: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFutureReservationResult:
    """
    Retrieves information about the specified future reservation.
    """
    __args__ = dict()
    __args__['futureReservation'] = future_reservation
    __args__['project'] = project
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:compute/beta:getFutureReservation', __args__, opts=opts, typ=GetFutureReservationResult).value

    return AwaitableGetFutureReservationResult(
        auto_created_reservations_delete_time=pulumi.get(__ret__, 'auto_created_reservations_delete_time'),
        auto_created_reservations_duration=pulumi.get(__ret__, 'auto_created_reservations_duration'),
        auto_delete_auto_created_reservations=pulumi.get(__ret__, 'auto_delete_auto_created_reservations'),
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        description=pulumi.get(__ret__, 'description'),
        kind=pulumi.get(__ret__, 'kind'),
        name=pulumi.get(__ret__, 'name'),
        name_prefix=pulumi.get(__ret__, 'name_prefix'),
        planning_status=pulumi.get(__ret__, 'planning_status'),
        self_link=pulumi.get(__ret__, 'self_link'),
        self_link_with_id=pulumi.get(__ret__, 'self_link_with_id'),
        share_settings=pulumi.get(__ret__, 'share_settings'),
        specific_sku_properties=pulumi.get(__ret__, 'specific_sku_properties'),
        status=pulumi.get(__ret__, 'status'),
        time_window=pulumi.get(__ret__, 'time_window'),
        zone=pulumi.get(__ret__, 'zone'))


@_utilities.lift_output_func(get_future_reservation)
def get_future_reservation_output(future_reservation: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  zone: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFutureReservationResult]:
    """
    Retrieves information about the specified future reservation.
    """
    ...
