# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AliasContextArgs',
    'AnalysisCompletedArgs',
    'ArtifactHashesArgs',
    'ArtifactRuleArgs',
    'ArtifactArgs',
    'AssessmentArgs',
    'AttestationArgs',
    'AuthorityArgs',
    'BasisArgs',
    'BindingArgs',
    'BuildDefinitionArgs',
    'BuildMetadataArgs',
    'BuildProvenanceArgs',
    'BuildSignatureArgs',
    'BuildArgs',
    'ByProductsArgs',
    'CVSSv3Args',
    'CVSSArgs',
    'CloudRepoSourceContextArgs',
    'CommandArgs',
    'DeployableArgs',
    'DeploymentArgs',
    'DerivedArgs',
    'DetailsArgs',
    'DetailArgs',
    'DigestArgs',
    'DiscoveredArgs',
    'DiscoveryArgs',
    'DistributionArgs',
    'DocumentNoteArgs',
    'DocumentOccurrenceArgs',
    'EnvelopeSignatureArgs',
    'EnvelopeArgs',
    'EnvironmentArgs',
    'ExprArgs',
    'ExternalRefArgs',
    'FileHashesArgs',
    'FileNoteArgs',
    'FileOccurrenceArgs',
    'FingerprintArgs',
    'GenericSignedAttestationArgs',
    'GerritSourceContextArgs',
    'GitSourceContextArgs',
    'GrafeasV1beta1BuildDetailsArgs',
    'GrafeasV1beta1DeploymentDetailsArgs',
    'GrafeasV1beta1DiscoveryDetailsArgs',
    'GrafeasV1beta1ImageDetailsArgs',
    'GrafeasV1beta1IntotoArtifactArgs',
    'GrafeasV1beta1IntotoDetailsArgs',
    'GrafeasV1beta1IntotoSignatureArgs',
    'GrafeasV1beta1PackageDetailsArgs',
    'GrafeasV1beta1VulnerabilityDetailsArgs',
    'HashArgs',
    'HintArgs',
    'InTotoSlsaProvenanceV1Args',
    'InTotoArgs',
    'InstallationArgs',
    'JustificationArgs',
    'KnowledgeBaseArgs',
    'LayerArgs',
    'LicenseArgs',
    'LinkArgs',
    'LocationArgs',
    'PackageInfoNoteArgs',
    'PackageInfoOccurrenceArgs',
    'PackageIssueArgs',
    'PackageArgs',
    'PgpSignedAttestationArgs',
    'ProductArgs',
    'ProjectRepoIdArgs',
    'ProvenanceBuilderArgs',
    'PublisherArgs',
    'RelatedUrlArgs',
    'RelationshipNoteArgs',
    'RelationshipOccurrenceArgs',
    'RemediationArgs',
    'RepoIdArgs',
    'ResourceDescriptorArgs',
    'ResourceArgs',
    'RunDetailsArgs',
    'SBOMReferenceNoteArgs',
    'SBOMReferenceOccurrenceArgs',
    'SBOMStatusArgs',
    'SbomReferenceIntotoPayloadArgs',
    'SbomReferenceIntotoPredicateArgs',
    'SignatureArgs',
    'SigningKeyArgs',
    'SlsaProvenanceV1Args',
    'SourceContextArgs',
    'SourceArgs',
    'StatusArgs',
    'SubjectArgs',
    'VersionArgs',
    'VexAssessmentArgs',
    'VulnerabilityAssessmentNoteArgs',
    'VulnerabilityLocationArgs',
    'VulnerabilityArgs',
    'WindowsDetailArgs',
]

@pulumi.input_type
class AliasContextArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input['AliasContextKind']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        An alias to a repo revision.
        :param pulumi.Input['AliasContextKind'] kind: The alias kind.
        :param pulumi.Input[str] name: The alias name.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input['AliasContextKind']]:
        """
        The alias kind.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input['AliasContextKind']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The alias name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AnalysisCompletedArgs:
    def __init__(__self__, *,
                 analysis_type: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
        """
        if analysis_type is not None:
            pulumi.set(__self__, "analysis_type", analysis_type)

    @property
    @pulumi.getter(name="analysisType")
    def analysis_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "analysis_type")

    @analysis_type.setter
    def analysis_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "analysis_type", value)


@pulumi.input_type
class ArtifactHashesArgs:
    def __init__(__self__, *,
                 sha256: Optional[pulumi.Input[str]] = None):
        """
        Defines a hash object for use in Materials and Products.
        """
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha256")

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256", value)


@pulumi.input_type
class ArtifactRuleArgs:
    def __init__(__self__, *,
                 artifact_rule: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines an object to declare an in-toto artifact rule
        """
        if artifact_rule is not None:
            pulumi.set(__self__, "artifact_rule", artifact_rule)

    @property
    @pulumi.getter(name="artifactRule")
    def artifact_rule(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "artifact_rule")

    @artifact_rule.setter
    def artifact_rule(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "artifact_rule", value)


@pulumi.input_type
class ArtifactArgs:
    def __init__(__self__, *,
                 checksum: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Artifact describes a build product.
        :param pulumi.Input[str] checksum: Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
        :param pulumi.Input[str] id: Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
        """
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        """
        Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AssessmentArgs:
    def __init__(__self__, *,
                 cve: Optional[pulumi.Input[str]] = None,
                 impacts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 justification: Optional[pulumi.Input['JustificationArgs']] = None,
                 long_description: Optional[pulumi.Input[str]] = None,
                 related_uris: Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]] = None,
                 remediations: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]] = None,
                 short_description: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input['AssessmentState']] = None,
                 vulnerability_id: Optional[pulumi.Input[str]] = None):
        """
        Assessment provides all information that is related to a single vulnerability for this product.
        :param pulumi.Input[str] cve: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] impacts: Contains information about the impact of this vulnerability, this will change with time.
        :param pulumi.Input['JustificationArgs'] justification: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        :param pulumi.Input[str] long_description: A detailed description of this Vex.
        :param pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]] related_uris: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
        :param pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]] remediations: Specifies details on how to handle (and presumably, fix) a vulnerability.
        :param pulumi.Input[str] short_description: A one sentence description of this Vex.
        :param pulumi.Input['AssessmentState'] state: Provides the state of this Vulnerability assessment.
        :param pulumi.Input[str] vulnerability_id: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
        """
        if cve is not None:
            warnings.warn("""Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""", DeprecationWarning)
            pulumi.log.warn("""cve is deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""")
        if cve is not None:
            pulumi.set(__self__, "cve", cve)
        if impacts is not None:
            pulumi.set(__self__, "impacts", impacts)
        if justification is not None:
            pulumi.set(__self__, "justification", justification)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if related_uris is not None:
            pulumi.set(__self__, "related_uris", related_uris)
        if remediations is not None:
            pulumi.set(__self__, "remediations", remediations)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vulnerability_id is not None:
            pulumi.set(__self__, "vulnerability_id", vulnerability_id)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""")
    def cve(self) -> Optional[pulumi.Input[str]]:
        """
        Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
        """
        return pulumi.get(self, "cve")

    @cve.setter
    def cve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve", value)

    @property
    @pulumi.getter
    def impacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Contains information about the impact of this vulnerability, this will change with time.
        """
        return pulumi.get(self, "impacts")

    @impacts.setter
    def impacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "impacts", value)

    @property
    @pulumi.getter
    def justification(self) -> Optional[pulumi.Input['JustificationArgs']]:
        """
        Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        """
        return pulumi.get(self, "justification")

    @justification.setter
    def justification(self, value: Optional[pulumi.Input['JustificationArgs']]):
        pulumi.set(self, "justification", value)

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[str]]:
        """
        A detailed description of this Vex.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_description", value)

    @property
    @pulumi.getter(name="relatedUris")
    def related_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]]:
        """
        Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
        """
        return pulumi.get(self, "related_uris")

    @related_uris.setter
    def related_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]]):
        pulumi.set(self, "related_uris", value)

    @property
    @pulumi.getter
    def remediations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]]:
        """
        Specifies details on how to handle (and presumably, fix) a vulnerability.
        """
        return pulumi.get(self, "remediations")

    @remediations.setter
    def remediations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]]):
        pulumi.set(self, "remediations", value)

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[str]]:
        """
        A one sentence description of this Vex.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_description", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['AssessmentState']]:
        """
        Provides the state of this Vulnerability assessment.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['AssessmentState']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vulnerabilityId")
    def vulnerability_id(self) -> Optional[pulumi.Input[str]]:
        """
        The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
        """
        return pulumi.get(self, "vulnerability_id")

    @vulnerability_id.setter
    def vulnerability_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vulnerability_id", value)


@pulumi.input_type
class AttestationArgs:
    def __init__(__self__, *,
                 generic_signed_attestation: Optional[pulumi.Input['GenericSignedAttestationArgs']] = None,
                 pgp_signed_attestation: Optional[pulumi.Input['PgpSignedAttestationArgs']] = None):
        """
        Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
        :param pulumi.Input['PgpSignedAttestationArgs'] pgp_signed_attestation: A PGP signed attestation.
        """
        if generic_signed_attestation is not None:
            pulumi.set(__self__, "generic_signed_attestation", generic_signed_attestation)
        if pgp_signed_attestation is not None:
            pulumi.set(__self__, "pgp_signed_attestation", pgp_signed_attestation)

    @property
    @pulumi.getter(name="genericSignedAttestation")
    def generic_signed_attestation(self) -> Optional[pulumi.Input['GenericSignedAttestationArgs']]:
        return pulumi.get(self, "generic_signed_attestation")

    @generic_signed_attestation.setter
    def generic_signed_attestation(self, value: Optional[pulumi.Input['GenericSignedAttestationArgs']]):
        pulumi.set(self, "generic_signed_attestation", value)

    @property
    @pulumi.getter(name="pgpSignedAttestation")
    def pgp_signed_attestation(self) -> Optional[pulumi.Input['PgpSignedAttestationArgs']]:
        """
        A PGP signed attestation.
        """
        return pulumi.get(self, "pgp_signed_attestation")

    @pgp_signed_attestation.setter
    def pgp_signed_attestation(self, value: Optional[pulumi.Input['PgpSignedAttestationArgs']]):
        pulumi.set(self, "pgp_signed_attestation", value)


@pulumi.input_type
class AuthorityArgs:
    def __init__(__self__, *,
                 hint: Optional[pulumi.Input['HintArgs']] = None):
        """
        Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
        :param pulumi.Input['HintArgs'] hint: Hint hints at the purpose of the attestation authority.
        """
        if hint is not None:
            pulumi.set(__self__, "hint", hint)

    @property
    @pulumi.getter
    def hint(self) -> Optional[pulumi.Input['HintArgs']]:
        """
        Hint hints at the purpose of the attestation authority.
        """
        return pulumi.get(self, "hint")

    @hint.setter
    def hint(self, value: Optional[pulumi.Input['HintArgs']]):
        pulumi.set(self, "hint", value)


@pulumi.input_type
class BasisArgs:
    def __init__(__self__, *,
                 fingerprint: pulumi.Input['FingerprintArgs'],
                 resource_url: pulumi.Input[str]):
        """
        Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
        :param pulumi.Input['FingerprintArgs'] fingerprint: Immutable. The fingerprint of the base image.
        :param pulumi.Input[str] resource_url: Immutable. The resource_url for the resource representing the basis of associated occurrence images.
        """
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "resource_url", resource_url)

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Input['FingerprintArgs']:
        """
        Immutable. The fingerprint of the base image.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: pulumi.Input['FingerprintArgs']):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> pulumi.Input[str]:
        """
        Immutable. The resource_url for the resource representing the basis of associated occurrence images.
        """
        return pulumi.get(self, "resource_url")

    @resource_url.setter
    def resource_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_url", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class BuildDefinitionArgs:
    def __init__(__self__, *,
                 build_type: Optional[pulumi.Input[str]] = None,
                 external_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internal_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resolved_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]] = None):
        if build_type is not None:
            pulumi.set(__self__, "build_type", build_type)
        if external_parameters is not None:
            pulumi.set(__self__, "external_parameters", external_parameters)
        if internal_parameters is not None:
            pulumi.set(__self__, "internal_parameters", internal_parameters)
        if resolved_dependencies is not None:
            pulumi.set(__self__, "resolved_dependencies", resolved_dependencies)

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "build_type")

    @build_type.setter
    def build_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_type", value)

    @property
    @pulumi.getter(name="externalParameters")
    def external_parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "external_parameters")

    @external_parameters.setter
    def external_parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "external_parameters", value)

    @property
    @pulumi.getter(name="internalParameters")
    def internal_parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "internal_parameters")

    @internal_parameters.setter
    def internal_parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "internal_parameters", value)

    @property
    @pulumi.getter(name="resolvedDependencies")
    def resolved_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]:
        return pulumi.get(self, "resolved_dependencies")

    @resolved_dependencies.setter
    def resolved_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]):
        pulumi.set(self, "resolved_dependencies", value)


@pulumi.input_type
class BuildMetadataArgs:
    def __init__(__self__, *,
                 finished_on: Optional[pulumi.Input[str]] = None,
                 invocation_id: Optional[pulumi.Input[str]] = None,
                 started_on: Optional[pulumi.Input[str]] = None):
        if finished_on is not None:
            pulumi.set(__self__, "finished_on", finished_on)
        if invocation_id is not None:
            pulumi.set(__self__, "invocation_id", invocation_id)
        if started_on is not None:
            pulumi.set(__self__, "started_on", started_on)

    @property
    @pulumi.getter(name="finishedOn")
    def finished_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "finished_on")

    @finished_on.setter
    def finished_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_on", value)

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invocation_id")

    @invocation_id.setter
    def invocation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_id", value)

    @property
    @pulumi.getter(name="startedOn")
    def started_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "started_on")

    @started_on.setter
    def started_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_on", value)


@pulumi.input_type
class BuildProvenanceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 build_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 builder_version: Optional[pulumi.Input[str]] = None,
                 built_artifacts: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactArgs']]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input['CommandArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 logs_uri: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 source_provenance: Optional[pulumi.Input['SourceArgs']] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 trigger_id: Optional[pulumi.Input[str]] = None):
        """
        Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
        :param pulumi.Input[str] id: Unique identifier of the build.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] build_options: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
        :param pulumi.Input[str] builder_version: Version string of the builder at the time this build was executed.
        :param pulumi.Input[Sequence[pulumi.Input['ArtifactArgs']]] built_artifacts: Output of the build.
        :param pulumi.Input[Sequence[pulumi.Input['CommandArgs']]] commands: Commands requested by the build.
        :param pulumi.Input[str] create_time: Time at which the build was created.
        :param pulumi.Input[str] creator: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
        :param pulumi.Input[str] end_time: Time at which execution of the build was finished.
        :param pulumi.Input[str] logs_uri: URI where any logs for this provenance were written.
        :param pulumi.Input[str] project: ID of the project.
        :param pulumi.Input['SourceArgs'] source_provenance: Details of the Source input to the build.
        :param pulumi.Input[str] start_time: Time at which execution of the build was started.
        :param pulumi.Input[str] trigger_id: Trigger identifier if the build was triggered automatically; empty if not.
        """
        pulumi.set(__self__, "id", id)
        if build_options is not None:
            pulumi.set(__self__, "build_options", build_options)
        if builder_version is not None:
            pulumi.set(__self__, "builder_version", builder_version)
        if built_artifacts is not None:
            pulumi.set(__self__, "built_artifacts", built_artifacts)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if logs_uri is not None:
            pulumi.set(__self__, "logs_uri", logs_uri)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if source_provenance is not None:
            pulumi.set(__self__, "source_provenance", source_provenance)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the build.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="buildOptions")
    def build_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
        """
        return pulumi.get(self, "build_options")

    @build_options.setter
    def build_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "build_options", value)

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version string of the builder at the time this build was executed.
        """
        return pulumi.get(self, "builder_version")

    @builder_version.setter
    def builder_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "builder_version", value)

    @property
    @pulumi.getter(name="builtArtifacts")
    def built_artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactArgs']]]]:
        """
        Output of the build.
        """
        return pulumi.get(self, "built_artifacts")

    @built_artifacts.setter
    def built_artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactArgs']]]]):
        pulumi.set(self, "built_artifacts", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandArgs']]]]:
        """
        Commands requested by the build.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandArgs']]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the build was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[str]]:
        """
        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which execution of the build was finished.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="logsUri")
    def logs_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI where any logs for this provenance were written.
        """
        return pulumi.get(self, "logs_uri")

    @logs_uri.setter
    def logs_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logs_uri", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sourceProvenance")
    def source_provenance(self) -> Optional[pulumi.Input['SourceArgs']]:
        """
        Details of the Source input to the build.
        """
        return pulumi.get(self, "source_provenance")

    @source_provenance.setter
    def source_provenance(self, value: Optional[pulumi.Input['SourceArgs']]):
        pulumi.set(self, "source_provenance", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which execution of the build was started.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger identifier if the build was triggered automatically; empty if not.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_id", value)


@pulumi.input_type
class BuildSignatureArgs:
    def __init__(__self__, *,
                 signature: pulumi.Input[str],
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input['BuildSignatureKeyType']] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        """
        Message encapsulating the signature of the verified build.
        :param pulumi.Input[str] signature: Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
        :param pulumi.Input[str] key_id: An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
        :param pulumi.Input['BuildSignatureKeyType'] key_type: The type of the key, either stored in `public_key` or referenced in `key_id`.
        :param pulumi.Input[str] public_key: Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
        """
        pulumi.set(__self__, "signature", signature)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def signature(self) -> pulumi.Input[str]:
        """
        Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: pulumi.Input[str]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input['BuildSignatureKeyType']]:
        """
        The type of the key, either stored in `public_key` or referenced in `key_id`.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input['BuildSignatureKeyType']]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class BuildArgs:
    def __init__(__self__, *,
                 builder_version: pulumi.Input[str],
                 signature: Optional[pulumi.Input['BuildSignatureArgs']] = None):
        """
        Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
        :param pulumi.Input[str] builder_version: Immutable. Version of the builder which produced this build.
        :param pulumi.Input['BuildSignatureArgs'] signature: Signature of the build in occurrences pointing to this build note containing build details.
        """
        pulumi.set(__self__, "builder_version", builder_version)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)

    @property
    @pulumi.getter(name="builderVersion")
    def builder_version(self) -> pulumi.Input[str]:
        """
        Immutable. Version of the builder which produced this build.
        """
        return pulumi.get(self, "builder_version")

    @builder_version.setter
    def builder_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "builder_version", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input['BuildSignatureArgs']]:
        """
        Signature of the build in occurrences pointing to this build note containing build details.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input['BuildSignatureArgs']]):
        pulumi.set(self, "signature", value)


@pulumi.input_type
class ByProductsArgs:
    def __init__(__self__, *,
                 custom_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
        """
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_values", value)


@pulumi.input_type
class CVSSv3Args:
    def __init__(__self__, *,
                 attack_complexity: Optional[pulumi.Input['CVSSv3AttackComplexity']] = None,
                 attack_vector: Optional[pulumi.Input['CVSSv3AttackVector']] = None,
                 availability_impact: Optional[pulumi.Input['CVSSv3AvailabilityImpact']] = None,
                 base_score: Optional[pulumi.Input[float]] = None,
                 confidentiality_impact: Optional[pulumi.Input['CVSSv3ConfidentialityImpact']] = None,
                 exploitability_score: Optional[pulumi.Input[float]] = None,
                 impact_score: Optional[pulumi.Input[float]] = None,
                 integrity_impact: Optional[pulumi.Input['CVSSv3IntegrityImpact']] = None,
                 privileges_required: Optional[pulumi.Input['CVSSv3PrivilegesRequired']] = None,
                 scope: Optional[pulumi.Input['CVSSv3Scope']] = None,
                 user_interaction: Optional[pulumi.Input['CVSSv3UserInteraction']] = None):
        """
        Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
        :param pulumi.Input['CVSSv3AttackVector'] attack_vector: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
        :param pulumi.Input[float] base_score: The base score is a function of the base metric scores.
        """
        if attack_complexity is not None:
            pulumi.set(__self__, "attack_complexity", attack_complexity)
        if attack_vector is not None:
            pulumi.set(__self__, "attack_vector", attack_vector)
        if availability_impact is not None:
            pulumi.set(__self__, "availability_impact", availability_impact)
        if base_score is not None:
            pulumi.set(__self__, "base_score", base_score)
        if confidentiality_impact is not None:
            pulumi.set(__self__, "confidentiality_impact", confidentiality_impact)
        if exploitability_score is not None:
            pulumi.set(__self__, "exploitability_score", exploitability_score)
        if impact_score is not None:
            pulumi.set(__self__, "impact_score", impact_score)
        if integrity_impact is not None:
            pulumi.set(__self__, "integrity_impact", integrity_impact)
        if privileges_required is not None:
            pulumi.set(__self__, "privileges_required", privileges_required)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if user_interaction is not None:
            pulumi.set(__self__, "user_interaction", user_interaction)

    @property
    @pulumi.getter(name="attackComplexity")
    def attack_complexity(self) -> Optional[pulumi.Input['CVSSv3AttackComplexity']]:
        return pulumi.get(self, "attack_complexity")

    @attack_complexity.setter
    def attack_complexity(self, value: Optional[pulumi.Input['CVSSv3AttackComplexity']]):
        pulumi.set(self, "attack_complexity", value)

    @property
    @pulumi.getter(name="attackVector")
    def attack_vector(self) -> Optional[pulumi.Input['CVSSv3AttackVector']]:
        """
        Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
        """
        return pulumi.get(self, "attack_vector")

    @attack_vector.setter
    def attack_vector(self, value: Optional[pulumi.Input['CVSSv3AttackVector']]):
        pulumi.set(self, "attack_vector", value)

    @property
    @pulumi.getter(name="availabilityImpact")
    def availability_impact(self) -> Optional[pulumi.Input['CVSSv3AvailabilityImpact']]:
        return pulumi.get(self, "availability_impact")

    @availability_impact.setter
    def availability_impact(self, value: Optional[pulumi.Input['CVSSv3AvailabilityImpact']]):
        pulumi.set(self, "availability_impact", value)

    @property
    @pulumi.getter(name="baseScore")
    def base_score(self) -> Optional[pulumi.Input[float]]:
        """
        The base score is a function of the base metric scores.
        """
        return pulumi.get(self, "base_score")

    @base_score.setter
    def base_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base_score", value)

    @property
    @pulumi.getter(name="confidentialityImpact")
    def confidentiality_impact(self) -> Optional[pulumi.Input['CVSSv3ConfidentialityImpact']]:
        return pulumi.get(self, "confidentiality_impact")

    @confidentiality_impact.setter
    def confidentiality_impact(self, value: Optional[pulumi.Input['CVSSv3ConfidentialityImpact']]):
        pulumi.set(self, "confidentiality_impact", value)

    @property
    @pulumi.getter(name="exploitabilityScore")
    def exploitability_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "exploitability_score")

    @exploitability_score.setter
    def exploitability_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "exploitability_score", value)

    @property
    @pulumi.getter(name="impactScore")
    def impact_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "impact_score")

    @impact_score.setter
    def impact_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "impact_score", value)

    @property
    @pulumi.getter(name="integrityImpact")
    def integrity_impact(self) -> Optional[pulumi.Input['CVSSv3IntegrityImpact']]:
        return pulumi.get(self, "integrity_impact")

    @integrity_impact.setter
    def integrity_impact(self, value: Optional[pulumi.Input['CVSSv3IntegrityImpact']]):
        pulumi.set(self, "integrity_impact", value)

    @property
    @pulumi.getter(name="privilegesRequired")
    def privileges_required(self) -> Optional[pulumi.Input['CVSSv3PrivilegesRequired']]:
        return pulumi.get(self, "privileges_required")

    @privileges_required.setter
    def privileges_required(self, value: Optional[pulumi.Input['CVSSv3PrivilegesRequired']]):
        pulumi.set(self, "privileges_required", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['CVSSv3Scope']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['CVSSv3Scope']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="userInteraction")
    def user_interaction(self) -> Optional[pulumi.Input['CVSSv3UserInteraction']]:
        return pulumi.get(self, "user_interaction")

    @user_interaction.setter
    def user_interaction(self, value: Optional[pulumi.Input['CVSSv3UserInteraction']]):
        pulumi.set(self, "user_interaction", value)


@pulumi.input_type
class CVSSArgs:
    def __init__(__self__, *,
                 attack_complexity: Optional[pulumi.Input['CVSSAttackComplexity']] = None,
                 attack_vector: Optional[pulumi.Input['CVSSAttackVector']] = None,
                 authentication: Optional[pulumi.Input['CVSSAuthentication']] = None,
                 availability_impact: Optional[pulumi.Input['CVSSAvailabilityImpact']] = None,
                 base_score: Optional[pulumi.Input[float]] = None,
                 confidentiality_impact: Optional[pulumi.Input['CVSSConfidentialityImpact']] = None,
                 exploitability_score: Optional[pulumi.Input[float]] = None,
                 impact_score: Optional[pulumi.Input[float]] = None,
                 integrity_impact: Optional[pulumi.Input['CVSSIntegrityImpact']] = None,
                 privileges_required: Optional[pulumi.Input['CVSSPrivilegesRequired']] = None,
                 scope: Optional[pulumi.Input['CVSSScope']] = None,
                 user_interaction: Optional[pulumi.Input['CVSSUserInteraction']] = None):
        """
        Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
        :param pulumi.Input['CVSSAttackComplexity'] attack_complexity: Defined in CVSS v3, CVSS v2
        :param pulumi.Input['CVSSAttackVector'] attack_vector: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
        :param pulumi.Input['CVSSAuthentication'] authentication: Defined in CVSS v2
        :param pulumi.Input['CVSSAvailabilityImpact'] availability_impact: Defined in CVSS v3, CVSS v2
        :param pulumi.Input[float] base_score: The base score is a function of the base metric scores.
        :param pulumi.Input['CVSSConfidentialityImpact'] confidentiality_impact: Defined in CVSS v3, CVSS v2
        :param pulumi.Input['CVSSIntegrityImpact'] integrity_impact: Defined in CVSS v3, CVSS v2
        :param pulumi.Input['CVSSPrivilegesRequired'] privileges_required: Defined in CVSS v3
        :param pulumi.Input['CVSSScope'] scope: Defined in CVSS v3
        :param pulumi.Input['CVSSUserInteraction'] user_interaction: Defined in CVSS v3
        """
        if attack_complexity is not None:
            pulumi.set(__self__, "attack_complexity", attack_complexity)
        if attack_vector is not None:
            pulumi.set(__self__, "attack_vector", attack_vector)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if availability_impact is not None:
            pulumi.set(__self__, "availability_impact", availability_impact)
        if base_score is not None:
            pulumi.set(__self__, "base_score", base_score)
        if confidentiality_impact is not None:
            pulumi.set(__self__, "confidentiality_impact", confidentiality_impact)
        if exploitability_score is not None:
            pulumi.set(__self__, "exploitability_score", exploitability_score)
        if impact_score is not None:
            pulumi.set(__self__, "impact_score", impact_score)
        if integrity_impact is not None:
            pulumi.set(__self__, "integrity_impact", integrity_impact)
        if privileges_required is not None:
            pulumi.set(__self__, "privileges_required", privileges_required)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if user_interaction is not None:
            pulumi.set(__self__, "user_interaction", user_interaction)

    @property
    @pulumi.getter(name="attackComplexity")
    def attack_complexity(self) -> Optional[pulumi.Input['CVSSAttackComplexity']]:
        """
        Defined in CVSS v3, CVSS v2
        """
        return pulumi.get(self, "attack_complexity")

    @attack_complexity.setter
    def attack_complexity(self, value: Optional[pulumi.Input['CVSSAttackComplexity']]):
        pulumi.set(self, "attack_complexity", value)

    @property
    @pulumi.getter(name="attackVector")
    def attack_vector(self) -> Optional[pulumi.Input['CVSSAttackVector']]:
        """
        Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
        """
        return pulumi.get(self, "attack_vector")

    @attack_vector.setter
    def attack_vector(self, value: Optional[pulumi.Input['CVSSAttackVector']]):
        pulumi.set(self, "attack_vector", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['CVSSAuthentication']]:
        """
        Defined in CVSS v2
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['CVSSAuthentication']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="availabilityImpact")
    def availability_impact(self) -> Optional[pulumi.Input['CVSSAvailabilityImpact']]:
        """
        Defined in CVSS v3, CVSS v2
        """
        return pulumi.get(self, "availability_impact")

    @availability_impact.setter
    def availability_impact(self, value: Optional[pulumi.Input['CVSSAvailabilityImpact']]):
        pulumi.set(self, "availability_impact", value)

    @property
    @pulumi.getter(name="baseScore")
    def base_score(self) -> Optional[pulumi.Input[float]]:
        """
        The base score is a function of the base metric scores.
        """
        return pulumi.get(self, "base_score")

    @base_score.setter
    def base_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base_score", value)

    @property
    @pulumi.getter(name="confidentialityImpact")
    def confidentiality_impact(self) -> Optional[pulumi.Input['CVSSConfidentialityImpact']]:
        """
        Defined in CVSS v3, CVSS v2
        """
        return pulumi.get(self, "confidentiality_impact")

    @confidentiality_impact.setter
    def confidentiality_impact(self, value: Optional[pulumi.Input['CVSSConfidentialityImpact']]):
        pulumi.set(self, "confidentiality_impact", value)

    @property
    @pulumi.getter(name="exploitabilityScore")
    def exploitability_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "exploitability_score")

    @exploitability_score.setter
    def exploitability_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "exploitability_score", value)

    @property
    @pulumi.getter(name="impactScore")
    def impact_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "impact_score")

    @impact_score.setter
    def impact_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "impact_score", value)

    @property
    @pulumi.getter(name="integrityImpact")
    def integrity_impact(self) -> Optional[pulumi.Input['CVSSIntegrityImpact']]:
        """
        Defined in CVSS v3, CVSS v2
        """
        return pulumi.get(self, "integrity_impact")

    @integrity_impact.setter
    def integrity_impact(self, value: Optional[pulumi.Input['CVSSIntegrityImpact']]):
        pulumi.set(self, "integrity_impact", value)

    @property
    @pulumi.getter(name="privilegesRequired")
    def privileges_required(self) -> Optional[pulumi.Input['CVSSPrivilegesRequired']]:
        """
        Defined in CVSS v3
        """
        return pulumi.get(self, "privileges_required")

    @privileges_required.setter
    def privileges_required(self, value: Optional[pulumi.Input['CVSSPrivilegesRequired']]):
        pulumi.set(self, "privileges_required", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['CVSSScope']]:
        """
        Defined in CVSS v3
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['CVSSScope']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="userInteraction")
    def user_interaction(self) -> Optional[pulumi.Input['CVSSUserInteraction']]:
        """
        Defined in CVSS v3
        """
        return pulumi.get(self, "user_interaction")

    @user_interaction.setter
    def user_interaction(self, value: Optional[pulumi.Input['CVSSUserInteraction']]):
        pulumi.set(self, "user_interaction", value)


@pulumi.input_type
class CloudRepoSourceContextArgs:
    def __init__(__self__, *,
                 alias_context: Optional[pulumi.Input['AliasContextArgs']] = None,
                 repo_id: Optional[pulumi.Input['RepoIdArgs']] = None,
                 revision_id: Optional[pulumi.Input[str]] = None):
        """
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
        :param pulumi.Input['AliasContextArgs'] alias_context: An alias, which may be a branch or tag.
        :param pulumi.Input['RepoIdArgs'] repo_id: The ID of the repo.
        :param pulumi.Input[str] revision_id: A revision ID.
        """
        if alias_context is not None:
            pulumi.set(__self__, "alias_context", alias_context)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)

    @property
    @pulumi.getter(name="aliasContext")
    def alias_context(self) -> Optional[pulumi.Input['AliasContextArgs']]:
        """
        An alias, which may be a branch or tag.
        """
        return pulumi.get(self, "alias_context")

    @alias_context.setter
    def alias_context(self, value: Optional[pulumi.Input['AliasContextArgs']]):
        pulumi.set(self, "alias_context", value)

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input['RepoIdArgs']]:
        """
        The ID of the repo.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input['RepoIdArgs']]):
        pulumi.set(self, "repo_id", value)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        A revision ID.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)


@pulumi.input_type
class CommandArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 wait_for: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Command describes a step performed as part of the build pipeline.
        :param pulumi.Input[str] name: Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Command-line arguments used when executing this command.
        :param pulumi.Input[str] dir: Working directory (relative to project source root) used when running this command.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env: Environment variables set before running this command.
        :param pulumi.Input[str] id: Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wait_for: The ID(s) of the command(s) that this command depends on.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if wait_for is not None:
            pulumi.set(__self__, "wait_for", wait_for)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command-line arguments used when executing this command.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        """
        Working directory (relative to project source root) used when running this command.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment variables set before running this command.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID(s) of the command(s) that this command depends on.
        """
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wait_for", value)


@pulumi.input_type
class DeployableArgs:
    def __init__(__self__, *,
                 resource_uri: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        An artifact that can be deployed in some runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_uri: Resource URI for the artifact being deployed.
        """
        pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Resource URI for the artifact being deployed.
        """
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_uri", value)


@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 deploy_time: pulumi.Input[str],
                 address: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input['DeploymentPlatform']] = None,
                 undeploy_time: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        """
        The period during which some deployable was active in a runtime.
        :param pulumi.Input[str] deploy_time: Beginning of the lifetime of this deployment.
        :param pulumi.Input[str] address: Address of the runtime element hosting this deployment.
        :param pulumi.Input[str] config: Configuration used to create this deployment.
        :param pulumi.Input['DeploymentPlatform'] platform: Platform hosting this deployment.
        :param pulumi.Input[str] undeploy_time: End of the lifetime of this deployment.
        :param pulumi.Input[str] user_email: Identity of the user that triggered this deployment.
        """
        pulumi.set(__self__, "deploy_time", deploy_time)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if undeploy_time is not None:
            pulumi.set(__self__, "undeploy_time", undeploy_time)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> pulumi.Input[str]:
        """
        Beginning of the lifetime of this deployment.
        """
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address of the runtime element hosting this deployment.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration used to create this deployment.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['DeploymentPlatform']]:
        """
        Platform hosting this deployment.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['DeploymentPlatform']]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="undeployTime")
    def undeploy_time(self) -> Optional[pulumi.Input[str]]:
        """
        End of the lifetime of this deployment.
        """
        return pulumi.get(self, "undeploy_time")

    @undeploy_time.setter
    def undeploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "undeploy_time", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        """
        Identity of the user that triggered this deployment.
        """
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


@pulumi.input_type
class DerivedArgs:
    def __init__(__self__, *,
                 fingerprint: pulumi.Input['FingerprintArgs'],
                 layer_info: Optional[pulumi.Input[Sequence[pulumi.Input['LayerArgs']]]] = None):
        """
        Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
        :param pulumi.Input['FingerprintArgs'] fingerprint: The fingerprint of the derived image.
        :param pulumi.Input[Sequence[pulumi.Input['LayerArgs']]] layer_info: This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
        """
        pulumi.set(__self__, "fingerprint", fingerprint)
        if layer_info is not None:
            pulumi.set(__self__, "layer_info", layer_info)

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Input['FingerprintArgs']:
        """
        The fingerprint of the derived image.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: pulumi.Input['FingerprintArgs']):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="layerInfo")
    def layer_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayerArgs']]]]:
        """
        This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
        """
        return pulumi.get(self, "layer_info")

    @layer_info.setter
    def layer_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayerArgs']]]]):
        pulumi.set(self, "layer_info", value)


@pulumi.input_type
class DetailsArgs:
    def __init__(__self__, *,
                 attestation: pulumi.Input['AttestationArgs']):
        """
        Details of an attestation occurrence.
        :param pulumi.Input['AttestationArgs'] attestation: Attestation for the resource.
        """
        pulumi.set(__self__, "attestation", attestation)

    @property
    @pulumi.getter
    def attestation(self) -> pulumi.Input['AttestationArgs']:
        """
        Attestation for the resource.
        """
        return pulumi.get(self, "attestation")

    @attestation.setter
    def attestation(self, value: pulumi.Input['AttestationArgs']):
        pulumi.set(self, "attestation", value)


@pulumi.input_type
class DetailArgs:
    def __init__(__self__, *,
                 cpe_uri: pulumi.Input[str],
                 package: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 fixed_location: Optional[pulumi.Input['VulnerabilityLocationArgs']] = None,
                 is_obsolete: Optional[pulumi.Input[bool]] = None,
                 max_affected_version: Optional[pulumi.Input['VersionArgs']] = None,
                 min_affected_version: Optional[pulumi.Input['VersionArgs']] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 severity_name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_update_time: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        """
        Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
        :param pulumi.Input[str] cpe_uri: The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
        :param pulumi.Input[str] package: The name of the package where the vulnerability was found.
        :param pulumi.Input[str] description: A vendor-specific description of this note.
        :param pulumi.Input['VulnerabilityLocationArgs'] fixed_location: The fix for this specific package version.
        :param pulumi.Input[bool] is_obsolete: Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
        :param pulumi.Input['VersionArgs'] max_affected_version: The max version of the package in which the vulnerability exists.
        :param pulumi.Input['VersionArgs'] min_affected_version: The min version of the package in which the vulnerability exists.
        :param pulumi.Input[str] package_type: The type of package; whether native or non native(ruby gems, node.js packages etc).
        :param pulumi.Input[str] severity_name: The severity (eg: distro assigned severity) for this vulnerability.
        :param pulumi.Input[str] source: The source from which the information in this Detail was obtained.
        :param pulumi.Input[str] source_update_time: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        :param pulumi.Input[str] vendor: The name of the vendor of the product.
        """
        pulumi.set(__self__, "cpe_uri", cpe_uri)
        pulumi.set(__self__, "package", package)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fixed_location is not None:
            pulumi.set(__self__, "fixed_location", fixed_location)
        if is_obsolete is not None:
            pulumi.set(__self__, "is_obsolete", is_obsolete)
        if max_affected_version is not None:
            pulumi.set(__self__, "max_affected_version", max_affected_version)
        if min_affected_version is not None:
            pulumi.set(__self__, "min_affected_version", min_affected_version)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if severity_name is not None:
            pulumi.set(__self__, "severity_name", severity_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_update_time is not None:
            pulumi.set(__self__, "source_update_time", source_update_time)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="cpeUri")
    def cpe_uri(self) -> pulumi.Input[str]:
        """
        The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter
    def package(self) -> pulumi.Input[str]:
        """
        The name of the package where the vulnerability was found.
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: pulumi.Input[str]):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A vendor-specific description of this note.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fixedLocation")
    def fixed_location(self) -> Optional[pulumi.Input['VulnerabilityLocationArgs']]:
        """
        The fix for this specific package version.
        """
        return pulumi.get(self, "fixed_location")

    @fixed_location.setter
    def fixed_location(self, value: Optional[pulumi.Input['VulnerabilityLocationArgs']]):
        pulumi.set(self, "fixed_location", value)

    @property
    @pulumi.getter(name="isObsolete")
    def is_obsolete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
        """
        return pulumi.get(self, "is_obsolete")

    @is_obsolete.setter
    def is_obsolete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_obsolete", value)

    @property
    @pulumi.getter(name="maxAffectedVersion")
    def max_affected_version(self) -> Optional[pulumi.Input['VersionArgs']]:
        """
        The max version of the package in which the vulnerability exists.
        """
        return pulumi.get(self, "max_affected_version")

    @max_affected_version.setter
    def max_affected_version(self, value: Optional[pulumi.Input['VersionArgs']]):
        pulumi.set(self, "max_affected_version", value)

    @property
    @pulumi.getter(name="minAffectedVersion")
    def min_affected_version(self) -> Optional[pulumi.Input['VersionArgs']]:
        """
        The min version of the package in which the vulnerability exists.
        """
        return pulumi.get(self, "min_affected_version")

    @min_affected_version.setter
    def min_affected_version(self, value: Optional[pulumi.Input['VersionArgs']]):
        pulumi.set(self, "min_affected_version", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of package; whether native or non native(ruby gems, node.js packages etc).
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="severityName")
    def severity_name(self) -> Optional[pulumi.Input[str]]:
        """
        The severity (eg: distro assigned severity) for this vulnerability.
        """
        return pulumi.get(self, "severity_name")

    @severity_name.setter
    def severity_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source from which the information in this Detail was obtained.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceUpdateTime")
    def source_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        """
        return pulumi.get(self, "source_update_time")

    @source_update_time.setter
    def source_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_update_time", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vendor of the product.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


@pulumi.input_type
class DigestArgs:
    def __init__(__self__, *,
                 algo: Optional[pulumi.Input[str]] = None,
                 digest_bytes: Optional[pulumi.Input[str]] = None):
        """
        Digest information.
        :param pulumi.Input[str] algo: `SHA1`, `SHA512` etc.
        :param pulumi.Input[str] digest_bytes: Value of the digest.
        """
        if algo is not None:
            pulumi.set(__self__, "algo", algo)
        if digest_bytes is not None:
            pulumi.set(__self__, "digest_bytes", digest_bytes)

    @property
    @pulumi.getter
    def algo(self) -> Optional[pulumi.Input[str]]:
        """
        `SHA1`, `SHA512` etc.
        """
        return pulumi.get(self, "algo")

    @algo.setter
    def algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algo", value)

    @property
    @pulumi.getter(name="digestBytes")
    def digest_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the digest.
        """
        return pulumi.get(self, "digest_bytes")

    @digest_bytes.setter
    def digest_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_bytes", value)


@pulumi.input_type
class DiscoveredArgs:
    def __init__(__self__, *,
                 analysis_completed: Optional[pulumi.Input['AnalysisCompletedArgs']] = None,
                 analysis_error: Optional[pulumi.Input[Sequence[pulumi.Input['StatusArgs']]]] = None,
                 analysis_status: Optional[pulumi.Input['DiscoveredAnalysisStatus']] = None,
                 analysis_status_error: Optional[pulumi.Input['StatusArgs']] = None,
                 continuous_analysis: Optional[pulumi.Input['DiscoveredContinuousAnalysis']] = None,
                 last_analysis_time: Optional[pulumi.Input[str]] = None,
                 last_scan_time: Optional[pulumi.Input[str]] = None,
                 sbom_status: Optional[pulumi.Input['SBOMStatusArgs']] = None):
        """
        Provides information about the analysis status of a discovered resource.
        :param pulumi.Input[Sequence[pulumi.Input['StatusArgs']]] analysis_error: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
        :param pulumi.Input['DiscoveredAnalysisStatus'] analysis_status: The status of discovery for the resource.
        :param pulumi.Input['StatusArgs'] analysis_status_error: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
        :param pulumi.Input['DiscoveredContinuousAnalysis'] continuous_analysis: Whether the resource is continuously analyzed.
        :param pulumi.Input[str] last_analysis_time: The last time continuous analysis was done for this resource. Deprecated, do not use.
        :param pulumi.Input[str] last_scan_time: The last time this resource was scanned.
        :param pulumi.Input['SBOMStatusArgs'] sbom_status: The status of an SBOM generation.
        """
        if analysis_completed is not None:
            pulumi.set(__self__, "analysis_completed", analysis_completed)
        if analysis_error is not None:
            pulumi.set(__self__, "analysis_error", analysis_error)
        if analysis_status is not None:
            pulumi.set(__self__, "analysis_status", analysis_status)
        if analysis_status_error is not None:
            pulumi.set(__self__, "analysis_status_error", analysis_status_error)
        if continuous_analysis is not None:
            pulumi.set(__self__, "continuous_analysis", continuous_analysis)
        if last_analysis_time is not None:
            warnings.warn("""The last time continuous analysis was done for this resource. Deprecated, do not use.""", DeprecationWarning)
            pulumi.log.warn("""last_analysis_time is deprecated: The last time continuous analysis was done for this resource. Deprecated, do not use.""")
        if last_analysis_time is not None:
            pulumi.set(__self__, "last_analysis_time", last_analysis_time)
        if last_scan_time is not None:
            pulumi.set(__self__, "last_scan_time", last_scan_time)
        if sbom_status is not None:
            pulumi.set(__self__, "sbom_status", sbom_status)

    @property
    @pulumi.getter(name="analysisCompleted")
    def analysis_completed(self) -> Optional[pulumi.Input['AnalysisCompletedArgs']]:
        return pulumi.get(self, "analysis_completed")

    @analysis_completed.setter
    def analysis_completed(self, value: Optional[pulumi.Input['AnalysisCompletedArgs']]):
        pulumi.set(self, "analysis_completed", value)

    @property
    @pulumi.getter(name="analysisError")
    def analysis_error(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StatusArgs']]]]:
        """
        Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
        """
        return pulumi.get(self, "analysis_error")

    @analysis_error.setter
    def analysis_error(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StatusArgs']]]]):
        pulumi.set(self, "analysis_error", value)

    @property
    @pulumi.getter(name="analysisStatus")
    def analysis_status(self) -> Optional[pulumi.Input['DiscoveredAnalysisStatus']]:
        """
        The status of discovery for the resource.
        """
        return pulumi.get(self, "analysis_status")

    @analysis_status.setter
    def analysis_status(self, value: Optional[pulumi.Input['DiscoveredAnalysisStatus']]):
        pulumi.set(self, "analysis_status", value)

    @property
    @pulumi.getter(name="analysisStatusError")
    def analysis_status_error(self) -> Optional[pulumi.Input['StatusArgs']]:
        """
        When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
        """
        return pulumi.get(self, "analysis_status_error")

    @analysis_status_error.setter
    def analysis_status_error(self, value: Optional[pulumi.Input['StatusArgs']]):
        pulumi.set(self, "analysis_status_error", value)

    @property
    @pulumi.getter(name="continuousAnalysis")
    def continuous_analysis(self) -> Optional[pulumi.Input['DiscoveredContinuousAnalysis']]:
        """
        Whether the resource is continuously analyzed.
        """
        return pulumi.get(self, "continuous_analysis")

    @continuous_analysis.setter
    def continuous_analysis(self, value: Optional[pulumi.Input['DiscoveredContinuousAnalysis']]):
        pulumi.set(self, "continuous_analysis", value)

    @property
    @pulumi.getter(name="lastAnalysisTime")
    @_utilities.deprecated("""The last time continuous analysis was done for this resource. Deprecated, do not use.""")
    def last_analysis_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time continuous analysis was done for this resource. Deprecated, do not use.
        """
        return pulumi.get(self, "last_analysis_time")

    @last_analysis_time.setter
    def last_analysis_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_analysis_time", value)

    @property
    @pulumi.getter(name="lastScanTime")
    def last_scan_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this resource was scanned.
        """
        return pulumi.get(self, "last_scan_time")

    @last_scan_time.setter
    def last_scan_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_scan_time", value)

    @property
    @pulumi.getter(name="sbomStatus")
    def sbom_status(self) -> Optional[pulumi.Input['SBOMStatusArgs']]:
        """
        The status of an SBOM generation.
        """
        return pulumi.get(self, "sbom_status")

    @sbom_status.setter
    def sbom_status(self, value: Optional[pulumi.Input['SBOMStatusArgs']]):
        pulumi.set(self, "sbom_status", value)


@pulumi.input_type
class DiscoveryArgs:
    def __init__(__self__, *,
                 analysis_kind: pulumi.Input['DiscoveryAnalysisKind']):
        """
        A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
        :param pulumi.Input['DiscoveryAnalysisKind'] analysis_kind: Immutable. The kind of analysis that is handled by this discovery.
        """
        pulumi.set(__self__, "analysis_kind", analysis_kind)

    @property
    @pulumi.getter(name="analysisKind")
    def analysis_kind(self) -> pulumi.Input['DiscoveryAnalysisKind']:
        """
        Immutable. The kind of analysis that is handled by this discovery.
        """
        return pulumi.get(self, "analysis_kind")

    @analysis_kind.setter
    def analysis_kind(self, value: pulumi.Input['DiscoveryAnalysisKind']):
        pulumi.set(self, "analysis_kind", value)


@pulumi.input_type
class DistributionArgs:
    def __init__(__self__, *,
                 cpe_uri: pulumi.Input[str],
                 architecture: Optional[pulumi.Input['DistributionArchitecture']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 latest_version: Optional[pulumi.Input['VersionArgs']] = None,
                 maintainer: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
        :param pulumi.Input[str] cpe_uri: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
        :param pulumi.Input['DistributionArchitecture'] architecture: The CPU architecture for which packages in this distribution channel were built.
        :param pulumi.Input[str] description: The distribution channel-specific description of this package.
        :param pulumi.Input['VersionArgs'] latest_version: The latest available version of this package in this distribution channel.
        :param pulumi.Input[str] maintainer: A freeform string denoting the maintainer of this package.
        :param pulumi.Input[str] url: The distribution channel-specific homepage for this package.
        """
        pulumi.set(__self__, "cpe_uri", cpe_uri)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if maintainer is not None:
            pulumi.set(__self__, "maintainer", maintainer)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="cpeUri")
    def cpe_uri(self) -> pulumi.Input[str]:
        """
        The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input['DistributionArchitecture']]:
        """
        The CPU architecture for which packages in this distribution channel were built.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input['DistributionArchitecture']]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The distribution channel-specific description of this package.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input['VersionArgs']]:
        """
        The latest available version of this package in this distribution channel.
        """
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input['VersionArgs']]):
        pulumi.set(self, "latest_version", value)

    @property
    @pulumi.getter
    def maintainer(self) -> Optional[pulumi.Input[str]]:
        """
        A freeform string denoting the maintainer of this package.
        """
        return pulumi.get(self, "maintainer")

    @maintainer.setter
    def maintainer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintainer", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The distribution channel-specific homepage for this package.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DocumentNoteArgs:
    def __init__(__self__, *,
                 data_licence: Optional[pulumi.Input[str]] = None,
                 spdx_version: Optional[pulumi.Input[str]] = None):
        """
        DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
        :param pulumi.Input[str] data_licence: Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
        :param pulumi.Input[str] spdx_version: Provide a reference number that can be used to understand how to parse and interpret the rest of the file
        """
        if data_licence is not None:
            pulumi.set(__self__, "data_licence", data_licence)
        if spdx_version is not None:
            pulumi.set(__self__, "spdx_version", spdx_version)

    @property
    @pulumi.getter(name="dataLicence")
    def data_licence(self) -> Optional[pulumi.Input[str]]:
        """
        Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
        """
        return pulumi.get(self, "data_licence")

    @data_licence.setter
    def data_licence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_licence", value)

    @property
    @pulumi.getter(name="spdxVersion")
    def spdx_version(self) -> Optional[pulumi.Input[str]]:
        """
        Provide a reference number that can be used to understand how to parse and interpret the rest of the file
        """
        return pulumi.get(self, "spdx_version")

    @spdx_version.setter
    def spdx_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spdx_version", value)


@pulumi.input_type
class DocumentOccurrenceArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_comment: Optional[pulumi.Input[str]] = None,
                 creators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 document_comment: Optional[pulumi.Input[str]] = None,
                 external_document_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 license_list_version: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
        :param pulumi.Input[str] create_time: Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
        :param pulumi.Input[str] creator_comment: A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
        :param pulumi.Input[Sequence[pulumi.Input[str]]] creators: Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
        :param pulumi.Input[str] document_comment: A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_document_refs: Identify any external SPDX documents referenced within this SPDX document
        :param pulumi.Input[str] id: Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
        :param pulumi.Input[str] license_list_version: A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
        :param pulumi.Input[str] namespace: Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
        :param pulumi.Input[str] title: Identify name of this document as designated by creator
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_comment is not None:
            pulumi.set(__self__, "creator_comment", creator_comment)
        if creators is not None:
            pulumi.set(__self__, "creators", creators)
        if document_comment is not None:
            pulumi.set(__self__, "document_comment", document_comment)
        if external_document_refs is not None:
            pulumi.set(__self__, "external_document_refs", external_document_refs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_list_version is not None:
            pulumi.set(__self__, "license_list_version", license_list_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorComment")
    def creator_comment(self) -> Optional[pulumi.Input[str]]:
        """
        A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
        """
        return pulumi.get(self, "creator_comment")

    @creator_comment.setter
    def creator_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_comment", value)

    @property
    @pulumi.getter
    def creators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
        """
        return pulumi.get(self, "creators")

    @creators.setter
    def creators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "creators", value)

    @property
    @pulumi.getter(name="documentComment")
    def document_comment(self) -> Optional[pulumi.Input[str]]:
        """
        A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
        """
        return pulumi.get(self, "document_comment")

    @document_comment.setter
    def document_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_comment", value)

    @property
    @pulumi.getter(name="externalDocumentRefs")
    def external_document_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identify any external SPDX documents referenced within this SPDX document
        """
        return pulumi.get(self, "external_document_refs")

    @external_document_refs.setter
    def external_document_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_document_refs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="licenseListVersion")
    def license_list_version(self) -> Optional[pulumi.Input[str]]:
        """
        A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
        """
        return pulumi.get(self, "license_list_version")

    @license_list_version.setter
    def license_list_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_list_version", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Identify name of this document as designated by creator
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class EnvelopeSignatureArgs:
    def __init__(__self__, *,
                 keyid: Optional[pulumi.Input[str]] = None,
                 sig: Optional[pulumi.Input[str]] = None):
        if keyid is not None:
            pulumi.set(__self__, "keyid", keyid)
        if sig is not None:
            pulumi.set(__self__, "sig", sig)

    @property
    @pulumi.getter
    def keyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyid")

    @keyid.setter
    def keyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyid", value)

    @property
    @pulumi.getter
    def sig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sig")

    @sig.setter
    def sig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sig", value)


@pulumi.input_type
class EnvelopeArgs:
    def __init__(__self__, *,
                 payload: Optional[pulumi.Input[str]] = None,
                 payload_type: Optional[pulumi.Input[str]] = None,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]] = None):
        """
        MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
        """
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if payload_type is not None:
            pulumi.set(__self__, "payload_type", payload_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]]:
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]]):
        pulumi.set(self, "signatures", value)


@pulumi.input_type
class EnvironmentArgs:
    def __init__(__self__, *,
                 custom_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
        """
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_values", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ExternalRefArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input['ExternalRefCategory']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 locator: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
        :param pulumi.Input['ExternalRefCategory'] category: An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
        :param pulumi.Input[str] comment: Human-readable information about the purpose and target of the reference
        :param pulumi.Input[str] locator: The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
        :param pulumi.Input[str] type: Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['ExternalRefCategory']]:
        """
        An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['ExternalRefCategory']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable information about the purpose and target of the reference
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        """
        The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
        """
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FileHashesArgs:
    def __init__(__self__, *,
                 file_hash: pulumi.Input[Sequence[pulumi.Input['HashArgs']]]):
        """
        Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
        :param pulumi.Input[Sequence[pulumi.Input['HashArgs']]] file_hash: Collection of file hashes.
        """
        pulumi.set(__self__, "file_hash", file_hash)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> pulumi.Input[Sequence[pulumi.Input['HashArgs']]]:
        """
        Collection of file hashes.
        """
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: pulumi.Input[Sequence[pulumi.Input['HashArgs']]]):
        pulumi.set(self, "file_hash", value)


@pulumi.input_type
class FileNoteArgs:
    def __init__(__self__, *,
                 checksum: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 file_type: Optional[pulumi.Input['FileNoteFileType']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
        :param pulumi.Input[Sequence[pulumi.Input[str]]] checksum: Provide a unique identifier to match analysis information on each specific file in a package
        :param pulumi.Input['FileNoteFileType'] file_type: This field provides information about the type of file identified
        :param pulumi.Input[str] title: Identify the full path and filename that corresponds to the file information in this section
        """
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Provide a unique identifier to match analysis information on each specific file in a package
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input['FileNoteFileType']]:
        """
        This field provides information about the type of file identified
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input['FileNoteFileType']]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the full path and filename that corresponds to the file information in this section
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class FileOccurrenceArgs:
    def __init__(__self__, *,
                 attributions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 contributors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 copyright: Optional[pulumi.Input[str]] = None,
                 files_license_info: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 license_concluded: Optional[pulumi.Input['LicenseArgs']] = None,
                 notice: Optional[pulumi.Input[str]] = None):
        """
        FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attributions: This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
        :param pulumi.Input[str] comment: This field provides a place for the SPDX file creator to record any general comments about the file
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contributors: This field provides a place for the SPDX file creator to record file contributors
        :param pulumi.Input[str] copyright: Identify the copyright holder of the file, as well as any dates present
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files_license_info: This field contains the license information actually found in the file, if any
        :param pulumi.Input[str] id: Uniquely identify any element in an SPDX document which may be referenced by other elements
        :param pulumi.Input['LicenseArgs'] license_concluded: This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
        :param pulumi.Input[str] notice: This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
        """
        if attributions is not None:
            pulumi.set(__self__, "attributions", attributions)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if contributors is not None:
            pulumi.set(__self__, "contributors", contributors)
        if copyright is not None:
            pulumi.set(__self__, "copyright", copyright)
        if files_license_info is not None:
            pulumi.set(__self__, "files_license_info", files_license_info)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_concluded is not None:
            pulumi.set(__self__, "license_concluded", license_concluded)
        if notice is not None:
            pulumi.set(__self__, "notice", notice)

    @property
    @pulumi.getter
    def attributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
        """
        return pulumi.get(self, "attributions")

    @attributions.setter
    def attributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attributions", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        This field provides a place for the SPDX file creator to record any general comments about the file
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def contributors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This field provides a place for the SPDX file creator to record file contributors
        """
        return pulumi.get(self, "contributors")

    @contributors.setter
    def contributors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contributors", value)

    @property
    @pulumi.getter
    def copyright(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the copyright holder of the file, as well as any dates present
        """
        return pulumi.get(self, "copyright")

    @copyright.setter
    def copyright(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copyright", value)

    @property
    @pulumi.getter(name="filesLicenseInfo")
    def files_license_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This field contains the license information actually found in the file, if any
        """
        return pulumi.get(self, "files_license_info")

    @files_license_info.setter
    def files_license_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files_license_info", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Uniquely identify any element in an SPDX document which may be referenced by other elements
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="licenseConcluded")
    def license_concluded(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
        """
        return pulumi.get(self, "license_concluded")

    @license_concluded.setter
    def license_concluded(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license_concluded", value)

    @property
    @pulumi.getter
    def notice(self) -> Optional[pulumi.Input[str]]:
        """
        This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
        """
        return pulumi.get(self, "notice")

    @notice.setter
    def notice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice", value)


@pulumi.input_type
class FingerprintArgs:
    def __init__(__self__, *,
                 v1_name: pulumi.Input[str],
                 v2_blob: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        A set of properties that uniquely identify a given Docker image.
        :param pulumi.Input[str] v1_name: The layer ID of the final layer in the Docker image's v1 representation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] v2_blob: The ordered list of v2 blobs that represent a given image.
        """
        pulumi.set(__self__, "v1_name", v1_name)
        pulumi.set(__self__, "v2_blob", v2_blob)

    @property
    @pulumi.getter(name="v1Name")
    def v1_name(self) -> pulumi.Input[str]:
        """
        The layer ID of the final layer in the Docker image's v1 representation.
        """
        return pulumi.get(self, "v1_name")

    @v1_name.setter
    def v1_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "v1_name", value)

    @property
    @pulumi.getter(name="v2Blob")
    def v2_blob(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ordered list of v2 blobs that represent a given image.
        """
        return pulumi.get(self, "v2_blob")

    @v2_blob.setter
    def v2_blob(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "v2_blob", value)


@pulumi.input_type
class GenericSignedAttestationArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input['GenericSignedAttestationContentType']] = None,
                 serialized_payload: Optional[pulumi.Input[str]] = None,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['SignatureArgs']]]] = None):
        """
        An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
        :param pulumi.Input['GenericSignedAttestationContentType'] content_type: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
        :param pulumi.Input[str] serialized_payload: The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
        :param pulumi.Input[Sequence[pulumi.Input['SignatureArgs']]] signatures: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
        """
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if serialized_payload is not None:
            pulumi.set(__self__, "serialized_payload", serialized_payload)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['GenericSignedAttestationContentType']]:
        """
        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['GenericSignedAttestationContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="serializedPayload")
    def serialized_payload(self) -> Optional[pulumi.Input[str]]:
        """
        The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
        """
        return pulumi.get(self, "serialized_payload")

    @serialized_payload.setter
    def serialized_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serialized_payload", value)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SignatureArgs']]]]:
        """
        One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
        """
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SignatureArgs']]]]):
        pulumi.set(self, "signatures", value)


@pulumi.input_type
class GerritSourceContextArgs:
    def __init__(__self__, *,
                 alias_context: Optional[pulumi.Input['AliasContextArgs']] = None,
                 gerrit_project: Optional[pulumi.Input[str]] = None,
                 host_uri: Optional[pulumi.Input[str]] = None,
                 revision_id: Optional[pulumi.Input[str]] = None):
        """
        A SourceContext referring to a Gerrit project.
        :param pulumi.Input['AliasContextArgs'] alias_context: An alias, which may be a branch or tag.
        :param pulumi.Input[str] gerrit_project: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
        :param pulumi.Input[str] host_uri: The URI of a running Gerrit instance.
        :param pulumi.Input[str] revision_id: A revision (commit) ID.
        """
        if alias_context is not None:
            pulumi.set(__self__, "alias_context", alias_context)
        if gerrit_project is not None:
            pulumi.set(__self__, "gerrit_project", gerrit_project)
        if host_uri is not None:
            pulumi.set(__self__, "host_uri", host_uri)
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)

    @property
    @pulumi.getter(name="aliasContext")
    def alias_context(self) -> Optional[pulumi.Input['AliasContextArgs']]:
        """
        An alias, which may be a branch or tag.
        """
        return pulumi.get(self, "alias_context")

    @alias_context.setter
    def alias_context(self, value: Optional[pulumi.Input['AliasContextArgs']]):
        pulumi.set(self, "alias_context", value)

    @property
    @pulumi.getter(name="gerritProject")
    def gerrit_project(self) -> Optional[pulumi.Input[str]]:
        """
        The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
        """
        return pulumi.get(self, "gerrit_project")

    @gerrit_project.setter
    def gerrit_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gerrit_project", value)

    @property
    @pulumi.getter(name="hostUri")
    def host_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of a running Gerrit instance.
        """
        return pulumi.get(self, "host_uri")

    @host_uri.setter
    def host_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_uri", value)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        A revision (commit) ID.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)


@pulumi.input_type
class GitSourceContextArgs:
    def __init__(__self__, *,
                 revision_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
        :param pulumi.Input[str] revision_id: Git commit hash.
        :param pulumi.Input[str] url: Git repository URL.
        """
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        Git commit hash.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Git repository URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GrafeasV1beta1BuildDetailsArgs:
    def __init__(__self__, *,
                 provenance: pulumi.Input['BuildProvenanceArgs'],
                 in_toto_slsa_provenance_v1: Optional[pulumi.Input['InTotoSlsaProvenanceV1Args']] = None,
                 provenance_bytes: Optional[pulumi.Input[str]] = None):
        """
        Details of a build occurrence.
        :param pulumi.Input['BuildProvenanceArgs'] provenance: The actual provenance for the build.
        :param pulumi.Input[str] provenance_bytes: Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
        """
        pulumi.set(__self__, "provenance", provenance)
        if in_toto_slsa_provenance_v1 is not None:
            pulumi.set(__self__, "in_toto_slsa_provenance_v1", in_toto_slsa_provenance_v1)
        if provenance_bytes is not None:
            pulumi.set(__self__, "provenance_bytes", provenance_bytes)

    @property
    @pulumi.getter
    def provenance(self) -> pulumi.Input['BuildProvenanceArgs']:
        """
        The actual provenance for the build.
        """
        return pulumi.get(self, "provenance")

    @provenance.setter
    def provenance(self, value: pulumi.Input['BuildProvenanceArgs']):
        pulumi.set(self, "provenance", value)

    @property
    @pulumi.getter(name="inTotoSlsaProvenanceV1")
    def in_toto_slsa_provenance_v1(self) -> Optional[pulumi.Input['InTotoSlsaProvenanceV1Args']]:
        return pulumi.get(self, "in_toto_slsa_provenance_v1")

    @in_toto_slsa_provenance_v1.setter
    def in_toto_slsa_provenance_v1(self, value: Optional[pulumi.Input['InTotoSlsaProvenanceV1Args']]):
        pulumi.set(self, "in_toto_slsa_provenance_v1", value)

    @property
    @pulumi.getter(name="provenanceBytes")
    def provenance_bytes(self) -> Optional[pulumi.Input[str]]:
        """
        Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
        """
        return pulumi.get(self, "provenance_bytes")

    @provenance_bytes.setter
    def provenance_bytes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provenance_bytes", value)


@pulumi.input_type
class GrafeasV1beta1DeploymentDetailsArgs:
    def __init__(__self__, *,
                 deployment: pulumi.Input['DeploymentArgs']):
        """
        Details of a deployment occurrence.
        :param pulumi.Input['DeploymentArgs'] deployment: Deployment history for the resource.
        """
        pulumi.set(__self__, "deployment", deployment)

    @property
    @pulumi.getter
    def deployment(self) -> pulumi.Input['DeploymentArgs']:
        """
        Deployment history for the resource.
        """
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: pulumi.Input['DeploymentArgs']):
        pulumi.set(self, "deployment", value)


@pulumi.input_type
class GrafeasV1beta1DiscoveryDetailsArgs:
    def __init__(__self__, *,
                 discovered: pulumi.Input['DiscoveredArgs']):
        """
        Details of a discovery occurrence.
        :param pulumi.Input['DiscoveredArgs'] discovered: Analysis status for the discovered resource.
        """
        pulumi.set(__self__, "discovered", discovered)

    @property
    @pulumi.getter
    def discovered(self) -> pulumi.Input['DiscoveredArgs']:
        """
        Analysis status for the discovered resource.
        """
        return pulumi.get(self, "discovered")

    @discovered.setter
    def discovered(self, value: pulumi.Input['DiscoveredArgs']):
        pulumi.set(self, "discovered", value)


@pulumi.input_type
class GrafeasV1beta1ImageDetailsArgs:
    def __init__(__self__, *,
                 derived_image: pulumi.Input['DerivedArgs']):
        """
        Details of an image occurrence.
        :param pulumi.Input['DerivedArgs'] derived_image: Immutable. The child image derived from the base image.
        """
        pulumi.set(__self__, "derived_image", derived_image)

    @property
    @pulumi.getter(name="derivedImage")
    def derived_image(self) -> pulumi.Input['DerivedArgs']:
        """
        Immutable. The child image derived from the base image.
        """
        return pulumi.get(self, "derived_image")

    @derived_image.setter
    def derived_image(self, value: pulumi.Input['DerivedArgs']):
        pulumi.set(self, "derived_image", value)


@pulumi.input_type
class GrafeasV1beta1IntotoArtifactArgs:
    def __init__(__self__, *,
                 hashes: Optional[pulumi.Input['ArtifactHashesArgs']] = None,
                 resource_uri: Optional[pulumi.Input[str]] = None):
        if hashes is not None:
            pulumi.set(__self__, "hashes", hashes)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)

    @property
    @pulumi.getter
    def hashes(self) -> Optional[pulumi.Input['ArtifactHashesArgs']]:
        return pulumi.get(self, "hashes")

    @hashes.setter
    def hashes(self, value: Optional[pulumi.Input['ArtifactHashesArgs']]):
        pulumi.set(self, "hashes", value)

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_uri")

    @resource_uri.setter
    def resource_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_uri", value)


@pulumi.input_type
class GrafeasV1beta1IntotoDetailsArgs:
    def __init__(__self__, *,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoSignatureArgs']]]] = None,
                 signed: Optional[pulumi.Input['LinkArgs']] = None):
        """
        This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
        """
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)
        if signed is not None:
            pulumi.set(__self__, "signed", signed)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoSignatureArgs']]]]:
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoSignatureArgs']]]]):
        pulumi.set(self, "signatures", value)

    @property
    @pulumi.getter
    def signed(self) -> Optional[pulumi.Input['LinkArgs']]:
        return pulumi.get(self, "signed")

    @signed.setter
    def signed(self, value: Optional[pulumi.Input['LinkArgs']]):
        pulumi.set(self, "signed", value)


@pulumi.input_type
class GrafeasV1beta1IntotoSignatureArgs:
    def __init__(__self__, *,
                 keyid: Optional[pulumi.Input[str]] = None,
                 sig: Optional[pulumi.Input[str]] = None):
        """
        A signature object consists of the KeyID used and the signature itself.
        """
        if keyid is not None:
            pulumi.set(__self__, "keyid", keyid)
        if sig is not None:
            pulumi.set(__self__, "sig", sig)

    @property
    @pulumi.getter
    def keyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyid")

    @keyid.setter
    def keyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyid", value)

    @property
    @pulumi.getter
    def sig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sig")

    @sig.setter
    def sig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sig", value)


@pulumi.input_type
class GrafeasV1beta1PackageDetailsArgs:
    def __init__(__self__, *,
                 installation: pulumi.Input['InstallationArgs']):
        """
        Details of a package occurrence.
        :param pulumi.Input['InstallationArgs'] installation: Where the package was installed.
        """
        pulumi.set(__self__, "installation", installation)

    @property
    @pulumi.getter
    def installation(self) -> pulumi.Input['InstallationArgs']:
        """
        Where the package was installed.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: pulumi.Input['InstallationArgs']):
        pulumi.set(self, "installation", value)


@pulumi.input_type
class GrafeasV1beta1VulnerabilityDetailsArgs:
    def __init__(__self__, *,
                 package_issue: pulumi.Input[Sequence[pulumi.Input['PackageIssueArgs']]],
                 cvss_v2: Optional[pulumi.Input['CVSSArgs']] = None,
                 cvss_v3: Optional[pulumi.Input['CVSSArgs']] = None,
                 effective_severity: Optional[pulumi.Input['GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity']] = None,
                 extra_details: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vex_assessment: Optional[pulumi.Input['VexAssessmentArgs']] = None):
        """
        Details of a vulnerability Occurrence.
        :param pulumi.Input[Sequence[pulumi.Input['PackageIssueArgs']]] package_issue: The set of affected locations and their fixes (if available) within the associated resource.
        :param pulumi.Input['CVSSArgs'] cvss_v2: The cvss v2 score for the vulnerability.
        :param pulumi.Input['CVSSArgs'] cvss_v3: The cvss v3 score for the vulnerability.
        :param pulumi.Input['GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity'] effective_severity: The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
        :param pulumi.Input[str] extra_details: Occurrence-specific extra details about the vulnerability.
        :param pulumi.Input[str] type: The type of package; whether native or non native(ruby gems, node.js packages etc)
        """
        pulumi.set(__self__, "package_issue", package_issue)
        if cvss_v2 is not None:
            pulumi.set(__self__, "cvss_v2", cvss_v2)
        if cvss_v3 is not None:
            pulumi.set(__self__, "cvss_v3", cvss_v3)
        if effective_severity is not None:
            pulumi.set(__self__, "effective_severity", effective_severity)
        if extra_details is not None:
            pulumi.set(__self__, "extra_details", extra_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vex_assessment is not None:
            pulumi.set(__self__, "vex_assessment", vex_assessment)

    @property
    @pulumi.getter(name="packageIssue")
    def package_issue(self) -> pulumi.Input[Sequence[pulumi.Input['PackageIssueArgs']]]:
        """
        The set of affected locations and their fixes (if available) within the associated resource.
        """
        return pulumi.get(self, "package_issue")

    @package_issue.setter
    def package_issue(self, value: pulumi.Input[Sequence[pulumi.Input['PackageIssueArgs']]]):
        pulumi.set(self, "package_issue", value)

    @property
    @pulumi.getter(name="cvssV2")
    def cvss_v2(self) -> Optional[pulumi.Input['CVSSArgs']]:
        """
        The cvss v2 score for the vulnerability.
        """
        return pulumi.get(self, "cvss_v2")

    @cvss_v2.setter
    def cvss_v2(self, value: Optional[pulumi.Input['CVSSArgs']]):
        pulumi.set(self, "cvss_v2", value)

    @property
    @pulumi.getter(name="cvssV3")
    def cvss_v3(self) -> Optional[pulumi.Input['CVSSArgs']]:
        """
        The cvss v3 score for the vulnerability.
        """
        return pulumi.get(self, "cvss_v3")

    @cvss_v3.setter
    def cvss_v3(self, value: Optional[pulumi.Input['CVSSArgs']]):
        pulumi.set(self, "cvss_v3", value)

    @property
    @pulumi.getter(name="effectiveSeverity")
    def effective_severity(self) -> Optional[pulumi.Input['GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity']]:
        """
        The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
        """
        return pulumi.get(self, "effective_severity")

    @effective_severity.setter
    def effective_severity(self, value: Optional[pulumi.Input['GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity']]):
        pulumi.set(self, "effective_severity", value)

    @property
    @pulumi.getter(name="extraDetails")
    def extra_details(self) -> Optional[pulumi.Input[str]]:
        """
        Occurrence-specific extra details about the vulnerability.
        """
        return pulumi.get(self, "extra_details")

    @extra_details.setter
    def extra_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_details", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of package; whether native or non native(ruby gems, node.js packages etc)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vexAssessment")
    def vex_assessment(self) -> Optional[pulumi.Input['VexAssessmentArgs']]:
        return pulumi.get(self, "vex_assessment")

    @vex_assessment.setter
    def vex_assessment(self, value: Optional[pulumi.Input['VexAssessmentArgs']]):
        pulumi.set(self, "vex_assessment", value)


@pulumi.input_type
class HashArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['HashType'],
                 value: pulumi.Input[str]):
        """
        Container message for hash values.
        :param pulumi.Input['HashType'] type: The type of hash that was performed.
        :param pulumi.Input[str] value: The hash value.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['HashType']:
        """
        The type of hash that was performed.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['HashType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The hash value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HintArgs:
    def __init__(__self__, *,
                 human_readable_name: pulumi.Input[str]):
        """
        This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
        :param pulumi.Input[str] human_readable_name: The human readable name of this attestation authority, for example "qa".
        """
        pulumi.set(__self__, "human_readable_name", human_readable_name)

    @property
    @pulumi.getter(name="humanReadableName")
    def human_readable_name(self) -> pulumi.Input[str]:
        """
        The human readable name of this attestation authority, for example "qa".
        """
        return pulumi.get(self, "human_readable_name")

    @human_readable_name.setter
    def human_readable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "human_readable_name", value)


@pulumi.input_type
class InTotoSlsaProvenanceV1Args:
    def __init__(__self__, *,
                 predicate: Optional[pulumi.Input['SlsaProvenanceV1Args']] = None,
                 predicate_type: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
        """
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)
        if predicate_type is not None:
            pulumi.set(__self__, "predicate_type", predicate_type)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input['SlsaProvenanceV1Args']]:
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input['SlsaProvenanceV1Args']]):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter(name="predicateType")
    def predicate_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "predicate_type")

    @predicate_type.setter
    def predicate_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predicate_type", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InTotoArgs:
    def __init__(__self__, *,
                 expected_command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expected_materials: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]] = None,
                 expected_products: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]] = None,
                 signing_keys: Optional[pulumi.Input[Sequence[pulumi.Input['SigningKeyArgs']]]] = None,
                 step_name: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[str]] = None):
        """
        This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expected_command: This field contains the expected command used to perform the step.
        :param pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]] expected_materials: The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
        :param pulumi.Input[Sequence[pulumi.Input['SigningKeyArgs']]] signing_keys: This field contains the public keys that can be used to verify the signatures on the step metadata.
        :param pulumi.Input[str] step_name: This field identifies the name of the step in the supply chain.
        :param pulumi.Input[str] threshold: This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
        """
        if expected_command is not None:
            pulumi.set(__self__, "expected_command", expected_command)
        if expected_materials is not None:
            pulumi.set(__self__, "expected_materials", expected_materials)
        if expected_products is not None:
            pulumi.set(__self__, "expected_products", expected_products)
        if signing_keys is not None:
            pulumi.set(__self__, "signing_keys", signing_keys)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="expectedCommand")
    def expected_command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This field contains the expected command used to perform the step.
        """
        return pulumi.get(self, "expected_command")

    @expected_command.setter
    def expected_command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expected_command", value)

    @property
    @pulumi.getter(name="expectedMaterials")
    def expected_materials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]]:
        """
        The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
        """
        return pulumi.get(self, "expected_materials")

    @expected_materials.setter
    def expected_materials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]]):
        pulumi.set(self, "expected_materials", value)

    @property
    @pulumi.getter(name="expectedProducts")
    def expected_products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]]:
        return pulumi.get(self, "expected_products")

    @expected_products.setter
    def expected_products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArtifactRuleArgs']]]]):
        pulumi.set(self, "expected_products", value)

    @property
    @pulumi.getter(name="signingKeys")
    def signing_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SigningKeyArgs']]]]:
        """
        This field contains the public keys that can be used to verify the signatures on the step metadata.
        """
        return pulumi.get(self, "signing_keys")

    @signing_keys.setter
    def signing_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SigningKeyArgs']]]]):
        pulumi.set(self, "signing_keys", value)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[pulumi.Input[str]]:
        """
        This field identifies the name of the step in the supply chain.
        """
        return pulumi.get(self, "step_name")

    @step_name.setter
    def step_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_name", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[str]]:
        """
        This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class InstallationArgs:
    def __init__(__self__, *,
                 license: Optional[pulumi.Input['LicenseArgs']] = None,
                 location: Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]] = None):
        """
        This represents how a particular software package may be installed on a system.
        :param pulumi.Input['LicenseArgs'] license: Licenses that have been declared by the authors of the package.
        :param pulumi.Input[Sequence[pulumi.Input['LocationArgs']]] location: All of the places within the filesystem versions of this package have been found.
        """
        if license is not None:
            pulumi.set(__self__, "license", license)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        Licenses that have been declared by the authors of the package.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]]:
        """
        All of the places within the filesystem versions of this package have been found.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class JustificationArgs:
    def __init__(__self__, *,
                 details: Optional[pulumi.Input[str]] = None,
                 justification_type: Optional[pulumi.Input['JustificationJustificationType']] = None):
        """
        Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        :param pulumi.Input[str] details: Additional details on why this justification was chosen.
        :param pulumi.Input['JustificationJustificationType'] justification_type: The justification type for this vulnerability.
        """
        if details is not None:
            pulumi.set(__self__, "details", details)
        if justification_type is not None:
            pulumi.set(__self__, "justification_type", justification_type)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        """
        Additional details on why this justification was chosen.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="justificationType")
    def justification_type(self) -> Optional[pulumi.Input['JustificationJustificationType']]:
        """
        The justification type for this vulnerability.
        """
        return pulumi.get(self, "justification_type")

    @justification_type.setter
    def justification_type(self, value: Optional[pulumi.Input['JustificationJustificationType']]):
        pulumi.set(self, "justification_type", value)


@pulumi.input_type
class KnowledgeBaseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The KB name (generally of the form KB[0-9]+ i.e. KB123456).
        :param pulumi.Input[str] url: A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The KB name (generally of the form KB[0-9]+ i.e. KB123456).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class LayerArgs:
    def __init__(__self__, *,
                 directive: pulumi.Input['LayerDirective'],
                 arguments: Optional[pulumi.Input[str]] = None):
        """
        Layer holds metadata specific to a layer of a Docker image.
        :param pulumi.Input['LayerDirective'] directive: The recovered Dockerfile directive used to construct this layer.
        :param pulumi.Input[str] arguments: The recovered arguments to the Dockerfile directive.
        """
        pulumi.set(__self__, "directive", directive)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)

    @property
    @pulumi.getter
    def directive(self) -> pulumi.Input['LayerDirective']:
        """
        The recovered Dockerfile directive used to construct this layer.
        """
        return pulumi.get(self, "directive")

    @directive.setter
    def directive(self, value: pulumi.Input['LayerDirective']):
        pulumi.set(self, "directive", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        The recovered arguments to the Dockerfile directive.
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)


@pulumi.input_type
class LicenseArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None):
        """
        License information.
        :param pulumi.Input[str] comments: Comments
        :param pulumi.Input[str] expression: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comments
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class LinkArgs:
    def __init__(__self__, *,
                 byproducts: Optional[pulumi.Input['ByProductsArgs']] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input['EnvironmentArgs']] = None,
                 materials: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]] = None,
                 products: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]] = None):
        """
        This corresponds to an in-toto link.
        :param pulumi.Input['ByProductsArgs'] byproducts: ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
        :param pulumi.Input['EnvironmentArgs'] environment: This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
        :param pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]] materials: Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
        :param pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]] products: Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
        """
        if byproducts is not None:
            pulumi.set(__self__, "byproducts", byproducts)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if materials is not None:
            pulumi.set(__self__, "materials", materials)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter
    def byproducts(self) -> Optional[pulumi.Input['ByProductsArgs']]:
        """
        ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
        """
        return pulumi.get(self, "byproducts")

    @byproducts.setter
    def byproducts(self, value: Optional[pulumi.Input['ByProductsArgs']]):
        pulumi.set(self, "byproducts", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['EnvironmentArgs']]:
        """
        This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['EnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def materials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]]:
        """
        Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
        """
        return pulumi.get(self, "materials")

    @materials.setter
    def materials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]]):
        pulumi.set(self, "materials", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]]:
        """
        Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GrafeasV1beta1IntotoArtifactArgs']]]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class LocationArgs:
    def __init__(__self__, *,
                 cpe_uri: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input['VersionArgs']] = None):
        """
        An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
        :param pulumi.Input[str] cpe_uri: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
        :param pulumi.Input[str] path: The path from which we gathered that this package/version is installed.
        :param pulumi.Input['VersionArgs'] version: Deprecated. The version installed at this location.
        """
        if cpe_uri is not None:
            warnings.warn("""Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.""", DeprecationWarning)
            pulumi.log.warn("""cpe_uri is deprecated: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.""")
        if cpe_uri is not None:
            pulumi.set(__self__, "cpe_uri", cpe_uri)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if version is not None:
            warnings.warn("""Deprecated. The version installed at this location.""", DeprecationWarning)
            pulumi.log.warn("""version is deprecated: Deprecated. The version installed at this location.""")
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cpeUri")
    @_utilities.deprecated("""Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.""")
    def cpe_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path from which we gathered that this package/version is installed.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated. The version installed at this location.""")
    def version(self) -> Optional[pulumi.Input['VersionArgs']]:
        """
        Deprecated. The version installed at this location.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['VersionArgs']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PackageInfoNoteArgs:
    def __init__(__self__, *,
                 analyzed: Optional[pulumi.Input[bool]] = None,
                 attribution: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 copyright: Optional[pulumi.Input[str]] = None,
                 detailed_description: Optional[pulumi.Input[str]] = None,
                 download_location: Optional[pulumi.Input[str]] = None,
                 external_refs: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalRefArgs']]]] = None,
                 files_license_info: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 home_page: Optional[pulumi.Input[str]] = None,
                 license_declared: Optional[pulumi.Input['LicenseArgs']] = None,
                 originator: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 summary_description: Optional[pulumi.Input[str]] = None,
                 supplier: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 verification_code: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
        :param pulumi.Input[bool] analyzed: Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
        :param pulumi.Input[str] attribution: A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
        :param pulumi.Input[str] checksum: Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
        :param pulumi.Input[str] copyright: Identify the copyright holders of the package, as well as any dates present
        :param pulumi.Input[str] detailed_description: A more detailed description of the package
        :param pulumi.Input[str] download_location: This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
        :param pulumi.Input[Sequence[pulumi.Input['ExternalRefArgs']]] external_refs: ExternalRef
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files_license_info: Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
        :param pulumi.Input[str] home_page: Provide a place for the SPDX file creator to record a web site that serves as the package's home page
        :param pulumi.Input['LicenseArgs'] license_declared: List the licenses that have been declared by the authors of the package
        :param pulumi.Input[str] originator: If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
        :param pulumi.Input[str] package_type: The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
        :param pulumi.Input[str] summary_description: A short description of the package
        :param pulumi.Input[str] supplier: Identify the actual distribution source for the package/directory identified in the SPDX file
        :param pulumi.Input[str] title: Identify the full name of the package as given by the Package Originator
        :param pulumi.Input[str] verification_code: This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
        :param pulumi.Input[str] version: Identify the version of the package
        """
        if analyzed is not None:
            pulumi.set(__self__, "analyzed", analyzed)
        if attribution is not None:
            pulumi.set(__self__, "attribution", attribution)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if copyright is not None:
            pulumi.set(__self__, "copyright", copyright)
        if detailed_description is not None:
            pulumi.set(__self__, "detailed_description", detailed_description)
        if download_location is not None:
            pulumi.set(__self__, "download_location", download_location)
        if external_refs is not None:
            pulumi.set(__self__, "external_refs", external_refs)
        if files_license_info is not None:
            pulumi.set(__self__, "files_license_info", files_license_info)
        if home_page is not None:
            pulumi.set(__self__, "home_page", home_page)
        if license_declared is not None:
            pulumi.set(__self__, "license_declared", license_declared)
        if originator is not None:
            pulumi.set(__self__, "originator", originator)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if summary_description is not None:
            pulumi.set(__self__, "summary_description", summary_description)
        if supplier is not None:
            pulumi.set(__self__, "supplier", supplier)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if verification_code is not None:
            pulumi.set(__self__, "verification_code", verification_code)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def analyzed(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
        """
        return pulumi.get(self, "analyzed")

    @analyzed.setter
    def analyzed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "analyzed", value)

    @property
    @pulumi.getter
    def attribution(self) -> Optional[pulumi.Input[str]]:
        """
        A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
        """
        return pulumi.get(self, "attribution")

    @attribution.setter
    def attribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribution", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        """
        Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
        """
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def copyright(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the copyright holders of the package, as well as any dates present
        """
        return pulumi.get(self, "copyright")

    @copyright.setter
    def copyright(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copyright", value)

    @property
    @pulumi.getter(name="detailedDescription")
    def detailed_description(self) -> Optional[pulumi.Input[str]]:
        """
        A more detailed description of the package
        """
        return pulumi.get(self, "detailed_description")

    @detailed_description.setter
    def detailed_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detailed_description", value)

    @property
    @pulumi.getter(name="downloadLocation")
    def download_location(self) -> Optional[pulumi.Input[str]]:
        """
        This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
        """
        return pulumi.get(self, "download_location")

    @download_location.setter
    def download_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_location", value)

    @property
    @pulumi.getter(name="externalRefs")
    def external_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalRefArgs']]]]:
        """
        ExternalRef
        """
        return pulumi.get(self, "external_refs")

    @external_refs.setter
    def external_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalRefArgs']]]]):
        pulumi.set(self, "external_refs", value)

    @property
    @pulumi.getter(name="filesLicenseInfo")
    def files_license_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
        """
        return pulumi.get(self, "files_license_info")

    @files_license_info.setter
    def files_license_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files_license_info", value)

    @property
    @pulumi.getter(name="homePage")
    def home_page(self) -> Optional[pulumi.Input[str]]:
        """
        Provide a place for the SPDX file creator to record a web site that serves as the package's home page
        """
        return pulumi.get(self, "home_page")

    @home_page.setter
    def home_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_page", value)

    @property
    @pulumi.getter(name="licenseDeclared")
    def license_declared(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        List the licenses that have been declared by the authors of the package
        """
        return pulumi.get(self, "license_declared")

    @license_declared.setter
    def license_declared(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license_declared", value)

    @property
    @pulumi.getter
    def originator(self) -> Optional[pulumi.Input[str]]:
        """
        If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
        """
        return pulumi.get(self, "originator")

    @originator.setter
    def originator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "originator", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="summaryDescription")
    def summary_description(self) -> Optional[pulumi.Input[str]]:
        """
        A short description of the package
        """
        return pulumi.get(self, "summary_description")

    @summary_description.setter
    def summary_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_description", value)

    @property
    @pulumi.getter
    def supplier(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the actual distribution source for the package/directory identified in the SPDX file
        """
        return pulumi.get(self, "supplier")

    @supplier.setter
    def supplier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supplier", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the full name of the package as given by the Package Originator
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="verificationCode")
    def verification_code(self) -> Optional[pulumi.Input[str]]:
        """
        This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
        """
        return pulumi.get(self, "verification_code")

    @verification_code.setter
    def verification_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verification_code", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Identify the version of the package
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PackageInfoOccurrenceArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 license_concluded: Optional[pulumi.Input['LicenseArgs']] = None,
                 source_info: Optional[pulumi.Input[str]] = None):
        """
        PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
        :param pulumi.Input[str] comment: A place for the SPDX file creator to record any general comments about the package being described
        :param pulumi.Input[str] filename: Provide the actual file name of the package, or path of the directory being treated as a package
        :param pulumi.Input[str] id: Uniquely identify any element in an SPDX document which may be referenced by other elements
        :param pulumi.Input['LicenseArgs'] license_concluded: package or alternative values, if the governing license cannot be determined
        :param pulumi.Input[str] source_info: Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_concluded is not None:
            pulumi.set(__self__, "license_concluded", license_concluded)
        if source_info is not None:
            pulumi.set(__self__, "source_info", source_info)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A place for the SPDX file creator to record any general comments about the package being described
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        Provide the actual file name of the package, or path of the directory being treated as a package
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Uniquely identify any element in an SPDX document which may be referenced by other elements
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="licenseConcluded")
    def license_concluded(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        package or alternative values, if the governing license cannot be determined
        """
        return pulumi.get(self, "license_concluded")

    @license_concluded.setter
    def license_concluded(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license_concluded", value)

    @property
    @pulumi.getter(name="sourceInfo")
    def source_info(self) -> Optional[pulumi.Input[str]]:
        """
        Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
        """
        return pulumi.get(self, "source_info")

    @source_info.setter
    def source_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_info", value)


@pulumi.input_type
class PackageIssueArgs:
    def __init__(__self__, *,
                 affected_location: pulumi.Input['VulnerabilityLocationArgs'],
                 fixed_location: Optional[pulumi.Input['VulnerabilityLocationArgs']] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 severity_name: Optional[pulumi.Input[str]] = None):
        """
        This message wraps a location affected by a vulnerability and its associated fix (if one is available).
        :param pulumi.Input['VulnerabilityLocationArgs'] affected_location: The location of the vulnerability.
        :param pulumi.Input['VulnerabilityLocationArgs'] fixed_location: The location of the available fix for vulnerability.
        :param pulumi.Input[str] package_type: The type of package (e.g. OS, MAVEN, GO).
        :param pulumi.Input[str] severity_name: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
        """
        pulumi.set(__self__, "affected_location", affected_location)
        if fixed_location is not None:
            pulumi.set(__self__, "fixed_location", fixed_location)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if severity_name is not None:
            warnings.warn("""Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.""", DeprecationWarning)
            pulumi.log.warn("""severity_name is deprecated: Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.""")
        if severity_name is not None:
            pulumi.set(__self__, "severity_name", severity_name)

    @property
    @pulumi.getter(name="affectedLocation")
    def affected_location(self) -> pulumi.Input['VulnerabilityLocationArgs']:
        """
        The location of the vulnerability.
        """
        return pulumi.get(self, "affected_location")

    @affected_location.setter
    def affected_location(self, value: pulumi.Input['VulnerabilityLocationArgs']):
        pulumi.set(self, "affected_location", value)

    @property
    @pulumi.getter(name="fixedLocation")
    def fixed_location(self) -> Optional[pulumi.Input['VulnerabilityLocationArgs']]:
        """
        The location of the available fix for vulnerability.
        """
        return pulumi.get(self, "fixed_location")

    @fixed_location.setter
    def fixed_location(self, value: Optional[pulumi.Input['VulnerabilityLocationArgs']]):
        pulumi.set(self, "fixed_location", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of package (e.g. OS, MAVEN, GO).
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="severityName")
    @_utilities.deprecated("""Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.""")
    def severity_name(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
        """
        return pulumi.get(self, "severity_name")

    @severity_name.setter
    def severity_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_name", value)


@pulumi.input_type
class PackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 architecture: Optional[pulumi.Input['PackageArchitecture']] = None,
                 cpe_uri: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[Sequence[pulumi.Input['DigestArgs']]]] = None,
                 distribution: Optional[pulumi.Input[Sequence[pulumi.Input['DistributionArgs']]]] = None,
                 license: Optional[pulumi.Input['LicenseArgs']] = None,
                 maintainer: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input['VersionArgs']] = None):
        """
        Package represents a particular package version.
        :param pulumi.Input[str] name: Immutable. The name of the package.
        :param pulumi.Input['PackageArchitecture'] architecture: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
        :param pulumi.Input[str] cpe_uri: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
        :param pulumi.Input[str] description: The description of this package.
        :param pulumi.Input[Sequence[pulumi.Input['DigestArgs']]] digest: Hash value, typically a file digest, that allows unique identification a specific package.
        :param pulumi.Input[Sequence[pulumi.Input['DistributionArgs']]] distribution: The various channels by which a package is distributed.
        :param pulumi.Input['LicenseArgs'] license: Licenses that have been declared by the authors of the package.
        :param pulumi.Input[str] maintainer: A freeform text denoting the maintainer of this package.
        :param pulumi.Input[str] package_type: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
        :param pulumi.Input[str] url: The homepage for this package.
        :param pulumi.Input['VersionArgs'] version: The version of the package.
        """
        pulumi.set(__self__, "name", name)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cpe_uri is not None:
            pulumi.set(__self__, "cpe_uri", cpe_uri)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if maintainer is not None:
            pulumi.set(__self__, "maintainer", maintainer)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Immutable. The name of the package.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input['PackageArchitecture']]:
        """
        The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input['PackageArchitecture']]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="cpeUri")
    def cpe_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this package.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DigestArgs']]]]:
        """
        Hash value, typically a file digest, that allows unique identification a specific package.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DigestArgs']]]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def distribution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DistributionArgs']]]]:
        """
        The various channels by which a package is distributed.
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DistributionArgs']]]]):
        pulumi.set(self, "distribution", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input['LicenseArgs']]:
        """
        Licenses that have been declared by the authors of the package.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input['LicenseArgs']]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def maintainer(self) -> Optional[pulumi.Input[str]]:
        """
        A freeform text denoting the maintainer of this package.
        """
        return pulumi.get(self, "maintainer")

    @maintainer.setter
    def maintainer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintainer", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The homepage for this package.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['VersionArgs']]:
        """
        The version of the package.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['VersionArgs']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PgpSignedAttestationArgs:
    def __init__(__self__, *,
                 signature: pulumi.Input[str],
                 content_type: Optional[pulumi.Input['PgpSignedAttestationContentType']] = None,
                 pgp_key_id: Optional[pulumi.Input[str]] = None):
        """
        An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
        :param pulumi.Input[str] signature: The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
        :param pulumi.Input['PgpSignedAttestationContentType'] content_type: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
        :param pulumi.Input[str] pgp_key_id: The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
        """
        pulumi.set(__self__, "signature", signature)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if pgp_key_id is not None:
            pulumi.set(__self__, "pgp_key_id", pgp_key_id)

    @property
    @pulumi.getter
    def signature(self) -> pulumi.Input[str]:
        """
        The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: pulumi.Input[str]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['PgpSignedAttestationContentType']]:
        """
        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['PgpSignedAttestationContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="pgpKeyId")
    def pgp_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
        """
        return pulumi.get(self, "pgp_key_id")

    @pgp_key_id.setter
    def pgp_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgp_key_id", value)


@pulumi.input_type
class ProductArgs:
    def __init__(__self__, *,
                 generic_uri: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Product contains information about a product and how to uniquely identify it.
        :param pulumi.Input[str] generic_uri: Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
        :param pulumi.Input[str] id: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
        :param pulumi.Input[str] name: Name of the product.
        """
        if generic_uri is not None:
            pulumi.set(__self__, "generic_uri", generic_uri)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="genericUri")
    def generic_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.
        """
        return pulumi.get(self, "generic_uri")

    @generic_uri.setter
    def generic_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generic_uri", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the product.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProjectRepoIdArgs:
    def __init__(__self__, *,
                 project: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None):
        """
        Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
        :param pulumi.Input[str] project: The ID of the project.
        :param pulumi.Input[str] repo_name: The name of the repo. Leave empty for the default repo.
        """
        if project is not None:
            pulumi.set(__self__, "project", project)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repo. Leave empty for the default repo.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)


@pulumi.input_type
class ProvenanceBuilderArgs:
    def __init__(__self__, *,
                 builder_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if builder_dependencies is not None:
            pulumi.set(__self__, "builder_dependencies", builder_dependencies)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="builderDependencies")
    def builder_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]:
        return pulumi.get(self, "builder_dependencies")

    @builder_dependencies.setter
    def builder_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]):
        pulumi.set(self, "builder_dependencies", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PublisherArgs:
    def __init__(__self__, *,
                 issuing_authority: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 publisher_namespace: Optional[pulumi.Input[str]] = None):
        """
        Publisher contains information about the publisher of this Note.
        :param pulumi.Input[str] issuing_authority: Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
        :param pulumi.Input[str] name: Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
        :param pulumi.Input[str] publisher_namespace: The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
        """
        if issuing_authority is not None:
            pulumi.set(__self__, "issuing_authority", issuing_authority)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if publisher_namespace is not None:
            pulumi.set(__self__, "publisher_namespace", publisher_namespace)

    @property
    @pulumi.getter(name="issuingAuthority")
    def issuing_authority(self) -> Optional[pulumi.Input[str]]:
        """
        Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
        """
        return pulumi.get(self, "issuing_authority")

    @issuing_authority.setter
    def issuing_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuing_authority", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publisherNamespace")
    def publisher_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
        """
        return pulumi.get(self, "publisher_namespace")

    @publisher_namespace.setter
    def publisher_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publisher_namespace", value)


@pulumi.input_type
class RelatedUrlArgs:
    def __init__(__self__, *,
                 label: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Metadata for any related URL information.
        :param pulumi.Input[str] label: Label to describe usage of the URL.
        :param pulumi.Input[str] url: Specific URL associated with the resource.
        """
        if label is not None:
            pulumi.set(__self__, "label", label)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label to describe usage of the URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Specific URL associated with the resource.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class RelationshipNoteArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['RelationshipNoteType']] = None):
        """
        RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
        :param pulumi.Input['RelationshipNoteType'] type: The type of relationship between the source and target SPDX elements
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['RelationshipNoteType']]:
        """
        The type of relationship between the source and target SPDX elements
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['RelationshipNoteType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RelationshipOccurrenceArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
        :param pulumi.Input[str] comment: A place for the SPDX file creator to record any general comments about the relationship
        :param pulumi.Input[str] source: Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
        :param pulumi.Input[str] target: Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A place for the SPDX file creator to record any general comments about the relationship
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class RemediationArgs:
    def __init__(__self__, *,
                 details: Optional[pulumi.Input[str]] = None,
                 remediation_type: Optional[pulumi.Input['RemediationRemediationType']] = None,
                 remediation_uri: Optional[pulumi.Input['RelatedUrlArgs']] = None):
        """
        Specifies details on how to handle (and presumably, fix) a vulnerability.
        :param pulumi.Input[str] details: Contains a comprehensive human-readable discussion of the remediation.
        :param pulumi.Input['RemediationRemediationType'] remediation_type: The type of remediation that can be applied.
        :param pulumi.Input['RelatedUrlArgs'] remediation_uri: Contains the URL where to obtain the remediation.
        """
        if details is not None:
            pulumi.set(__self__, "details", details)
        if remediation_type is not None:
            pulumi.set(__self__, "remediation_type", remediation_type)
        if remediation_uri is not None:
            pulumi.set(__self__, "remediation_uri", remediation_uri)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a comprehensive human-readable discussion of the remediation.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="remediationType")
    def remediation_type(self) -> Optional[pulumi.Input['RemediationRemediationType']]:
        """
        The type of remediation that can be applied.
        """
        return pulumi.get(self, "remediation_type")

    @remediation_type.setter
    def remediation_type(self, value: Optional[pulumi.Input['RemediationRemediationType']]):
        pulumi.set(self, "remediation_type", value)

    @property
    @pulumi.getter(name="remediationUri")
    def remediation_uri(self) -> Optional[pulumi.Input['RelatedUrlArgs']]:
        """
        Contains the URL where to obtain the remediation.
        """
        return pulumi.get(self, "remediation_uri")

    @remediation_uri.setter
    def remediation_uri(self, value: Optional[pulumi.Input['RelatedUrlArgs']]):
        pulumi.set(self, "remediation_uri", value)


@pulumi.input_type
class RepoIdArgs:
    def __init__(__self__, *,
                 project_repo_id: Optional[pulumi.Input['ProjectRepoIdArgs']] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        A unique identifier for a Cloud Repo.
        :param pulumi.Input['ProjectRepoIdArgs'] project_repo_id: A combination of a project ID and a repo name.
        :param pulumi.Input[str] uid: A server-assigned, globally unique identifier.
        """
        if project_repo_id is not None:
            pulumi.set(__self__, "project_repo_id", project_repo_id)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="projectRepoId")
    def project_repo_id(self) -> Optional[pulumi.Input['ProjectRepoIdArgs']]:
        """
        A combination of a project ID and a repo name.
        """
        return pulumi.get(self, "project_repo_id")

    @project_repo_id.setter
    def project_repo_id(self, value: Optional[pulumi.Input['ProjectRepoIdArgs']]):
        pulumi.set(self, "project_repo_id", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        A server-assigned, globally unique identifier.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ResourceDescriptorArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 download_location: Optional[pulumi.Input[str]] = None,
                 media_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if download_location is not None:
            pulumi.set(__self__, "download_location", download_location)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="downloadLocation")
    def download_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "download_location")

    @download_location.setter
    def download_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_location", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 content_hash: Optional[pulumi.Input['HashArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        An entity that can have metadata. For example, a Docker image.
        :param pulumi.Input[str] uri: The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
        :param pulumi.Input['HashArgs'] content_hash: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
        :param pulumi.Input[str] name: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
        """
        pulumi.set(__self__, "uri", uri)
        if content_hash is not None:
            warnings.warn("""Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.""", DeprecationWarning)
            pulumi.log.warn("""content_hash is deprecated: Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.""")
        if content_hash is not None:
            pulumi.set(__self__, "content_hash", content_hash)
        if name is not None:
            warnings.warn("""Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\".""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\".""")
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="contentHash")
    @_utilities.deprecated("""Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.""")
    def content_hash(self) -> Optional[pulumi.Input['HashArgs']]:
        """
        Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
        """
        return pulumi.get(self, "content_hash")

    @content_hash.setter
    def content_hash(self, value: Optional[pulumi.Input['HashArgs']]):
        pulumi.set(self, "content_hash", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\".""")
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RunDetailsArgs:
    def __init__(__self__, *,
                 builder: Optional[pulumi.Input['ProvenanceBuilderArgs']] = None,
                 byproducts: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]] = None,
                 metadata: Optional[pulumi.Input['BuildMetadataArgs']] = None):
        if builder is not None:
            pulumi.set(__self__, "builder", builder)
        if byproducts is not None:
            pulumi.set(__self__, "byproducts", byproducts)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def builder(self) -> Optional[pulumi.Input['ProvenanceBuilderArgs']]:
        return pulumi.get(self, "builder")

    @builder.setter
    def builder(self, value: Optional[pulumi.Input['ProvenanceBuilderArgs']]):
        pulumi.set(self, "builder", value)

    @property
    @pulumi.getter
    def byproducts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]:
        return pulumi.get(self, "byproducts")

    @byproducts.setter
    def byproducts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceDescriptorArgs']]]]):
        pulumi.set(self, "byproducts", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['BuildMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['BuildMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class SBOMReferenceNoteArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The note representing an SBOM reference.
        :param pulumi.Input[str] format: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
        :param pulumi.Input[str] version: The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SBOMReferenceOccurrenceArgs:
    def __init__(__self__, *,
                 payload: Optional[pulumi.Input['SbomReferenceIntotoPayloadArgs']] = None,
                 payload_type: Optional[pulumi.Input[str]] = None,
                 signatures: Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]] = None):
        """
        The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
        :param pulumi.Input['SbomReferenceIntotoPayloadArgs'] payload: The actual payload that contains the SBOM reference data.
        :param pulumi.Input[str] payload_type: The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
        :param pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]] signatures: The signatures over the payload.
        """
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if payload_type is not None:
            pulumi.set(__self__, "payload_type", payload_type)
        if signatures is not None:
            pulumi.set(__self__, "signatures", signatures)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input['SbomReferenceIntotoPayloadArgs']]:
        """
        The actual payload that contains the SBOM reference data.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input['SbomReferenceIntotoPayloadArgs']]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
        """
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter
    def signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]]:
        """
        The signatures over the payload.
        """
        return pulumi.get(self, "signatures")

    @signatures.setter
    def signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvelopeSignatureArgs']]]]):
        pulumi.set(self, "signatures", value)


@pulumi.input_type
class SBOMStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input[str]] = None,
                 sbom_state: Optional[pulumi.Input['SBOMStatusSbomState']] = None):
        """
        The status of an SBOM generation.
        :param pulumi.Input[str] error: If there was an error generating an SBOM, this will indicate what that error was.
        :param pulumi.Input['SBOMStatusSbomState'] sbom_state: The progress of the SBOM generation.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if sbom_state is not None:
            pulumi.set(__self__, "sbom_state", sbom_state)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[str]]:
        """
        If there was an error generating an SBOM, this will indicate what that error was.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="sbomState")
    def sbom_state(self) -> Optional[pulumi.Input['SBOMStatusSbomState']]:
        """
        The progress of the SBOM generation.
        """
        return pulumi.get(self, "sbom_state")

    @sbom_state.setter
    def sbom_state(self, value: Optional[pulumi.Input['SBOMStatusSbomState']]):
        pulumi.set(self, "sbom_state", value)


@pulumi.input_type
class SbomReferenceIntotoPayloadArgs:
    def __init__(__self__, *,
                 predicate: Optional[pulumi.Input['SbomReferenceIntotoPredicateArgs']] = None,
                 predicate_type: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
        :param pulumi.Input['SbomReferenceIntotoPredicateArgs'] predicate: Additional parameters of the Predicate. Includes the actual data about the SBOM.
        :param pulumi.Input[str] predicate_type: URI identifying the type of the Predicate.
        :param pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]] subject: Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
        :param pulumi.Input[str] type: Identifier for the schema of the Statement.
        """
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)
        if predicate_type is not None:
            pulumi.set(__self__, "predicate_type", predicate_type)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input['SbomReferenceIntotoPredicateArgs']]:
        """
        Additional parameters of the Predicate. Includes the actual data about the SBOM.
        """
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input['SbomReferenceIntotoPredicateArgs']]):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter(name="predicateType")
    def predicate_type(self) -> Optional[pulumi.Input[str]]:
        """
        URI identifying the type of the Predicate.
        """
        return pulumi.get(self, "predicate_type")

    @predicate_type.setter
    def predicate_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predicate_type", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]]:
        """
        Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubjectArgs']]]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for the schema of the Statement.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SbomReferenceIntotoPredicateArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 mime_type: Optional[pulumi.Input[str]] = None,
                 referrer_id: Optional[pulumi.Input[str]] = None):
        """
        A predicate which describes the SBOM being referenced.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] digest: A map of algorithm to digest of the contents of the SBOM.
        :param pulumi.Input[str] location: The location of the SBOM.
        :param pulumi.Input[str] mime_type: The mime type of the SBOM.
        :param pulumi.Input[str] referrer_id: The person or system referring this predicate to the consumer.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if referrer_id is not None:
            pulumi.set(__self__, "referrer_id", referrer_id)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of algorithm to digest of the contents of the SBOM.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the SBOM.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[pulumi.Input[str]]:
        """
        The mime type of the SBOM.
        """
        return pulumi.get(self, "mime_type")

    @mime_type.setter
    def mime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mime_type", value)

    @property
    @pulumi.getter(name="referrerId")
    def referrer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The person or system referring this predicate to the consumer.
        """
        return pulumi.get(self, "referrer_id")

    @referrer_id.setter
    def referrer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer_id", value)


@pulumi.input_type
class SignatureArgs:
    def __init__(__self__, *,
                 public_key_id: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input[str]] = None):
        """
        Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
        :param pulumi.Input[str] public_key_id: The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
        :param pulumi.Input[str] signature: The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
        """
        if public_key_id is not None:
            pulumi.set(__self__, "public_key_id", public_key_id)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)

    @property
    @pulumi.getter(name="publicKeyId")
    def public_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
        """
        return pulumi.get(self, "public_key_id")

    @public_key_id.setter
    def public_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key_id", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature", value)


@pulumi.input_type
class SigningKeyArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_scheme: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 public_key_value: Optional[pulumi.Input[str]] = None):
        """
        This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
        :param pulumi.Input[str] key_id: key_id is an identifier for the signing key.
        :param pulumi.Input[str] key_scheme: This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
        :param pulumi.Input[str] key_type: This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
        :param pulumi.Input[str] public_key_value: This field contains the actual public key.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_scheme is not None:
            pulumi.set(__self__, "key_scheme", key_scheme)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if public_key_value is not None:
            pulumi.set(__self__, "public_key_value", public_key_value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        key_id is an identifier for the signing key.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyScheme")
    def key_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
        """
        return pulumi.get(self, "key_scheme")

    @key_scheme.setter
    def key_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_scheme", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="publicKeyValue")
    def public_key_value(self) -> Optional[pulumi.Input[str]]:
        """
        This field contains the actual public key.
        """
        return pulumi.get(self, "public_key_value")

    @public_key_value.setter
    def public_key_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key_value", value)


@pulumi.input_type
class SlsaProvenanceV1Args:
    def __init__(__self__, *,
                 build_definition: Optional[pulumi.Input['BuildDefinitionArgs']] = None,
                 run_details: Optional[pulumi.Input['RunDetailsArgs']] = None):
        """
        Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
        """
        if build_definition is not None:
            pulumi.set(__self__, "build_definition", build_definition)
        if run_details is not None:
            pulumi.set(__self__, "run_details", run_details)

    @property
    @pulumi.getter(name="buildDefinition")
    def build_definition(self) -> Optional[pulumi.Input['BuildDefinitionArgs']]:
        return pulumi.get(self, "build_definition")

    @build_definition.setter
    def build_definition(self, value: Optional[pulumi.Input['BuildDefinitionArgs']]):
        pulumi.set(self, "build_definition", value)

    @property
    @pulumi.getter(name="runDetails")
    def run_details(self) -> Optional[pulumi.Input['RunDetailsArgs']]:
        return pulumi.get(self, "run_details")

    @run_details.setter
    def run_details(self, value: Optional[pulumi.Input['RunDetailsArgs']]):
        pulumi.set(self, "run_details", value)


@pulumi.input_type
class SourceContextArgs:
    def __init__(__self__, *,
                 cloud_repo: Optional[pulumi.Input['CloudRepoSourceContextArgs']] = None,
                 gerrit: Optional[pulumi.Input['GerritSourceContextArgs']] = None,
                 git: Optional[pulumi.Input['GitSourceContextArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
        :param pulumi.Input['CloudRepoSourceContextArgs'] cloud_repo: A SourceContext referring to a revision in a Google Cloud Source Repo.
        :param pulumi.Input['GerritSourceContextArgs'] gerrit: A SourceContext referring to a Gerrit project.
        :param pulumi.Input['GitSourceContextArgs'] git: A SourceContext referring to any third party Git repo (e.g., GitHub).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels with user defined metadata.
        """
        if cloud_repo is not None:
            pulumi.set(__self__, "cloud_repo", cloud_repo)
        if gerrit is not None:
            pulumi.set(__self__, "gerrit", gerrit)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter(name="cloudRepo")
    def cloud_repo(self) -> Optional[pulumi.Input['CloudRepoSourceContextArgs']]:
        """
        A SourceContext referring to a revision in a Google Cloud Source Repo.
        """
        return pulumi.get(self, "cloud_repo")

    @cloud_repo.setter
    def cloud_repo(self, value: Optional[pulumi.Input['CloudRepoSourceContextArgs']]):
        pulumi.set(self, "cloud_repo", value)

    @property
    @pulumi.getter
    def gerrit(self) -> Optional[pulumi.Input['GerritSourceContextArgs']]:
        """
        A SourceContext referring to a Gerrit project.
        """
        return pulumi.get(self, "gerrit")

    @gerrit.setter
    def gerrit(self, value: Optional[pulumi.Input['GerritSourceContextArgs']]):
        pulumi.set(self, "gerrit", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['GitSourceContextArgs']]:
        """
        A SourceContext referring to any third party Git repo (e.g., GitHub).
        """
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['GitSourceContextArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels with user defined metadata.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class SourceArgs:
    def __init__(__self__, *,
                 additional_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]] = None,
                 artifact_storage_source_uri: Optional[pulumi.Input[str]] = None,
                 context: Optional[pulumi.Input['SourceContextArgs']] = None,
                 file_hashes: Optional[pulumi.Input[Mapping[str, pulumi.Input['FileHashesArgs']]]] = None):
        """
        Source describes the location of the source used for the build.
        :param pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]] additional_contexts: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
        :param pulumi.Input[str] artifact_storage_source_uri: If provided, the input binary artifacts for the build came from this location.
        :param pulumi.Input['SourceContextArgs'] context: If provided, the source code used for the build came from this location.
        :param pulumi.Input[Mapping[str, pulumi.Input['FileHashesArgs']]] file_hashes: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
        """
        if additional_contexts is not None:
            pulumi.set(__self__, "additional_contexts", additional_contexts)
        if artifact_storage_source_uri is not None:
            pulumi.set(__self__, "artifact_storage_source_uri", artifact_storage_source_uri)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if file_hashes is not None:
            pulumi.set(__self__, "file_hashes", file_hashes)

    @property
    @pulumi.getter(name="additionalContexts")
    def additional_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]]:
        """
        If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
        """
        return pulumi.get(self, "additional_contexts")

    @additional_contexts.setter
    def additional_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]]):
        pulumi.set(self, "additional_contexts", value)

    @property
    @pulumi.getter(name="artifactStorageSourceUri")
    def artifact_storage_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        If provided, the input binary artifacts for the build came from this location.
        """
        return pulumi.get(self, "artifact_storage_source_uri")

    @artifact_storage_source_uri.setter
    def artifact_storage_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_storage_source_uri", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['SourceContextArgs']]:
        """
        If provided, the source code used for the build came from this location.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['SourceContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="fileHashes")
    def file_hashes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['FileHashesArgs']]]]:
        """
        Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
        """
        return pulumi.get(self, "file_hashes")

    @file_hashes.setter
    def file_hashes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['FileHashesArgs']]]]):
        pulumi.set(self, "file_hashes", value)


@pulumi.input_type
class StatusArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
        :param pulumi.Input[int] code: The status code, which should be an enum value of google.rpc.Code.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] details: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        :param pulumi.Input[str] message: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        The status code, which should be an enum value of google.rpc.Code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        A list of messages that carry the error details. There is a common set of message types for APIs to use.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class SubjectArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] digest: `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
        :param pulumi.Input[str] name: Identifier to distinguish this artifact from others within the subject.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier to distinguish this artifact from others within the subject.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VersionArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input['VersionKind'],
                 epoch: Optional[pulumi.Input[int]] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        Version contains structured information about the version of a package.
        :param pulumi.Input['VersionKind'] kind: Distinguishes between sentinel MIN/MAX versions and normal versions.
        :param pulumi.Input[int] epoch: Used to correct mistakes in the version numbering scheme.
        :param pulumi.Input[bool] inclusive: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
        :param pulumi.Input[str] name: Required only when version kind is NORMAL. The main part of the version name.
        :param pulumi.Input[str] revision: The iteration of the package build from the above version.
        """
        pulumi.set(__self__, "kind", kind)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if inclusive is not None:
            pulumi.set(__self__, "inclusive", inclusive)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input['VersionKind']:
        """
        Distinguishes between sentinel MIN/MAX versions and normal versions.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input['VersionKind']):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[int]]:
        """
        Used to correct mistakes in the version numbering scheme.
        """
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def inclusive(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
        """
        return pulumi.get(self, "inclusive")

    @inclusive.setter
    def inclusive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inclusive", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required only when version kind is NORMAL. The main part of the version name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        The iteration of the package build from the above version.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class VexAssessmentArgs:
    def __init__(__self__, *,
                 cve: Optional[pulumi.Input[str]] = None,
                 impacts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 justification: Optional[pulumi.Input['JustificationArgs']] = None,
                 note_name: Optional[pulumi.Input[str]] = None,
                 related_uris: Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]] = None,
                 remediations: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]] = None,
                 state: Optional[pulumi.Input['VexAssessmentState']] = None,
                 vulnerability_id: Optional[pulumi.Input[str]] = None):
        """
        VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
        :param pulumi.Input[str] cve: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] impacts: Contains information about the impact of this vulnerability, this will change with time.
        :param pulumi.Input['JustificationArgs'] justification: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        :param pulumi.Input[str] note_name: The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
        :param pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]] related_uris: Holds a list of references associated with this vulnerability item and assessment.
        :param pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]] remediations: Specifies details on how to handle (and presumably, fix) a vulnerability.
        :param pulumi.Input['VexAssessmentState'] state: Provides the state of this Vulnerability assessment.
        :param pulumi.Input[str] vulnerability_id: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
        """
        if cve is not None:
            warnings.warn("""Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""", DeprecationWarning)
            pulumi.log.warn("""cve is deprecated: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""")
        if cve is not None:
            pulumi.set(__self__, "cve", cve)
        if impacts is not None:
            pulumi.set(__self__, "impacts", impacts)
        if justification is not None:
            pulumi.set(__self__, "justification", justification)
        if note_name is not None:
            pulumi.set(__self__, "note_name", note_name)
        if related_uris is not None:
            pulumi.set(__self__, "related_uris", related_uris)
        if remediations is not None:
            pulumi.set(__self__, "remediations", remediations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vulnerability_id is not None:
            pulumi.set(__self__, "vulnerability_id", vulnerability_id)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.""")
    def cve(self) -> Optional[pulumi.Input[str]]:
        """
        Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
        """
        return pulumi.get(self, "cve")

    @cve.setter
    def cve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve", value)

    @property
    @pulumi.getter
    def impacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Contains information about the impact of this vulnerability, this will change with time.
        """
        return pulumi.get(self, "impacts")

    @impacts.setter
    def impacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "impacts", value)

    @property
    @pulumi.getter
    def justification(self) -> Optional[pulumi.Input['JustificationArgs']]:
        """
        Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        """
        return pulumi.get(self, "justification")

    @justification.setter
    def justification(self, value: Optional[pulumi.Input['JustificationArgs']]):
        pulumi.set(self, "justification", value)

    @property
    @pulumi.getter(name="noteName")
    def note_name(self) -> Optional[pulumi.Input[str]]:
        """
        The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
        """
        return pulumi.get(self, "note_name")

    @note_name.setter
    def note_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note_name", value)

    @property
    @pulumi.getter(name="relatedUris")
    def related_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]]:
        """
        Holds a list of references associated with this vulnerability item and assessment.
        """
        return pulumi.get(self, "related_uris")

    @related_uris.setter
    def related_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RelatedUrlArgs']]]]):
        pulumi.set(self, "related_uris", value)

    @property
    @pulumi.getter
    def remediations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]]:
        """
        Specifies details on how to handle (and presumably, fix) a vulnerability.
        """
        return pulumi.get(self, "remediations")

    @remediations.setter
    def remediations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RemediationArgs']]]]):
        pulumi.set(self, "remediations", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['VexAssessmentState']]:
        """
        Provides the state of this Vulnerability assessment.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['VexAssessmentState']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vulnerabilityId")
    def vulnerability_id(self) -> Optional[pulumi.Input[str]]:
        """
        The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
        """
        return pulumi.get(self, "vulnerability_id")

    @vulnerability_id.setter
    def vulnerability_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vulnerability_id", value)


@pulumi.input_type
class VulnerabilityAssessmentNoteArgs:
    def __init__(__self__, *,
                 assessment: Optional[pulumi.Input['AssessmentArgs']] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 long_description: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input['ProductArgs']] = None,
                 publisher: Optional[pulumi.Input['PublisherArgs']] = None,
                 short_description: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
        :param pulumi.Input['AssessmentArgs'] assessment: Represents a vulnerability assessment for the product.
        :param pulumi.Input[str] language_code: Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
        :param pulumi.Input[str] long_description: A detailed description of this Vex.
        :param pulumi.Input['ProductArgs'] product: The product affected by this vex.
        :param pulumi.Input['PublisherArgs'] publisher: Publisher details of this Note.
        :param pulumi.Input[str] short_description: A one sentence description of this Vex.
        :param pulumi.Input[str] title: The title of the note. E.g. `Vex-Debian-11.4`
        """
        if assessment is not None:
            pulumi.set(__self__, "assessment", assessment)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def assessment(self) -> Optional[pulumi.Input['AssessmentArgs']]:
        """
        Represents a vulnerability assessment for the product.
        """
        return pulumi.get(self, "assessment")

    @assessment.setter
    def assessment(self, value: Optional[pulumi.Input['AssessmentArgs']]):
        pulumi.set(self, "assessment", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[str]]:
        """
        A detailed description of this Vex.
        """
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_description", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input['ProductArgs']]:
        """
        The product affected by this vex.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input['ProductArgs']]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def publisher(self) -> Optional[pulumi.Input['PublisherArgs']]:
        """
        Publisher details of this Note.
        """
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: Optional[pulumi.Input['PublisherArgs']]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[str]]:
        """
        A one sentence description of this Vex.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_description", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the note. E.g. `Vex-Debian-11.4`
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class VulnerabilityLocationArgs:
    def __init__(__self__, *,
                 cpe_uri: pulumi.Input[str],
                 package: pulumi.Input[str],
                 version: pulumi.Input['VersionArgs']):
        """
        The location of the vulnerability.
        :param pulumi.Input[str] cpe_uri: The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
        :param pulumi.Input[str] package: The package being described.
        :param pulumi.Input['VersionArgs'] version: The version of the package being described.
        """
        pulumi.set(__self__, "cpe_uri", cpe_uri)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cpeUri")
    def cpe_uri(self) -> pulumi.Input[str]:
        """
        The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter
    def package(self) -> pulumi.Input[str]:
        """
        The package being described.
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: pulumi.Input[str]):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input['VersionArgs']:
        """
        The version of the package being described.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input['VersionArgs']):
        pulumi.set(self, "version", value)


@pulumi.input_type
class VulnerabilityArgs:
    def __init__(__self__, *,
                 cvss_score: Optional[pulumi.Input[float]] = None,
                 cvss_v2: Optional[pulumi.Input['CVSSArgs']] = None,
                 cvss_v3: Optional[pulumi.Input['CVSSv3Args']] = None,
                 cvss_version: Optional[pulumi.Input['VulnerabilityCvssVersion']] = None,
                 cwe: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['DetailArgs']]]] = None,
                 severity: Optional[pulumi.Input['VulnerabilitySeverity']] = None,
                 source_update_time: Optional[pulumi.Input[str]] = None,
                 windows_details: Optional[pulumi.Input[Sequence[pulumi.Input['WindowsDetailArgs']]]] = None):
        """
        Vulnerability provides metadata about a security vulnerability in a Note.
        :param pulumi.Input[float] cvss_score: The CVSS score for this vulnerability.
        :param pulumi.Input['CVSSArgs'] cvss_v2: The full description of the CVSS for version 2.
        :param pulumi.Input['CVSSv3Args'] cvss_v3: The full description of the CVSS for version 3.
        :param pulumi.Input['VulnerabilityCvssVersion'] cvss_version: CVSS version used to populate cvss_score and severity.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cwe: A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
        :param pulumi.Input[Sequence[pulumi.Input['DetailArgs']]] details: All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
        :param pulumi.Input['VulnerabilitySeverity'] severity: Note provider assigned impact of the vulnerability.
        :param pulumi.Input[str] source_update_time: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        :param pulumi.Input[Sequence[pulumi.Input['WindowsDetailArgs']]] windows_details: Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
        """
        if cvss_score is not None:
            pulumi.set(__self__, "cvss_score", cvss_score)
        if cvss_v2 is not None:
            pulumi.set(__self__, "cvss_v2", cvss_v2)
        if cvss_v3 is not None:
            pulumi.set(__self__, "cvss_v3", cvss_v3)
        if cvss_version is not None:
            pulumi.set(__self__, "cvss_version", cvss_version)
        if cwe is not None:
            pulumi.set(__self__, "cwe", cwe)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_update_time is not None:
            pulumi.set(__self__, "source_update_time", source_update_time)
        if windows_details is not None:
            pulumi.set(__self__, "windows_details", windows_details)

    @property
    @pulumi.getter(name="cvssScore")
    def cvss_score(self) -> Optional[pulumi.Input[float]]:
        """
        The CVSS score for this vulnerability.
        """
        return pulumi.get(self, "cvss_score")

    @cvss_score.setter
    def cvss_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cvss_score", value)

    @property
    @pulumi.getter(name="cvssV2")
    def cvss_v2(self) -> Optional[pulumi.Input['CVSSArgs']]:
        """
        The full description of the CVSS for version 2.
        """
        return pulumi.get(self, "cvss_v2")

    @cvss_v2.setter
    def cvss_v2(self, value: Optional[pulumi.Input['CVSSArgs']]):
        pulumi.set(self, "cvss_v2", value)

    @property
    @pulumi.getter(name="cvssV3")
    def cvss_v3(self) -> Optional[pulumi.Input['CVSSv3Args']]:
        """
        The full description of the CVSS for version 3.
        """
        return pulumi.get(self, "cvss_v3")

    @cvss_v3.setter
    def cvss_v3(self, value: Optional[pulumi.Input['CVSSv3Args']]):
        pulumi.set(self, "cvss_v3", value)

    @property
    @pulumi.getter(name="cvssVersion")
    def cvss_version(self) -> Optional[pulumi.Input['VulnerabilityCvssVersion']]:
        """
        CVSS version used to populate cvss_score and severity.
        """
        return pulumi.get(self, "cvss_version")

    @cvss_version.setter
    def cvss_version(self, value: Optional[pulumi.Input['VulnerabilityCvssVersion']]):
        pulumi.set(self, "cvss_version", value)

    @property
    @pulumi.getter
    def cwe(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
        """
        return pulumi.get(self, "cwe")

    @cwe.setter
    def cwe(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cwe", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DetailArgs']]]]:
        """
        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DetailArgs']]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['VulnerabilitySeverity']]:
        """
        Note provider assigned impact of the vulnerability.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['VulnerabilitySeverity']]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sourceUpdateTime")
    def source_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        """
        return pulumi.get(self, "source_update_time")

    @source_update_time.setter
    def source_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_update_time", value)

    @property
    @pulumi.getter(name="windowsDetails")
    def windows_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WindowsDetailArgs']]]]:
        """
        Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
        """
        return pulumi.get(self, "windows_details")

    @windows_details.setter
    def windows_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WindowsDetailArgs']]]]):
        pulumi.set(self, "windows_details", value)


@pulumi.input_type
class WindowsDetailArgs:
    def __init__(__self__, *,
                 cpe_uri: pulumi.Input[str],
                 fixing_kbs: pulumi.Input[Sequence[pulumi.Input['KnowledgeBaseArgs']]],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpe_uri: The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
        :param pulumi.Input[Sequence[pulumi.Input['KnowledgeBaseArgs']]] fixing_kbs: The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
        :param pulumi.Input[str] name: The name of the vulnerability.
        :param pulumi.Input[str] description: The description of the vulnerability.
        """
        pulumi.set(__self__, "cpe_uri", cpe_uri)
        pulumi.set(__self__, "fixing_kbs", fixing_kbs)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cpeUri")
    def cpe_uri(self) -> pulumi.Input[str]:
        """
        The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
        """
        return pulumi.get(self, "cpe_uri")

    @cpe_uri.setter
    def cpe_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpe_uri", value)

    @property
    @pulumi.getter(name="fixingKbs")
    def fixing_kbs(self) -> pulumi.Input[Sequence[pulumi.Input['KnowledgeBaseArgs']]]:
        """
        The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
        """
        return pulumi.get(self, "fixing_kbs")

    @fixing_kbs.setter
    def fixing_kbs(self, value: pulumi.Input[Sequence[pulumi.Input['KnowledgeBaseArgs']]]):
        pulumi.set(self, "fixing_kbs", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the vulnerability.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the vulnerability.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


