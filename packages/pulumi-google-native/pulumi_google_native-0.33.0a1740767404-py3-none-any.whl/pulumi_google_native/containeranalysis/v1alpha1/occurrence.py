# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OccurrenceArgs', 'Occurrence']

@pulumi.input_type
class OccurrenceArgs:
    def __init__(__self__, *,
                 attestation: Optional[pulumi.Input['AttestationArgs']] = None,
                 build_details: Optional[pulumi.Input['BuildDetailsArgs']] = None,
                 compliance: Optional[pulumi.Input['ComplianceOccurrenceArgs']] = None,
                 deployment: Optional[pulumi.Input['DeploymentArgs']] = None,
                 derived_image: Optional[pulumi.Input['DerivedArgs']] = None,
                 discovered: Optional[pulumi.Input['DiscoveredArgs']] = None,
                 dsse_attestation: Optional[pulumi.Input['DSSEAttestationOccurrenceArgs']] = None,
                 envelope: Optional[pulumi.Input['EnvelopeArgs']] = None,
                 installation: Optional[pulumi.Input['InstallationArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 remediation: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input['ResourceArgs']] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 sbom: Optional[pulumi.Input['DocumentOccurrenceArgs']] = None,
                 sbom_reference: Optional[pulumi.Input['SBOMReferenceOccurrenceArgs']] = None,
                 spdx_file: Optional[pulumi.Input['FileOccurrenceArgs']] = None,
                 spdx_package: Optional[pulumi.Input['PackageInfoOccurrenceArgs']] = None,
                 spdx_relationship: Optional[pulumi.Input['RelationshipOccurrenceArgs']] = None,
                 upgrade: Optional[pulumi.Input['UpgradeOccurrenceArgs']] = None,
                 vulnerability_details: Optional[pulumi.Input['VulnerabilityDetailsArgs']] = None):
        """
        The set of arguments for constructing a Occurrence resource.
        :param pulumi.Input['AttestationArgs'] attestation: Describes an attestation of an artifact.
        :param pulumi.Input['BuildDetailsArgs'] build_details: Build details for a verifiable build.
        :param pulumi.Input['ComplianceOccurrenceArgs'] compliance: Describes whether or not a resource passes compliance checks.
        :param pulumi.Input['DeploymentArgs'] deployment: Describes the deployment of an artifact on a runtime.
        :param pulumi.Input['DerivedArgs'] derived_image: Describes how this resource derives from the basis in the associated note.
        :param pulumi.Input['DiscoveredArgs'] discovered: Describes the initial scan status for this resource.
        :param pulumi.Input['DSSEAttestationOccurrenceArgs'] dsse_attestation: This represents a DSSE attestation occurrence
        :param pulumi.Input['EnvelopeArgs'] envelope: https://github.com/secure-systems-lab/dsse
        :param pulumi.Input['InstallationArgs'] installation: Describes the installation of a package on the linked resource.
        :param pulumi.Input[str] name: The name of the project. Should be of the form "projects/{project_id}". @Deprecated
        :param pulumi.Input[str] note_name: An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
        :param pulumi.Input[str] remediation: A description of actions that can be taken to remedy the `Note`
        :param pulumi.Input['ResourceArgs'] resource:  The resource for which the `Occurrence` applies.
        :param pulumi.Input[str] resource_url: The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
        :param pulumi.Input['DocumentOccurrenceArgs'] sbom: Describes a specific software bill of materials document.
        :param pulumi.Input['SBOMReferenceOccurrenceArgs'] sbom_reference: This represents an SBOM reference occurrence
        :param pulumi.Input['FileOccurrenceArgs'] spdx_file: Describes a specific SPDX File.
        :param pulumi.Input['PackageInfoOccurrenceArgs'] spdx_package: Describes a specific SPDX Package.
        :param pulumi.Input['RelationshipOccurrenceArgs'] spdx_relationship: Describes a specific relationship between SPDX elements.
        :param pulumi.Input['UpgradeOccurrenceArgs'] upgrade: Describes an upgrade.
        :param pulumi.Input['VulnerabilityDetailsArgs'] vulnerability_details: Details of a security vulnerability note.
        """
        if attestation is not None:
            pulumi.set(__self__, "attestation", attestation)
        if build_details is not None:
            pulumi.set(__self__, "build_details", build_details)
        if compliance is not None:
            pulumi.set(__self__, "compliance", compliance)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if derived_image is not None:
            pulumi.set(__self__, "derived_image", derived_image)
        if discovered is not None:
            pulumi.set(__self__, "discovered", discovered)
        if dsse_attestation is not None:
            pulumi.set(__self__, "dsse_attestation", dsse_attestation)
        if envelope is not None:
            pulumi.set(__self__, "envelope", envelope)
        if installation is not None:
            pulumi.set(__self__, "installation", installation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note_name is not None:
            pulumi.set(__self__, "note_name", note_name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if remediation is not None:
            pulumi.set(__self__, "remediation", remediation)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if resource_url is not None:
            pulumi.set(__self__, "resource_url", resource_url)
        if sbom is not None:
            pulumi.set(__self__, "sbom", sbom)
        if sbom_reference is not None:
            pulumi.set(__self__, "sbom_reference", sbom_reference)
        if spdx_file is not None:
            pulumi.set(__self__, "spdx_file", spdx_file)
        if spdx_package is not None:
            pulumi.set(__self__, "spdx_package", spdx_package)
        if spdx_relationship is not None:
            pulumi.set(__self__, "spdx_relationship", spdx_relationship)
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)
        if vulnerability_details is not None:
            pulumi.set(__self__, "vulnerability_details", vulnerability_details)

    @property
    @pulumi.getter
    def attestation(self) -> Optional[pulumi.Input['AttestationArgs']]:
        """
        Describes an attestation of an artifact.
        """
        return pulumi.get(self, "attestation")

    @attestation.setter
    def attestation(self, value: Optional[pulumi.Input['AttestationArgs']]):
        pulumi.set(self, "attestation", value)

    @property
    @pulumi.getter(name="buildDetails")
    def build_details(self) -> Optional[pulumi.Input['BuildDetailsArgs']]:
        """
        Build details for a verifiable build.
        """
        return pulumi.get(self, "build_details")

    @build_details.setter
    def build_details(self, value: Optional[pulumi.Input['BuildDetailsArgs']]):
        pulumi.set(self, "build_details", value)

    @property
    @pulumi.getter
    def compliance(self) -> Optional[pulumi.Input['ComplianceOccurrenceArgs']]:
        """
        Describes whether or not a resource passes compliance checks.
        """
        return pulumi.get(self, "compliance")

    @compliance.setter
    def compliance(self, value: Optional[pulumi.Input['ComplianceOccurrenceArgs']]):
        pulumi.set(self, "compliance", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['DeploymentArgs']]:
        """
        Describes the deployment of an artifact on a runtime.
        """
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['DeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter(name="derivedImage")
    def derived_image(self) -> Optional[pulumi.Input['DerivedArgs']]:
        """
        Describes how this resource derives from the basis in the associated note.
        """
        return pulumi.get(self, "derived_image")

    @derived_image.setter
    def derived_image(self, value: Optional[pulumi.Input['DerivedArgs']]):
        pulumi.set(self, "derived_image", value)

    @property
    @pulumi.getter
    def discovered(self) -> Optional[pulumi.Input['DiscoveredArgs']]:
        """
        Describes the initial scan status for this resource.
        """
        return pulumi.get(self, "discovered")

    @discovered.setter
    def discovered(self, value: Optional[pulumi.Input['DiscoveredArgs']]):
        pulumi.set(self, "discovered", value)

    @property
    @pulumi.getter(name="dsseAttestation")
    def dsse_attestation(self) -> Optional[pulumi.Input['DSSEAttestationOccurrenceArgs']]:
        """
        This represents a DSSE attestation occurrence
        """
        return pulumi.get(self, "dsse_attestation")

    @dsse_attestation.setter
    def dsse_attestation(self, value: Optional[pulumi.Input['DSSEAttestationOccurrenceArgs']]):
        pulumi.set(self, "dsse_attestation", value)

    @property
    @pulumi.getter
    def envelope(self) -> Optional[pulumi.Input['EnvelopeArgs']]:
        """
        https://github.com/secure-systems-lab/dsse
        """
        return pulumi.get(self, "envelope")

    @envelope.setter
    def envelope(self, value: Optional[pulumi.Input['EnvelopeArgs']]):
        pulumi.set(self, "envelope", value)

    @property
    @pulumi.getter
    def installation(self) -> Optional[pulumi.Input['InstallationArgs']]:
        """
        Describes the installation of a package on the linked resource.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: Optional[pulumi.Input['InstallationArgs']]):
        pulumi.set(self, "installation", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project. Should be of the form "projects/{project_id}". @Deprecated
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noteName")
    def note_name(self) -> Optional[pulumi.Input[str]]:
        """
        An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "note_name")

    @note_name.setter
    def note_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def remediation(self) -> Optional[pulumi.Input[str]]:
        """
        A description of actions that can be taken to remedy the `Note`
        """
        return pulumi.get(self, "remediation")

    @remediation.setter
    def remediation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remediation", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input['ResourceArgs']]:
        """
         The resource for which the `Occurrence` applies.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> Optional[pulumi.Input[str]]:
        """
        The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "resource_url")

    @resource_url.setter
    def resource_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_url", value)

    @property
    @pulumi.getter
    def sbom(self) -> Optional[pulumi.Input['DocumentOccurrenceArgs']]:
        """
        Describes a specific software bill of materials document.
        """
        return pulumi.get(self, "sbom")

    @sbom.setter
    def sbom(self, value: Optional[pulumi.Input['DocumentOccurrenceArgs']]):
        pulumi.set(self, "sbom", value)

    @property
    @pulumi.getter(name="sbomReference")
    def sbom_reference(self) -> Optional[pulumi.Input['SBOMReferenceOccurrenceArgs']]:
        """
        This represents an SBOM reference occurrence
        """
        return pulumi.get(self, "sbom_reference")

    @sbom_reference.setter
    def sbom_reference(self, value: Optional[pulumi.Input['SBOMReferenceOccurrenceArgs']]):
        pulumi.set(self, "sbom_reference", value)

    @property
    @pulumi.getter(name="spdxFile")
    def spdx_file(self) -> Optional[pulumi.Input['FileOccurrenceArgs']]:
        """
        Describes a specific SPDX File.
        """
        return pulumi.get(self, "spdx_file")

    @spdx_file.setter
    def spdx_file(self, value: Optional[pulumi.Input['FileOccurrenceArgs']]):
        pulumi.set(self, "spdx_file", value)

    @property
    @pulumi.getter(name="spdxPackage")
    def spdx_package(self) -> Optional[pulumi.Input['PackageInfoOccurrenceArgs']]:
        """
        Describes a specific SPDX Package.
        """
        return pulumi.get(self, "spdx_package")

    @spdx_package.setter
    def spdx_package(self, value: Optional[pulumi.Input['PackageInfoOccurrenceArgs']]):
        pulumi.set(self, "spdx_package", value)

    @property
    @pulumi.getter(name="spdxRelationship")
    def spdx_relationship(self) -> Optional[pulumi.Input['RelationshipOccurrenceArgs']]:
        """
        Describes a specific relationship between SPDX elements.
        """
        return pulumi.get(self, "spdx_relationship")

    @spdx_relationship.setter
    def spdx_relationship(self, value: Optional[pulumi.Input['RelationshipOccurrenceArgs']]):
        pulumi.set(self, "spdx_relationship", value)

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[pulumi.Input['UpgradeOccurrenceArgs']]:
        """
        Describes an upgrade.
        """
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: Optional[pulumi.Input['UpgradeOccurrenceArgs']]):
        pulumi.set(self, "upgrade", value)

    @property
    @pulumi.getter(name="vulnerabilityDetails")
    def vulnerability_details(self) -> Optional[pulumi.Input['VulnerabilityDetailsArgs']]:
        """
        Details of a security vulnerability note.
        """
        return pulumi.get(self, "vulnerability_details")

    @vulnerability_details.setter
    def vulnerability_details(self, value: Optional[pulumi.Input['VulnerabilityDetailsArgs']]):
        pulumi.set(self, "vulnerability_details", value)


class Occurrence(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attestation: Optional[pulumi.Input[pulumi.InputType['AttestationArgs']]] = None,
                 build_details: Optional[pulumi.Input[pulumi.InputType['BuildDetailsArgs']]] = None,
                 compliance: Optional[pulumi.Input[pulumi.InputType['ComplianceOccurrenceArgs']]] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['DeploymentArgs']]] = None,
                 derived_image: Optional[pulumi.Input[pulumi.InputType['DerivedArgs']]] = None,
                 discovered: Optional[pulumi.Input[pulumi.InputType['DiscoveredArgs']]] = None,
                 dsse_attestation: Optional[pulumi.Input[pulumi.InputType['DSSEAttestationOccurrenceArgs']]] = None,
                 envelope: Optional[pulumi.Input[pulumi.InputType['EnvelopeArgs']]] = None,
                 installation: Optional[pulumi.Input[pulumi.InputType['InstallationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 remediation: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[pulumi.InputType['ResourceArgs']]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 sbom: Optional[pulumi.Input[pulumi.InputType['DocumentOccurrenceArgs']]] = None,
                 sbom_reference: Optional[pulumi.Input[pulumi.InputType['SBOMReferenceOccurrenceArgs']]] = None,
                 spdx_file: Optional[pulumi.Input[pulumi.InputType['FileOccurrenceArgs']]] = None,
                 spdx_package: Optional[pulumi.Input[pulumi.InputType['PackageInfoOccurrenceArgs']]] = None,
                 spdx_relationship: Optional[pulumi.Input[pulumi.InputType['RelationshipOccurrenceArgs']]] = None,
                 upgrade: Optional[pulumi.Input[pulumi.InputType['UpgradeOccurrenceArgs']]] = None,
                 vulnerability_details: Optional[pulumi.Input[pulumi.InputType['VulnerabilityDetailsArgs']]] = None,
                 __props__=None):
        """
        Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AttestationArgs']] attestation: Describes an attestation of an artifact.
        :param pulumi.Input[pulumi.InputType['BuildDetailsArgs']] build_details: Build details for a verifiable build.
        :param pulumi.Input[pulumi.InputType['ComplianceOccurrenceArgs']] compliance: Describes whether or not a resource passes compliance checks.
        :param pulumi.Input[pulumi.InputType['DeploymentArgs']] deployment: Describes the deployment of an artifact on a runtime.
        :param pulumi.Input[pulumi.InputType['DerivedArgs']] derived_image: Describes how this resource derives from the basis in the associated note.
        :param pulumi.Input[pulumi.InputType['DiscoveredArgs']] discovered: Describes the initial scan status for this resource.
        :param pulumi.Input[pulumi.InputType['DSSEAttestationOccurrenceArgs']] dsse_attestation: This represents a DSSE attestation occurrence
        :param pulumi.Input[pulumi.InputType['EnvelopeArgs']] envelope: https://github.com/secure-systems-lab/dsse
        :param pulumi.Input[pulumi.InputType['InstallationArgs']] installation: Describes the installation of a package on the linked resource.
        :param pulumi.Input[str] name: The name of the project. Should be of the form "projects/{project_id}". @Deprecated
        :param pulumi.Input[str] note_name: An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
        :param pulumi.Input[str] remediation: A description of actions that can be taken to remedy the `Note`
        :param pulumi.Input[pulumi.InputType['ResourceArgs']] resource:  The resource for which the `Occurrence` applies.
        :param pulumi.Input[str] resource_url: The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
        :param pulumi.Input[pulumi.InputType['DocumentOccurrenceArgs']] sbom: Describes a specific software bill of materials document.
        :param pulumi.Input[pulumi.InputType['SBOMReferenceOccurrenceArgs']] sbom_reference: This represents an SBOM reference occurrence
        :param pulumi.Input[pulumi.InputType['FileOccurrenceArgs']] spdx_file: Describes a specific SPDX File.
        :param pulumi.Input[pulumi.InputType['PackageInfoOccurrenceArgs']] spdx_package: Describes a specific SPDX Package.
        :param pulumi.Input[pulumi.InputType['RelationshipOccurrenceArgs']] spdx_relationship: Describes a specific relationship between SPDX elements.
        :param pulumi.Input[pulumi.InputType['UpgradeOccurrenceArgs']] upgrade: Describes an upgrade.
        :param pulumi.Input[pulumi.InputType['VulnerabilityDetailsArgs']] vulnerability_details: Details of a security vulnerability note.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OccurrenceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.

        :param str resource_name: The name of the resource.
        :param OccurrenceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OccurrenceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attestation: Optional[pulumi.Input[pulumi.InputType['AttestationArgs']]] = None,
                 build_details: Optional[pulumi.Input[pulumi.InputType['BuildDetailsArgs']]] = None,
                 compliance: Optional[pulumi.Input[pulumi.InputType['ComplianceOccurrenceArgs']]] = None,
                 deployment: Optional[pulumi.Input[pulumi.InputType['DeploymentArgs']]] = None,
                 derived_image: Optional[pulumi.Input[pulumi.InputType['DerivedArgs']]] = None,
                 discovered: Optional[pulumi.Input[pulumi.InputType['DiscoveredArgs']]] = None,
                 dsse_attestation: Optional[pulumi.Input[pulumi.InputType['DSSEAttestationOccurrenceArgs']]] = None,
                 envelope: Optional[pulumi.Input[pulumi.InputType['EnvelopeArgs']]] = None,
                 installation: Optional[pulumi.Input[pulumi.InputType['InstallationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 remediation: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[pulumi.InputType['ResourceArgs']]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 sbom: Optional[pulumi.Input[pulumi.InputType['DocumentOccurrenceArgs']]] = None,
                 sbom_reference: Optional[pulumi.Input[pulumi.InputType['SBOMReferenceOccurrenceArgs']]] = None,
                 spdx_file: Optional[pulumi.Input[pulumi.InputType['FileOccurrenceArgs']]] = None,
                 spdx_package: Optional[pulumi.Input[pulumi.InputType['PackageInfoOccurrenceArgs']]] = None,
                 spdx_relationship: Optional[pulumi.Input[pulumi.InputType['RelationshipOccurrenceArgs']]] = None,
                 upgrade: Optional[pulumi.Input[pulumi.InputType['UpgradeOccurrenceArgs']]] = None,
                 vulnerability_details: Optional[pulumi.Input[pulumi.InputType['VulnerabilityDetailsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OccurrenceArgs.__new__(OccurrenceArgs)

            __props__.__dict__["attestation"] = attestation
            __props__.__dict__["build_details"] = build_details
            __props__.__dict__["compliance"] = compliance
            __props__.__dict__["deployment"] = deployment
            __props__.__dict__["derived_image"] = derived_image
            __props__.__dict__["discovered"] = discovered
            __props__.__dict__["dsse_attestation"] = dsse_attestation
            __props__.__dict__["envelope"] = envelope
            __props__.__dict__["installation"] = installation
            __props__.__dict__["name"] = name
            __props__.__dict__["note_name"] = note_name
            __props__.__dict__["project"] = project
            __props__.__dict__["remediation"] = remediation
            __props__.__dict__["resource"] = resource
            __props__.__dict__["resource_url"] = resource_url
            __props__.__dict__["sbom"] = sbom
            __props__.__dict__["sbom_reference"] = sbom_reference
            __props__.__dict__["spdx_file"] = spdx_file
            __props__.__dict__["spdx_package"] = spdx_package
            __props__.__dict__["spdx_relationship"] = spdx_relationship
            __props__.__dict__["upgrade"] = upgrade
            __props__.__dict__["vulnerability_details"] = vulnerability_details
            __props__.__dict__["create_time"] = None
            __props__.__dict__["kind"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Occurrence, __self__).__init__(
            'google-native:containeranalysis/v1alpha1:Occurrence',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Occurrence':
        """
        Get an existing Occurrence resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OccurrenceArgs.__new__(OccurrenceArgs)

        __props__.__dict__["attestation"] = None
        __props__.__dict__["build_details"] = None
        __props__.__dict__["compliance"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["deployment"] = None
        __props__.__dict__["derived_image"] = None
        __props__.__dict__["discovered"] = None
        __props__.__dict__["dsse_attestation"] = None
        __props__.__dict__["envelope"] = None
        __props__.__dict__["installation"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["note_name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["remediation"] = None
        __props__.__dict__["resource"] = None
        __props__.__dict__["resource_url"] = None
        __props__.__dict__["sbom"] = None
        __props__.__dict__["sbom_reference"] = None
        __props__.__dict__["spdx_file"] = None
        __props__.__dict__["spdx_package"] = None
        __props__.__dict__["spdx_relationship"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["upgrade"] = None
        __props__.__dict__["vulnerability_details"] = None
        return Occurrence(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attestation(self) -> pulumi.Output['outputs.AttestationResponse']:
        """
        Describes an attestation of an artifact.
        """
        return pulumi.get(self, "attestation")

    @property
    @pulumi.getter(name="buildDetails")
    def build_details(self) -> pulumi.Output['outputs.BuildDetailsResponse']:
        """
        Build details for a verifiable build.
        """
        return pulumi.get(self, "build_details")

    @property
    @pulumi.getter
    def compliance(self) -> pulumi.Output['outputs.ComplianceOccurrenceResponse']:
        """
        Describes whether or not a resource passes compliance checks.
        """
        return pulumi.get(self, "compliance")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time this `Occurrence` was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def deployment(self) -> pulumi.Output['outputs.DeploymentResponse']:
        """
        Describes the deployment of an artifact on a runtime.
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="derivedImage")
    def derived_image(self) -> pulumi.Output['outputs.DerivedResponse']:
        """
        Describes how this resource derives from the basis in the associated note.
        """
        return pulumi.get(self, "derived_image")

    @property
    @pulumi.getter
    def discovered(self) -> pulumi.Output['outputs.DiscoveredResponse']:
        """
        Describes the initial scan status for this resource.
        """
        return pulumi.get(self, "discovered")

    @property
    @pulumi.getter(name="dsseAttestation")
    def dsse_attestation(self) -> pulumi.Output['outputs.DSSEAttestationOccurrenceResponse']:
        """
        This represents a DSSE attestation occurrence
        """
        return pulumi.get(self, "dsse_attestation")

    @property
    @pulumi.getter
    def envelope(self) -> pulumi.Output['outputs.EnvelopeResponse']:
        """
        https://github.com/secure-systems-lab/dsse
        """
        return pulumi.get(self, "envelope")

    @property
    @pulumi.getter
    def installation(self) -> pulumi.Output['outputs.InstallationResponse']:
        """
        Describes the installation of a package on the linked resource.
        """
        return pulumi.get(self, "installation")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the project. Should be of the form "projects/{project_id}". @Deprecated
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noteName")
    def note_name(self) -> pulumi.Output[str]:
        """
        An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "note_name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def remediation(self) -> pulumi.Output[str]:
        """
        A description of actions that can be taken to remedy the `Note`
        """
        return pulumi.get(self, "remediation")

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output['outputs.ResourceResponse']:
        """
         The resource for which the `Occurrence` applies.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> pulumi.Output[str]:
        """
        The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "resource_url")

    @property
    @pulumi.getter
    def sbom(self) -> pulumi.Output['outputs.DocumentOccurrenceResponse']:
        """
        Describes a specific software bill of materials document.
        """
        return pulumi.get(self, "sbom")

    @property
    @pulumi.getter(name="sbomReference")
    def sbom_reference(self) -> pulumi.Output['outputs.SBOMReferenceOccurrenceResponse']:
        """
        This represents an SBOM reference occurrence
        """
        return pulumi.get(self, "sbom_reference")

    @property
    @pulumi.getter(name="spdxFile")
    def spdx_file(self) -> pulumi.Output['outputs.FileOccurrenceResponse']:
        """
        Describes a specific SPDX File.
        """
        return pulumi.get(self, "spdx_file")

    @property
    @pulumi.getter(name="spdxPackage")
    def spdx_package(self) -> pulumi.Output['outputs.PackageInfoOccurrenceResponse']:
        """
        Describes a specific SPDX Package.
        """
        return pulumi.get(self, "spdx_package")

    @property
    @pulumi.getter(name="spdxRelationship")
    def spdx_relationship(self) -> pulumi.Output['outputs.RelationshipOccurrenceResponse']:
        """
        Describes a specific relationship between SPDX elements.
        """
        return pulumi.get(self, "spdx_relationship")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time this `Occurrence` was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def upgrade(self) -> pulumi.Output['outputs.UpgradeOccurrenceResponse']:
        """
        Describes an upgrade.
        """
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter(name="vulnerabilityDetails")
    def vulnerability_details(self) -> pulumi.Output['outputs.VulnerabilityDetailsResponse']:
        """
        Details of a security vulnerability note.
        """
        return pulumi.get(self, "vulnerability_details")

