# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNoteResult',
    'AwaitableGetNoteResult',
    'get_note',
    'get_note_output',
]

@pulumi.output_type
class GetNoteResult:
    def __init__(__self__, attestation_authority=None, base_image=None, build_type=None, compliance=None, create_time=None, deployable=None, discovery=None, dsse_attestation=None, expiration_time=None, kind=None, long_description=None, name=None, package=None, related_url=None, sbom=None, sbom_reference=None, short_description=None, spdx_file=None, spdx_package=None, spdx_relationship=None, update_time=None, upgrade=None, vulnerability_assessment=None, vulnerability_type=None):
        if attestation_authority and not isinstance(attestation_authority, dict):
            raise TypeError("Expected argument 'attestation_authority' to be a dict")
        pulumi.set(__self__, "attestation_authority", attestation_authority)
        if base_image and not isinstance(base_image, dict):
            raise TypeError("Expected argument 'base_image' to be a dict")
        pulumi.set(__self__, "base_image", base_image)
        if build_type and not isinstance(build_type, dict):
            raise TypeError("Expected argument 'build_type' to be a dict")
        pulumi.set(__self__, "build_type", build_type)
        if compliance and not isinstance(compliance, dict):
            raise TypeError("Expected argument 'compliance' to be a dict")
        pulumi.set(__self__, "compliance", compliance)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deployable and not isinstance(deployable, dict):
            raise TypeError("Expected argument 'deployable' to be a dict")
        pulumi.set(__self__, "deployable", deployable)
        if discovery and not isinstance(discovery, dict):
            raise TypeError("Expected argument 'discovery' to be a dict")
        pulumi.set(__self__, "discovery", discovery)
        if dsse_attestation and not isinstance(dsse_attestation, dict):
            raise TypeError("Expected argument 'dsse_attestation' to be a dict")
        pulumi.set(__self__, "dsse_attestation", dsse_attestation)
        if expiration_time and not isinstance(expiration_time, str):
            raise TypeError("Expected argument 'expiration_time' to be a str")
        pulumi.set(__self__, "expiration_time", expiration_time)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if long_description and not isinstance(long_description, str):
            raise TypeError("Expected argument 'long_description' to be a str")
        pulumi.set(__self__, "long_description", long_description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package and not isinstance(package, dict):
            raise TypeError("Expected argument 'package' to be a dict")
        pulumi.set(__self__, "package", package)
        if related_url and not isinstance(related_url, list):
            raise TypeError("Expected argument 'related_url' to be a list")
        pulumi.set(__self__, "related_url", related_url)
        if sbom and not isinstance(sbom, dict):
            raise TypeError("Expected argument 'sbom' to be a dict")
        pulumi.set(__self__, "sbom", sbom)
        if sbom_reference and not isinstance(sbom_reference, dict):
            raise TypeError("Expected argument 'sbom_reference' to be a dict")
        pulumi.set(__self__, "sbom_reference", sbom_reference)
        if short_description and not isinstance(short_description, str):
            raise TypeError("Expected argument 'short_description' to be a str")
        pulumi.set(__self__, "short_description", short_description)
        if spdx_file and not isinstance(spdx_file, dict):
            raise TypeError("Expected argument 'spdx_file' to be a dict")
        pulumi.set(__self__, "spdx_file", spdx_file)
        if spdx_package and not isinstance(spdx_package, dict):
            raise TypeError("Expected argument 'spdx_package' to be a dict")
        pulumi.set(__self__, "spdx_package", spdx_package)
        if spdx_relationship and not isinstance(spdx_relationship, dict):
            raise TypeError("Expected argument 'spdx_relationship' to be a dict")
        pulumi.set(__self__, "spdx_relationship", spdx_relationship)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if upgrade and not isinstance(upgrade, dict):
            raise TypeError("Expected argument 'upgrade' to be a dict")
        pulumi.set(__self__, "upgrade", upgrade)
        if vulnerability_assessment and not isinstance(vulnerability_assessment, dict):
            raise TypeError("Expected argument 'vulnerability_assessment' to be a dict")
        pulumi.set(__self__, "vulnerability_assessment", vulnerability_assessment)
        if vulnerability_type and not isinstance(vulnerability_type, dict):
            raise TypeError("Expected argument 'vulnerability_type' to be a dict")
        pulumi.set(__self__, "vulnerability_type", vulnerability_type)

    @property
    @pulumi.getter(name="attestationAuthority")
    def attestation_authority(self) -> 'outputs.AttestationAuthorityResponse':
        """
        A note describing an attestation role.
        """
        return pulumi.get(self, "attestation_authority")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> 'outputs.BasisResponse':
        """
        A note describing a base image.
        """
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> 'outputs.BuildTypeResponse':
        """
        Build provenance type for a verifiable build.
        """
        return pulumi.get(self, "build_type")

    @property
    @pulumi.getter
    def compliance(self) -> 'outputs.ComplianceNoteResponse':
        """
        A note describing a compliance check.
        """
        return pulumi.get(self, "compliance")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time this note was created. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def deployable(self) -> 'outputs.DeployableResponse':
        """
        A note describing something that can be deployed.
        """
        return pulumi.get(self, "deployable")

    @property
    @pulumi.getter
    def discovery(self) -> 'outputs.DiscoveryResponse':
        """
        A note describing a provider/analysis type.
        """
        return pulumi.get(self, "discovery")

    @property
    @pulumi.getter(name="dsseAttestation")
    def dsse_attestation(self) -> 'outputs.DSSEAttestationNoteResponse':
        """
        A note describing a dsse attestation note.
        """
        return pulumi.get(self, "dsse_attestation")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> str:
        """
        Time of expiration for this note, null if note does not expire.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> str:
        """
        A detailed description of this `Note`.
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def package(self) -> 'outputs.PackageResponse':
        """
        A note describing a package hosted by various package managers.
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="relatedUrl")
    def related_url(self) -> Sequence['outputs.RelatedUrlResponse']:
        """
        URLs associated with this note
        """
        return pulumi.get(self, "related_url")

    @property
    @pulumi.getter
    def sbom(self) -> 'outputs.DocumentNoteResponse':
        """
        A note describing a software bill of materials.
        """
        return pulumi.get(self, "sbom")

    @property
    @pulumi.getter(name="sbomReference")
    def sbom_reference(self) -> 'outputs.SBOMReferenceNoteResponse':
        """
        A note describing a reference to an SBOM.
        """
        return pulumi.get(self, "sbom_reference")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        """
        A one sentence description of this `Note`.
        """
        return pulumi.get(self, "short_description")

    @property
    @pulumi.getter(name="spdxFile")
    def spdx_file(self) -> 'outputs.FileNoteResponse':
        """
        A note describing an SPDX File.
        """
        return pulumi.get(self, "spdx_file")

    @property
    @pulumi.getter(name="spdxPackage")
    def spdx_package(self) -> 'outputs.PackageInfoNoteResponse':
        """
        A note describing an SPDX Package.
        """
        return pulumi.get(self, "spdx_package")

    @property
    @pulumi.getter(name="spdxRelationship")
    def spdx_relationship(self) -> 'outputs.RelationshipNoteResponse':
        """
        A note describing a relationship between SPDX elements.
        """
        return pulumi.get(self, "spdx_relationship")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time this note was last updated. This field can be used as a filter in list requests.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def upgrade(self) -> 'outputs.UpgradeNoteResponse':
        """
        A note describing an upgrade.
        """
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter(name="vulnerabilityAssessment")
    def vulnerability_assessment(self) -> 'outputs.VulnerabilityAssessmentNoteResponse':
        """
        A note describing a vulnerability assessment.
        """
        return pulumi.get(self, "vulnerability_assessment")

    @property
    @pulumi.getter(name="vulnerabilityType")
    def vulnerability_type(self) -> 'outputs.VulnerabilityTypeResponse':
        """
        A package vulnerability type of note.
        """
        return pulumi.get(self, "vulnerability_type")


class AwaitableGetNoteResult(GetNoteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNoteResult(
            attestation_authority=self.attestation_authority,
            base_image=self.base_image,
            build_type=self.build_type,
            compliance=self.compliance,
            create_time=self.create_time,
            deployable=self.deployable,
            discovery=self.discovery,
            dsse_attestation=self.dsse_attestation,
            expiration_time=self.expiration_time,
            kind=self.kind,
            long_description=self.long_description,
            name=self.name,
            package=self.package,
            related_url=self.related_url,
            sbom=self.sbom,
            sbom_reference=self.sbom_reference,
            short_description=self.short_description,
            spdx_file=self.spdx_file,
            spdx_package=self.spdx_package,
            spdx_relationship=self.spdx_relationship,
            update_time=self.update_time,
            upgrade=self.upgrade,
            vulnerability_assessment=self.vulnerability_assessment,
            vulnerability_type=self.vulnerability_type)


def get_note(note_id: Optional[str] = None,
             project: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNoteResult:
    """
    Returns the requested `Note`.
    """
    __args__ = dict()
    __args__['noteId'] = note_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:containeranalysis/v1alpha1:getNote', __args__, opts=opts, typ=GetNoteResult).value

    return AwaitableGetNoteResult(
        attestation_authority=pulumi.get(__ret__, 'attestation_authority'),
        base_image=pulumi.get(__ret__, 'base_image'),
        build_type=pulumi.get(__ret__, 'build_type'),
        compliance=pulumi.get(__ret__, 'compliance'),
        create_time=pulumi.get(__ret__, 'create_time'),
        deployable=pulumi.get(__ret__, 'deployable'),
        discovery=pulumi.get(__ret__, 'discovery'),
        dsse_attestation=pulumi.get(__ret__, 'dsse_attestation'),
        expiration_time=pulumi.get(__ret__, 'expiration_time'),
        kind=pulumi.get(__ret__, 'kind'),
        long_description=pulumi.get(__ret__, 'long_description'),
        name=pulumi.get(__ret__, 'name'),
        package=pulumi.get(__ret__, 'package'),
        related_url=pulumi.get(__ret__, 'related_url'),
        sbom=pulumi.get(__ret__, 'sbom'),
        sbom_reference=pulumi.get(__ret__, 'sbom_reference'),
        short_description=pulumi.get(__ret__, 'short_description'),
        spdx_file=pulumi.get(__ret__, 'spdx_file'),
        spdx_package=pulumi.get(__ret__, 'spdx_package'),
        spdx_relationship=pulumi.get(__ret__, 'spdx_relationship'),
        update_time=pulumi.get(__ret__, 'update_time'),
        upgrade=pulumi.get(__ret__, 'upgrade'),
        vulnerability_assessment=pulumi.get(__ret__, 'vulnerability_assessment'),
        vulnerability_type=pulumi.get(__ret__, 'vulnerability_type'))


@_utilities.lift_output_func(get_note)
def get_note_output(note_id: Optional[pulumi.Input[str]] = None,
                    project: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNoteResult]:
    """
    Returns the requested `Note`.
    """
    ...
