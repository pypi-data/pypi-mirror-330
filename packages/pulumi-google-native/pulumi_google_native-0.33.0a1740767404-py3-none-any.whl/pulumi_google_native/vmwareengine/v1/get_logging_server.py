# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetLoggingServerResult',
    'AwaitableGetLoggingServerResult',
    'get_logging_server',
    'get_logging_server_output',
]

@pulumi.output_type
class GetLoggingServerResult:
    def __init__(__self__, create_time=None, hostname=None, name=None, port=None, protocol=None, source_type=None, uid=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of this resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Fully-qualified domain name (FQDN) or IP Address of the logging server.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number at which the logging server receives logs.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used by vCenter to send logs to a logging server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The type of component that produces logs that will be forwarded to this logging server.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-generated unique identifier for the resource.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update time of this resource.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetLoggingServerResult(GetLoggingServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoggingServerResult(
            create_time=self.create_time,
            hostname=self.hostname,
            name=self.name,
            port=self.port,
            protocol=self.protocol,
            source_type=self.source_type,
            uid=self.uid,
            update_time=self.update_time)


def get_logging_server(location: Optional[str] = None,
                       logging_server_id: Optional[str] = None,
                       private_cloud_id: Optional[str] = None,
                       project: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoggingServerResult:
    """
    Gets details of a logging server.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['loggingServerId'] = logging_server_id
    __args__['privateCloudId'] = private_cloud_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmwareengine/v1:getLoggingServer', __args__, opts=opts, typ=GetLoggingServerResult).value

    return AwaitableGetLoggingServerResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        hostname=pulumi.get(__ret__, 'hostname'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        source_type=pulumi.get(__ret__, 'source_type'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_logging_server)
def get_logging_server_output(location: Optional[pulumi.Input[str]] = None,
                              logging_server_id: Optional[pulumi.Input[str]] = None,
                              private_cloud_id: Optional[pulumi.Input[str]] = None,
                              project: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoggingServerResult]:
    """
    Gets details of a logging server.
    """
    ...
