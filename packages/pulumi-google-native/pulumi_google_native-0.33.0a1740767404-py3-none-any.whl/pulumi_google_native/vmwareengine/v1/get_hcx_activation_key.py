# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetHcxActivationKeyResult',
    'AwaitableGetHcxActivationKeyResult',
    'get_hcx_activation_key',
    'get_hcx_activation_key_output',
]

@pulumi.output_type
class GetHcxActivationKeyResult:
    def __init__(__self__, activation_key=None, create_time=None, name=None, state=None, uid=None):
        if activation_key and not isinstance(activation_key, str):
            raise TypeError("Expected argument 'activation_key' to be a str")
        pulumi.set(__self__, "activation_key", activation_key)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> str:
        """
        HCX activation key.
        """
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of HCX activation key.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of HCX activation key.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System-generated unique identifier for the resource.
        """
        return pulumi.get(self, "uid")


class AwaitableGetHcxActivationKeyResult(GetHcxActivationKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHcxActivationKeyResult(
            activation_key=self.activation_key,
            create_time=self.create_time,
            name=self.name,
            state=self.state,
            uid=self.uid)


def get_hcx_activation_key(hcx_activation_key_id: Optional[str] = None,
                           location: Optional[str] = None,
                           private_cloud_id: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHcxActivationKeyResult:
    """
    Retrieves a `HcxActivationKey` resource by its resource name.
    """
    __args__ = dict()
    __args__['hcxActivationKeyId'] = hcx_activation_key_id
    __args__['location'] = location
    __args__['privateCloudId'] = private_cloud_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmwareengine/v1:getHcxActivationKey', __args__, opts=opts, typ=GetHcxActivationKeyResult).value

    return AwaitableGetHcxActivationKeyResult(
        activation_key=pulumi.get(__ret__, 'activation_key'),
        create_time=pulumi.get(__ret__, 'create_time'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'))


@_utilities.lift_output_func(get_hcx_activation_key)
def get_hcx_activation_key_output(hcx_activation_key_id: Optional[pulumi.Input[str]] = None,
                                  location: Optional[pulumi.Input[str]] = None,
                                  private_cloud_id: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHcxActivationKeyResult]:
    """
    Retrieves a `HcxActivationKey` resource by its resource name.
    """
    ...
