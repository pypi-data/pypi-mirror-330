# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    def __init__(__self__, display_name=None, invite_link_count=None, name=None, release_count=None, tester_count=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if invite_link_count and not isinstance(invite_link_count, int):
            raise TypeError("Expected argument 'invite_link_count' to be a int")
        pulumi.set(__self__, "invite_link_count", invite_link_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if release_count and not isinstance(release_count, int):
            raise TypeError("Expected argument 'release_count' to be a int")
        pulumi.set(__self__, "release_count", release_count)
        if tester_count and not isinstance(tester_count, int):
            raise TypeError("Expected argument 'tester_count' to be a int")
        pulumi.set(__self__, "tester_count", tester_count)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the group.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="inviteLinkCount")
    def invite_link_count(self) -> int:
        """
        The number of invite links for this group.
        """
        return pulumi.get(self, "invite_link_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the group resource. Format: `projects/{project_number}/groups/{group_alias}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="releaseCount")
    def release_count(self) -> int:
        """
        The number of releases this group is permitted to access.
        """
        return pulumi.get(self, "release_count")

    @property
    @pulumi.getter(name="testerCount")
    def tester_count(self) -> int:
        """
        The number of testers who are members of this group.
        """
        return pulumi.get(self, "tester_count")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            display_name=self.display_name,
            invite_link_count=self.invite_link_count,
            name=self.name,
            release_count=self.release_count,
            tester_count=self.tester_count)


def get_group(group_id: Optional[str] = None,
              project: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    Get a group.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firebaseappdistribution/v1:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        invite_link_count=pulumi.get(__ret__, 'invite_link_count'),
        name=pulumi.get(__ret__, 'name'),
        release_count=pulumi.get(__ret__, 'release_count'),
        tester_count=pulumi.get(__ret__, 'tester_count'))


@_utilities.lift_output_func(get_group)
def get_group_output(group_id: Optional[pulumi.Input[str]] = None,
                     project: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupResult]:
    """
    Get a group.
    """
    ...
