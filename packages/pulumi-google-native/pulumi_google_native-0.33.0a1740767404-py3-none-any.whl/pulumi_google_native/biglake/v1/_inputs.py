# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'HiveDatabaseOptionsArgs',
    'HiveTableOptionsArgs',
    'SerDeInfoArgs',
    'StorageDescriptorArgs',
]

@pulumi.input_type
class HiveDatabaseOptionsArgs:
    def __init__(__self__, *,
                 location_uri: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Options of a Hive database.
        :param pulumi.Input[str] location_uri: Cloud Storage folder URI where the database data is stored, starting with "gs://".
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Stores user supplied Hive database parameters.
        """
        if location_uri is not None:
            pulumi.set(__self__, "location_uri", location_uri)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="locationUri")
    def location_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage folder URI where the database data is stored, starting with "gs://".
        """
        return pulumi.get(self, "location_uri")

    @location_uri.setter
    def location_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_uri", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores user supplied Hive database parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class HiveTableOptionsArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 storage_descriptor: Optional[pulumi.Input['StorageDescriptorArgs']] = None,
                 table_type: Optional[pulumi.Input[str]] = None):
        """
        Options of a Hive table.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: Stores user supplied Hive table parameters.
        :param pulumi.Input['StorageDescriptorArgs'] storage_descriptor: Stores physical storage information of the data.
        :param pulumi.Input[str] table_type: Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if storage_descriptor is not None:
            pulumi.set(__self__, "storage_descriptor", storage_descriptor)
        if table_type is not None:
            pulumi.set(__self__, "table_type", table_type)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Stores user supplied Hive table parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="storageDescriptor")
    def storage_descriptor(self) -> Optional[pulumi.Input['StorageDescriptorArgs']]:
        """
        Stores physical storage information of the data.
        """
        return pulumi.get(self, "storage_descriptor")

    @storage_descriptor.setter
    def storage_descriptor(self, value: Optional[pulumi.Input['StorageDescriptorArgs']]):
        pulumi.set(self, "storage_descriptor", value)

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> Optional[pulumi.Input[str]]:
        """
        Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.
        """
        return pulumi.get(self, "table_type")

    @table_type.setter
    def table_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_type", value)


@pulumi.input_type
class SerDeInfoArgs:
    def __init__(__self__, *,
                 serialization_lib: Optional[pulumi.Input[str]] = None):
        """
        Serializer and deserializer information.
        :param pulumi.Input[str] serialization_lib: The fully qualified Java class name of the serialization library.
        """
        if serialization_lib is not None:
            pulumi.set(__self__, "serialization_lib", serialization_lib)

    @property
    @pulumi.getter(name="serializationLib")
    def serialization_lib(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified Java class name of the serialization library.
        """
        return pulumi.get(self, "serialization_lib")

    @serialization_lib.setter
    def serialization_lib(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serialization_lib", value)


@pulumi.input_type
class StorageDescriptorArgs:
    def __init__(__self__, *,
                 input_format: Optional[pulumi.Input[str]] = None,
                 location_uri: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 serde_info: Optional[pulumi.Input['SerDeInfoArgs']] = None):
        """
        Stores physical storage information of the data.
        :param pulumi.Input[str] input_format: The fully qualified Java class name of the input format.
        :param pulumi.Input[str] location_uri: Cloud Storage folder URI where the table data is stored, starting with "gs://".
        :param pulumi.Input[str] output_format: The fully qualified Java class name of the output format.
        :param pulumi.Input['SerDeInfoArgs'] serde_info: Serializer and deserializer information.
        """
        if input_format is not None:
            pulumi.set(__self__, "input_format", input_format)
        if location_uri is not None:
            pulumi.set(__self__, "location_uri", location_uri)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if serde_info is not None:
            pulumi.set(__self__, "serde_info", serde_info)

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified Java class name of the input format.
        """
        return pulumi.get(self, "input_format")

    @input_format.setter
    def input_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_format", value)

    @property
    @pulumi.getter(name="locationUri")
    def location_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage folder URI where the table data is stored, starting with "gs://".
        """
        return pulumi.get(self, "location_uri")

    @location_uri.setter
    def location_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_uri", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified Java class name of the output format.
        """
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="serdeInfo")
    def serde_info(self) -> Optional[pulumi.Input['SerDeInfoArgs']]:
        """
        Serializer and deserializer information.
        """
        return pulumi.get(self, "serde_info")

    @serde_info.setter
    def serde_info(self, value: Optional[pulumi.Input['SerDeInfoArgs']]):
        pulumi.set(self, "serde_info", value)


