Metadata-Version: 2.2
Name: convolution-reverb
Version: 0.1.5
Summary: A Python package for applying convolution reverb to audio files using PyTorch
Author-email: Your Name <your.email@example.com>
License: MIT License
        
        Copyright (c) 2025 HANCE
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/yourusername/convolution-reverb
Project-URL: Repository, https://github.com/yourusername/convolution-reverb.git
Keywords: audio,reverb,convolution,pytorch,torchaudio
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=2.0.0
Requires-Dist: torchaudio>=2.0.0

# Convolution Reverb

A Python package for applying convolution reverb to audio files using PyTorch. This package provides an efficient implementation of convolution reverb using FFT-based convolution.

## Installation

Install the package using pip:

```bash
pip install convolution-reverb
```


## Requirements

- Python >= 3.8
- PyTorch >= 2.0.0
- torchaudio >= 2.0.0

See `requirements.txt`.

## Usage

### Basic Usage

```python
from convolution_reverb import apply_reverb
import torchaudio

# Load audio files
audio_path = "path/to/your/audio.wav"
ir_path = "path/to/your/impulse_response.wav"
output_path = "output.wav"

# Apply reverb
original, convolved, sample_rate = apply_reverb(
    audio_path=audio_path,
    ir_path=ir_path,
    output_path=output_path,
)
```

### Working with Tensors Directly

If you're already working with audio tensors in PyTorch:

```python
import torch
import torchaudio
from convolution_reverb import apply_reverb

# Load a sample audio, impulse response
audio_wav, audio_wav_sr = torchaudio.load("path/to/your/audio.wav")
ir_tensor, ir_sr = torchaudio.load("path/to/your/impulse_response.wav")

# Apply reverb
original, convolved, sr = apply_reverb(
    audio_wav=audio_tensor,
    audio_wav_sr=audio_wav_sr,
    ir_wav=ir_tensor,
    ir_wav_sr=ir_sr,
    output_path=output_path,
)
```

## API Reference

### apply_reverb

```python
apply_reverb(
    audio_path: Union[str, None] = None,
    audio_wav: Union[torch.Tensor, None] = None,
    audio_wav_sr: Union[int, None] = None,
    ir_path: Union[str, None] = None,
    ir_wav: Union[torch.Tensor, None] = None,
    ir_wav_sr: Union[int, None] = None,
    output_path: Union[str, None] = None,
    use_partitioned: bool = True,
    block_size: Optional[int] = None,
    normalize: bool = False
) -> Tuple[torch.Tensor, torch.Tensor, int]
```

#### Parameters:
- `audio_path`: Path to the input audio file
- `audio_wav`: Input audio as a torch.Tensor (n_channels, n_samples)
- `audio_wav_sr`: Sampling rate of the input audio tensor
- `ir_path`: Path to the impulse response file
- `ir_wav`: Impulse response as a torch.Tensor (n_channels, n_samples)
- `ir_wav_sr`: Sampling rate of the impulse response tensor
- `output_path`: Path where the output audio will be saved
- `use_partitioned`: If True, uses partitioned convolution (overlapâ€‘add) to avoid potential numerical precision issues with large FFT blocks. Recommended for long audio signals.
- `block_size`: Block size (in samples) for partitioned convolution. If not provided and use_partitioned is True, defaults to 10 seconds of audio.
- `normalize`: Whether to normalize the output audio

#### Returns:
- Tuple containing:
  - Original audio waveform (torch.Tensor)
  - Convolved audio waveform (torch.Tensor)
  - Sample rate (int)
  
