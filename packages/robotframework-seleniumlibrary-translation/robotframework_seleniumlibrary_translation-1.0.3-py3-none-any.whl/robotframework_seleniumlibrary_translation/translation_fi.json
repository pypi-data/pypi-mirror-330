{
    "alert_should_be_present": {
        "name": "hälytyksen_tulisi_olla_läsnä",
        "doc": "Varmistaa, että hälytys on läsnä ja hyväksyy sen oletuksena.\n\n        Epäonnistuu, jos hälytystä ei ole läsnä. Jos ``teksti`` on ei-tyhjä merkkijono,\n        sitä käytetään hälytysviestin vahvistamiseen. Hälytys hyväksytään\n        oletuksena, mutta tätä toimintaa voidaan hallita käyttämällä\n        ``toiminto``-argumenttia samalla tavalla kuin `Handle Alert`-toiminnossa.\n\n        ``aikakatkaisu`` määrittää, kuinka kauan odotetaan hälytyksen ilmestymistä.\n        Jos sitä ei anneta, käytetään globaalia oletus `aikakatkaisua`.\n\n        ``toiminto`` ja ``aikakatkaisu`` -argumentit ovat uusia SeleniumLibrary 3.0:ssa.\n        Aikaisemmissa versioissa hälytys hyväksyttiin aina ja aikakatkaisu oli\n        kiinteästi yksi sekunti.\n        ",
        "sha256": "c2389ab996f30509c4a5951f32dcfe2c8630040e00cedba19e19faa76a15299d"
    },
    "alert_should_not_be_present": {
        "name": "hälytyksen_ei_tulisi_olla_läsnä",
        "doc": "Varmistaa, että hälytys ei ole läsnä.\n\n        Jos hälytys on olemassa, ``toiminto``-argumentti määrittää,\n        kuinka se tulisi käsitellä. Oletuksena hälytys hyväksytään, mutta\n        se voidaan myös hylätä tai jättää avoimeksi samalla tavalla kuin\n        `Handle Alert` -avainsanan kanssa.\n\n        ``aikakatkaisu`` määrittää, kuinka kauan odotetaan hälytyksen ilmestymistä.\n        Oletuksena hälytystä ei odoteta lainkaan, mutta mukautettu aika voidaan\n        antaa, jos hälytys voi viivästyä. Katso `aikamuodon` osio\n        saadaksesi tietoa syntaksista.\n\n        Uutta SeleniumLibrary 3.0:ssa.\n        ",
        "sha256": "75343dfda0a68c40607e961ead1e104553ba074110f33627131125e8c11ecef0"
    },
    "handle_alert": {
        "name": "käsittele_hälytys",
        "doc": "Käsittelee nykyisen hälytyksen ja palauttaa sen viestin.\n\n        Oletuksena hälytys hyväksytään, mutta tätä voidaan hallita\n        ``toiminto``-argumentilla, joka tukee seuraavia\n        kirjainkoolla erottelemattomia arvoja:\n\n        - ``ACCEPT``: Hyväksy hälytys eli paina ``Ok``. Oletus.\n        - ``DISMISS``: Hylkää hälytys eli paina ``Peruuta``.\n        - ``LEAVE``: Jätä hälytys auki.\n\n        ``aikakatkaisu``-argumentti määrittää, kuinka kauan odotetaan hälytyksen\n        ilmestymistä. Jos sitä ei anneta, käytetään globaalia oletus `aikakatkaisua`.\n\n        Esimerkkejä:\n        | Handle Alert |                |       | # Hyväksy hälytys.  |\n        | Handle Alert | toiminto=DISMISS |       | # Hylkää hälytys. |\n        | Handle Alert | aikakatkaisu=10 s   |       | # Käytä mukautettua aikakatkaisua ja hyväksy hälytys.  |\n        | Handle Alert | DISMISS        | 1 min | # Käytä mukautettua aikakatkaisua ja hylkää hälytys. |\n        | ${viesti} = | Handle Alert   |       | # Hyväksy hälytys ja saa sen viesti.     |\n        | ${viesti} = | Handle Alert   | LEAVE | # Jätä hälytys auki ja saa sen viesti. |\n\n        Uutta SeleniumLibrary 3.0:ssa.\n        ",
        "sha256": "7620b9059b37d2cb1d5823256d0f71d32d3f66af153d6be8ff5100219d4270d6"
    },
    "input_text_into_alert": {
        "name": "kirjoita_teksti_hälytykseen",
        "doc": "Kirjoittaa annetun ``tekstin`` hälytyksen syöttökenttään.\n\n        Hälytys hyväksytään oletuksena, mutta tätä toimintaa voidaan hallita\n        käyttämällä ``toiminto``-argumenttia samalla tavalla kuin `Handle Alert`-toiminnossa.\n\n        ``aikakatkaisu`` määrittää, kuinka kauan odotetaan hälytyksen ilmestymistä.\n        Jos sitä ei anneta, käytetään globaalia oletus `aikakatkaisua`.\n\n        Uutta SeleniumLibrary 3.0:ssa.\n        ",
        "sha256": "77f522107ebbde4fbcca0e9d1f1e31911dad7f3256ea39d078ed3365cfefbc46"
    },
    "close_all_browsers": {
        "name": "sulje_kaikki_selaimet",
        "doc": "Sulkee kaikki avoimet selaimet ja nollaa selaimen välimuistin.\n\n        Tämän avainsanan jälkeen, uudet `Avaa selain` -avainsanan palauttamat\n        indeksit nollataan arvoon 1.\n\n        Tätä avainsanaa tulisi käyttää testin tai ryhmän purussa\n        varmistaaksesi, että kaikki selaimet suljetaan.\n        ",
        "sha256": "34bfcab8a0c99c9fc0ebeeaec4432664ab8fbcc99673bd4bb3f9be2e897dbb5b"
    },
    "close_browser": {
        "name": "sulje_selain",
        "doc": "Sulkee nykyisen selaimen.",
        "sha256": "a13d34e21bad1e0a76dab6f27c3f8b803825b8996c989f5b106918e27f0d0eb1"
    },
    "create_webdriver": {
        "name": "luo_webdriver",
        "doc": "Luo Selenium WebDriver -instanssin.\n\n        Kuten `Avaa selain`, mutta mahdollistaa argumenttien välittämisen\n        suoraan luotavalle WebDriver-instanssille. Tätä avainsanaa tulisi käyttää\n        vain, jos `Avaa selain` -toiminnon tarjoama toiminnallisuus ei ole riittävä.\n\n        ``driver_name`` täytyy olla WebDriver-toteutuksen nimi kuten Firefox,\n        Chrome, Ie, Edge, Safari tai Remote.\n\n        Alustettu WebDriver voidaan konfiguroida joko Python-sanakirjalla ``kwargs``\n        tai käyttämällä avainsana-argumentteja ``**init_kwargs``. Nämä argumentit\n        välitetään suoraan WebDriverille ilman mitään käsittelyä. Katso [https://seleniumhq.github.io/selenium/docs/api/py/api.html|\n        Selenium API -dokumentaatio] saadaksesi lisätietoja tuetuista argumenteista.\n\n        Esimerkkejä:\n        | # Käytä proxyä Firefoxin kanssa   |                |                              |                                      |\n        | ${proxy}=                  | `Arvioi`     | selenium.webdriver.Proxy()   | modules=selenium, selenium.webdriver |\n        | ${proxy.http_proxy}=       | `Aseta muuttuja` | localhost:8888               |                                      |\n        | `Luo Webdriver`         | Firefox        | proxy=${proxy}               |                                      |\n\n        Palauttaa tämän selaininstanssin indeksin, jota voidaan käyttää myöhemmin\n        vaihdettaessa takaisin siihen. Indeksi alkaa 1:stä ja nollataan, kun\n        `Sulje kaikki selaimet` -avainsanaa käytetään. Katso `Vaihda selain` esimerkkiä.\n        ",
        "sha256": "c7efa8a6295acc8336de8f8fdccec61b8a19cfc1b091382753929f9d86d2e292"
    },
    "get_action_chain_delay": {
        "name": "hae_toimintaketjun_viive",
        "doc": "Hakee tällä hetkellä tallennetun chain_delay_value-arvon timestr-muodossa.\n        ",
        "sha256": "167a6689441f92c4099130c03e41a6c1595bcc1a37a207ac0f970b08b1591fdf"
    },
    "get_browser_aliases": {
        "name": "hae_selainaliakset",
        "doc": "Palauttaa aktiivisten selainten aliakset, joilla on alias NormalizedDict-muodossa.\n        Sanakirja sisältää aliakset avaimina ja indeksin arvona.\n        Tähän voi käyttää joko sanakirjaa ``${aliakset.avain}`` tai listaa ``@{aliakset}[0]``.\n\n        Esimerkki:\n        | `Avaa selain` | https://esimerkki.com   | alias=SelainA | |\n        | `Avaa selain` | https://esimerkki.com   | alias=SelainB | |\n        | &{aliakset}     | `Hae selainaliakset` |                | # &{aliakset} = { SelainA=1|SelainB=2 } |\n        | `Loki`          | ${aliakset.SelainA}   |                | # lokittaa ``1`` |\n        | FOR            | ${aliaksu}              | IN             | @{aliakset} |\n        |                | `Loki`                 | ${aliaksu}       | # lokittaa ``SelainA`` ja ``SelainB`` |\n        | LOPPU            |                       |                | |\n\n        Katso lisätietoja ja esimerkkejä kohdasta `Vaihda selain`.\n\n        Uutta SeleniumLibraryssä 4.0:ssa\n        ",
        "sha256": "defef82080de396568467a48c850a3db67484a7b786d8ebd76a3f3ba02c71dff"
    },
    "get_browser_ids": {
        "name": "hae_selain_tunnisteet",
        "doc": "Palauttaa aktiivisten selainten indeksit listana.\n\n        Esimerkki:\n        | @{selaimen_tunnisteet}= | Hae Selaimen Tunnisteet   |                   |                |\n        | FOR             | ${tunniste}             | IN                | @{selaimen_tunnisteet} |\n        |                 | @{ikkunan_otsikot}= | Hae Ikkunan Otsikot | selain=${tunniste}  |\n        |                 | Loki               | Selaimella ${tunniste} on nämä ikkunat: ${ikkunan_otsikot} | |\n        | LOPPU             |                   |                   |                |\n\n        Katso lisätietoja ja esimerkkejä kohdasta `Vaihda selain`.\n\n        Uutta SeleniumLibraryssä 4.0:ssa\n        ",
        "sha256": "c320152b2a66ba066b100fb8c729f3d36c04a5b72ed753b09d29b6e13613a004"
    },
    "get_location": {
        "name": "hae_url",
        "doc": "Palauttaa nykyisen selaimen ikkunan URL-osoitteen.",
        "sha256": "3dda250c7af426a85b6ec9c6be5ec5b4a4df41d4b2c72f0fa53b905384c29fc1"
    },
    "get_selenium_implicit_wait": {
        "name": "hae_selenium_implisiittinen_odotus",
        "doc": "Hakee Seleniumin käyttämän oletusodotusarvon.\n\n        Arvo palautetaan ihmisen luettavassa muodossa kuten ``1 sekunti``.\n\n        Katso lisätietoja yllä olevasta `Oletusodotus` -osasta.\n        ",
        "sha256": "f506381005ec3abf34b359df073e602f6589fac8d030a5369156016bbfacfde2"
    },
    "get_selenium_page_load_timeout": {
        "name": "hae_selenium_sivun_latauksen_aikakatkaisu",
        "doc": "Hakee ajan, jonka odotetaan sivun latauksen suorittamiseen\n        ennen aikakatkaisun aiheuttamista.\n\n        Arvo palautetaan ihmisen luettavassa muodossa kuten ``1 sekunti``.\n\n        Katso lisätietoja yllä olevasta `Sivun lataus` -osasta.\n\n        Uutta SeleniumLibraryssä 6.1:ssa\n        ",
        "sha256": "18d82c9e55e7d06156a7fcccd2f96ddd6185a4c3625c344073a3f3e33d6e1e72"
    },
    "get_selenium_speed": {
        "name": "hae_selenium_nopeus",
        "doc": "Hakee viiveen, joka odotetaan jokaisen Selenium-komennon jälkeen.\n\n        Arvo palautetaan ihmisen luettavassa muodossa kuten ``1 sekunti``.\n\n        Katso lisätietoja yllä olevasta `Selenium-nopeus` -osasta.\n        ",
        "sha256": "e310cfaddced1d3088b673df4c7c469f10d3992116e2fabe048be986462febc5"
    },
    "get_selenium_timeout": {
        "name": "hae_selenium_aikakatkaisu",
        "doc": "Hakee aikakatkaisun, jota käytetään eri avainsanoissa.\n\n        Arvo palautetaan ihmisen luettavassa muodossa kuten ``1 sekunti``.\n\n        Katso lisätietoja yllä olevasta `Aikakatkaisu` -osasta.\n        ",
        "sha256": "9ebe70c2d1751c70d0f646c8c0e91e3c924ae6062c4c961432405b1fa2e0efe3"
    },
    "get_session_id": {
        "name": "hae_istunnon_tunniste",
        "doc": "Palauttaa tällä hetkellä aktiivisen selainistunnon tunnisteen.\n\n        Uutta SeleniumLibraryssä 3.2:ssa\n        ",
        "sha256": "26f4581c49c3930c0bbc7ff188330eff3bdb9822556ed029c8b47e5cb75949d2"
    },
    "get_source": {
        "name": "hae_lähde",
        "doc": "Palauttaa nykyisen sivun tai kehyksen koko HTML-lähteen.",
        "sha256": "186bf0854602fddcbf9400b50a6db19549cfa23171c01e4708702cbfeaf4a921"
    },
    "get_title": {
        "name": "hae_otsikko",
        "doc": "Palauttaa nykyisen sivun otsikon.",
        "sha256": "15ca2c42f74a7447ac29d6431219afa7b827245f9bd45e8d220c597c8c76ea72"
    },
    "go_back": {
        "name": "mene_takaisin",
        "doc": "Simuloi käyttäjän selaimensa takaisin-painikkeen painallusta.",
        "sha256": "c1ad3668ded03441f5e9019fe3e6417d6c0786fad522ef2d126b233112436ae7"
    },
    "go_to": {
        "name": "mene",
        "doc": "Navigoi nykyisen selainikkunan annettuun ``url``-osoitteeseen.",
        "sha256": "c7db5e459ba7a16a1e895bd0a948765b75bfc536284a2a50ac02e7153ccb0450"
    },
    "location_should_be": {
        "name": "sijainnin_pitäisi_olla",
        "doc": "Varmistaa, että nykyinen URL on täsmälleen ``url``.\n\n        ``url``-argumentti sisältää tarkan URL-osoitteen, jonka pitäisi näkyä selaimessa.\n\n        ``message``-argumenttia voidaan käyttää oletusvirheilmoituksen\n        korvaamiseen.\n\n        ``message``-argumentti on uusi SeleniumLibrary 3.2.0:ssa.\n        ",
        "sha256": "ea4b77e8386a52d7881a76cc42cf6c7754da4c44f1b54aa8d71467770a919839"
    },
    "location_should_contain": {
        "name": "sijainnin_pitäisi_sisältää",
        "doc": "Varmistaa, että nykyinen URL sisältää ``expected``.\n\n        ``expected``-argumentti sisältää URL-osoitteessa odotetun arvon.\n\n        ``message``-argumenttia voidaan käyttää oletusvirheilmoituksen\n        korvaamiseen.\n\n        ``message``-argumentti on uusi SeleniumLibrary 3.2.0:ssa.\n        ",
        "sha256": "be7e648ca2a1f5a7d83f5fe99d0e9aef696f0c645b57985059179476c4d1d0ed"
    },
    "log_location": {
        "name": "kirjaa_sijainti",
        "doc": "Kirjaa ja palauttaa nykyisen selainikkunan URL-osoitteen.",
        "sha256": "ecdeee422f6587f42650730b5d1510d9f207cda56a2346fa3f6245ad62f4bac5"
    },
    "log_source": {
        "name": "kirjaa_lähde",
        "doc": "Kirjaa ja palauttaa nykyisen sivun tai kehyksen HTML-lähdekoodin.\n\n        ``loglevel``-argumentti määrittää käytetyn lokitason. Voimassa olevat\n        lokitasot ovat ``WARN``, ``INFO`` (oletus), ``DEBUG``, ``TRACE``\n        ja ``NONE`` (ei lokitusta).\n        ",
        "sha256": "ccfb24c918224eb021f3f020cd9dd1375b128835d8295fc0a40d7f76c628d0b7"
    },
    "log_title": {
        "name": "kirjaa_otsikko",
        "doc": "Kirjaa ja palauttaa nykyisen sivun otsikon.",
        "sha256": "3722f0e150770d3b876af7a430c3a0e22f09a3b847c61b467cce146ed64ceea5"
    },
    "open_browser": {
        "name": "avaa_selain",
        "doc": "Avaa uuden selainistunnon valinnaiseen ``url``-osoitteeseen.\n\n        ``browser``-argumentti määrittää, mitä selainta käytetään.\n        Tuetut selaimet on lueteltu alla olevassa taulukossa. Selainten nimet\n        eivät ole kirjainkoolle herkkiä ja joillakin selaimilla on useita tuettuja nimiä.\n\n        |    = Selain =        |        = Nimi/Nimet =           |\n        | Firefox             | firefox, ff                    |\n        | Google Chrome       | googlechrome, chrome, gc       |\n        | Headless Firefox    | headlessfirefox                |\n        | Headless Chrome     | headlesschrome                 |\n        | Internet Explorer   | internetexplorer, ie           |\n        | Edge                | edge                           |\n        | Safari              | safari                         |\n\n        Jotta voit käyttää jotakin näistä selaimista, sinulla täytyy olla\n        yhteensopiva Selenium-selaimen ajuri asennettuna. Katso lisätietoja\n        projektin dokumentaatiosta [https://github.com/robotframework/SeleniumLibrary#browser-drivers|\n        projektin dokumentaatio].\n\n        Selaimen avaamisen jälkeen on mahdollista käyttää valinnaista\n        ``url``-osoitetta selaimen ohjaamiseksi haluttuun osoitteeseen.\n\n        Esimerkkejä:\n        | `Open Browser` | http://example.com | Chrome  |                                         |\n        | `Open Browser` | http://example.com | Firefox | alias=Firefox                           |\n        | `Open Browser` | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |\n        | `Open Browser` | about:blank        |         |                                         |\n        | `Open Browser` | browser=Chrome     |         |                                         |\n\n        Valinnainen ``alias`` on tämän selainistunnon alias, jota voidaan käyttää selainten välillä siirtymiseen. Kun sama ``alias``\n        annetaan kahdella `Open Browser` -avaimella, ensimmäinen avain avaa uuden selaimen, mutta toinen vaihtaa jo avoinna olevaan selaimeen eikä avaa uutta. ``Alias``-määrittely ohittaa ``browser``-määrittelyn. Kun samaa ``alias`` käytetään mutta eri ``browser`` määritetään, vaihto saman aliaksen selaimeen tehdään eikä uutta selainta avata.\n        Vaihtoehtoinen lähestymistapa vaihtamiseen on käyttää tämän avainsanan palauttamaa indeksiä. Nämä indeksit alkavat numerosta 1, kasvavat uusien selainten avaamisen yhteydessä ja palautuvat takaisin 1:een, kun `Close All Browsers` -toimintoa kutsutaan. Katso lisätietoja ja esimerkkejä `Switch Browser` -toiminnosta.\n\n        Alias-esimerkkejä:\n        | ${1_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Avaa uuden selaimen, koska alias on uusi.         |\n        | ${2_index} =    | `Open Browser` | http://example.com | Firefox |                  | # Avaa uuden selaimen, koska aliasa ei ole määritelty. |\n        | ${3_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Vaihtaa selaimeen, jossa on Chrome-aliaksella.      |\n        | ${4_index} =    | `Open Browser` | http://example.com | Chrome  | alias=${1_index} | # Vaihtaa selaimeen, jossa on Chrome-aliaksella.      |\n        | Should Be Equal | ${1_index}     | ${3_index}         |         |                  |                                                   |\n        | Should Be Equal | ${1_index}     | ${4_index}         |         |                  |                                                   |\n        | Should Be Equal | ${2_index}     | ${2}               |         |                  |                                                   |\n\n        Valinnainen ``remote_url`` on URL-osoite\n        [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].\n\n        Valinnainen ``desired_capabilities`` on vanhentunut ja poistetaan seuraavassa julkaisussa. Yksittäisen selaimen ominaisuudet määritetään nyt options- tai services-argumenttien kautta. Katso selainten määrittelyä koskevat ohjeet alla.\n\n        Valinnainen ``ff_profile_dir`` on Firefox-profiilihakemiston polku, jos haluat korvata oletusprofiilin, jota Selenium käyttää. ``ff_profile_dir`` voi myös olla instanssi\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html|selenium.webdriver.FirefoxProfile]. Kolmantena vaihtoehtona on mahdollista käyttää `FirefoxProfile`-menetelmiä ja -ominaisuuksia profiilin määrittämiseksi menetelmillä ja ominaisuuksilla samalla tavalla kuin ``options``-argumentilla. Esimerkki: On mahdollista käyttää FirefoxProfile `set_preference` -menetelmää eri profiiliasetusten määrittämiseen. Katso alla olevan ``options``-argumentin dokumentaatio ohjeita takalaskujen käsittelystä.\n\n        Esimerkki FirefoxProfilesta\n        | `Open Browser` | http://example.com | Firefox | ff_profile_dir=/path/to/profile                                                  | # Käytetään profiilia levyllä.                       |\n        | `Open Browser` | http://example.com | Firefox | ff_profile_dir=${FirefoxProfile_instance}                                        | # Käytetään FirefoxProfile-instanssia.              |\n        | `Open Browser` | http://example.com | Firefox | ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\") | # Profiilin määrittäminen FirefoxProfilen menetelmillä. |\n\n        Valinnainen ``options``-argumentti sallii selaimen eriteltyjen Selenium-asetusten määrittämisen. Esimerkki Chromesta: ``options``-argumentin avulla voidaan määrittää seuraavat\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|menetelmät ja ominaisuudet]\n        ja Firefoxille\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options|menetelmät ja ominaisuudet]\n        ovat saatavilla. Selenium-asetukset ovat myös tuettuja, kun ``remote_url``-argumenttia käytetään.\n\n        SeleniumLibrary ``options``-argumentti hyväksyy Selenium-asetukset kahdessa eri muodossa: merkkijonona ja Python-objektina, joka on Selenium options -luokan instanssi.\n\n        Merkkijonomuoto käyttää Pythonin kaltaista syntaksia Selenium-asetusten\n        menetelmien tai ominaisuuksien määrittämiseen.\n\n        Esimerkki käytettäessä\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome-asetuksia]\n        menetelmää:\n        | `Open Browser` | http://example.com | Chrome | options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\") | # Merkkijonomuoto.                    |\n        | `Open Browser` | None               | Chrome | options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")          | # Käynnistä Chromium-pohjainen sovellus. |\n        | `Open Browser` | None               | Chrome | options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"                                         | # Windowsin polun pakottaminen.        |\n\n        ``options``-argumentti tukee myös Selenium-asetusten vastaanottamista Python-luokan instanssina.\n\n        Katso `Browser and Driver options` -osio lisätietoja ``options``-argumentin käytöstä joko merkkijono- tai Python-objektimuodossa.\n\n        Valinnainen ``service_log_path`` poistetaan seuraavassa julkaisussa. Käytä selaimen erityistä ``service``-ominaisuutta sen sijaan. ``service_log_path`` -argumentti määrittää tiedoston nimen, johon selaimen ajurilokit kirjoitetaan. Jos ``service_log_path`` -argumentti sisältää merkin ``{index}``, se\n        korvataan automaattisesti ainutlaatuisella juoksevalla\n        indeksillä estääkseen tiedostojen ylikirjoittamisen. Indeksit alkavat numerosta 1, ja niiden esitystapaa voidaan muokata Pythonin\n        [https://docs.python.org/3/library/string.html#format-string-syntax|\n        formaattimerkkijonosyntaksi].\n\n        Valinnainen ``executable_path`` poistetaan seuraavassa julkaisussa. Käytä ``executable_path`` ja tarvittaessa ``port``-ominaisuutta ``service``-argumentissa sen sijaan. ``executable_path``-argumentti määrittää ajurin ajotiedoston polun, esimerkiksi chromedriverin tai geckodriverin. Jos sitä ei määritellä, oletetaan, että ajotiedosto on\n        [https://en.wikipedia.org/wiki/PATH_(variable)|$PATH].\n\n        Valinnainen ``service``-argumentti sallii paikallisten ajurien hallinnan\n        sekä selaimen erikoisasetusten, kuten lokien, määrittämisen. Service-\n        luokkia ei tueta, kun ``remote_url``-argumenttia käytetään. Katso lisätietoja ``service``-argumentin käytöstä\n        `Browser and Driver options` -osiosta.\n\n        Jos tarjotut määritysasetukset eivät riitä, on mahdollista käyttää `Create Webdriver` selaimen mukauttamiseksi vielä enemmän.\n\n        ``service``-argumentti on uusi ominaisuus SeleniumLibrary 6.4:ssa.\n        ",
        "sha256": "735e0ba6f6e5ea356a43384d04dd4445fcc854df1b8a8cbbed93d084e7f23ba2"
    },
    "reload_page": {
        "name": "paivita_sivu",
        "doc": "Simuloi käyttäjän sivun päivittämistä.",
        "sha256": "29308a1588c11a36ee1e46274959c9fb83b01fa628d38f7d1e60615cfa3c1d54"
    },
    "set_action_chain_delay": {
        "name": "aseta_toimintaketjun_viive",
        "doc": "Asettaa SeleniumLibraryn käyttämän ActionChains()-toiminnon viiveen keston.\n\n        Arvo voidaan antaa numerona, joka katsotaan sekunneiksi, tai ihmisen luettavana merkkijonona, kuten ``1 sekunti``.\n\n        Arvo tallennetaan aina sisäisesti millisekunteina.\n\n        Edellinen arvo palautetaan, ja sitä voidaan käyttää alkuperäisen arvon palauttamiseen myöhemmin, jos tarpeen.\n        ",
        "sha256": "30a861e88589e077326d025611cd558432a5426b6b002aface8b8367286eca24"
    },
    "set_browser_implicit_wait": {
        "name": "aseta_selaimen_implisiittinen_odotus",
        "doc": "Asettaa Seleniumin käyttämän implisiittisen odotuksen arvon.\n\n        Sama kuin `Set Selenium Implicit Wait`, mutta vaikuttaa vain nykyiseen\n        selaimeen.\n        ",
        "sha256": "a5097a7357967bebd69e46c700917daaa41994d0235b77da90ce0b88d1bd3518"
    },
    "set_selenium_implicit_wait": {
        "name": "aseta_selenium_implisiittinen_odotus",
        "doc": "Asettaa Seleniumin käyttämän implisiittisen odotuksen arvon.\n\n        Arvo voidaan antaa numerona, joka katsotaan sekunneiksi, tai ihmisen luettavana merkkijonona, kuten ``1 sekunti``.\n        Edellinen arvo palautetaan, ja sitä voidaan käyttää alkuperäisen arvon palauttamiseen myöhemmin, jos tarpeen.\n\n        Tämä avainsana asettaa implisiittisen odotuksen kaikille avonaisille selaimille.\n        Käytä `Aseta Selaimen Implisiittinen Odotus` asettaaksesi sen vain nykyiseen selaimeen.\n\n        Katso lisätietoja yllä olevasta `Implisiittinen odotus` -osiosta.\n\n        Esimerkki:\n        | ${orig odotus} = | `Aseta Selenium Implisiittinen Odotus` | 10 sekuntia |\n        | `Suorita hidas AJAX-kutsu` |\n        | `Aseta Selenium Implisiittinen Odotus` | ${orig odotus} |\n        ",
        "sha256": "1df9421daaba885bd06552d7b62030b285ac8472b98e09e0719554fd2448547c"
    },
    "set_selenium_page_load_timeout": {
        "name": "aseta_selenium_sivun_latauksen_aikakatkaisu",
        "doc": "Asettaa Seleniumin käyttämän sivun latauksen aikakatkaisuarvon.\n\n        Arvo voidaan antaa numerona, joka katsotaan sekunneiksi, tai ihmisen luettavana merkkijonona, kuten ``1 sekunti``.\n        Edellinen arvo palautetaan, ja sitä voidaan käyttää alkuperäisen arvon palauttamiseen myöhemmin, jos tarpeen.\n\n        Toisin kuin `Aseta Selenium Aikakatkaisu` ja `Aseta Selenium Implisiittinen Odotus`,\n        tämä avainsana asettaa ajan, jonka Webdriver odottaa, kunnes sivu on ladattu, ennen kuin nostaa aikakatkaisuvirheen.\n\n        Katso lisätietoja yllä olevasta `Sivun lataus` -osiosta.\n\n        Esimerkki:\n        | ${orig sivun latauksen aikakatkaisu} = | `Aseta Selenium Sivun Latauksen Aikakatkaisu` | 30 sekuntia |\n        | `Avaa hitaasti latautuva sivu` |\n        | `Aseta Selenium Sivun Latauksen Aikakatkaisu` | ${orig sivun latauksen aikakatkaisu} |\n\n        Uusi ominaisuus SeleniumLibraryssa 6.1\n        ",
        "sha256": "37e2b5f6af58ce3b2e1d520c0c2d56b99cadf175dd31f1ccfb05de36c8cfdab0"
    },
    "set_selenium_speed": {
        "name": "aseta_selenium_nopeus",
        "doc": "Asettaa viiveen, joka odotetaan jokaisen Selenium-komennon jälkeen.\n\n        Arvo voidaan antaa numerona, joka katsotaan sekunneiksi, tai ihmisen luettavana merkkijonona, kuten ``1 sekunti``.\n        Edellinen arvo palautetaan, ja sitä voidaan käyttää alkuperäisen arvon palauttamiseen myöhemmin, jos tarpeen.\n\n        Katso lisätietoja yllä olevasta `Selenium Nopeus` -osiosta.\n\n        Esimerkki:\n        | `Aseta Selenium Nopeus` | 0,5 sekuntia |\n        ",
        "sha256": "143bd7c58689c676a711dcf2571cfdd8ee609325264bd632db2945dce3300ae5"
    },
    "set_selenium_timeout": {
        "name": "aseta_selenium_aikakatkaisu",
        "doc": "Asettaa aikakatkaisun, jota käytetään eri avainsanoissa.\n\n        Arvo voidaan antaa numerona, joka katsotaan sekunneiksi, tai ihmisen luettavana merkkijonona, kuten ``1 sekunti``.\n        Edellinen arvo palautetaan, ja sitä voidaan käyttää alkuperäisen arvon palauttamiseen myöhemmin, jos tarpeen.\n\n        Katso lisätietoja yllä olevasta `Aikakatkaisu` -osiosta.\n\n        Esimerkki:\n        | ${orig aikakatkaisu} = | `Aseta Selenium Aikakatkaisu` | 15 sekuntia |\n        | `Avaa hitaasti latautuva sivu` |\n        | `Aseta Selenium Aikakatkaisu` | ${orig aikakatkaisu} |\n        ",
        "sha256": "6e78114e0e60f0148629589b897d6a67b1c492317eb883b2ca4f3c6457a5d01b"
    },
    "switch_browser": {
        "name": "vaihda_selainta",
        "doc": "Vaihdetaan aktiivisten selainten välillä käyttämällä ``index_or_alias``.\n\nIndeksit palauttaa `Avaa selain` -avainsana ja alias voidaan antaa sille erikseen. Indeksit alkavat numerosta 1.\n\nEsimerkki:\n| `Avaa selain`        | http://google.com | ff       |\n| `Sijainnin pitäisi olla`  | http://google.com |          |\n| `Avaa selain`        | http://yahoo.com  | ie       | alias=second |\n| `Sijainnin pitäisi olla`  | http://yahoo.com  |          |\n| `Vaihda selain`      | 1                 | # indeksi |\n| `Sivulla pitäisi olla` | Olen onnekas       |          |\n| `Vaihda selain`      | second            | # alias  |\n| `Sivulla pitäisi olla` | Lisää Yahoo!       |          |\n| `Sulje kaikki selaimet`  |                   |          |\n\nYllä oleva esimerkki olettaa, että muita avoimia selaimia ei ollut, kun ensimmäinen avattiin, koska se käytti indeksiä ``1`` myöhemmin siihen vaihtaessaan. Jos et ole varma siitä, voit tallentaa indeksin muuttujaan alla olevan esimerkin mukaisesti.\n\n| ${index} =         | `Avaa selain` | http://google.com |\n| # Tee jotain ... |                |                   |\n| `Vaihda selain`   | ${index}       |                   |\n",
        "sha256": "de918f9e83ebecafb37ba3704649efb39dfbf405960597e1e99dddffdf69c1fb"
    },
    "title_should_be": {
        "name": "otsikon_pitäisi_olla",
        "doc": "Varmistaa, että nykyisen sivun otsikko on yhtä kuin ``title``.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n\n``message``-argumentti on uusi SeleniumLibrary 3.1:ssä.\n",
        "sha256": "f3ed755ed3bdbb8e7b334bce951620ceb83c3aca1cad51a31b2eea42260e1199"
    },
    "add_cookie": {
        "name": "lisaa_eväste",
        "doc": "Lisää evästeen nykyiseen istuntoosi.\n\n``name`` ja ``value`` ovat pakollisia, ``path``, ``domain``, ``secure`` ja ``expiry`` ovat valinnaisia. Expiry tukee samoja muotoja kuin [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime] -kirjasto tai aikaleima.\n\nEsimerkki:\n| `Lisaa Eväste` | foo | bar |                            |\n| `Lisaa Eväste` | foo | bar | domain=example.com         |\n| `Lisaa Eväste` | foo | bar | expiry=2027-09-28 16:21:35 | # Vanhenemisaika aikaleimana.     |\n| `Lisaa Eväste` | foo | bar | expiry=1822137695          | # Vanhenemisaika epoch-sekunteina. |\n\nEnnen SeleniumLibrary 3.0:aa vanhenemisajan asettaminen ei toiminut.\n",
        "sha256": "4824fdf8e69148f3f74ed2a177fc4417caa1b7d24b5fd55378e8cdbd3ace04a5"
    },
    "delete_all_cookies": {
        "name": "poista_kaikki_evästeet",
        "doc": "Poistaa kaikki evästeet.",
        "sha256": "3300bc6758bd113107fb425664eacbda4143514393c4d4197ac28626592b77c5"
    },
    "delete_cookie": {
        "name": "poista_eväste",
        "doc": "Poistaa evästeen, jonka nimi on ``name``.\n\nJos evästettä ei löydy, mitään ei tapahdu.\n",
        "sha256": "9f69becc9575a4dc10a09bebdcb7405fbfba883c8268c889baca4659ba549d04"
    },
    "get_cookie": {
        "name": "hae_eväste",
        "doc": "Palauttaa evästeen tiedot, jonka nimi on ``name``, objektina.\n\nJos evästettä nimeltä ``name`` ei löydy, avainsana epäonnistuu. Evästeobjekti sisältää tietoja evästeestä. Saatavilla olevat attribuutit objektissa on dokumentoitu alla olevassa taulukossa.\n\n| = Attribuutti = |             = Selitys =                                |\n| name            | Evästeen nimi.                                         |\n| value           | Evästeen arvo.                                         |\n| path            | Ilmaisee URL-polun, esimerkiksi ``/``.                 |\n| domain          | Domain, jossa eväste on näkyvissä.                     |\n| secure          | Kun true, evästettä käytetään vain HTTPS-yhteyksissä.  |\n| httpOnly        | Kun true, eväste ei ole käytettävissä JavaScriptin kautta. |\n| expiry          | Python datetime -objekti, joka ilmaisee, milloin eväste vanhenee. |\n| extra           | Mahdolliset attribuutit WebDriver-spesifikaation ulkopuolella. |\n\nKatso lisätietoja evästeen tiedoista\n[https://w3c.github.io/webdriver/#cookies|WebDriver-spesifikaatiosta].\nHuomaa, että ``expiry`` on määritelty\n[https://docs.python.org/3/library/datetime.html#datetime.datetime|datetime-objektina],\nei sekunteina Unix-epookin alusta kuten WebDriverissä natiivisti.\n\nJoissakin tapauksissa, esimerkiksi ajettaessa selainta pilvessä, on mahdollista, että\neväste sisältää muita attribuutteja kuin mitä on määritelty\n[https://w3c.github.io/webdriver/#cookies|WebDriver-spesifikaatiossa].\nNämä muut attribuutit ovat saatavilla ``extra``-attribuutissa evästeobjektissa ja se sisältää sanakirjan muista attribuuteista. ``Extra``-attribuutti on uusi SeleniumLibrary 4.0:ssa.\n\nEsimerkki:\n| `Lisaa Eväste`      | foo             | bar |\n| ${eväste} =         | `Hae Eväste`    | foo |\n| `Pitäisi Olla Yhtä` | ${eväste.name}  | foo |\n| `Pitäisi Olla Yhtä` | ${eväste.value} | bar |\n| `Pitäisi Olla Tosi` | ${eväste.expiry.year} > 2017 |\n\nUusi SeleniumLibrary 3.0:ssa.\n",
        "sha256": "747951f772be34600739a36f99d276499abc5137ddb8994e1773b68cc7c2e05b"
    },
    "get_cookies": {
        "name": "hae_evästeet",
        "doc": "Palauttaa kaikki nykyisen sivun evästeet.\n\nJos ``as_dict``-argumentti arvioidaan epätodeksi, katso `Boolean arguments` lisätietoja varten, evästetiedot palautetaan yhtenä merkkijonona muodossa ``name1=value1; name2=value2; name3=value3``. Kun ``as_dict``-argumentti arvioidaan todeksi, evästetiedot palautetaan Robot Framework -sanakirjamuodossa. Merkkijonon muotoa voidaan käyttää esimerkiksi lokitustarkoituksiin tai otsikoissa, kun lähetetään HTTP-pyyntöjä. Sanakirjamuoto on hyödyllinen, kun tulos voidaan välittää requests-kirjaston Create Session -avainsanan valinnaiseen cookies-parametriin.\n\n``as_dict``-argumentti on uusi SeleniumLibrary 3.3:ssa.\n",
        "sha256": "7a9bda6590cdb1aa8825e385ffefc087a7ca087936dd11350d6234e6e2c05e6c"
    },
    "add_location_strategy": {
        "name": "lisaa_sijaintistrategia",
        "doc": "Lisää mukautetun sijaintistrategian.\n\nKatso `Mukautetut lokaattorit` saadaksesi tietoa mukautettujen strategioiden luomisesta ja käytöstä. `Poista sijaintistrategia` -avainsanaa voidaan käyttää rekisteröidyn strategian poistamiseen.\n\nSijaintistrategiat poistetaan automaattisesti nykyisen laajuuden päätyttyä oletuksena. Asettamalla ``persist`` arvoksi tosi (katso `Boolean arguments`) sijaintistrategia pysyy rekisteröitynä testin elinkaaren ajan.\n",
        "sha256": "046e816fd4d028592aaa9146fd815aec20809f88d4160fdf166fb19d5fdcfa0c"
    },
    "assign_id_to_element": {
        "name": "aseta_id_elementille",
        "doc": "Asettaa tilapäisen ``id`` elementille, joka on määritelty ``locator`` avulla.\n\nTämä on erityisen hyödyllistä, jos paikannin on monimutkainen ja/tai hidas XPath-lauseke ja sitä tarvitaan useita kertoja. Tunniste vanhenee, kun sivu ladataan uudelleen.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n| `Aseta ID Elementille` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |\n| `Sivulla Pitäisi Olla Elementti` | my id |\n",
        "sha256": "2ce9ab7a44154be53f32d6d6e8b1b6e9dd8bbff880048c99ed4b62763a0b522c"
    },
    "clear_element_text": {
        "name": "tyhjennä_elementin_teksti",
        "doc": "Tyhjentää ``locator`` avulla tunnistetun tekstinsyöttöelementin arvon.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "31d7803b76e63ff90ff333f06e323aba4f820632b8795d51d24242fb65f4e7d2"
    },
    "click_button": {
        "name": "napsauta_painiketta",
        "doc": "Napsauttaa painiketta, joka on tunnistettu ``locator`` avulla.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta. Kun käytetään oletuspaikannusstrategiaa, painikkeita haetaan käyttämällä ``id``, ``name`` ja ``value``.\n\nKatso `Napsauta Elementtiä` -avainsanaa saadaksesi lisätietoja ``modifier``-argumentista.\n\n``Modifier``-argumentti on uusi SeleniumLibrary 3.3:ssa.\n",
        "sha256": "72dcaeaa3bc1a4e14c596d72a19cbd82e0881732440153cbfb27272b2066dd77"
    },
    "click_element": {
        "name": "napsauta_elementtiä",
        "doc": "Napsauttaa elementtiä, joka on tunnistettu ``locator`` avulla.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``Modifier``-argumenttia voidaan käyttää välittämään [https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys|Selenium Keys] elementtiä napsautettaessa. `+` voidaan käyttää eri Selenium Keys -näppäimien erottimena. `CTRL` käännetään sisäisesti `CONTROL`-näppäimeksi. ``Modifier`` on välilyönti- ja kirjainkoolla riippumaton, esimerkiksi \"alt\" ja \" aLt \" ovat tuettuja muotoja [https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT|ALT-näppäimelle]. Jos ``modifier`` ei vastaa Selenium Keys -näppäimiä, avainsana epäonnistuu.\n\nJos ``action_chain``-argumentti on tosi, katso `Boolean arguments` lisätietoja varten siitä, miten asetetaan totuusarvoargumentti, silloin avainsana käyttää ActionChain-pohjaista napsautusta <web_element>.click()-funktion sijasta. Jos sekä ``action_chain`` että ``modifier`` on määritelty, napsautus suoritetaan käyttäen ``modifier``-argumenttia ja ``action_chain`` jätetään huomiotta.\n\nEsimerkki:\n| Napsauta Elementtiä | id:button |                   | # Napsauttaa elementtiä ilman mitään modifioijia.               |\n| Napsauta Elementtiä | id:button | CTRL              | # Napsauttaa elementtiä CTRL-näppäin painettuna.                |\n| Napsauta Elementtiä | id:button | CTRL+ALT          | # Napsauttaa elementtiä CTRL- ja ALT-näppäimet painettuina.      |\n| Napsauta Elementtiä | id:button | action_chain=True | # Napsauttaa painiketta käyttäen Selenium ActionChainsia        |\n\n``Modifier``-argumentti on uusi SeleniumLibrary 3.2:ssa\n``Action_chain``-argumentti on uusi SeleniumLibrary 4.1:ssä\n",
        "sha256": "5099da1ff98ae3351fb740f301498066e1f86b8f9a6ef7f178e2b29d5d5afb35"
    },
    "click_element_at_coordinates": {
        "name": "napsauta_elementtiä_koordinaateissa",
        "doc": "Napsauttaa elementtiä ``locator`` kohdassa ``xoffset/yoffset``.\n\nKursori siirretään elementin keskelle ja x/y-koordinaatit lasketaan siitä pisteestä.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "6c9be5ef41acf068a8ecf3972fe88f5f9c5257cf843d014dd9a76f7b4a3719c7"
    },
    "click_image": {
        "name": "napsauta_kuvaa",
        "doc": "Napsauttaa kuvaa, joka on tunnistettu ``locator`` avulla.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta. Kun käytetään oletuspaikannusstrategiaa, kuvia haetaan käyttämällä ``id``, ``name``, ``src`` ja ``alt``.\n\nKatso `Napsauta Elementtiä` -avainsanaa saadaksesi lisätietoja ``modifier``-argumentista.\n\n``Modifier``-argumentti on uusi SeleniumLibrary 3.3:ssa.\n",
        "sha256": "a83623f5affb23d6a089b6cab14e9983dd55eba3b11deedf672c6d2c3d387cf4"
    },
    "click_link": {
        "name": "napsauta_linkkiä",
        "doc": "Napsauttaa linkkiä, joka on tunnistettu ``locator`` avulla.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta. Kun käytetään oletuspaikannusstrategiaa, linkkejä haetaan käyttämällä ``id``, ``name``, ``href`` ja linkkitekstiä.\n\nKatso `Napsauta Elementtiä` -avainsanaa saadaksesi lisätietoja ``modifier``-argumentista.\n\n``Modifier``-argumentti on uusi SeleniumLibrary 3.3:ssa.\n",
        "sha256": "d8c5ec4c5359fed7c6a5094f5d18e8766b4dfb6f4e4d5ea1d61d50b7b09e7c31"
    },
    "cover_element": {
        "name": "peitä_elementti",
        "doc": "Peittää ``locator`` avulla tunnistetut elementit sinisellä div-elementillä rikkomatta sivun asettelua.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nUusi ominaisuus SeleniumLibrary 3.3.0:ssa.\n\nEsimerkki:\n|`Peitä Elementti` | css:div#container |\n",
        "sha256": "0dd30bea744e70b71f3e5fc5358833c291d404cdfa23970d09ece25f2380fb28"
    },
    "double_click_element": {
        "name": "kaksoisnapsauta_elementtiä",
        "doc": "Kaksoisnapsauttaa elementtiä, joka on tunnistettu ``locator`` avulla.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "c7b11722014178d683d80e276fcea367307d1d4cbe3b93b17cbbbe30b35b7174"
    },
    "drag_and_drop": {
        "name": "raahaa_ja_pudota",
        "doc": "Raahaa elementin, joka on tunnistettu ``locator`` avulla, ``target`` elementtiin.\n\n``Locator``-argumentti on raahattavan elementin paikannin ja ``target`` on kohteen paikannin. Katso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n| `Raahaa Ja Pudota` | css:div#element | css:div.target |\n",
        "sha256": "af13a511a462a2540dc93baf3bc42d05143aaf0de6ce9771029044a25b40bd64"
    },
    "drag_and_drop_by_offset": {
        "name": "raahaa_ja_pudota_koordinaateilla",
        "doc": "Raahaa elementin, joka on tunnistettu ``locator`` avulla, ``xoffset/yoffset`` verran.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nElementtiä siirretään ``xoffset`` ja ``yoffset`` verran, joista kumpikin on negatiivinen tai positiivinen luku, joka määrittää siirtymän.\n\nEsimerkki:\n| `Raahaa Ja Pudota Koordinaateilla` | myElem | 50 | -35 | # Siirrä myElem 50px oikealle ja 35px alas |\n",
        "sha256": "89750f538dc14ca0c04fbe1a3aba732352f9723d658bbd971905003ee9c351f6"
    },
    "element_attribute_value_should_be": {
        "name": "elementin_attribuutin_arvon_pitäisi_olla",
        "doc": "Varmistaa, että elementti, joka on tunnistettu ``locator`` avulla, sisältää odotetun attribuuttin arvon.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n`Elementin Attribuutin Arvon Pitäisi Olla` | css:img | href | value\n\nUusi ominaisuus SeleniumLibrary 3.2:ssa.\n",
        "sha256": "330701ee8d3307c6543bdfeafa649d14689f639f2e139e499aae8ec495d7d015"
    },
    "element_should_be_disabled": {
        "name": "elementin_pitäisi_olla_poistettu_käytöstä",
        "doc": "Varmistaa, että ``locator`` avulla tunnistettu elementti on poistettu käytöstä.\n\nTämä avainsana katsoo myös, että vain luku -elementit ovat poistettu käytöstä.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "6f34019f6e68805c2b73ef5207b424743c9461dfd30061f163d21948304bb012"
    },
    "element_should_be_enabled": {
        "name": "elementin_pitäisi_olla_käytössä",
        "doc": "Varmistaa, että ``locator`` avulla tunnistettu elementti on käytössä.\n\nTämä avainsana katsoo myös, että vain luku -elementit ovat poistettu käytöstä.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "014f8538093bdcef0ed8c7a13020ae513a4a14bd2d0b71f1843de951f5c7b5d3"
    },
    "element_should_be_focused": {
        "name": "elementin_pitäisi_olla_fokusoitu",
        "doc": "Varmistaa, että ``locator`` avulla tunnistettu elementti on fokusoitu.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nUusi SeleniumLibrary 3.0:ssa.\n",
        "sha256": "f327420520f06421e0a11062af115eaa7bb3eaf97a0ae4b6f02c0c82c9fa1f73"
    },
    "element_should_be_visible": {
        "name": "elementin_pitäisi_olla_näkyvissä",
        "doc": "Varmistaa, että ``locator`` avulla tunnistettu elementti on näkyvissä.\n\nTässä yhteydessä näkyvä tarkoittaa, että elementti on loogisesti näkyvä, ei optisesti näkyvä nykyisessä selaimen näkymässä. Esimerkiksi, elementti, jolla on ``display:none``, ei ole loogisesti näkyvä, joten tämän avainsanan käyttäminen kyseiseen elementtiin epäonnistuu.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n",
        "sha256": "98c4fb9d0b90e73c3d702b553aa6a30f027320463eb18e298cd5b9133f1cc36a"
    },
    "element_should_contain": {
        "name": "elementin_pitäisi_sisältää",
        "doc": "Varmistaa, että ``locator``-elementti sisältää tekstin ``expected``.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n\n``ignore_case``-argumentti voidaan asettaa todeksi (True) vertailtaessa merkkien suuruus ei ole tärkeää, oletuksena arvo on epätosi (False). Uutta SeleniumLibrary 3.1:ssä.\n\n``ignore_case``-argumentti on uusi SeleniumLibrary 3.1:ssä.\n\nKäytä `Elementin Tekstin Pitäisi Olla` jos haluat täsmätä tarkalleen tekstin, et osamerkijonoa.\n",
        "sha256": "998a924785fef84597b5e5fc866f4c5d7e4b0a753cba68d15be0f3b44588c06d"
    },
    "element_should_not_be_visible": {
        "name": "elementin_ei_pitäisi_olla_näkyvissä",
        "doc": "Varmistaa, että ``locator``-elementti EI ole näkyvissä.\n\nHyväksyy, jos elementtiä ei ole olemassa. Katso `Elementin Pitäisi Olla Näkyvissä` saadaksesi lisätietoja näkyvyydestä ja tuetuista argumenteista.\n",
        "sha256": "811779774da3cf876101661d4c15a6e89ea0568493be61b19fded7a0bd40f0c4"
    },
    "element_should_not_contain": {
        "name": "elementin_ei_pitäisi_sisältää",
        "doc": "Varmistaa, että ``locator``-elementti ei sisällä tekstiä ``expected``.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n\n``ignore_case``-argumentti voidaan asettaa todeksi (True) vertailtaessa merkkien suuruus ei ole tärkeää, oletuksena arvo on epätosi (False).\n\n``ignore_case``-argumentti on uusi SeleniumLibrary 3.1:ssä.\n",
        "sha256": "ef9492bae813b1597fabc9d6f02a21c05ff736a18fb6eb20fb81e6ca40011437"
    },
    "element_text_should_be": {
        "name": "elementin_teksti_pitäisi_olla",
        "doc": "Varmistaa, että ``locator``-elementti sisältää täsmälleen tekstin ``expected``.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n\n``ignore_case``-argumentti voidaan asettaa todeksi (True) vertailtaessa merkkien suuruus ei ole tärkeää, oletuksena arvo on epätosi (False).\n\n``ignore_case``-argumentti on uusi SeleniumLibrary 3.1:ssä.\n\nKäytä `Elementin Pitäisi Sisältää` jos haluat osamerkkijonon täsmäytyksen.\n",
        "sha256": "4036c0bb4fe36085fcab4421f3ffb65265d70d8cb852106ea13a983438a77723"
    },
    "element_text_should_not_be": {
        "name": "elementin_teksti_ei_pitäisi_olla",
        "doc": "Varmistaa, että ``locator``-elementti ei sisällä täsmälleen tekstiä ``not_expected``.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\n``message``-argumenttia voidaan käyttää oletusvirheilmoituksen korvaamiseen.\n\n``ignore_case``-argumentti voidaan asettaa todeksi (True) vertailtaessa merkkien suuruus ei ole tärkeää, oletuksena arvo on epätosi (False).\n\nUutta SeleniumLibrary 3.1.1:ssä\n",
        "sha256": "67821af845f34ba19ebffb38fa558c375f7261e3d9c9f04cb653bad828e99cf4"
    },
    "get_all_links": {
        "name": "hae_kaikki_linkit",
        "doc": "Palauttaa listan, joka sisältää kaikkien nykyisellä sivulla löytyvien linkkien id:t.\n\nJos linkillä ei ole id:tä, listassa on tyhjä merkkijono sen sijaan.\n",
        "sha256": "f17319af1acc205f3ee5fe01b5e8960bba45ff05629b4b1d2e4fdec770163c1a"
    },
    "get_dom_attribute": {
        "name": "hae_dom_attribuutti",
        "doc": "Palauttaa ``attribuutin`` arvon ``locator``-elementistä. `Hae DOM Attribuutti`-avainsana palauttaa\n        vain attribuutit, jotka on määritelty elementin HTML-merkinnässä. Jos pyydettyä attribuuttia ei ole, avainsana palauttaa ${None}.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n| ${id}= | `Hae DOM Attribuutti` | css:h1 | id |\n\n",
        "sha256": "1337e3b21fae3759b85da9dba5fda08378fd8ea4ff16b9d9a03fa54f1d75853f"
    },
    "get_element_attribute": {
        "name": "hae_elementin_attribuutti",
        "doc": "Palauttaa ``attribuutin`` arvon ``locator``-elementistä.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n| ${id}= | `Hae Elementin Attribuutti` | css:h1 | id |\n\nAttribuutin nimen välittäminen osana ``locator``-elementtiä poistettiin SeleniumLibrary 3.2:ssa. Selkeä ``attribuutti``-argumentti tulisi käyttää sen sijaan.\n",
        "sha256": "3325a9affcfb67bbb11b250a7479d125f3a7c0ca3e6b4772b35f873c6942a300"
    },
    "get_element_count": {
        "name": "hae_elementtien_lukumäärä",
        "doc": "Palauttaa ``locator``-elementtiä vastaavien elementtien lukumäärän.\n\nJos haluat vahvistaa vastaavien elementtien lukumäärän, käytä `Sivun Pitäisi Sisältää Elementti` -avainsanaa ``limit``-argumentin kanssa. Avainsana palauttaa aina kokonaisluvun.\n\nEsimerkki:\n| ${lukumaara} = | `Hae Elementtien Lukumäärä` | name:div_name  |\n| `Pitäisi Olla Tosi` | ${lukumaara} > 2 | |\n\nUutta SeleniumLibrary 3.0:ssa.\n",
        "sha256": "edc00542de29af7b4b11d459c21c6a8f87fd21233f49c1b9a5b4d8e06d0128f8"
    },
    "get_element_size": {
        "name": "hae_elementin_koko",
        "doc": "Palauttaa ``locator``-elementin leveyden ja korkeuden.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nSekä leveys että korkeus palautetaan kokonaislukuina.\n\nEsimerkki:\n| ${leveys} | ${korkeus} = | `Hae Elementin Koko` | css:div#container |\n",
        "sha256": "d1dc235938760fc871c68838032587be56a8ebb13dc295f68e9df6a03c72d266"
    },
    "get_horizontal_position": {
        "name": "hae_vaakasuora_sijainti",
        "doc": "Palauttaa ``locator``-elementin vaakasuuntaisen sijainnin.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nSijainti palautetaan pikseleinä sivun vasemmasta reunasta, kokonaislukuna.\n\nKatso myös `Hae Pystysuora Sijainti`.\n",
        "sha256": "7b81ffe406d7708e72861971ec879a7cdb3adff3cf3a6ad4c816c0b36de84a79"
    },
    "get_property": {
        "name": "hae_ominaisuus",
        "doc": "Palauttaa ``property``-ominaisuuden arvon ``locator``-elementistä.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nEsimerkki:\n| ${teksti_pituus}= | `Hae Ominaisuus` | css:h1 | text_length |\n",
        "sha256": "6335a05f73d42212f78d4285872595fec96dbb4e669b8026b2e9bdab4f3284eb"
    },
    "get_text": {
        "name": "hae_teksti",
        "doc": "Palauttaa ``locator``-elementin tekstiarvon.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "c5df21cb13fca76338626c63ce4e0e83be2e5563eb296833f55678c3424ad333"
    },
    "get_value": {
        "name": "hae_arvo",
        "doc": "Palauttaa ``locator``-elementin value-attribuutin.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "5856fe53c0581268a5a395418f08aedb118762d5ec8fbd553cf2d44b82aa27c6"
    },
    "get_vertical_position": {
        "name": "hae_vertikaalinen_sijainti",
        "doc": "Palauttaa ``locator``-elementin vertikaalisen sijainnin.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n\nSijainti palautetaan pikseleinä sivun yläreunasta, kokonaislukuna.\n\nKatso myös `Hae Horisontaalinen Sijainti`.\n",
        "sha256": "a1f1cc8075b6323bf4b900ea52357586f28721239e45ec11fb1a130faa9246c0"
    },
    "get_webelement": {
        "name": "hae_web_elementti",
        "doc": "Palauttaa ensimmäisen WebElementin, joka vastaa annettua ``locator``-paikanninta.\n\nKatso tarkemmat tiedot paikantimen syntaksista `Paikannuselementit`-osiosta.\n",
        "sha256": "5deaaabc9162680121dbe744d4e476e40c7eacba17922459c209f211ba74b5cd"
    },
    "get_webelements": {
        "name": "hae_web_elementtit",
        "doc": "Palauttaa luettelon WebElement-objekteista, jotka vastaavat ``locator``-määritystä.\n\nKatso `Elementtien löytäminen`-osio saadaksesi lisätietoja locator-syntaksista.\n\nSeleniumLibrary 3.0:sta alkaen avainsana palauttaa tyhjän\nluettelon, jos vastaavia elementtejä ei ole. Aikaisemmissa julkaisuissa avainsana epäonnistui tässä tapauksessa.\n",
        "sha256": "ab7b4634b7c54b2b17daf4c290704fe45af948eeff41f9dbc1c01fab33273496"
    },
    "mouse_down": {
        "name": "hiiri_klikattu_alas",
        "doc": "Simuloi vasemman hiiren painikkeen painamista elementissä ``locator``.\n\nKatso `Elementtien löytäminen`-osio saadaksesi lisätietoja locator-syntaksista.\n\nElementtiä painetaan vapauttamatta hiiren painiketta.\n\nKatso myös tarkemmat avainsanat `Mouse Down On Image` ja `Mouse Down On Link`.\n",
        "sha256": "c0e5431b9b9eb6875830eadccc1ed0f9a9d34781ecef40ab059194054eeae9e4"
    },
    "mouse_down_on_image": {
        "name": "hiiri_klikattu_kuvaan",
        "doc": "Simuloi hiiren painallustapahtuman kuvaan, joka on tunnistettu ``locator``-parametrin avulla.\n\n        Katso `Elementtien löytäminen` -osio löytämismäärityksen yksityiskohtia varten. Kun käytetään oletusarvoista sijainnin määritysstrategiaa, kuvia etsitään käyttämällä ``id``, ``name``, ``src`` ja ``alt`` arvoja.\n        ",
        "sha256": "3b7c0b9a83908e60012f095acc71305c853dd07864497077420f1a3930ea144c"
    },
    "mouse_down_on_link": {
        "name": "hiiri_klikattu_linkkiin",
        "doc": "Simuloi hiiren painallustapahtuman linkkiin, joka on tunnistettu ``locator``-parametrin avulla.\n\n        Katso `Elementtien löytäminen` -osio löytämismäärityksen yksityiskohtia varten. Kun käytetään oletusarvoista sijainnin määritysstrategiaa, linkkejä etsitään käyttämällä ``id``, ``name``, ``href`` ja linkin tekstiä.\n        ",
        "sha256": "8ef3134ef374ebc89f76985b09abd2caac10f603e8db38cf78dcbac9c826cc3e"
    },
    "mouse_out": {
        "name": "hiiri_poistuu",
        "doc": "Simuloi hiiren siirtämistä pois elementistä ``locator``.\n\n        Katso `Elementtien löytäminen` -osio löytämismäärityksen yksityiskohtia varten.\n        ",
        "sha256": "835368b635d5d1c5c50250595a8e7cb2feb9eb4af4fa14753c561a9c35894db1"
    },
    "mouse_over": {
        "name": "hiiri_yläpuolella",
        "doc": "Simuloi hiiren liikutusta elementin ``locator`` yläpuolelle.\n\n        Katso `Elementtien löytäminen` -osio löytämismäärityksen yksityiskohtia varten.\n        ",
        "sha256": "b4c14a2a10cfddb07d7748630ba6546991d3da2311a20aa146685a0f78e41241"
    },
    "mouse_up": {
        "name": "hiiren_nosto",
        "doc": "Simuloi hiiren vasemman painikkeen vapauttamista elementissä ``locator``.\n\n        Katso `Elementtien löytäminen` -osio löytämismäärityksen yksityiskohtia varten.\n        ",
        "sha256": "47c3666126bc84aa9104f6137fd51817efcd1804aaf7c965df143a6aad71895a"
    },
    "open_context_menu": {
        "name": "avaa_kontekstivalikko",
        "doc": "Avaa kontekstivalikkon elementin kohdalla jota ``locator`` osoittaa.",
        "sha256": "8cb9023a05753eb5cc230116dec98188b5bdfac0b94955b69957726131189493"
    },
    "page_should_contain": {
        "name": "sivun_tulisi_sisältää",
        "doc": "Tarkistaa, että nykyisellä sivulla on ``teksti``.\n\n        Jos tämä avainsana epäonnistuu, se tallentaa automaattisesti sivun lähdekoodin\n        käyttämällä valinnaisen ``lokitaso``-argumentin määrittämää lokitasoa.\n        Sallittuja lokitasoja ovat ``TRACE`` (oletus), ``DEBUG``,\n        ``INFO``, ``WARN`` ja ``NONE``. Jos lokitaso on ``NONE``\n        tai alempi kuin nykyinen aktiivinen lokitaso, lähdekoodia ei tallenneta.\n\n        !! VAROITUS !! Jos sinulla on valittuna iframe, `Page Should Contain`\n        palauttaa kehysviittauksen takaisin pääkehykseen. Tämä johtuu siitä,\n        että se etsii ``tekstiä`` kaikista kehyksistä. Jos haluat etsiä\n        elementin iframesta kutsumisen jälkeen `Page Should Contain`, sinun tulee\n        (uudelleen)valita kehys.\n        ",
        "sha256": "bb1186dbfae09e52cad4cad8def5bf2980085e48f75b6af2330bcd4da67477af"
    },
    "page_should_contain_element": {
        "name": "sivun_tulisi_sisältää_elementti",
        "doc": "Varmistaa, että elementti ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi tietoja lokaation\n        syntaksista.\n\n        ``viesti``-argumenttia voidaan käyttää oletusvirheviestin ohittamiseen.\n\n        ``raja``-argumenttia voidaan käyttää määrittelemään, kuinka monta elementtiä\n        sivun tulisi sisältää. Kun ``raja`` on ``None`` (oletus), sivu voi\n        sisältää yhden tai useamman elementin. Kun raja on numero, sivulla täytyy\n        olla sama määrä elementtejä.\n\n        Katso `Sivun Tulisi Sisältää` selitys ``lokitustaso``-argumentista.\n\n        Esimerkit olettavat, että lokaation osumia on kaksi elementtiä.\n        | `Sivun Tulisi Sisältää Elementti` | div_nimi | raja=1    | # Avainsana epäonnistuu.            |\n        | `Sivun Tulisi Sisältää Elementti` | div_nimi | raja=2    | # Avainsana onnistuu.               |\n        | `Sivun Tulisi Sisältää Elementti` | div_nimi | raja=none | # None lasketaan yhdeksi tai useammaksi. |\n        | `Sivun Tulisi Sisältää Elementti` | div_nimi |          | # Sama kuin yllä.                   |\n\n        ``raja``-argumentti on uusi SeleniumLibraryssa 3.0.\n        ",
        "sha256": "d2c24d9ce997c94b3cd391306893b9d864c389a047c274ca1ab323e51f960f8e"
    },
    "page_should_contain_image": {
        "name": "sivun_tulisi_sisältää_kuva",
        "doc": "Varmistaa, että nykyiseltä sivulta löytyy kuvaksi tunnistettu ``lokaatio``.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi tietoja lokaation\n        syntaksista. Kun käytetään oletuspaikannusstrategiaa, kuvia etsitään\n        käyttämällä ``id``, ``nimi``, ``src`` ja ``alt``.\n\n        Katso `Sivun Tulisi Sisältää Elementti` saadaksesi selityksen ``viesti``\n        ja ``lokitustaso`` -argumenteista.\n        ",
        "sha256": "84ab3a648d3b18c5e266ba075408f3cb2ac3b736e1e2009a6cca125de5d07a50"
    },
    "page_should_contain_link": {
        "name": "sivun_tulisi_sisältää_linkki",
        "doc": "Varmistaa, että nykyiseltä sivulta löytyy linkiksi tunnistettu ``lokaatio``.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi tietoja lokaation\n        syntaksista. Kun käytetään oletuspaikannusstrategiaa, linkkejä etsitään\n        käyttämällä ``id``, ``nimi``, ``href`` ja linkin tekstiä.\n\n        Katso `Sivun Tulisi Sisältää Elementti` saadaksesi selityksen ``viesti``\n        ja ``lokitustaso`` -argumenteista.\n        ",
        "sha256": "005f6565f4fcd9b91f87a2274c32fae7545619549be26f23b2cc06856e44ecba"
    },
    "page_should_not_contain": {
        "name": "sivun_ei_tulisi_sisältää",
        "doc": "Varmistaa, että nykyinen sivu ei sisällä ``tekstiä``.\n\n        Katso `Sivun Tulisi Sisältää` saadaksesi selityksen ``lokitustaso``\n        -argumentista.\n        ",
        "sha256": "72389be32f084ed5a3716a32e833e117c419bc2c6ebfa525a79e69054bb2a8cc"
    },
    "page_should_not_contain_element": {
        "name": "sivun_ei_pitäisi_sisältää_elementtiä",
        "doc": "Varmistaa, että elementti ``locator`` ei löydy nykyiseltä sivulta.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi lisätietoja paikantimen\n        syntaksista.\n\n        Katso `Sivun pitäisi sisältää` saadaksesi selityksen ``message`` ja\n        ``loglevel`` argumenteista.\n        ",
        "sha256": "3939f5d1fce87d85f013ae3e4327b50404cf832231d4ca2e677013808ee8ff92"
    },
    "page_should_not_contain_image": {
        "name": "sivun_ei_pitäisi_sisältää_kuvaa",
        "doc": "Varmistaa, että kuva, joka on tunnistettu ``locator`` avulla, ei löydy nykyiseltä sivulta.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi lisätietoja paikantimen\n        syntaksista. Kun käytetään oletuspaikannusstrategiaa, kuvia etsitään\n        käyttäen ``id``, ``name``, ``src`` ja ``alt``.\n\n        Katso `Sivun pitäisi sisältää elementti` saadaksesi selityksen ``message``\n        ja ``loglevel`` argumenteista.\n        ",
        "sha256": "7367c4581992c47a2fbd74fd0beccc254e883879f6b93f206242d0ecb6397448"
    },
    "page_should_not_contain_link": {
        "name": "sivun_ei_pitäisi_sisältää_linkkiä",
        "doc": "Varmistaa, että linkki, joka on tunnistettu ``locator`` avulla, ei löydy nykyiseltä sivulta.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi lisätietoja paikantimen\n        syntaksista. Kun käytetään oletuspaikannusstrategiaa, linkkejä etsitään\n        käyttäen ``id``, ``name``, ``href`` ja linkin tekstiä.\n\n        Katso `Sivun pitäisi sisältää elementti` saadaksesi selityksen ``message``\n        ja ``loglevel`` argumenteista.\n        ",
        "sha256": "61fca3076c7b671f21528f5d141ee7b43ecc1acada608b4157d08ecb38fae0e1"
    },
    "press_key": {
        "name": "paina_näppäintä",
        "doc": "Simuloi käyttäjän näppäimen painalluksen elementille, joka on tunnistettu ``locator``-parametrilla.\n\n        Katso `Elementtien paikantaminen` -osio saadaksesi lisätietoja paikannussyntaksista.\n\n        ``key`` voi olla joko yksittäinen merkki, merkkijono tai numerollinen ASCII-koodi, jonka edellä on '\\'.\n\n        Esimerkkejä:\n        | `Press Key` | text_field   | q     |\n        | `Press Key` | text_field   | abcde |\n        | `Press Key` | login_button | \\13  | # ASCII-koodi enter-näppäimelle |\n\n        `Press Key` ja `Press Keys` eroavat toisistaan siinä, miten ne simuloivat näppäinpainalluksia. `Press Key` käyttää WebDriverin `SEND_KEYS_TO_ELEMENT` -komentoa hyödyntäen Seleniumin send_keys-menetelmää. Vaikka kumpaakaan ei suositella toisen sijaan, jos `Press Key` ei toimi, suosittelemme kokeilemaan `Press Keys` -komentoa.\n",
        "sha256": "b86c54e3fbbe94d4ea6a3a800f73fd52bf7ab3210c91061be10fa10a58cc41cc"
    },
    "press_keys": {
        "name": "paina_näppäimiä",
        "doc": "Simuloi käyttäjän painavan näppäimiä elementtiin tai aktiivisessa selaimessa.\n\n        Jos ``sijainti`` arvioidaan epätodeksi, katso `Boolean arguments` lisätietoja,\n        silloin ``näppäimet`` lähetetään tällä hetkellä aktiiviselle selaimelle.\n        Muuten elementti etsitään ja ``näppäimet`` lähetetään elementtiin, joka\n        tunnistetaan ``sijainti`` avulla. Jälkimmäisessä tapauksessa avainsana epäonnistuu,\n        jos elementtiä ei löydy. Katso `Locating elements` -osio lisätietoja\n        sijainnin syntaksista.\n\n        ``näppäimet``-argumentti voi sisältää yhden tai useamman merkkijonon, mutta\n        se ei voi olla tyhjä. ``näppäimet`` voi myös olla yhdistelmä\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html|Selenium Keys]\n        ja merkkijonoja tai yksittäinen Selenium-näppäin. Jos Selenium-näppäin yhdistetään\n        merkkijonoihin, Selenium-näppäin ja merkkijonot on erotettava `+`-merkillä,\n        kuten `CONTROL+c`. Selenium-näppäimet ovat välilyönneille ja kirjainkoolle herkkiä,\n        eikä Selenium-näppäimiä parsita merkkijonon sisällä. Esimerkki AALTO lähettää\n        merkkijonon `AALTO` eikä `ALT` parsita merkkijonon sisällä. Mutta `A+ALT+O` löytäisi\n        Selenium ALT -näppäimen ``näppäimet``-argumentista. On myös mahdollista\n        painaa useita Selenium-näppäimiä yhtä aikaa, esimerkiksi\n        'ALT+ARROW_DOWN`.\n\n        Jos ``näppäimet``-argumentissa havaitaan Selenium-näppäimiä, avainsana\n        painaa Selenium-näppäimen alas, lähettää merkkijonot ja\n        vapauttaa sitten Selenium-näppäimen. Jos avainsanan täytyy lähettää Selenium-\n        näppäin merkkijonona, jokainen merkki on erotettava `+`-merkillä,\n        esimerkiksi `E+N+D`.\n\n        `CTRL` on alias\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL|Selenium CONTROL]\n        ja ESC on alias\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE|Selenium ESCAPE]\n\n        Uusi SeleniumLibrary 3.3:ssa\n\n        Esimerkit:\n        | `Painallus Napit` | tekstikenttä | AAAAA          |            | # Lähettää merkkijonon \"AAAAA\" elementtiin.                                                |\n        | `Painallus Napit` | None         | BBBBB          |            | # Lähettää merkkijonon \"BBBBB\" tällä hetkellä aktiiviselle selaimelle.                               |\n        | `Painallus Napit` | tekstikenttä | E+N+D          |            | # Lähettää merkkijonon \"END\" elementtiin.                                                  |\n        | `Painallus Napit` | tekstikenttä | XXX            | YY         | # Lähettää merkkijonot \"XXX\" ja \"YY\" elementtiin.                                        |\n        | `Painallus Napit` | tekstikenttä | XXX+YY         |            | # Sama kuin edellä.                                                                  |\n        | `Painallus Napit` | tekstikenttä | ALT+ARROW_DOWN |            | # Painaen \"ALT\"-näppäintä alas, sitten painaen ARROW_DOWN ja vapauttaen molemmat näppäimet. |\n        | `Painallus Napit` | tekstikenttä | ALT            | ARROW_DOWN | # Painaen \"ALT\"-näppäintä ja sitten painaen ARROW_DOWN.                                |\n        | `Painallus Napit` | tekstikenttä | CTRL+c         |            | # Painaen CTRL-näppäintä alas, lähettäen merkkijonon \"c\" ja vapauttaen CTRL-näppäimen.            |\n        | `Painallus Napit` | painike      | RETURN         |            | # Painaen \"ENTER\"-näppäintä elementtiin.                                                |\n\n        `Painallus Näppäin` ja `Painallus Napit` eroavat tavoiltaan simuloida näppäinpainalluksia.\n        `Painallus Napit` käyttää Selenium/WebDriver Actions -toimintoja.\n        `Painallus Napit` sisältää myös laajemman syntaksin näppäimien,\n        näppäinyhdistelmien ja näppäintoimintojen kuvaamiseen. Vaikka kumpaakaan\n        ei suositella toisen sijasta, jos `Painallus Napit` ei toimi, suosittelemme kokeilemaan\n        `Painallus Näppäin` -avainsanaa.\n",
        "sha256": "549b119394b8f48407c11208e1f38c3f2c753e9a40b5c6f1f47b3320df3f3612"
    },
    "remove_location_strategy": {
        "name": "poista_sijaintistrategia",
        "doc": "Poistaa aiemmin lisätyn mukautetun sijaintistrategian.\n\n        Katso `Mukautetut paikantimet` lisätietoja mukautettujen strategioiden\n        luomisesta ja käytöstä.\n        ",
        "sha256": "827184ef194cec97d793297edbc6544d2e6774a80a14136ccfa0d5cc04fbc09e"
    },
    "scroll_element_into_view": {
        "name": "vieritä_elementti_näkymään",
        "doc": "Vierittää ``sijainnin`` määrittämän elementin näkyviin.\n\n        Katso `Elementtien sijainnin määrittäminen` -osio lisätietoja sijainnin\n        syntaksista.\n\n        Uusi SeleniumLibrary 3.2.0:ssa\n        ",
        "sha256": "0d567a31d5b64fcfb38b47c2f5f452de4fbe3d08aa0c0547644d4c59b243ef60"
    },
    "set_focus_to_element": {
        "name": "aseta_fokus_elementtiin",
        "doc": "Asettaa fokuksen ``sijainnin`` määrittämään elementtiin.\n\n        Katso `Elementtien sijainnin määrittäminen` -osio lisätietoja sijainnin\n        syntaksista.\n\n        Ennen SeleniumLibrary 3.0:aa tämä avainsana oli nimeltään `Focus`.\n        ",
        "sha256": "0b02399995113cd6ac38557106b4697e4d86f9874173ed593a8853e63362c74f"
    },
    "simulate_event": {
        "name": "simuloi_tapahtuma",
        "doc": "Simuloi ``tapahtuma`` ``sijainnin`` määrittämässä elementissä.\n\n        Tämä avainsana on hyödyllinen, jos elementillä on ``OnEvent``-käsittelijä,\n        joka täytyy nimenomaisesti kutsua.\n\n        Katso `Elementtien sijainnin määrittäminen` -osio lisätietoja sijainnin\n        syntaksista.\n\n        Ennen SeleniumLibrary 3.0:aa tämä avainsana oli nimeltään `Simulate`.\n        ",
        "sha256": "49cd268150ae4f3170f13d6b5a25809f41080efa3f3b5ca0fa2e2d8cd3ea7795"
    },
    "wait_for_expected_condition": {
        "name": "odota_odotettu_ehto",
        "doc": "Odottaa, kunnes ``ehto`` on totta tai ``aikakatkaisu`` päättyy.\n\n        Ehdotuksen on oltava yksi Seleniumin odotetuista ehdoista, jotka\n        löytyvät Seleniumin\n        [https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions|Python API]\n        dokumentaatiosta. Odotettu ehto voidaan kirjoittaa snake_case-muodossa\n        (esim. title_is) tai se voidaan erottaa välilyönnein (esim. Title Is).\n        Joillakin ehdoilla voi olla lisäargumentteja tai ``args``, jotka tulisi\n        välittää odotetun ehdon jälkeen.\n\n        Epäonnistuu, jos aikakatkaisu päättyy ennen kuin ehto toteutuu.\n        Oletusarvo on 10 sekuntia.\n\n        Esimerkit:\n        | `Odota Odotettu Ehto` | alert_is_present |\n        | `Odota Odotettu Ehto` |  Title Is  | Uusi Otsikko |\n\n        Jos odotettu ehto odottaa paikantajaa, voidaan välittää\n        argumentteina tuple, joka sisältää Seleniumin paikantajastrategiat\n        ja paikantimen.\n\n        Esimerkki odotetusta ehdosta, joka odottaa paikantajaa:\n        | ${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n        | `Odota Odotettu Ehto` | Presence Of Element Located | ${byElem}\n        ",
        "sha256": "7e512f1e3c97525aa828d624627aaf3f8b76ac0ec1aaa507b36ff9c8fff34d5a"
    },
    "checkbox_should_be_selected": {
        "name": "valintaruudun_tulee_olla_valittu",
        "doc": "Varmistaa, että valintaruutu ``sijainti`` on valittu/merkitty.\n\n        Katso `Elementtien sijainnin määrittäminen` -osio lisätietoja sijainnin\n        syntaksista.\n        ",
        "sha256": "e50bf6856c0f0c3f373adb3bcc3b7d677738088632055f507797887c9f822136"
    },
    "checkbox_should_not_be_selected": {
        "name": "valintaruudun_ei_tule_olla_valittu",
        "doc": "Tarkistaa, ettei valintaruutu ``locator`` ole valittu/merkitty.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "8488752a0365d5c94b3a7885d53b67f99d92ccc5687fdc59411b42a40fa95443"
    },
    "choose_file": {
        "name": "valitse_tiedosto",
        "doc": "Syöttää tiedoston ``file_path`` tiedoston syöttökenttään ``locator``.\n\n        Tämä avainsana käytetään useimmiten tiedostojen syöttämiseen\n        lomakkeisiin, joissa voi lähettää tiedostoja.\n        Avainsana ei tarkista, onko ``file_path`` tiedosto tai kansio\n        saatavilla koneella, jossa testit suoritetaan. Jos ``file_path``\n        osoittaa tiedostoon ja käytetään Selenium Gridiä, Selenium\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE|siirtää tiedoston] taianomaisesti\n        koneelta, jossa testit suoritetaan, Selenium Gridin solmuun,\n        jossa selain toimii. Sen jälkeen Selenium lähettää tiedostopolun\n        solmun tiedostojärjestelmästä selaimelle.\n\n        Sitä, että ``file_path`` ei tarkisteta, uusi SeleniumLibraryssa 4.0:ssa.\n\n        Esimerkki:\n        | `Valitse tiedosto` | minun_latauskenttä | ${CURDIR}/trades.csv |\n        ",
        "sha256": "244543282ef6c62ec448fb42ed37706978ecf84aec27a9c7774fdd39bc84697c"
    },
    "input_password": {
        "name": "kirjoita_salasana",
        "doc": "Kirjoittaa annetun salasanan tekstikenttään, joka on tunnistettu ``locator`` avulla.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista. Katso `Syötä teksti` -kohtaa ``clear``-argumentin tiedot.\n\n        Erotus `Syötä teksti` -toimintoon on, että tämä avainsana ei\n        kirjaa annettua salasanaa INFO-tasolla. Huomaa, että jos käytät\n        avainsanaa esimerkiksi näin:\n\n        | Syötä salasana | salasana_kenttä | salasana |\n\n        salasana näytetään normaalina avainsana-argumenttina. Tapana\n        välttää tämä on käyttää muuttujia, kuten\n\n        | Syötä salasana | salasana_kenttä | ${SALASANA} |\n\n        Huomaa, että Robot Framework kirjaa kaikki argumentit TRACE-tasolla,\n        ja testejä ei saa suorittaa DEBUG-tason alapuolella, jos salasanaa\n        ei haluta kirjata mihinkään muotoon.\n\n        `clear`-argumentti on uusi SeleniumLibraryssa 4.0. Salasanan\n        kirjauksen piilottaminen Selenium-lokeista on uusi\n        SeleniumLibraryssa 4.2.\n        ",
        "sha256": "2471a62ea46d3d4815fe3700c92b61bd4abee39926bc4dadeb072bb88ba69fd5"
    },
    "input_text": {
        "name": "kirjoita_teksti",
        "doc": "Kirjoittaa annetun ``tekstin`` tekstikenttään, joka on tunnistettu ``locator`` avulla.\n\n        Kun ``clear`` on tosi, syötekenttä tyhjennetään ennen kuin\n        teksti kirjoitetaan siihen. Kun se on epätosi, aiempi teksti\n        ei poisteta elementistä. Käytä `Input Password`-avainsanaa,\n        jos et halua, että annettua ``tekstiä`` kirjataan.\n\n        Jos [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid]\n        on käytössä ja ``teksti``-argumentti osoittaa tiedostoon tiedostojärjestelmässä,\n        tämä avainsana estää Seleniumia siirtämästä tiedostoa\n        Selenium Gridin keskukseen. Sen sijaan avainsana lähettää\n        ``teksti``-merkkijonon sellaisenaan elementtiin. Jos tiedosto\n        pitäisi siirtää keskukseen ja suorittaa lataus, käytä `Choose File`\n        -avainsanaa.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        Katso `Boolean argumentit` -osio, miten boolean-arvot käsitellään.\n\n        Tiedostonsiirron poistaminen Selenium Grid -solmulle ja `clear`\n        -argumentti ovat uusia SeleniumLibraryssa 4.0:ssa.\n        ",
        "sha256": "77be02dfff6bb6cc9d97af190e48a4c333913ca5058e67c85a4055bb84a9f494"
    },
    "page_should_contain_button": {
        "name": "sivun_tulisi_sisältää_painike",
        "doc": "Varmistaa, että painiketta ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        Kun käytetään oletuspaikannusstrategiaa, painikkeita etsitään\n        käyttämällä ``id``, ``name`` ja ``value``.\n        ",
        "sha256": "f5fdc2763607b8a19e0dcbc2c8bc0512959193b4312232d89bdf5e3c1287ee25"
    },
    "page_should_contain_checkbox": {
        "name": "sivun_tulisi_sisältää_valintaruutu",
        "doc": "Varmistaa, että valintaruutu ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "827b0517772c7f3d0a8c9c41a1557892b98f0c9ee7228aa80a17df7d1766b338"
    },
    "page_should_contain_radio_button": {
        "name": "sivun_tulisi_sisältää_radiopainike",
        "doc": "Varmistaa, että radiopainike ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        Kun käytetään oletuspaikannusstrategiaa, radiopainikkeita etsitään\n        käyttämällä ``id``, ``name`` ja ``value``.\n        ",
        "sha256": "a1bd5c4a731ebb21b599006d59a7c7d163da5fb64ca87ac20d853559ff948a95"
    },
    "page_should_contain_textfield": {
        "name": "sijainnin_pitäisi_sisältää_tekstikenttä",
        "doc": "Varmistaa, että tekstikenttä ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "7b7414371c1321271f8616d6668e9b94001ab4443df27f26fe10c5e968be00c5"
    },
    "page_should_not_contain_button": {
        "name": "sivun_ei_pitäisi_sisältää_painiketta",
        "doc": "Varmistaa, että painiketta ``locator`` ei löydy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        Kun käytetään oletuspaikannusstrategiaa, painikkeita etsitään\n        käyttämällä ``id``, ``name`` ja ``value``.\n        ",
        "sha256": "c8b007d236e708e3d637b414d88b333f31bc64f396fe9034bc79be14288666ed"
    },
    "page_should_not_contain_checkbox": {
        "name": "sivun_ei_pitäisi_sisältää_valintaruutua",
        "doc": "Varmistaa, ettei valintaruutua ``locator`` löydy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "88204d5dcc80e3fed6bfc74f5b2e02a3507d9ac290faf29c5818f54fc7c7109d"
    },
    "page_should_not_contain_radio_button": {
        "name": "sivun_ei_pitäisi_sisältää_radiopainiketta",
        "doc": "Varmistaa, ettei radiopainiketta ``locator`` löydy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        Kun käytetään oletuspaikannusstrategiaa, radiopainikkeita etsitään\n        käyttämällä ``id``, ``name`` ja ``value``.\n        ",
        "sha256": "f2310d4b57e4303ef5f38cc2cdc705ca95582a56ced04899d806beab1a63cef0"
    },
    "page_should_not_contain_textfield": {
        "name": "sivun_ei_pitäisi_sisältää_tekstikenttää",
        "doc": "Varmistaa, ettei tekstikenttää ``locator`` löydy nykyiseltä sivulta.\n\n        Katso `Sivun pitäisi sisältää elementti` selitys ``viesti``\n        ja ``lokitaso`` -argumenteista.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "2d91d04a7f6bb6ffd6fb86459718e337880326ddbba3a1631de12737ecab5339"
    },
    "radio_button_should_be_set_to": {
        "name": "radiopainikkeen_tulisi_olla_asetettu",
        "doc": "Varmistaa, että radiopainike ryhmä ``group_name`` on asetettu arvoon ``value``.\n\n        ``group_name`` on radiopainike ryhmän ``name``.\n        ",
        "sha256": "baedeb274f24cfa1951591b65fd654551c128c26db397414fce039f3c2ef68cc"
    },
    "radio_button_should_not_be_selected": {
        "name": "radiopainikkeen_ei_tulisi_olla_asetettu",
        "doc": "Varmistaa, että radiopainikeryhmällä ``group_name`` ei ole valintaa.\n\n        ``group_name`` on radiopainikeryhmän ``name``.\n        ",
        "sha256": "552945bd4776a7545990b26941784cf5a8bd5d1725fb1ccd6241d7f4404dea0e"
    },
    "select_checkbox": {
        "name": "valitse_valintaruutu",
        "doc": "Valitsee valintaruudun, joka on tunnistettu ``locator`` avulla.\n\n        Ei tee mitään, jos valintaruutu on jo valittu.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "a864b4289721b7356ee6cc8f51612cdb5b91f5e439a264380665dd3c359cf09a"
    },
    "select_radio_button": {
        "name": "valitse_radiopainikeryhmä",
        "doc": "Asettaa radiopainikeryhmän ``group_name`` arvoon ``value``.\n\n        Valittava radiopainike sijaitsee kahden argumentin avulla:\n        - ``group_name`` on radiopainikeryhmän nimi.\n        - ``value`` on varsinaisen radiopainikkeen ``id`` tai ``value``-ominaisuus.\n\n        Esimerkit:\n        | `Select Radio Button` | koko    | XL    |\n        | `Select Radio Button` | yhteystieto | sähköposti |\n        ",
        "sha256": "ffbddc133ea67fa89fc81c47e311a5c1c0d17de62b307fb25cb0811ebf995909"
    },
    "submit_form": {
        "name": "lähetä_lomake",
        "doc": "Lähettää lomakkeen, joka on tunnistettu ``locator`` avulla.\n\n        Jos ``locator`` ei ole annettu, lähetetään ensimmäinen lomake sivulla.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "19787cfd196cb398177f114d219b7047839b1b875ad44e4741c02be1f2219fb7"
    },
    "textarea_should_contain": {
        "name": "tekstilaatikon_tulisi_sisältää",
        "doc": "Varmistaa, että tekstilaatikko ``locator`` sisältää tekstin ``expected``.\n\n        ``viesti`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "1f0212530a7318d4b84aab2f76e6a786698c18553eb45f6d7b5ce1526aa8806a"
    },
    "textarea_value_should_be": {
        "name": "tekstilaatikon_arvon_tulisi_olla",
        "doc": "Varmistaa, että tekstilaatikko ``locator`` sisältää täsmälleen tekstin ``expected``.\n\n        ``viesti`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "351e1fbde625caa68c16d8203c380853b86f12203e2a58fe32fed5154779df55"
    },
    "textfield_should_contain": {
        "name": "tekstikentän_tulisi_sisältää",
        "doc": "Varmistaa, että tekstikenttä ``locator`` sisältää tekstin ``expected``.\n\n        ``viesti`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "8d542b446cce4ae3a59f57d2492144fa0264dc10bcc29a7a75e210368e7b24a9"
    },
    "textfield_value_should_be": {
        "name": "tekstikentän_arvon_tulisi_olld",
        "doc": "Varmistaa, että tekstikenttä ``locator`` sisältää täsmälleen tekstin ``expected``.\n\n        ``viesti`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "bf88210c7d1673f6f28e6a5af94ecca2f23d655f0da09f31557b5d619ca4bb83"
    },
    "unselect_checkbox": {
        "name": "poista_valinta_valintaruudusta",
        "doc": "Poistaa valinnan valintaruudusta, joka on tunnistettu ``locator`` avulla.\n\n        Ei tee mitään, jos valintaruutua ei ole valittu.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n        ",
        "sha256": "73e850a91f88669d5f169f1da487263b966b34b9d5979fa7eacc353b9af6d3ad"
    },
    "current_frame_should_contain": {
        "name": "nykyisen_kehyksen_tulisi_sisältää",
        "doc": "Varmistaa, että nykyinen kehys sisältää ``tekstin``.\n\n        Katso `Sivun pitäisi sisältää` selitys ``lokitaso``\n        argumentista.\n\n        Ennen SeleniumLibrary 3.0 versiota tätä avainsanaa kutsuttiin\n        nimellä `Current Frame Contains`.\n        ",
        "sha256": "d42932ad52a7f5a80466c5fc70cde1994b5dc91e42d5a92d5a4c84c5952106bc"
    },
    "current_frame_should_not_contain": {
        "name": "nykyisen_kehyksen_ei_tulisi_sisältää",
        "doc": "Varmistaa, ettei nykyinen kehys sisällä ``tekstiä``.\n\n        Katso `Sivun pitäisi sisältää` selitys ``lokitaso``\n        argumentista.\n        ",
        "sha256": "39c919106caf859d8c436e8334ba7dbfbaaadc761810034f9c24433ef930029d"
    },
    "frame_should_contain": {
        "name": "kehyksen_tulisi_sisältää",
        "doc": "Varmistaa, että kehys, joka on tunnistettu ``locator`` avulla, sisältää ``tekstin``.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n\n        Katso `Sivun pitäisi sisältää` selitys ``lokitaso``\n        argumentista.\n        ",
        "sha256": "e7cf02e4cd77e7196d87f875db7285146a629fe895b3576c9dbd33ae4ab362fd"
    },
    "select_frame": {
        "name": "valitse_kehys",
        "doc": "Asettaa kehyksen, joka on tunnistettu ``locator`` avulla, nykyiseksi kehykseksi.\n\n        Katso `Elementtien paikantaminen` -osio lisätietoja locatorsyntaksista.\n\n        Toimii sekä kehysten että iframejen kanssa. Käytä `Unselect Frame` peruuttaaksesi\n        kehyksen valinnan ja palataksesi pääkehykseen.\n\n        Esimerkki:\n        | `Select Frame`   | top-frame | # Valitse kehys, jolla on id tai nimi 'top-frame' |\n        | `Click Link`     | esimerkki | # Klikkaa linkkiä 'esimerkki' valitussa kehyksessä |\n        | `Unselect Frame` |           | # Palaa pääkehykseen.                           |\n        | `Select Frame`   | //iframe[@name='xxx'] | # Valitse kehys käyttäen xpathia      |\n        ",
        "sha256": "c2c67edf46d18644488c6395a750e293ab150011cdcdfe0741481328e01163f6"
    },
    "unselect_frame": {
        "name": "peruuta_kehyksen_valinta",
        "doc": "Asettaa pääkehyksen nykyiseksi kehykseksi.\n\n        Käytännössä peruuttaa edellisen `Select Frame` -kutsun.\n        ",
        "sha256": "9fc68af60f0d437e37ccc1fccb858b2c6554427f3f269518d4e7f849df3c43ec"
    },
    "execute_async_javascript": {
        "name": "suorita_asynkronista_JavaScript_koodia",
        "doc": "Suorittaa asynkronista JavaScript-koodia mahdollisilla argumenteilla.\n\n        Samankaltainen kuin `Execute Javascript`, paitsi että tällä avainsanalla suoritettujen\n        skriptien on ilmoitettava selvästi valmiudestaan kutsumalla annettua\n        takaisinkutsua. Tämä takaisinkutsu injektoidaan aina suoritettuun\n        funktioon viimeisenä argumenttina.\n\n        Skriptien on suorituttava skriptiaikakatkaisun puitteissa, muuten tämä avainsana epäonnistuu.\n        Katso `Aikakatkaisu` -osio lisätietoja varten.\n\n        SeleniumLibrary 3.2:n alkaen on mahdollista antaa JavaScriptiin [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script|\n        argumentteja] osana ``koodi`` argumenttia. Katso `Execute Javascript` lisätietoja varten.\n\n        Esimerkit:\n        | `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |\n        | `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |\n        | ${tulos} = | `Execute Async JavaScript`                      |\n        | ...         | var callback = arguments[arguments.length - 1]; |\n        | ...         | function vastaus(){callback(\"teksti\");};           |\n        | ...         | window.setTimeout(vastaus, 2000);                |\n        | `Pitäisi olla yhtä suuri` | ${tulos} | teksti |\n        ",
        "sha256": "a67bddb89758620a690da6f26a06985d8a546d32da40a6509296e93dc1f68c51"
    },
    "execute_javascript": {
        "name": "Suorita_JavaScript_koodia",
        "doc": "Suorittaa annetun JavaScript-koodin mahdollisilla argumenteilla.\n\n        ``code`` voidaan jakaa useisiin soluihin testidatasta ja\n        ``code`` voi sisältää useita rivejä koodia ja argumentteja. Tässä tapauksessa\n        JavaScript-koodin osat yhdistetään ilman välilyöntejä, ja valinnaiset argumentit\n        erotetaan ``code``-sta.\n\n        Jos ``code`` on polku olemassa olevaan tiedostoon, suoritettava JavaScript\n        luetaan siitä tiedostosta. Kauttaviivat toimivat polkuerottimena kaikissa\n        käyttöjärjestelmissä.\n\n        JavaScript suoritetaan valitun kehyksen tai ikkunan kontekstissa nimettömänä\n        funktiona. Käytä ``window`` viittaamaan sovelluksesi ikkunaan ja ``document``\n        viittaamaan nykyisen kehyksen tai ikkunan dokumenttiobjektiin, esim.\n        ``document.getElementById('esimerkki')``.\n\n        Tämä avainsana palauttaa sen, mitä suoritettu JavaScript-koodi palauttaa.\n        Paluuarvot muunnetaan sopiviin Python-tyyppeihin.\n\n        Alkaen SeleniumLibrary versiosta 3.2 on mahdollista antaa JavaScriptille\n        [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script|\n        argumentteja] osana ``code``-argumenttia. JavaScript-koodi ja\n        argumentit on erotettava `JAVASCRIPT` ja `ARGUMENTS` merkeillä, ja niitä on\n        käytettävä täsmälleen tällä formaatilla. Jos JavaScript-koodi on ensin,\n        `JAVASCRIPT` merkki on valinnainen. `JAVASCRIPT` ja `ARGUMENTS` merkkien järjestystä\n        voidaan vaihtaa, mutta jos `ARGUMENTS` on ensimmäinen merkki, `JAVASCRIPT`\n        merkki on pakollinen. `JAVASCRIPT`- ja `ARGUMENTS`-merkkejä saa käyttää\n        vain kerran ``code``-argumentissa.\n\n        Esimerkit:\n        | `Execute JavaScript` | window.myFunc('arg1', 'arg2') |\n        | `Execute JavaScript` | ${CURDIR}/js_to_execute.js    |\n        | `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |\n        | `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |\n        ",
        "sha256": "5037e85a542b11eebcf4a3fd0b9eae560f17cd117b7fdfc9c7148c9091b44cc4"
    },
    "register_keyword_to_run_on_failure": {
        "name": "rekisteröi_avainsana_joka_suoritetaan_virhetilanteessa.",
        "doc": "Asettaa avainsanan, joka suoritetaan, kun SeleniumLibraryn avainsana epäonnistuu.\n\n        ``keyword`` on avainsanan nimi, joka suoritetaan, jos SeleniumLibraryn\n        avainsana epäonnistuu. Voit käyttää mitä tahansa saatavilla olevaa\n        avainsanaa, mukaan lukien käyttäjän määrittelemät avainsanat tai avainsanat\n        muista kirjastoista, mutta avainsana ei saa ottaa argumentteja.\n\n        Alkuperäinen avainsana määritetään kirjaston `tuontivaiheessa`, ja oletusarvoisesti\n        käytettävä avainsana on `Capture Page Screenshot`. Sivukaappaus epäonnistumisen\n        yhteydessä on erittäin hyödyllinen ominaisuus, mutta huomaa, että se voi hidastaa\n        suoritusta.\n\n        Voit käyttää merkkijonoja ``NOTHING`` tai ``NONE`` (kirjoitusasusta riippumatta),\n        sekä Pythonin ``None``-arvoa poistaaksesi tämän toiminnallisuuden kokonaan.\n\n        Tämä avainsana palauttaa aiemmin rekisteröidyn epäonnistumisen käsittelyavainsanan nimen\n        tai Pythonin ``None``-arvon, jos toiminnallisuus oli aiemmin poistettu käytöstä.\n        Paluuarvoa voidaan aina käyttää palauttamaan alkuperäinen tila myöhemmin.\n\n        Esimerkki:\n        | `Register Keyword To Run On Failure`  | Log Source |\n        | ${aiempi avainsana}= | `Register Keyword To Run On Failure`  | NONE |\n        | `Register Keyword To Run On Failure`  | ${aiempi avainsana} |\n\n        Muutokset SeleniumLibrary 3.0:ssa:\n        - Mahdollisuus käyttää merkkijonoa ``NONE`` tai Pythonin ``None``-arvoa poistaaksesi\n          toiminnallisuuden.\n        - Palauttaa Pythonin ``None``-arvon, kun toiminnallisuus oli aiemmin poistettu käytöstä.\n          Aikaisemmissa versioissa palautettiin erityisarvo ``No Keyword``, eikä sitä voitu käyttää\n          alkuperäisen tilan palauttamiseen.\n        ",
        "sha256": "9eaadf25a89adfb670897301330147203808d9cec135d82015215fe7a14c7313"
    },
    "capture_element_screenshot": {
        "name": "tallenna_elementin_kuvakaappaus",
        "doc": "Ottaa kuvakaappauksen elementistä, joka on tunnistettu ``locator``:lla ja upottaa sen lokitiedostoon.\n\n    Katso lisätietoja ``filename``-argumentista kohdasta `Capture Page Screenshot`.\n    Katso lisätietoja sijaintitietojen syntaksista kohdasta `Elementtien paikantaminen`.\n\n    Palauttaa luodun elementtikuvakaappauksen absoluuttisen polun.\n\n    Tuki elementtikuvakaappauksen ottamiselle on rajoitettu ja riippuu selainten valmistajista.\n    Tarkista selainten valmistajan ohjaindokumentaatiosta, tukeeko selain elementtikuvakaappauksen ottamista.\n\n    Uutena SeleniumLibrary-versiossa 3.3. Tuki EMBED-toiminnolle on uusi versiossa 4.2.\n\n    Esimerkit:\n    | `Capture Element Screenshot` | id:image_id |                                |\n    | `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |\n    | `Capture Element Screenshot` | id:image_id | EMBED                          |\n    ",
        "sha256": "a5dabc5a6525bca9796834b47e1fff61557439b12dd78240701233af0b95c73f"
    },
    "capture_page_screenshot": {
        "name": "tallenna_sivun_kuvakaappaus",
        "doc": "Ottaa kuvakaappauksen nykyisestä sivusta ja upottaa sen lokitiedostoon.\n\n        ``filename``-argumentti määrittää tiedoston nimen, johon kuvakaappaus tallennetaan.\n        Kuvakaappausten tallennuspolku voidaan asettaa `importoidessa` kirjaston tai käyttämällä `Set Screenshot\n        Directory` -avainsanaa. Jos hakemistoa ei ole määritetty, kuvakaappaukset tallennetaan samaan hakemistoon kuin Robot Frameworkin lokitiedosto.\n\n        Jos ``filename`` on EMBED (kirjainkoolla ei väliä), kuvakaappaus upotetaan Base64-kuvaksi log.html-tiedostoon. Tässä tapauksessa tiedostoa ei luoda tiedostojärjestelmään.\n\n        Alkaen SeleniumLibrary versiosta 1.8, jos ``filename`` sisältää merkin `{index}`, se korvataan automaattisesti ainutlaatuisella juoksevalla indeksillä, estäen tiedostojen ylikirjoituksen. Indeksit alkavat 1:stä, ja niiden esitystapaa voidaan räätälöidä Pythonin\n        [https://docs.python.org/3/library/string.html#format-string-syntax|muotoilumerkkijonosyntaksin] avulla.\n\n        Palautetaan luodun kuvakaappauksen absoluuttinen polku tai jos ``filename`` on EMBED, sana `EMBED` palautetaan.\n\n        Tuki EMBED-toiminnolle on uusi SeleniumLibrary versiossa 4.2\n\n        Esimerkit:\n        | `Capture Page Screenshot` |                                        |\n        | `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-1.png |\n        | ${path} =                 | `Capture Page Screenshot`              |\n        | `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-2.png |\n        | `File Should Exist`       | ${path}                                |\n        | `Capture Page Screenshot` | custom_name.png                        |\n        | `File Should Exist`       | ${OUTPUTDIR}/custom_name.png           |\n        | `Capture Page Screenshot` | custom_with_index_{index}.png          |\n        | `File Should Exist`       | ${OUTPUTDIR}/custom_with_index_1.png   |\n        | `Capture Page Screenshot` | formatted_index_{index:03}.png         |\n        | `File Should Exist`       | ${OUTPUTDIR}/formatted_index_001.png   |\n        | `Capture Page Screenshot` | EMBED                                  |\n        | `File Should Not Exist`   | EMBED                                  |\n        ",
        "sha256": "271132ea5ad25ba3e6182db7560e7eaf512df0bae8f437f756419b9611a4bebe"
    },
    "print_page_as_pdf": {
        "name": "tulosta_sivun_PDF-muodossa",
        "doc": "Tulostaa nykyisen sivun PDF-muodossa\n\n        ``page_ranges`` oletuksena `['-']` tai \"all\" sivut. ``page_ranges`` on lista\n        merkkijonoja, jotka ilmaisevat sivualueet.\n\n        Sivun koko oletuksena 21.59 ``page_width`` ja 27.94 ``page_height``.\n        Tämä on Yhdysvaltain kirjeen koko vastaava koko. Oletettu yksikkö näissä parametreissa\n        on senttimetrit.\n\n        Oletusarvo marginaalille ylhäältä, vasemmalta, alhaalta, oikealta on `1`. Oletettu yksikkö\n        näissä parametreissa on senttimetrit.\n\n        Oletusarvo ``orientation`` on `portrait`. ``orientation`` voi olla joko `portrait`\n        tai `landscape`.\n\n        Oletusarvo ``scale`` on `1`. ``scale`` tulee olla suurempi tai yhtä suuri kuin `0.1` ja\n        pienempi tai yhtä suuri kuin `2`.\n\n        ``background`` ja ``scale_to_fit`` voivat olla joko `${True}` tai `${False}`..\n\n        Jos kaikki tulostusasetukset ovat None, PDF-tulostus epäonnistuu hiljaisesti.\n        ",
        "sha256": "4220c5bb1458a7569f6d44a2a34ffa0ce0ceaa5ee4ee96ce270d2b813a66346d"
    },
    "set_screenshot_directory": {
        "name": "asetta_tallennettavien_kuvakaappausten_hakemisto",
        "doc": "Asettaa tallennettavien kuvakaappausten hakemiston.\n\n        ``path``-argumentti määrittää absoluuttisen polun hakemistoon,\n        johon kuvakaappaukset tulisi tallentaa. Jos hakemistoa ei ole,\n        se luodaan. Hakemisto voidaan asettaa myös kirjastoa\n        `importoidessa`. Jos sitä ei ole määritetty missään,\n        kuvakaappaukset tallennetaan samaan hakemistoon kuin Robot Frameworkin\n        lokitiedosto.\n\n        Jos ``path`` on EMBED (kirjainkoolla ei väliä) ja\n        `Capture Page Screenshot` tai `Capture Element Screenshot` -avainsanojen\n        filename-argumenttia ei ole muutettu oletusarvosta, niin sivun tai\n        elementin kuvakaappaus upotetaan Base64-kuvaksi log.html-tiedostoon.\n\n        Edellinen arvo palautetaan ja sitä voidaan tarvittaessa käyttää\n        alkuperäisen arvon palauttamiseen myöhemmin.\n\n        Edellisen arvon palauttaminen on uusi SeleniumLibrary-versiossa 3.0.\n        Persist-argumentti poistettiin SeleniumLibrary-versiossa 3.2 ja\n        EMBED on uusi SeleniumLibrary-versiossa 4.2.\n        ",
        "sha256": "c8241dd4f1113b3db620de1f45f2390c227b081400b04e0178561dde2c38748e"
    },
    "get_list_items": {
        "name": "hae_luettelon_kohteet",
        "doc": "Palauttaa valintaluettelon ``locator``:n kaikki tunnisteet tai arvot.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n\n        Oletuksena palautetaan näkyvät tunnisteet, mutta arvot voidaan palauttaa\n        asettamalla ``values``-argumentti todeksi (katso `Booleani\n        argumentit`).\n\n        Esimerkki:\n        | ${labels} = | `Get List Items` | mylist              |             |\n        | ${values} = | `Get List Items` | css:#example select | values=True |\n\n        Tuki arvojen palauttamiselle on uusi SeleniumLibrary-versiossa 3.0.\n        ",
        "sha256": "60f7293239f288f08276b8fa63d98a6be52ff42a0627b9b0da14ba6dab51bd94"
    },
    "get_selected_list_label": {
        "name": "hae_valitun_luettelon_tunniste",
        "doc": "Palauttaa valintaluettelon ``locator``:sta valitun vaihtoehdon tunnisteen.\n\n        Jos useita vaihtoehtoja on valittu, palautetaan ensimmäisen vaihtoehdon tunniste.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n        ",
        "sha256": "f9281509d3c4ac39f4b98d9d9d4f0f2dd6b579c37204b33ec7d47b6bef999672"
    },
    "get_selected_list_labels": {
        "name": "hae_valitun_luettelon_tunnisteet",
        "doc": "Palauttaa valintaluettelon ``locator``:sta valittujen vaihtoehtojen tunnisteet.\n\n        Alkaen SeleniumLibrary versiosta 3.0, palauttaa tyhjän listan, jos\n        valintoja ei ole. Aikaisemmissa versioissa tämä aiheutti virheen.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n        ",
        "sha256": "e3bf2c1db04dbb52c99c7397065da52699bb4b7bdc5ceaeb45d525e8176acb48"
    },
    "get_selected_list_value": {
        "name": "hae_valitun_luettelon_arvo",
        "doc": "Palauttaa valintaluettelon ``locator``:sta valitun vaihtoehdon arvon.\n\n        Jos useita vaihtoehtoja on valittu, palautetaan ensimmäisen vaihtoehdon arvo.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n        ",
        "sha256": "2b935dd4627ca62d92a311569036b2978032aa67e542f5b7ef91a514f01f323d"
    },
    "get_selected_list_values": {
        "name": "hae_valitun_luettelon_arvot",
        "doc": "Palauttaa valintaluettelon ``locator``:sta valittujen vaihtoehtojen arvot.\n\n        Alkaen SeleniumLibrary versiosta 3.0, palauttaa tyhjän listan, jos\n        valintoja ei ole. Aikaisemmissa versioissa tämä aiheutti virheen.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n        ",
        "sha256": "83b79c56056a6d51529e36a093ba14ec0b805a96bdb9e6870214eb4de987bea6"
    },
    "list_selection_should_be": {
        "name": "luettelon_valinnan_tulisi_olla",
        "doc": "Varmistaa, että valintaluettelo ``locator`` sisältää ``expected``-argumentin mukaiset valinnat.\n\n        On mahdollista antaa odotetut valinnat sekä näkyvinä tunnisteina että\n        arvoina. Alkaen SeleniumLibrary versiosta 3.0, tunnisteiden ja\n        arvojen sekoittaminen ei ole mahdollista. Valittujen vaihtoehtojen järjestystä ei\n        validoida.\n\n        Jos odotettuja vaihtoehtoja ei anneta, varmistaa, että luettelossa ei ole\n        valintoja. Selkeämpi vaihtoehto on käyttää `List Should\n        Have No Selections` -avainsanaa.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n\n        Esimerkit:\n        | `List Selection Should Be` | sukupuoli | Nainen          |        |\n        | `List Selection Should Be` | kiinnostukset | Testiautomaatio | Python |\n        ",
        "sha256": "1d70ccc8a2dc868e265fc29e9cbc2317799eb12d0dd3f21d61fa4ffea7a7e4c2"
    },
    "list_should_have_no_selections": {
        "name": "luettelossa_ei_tulisi_olla_valintoja",
        "doc": "Varmistaa, että valintaluettelossa ``locator`` ei ole valittuja vaihtoehtoja.\n\n        Katso lisätietoja sijaintielementeistä kohdasta `Elementtien paikantaminen`.\n        ",
        "sha256": "429fc50c47319d8267bc5c2306a7d1d191a124d457a6f6655bb4ff5d64d71def"
    },
    "page_should_contain_list": {
        "name": "sivun_tulisi_sisältää_lista",
        "doc": "Tarkistaa, että valintalista ``locator`` löytyy nykyiseltä sivulta.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen ``message``\n        ja ``loglevel`` argumenteista.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "9ad2d87bd51bee3365d5ca32153adae2ea4b137f916f07fc39416a54aa117bf6"
    },
    "page_should_not_contain_list": {
        "name": "sivun_ei_tulisi_sisältää_lista",
         "doc": "Tarkistaa, että valintalista ``locator`` ei löydy nykyiseltä sivulta.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen ``message``\n        ja ``loglevel`` argumenteista.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "2f2e58b399f73b2ab4dc795368b0b18b9a63c37e2764de722d897039d6e7881c"
    },
    "select_all_from_list": {
        "name": "valitse_kaikki_listasta",
        "doc": "Valitsee kaikki vaihtoehdot monivalintalistasta ``locator``.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "7113bdf3faec639e3bdb3b1beb09c526dec522a0181ae11fd94398fdfb3f6fd2"
    },
    "select_from_list_by_index": {
        "name": "valitse_listasta_indeksin_mukaan",
        "doc": "Valitsee vaihtoehtoja valintalistasta ``locator`` käyttämällä ``indeksit``.\n\n        Listan vaihtoehtojen indeksit alkavat 0:sta.\n\n        Jos yksi-valintalistaan annetaan enemmän kuin yksi vaihtoehto,\n        viimeinen arvo valitaan. Monivalintalistoissa kaikki\n        määritetyt vaihtoehdot valitaan, mutta mahdollisia vanhoja valintoja\n        ei poisteta.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "220f77e512662cfff307efa29f5b46dba2e0d1b04760707cface96f63ff87e7c"
    },
    "select_from_list_by_label": {
        "name": "valitse_listasta_tunnisteen_mukaan",
        "doc": "Valitsee vaihtoehtoja valintalistasta ``locator`` käyttämällä ``tunnisteet``.\n\n        Jos yksi-valintalistaan annetaan enemmän kuin yksi vaihtoehto,\n        viimeinen arvo valitaan. Monivalintalistoissa kaikki\n        määritetyt vaihtoehdot valitaan, mutta mahdollisia vanhoja valintoja\n        ei poisteta.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "12c2af99cb8c78b6edd06ee17d902a575d1a2a4932d21bb67b040233a5a80318"
    },
    "select_from_list_by_value": {
        "name": "valitse_listasta_arvon_mukaan",
        "doc": "Valitsee vaihtoehtoja valintalistasta ``locator`` käyttämällä ``arvot``.\n\n        Jos yksi-valintalistaan annetaan enemmän kuin yksi vaihtoehto,\n        viimeinen arvo valitaan. Monivalintalistoissa kaikki\n        määritetyt vaihtoehdot valitaan, mutta mahdollisia vanhoja valintoja\n        ei poisteta.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "9989cd962aeddb746a6ac8c632023bb9fbbe1ae832ae618635fb1c072049d7ab"
    },
    "unselect_all_from_list": {
        "name": "poista_valinnat_listasta",
        "doc": "Poistaa kaikki valinnat monivalintalistasta ``locator``.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n\n        Uutta SeleniumLibrary 3.0:ssa.\n        ",
        "sha256": "e273c674b217707452b897e66ccfa2ff12ef2279198364b4f95350b0cc557c4c"
    },
    "unselect_from_list_by_index": {
        "name": "poista_valinta_listasta_indeksin_mukaan",
        "doc": "Poistaa valintoja valintalistasta ``locator`` käyttämällä ``indeksejä``.\n\n        Listan vaihtoehtojen indeksit alkavat 0:sta. Tämä avainsana toimii vain\n        monivalintalistoissa.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "5aac4cc2fa0bec90621d29b2eac7064d18510c447b7357d8eb5948d2cd459cef"
    },
    "unselect_from_list_by_label": {
        "name": "poista_valinta_listasta_tunnisteen_mukaan",
        "doc": "Poistaa valintoja valintalistasta ``locator`` käyttämällä ``tunnisteita``.\n\n        Tämä avainsana toimii vain monivalintalistoissa.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "3dfe87450d9a1a8cad3f8cad3e159b8bd4c3e25f25f91dd747aeb23403b18ab5"
    },
    "unselect_from_list_by_value": {
        "name": "poista_valinta_listasta_arvon_mukaan",
        "doc": "Poistaa valintoja valintalistasta ``locator`` käyttämällä ``arvoja``.\n\n        Tämä avainsana toimii vain monivalintalistoissa.\n\n        Katso `Locating elements` osio saadaksesi yksityiskohtia locator\n        syntaksista.\n        ",
        "sha256": "7ee06a01319ea95e02d4ba34cfbc0d845cf5dbaf58244d93338760609a67ec02"
    },
    "get_table_cell": {
        "name": "hae_taulukon_solun_sisalto",
        "doc": "Palauttaa taulukon solun sisällön.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia ja sen solu\n        löydetään käyttäen ``rivi`` ja ``sarake`` argumentteja. Katso `Locating elements`\n        osio saadaksesi yksityiskohtia locator syntaksista.\n\n        Sekä rivi- että sarakeindeksit alkavat 1:stä, ja otsikko- ja alatunniste\n        rivit sisältyvät laskentaan. On mahdollista viitata riveihin\n        ja sarakkeisiin myös lopusta käyttämällä negatiivisia indeksejä, jolloin -1\n        on viimeinen rivi/sarake, -2 toiseksi viimeinen ja niin edelleen.\n\n        Kaikki ``<th>`` ja ``<td>`` elementit missä tahansa taulukossa\n        katsotaan soluiksi.\n\n        Katso `Page Should Contain` saadaksesi selityksen ``loglevel``\n        argumentista.\n        ",
        "sha256": "616f2d925fbd431f1cdde9427ff865b4f402806b2f15b99dfd033a96e0d0a42e"
    },
    "table_cell_should_contain": {
        "name": "taulukon_solun_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukon solu sisältää tekstin ``expected``.\n\n        Katso `Get Table Cell`-osio, jota tämä avainsana käyttää sisäisesti,\n        saadaksesi lisätietoja hyväksytyistä argumenteista.\n        ",
        "sha256": "628c09aa35b649beda7c500e914fa906cf91f9eb30afad19973809784ee1f8d6"
    },
    "table_column_should_contain": {
        "name": "taulukon_sarakkeen_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukon sarake sisältää tekstin ``expected``.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia ja sen sarake\n        löydetään käyttäen ``sarake`` argumenttia. Katso `Locating elements` osio\n        saadaksesi yksityiskohtia locator syntaksista.\n\n        Sarakeindeksit alkavat 1:stä. On mahdollista viitata sarakkeisiin\n        myös lopusta käyttämällä negatiivisia indeksejä, jolloin -1 on viimeinen sarake,\n        -2 toiseksi viimeinen ja niin edelleen.\n\n        Jos taulukossa on soluja, jotka ulottuvat useisiin sarakkeisiin,\n        nämä yhdistetyt solut lasketaan yhdeksi sarakkeeksi.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen\n        ``loglevel`` argumentista.\n        ",
        "sha256": "e0f898ce00b22cd66e2f4c5ab1cdcbea733f294d53bc210ec33667dfcd1963de"
    },
    "table_footer_should_contain": {
        "name": "taulukon_alatunnisteen_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukon alatunniste sisältää tekstin ``expected``.\n\n        Mikä tahansa ``<td>`` elementti ``<tfoot>`` elementissä katsotaan\n        osaksi alatunnistetta.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia. Katso\n        `Locating elements` osio saadaksesi yksityiskohtia locator syntaksista.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen\n        ``loglevel`` argumentista.\n        ",
        "sha256": "454fb3be070acb378460038572ed4268de8b18b96b3aaa903d3a1f0093147691"
    },
    "table_header_should_contain": {
        "name": "taulukon_otsikon_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukon otsikko sisältää tekstin ``expected``.\n\n        Mikä tahansa ``<th>`` elementti missä tahansa taulukossa katsotaan\n        osaksi otsikkoa.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia. Katso\n        `Locating elements` osio saadaksesi yksityiskohtia locator syntaksista.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen\n        ``loglevel`` argumentista.\n        ",
        "sha256": "66208e9741c9d18d1c09645bfcb9b54b4ffe2c104e5402c86f2cf54feb02de79"
    },
    "table_row_should_contain": {
        "name": "taulukon_rivin_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukon rivi sisältää tekstin ``expected``.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia ja sen sarakkeet\n        löydetään käyttäen ``sarake`` argumenttia. Katso `Locating elements` osio\n        saadaksesi yksityiskohtia locator syntaksista.\n\n        Rivin indeksit alkavat 1:stä. On mahdollista viitata riveihin\n        myös lopusta käyttämällä negatiivisia indeksejä, jolloin -1 on viimeinen rivi,\n        -2 toiseksi viimeinen ja niin edelleen.\n\n        Jos taulukossa on soluja, jotka ulottuvat useisiin riveihin, vastaa\n        osumaa ainoastaan näiden yhdistettyjen solujen yläimmälle riville.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen\n        ``loglevel`` argumentista.\n        ",
        "sha256": "2ad4f79443748abaa86e768fb0994f32a2d1386c435688727093fb0c1034d23f"
    },
    "table_should_contain": {
        "name": "taulukon_tulee_sisaltaa",
        "doc": "Varmistaa, että taulukko sisältää tekstin ``expected``.\n\n        Taulukko paikannetaan käyttäen ``locator`` argumenttia. Katso\n        `Locating elements` osio saadaksesi yksityiskohtia locator syntaksista.\n\n        Katso `Page Should Contain Element` saadaksesi selityksen\n        ``loglevel`` argumentista.\n        ",
        "sha256": "ea4dc362f588ab33332b985ea6ff059499de1e4c25bdbfceb6e6517cd36b24fc"
    },
    "wait_for_condition": {
        "name": "odota_ehtoa",
        "doc": "Odottaa, kunnes ``ehto`` on tosi tai ``timeout`` aika loppuu.\n\n        Ehto voi olla mielivaltainen JavaScript-lauseke, mutta sen\n        on palautettava arvo arvioitavaksi. Katso `Execute JavaScript` saadaksesi\n        lisätietoja sivujen sisällön käyttämisestä.\n\n        Epäonnistuu, jos aikaraja umpeutuu ennen kuin ehto toteutuu. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä\n        ja niiden oletusarvoista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n\n        Esimerkit:\n        | `Odota Ehtoa` | return document.title == \"Uusi Otsikko\" |\n        | `Odota Ehtoa` | return jQuery.active == 0            |\n        | `Odota Ehtoa` | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\" |\n        ",
        "sha256": "4998ab3cee46a578df2b064d390401d2ec0268454607ef194db5c0d3d73c81db"
    },
    "wait_until_element_contains": {
        "name": "odota_kunnes_elementti_sisaltaa",
        "doc": "Odottaa, kunnes elementti ``locator`` sisältää tekstin ``text``.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin teksti ilmestyy. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements` osiota yksityiskohtia locator syntaksista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n        ",
        "sha256": "982c68220bb622a3d985c04b39ea3bc11b20437e73bcf8e38d51ed7e2032852c"
    },
    "wait_until_element_does_not_contain": {
        "name": "odota_kunnes_elementti_ei_sisalla",
        "doc": "Odottaa, kunnes elementti ``locator`` ei sisällä tekstiä ``text``.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin teksti katoaa. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements` osiota yksityiskohtia locator syntaksista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n        ",
        "sha256": "a2b8bc5ee7de21f06e79317935026beddee2105ae645c22b322446dd5a8be0ad"
    },
    "wait_until_element_is_enabled": {
        "name": "odota_kunnes_elementti_on_kaytossa",
        "doc": "Odottaa, kunnes elementti ``locator`` on käytössä.\n\n        Elementti katsotaan käytössä olevaksi, jos se ei ole käytöstä poistettu eikä vain luku -tilassa.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin elementti tulee käyttöön. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements` osiota yksityiskohtia locator syntaksista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n\n        Luku -tilassa olevien elementtien huomioiminen käytöstä poistettuina on uusi ominaisuus\n        SeleniumLibrary 3.0:ssa.\n        ",
        "sha256": "6202e0635b377e2e7d5eaa091eb6a582b64bc49f9d5edf6ddeb7754723015543"
    },
    "wait_until_element_is_not_visible": {
        "name": "odota_kunnes_elementti_ei_ole_nakyvissa",
        "doc": "Odottaa, kunnes elementti ``locator`` ei ole näkyvissä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin elementti ei ole näkyvissä. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements` osiota yksityiskohtia locator syntaksista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n        ",
        "sha256": "e112e160d739b0cd0f8730703738cc0692e1c0d57e42308b6d50206db23e6d52"
    },
    "wait_until_element_is_visible": {
        "name": "odota_kunnes_elementti_on_nakyvissa",
        "doc": "Odottaa, kunnes elementti ``locator`` on näkyvissä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin elementti tulee näkyviin. Katso\n        `Timeouts` osiota saadaksesi lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements` osiota yksityiskohtia locator syntaksista.\n\n        ``error`` voidaan käyttää korvaamaan oletusvirheviesti.\n        ",
        "sha256": "90878c583a727db5da943e7f532efa4e73c59a525a0107233fd59740bb9dd116"
    },
    "wait_until_location_contains": {
        "name": "odota_kunnes_sijainti_sisaltaa",
        "doc": "Odottaa, kunnes nykyinen URL sisältää ``expected``.\n\n        ``expected`` argumentissa on odotettu arvo URL:ssä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin sijainti sisältää odotetun arvon. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``message`` argumenttia voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Uusi ominaisuus SeleniumLibrary 4.0:ssa.\n        ",
        "sha256": "33b91c79fe956c37284bccdb56d318e679ec774ca1565db5e2140250b6b46fb5"
    },
    "wait_until_location_does_not_contain": {
        "name": "odota_kunnes_sijainti_ei_sisalla",
        "doc": "Odottaa, kunnes nykyinen URL ei sisällä ``location``.\n\n        ``location`` argumentissa on arvo, jota ei odoteta URL:ssä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin sijainti ei sisällä odotettua arvoa. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``message`` argumenttia voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Uusi ominaisuus SeleniumLibrary 4.3:ssa.\n        ",
        "sha256": "5ea0b9da22370c90d509d3e4a8aad47b69652b2bd0ce5b29a9264508d4bea432"
    },
    "wait_until_location_is": {
        "name": "odota_kunnes_sijainti_on",
        "doc": "Odottaa, kunnes nykyinen URL on ``expected``.\n\n        ``expected`` argumentissa on odotettu arvo URL:ssä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin sijainti on odotettu. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``message`` argumenttia voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Uusi ominaisuus SeleniumLibrary 4.0:ssa.\n        ",
        "sha256": "2a0604e9e096908cda4caef1486d56310d6f10d0d974804c96a32a0492eb1f82"
    },
    "wait_until_location_is_not": {
        "name": "odota_kunnes_sijainti_ei_ole",
        "doc": "Odottaa, kunnes nykyinen URL ei ole ``location``.\n\n        ``location`` argumentissa on odottamaton arvo URL:ssä.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin sijainti ei ole odotettu. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``message`` argumenttia voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        Uusi ominaisuus SeleniumLibrary 4.3:ssa.\n        ",
        "sha256": "96f19cceb6f263cde977b3dfd4b90d06691a1533ebef77c9c5ef1f0e0925e228"
    },
    "wait_until_page_contains": {
        "name": "odota_kunnes_sivu_sisaltaa",
        "doc": "Odottaa, kunnes ``text`` ilmestyy nykyiselle sivulle.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin teksti ilmestyy. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``error`` voidaan käyttää oletusvirheviestin korvaamiseen.\n        ",
        "sha256": "2e6b9f7e424ed5ba676c82ce9b6ae964050a5fb7b47baa35a3f94125107d9e57"
    },
    "wait_until_page_contains_element": {
        "name": "odota_kunnes_sivu_sisaltaa_elementin",
        "doc": "Odottaa, kunnes elementti ``locator`` ilmestyy nykyiselle sivulle.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin elementti ilmestyy. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta, sekä `Locating elements`-osio yksityiskohtia locator-syntaksista.\n\n        ``error`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        ``limit`` argumentilla voidaan määrittää, kuinka monta elementtiä sivun tulisi sisältää. Kun ``limit`` on `None` (oletus), sivu voi sisältää yhden tai useampia elementtejä. Kun limit on numero, sivun on sisällettävä tasan niin monta elementtiä.\n\n        ``limit`` on uusi ominaisuus SeleniumLibraryssa 4.4:ssä.\n        ",
        "sha256": "712da49e8aff630cb2843522331935693ce334aea9ccb2aacb6c015af9c921b5"
    },
    "wait_until_page_does_not_contain": {
        "name": "odota_kunnes_sivu_ei_sisällä",
        "doc": "Odottaa, kunnes ``text`` katoaa nykyiseltä sivulta.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin teksti katoaa. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta.\n\n        ``error`` voidaan käyttää oletusvirheviestin korvaamiseen.\n        ",
        "sha256": "96c2f8840c677afdb9f207107bf3f7bbdfb9d1b56e3ce887cf34a88e3e273974"
    },
    "wait_until_page_does_not_contain_element": {
        "name": "odota_kunnes_sivu_ei_sisällä_elementtiä",
        "doc": "Odottaa, kunnes elementti ``locator`` katoaa nykyiseltä sivulta.\n\n        Epäonnistuu, jos ``timeout`` aikaraja umpeutuu ennen kuin elementti katoaa. Katso\n        `Timeouts`-osio lisätietoja aikarajojen käytöstä ja niiden\n        oletusarvosta sekä `Locating elements`-osio yksityiskohtia\n        sijainnin määrittäjien syntaksista.\n\n        ``error`` voidaan käyttää oletusvirheviestin korvaamiseen.\n\n        ``limit``-argumenttia voidaan käyttää määrittämään, kuinka monta elementtiä sivu\n        ei saa sisältää. Kun ``limit`` on `None` (oletus), sivu ei saa sisältää\n        mitään elementtejä. Kun limit on numero, sivulla ei saa olla\n        samaa määrää elementtejä.\n\n        ``limit`` on uusi ominaisuus SeleniumLibraryssä 4.4\n        ",
        "sha256": "081d0393a8d8f100d9db65f81170222f4a6678fcc2703a3e123c907ef5ade430"
    },
    "close_window": {
        "name": "sulje_ikkuna",
        "doc": "Sulkee tällä hetkellä avoinna olevan ja valitun selainikkunan/välilehden.",
        "sha256": "8d00f3bcf62126a5fcc61ca14d62631ad918c2993ee9e8f2641cb57595b591bb"
    },
    "get_locations": {
        "name": "hanki_sijainnit",
        "doc": "Palauttaa ja kirjaa kaikkien valitun selaimen ikkunoiden URL-osoitteet.\n\n        *Selaimen laajuus:*\n\n        ``browser``-argumentti määrittää selaimen, jonka ikkunatiedot halutaan palauttaa.\n\n        - ``browser`` voi olla ``index_or_alias``, kuten `Vaihda selain`-toiminnossa.\n\n        - Jos ``browser`` on ``CURRENT`` (oletus, kirjaimia ei oteta huomioon), valitaan tällä hetkellä aktiivinen selain.\n\n        - Jos ``browser`` on ``ALL`` (kirjaimia ei oteta huomioon), palautetaan kaikkien avoinna olevien selainten kaikkien ikkunoiden tiedot.",
        "sha256": "3e73811fa673371891cffa16aa99f24fa6dbc87ff826d0d84be6d54fc937163c"
    },
    "get_window_handles": {
        "name": "hanki_ikkunan_kahvat",
        "doc": "Palauttaa valitun selaimen kaikki alaikkunan kahvat listana.\n\n        Voidaan käyttää ikkunalistanä `Select Window`-toiminnossa.\n\n        Kuinka valita tämän toiminnon ``browser``-laajuus, katso `Hanki sijainnit`-toiminnossa.\n\n        SeleniumLibrary 3.0:n edellä tämä toiminto oli nimeltään `Listaa ikkunat`.",
        "sha256": "b051b51a36766e2a3c748a2ecbb76ed6516a20cec807a38d29a96f95c5ea7efa"
    },
    "get_window_identifiers": {
        "name": "hanki_ikkunoidentifikaattorit",
        "doc": "Palauttaa ja kirjaa kaikkien valitun selaimen ikkunoiden id-attribuutit.\n\n        Kuinka valita tämän avainsanan ``browser``-kohde, katso `Hanki sijainnit`.",
        "sha256": "9342df3471d9923e299c60511d11006762b1797802153c97ac0451adcdd5e0bf"
    },
    "get_window_names": {
        "name": "hanki_ikkunanimet",
        "doc": "Palauttaa ja kirjaa valitun selaimen kaikkien ikkunoiden nimet.\n\n        Kuinka valita tämän avainsanan ``browser``-kohde, katso `Hanki sijainnit`.",
        "sha256": "557778bcbb2b4be2e575416f5422c8077397f2e7d7614e3b064fe3f222bf3225"
    },
    "get_window_position": {
        "name": "hanki_ikkunan_sijainti",
        "doc": "Palauttaa nykyisen ikkunan sijainnin.\n\n        Sijainti on suhteessa näytön vasempaan yläkulmaan. Palautetut\n        arvot ovat kokonaislukuja. Katso myös `Aseta ikkunan sijainti`.\n\n        Esimerkki:\n        | ${x} | ${y}= | `Hanki ikkunan sijainti` |\n        ",
        "sha256": "c9f1ab8ee31517bc91a6ae9f3dd3782c695f0c3c64adf1639fc3e34ea85e7d9c"
    },
    "get_window_size": {
        "name": "hanki_ikkunan_koko",
        "doc": "Palauttaa nykyisen ikkunan leveyden ja korkeuden kokonaislukuina.\n\n        Katso myös `Aseta ikkunan koko`.\n\n        Jos ``inner``-parametri on asetettu todeksi (True), avainsana palauttaa\n        HTML DOM:n window.innerWidth ja window.innerHeight ominaisuudet.\n        Katso lisätietoja boolean-argumenttien asettamisesta `Boolean-argumentit`-osiosta.\n        ``inner`` on uusi SeleniumLibraryn versiossa 4.0.\n\n        Esimerkki:\n        | ${leveys} | ${korkeus}= | `Hanki ikkunan koko` |      |\n        | ${leveys} | ${korkeus}= | `Hanki ikkunan koko` | True |\n        ",
        "sha256": "d9fc8a6bc4dd38749c761722027b783dfd74ff3c69d16ad3e4ceceb162f2ed64"
    },
    "get_window_titles": {
        "name": "hanki_ikkunan_otsikot",
        "doc": "Palauttaa ja kirjaa valitun selaimen kaikkien ikkunoiden otsikot.\n\n        Kuinka valita tämän avainsanan ``browser``-kohde, katso `Hanki sijainnit`.",
        "sha256": "7b2a62a9e808f584ec9674faae954855135aec5ac168ec0b929b11ac73f7fcec"
    },
    "maximize_browser_window": {
        "name": "suurenna_selainikkuna",
        "doc": "Suurentaa nykyisen selainikkunan.",
        "sha256": "de016b8b98dc0a25f624060424c8ae449cc680990baf8789da09181b2643d77b"
    },
    "minimize_browser_window": {
        "name": "minimoi_selainikkuna",
        "doc": "Minimoi nykyisen selainikkunan.",
        "sha256": "6a99ddaa41cde69ae82c33df6d43976d9ad76a358be5d4e35f065895e94e95db"
    },
    "set_window_position": {
        "name": "asettaa_ikkunan_sijainti",
        "doc": "Asettaa ikkunan sijainnin käyttäen ``x`` ja ``y`` koordinaatteja.\n\n        Sijainti on suhteessa näytön vasempaan yläkulmaan,\n        mutta joissakin selaimissa käyttöjärjestelmän mahdollisesti\n        määrittämä tehtäväpalkki saattaa jäädä pois laskuista.\n        Todellinen sijainti voi siten vaihdella eri selaimissa.\n\n        Arvot voidaan antaa joko merkkijonoina sisältäen numeroita tai käyttämällä\n        suoria numeroarvoja. Katso myös `Hanki ikkunan sijainti`.\n\n        Esimerkki:\n        | `Aseta ikkunan sijainti` | 100 | 200 |\n        ",
        "sha256": "d9c3d6dc138cd350941a1660e5601dbc4441ee6c0a7df08902c76dd15953017c"
    },
    "set_window_size": {
        "name": "asettaa_ikkunan_koko",
        "doc": "Asettaa nykyisen ikkunan koon annettuun ``leveys`` ja ``korkeus`` arvoihin.\n\n        Arvot voidaan antaa joko merkkijonoina sisältäen numeroita tai käyttämällä\n        suoria numeroarvoja. Katso myös `Hanki ikkunan koko`.\n\n        Selaimilla on rajoitus niiden minimitoiminnossa. Yrittäminen\n        asettaa ne pienemmäksi aiheuttaa, että todellinen koko on suurempi\n        kuin pyydetty koko.\n\n        Jos ``inner``-parametri on asetettu todeksi (True), avainsana asettaa tarvittavan\n        ikkunan leveyden ja korkeuden saavuttaakseen halutun HTML DOM -ikkunan _window.innerWidth_\n        ja _window.innerHeight_. Katso lisätietoja boolean-argumenttien asettamisesta `Boolean-argumentit`-osiossa.\n\n        Tämä ``inner``-argumentti on uusi SeleniumLibraryn versiossa 4.0.\n\n        Tätä ``inner``-argumenttia ei tueta kehyksissä (Frames). Jos kehys on valittu,\n        vaihda oletustilaan ennen tämän suorittamista.\n\n        Esimerkki:\n        | `Aseta ikkunan koko` | 800 | 600 |      |\n        | `Aseta ikkunan koko` | 800 | 600 | True |\n        ",
        "sha256": "31b5febddcb935b20320728accc28a892b8a0956301646827aa8c7c74e1cdfec"
    },
    "switch_window": {
        "name": "vaihda_ikkuna",
        "doc": "Vaihtaa selenium ikkunan joka vasataa``locator``.\n\n        Jos ikkuna löytyy, all subsequent commands use the selected\n        window, until this keyword is used again. If the window is not\n        found, this keyword fails. The previous windows handle is returned\n        and can be used to switch back to it later.\n\n        Notice that alerts should be handled with\n        `Handle Alert` or other alert related keywords.\n\n        The ``locator`` can be specified using different strategies somewhat\n        similarly as when `locating elements` on pages.\n\n        - By default, the ``locator`` is matched against window handle, name,\n          title, and URL. Matching is done in that order and the first\n          matching window is selected.\n\n        - The ``locator`` can specify an explicit strategy by using the format\n          ``strategy:value`` (recommended) or ``strategy=value``. Supported\n          strategies are ``name``, ``title``, and ``url``. These matches windows\n          using their name, title, or URL, respectively. Additionally, ``default``\n          can be used to explicitly use the default strategy explained above.\n\n        - If the ``locator`` is ``NEW`` (case-insensitive), the latest\n          opened window is selected. It is an error if this is the same\n          as the current window.\n\n        - If the ``locator`` is ``MAIN`` (default, case-insensitive),\n          the main window is selected.\n\n        - If the ``locator`` is ``CURRENT`` (case-insensitive), nothing is\n          done. This effectively just returns the current window handle.\n\n        - If the ``locator`` is not a string, it is expected to be a list\n          of window handles _to exclude_. Such a list of excluded windows\n          can be got from `Get Window Handles` before doing an action that\n          opens a new window.\n\n        The ``timeout`` is used to specify how long keyword will poll to select\n        the new window. The ``timeout`` is new in SeleniumLibrary 3.2.\n\n        Example:\n        | `Click Link`      | popup1      |      | # Open new window |\n        | `Switch Window`   | example     |      | # Select window using default strategy |\n        | `Title Should Be` | Pop-up 1    |      |\n        | `Click Button`    | popup2      |      | # Open another window |\n        | ${handle} = | `Switch Window`   | NEW  | # Select latest opened window |\n        | `Title Should Be` | Pop-up 2    |      |\n        | `Switch Window`   | ${handle}   |      | # Select window using handle |\n        | `Title Should Be` | Pop-up 1    |      |\n        | `Switch Window`   | MAIN        |      | # Select the main window |\n        | `Title Should Be` | Main        |      |\n        | ${excludes} = | `Get Window Handles` | | # Get list of current windows |\n        | `Click Link`      | popup3      |      | # Open one more window |\n        | `Switch Window`   | ${excludes} |      | # Select window using excludes |\n        | `Title Should Be` | Pop-up 3    |      |\n\n        The ``browser`` argument allows with ``index_or_alias`` to implicitly switch to\n        a specific browser when switching to a window. See `Switch Browser`\n\n        - If the ``browser`` is ``CURRENT`` (case-insensitive), no other browser is\n          selected.\n\n        *NOTE:*\n\n        - The ``strategy:value`` syntax is only supported by SeleniumLibrary\n          3.0 and newer.\n        - Prior to SeleniumLibrary 3.0 matching windows by name, title\n          and URL was case-insensitive.\n        - Earlier versions supported aliases ``None``, ``null`` and the\n          empty string for selecting the main window, and alias ``self``\n          for selecting the current window. Support for these aliases was\n          removed in SeleniumLibrary 3.2.\n        ",
        "sha256": "2ae583a5179810f31a4f7ae665918443d1f068c53e255c552b51bd1f5205c608"
    },
    "__init__": {
        "name": "__init__",
        "doc": "SeleniumLibrary is a web testing library for Robot Framework.\n\nThis document explains how to use keywords provided by SeleniumLibrary.\nFor information about installation, support, and more, please visit the\n[https://github.com/robotframework/SeleniumLibrary|project pages].\nFor more information about Robot Framework, see http://robotframework.org.\n\nSeleniumLibrary uses the Selenium WebDriver modules internally to\ncontrol a web browser. See http://seleniumhq.org for more information\nabout Selenium in general and SeleniumLibrary README.rst\n[https://github.com/robotframework/SeleniumLibrary#browser-drivers|Browser drivers chapter]\nfor more details about WebDriver binary installation.\n\n%TOC%\n\n= Locating elements =\n\nAll keywords in SeleniumLibrary that need to interact with an element\non a web page take an argument typically named ``locator`` that specifies\nhow to find the element. Most often the locator is given as a string\nusing the locator syntax described below, but `using WebElements` is\npossible too.\n\n== Locator syntax ==\n\nSeleniumLibrary supports finding elements based on different strategies\nsuch as the element id, XPath expressions, or CSS selectors. The strategy\ncan either be explicitly specified with a prefix or the strategy can be\nimplicit.\n\n=== Default locator strategy ===\n\nBy default, locators are considered to use the keyword specific default\nlocator strategy. All keywords support finding elements based on ``id``\nand ``name`` attributes, but some keywords support additional attributes\nor other values that make sense in their context. For example, `Click\nLink` supports the ``href`` attribute and the link text and addition\nto the normal ``id`` and ``name``.\n\nExamples:\n\n| `Click Element` | example | # Match based on ``id`` or ``name``.            |\n| `Click Link`    | example | # Match also based on link text and ``href``.   |\n| `Click Button`  | example | # Match based on ``id``, ``name`` or ``value``. |\n\nIf a locator accidentally starts with a prefix recognized as `explicit\nlocator strategy` or `implicit XPath strategy`, it is possible to use\nthe explicit ``default`` prefix to enable the default strategy.\n\nExamples:\n\n| `Click Element` | name:foo         | # Find element with name ``foo``.               |\n| `Click Element` | default:name:foo | # Use default strategy with value ``name:foo``. |\n| `Click Element` | //foo            | # Find element using XPath ``//foo``.           |\n| `Click Element` | default: //foo   | # Use default strategy with value ``//foo``.    |\n\n=== Explicit locator strategy ===\n\nThe explicit locator strategy is specified with a prefix using either\nsyntax ``strategy:value`` or ``strategy=value``. The former syntax\nis preferred because the latter is identical to Robot Framework's\n[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax|\nnamed argument syntax] and that can cause problems. Spaces around\nthe separator are ignored, so ``id:foo``, ``id: foo`` and ``id : foo``\nare all equivalent.\n\nLocator strategies that are supported by default are listed in the table\nbelow. In addition to them, it is possible to register `custom locators`.\n\n| = Strategy = |          = Match based on =         |         = Example =            |\n| id           | Element ``id``.                     | ``id:example``                 |\n| name         | ``name`` attribute.                 | ``name:example``               |\n| identifier   | Either ``id`` or ``name``.          | ``identifier:example``         |\n| class        | Element ``class``.                  | ``class:example``              |\n| tag          | Tag name.                           | ``tag:div``                    |\n| xpath        | XPath expression.                   | ``xpath://div[@id=\"example\"]`` |\n| css          | CSS selector.                       | ``css:div#example``            |\n| dom          | DOM expression.                     | ``dom:document.images[5]``     |\n| link         | Exact text a link has.              | ``link:The example``           |\n| partial link | Partial link text.                  | ``partial link:he ex``         |\n| sizzle       | Sizzle selector deprecated.         | ``sizzle:div.example``         |\n| data         | Element ``data-*`` attribute        | ``data:id:my_id``              |\n| jquery       | jQuery expression.                  | ``jquery:div.example``         |\n| default      | Keyword specific default behavior.  | ``default:example``            |\n\nSee the `Default locator strategy` section below for more information\nabout how the default strategy works. Using the explicit ``default``\nprefix is only necessary if the locator value itself accidentally\nmatches some of the explicit strategies.\n\nDifferent locator strategies have different pros and cons. Using ids,\neither explicitly like ``id:foo`` or by using the `default locator\nstrategy` simply like ``foo``, is recommended when possible, because\nthe syntax is simple and locating elements by id is fast for browsers.\nIf an element does not have an id or the id is not stable, other\nsolutions need to be used. If an element has a unique tag name or class,\nusing ``tag``, ``class`` or ``css`` strategy like ``tag:h1``,\n``class:example`` or ``css:h1.example`` is often an easy solution. In\nmore complex cases using XPath expressions is typically the best\napproach. They are very powerful but a downside is that they can also\nget complex.\n\nExamples:\n\n| `Click Element` | id:foo                      | # Element with id 'foo'. |\n| `Click Element` | css:div#foo h1              | # h1 element under div with id 'foo'. |\n| `Click Element` | xpath: //div[@id=\"foo\"]//h1 | # Same as the above using XPath, not CSS. |\n| `Click Element` | xpath: //*[contains(text(), \"example\")] | # Element containing text 'example'. |\n\n*NOTE:*\n\n- The ``strategy:value`` syntax is only supported by SeleniumLibrary 3.0\n  and newer.\n- Using the ``sizzle`` strategy or its alias ``jquery`` requires that\n  the system under test contains the jQuery library.\n- Prior to SeleniumLibrary 3.0, table related keywords only supported\n  ``xpath``, ``css`` and ``sizzle/jquery`` strategies.\n- ``data`` strategy is conveniance locator that will construct xpath from the parameters.\n  If you have element like `<div data-automation=\"automation-id-2\">`, you locate the element via\n  ``data:automation:automation-id-2``. This feature was added in SeleniumLibrary 5.2.0\n\n=== Implicit XPath strategy ===\n\nIf the locator starts with ``//``  or multiple opening parenthesis in front\nof the ``//``, the locator is considered to be an XPath expression. In other\nwords, using ``//div`` is equivalent to using explicit ``xpath://div`` and\n``((//div))`` is equivalent to using explicit ``xpath:((//div))``\n\nExamples:\n\n| `Click Element` | //div[@id=\"foo\"]//h1 |\n| `Click Element` | (//div)[2]           |\n\nThe support for the ``(//`` prefix is new in SeleniumLibrary 3.0.\nSupporting multiple opening parenthesis is new in SeleniumLibrary 5.0.\n\n=== Chaining locators ===\n\nIt is possible chain multiple locators together as single locator. Each chained locator must start with locator\nstrategy. Chained locators must be separated with single space, two greater than characters and followed with\nspace. It is also possible mix different locator strategies, example css or xpath. Also a list can also be\nused to specify multiple locators. This is useful, is some part of locator would match as the locator separator\nbut it should not. Or if there is need to existing WebElement as locator.\n\nAlthough all locators support chaining, some locator strategies do not abey the chaining. This is because\nsome locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context\nand not for the element found be the previous locator. Chaining is supported by locator strategies which\nare based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery\n\nExamples:\n| `Click Element` | css:.bar >> xpath://a | # To find a link which is present after an element with class \"bar\" |\n\nList examples:\n| ${locator_list} =             | `Create List`   | css:div#div_id            | xpath://*[text(), \" >> \"] |\n| `Page Should Contain Element` | ${locator_list} |                           |                           |\n| ${element} =                  | Get WebElement  | xpath://*[text(), \" >> \"] |                           |\n| ${locator_list} =             | `Create List`   | css:div#div_id            | ${element}                |\n| `Page Should Contain Element` | ${locator_list} |                           |                           |\n\nChaining locators in new in SeleniumLibrary 5.0\n\n== Using WebElements ==\n\nIn addition to specifying a locator as a string, it is possible to use\nSelenium's WebElement objects. This requires first getting a WebElement,\nfor example, by using the `Get WebElement` keyword.\n\n| ${elem} =       | `Get WebElement` | id:example |\n| `Click Element` | ${elem}          |            |\n\n== Custom locators ==\n\nIf more complex lookups are required than what is provided through the\ndefault locators, custom lookup strategies can be created. Using custom\nlocators is a two part process. First, create a keyword that returns\na WebElement that should be acted on:\n\n| Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |\n|   | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |\n|   | RETURN | ${element} |\n\nThis keyword is a reimplementation of the basic functionality of the\n``id`` locator where ``${browser}`` is a reference to a WebDriver\ninstance and ``${locator}`` is the name of the locator strategy. To use\nthis locator, it must first be registered by using the\n`Add Location Strategy` keyword:\n\n| `Add Location Strategy` | custom | Custom Locator Strategy |\n\nThe first argument of `Add Location Strategy` specifies the name of\nthe strategy and it must be unique. After registering the strategy,\nthe usage is the same as with other locators:\n\n| `Click Element` | custom:example |\n\nSee the `Add Location Strategy` keyword for more details.\n\n= Browser and Window =\n\nThere is different conceptual meaning when SeleniumLibrary talks\nabout windows or browsers. This chapter explains those differences.\n\n== Browser ==\n\nWhen `Open Browser` or `Create WebDriver` keyword is called, it\nwill create a new Selenium WebDriver instance by using the\n[https://www.seleniumhq.org/docs/03_webdriver.jsp|Selenium WebDriver]\nAPI. In SeleniumLibrary terms, a new browser is created. It is\npossible to start multiple independent browsers (Selenium Webdriver\ninstances) at the same time, by calling `Open Browser` or\n`Create WebDriver` multiple times. These browsers are usually\nindependent of each other and do not share data like cookies,\nsessions or profiles. Typically when the browser starts, it\ncreates a single window which is shown to the user.\n\n== Window ==\n\nWindows are the part of a browser that loads the web site and presents\nit to the user. All content of the site is the content of the window.\nWindows are children of a browser. In SeleniumLibrary browser is a\nsynonym for WebDriver instance. One browser may have multiple\nwindows. Windows can appear as tabs, as separate windows or pop-ups with\ndifferent position and size. Windows belonging to the same browser\ntypically share the sessions detail, like cookies. If there is a\nneed to separate sessions detail, example login with two different\nusers, two browsers (Selenium WebDriver instances) must be created.\nNew windows can be opened example by the application under test or\nby example `Execute Javascript` keyword:\n\n| `Execute Javascript`    window.open()    # Opens a new window with location about:blank\n\nThe example below opens multiple browsers and windows,\nto demonstrate how the different keywords can be used to interact\nwith browsers, and windows attached to these browsers.\n\nStructure:\n| BrowserA\n|            Window 1  (location=https://robotframework.org/)\n|            Window 2  (location=https://robocon.io/)\n|            Window 3  (location=https://github.com/robotframework/)\n|\n| BrowserB\n|            Window 1  (location=https://github.com/)\n\nExample:\n| `Open Browser`       | https://robotframework.org         | ${BROWSER}       | alias=BrowserA   | # BrowserA with first window is opened.                                       |\n| `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA second window is opened.                                        |\n| `Switch Window`      | locator=NEW                        |                  |                  | # Switched to second window in BrowserA                                       |\n| `Go To`              | https://robocon.io                 |                  |                  | # Second window navigates to robocon site.                                    |\n| `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA third window is opened.                                         |\n| ${handle}            | `Switch Window`                    | locator=NEW      |                  | # Switched to third window in BrowserA                                        |\n| `Go To`              | https://github.com/robotframework/ |                  |                  | # Third windows goes to robot framework github site.                          |\n| `Open Browser`       | https://github.com                 | ${BROWSER}       | alias=BrowserB   | # BrowserB with first windows is opened.                                      |\n| ${location}          | `Get Location`                     |                  |                  | # ${location} is: https://www.github.com                                      |\n| `Switch Window`      | ${handle}                          | browser=BrowserA |                  | # BrowserA second windows is selected.                                        |\n| ${location}          | `Get Location`                     |                  |                  | # ${location} = https://robocon.io/                                           |\n| @{locations 1}       | `Get Locations`                    |                  |                  | # By default, lists locations under the currectly active browser (BrowserA).   |\n| @{locations 2}       | `Get Locations`                    |  browser=ALL     |                  | # By using browser=ALL argument keyword list all locations from all browsers. |\n\nThe above example, @{locations 1} contains the following items:\nhttps://robotframework.org/, https://robocon.io/ and\nhttps://github.com/robotframework/'. The @{locations 2}\ncontains the following items: https://robotframework.org/,\nhttps://robocon.io/, https://github.com/robotframework/'\nand 'https://github.com/.\n\n= Browser and Driver options and service class =\n\nThis section talks about how to configure either the browser or\nthe driver using the options and service arguments of the `Open\nBrowser` keyword.\n\n== Configuring the browser using the Selenium Options ==\n\nAs noted within the keyword documentation for `Open Browser`, its\n``options`` argument accepts Selenium options in two different\nformats: as a string and as Python object which is an instance of\nthe Selenium options class.\n\n=== Options string format ===\n\nThe string format allows defining Selenium options methods\nor attributes and their arguments in Robot Framework test data.\nThe method and attributes names are case and space sensitive and\nmust match to the Selenium options methods and attributes names.\nWhen defining a method, it must be defined in a similar way as in\npython: method name, opening parenthesis, zero to many arguments\nand closing parenthesis. If there is a need to define multiple\narguments for a single method, arguments must be separated with\ncomma, just like in Python. Example: `add_argument(\"--headless\")`\nor `add_experimental_option(\"key\", \"value\")`. Attributes are\ndefined in a similar way as in Python: attribute name, equal sign,\nand attribute value. Example, `headless=True`. Multiple methods\nand attributes must be separated by a semicolon. Example:\n`add_argument(\"--headless\");add_argument(\"--start-maximized\")`.\n\nArguments allow defining Python data types and arguments are\nevaluated by using Python\n[https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval].\nStrings must be quoted with single or double quotes, example \"value\"\nor 'value'. It is also possible to define other Python builtin\ndata types, example `True` or `None`, by not using quotes\naround the arguments.\n\nThe string format is space friendly. Usually, spaces do not alter\nthe defining methods or attributes. There are two exceptions.\nIn some Robot Framework test data formats, two or more spaces are\nconsidered as cell separator and instead of defining a single\nargument, two or more arguments may be defined. Spaces in string\narguments are not removed and are left as is. Example\n`add_argument ( \"--headless\" )` is same as\n`add_argument(\"--headless\")`. But `add_argument(\" --headless \")` is\nnot same same as `add_argument ( \"--headless\" )`, because\nspaces inside of quotes are not removed. Please note that if\noptions string contains backslash, example a Windows OS path,\nthe backslash needs escaping both in Robot Framework data and\nin Python side. This means single backslash must be writen using\nfour backslash characters. Example, Windows path:\n\"C:\\path\\to\\profile\" must be written as\n\"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write\nbackslash is use Python\n[https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals|raw strings]\nand example write: r\"C:\\\\path\\\\to\\\\profile\".\n\n=== Selenium Options as Python class ===\n\nAs last format, ``options`` argument also supports receiving\nthe Selenium options as Python class instance. In this case, the\ninstance is used as-is and the SeleniumLibrary will not convert\nthe instance to other formats.\nFor example, if the following code return value is saved to\n`${options}` variable in the Robot Framework data:\n| options = webdriver.ChromeOptions()\n| options.add_argument('--disable-dev-shm-usage')\n| return options\n\nThen the `${options}` variable can be used as an argument to\n``options``.\n\nExample the ``options`` argument can be used to launch Chomium-based\napplications which utilize the\n[https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver|Chromium Embedded Framework]\n. To launch Chromium-based application, use ``options`` to define\n`binary_location` attribute and use `add_argument` method to define\n`remote-debugging-port` port for the application. Once the browser\nis opened, the test can interact with the embedded web-content of\nthe system under test.\n\n== Configuring the driver using the Service class ==\n\nWith the ``service`` argument, one can setup and configure the driver. For example\none can set the driver location and/port or specify the command line arguments. There\nare several browser specific attributes related to logging as well. For the various\nService Class attributes refer to\n[https://www.selenium.dev/documentation/webdriver/drivers/service/|the Selenium documentation]\n. Currently the ``service`` argument only accepts Selenium service in the string format.\n\n=== Service string format ===\n\nThe string format allows for defining Selenium service attributes\nand their values in the `Open Browser` keyword. The attributes names\nare case and space sensitive and must match to the Selenium attributes\nnames. Attributes are defined in a similar way as in Python: attribute\nname, equal sign, and attribute value. Example, `port=1234`. Multiple\nattributes must be separated by a semicolon. Example:\n`executable_path='/path/to/driver';port=1234`. Don't have duplicate\nattributes, like `service_args=['--append-log', '--readable-timestamp'];\nservice_args=['--log-level=DEBUG']` as the second will override the first.\nInstead combine them as in\n`service_args=['--append-log', '--readable-timestamp', '--log-level=DEBUG']`\n\nArguments allow defining Python data types and arguments are\nevaluated by using Python. Strings must be quoted with single\nor double quotes, example \"value\" or 'value'\n\n= Timeouts, waits, and delays =\n\nThis section discusses different ways how to wait for elements to\nappear on web pages and to slow down execution speed otherwise.\nIt also explains the `time format` that can be used when setting various\ntimeouts, waits, and delays.\n\n== Timeout ==\n\nSeleniumLibrary contains various keywords that have an optional\n``timeout`` argument that specifies how long these keywords should\nwait for certain events or actions. These keywords include, for example,\n``Wait ...`` keywords and keywords related to alerts. Additionally\n`Execute Async Javascript`. Although it does not have ``timeout``,\nargument, uses a timeout to define how long asynchronous JavaScript\ncan run.\n\nThe default timeout these keywords use can be set globally either by\nusing the `Set Selenium Timeout` keyword or with the ``timeout`` argument\nwhen `importing` the library. If no default timeout is set globally, the\ndefault is 5 seconds. If None is specified for the timeout argument in the\nkeywords, the default is used. See `time format` below for supported\ntimeout syntax.\n\n== Implicit wait ==\n\nImplicit wait specifies the maximum time how long Selenium waits when\nsearching for elements. It can be set by using the `Set Selenium Implicit\nWait` keyword or with the ``implicit_wait`` argument when `importing`\nthe library. See [https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp|\nSelenium documentation] for more information about this functionality.\n\nSee `time format` below for supported syntax.\n\n== Page load ==\nPage load timeout is the amount of time to wait for page load to complete\nuntil a timeout exception is raised.\n\nThe default page load timeout can be set globally\nwhen `importing` the library with the ``page_load_timeout`` argument\nor by using the `Set Selenium Page Load Timeout` keyword.\n\nSee `time format` below for supported timeout syntax.\n\nSupport for page load is new in SeleniumLibrary 6.1\n\n== Selenium speed ==\n\nSelenium execution speed can be slowed down globally by using `Set\nSelenium speed` keyword. This functionality is designed to be used for\ndemonstrating or debugging purposes. Using it to make sure that elements\nappear on a page is not a good idea. The above-explained timeouts\nand waits should be used instead.\n\nSee `time format` below for supported syntax.\n\n== Time format ==\n\nAll timeouts and waits can be given as numbers considered seconds\n(e.g. ``0.5`` or ``42``) or in Robot Framework's time syntax\n(e.g. ``1.5 seconds`` or ``1 min 30 s``). For more information about\nthe time syntax see the\n[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|Robot Framework User Guide].\n\n= Run-on-failure functionality =\n\nSeleniumLibrary has a handy feature that it can automatically execute\na keyword if any of its own keywords fails. By default, it uses the\n`Capture Page Screenshot` keyword, but this can be changed either by\nusing the `Register Keyword To Run On Failure` keyword or with the\n``run_on_failure`` argument when `importing` the library. It is\npossible to use any keyword from any imported library or resource file.\n\nThe run-on-failure functionality can be disabled by using a special value\n``NOTHING`` or anything considered false (see `Boolean arguments`)\nsuch as ``NONE``.\n\n= Boolean arguments =\n\nStarting from 5.0 SeleniumLibrary relies on Robot Framework to perform the\nboolean conversion based on keyword arguments [https://docs.python.org/3/library/typing.html|type hint].\nMore details in Robot Framework\n[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions|user guide]\n\nPlease note SeleniumLibrary 3 and 4 did have own custom methods to covert\narguments to boolean values.\n\n= EventFiringWebDriver =\n\nThe SeleniumLibrary offers support for\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver].\nSee the Selenium and SeleniumLibrary\n[https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#EventFiringWebDriver|EventFiringWebDriver support]\ndocumentation for further details.\n\nEventFiringWebDriver is new in SeleniumLibrary 4.0\n\n= Thread support =\n\nSeleniumLibrary is not thread-safe. This is mainly due because the underlying\n[https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe|\nSelenium tool is not thread-safe] within one browser/driver instance.\nBecause of the limitation in the Selenium side, the keywords or the\nAPI provided by the SeleniumLibrary is not thread-safe.\n\n= Plugins =\n\nSeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal\nfunctionality without creating a new library or hacking the source code. See\n[https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#Plugins|plugin API]\ndocumentation for further details.\n\nPlugin API is new SeleniumLibrary 4.0\n\n= Language =\n\nSeleniumLibrary offers the possibility to translate keyword names and documentation to new language. If language\nis defined, SeleniumLibrary will search from\n[https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]\nfor Python packages starting with `robotframework-seleniumlibrary-translation` by using the\n[https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. The Library\nis using naming convention to find Python plugins.\n\nThe package must implement a single API call, ``get_language`` without any arguments. The method must return a\ndictionary containing two keys: ``language`` and ``path``. The language key value defines which language\nthe package contains. Also the value should match (case insensitive) the library ``language`` import parameter.\nThe path parameter value should be full path to the translation file.\n\n== Translation file ==\n\nThe file name or extension is not important, but data must be in [https://www.json.org/json-en.html | json]\nformat. The keys of json are the methods names, not the keyword names, which implements keywords. Value of\nkey is json object which contains two keys: ``name`` and ``doc``. The ``name`` key contains the keyword\ntranslated name and `doc` contains translated documentation. Providing doc and name are optional, example\ntranslation json file can only provide translations to keyword names or only to documentation. But it is\nalways recommended to provide translation to both name and doc. Special key ``__intro__`` is for class level\ndocumentation and ``__init__`` is for init level documentation. These special values ``name`` can not be\ntranslated, instead ``name`` should be kept the same.\n\n== Generating template translation file ==\n\nTemplate translation file, with English language can be created by running:\n`rfselib translation /path/to/translation.json` command. Command does not provide translations to other\nlanguages, it only provides easy way to create full list keywords and their documentation in correct\nformat. It is also possible to add keywords from library plugins by providing `--plugins` arguments\nto command. Example: `rfselib translation --plugins myplugin.SomePlugin /path/to/translation.json` The\ngenerated json file contains `sha256` key, which contains the sha256 sum of the library documentation.\nThe sha256 sum is used by `rfselib translation --compare /path/to/translation.json` command, which compares\nthe translation to the library and prints outs a table which tells if there are changes needed for\nthe translation file.\n\nExample project for translation can be found from\n[https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi | robotframework-seleniumlibrary-translation-fi]\nrepository.",
        "sha256": "feaa9d9fe756a50f322190440e514ec6fa72d34f24749609287cf9ada5e8beac"
    },
    "__intro__": {
        "name": "__intro__",
        "doc": "SeleniumLibrary is a web testing library for Robot Framework.\n\n    This document explains how to use keywords provided by SeleniumLibrary.\n    For information about installation, support, and more, please visit the\n    [https://github.com/robotframework/SeleniumLibrary|project pages].\n    For more information about Robot Framework, see http://robotframework.org.\n\n    SeleniumLibrary uses the Selenium WebDriver modules internally to\n    control a web browser. See http://seleniumhq.org for more information\n    about Selenium in general and SeleniumLibrary README.rst\n    [https://github.com/robotframework/SeleniumLibrary#browser-drivers|Browser drivers chapter]\n    for more details about WebDriver binary installation.\n\n    %TOC%\n\n    = Locating elements =\n\n    All keywords in SeleniumLibrary that need to interact with an element\n    on a web page take an argument typically named ``locator`` that specifies\n    how to find the element. Most often the locator is given as a string\n    using the locator syntax described below, but `using WebElements` is\n    possible too.\n\n    == Locator syntax ==\n\n    SeleniumLibrary supports finding elements based on different strategies\n    such as the element id, XPath expressions, or CSS selectors. The strategy\n    can either be explicitly specified with a prefix or the strategy can be\n    implicit.\n\n    === Default locator strategy ===\n\n    By default, locators are considered to use the keyword specific default\n    locator strategy. All keywords support finding elements based on ``id``\n    and ``name`` attributes, but some keywords support additional attributes\n    or other values that make sense in their context. For example, `Click\n    Link` supports the ``href`` attribute and the link text and addition\n    to the normal ``id`` and ``name``.\n\n    Examples:\n\n    | `Click Element` | example | # Match based on ``id`` or ``name``.            |\n    | `Click Link`    | example | # Match also based on link text and ``href``.   |\n    | `Click Button`  | example | # Match based on ``id``, ``name`` or ``value``. |\n\n    If a locator accidentally starts with a prefix recognized as `explicit\n    locator strategy` or `implicit XPath strategy`, it is possible to use\n    the explicit ``default`` prefix to enable the default strategy.\n\n    Examples:\n\n    | `Click Element` | name:foo         | # Find element with name ``foo``.               |\n    | `Click Element` | default:name:foo | # Use default strategy with value ``name:foo``. |\n    | `Click Element` | //foo            | # Find element using XPath ``//foo``.           |\n    | `Click Element` | default: //foo   | # Use default strategy with value ``//foo``.    |\n\n    === Explicit locator strategy ===\n\n    The explicit locator strategy is specified with a prefix using either\n    syntax ``strategy:value`` or ``strategy=value``. The former syntax\n    is preferred because the latter is identical to Robot Framework's\n    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax|\n    named argument syntax] and that can cause problems. Spaces around\n    the separator are ignored, so ``id:foo``, ``id: foo`` and ``id : foo``\n    are all equivalent.\n\n    Locator strategies that are supported by default are listed in the table\n    below. In addition to them, it is possible to register `custom locators`.\n\n    | = Strategy = |          = Match based on =         |         = Example =            |\n    | id           | Element ``id``.                     | ``id:example``                 |\n    | name         | ``name`` attribute.                 | ``name:example``               |\n    | identifier   | Either ``id`` or ``name``.          | ``identifier:example``         |\n    | class        | Element ``class``.                  | ``class:example``              |\n    | tag          | Tag name.                           | ``tag:div``                    |\n    | xpath        | XPath expression.                   | ``xpath://div[@id=\"example\"]`` |\n    | css          | CSS selector.                       | ``css:div#example``            |\n    | dom          | DOM expression.                     | ``dom:document.images[5]``     |\n    | link         | Exact text a link has.              | ``link:The example``           |\n    | partial link | Partial link text.                  | ``partial link:he ex``         |\n    | sizzle       | Sizzle selector deprecated.         | ``sizzle:div.example``         |\n    | data         | Element ``data-*`` attribute        | ``data:id:my_id``              |\n    | jquery       | jQuery expression.                  | ``jquery:div.example``         |\n    | default      | Keyword specific default behavior.  | ``default:example``            |\n\n    See the `Default locator strategy` section below for more information\n    about how the default strategy works. Using the explicit ``default``\n    prefix is only necessary if the locator value itself accidentally\n    matches some of the explicit strategies.\n\n    Different locator strategies have different pros and cons. Using ids,\n    either explicitly like ``id:foo`` or by using the `default locator\n    strategy` simply like ``foo``, is recommended when possible, because\n    the syntax is simple and locating elements by id is fast for browsers.\n    If an element does not have an id or the id is not stable, other\n    solutions need to be used. If an element has a unique tag name or class,\n    using ``tag``, ``class`` or ``css`` strategy like ``tag:h1``,\n    ``class:example`` or ``css:h1.example`` is often an easy solution. In\n    more complex cases using XPath expressions is typically the best\n    approach. They are very powerful but a downside is that they can also\n    get complex.\n\n    Examples:\n\n    | `Click Element` | id:foo                      | # Element with id 'foo'. |\n    | `Click Element` | css:div#foo h1              | # h1 element under div with id 'foo'. |\n    | `Click Element` | xpath: //div[@id=\"foo\"]//h1 | # Same as the above using XPath, not CSS. |\n    | `Click Element` | xpath: //*[contains(text(), \"example\")] | # Element containing text 'example'. |\n\n    *NOTE:*\n\n    - The ``strategy:value`` syntax is only supported by SeleniumLibrary 3.0\n      and newer.\n    - Using the ``sizzle`` strategy or its alias ``jquery`` requires that\n      the system under test contains the jQuery library.\n    - Prior to SeleniumLibrary 3.0, table related keywords only supported\n      ``xpath``, ``css`` and ``sizzle/jquery`` strategies.\n    - ``data`` strategy is conveniance locator that will construct xpath from the parameters.\n      If you have element like `<div data-automation=\"automation-id-2\">`, you locate the element via\n      ``data:automation:automation-id-2``. This feature was added in SeleniumLibrary 5.2.0\n\n    === Implicit XPath strategy ===\n\n    If the locator starts with ``//``  or multiple opening parenthesis in front\n    of the ``//``, the locator is considered to be an XPath expression. In other\n    words, using ``//div`` is equivalent to using explicit ``xpath://div`` and\n    ``((//div))`` is equivalent to using explicit ``xpath:((//div))``\n\n    Examples:\n\n    | `Click Element` | //div[@id=\"foo\"]//h1 |\n    | `Click Element` | (//div)[2]           |\n\n    The support for the ``(//`` prefix is new in SeleniumLibrary 3.0.\n    Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.\n\n    === Chaining locators ===\n\n    It is possible chain multiple locators together as single locator. Each chained locator must start with locator\n    strategy. Chained locators must be separated with single space, two greater than characters and followed with\n    space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be\n    used to specify multiple locators. This is useful, is some part of locator would match as the locator separator\n    but it should not. Or if there is need to existing WebElement as locator.\n\n    Although all locators support chaining, some locator strategies do not abey the chaining. This is because\n    some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context\n    and not for the element found be the previous locator. Chaining is supported by locator strategies which\n    are based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery\n\n    Examples:\n    | `Click Element` | css:.bar >> xpath://a | # To find a link which is present after an element with class \"bar\" |\n\n    List examples:\n    | ${locator_list} =             | `Create List`   | css:div#div_id            | xpath://*[text(), \" >> \"] |\n    | `Page Should Contain Element` | ${locator_list} |                           |                           |\n    | ${element} =                  | Get WebElement  | xpath://*[text(), \" >> \"] |                           |\n    | ${locator_list} =             | `Create List`   | css:div#div_id            | ${element}                |\n    | `Page Should Contain Element` | ${locator_list} |                           |                           |\n\n    Chaining locators in new in SeleniumLibrary 5.0\n\n    == Using WebElements ==\n\n    In addition to specifying a locator as a string, it is possible to use\n    Selenium's WebElement objects. This requires first getting a WebElement,\n    for example, by using the `Get WebElement` keyword.\n\n    | ${elem} =       | `Get WebElement` | id:example |\n    | `Click Element` | ${elem}          |            |\n\n    == Custom locators ==\n\n    If more complex lookups are required than what is provided through the\n    default locators, custom lookup strategies can be created. Using custom\n    locators is a two part process. First, create a keyword that returns\n    a WebElement that should be acted on:\n\n    | Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |\n    |   | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |\n    |   | RETURN | ${element} |\n\n    This keyword is a reimplementation of the basic functionality of the\n    ``id`` locator where ``${browser}`` is a reference to a WebDriver\n    instance and ``${locator}`` is the name of the locator strategy. To use\n    this locator, it must first be registered by using the\n    `Add Location Strategy` keyword:\n\n    | `Add Location Strategy` | custom | Custom Locator Strategy |\n\n    The first argument of `Add Location Strategy` specifies the name of\n    the strategy and it must be unique. After registering the strategy,\n    the usage is the same as with other locators:\n\n    | `Click Element` | custom:example |\n\n    See the `Add Location Strategy` keyword for more details.\n\n    = Browser and Window =\n\n    There is different conceptual meaning when SeleniumLibrary talks\n    about windows or browsers. This chapter explains those differences.\n\n    == Browser ==\n\n    When `Open Browser` or `Create WebDriver` keyword is called, it\n    will create a new Selenium WebDriver instance by using the\n    [https://www.seleniumhq.org/docs/03_webdriver.jsp|Selenium WebDriver]\n    API. In SeleniumLibrary terms, a new browser is created. It is\n    possible to start multiple independent browsers (Selenium Webdriver\n    instances) at the same time, by calling `Open Browser` or\n    `Create WebDriver` multiple times. These browsers are usually\n    independent of each other and do not share data like cookies,\n    sessions or profiles. Typically when the browser starts, it\n    creates a single window which is shown to the user.\n\n    == Window ==\n\n    Windows are the part of a browser that loads the web site and presents\n    it to the user. All content of the site is the content of the window.\n    Windows are children of a browser. In SeleniumLibrary browser is a\n    synonym for WebDriver instance. One browser may have multiple\n    windows. Windows can appear as tabs, as separate windows or pop-ups with\n    different position and size. Windows belonging to the same browser\n    typically share the sessions detail, like cookies. If there is a\n    need to separate sessions detail, example login with two different\n    users, two browsers (Selenium WebDriver instances) must be created.\n    New windows can be opened example by the application under test or\n    by example `Execute Javascript` keyword:\n\n    | `Execute Javascript`    window.open()    # Opens a new window with location about:blank\n\n    The example below opens multiple browsers and windows,\n    to demonstrate how the different keywords can be used to interact\n    with browsers, and windows attached to these browsers.\n\n    Structure:\n    | BrowserA\n    |            Window 1  (location=https://robotframework.org/)\n    |            Window 2  (location=https://robocon.io/)\n    |            Window 3  (location=https://github.com/robotframework/)\n    |\n    | BrowserB\n    |            Window 1  (location=https://github.com/)\n\n    Example:\n    | `Open Browser`       | https://robotframework.org         | ${BROWSER}       | alias=BrowserA   | # BrowserA with first window is opened.                                       |\n    | `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA second window is opened.                                        |\n    | `Switch Window`      | locator=NEW                        |                  |                  | # Switched to second window in BrowserA                                       |\n    | `Go To`              | https://robocon.io                 |                  |                  | # Second window navigates to robocon site.                                    |\n    | `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA third window is opened.                                         |\n    | ${handle}            | `Switch Window`                    | locator=NEW      |                  | # Switched to third window in BrowserA                                        |\n    | `Go To`              | https://github.com/robotframework/ |                  |                  | # Third windows goes to robot framework github site.                          |\n    | `Open Browser`       | https://github.com                 | ${BROWSER}       | alias=BrowserB   | # BrowserB with first windows is opened.                                      |\n    | ${location}          | `Get Location`                     |                  |                  | # ${location} is: https://www.github.com                                      |\n    | `Switch Window`      | ${handle}                          | browser=BrowserA |                  | # BrowserA second windows is selected.                                        |\n    | ${location}          | `Get Location`                     |                  |                  | # ${location} = https://robocon.io/                                           |\n    | @{locations 1}       | `Get Locations`                    |                  |                  | # By default, lists locations under the currectly active browser (BrowserA).   |\n    | @{locations 2}       | `Get Locations`                    |  browser=ALL     |                  | # By using browser=ALL argument keyword list all locations from all browsers. |\n\n    The above example, @{locations 1} contains the following items:\n    https://robotframework.org/, https://robocon.io/ and\n    https://github.com/robotframework/'. The @{locations 2}\n    contains the following items: https://robotframework.org/,\n    https://robocon.io/, https://github.com/robotframework/'\n    and 'https://github.com/.\n\n    = Browser and Driver options and service class =\n\n    This section talks about how to configure either the browser or\n    the driver using the options and service arguments of the `Open\n    Browser` keyword.\n\n    == Configuring the browser using the Selenium Options ==\n\n    As noted within the keyword documentation for `Open Browser`, its\n    ``options`` argument accepts Selenium options in two different\n    formats: as a string and as Python object which is an instance of\n    the Selenium options class.\n\n    === Options string format ===\n\n    The string format allows defining Selenium options methods\n    or attributes and their arguments in Robot Framework test data.\n    The method and attributes names are case and space sensitive and\n    must match to the Selenium options methods and attributes names.\n    When defining a method, it must be defined in a similar way as in\n    python: method name, opening parenthesis, zero to many arguments\n    and closing parenthesis. If there is a need to define multiple\n    arguments for a single method, arguments must be separated with\n    comma, just like in Python. Example: `add_argument(\"--headless\")`\n    or `add_experimental_option(\"key\", \"value\")`. Attributes are\n    defined in a similar way as in Python: attribute name, equal sign,\n    and attribute value. Example, `headless=True`. Multiple methods\n    and attributes must be separated by a semicolon. Example:\n    `add_argument(\"--headless\");add_argument(\"--start-maximized\")`.\n\n    Arguments allow defining Python data types and arguments are\n    evaluated by using Python\n    [https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval].\n    Strings must be quoted with single or double quotes, example \"value\"\n    or 'value'. It is also possible to define other Python builtin\n    data types, example `True` or `None`, by not using quotes\n    around the arguments.\n\n    The string format is space friendly. Usually, spaces do not alter\n    the defining methods or attributes. There are two exceptions.\n    In some Robot Framework test data formats, two or more spaces are\n    considered as cell separator and instead of defining a single\n    argument, two or more arguments may be defined. Spaces in string\n    arguments are not removed and are left as is. Example\n    `add_argument ( \"--headless\" )` is same as\n    `add_argument(\"--headless\")`. But `add_argument(\" --headless \")` is\n    not same same as `add_argument ( \"--headless\" )`, because\n    spaces inside of quotes are not removed. Please note that if\n    options string contains backslash, example a Windows OS path,\n    the backslash needs escaping both in Robot Framework data and\n    in Python side. This means single backslash must be writen using\n    four backslash characters. Example, Windows path:\n    \"C:\\path\\to\\profile\" must be written as\n    \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write\n    backslash is use Python\n    [https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals|raw strings]\n    and example write: r\"C:\\\\path\\\\to\\\\profile\".\n\n    === Selenium Options as Python class ===\n\n    As last format, ``options`` argument also supports receiving\n    the Selenium options as Python class instance. In this case, the\n    instance is used as-is and the SeleniumLibrary will not convert\n    the instance to other formats.\n    For example, if the following code return value is saved to\n    `${options}` variable in the Robot Framework data:\n    | options = webdriver.ChromeOptions()\n    | options.add_argument('--disable-dev-shm-usage')\n    | return options\n\n    Then the `${options}` variable can be used as an argument to\n    ``options``.\n\n    Example the ``options`` argument can be used to launch Chomium-based\n    applications which utilize the\n    [https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver|Chromium Embedded Framework]\n    . To launch Chromium-based application, use ``options`` to define\n    `binary_location` attribute and use `add_argument` method to define\n    `remote-debugging-port` port for the application. Once the browser\n    is opened, the test can interact with the embedded web-content of\n    the system under test.\n\n    == Configuring the driver using the Service class ==\n\n    With the ``service`` argument, one can setup and configure the driver. For example\n    one can set the driver location and/port or specify the command line arguments. There\n    are several browser specific attributes related to logging as well. For the various\n    Service Class attributes refer to\n    [https://www.selenium.dev/documentation/webdriver/drivers/service/|the Selenium documentation]\n    . Currently the ``service`` argument only accepts Selenium service in the string format.\n\n    === Service string format ===\n\n    The string format allows for defining Selenium service attributes\n    and their values in the `Open Browser` keyword. The attributes names\n    are case and space sensitive and must match to the Selenium attributes\n    names. Attributes are defined in a similar way as in Python: attribute\n    name, equal sign, and attribute value. Example, `port=1234`. Multiple\n    attributes must be separated by a semicolon. Example:\n    `executable_path='/path/to/driver';port=1234`. Don't have duplicate\n    attributes, like `service_args=['--append-log', '--readable-timestamp'];\n    service_args=['--log-level=DEBUG']` as the second will override the first.\n    Instead combine them as in\n    `service_args=['--append-log', '--readable-timestamp', '--log-level=DEBUG']`\n\n    Arguments allow defining Python data types and arguments are\n    evaluated by using Python. Strings must be quoted with single\n    or double quotes, example \"value\" or 'value'\n\n    = Timeouts, waits, and delays =\n\n    This section discusses different ways how to wait for elements to\n    appear on web pages and to slow down execution speed otherwise.\n    It also explains the `time format` that can be used when setting various\n    timeouts, waits, and delays.\n\n    == Timeout ==\n\n    SeleniumLibrary contains various keywords that have an optional\n    ``timeout`` argument that specifies how long these keywords should\n    wait for certain events or actions. These keywords include, for example,\n    ``Wait ...`` keywords and keywords related to alerts. Additionally\n    `Execute Async Javascript`. Although it does not have ``timeout``,\n    argument, uses a timeout to define how long asynchronous JavaScript\n    can run.\n\n    The default timeout these keywords use can be set globally either by\n    using the `Set Selenium Timeout` keyword or with the ``timeout`` argument\n    when `importing` the library. If no default timeout is set globally, the\n    default is 5 seconds. If None is specified for the timeout argument in the\n    keywords, the default is used. See `time format` below for supported\n    timeout syntax.\n\n    == Implicit wait ==\n\n    Implicit wait specifies the maximum time how long Selenium waits when\n    searching for elements. It can be set by using the `Set Selenium Implicit\n    Wait` keyword or with the ``implicit_wait`` argument when `importing`\n    the library. See [https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp|\n    Selenium documentation] for more information about this functionality.\n\n    See `time format` below for supported syntax.\n\n    == Page load ==\n    Page load timeout is the amount of time to wait for page load to complete\n    until a timeout exception is raised.\n\n    The default page load timeout can be set globally\n    when `importing` the library with the ``page_load_timeout`` argument\n    or by using the `Set Selenium Page Load Timeout` keyword.\n\n    See `time format` below for supported timeout syntax.\n\n    Support for page load is new in SeleniumLibrary 6.1\n\n    == Selenium speed ==\n\n    Selenium execution speed can be slowed down globally by using `Set\n    Selenium speed` keyword. This functionality is designed to be used for\n    demonstrating or debugging purposes. Using it to make sure that elements\n    appear on a page is not a good idea. The above-explained timeouts\n    and waits should be used instead.\n\n    See `time format` below for supported syntax.\n\n    == Time format ==\n\n    All timeouts and waits can be given as numbers considered seconds\n    (e.g. ``0.5`` or ``42``) or in Robot Framework's time syntax\n    (e.g. ``1.5 seconds`` or ``1 min 30 s``). For more information about\n    the time syntax see the\n    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|Robot Framework User Guide].\n\n    = Run-on-failure functionality =\n\n    SeleniumLibrary has a handy feature that it can automatically execute\n    a keyword if any of its own keywords fails. By default, it uses the\n    `Capture Page Screenshot` keyword, but this can be changed either by\n    using the `Register Keyword To Run On Failure` keyword or with the\n    ``run_on_failure`` argument when `importing` the library. It is\n    possible to use any keyword from any imported library or resource file.\n\n    The run-on-failure functionality can be disabled by using a special value\n    ``NOTHING`` or anything considered false (see `Boolean arguments`)\n    such as ``NONE``.\n\n    = Boolean arguments =\n\n    Starting from 5.0 SeleniumLibrary relies on Robot Framework to perform the\n    boolean conversion based on keyword arguments [https://docs.python.org/3/library/typing.html|type hint].\n    More details in Robot Framework\n    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions|user guide]\n\n    Please note SeleniumLibrary 3 and 4 did have own custom methods to covert\n    arguments to boolean values.\n\n    = EventFiringWebDriver =\n\n    The SeleniumLibrary offers support for\n    [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver].\n    See the Selenium and SeleniumLibrary\n    [https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#EventFiringWebDriver|EventFiringWebDriver support]\n    documentation for further details.\n\n    EventFiringWebDriver is new in SeleniumLibrary 4.0\n\n    = Thread support =\n\n    SeleniumLibrary is not thread-safe. This is mainly due because the underlying\n    [https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe|\n    Selenium tool is not thread-safe] within one browser/driver instance.\n    Because of the limitation in the Selenium side, the keywords or the\n    API provided by the SeleniumLibrary is not thread-safe.\n\n    = Plugins =\n\n    SeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal\n    functionality without creating a new library or hacking the source code. See\n    [https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#Plugins|plugin API]\n    documentation for further details.\n\n    Plugin API is new SeleniumLibrary 4.0\n\n    = Language =\n\n    SeleniumLibrary offers the possibility to translate keyword names and documentation to new language. If language\n    is defined, SeleniumLibrary will search from\n    [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]\n    for Python packages starting with `robotframework-seleniumlibrary-translation` by using the\n    [https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. The Library\n    is using naming convention to find Python plugins.\n\n    The package must implement a single API call, ``get_language`` without any arguments. The method must return a\n    dictionary containing two keys: ``language`` and ``path``. The language key value defines which language\n    the package contains. Also the value should match (case insensitive) the library ``language`` import parameter.\n    The path parameter value should be full path to the translation file.\n\n    == Translation file ==\n\n    The file name or extension is not important, but data must be in [https://www.json.org/json-en.html | json]\n    format. The keys of json are the methods names, not the keyword names, which implements keywords. Value of\n    key is json object which contains two keys: ``name`` and ``doc``. The ``name`` key contains the keyword\n    translated name and `doc` contains translated documentation. Providing doc and name are optional, example\n    translation json file can only provide translations to keyword names or only to documentation. But it is\n    always recommended to provide translation to both name and doc. Special key ``__intro__`` is for class level\n    documentation and ``__init__`` is for init level documentation. These special values ``name`` can not be\n    translated, instead ``name`` should be kept the same.\n\n    == Generating template translation file ==\n\n    Template translation file, with English language can be created by running:\n    `rfselib translation /path/to/translation.json` command. Command does not provide translations to other\n    languages, it only provides easy way to create full list keywords and their documentation in correct\n    format. It is also possible to add keywords from library plugins by providing `--plugins` arguments\n    to command. Example: `rfselib translation --plugins myplugin.SomePlugin /path/to/translation.json` The\n    generated json file contains `sha256` key, which contains the sha256 sum of the library documentation.\n    The sha256 sum is used by `rfselib translation --compare /path/to/translation.json` command, which compares\n    the translation to the library and prints outs a table which tells if there are changes needed for\n    the translation file.\n\n    Example project for translation can be found from\n    [https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi | robotframework-seleniumlibrary-translation-fi]\n    repository.\n    ",
        "sha256": "af42a24b1bda192c4beb4feef802fc8938cddd81554670e1627895c5ad1ed5c6"
    }
}