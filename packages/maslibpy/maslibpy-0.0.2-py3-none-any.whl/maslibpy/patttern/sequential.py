from maslibpy.messages.system import SystemMessage
from maslibpy.messages.base import BaseMessage
from maslibpy.messages.user import UserMessage
from maslibpy.agent.agent_prompt import prompt_template
from litellm import completion
from maslibpy.agent.agent import Agent
import random
class Crew:
    """
    Represents a group of agents working together as a crew, facilitating collaborative task completion
    with a shared language model (LLM) and a customizable system prompt.
    """
    def __init__(self,agents:list[Agent],llm=None,max_iterations=3,system_prompt=None):
        """
        Initializes the Crew instance with a list of agents and a language model (LLM).

        Parameters:
        - agents (list[Agent]): A list of `Agent` instances representing the crew.
        - llm: An optional language model to be used. If not provided, one is chosen randomly from the agents.
        - max_iterations (int): The maximum number of iterations for the crew's operations. Default is 3.
        - system_prompt (str, optional): A custom system prompt for the crew. If not provided, a default prompt
          is generated using the `prompt_template`.

        Attributes:
        - crew (list[Agent]): Stores the list of agents.
        - llm: The selected language model for the crew.
        """
        self.crew=agents
        self.llm =llm
        if system_prompt is None:
            # using default prompt
            system_prompt=prompt_template.format(
            agents=agents,agent_names=[agent.name for agent in agents],
            max_iterations=max_iterations,
            input="",
            agent_scratchpad="")    
        SystemMessage(content=system_prompt)
        if self.llm is None:
            available_llms=[agent.llm for agent in agents]
            self.llm=random.choice(available_llms)
    def invoke(self,query):
        """
        Processes a user query through the crew's collective capabilities and generates a response.

        Parameters:
        - query (str): The input query to be processed by the crew.

        Returns:
        - AIMessage: The response generated by the crew's language model.

        This method:
        1. Logs the user query as a `UserMessage`.
        2. Processes the query through the LLM using a streaming completion method.
        3. Aggregates the response chunks and logs the result as an `AIMessage`.
        """
        UserMessage(content=query)
        res=completion(model=self.llm.model_name,messages=BaseMessage.messages,stream=False)
        return res.choices[0]["message"]["content"]
    def __repr__(self):
        """
        Returns a string representation of the Crew instance.

        Returns:
        - str: A string describing the crew and its agents.
        """
        return f"Crew(agents:{self.crew})"
