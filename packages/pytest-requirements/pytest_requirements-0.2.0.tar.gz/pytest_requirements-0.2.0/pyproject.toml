[build-system]
requires = ["setuptools>=65", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "pytest-requirements"
description = "pytest plugin for using custom markers to relate tests to requirements and usecases"
readme = "README.md"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Maximilian Linhoff", email = "maximilian.linhoff@tu-dortmund.de"},
]

requires-python = ">=3.9"
dependencies = [
    "pytest",
]

# needed for setuptools_scm, we don"t define a static version
dynamic = ["version"]

[project.urls]
repository = "https://gitlab.cta-observatory.org/cta-computing/common/pytest-requirements"
documentation = "http://cta-computing.gitlab-pages.cta-observatory.org/common/pytest-requirements"

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
test = [
  "pytest-cov",
]
doc = [
  "sphinx",
  "numpydoc",
  "ctao-sphinx-theme~=0.1.2",
  "sphinx-changelog",
]
dev = [
  "setuptools_scm",
  "towncrier",
]

# we can use self-references to simplify all, needs to match project.name defined above
all = [
  "pytest-requirements[test,doc,dev]",
]

[tool.setuptools_scm]
write_to = "src/pytest_requirements/_version.py"

[project.entry-points.pytest11]
pytest_requirements = "pytest_requirements"


[tool.towncrier]
package = "pytest_requirements"
directory = "docs/changes"
filename = "CHANGES.rst"
template = "docs/changes/template.rst"
underlines = ["-", "~", "^"]
# Let towncrier create proper links to the merged MR.
# By default, towncrier connects everything to issues.
# We rather want to connect it to merge request
issue_format = "`!{issue} <https://gitlab.cta-observatory.org/cta-computing/common/pytest-requirements/-/merge_requests/{issue}>`__"

[tool.towncrier.fragment.feature]
    name = "New Features"
    showcontent = true

[tool.towncrier.fragment.bugfix]
    name = "Bug Fixes"
    showcontent = true

[tool.towncrier.fragment.api]
    name = "API Changes"
    showcontent = true

[tool.towncrier.fragment.optimization]
    name = "Refactoring and Optimization"
    showcontent = true

[tool.towncrier.fragment.maintenance]
    name = "Maintenance"
    showcontent = true

[tool.ruff]
line-length = 88
target-version = "py39"


[tool.ruff.lint]
extend-select = [
    "I", # isort
    "N", # pep8 naming
    "D", # pydocstyle
    "PT", # pytest
    "UP", # pyupgrade
    "COM", # flake8-commas
    "ISC", # implicit string concat rules
    "ICN", # import name conventions
    "G", # logging
]
ignore = [
    "COM812", # incompatible with ruff format
    "ISC001", # incompatible with ruff format
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
# no documentation linting for test files
"**/tests/**" = ["D"]
"**/test_*.py" = ["D"]
"**/conftest.py" = ["D"]
"example_tests/**.py" = ["D"]
"docs/**/*.py" = ["D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 88

[tool.coverage.run]
relative_files = true
source = ["src"]
omit = [
    "src/pytest_requirements/_version.py",
]

[tool.pytest.ini_options]
minversion = "7"
testpaths = ["src"]
log_cli_level = "INFO"
xfail_strict = true
# print summary of failed tests, force errors if settings are misspelled
addopts = ["-p", "pytester", "-ra", "--strict-config", "--strict-markers"]
filterwarnings = [
    "error",
]
pytester_example_dir = "example_tests"
