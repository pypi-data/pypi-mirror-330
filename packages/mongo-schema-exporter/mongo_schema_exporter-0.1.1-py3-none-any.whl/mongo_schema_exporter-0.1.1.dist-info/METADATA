Metadata-Version: 2.4
Name: mongo_schema_exporter
Version: 0.1.1
Summary: Export MongoDB collection schemas into JSON Schema format
Project-URL: Homepage, https://github.com/barbuza/mongo_schema_exporter
Project-URL: Issues, https://github.com/barbuza/mongo_schema_exporter/issues
Author-email: Victor Kotseruba <barbuzaster@gmail.com>
License: MIT
License-File: LICENSE
Keywords: database,json-schema,mongodb,schema,validation
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Database
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.13
Requires-Dist: argparse>=1.4.0
Requires-Dist: jsonschema>=4.23.0
Requires-Dist: pymongo>=4.11.1
Requires-Dist: tqdm>=4.67.1
Description-Content-Type: text/markdown

# MongoDB Schema Exporter

A tool to analyze MongoDB collections and generate schema definitions.

## Features

- Infers schema from MongoDB collections
- Validate documents against generated schemas

## Usage

```bash
# Basic usage
uvx mongo_schema_exporter --db your_database --collection your_collection

# Analyze multiple documents
uvx mongo_schema_exporter --db your_database --collection your_collection --limit 10

# Output as JSON Schema
uvx mongo_schema_exporter --db your_database --collection your_collection --output json

# Save output to a file
uvx mongo_schema_exporter --db your_database --collection your_collection --output json --output-file schema.json

# Connect to a remote MongoDB instance
uvx mongo_schema_exporter --uri "mongodb://user:password@hostname:port/" --db your_database --collection your_collection

# Validate documents against the generated schema
uvx mongo_schema_exporter --db your_database --collection your_collection --validate
```

## Examples

### Pretty-printed output

```python
MongoObject(fields={
    'name': MongoField(type=MongoString(), required=True),
    'age': MongoField(type=MongoInteger(), required=False),
    'tags': MongoField(type=MongoArray(element=MongoString()), required=True),
    'metadata': MongoField(type=MongoObject(fields={
        'created': MongoField(type=MongoDate(), required=True),
        'modified': MongoField(type=MongoDate(), required=False)
    }), required=False)
})
```

### JSON Schema output

```json
{
  "$jsonSchema": {
    "bsonType": "object",
    "properties": {
      "name": {
        "bsonType": "string"
      },
      "age": {
        "bsonType": "int"
      },
      "tags": {
        "bsonType": "array",
        "items": {
          "bsonType": "string"
        }
      },
      "metadata": {
        "bsonType": "object",
        "properties": {
          "created": {
            "bsonType": "date"
          },
          "modified": {
            "bsonType": "date"
          }
        },
        "required": ["created"]
      }
    },
    "required": ["name", "tags"]
  }
}
```

## License

MIT
