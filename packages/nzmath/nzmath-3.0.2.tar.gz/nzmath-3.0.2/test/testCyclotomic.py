import unittest
import nzmath.cyclotomic as cyclotomic
from nzmath.rational import IntegerRing
from nzmath.poly.uniutil import IntegerPolynomial

class CyclotomicTest(unittest.TestCase):
    def testCycloPoly(self):
        self.assertEqual(IntegerPolynomial(\
            [(0, -1), (1, 1)]\
            , IntegerRing()), cyclotomic.cycloPoly(1))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),\
            (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1),\
            (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1),\
            (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1),\
            (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1),\
            (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1),\
            (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1),\
            (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1),\
            (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1),\
            (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1),\
            (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1),\
            (78, 1)]\
            , IntegerRing()), cyclotomic.cycloPoly(79))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (32, 1)]\
            , IntegerRing()), cyclotomic.cycloPoly(64))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (1, 1), (2, 1), (5, -1), (6, -1), (7, -2), (8, -1),\
            (9, -1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1),\
            (20, -1), (22, -1), (24, -1), (26, -1), (28, -1), (31, 1),\
            (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (39, -1), (40, -1),\
            (41, -2), (42, -1), (43, -1), (46, 1), (47, 1), (48, 1)]\
            , IntegerRing()), cyclotomic.cycloPoly(105))

    def testCycloMoebius(self):
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (2, -1), (4, 1)]\
            , IntegerRing()), cyclotomic.cycloMoebius(12))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (3, 1), (9, -1), (12, -1), (15, -1), (21, 1), (24, 1)]\
            , IntegerRing()), cyclotomic.cycloMoebius(90))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),\
            (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1),\
            (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1),\
            (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1),\
            (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1),\
            (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1),\
            (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1),\
            (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1),\
            (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1),\
            (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1),\
            (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1),\
            (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1),\
            (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1),\
            (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1),\
            (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1),\
            (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1),\
            (111, 1), (112, 1)]\
            , IntegerRing()), cyclotomic.cycloMoebius(113))
        self.assertEqual(IntegerPolynomial(\
            [(0, 1), (1, 1), (2, 1), (5, -1), (6, -1), (7, -2), (8, -1),\
            (9, -1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1),\
            (20, -1), (22, -1), (24, -1), (26, -1), (28, -1), (31, 1),\
            (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (39, -1), (40, -1),\
            (41, -2), (42, -1), (43, -1), (46, 1), (47, 1), (48, 1)]\
            , IntegerRing()), cyclotomic.cycloMoebius(105))

def suite(suffix="Test"):
    suite = unittest.TestSuite()
    all_names = globals()
    for name in list(all_names):
        if name.endswith(suffix):
            suite.addTest(unittest.makeSuite(all_names[name], "test"))
    return suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())


