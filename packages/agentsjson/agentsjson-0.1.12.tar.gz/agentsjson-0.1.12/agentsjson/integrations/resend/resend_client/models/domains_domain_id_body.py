# coding: utf-8

"""
    Resend

    Resend is the email platform for developers.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainsDomainIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open_tracking': 'bool',
        'click_tracking': 'bool',
        'tls': 'str'
    }

    attribute_map = {
        'open_tracking': 'open_tracking',
        'click_tracking': 'click_tracking',
        'tls': 'tls'
    }

    def __init__(self, open_tracking=None, click_tracking=None, tls='opportunistic'):  # noqa: E501
        """DomainsDomainIdBody - a model defined in Swagger"""  # noqa: E501
        self._open_tracking = None
        self._click_tracking = None
        self._tls = None
        self.discriminator = None
        if open_tracking is not None:
            self.open_tracking = open_tracking
        if click_tracking is not None:
            self.click_tracking = click_tracking
        if tls is not None:
            self.tls = tls

    @property
    def open_tracking(self):
        """Gets the open_tracking of this DomainsDomainIdBody.  # noqa: E501

        Track the open rate of each email.  # noqa: E501

        :return: The open_tracking of this DomainsDomainIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._open_tracking

    @open_tracking.setter
    def open_tracking(self, open_tracking):
        """Sets the open_tracking of this DomainsDomainIdBody.

        Track the open rate of each email.  # noqa: E501

        :param open_tracking: The open_tracking of this DomainsDomainIdBody.  # noqa: E501
        :type: bool
        """

        self._open_tracking = open_tracking

    @property
    def click_tracking(self):
        """Gets the click_tracking of this DomainsDomainIdBody.  # noqa: E501

        Track clicks within the body of each HTML email.  # noqa: E501

        :return: The click_tracking of this DomainsDomainIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._click_tracking

    @click_tracking.setter
    def click_tracking(self, click_tracking):
        """Sets the click_tracking of this DomainsDomainIdBody.

        Track clicks within the body of each HTML email.  # noqa: E501

        :param click_tracking: The click_tracking of this DomainsDomainIdBody.  # noqa: E501
        :type: bool
        """

        self._click_tracking = click_tracking

    @property
    def tls(self):
        """Gets the tls of this DomainsDomainIdBody.  # noqa: E501

        enforced | opportunistic.  # noqa: E501

        :return: The tls of this DomainsDomainIdBody.  # noqa: E501
        :rtype: str
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this DomainsDomainIdBody.

        enforced | opportunistic.  # noqa: E501

        :param tls: The tls of this DomainsDomainIdBody.  # noqa: E501
        :type: str
        """

        self._tls = tls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainsDomainIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainsDomainIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
