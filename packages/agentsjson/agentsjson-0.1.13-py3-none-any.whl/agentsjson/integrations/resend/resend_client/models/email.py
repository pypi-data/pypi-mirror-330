# coding: utf-8

"""
    Resend

    Resend is the email platform for developers.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Email(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'to': 'list[str]',
        '_from': 'str',
        'created_at': 'datetime',
        'subject': 'str',
        'html': 'str',
        'text': 'str',
        'bcc': 'list[str]',
        'cc': 'list[str]',
        'reply_to': 'list[str]',
        'last_event': 'str'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'to': 'to',
        '_from': 'from',
        'created_at': 'created_at',
        'subject': 'subject',
        'html': 'html',
        'text': 'text',
        'bcc': 'bcc',
        'cc': 'cc',
        'reply_to': 'reply_to',
        'last_event': 'last_event'
    }

    def __init__(self, object=None, id=None, to=None, _from=None, created_at=None, subject=None, html=None, text=None, bcc=None, cc=None, reply_to=None, last_event=None):  # noqa: E501
        """Email - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._to = None
        self.__from = None
        self._created_at = None
        self._subject = None
        self._html = None
        self._text = None
        self._bcc = None
        self._cc = None
        self._reply_to = None
        self._last_event = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if id is not None:
            self.id = id
        if to is not None:
            self.to = to
        if _from is not None:
            self._from = _from
        if created_at is not None:
            self.created_at = created_at
        if subject is not None:
            self.subject = subject
        if html is not None:
            self.html = html
        if text is not None:
            self.text = text
        if bcc is not None:
            self.bcc = bcc
        if cc is not None:
            self.cc = cc
        if reply_to is not None:
            self.reply_to = reply_to
        if last_event is not None:
            self.last_event = last_event

    @property
    def object(self):
        """Gets the object of this Email.  # noqa: E501

        The type of object.  # noqa: E501

        :return: The object of this Email.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Email.

        The type of object.  # noqa: E501

        :param object: The object of this Email.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def id(self):
        """Gets the id of this Email.  # noqa: E501

        The ID of the email.  # noqa: E501

        :return: The id of this Email.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Email.

        The ID of the email.  # noqa: E501

        :param id: The id of this Email.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def to(self):
        """Gets the to of this Email.  # noqa: E501


        :return: The to of this Email.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Email.


        :param to: The to of this Email.  # noqa: E501
        :type: list[str]
        """

        self._to = to

    @property
    def _from(self):
        """Gets the _from of this Email.  # noqa: E501

        The email address of the sender.  # noqa: E501

        :return: The _from of this Email.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Email.

        The email address of the sender.  # noqa: E501

        :param _from: The _from of this Email.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def created_at(self):
        """Gets the created_at of this Email.  # noqa: E501

        The date and time the email was created.  # noqa: E501

        :return: The created_at of this Email.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Email.

        The date and time the email was created.  # noqa: E501

        :param created_at: The created_at of this Email.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def subject(self):
        """Gets the subject of this Email.  # noqa: E501

        The subject line of the email.  # noqa: E501

        :return: The subject of this Email.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Email.

        The subject line of the email.  # noqa: E501

        :param subject: The subject of this Email.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def html(self):
        """Gets the html of this Email.  # noqa: E501

        The HTML body of the email.  # noqa: E501

        :return: The html of this Email.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Email.

        The HTML body of the email.  # noqa: E501

        :param html: The html of this Email.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def text(self):
        """Gets the text of this Email.  # noqa: E501

        The plain text body of the email.  # noqa: E501

        :return: The text of this Email.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Email.

        The plain text body of the email.  # noqa: E501

        :param text: The text of this Email.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def bcc(self):
        """Gets the bcc of this Email.  # noqa: E501

        The email addresses of the blind carbon copy recipients.  # noqa: E501

        :return: The bcc of this Email.  # noqa: E501
        :rtype: list[str]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this Email.

        The email addresses of the blind carbon copy recipients.  # noqa: E501

        :param bcc: The bcc of this Email.  # noqa: E501
        :type: list[str]
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this Email.  # noqa: E501

        The email addresses of the carbon copy recipients.  # noqa: E501

        :return: The cc of this Email.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this Email.

        The email addresses of the carbon copy recipients.  # noqa: E501

        :param cc: The cc of this Email.  # noqa: E501
        :type: list[str]
        """

        self._cc = cc

    @property
    def reply_to(self):
        """Gets the reply_to of this Email.  # noqa: E501

        The email addresses to which replies should be sent.  # noqa: E501

        :return: The reply_to of this Email.  # noqa: E501
        :rtype: list[str]
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this Email.

        The email addresses to which replies should be sent.  # noqa: E501

        :param reply_to: The reply_to of this Email.  # noqa: E501
        :type: list[str]
        """

        self._reply_to = reply_to

    @property
    def last_event(self):
        """Gets the last_event of this Email.  # noqa: E501

        The status of the email.  # noqa: E501

        :return: The last_event of this Email.  # noqa: E501
        :rtype: str
        """
        return self._last_event

    @last_event.setter
    def last_event(self, last_event):
        """Sets the last_event of this Email.

        The status of the email.  # noqa: E501

        :param last_event: The last_event of this Email.  # noqa: E501
        :type: str
        """

        self._last_event = last_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Email, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Email):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
