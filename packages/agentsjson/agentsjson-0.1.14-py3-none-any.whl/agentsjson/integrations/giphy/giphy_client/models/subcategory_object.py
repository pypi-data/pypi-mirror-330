# coding: utf-8

"""
    Giphy API

    The Giphy API allows you to search, upload, and manage GIFs and stickers. It provides endpoints to access trending content, search for specific GIFs, translate phrases into GIFs, and more.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubcategoryObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'name_encoded': 'str'
    }

    attribute_map = {
        'name': 'name',
        'name_encoded': 'name_encoded'
    }

    def __init__(self, name=None, name_encoded=None):  # noqa: E501
        """SubcategoryObject - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._name_encoded = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if name_encoded is not None:
            self.name_encoded = name_encoded

    @property
    def name(self):
        """Gets the name of this SubcategoryObject.  # noqa: E501

        Subcategory name.  # noqa: E501

        :return: The name of this SubcategoryObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubcategoryObject.

        Subcategory name.  # noqa: E501

        :param name: The name of this SubcategoryObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_encoded(self):
        """Gets the name_encoded of this SubcategoryObject.  # noqa: E501

        Encoded subcategory name.  # noqa: E501

        :return: The name_encoded of this SubcategoryObject.  # noqa: E501
        :rtype: str
        """
        return self._name_encoded

    @name_encoded.setter
    def name_encoded(self, name_encoded):
        """Sets the name_encoded of this SubcategoryObject.

        Encoded subcategory name.  # noqa: E501

        :param name_encoded: The name_encoded of this SubcategoryObject.  # noqa: E501
        :type: str
        """

        self._name_encoded = name_encoded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubcategoryObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubcategoryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
