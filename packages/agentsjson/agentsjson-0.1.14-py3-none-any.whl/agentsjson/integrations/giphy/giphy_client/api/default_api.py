# coding: utf-8

"""
    Giphy API

    The Giphy API allows you to search, upload, and manage GIFs and stickers. It provides endpoints to access trending content, search for specific GIFs, translate phrases into GIFs, and more.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def giphy_get_channels_search(self, api_key, q, **kwargs):  # noqa: E501
        """Channel Search  # noqa: E501

        Returns all the GIPHY channels matching the query term.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_channels_search(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Accepts term to search through GIPHY’s channels. (required)
        :param int limit: The maximum number of objects to return.  Default: 25  Maximum: 50 
        :param int offset: Specifies the starting position of the results.  Default: 0 
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_channels_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_channels_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
            return data

    def giphy_get_channels_search_with_http_info(self, api_key, q, **kwargs):  # noqa: E501
        """Channel Search  # noqa: E501

        Returns all the GIPHY channels matching the query term.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_channels_search_with_http_info(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Accepts term to search through GIPHY’s channels. (required)
        :param int limit: The maximum number of objects to return.  Default: 25  Maximum: 50 
        :param int offset: Specifies the starting position of the results.  Default: 0 
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_channels_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_channels_search`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `giphy_get_channels_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/channels/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_emoji(self, **kwargs):  # noqa: E501
        """Get Emoji  # noqa: E501

        Fetch GIF Objects for the set of GIPHY Emoji.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_emoji(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results. (Default: 0) 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_emoji_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_emoji_with_http_info(**kwargs)  # noqa: E501
            return data

    def giphy_get_emoji_with_http_info(self, **kwargs):  # noqa: E501
        """Get Emoji  # noqa: E501

        Fetch GIF Objects for the set of GIPHY Emoji.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_emoji_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results. (Default: 0) 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_emoji" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/emoji', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_emoji_variations_by_gif_id(self, gif_id, **kwargs):  # noqa: E501
        """Get Emoji Variations  # noqa: E501

        Fetch the variations associated with a given emoji.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_emoji_variations_by_gif_id(gif_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str gif_id: The ID of the emoji GIF. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_emoji_variations_by_gif_id_with_http_info(gif_id, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_emoji_variations_by_gif_id_with_http_info(gif_id, **kwargs)  # noqa: E501
            return data

    def giphy_get_emoji_variations_by_gif_id_with_http_info(self, gif_id, **kwargs):  # noqa: E501
        """Get Emoji Variations  # noqa: E501

        Fetch the variations associated with a given emoji.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_emoji_variations_by_gif_id_with_http_info(gif_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str gif_id: The ID of the emoji GIF. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gif_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_emoji_variations_by_gif_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gif_id' is set
        if ('gif_id' not in params or
                params['gif_id'] is None):
            raise ValueError("Missing the required parameter `gif_id` when calling `giphy_get_emoji_variations_by_gif_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gif_id' in params:
            path_params['gif_id'] = params['gif_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/emoji/{gif_id}/variations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs(self, api_key, ids, **kwargs):  # noqa: E501
        """Get GIFs by IDs  # noqa: E501

        Returns metadata of multiple GIFs based on the GIF IDs specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs(api_key, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str ids: Filters results by specified GIF IDs, separated by commas.  Maximum GIF IDs: 100  (required)
        :param str random_id: An ID/proxy for a specific user.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_with_http_info(api_key, ids, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_with_http_info(api_key, ids, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_with_http_info(self, api_key, ids, **kwargs):  # noqa: E501
        """Get GIFs by IDs  # noqa: E501

        Returns metadata of multiple GIFs based on the GIF IDs specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_with_http_info(api_key, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str ids: Filters results by specified GIF IDs, separated by commas.  Maximum GIF IDs: 100  (required)
        :param str random_id: An ID/proxy for a specific user.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'ids', 'random_id', 'rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs`")  # noqa: E501
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `giphy_get_gifs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_by_gif_id(self, api_key, gif_id, **kwargs):  # noqa: E501
        """Get GIF by ID  # noqa: E501

        Returns a GIF's metadata based on the GIF ID specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_by_gif_id(api_key, gif_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str gif_id: The ID of the GIF you want details for. (required)
        :param str random_id: An ID/proxy for a specific user.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_by_gif_id_with_http_info(api_key, gif_id, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_by_gif_id_with_http_info(api_key, gif_id, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_by_gif_id_with_http_info(self, api_key, gif_id, **kwargs):  # noqa: E501
        """Get GIF by ID  # noqa: E501

        Returns a GIF's metadata based on the GIF ID specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_by_gif_id_with_http_info(api_key, gif_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str gif_id: The ID of the GIF you want details for. (required)
        :param str random_id: An ID/proxy for a specific user.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'gif_id', 'random_id', 'rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_by_gif_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_by_gif_id`")  # noqa: E501
        # verify the required parameter 'gif_id' is set
        if ('gif_id' not in params or
                params['gif_id'] is None):
            raise ValueError("Missing the required parameter `gif_id` when calling `giphy_get_gifs_by_gif_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gif_id' in params:
            path_params['gif_id'] = params['gif_id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/{gif_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_categories(self, api_key, **kwargs):  # noqa: E501
        """Get Categories  # noqa: E501

        Provides users a list of GIF categories on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_categories(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_categories_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_categories_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_categories_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Categories  # noqa: E501

        Provides users a list of GIF categories on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_categories_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_random(self, api_key, **kwargs):  # noqa: E501
        """Random GIF  # noqa: E501

        Returns a single random GIF related to the word or phrase entered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_random(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str tag: Filters results by specified tag.  Retrieves any random GIF. You can optimize results by supplying GIF tag `@username` and `rating` query parameters. 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_random_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_random_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_random_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Random GIF  # noqa: E501

        Returns a single random GIF related to the word or phrase entered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_random_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str tag: Filters results by specified tag.  Retrieves any random GIF. You can optimize results by supplying GIF tag `@username` and `rating` query parameters. 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'tag', 'rating', 'random_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_random" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_random`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_search(self, api_key, q, **kwargs):  # noqa: E501
        """Search GIFs  # noqa: E501

        GIPHY Search gives you instant access to our library of millions of GIFs by entering a word or phrase.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_search(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Search query term or phrase.  Adding `@<username>` anywhere in the `q` parameter effectively changes the search query to be a search for a specific user’s GIFs (user has to be public and verified by GIPHY).  If the `q` parameter contains one of these words: `sticker`, `stickers`, or `transparent`, the search will return sticker content.  Maximum length: 50 characters.  (required)
        :param int limit: The maximum number of objects to return. (Default: 25). For beta keys max limit is 50. 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 4999 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str lang: Specify default language for regional content; use a 2-letter ISO 639-1 language code.
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_search_with_http_info(self, api_key, q, **kwargs):  # noqa: E501
        """Search GIFs  # noqa: E501

        GIPHY Search gives you instant access to our library of millions of GIFs by entering a word or phrase.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_search_with_http_info(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Search query term or phrase.  Adding `@<username>` anywhere in the `q` parameter effectively changes the search query to be a search for a specific user’s GIFs (user has to be public and verified by GIPHY).  If the `q` parameter contains one of these words: `sticker`, `stickers`, or `transparent`, the search will return sticker content.  Maximum length: 50 characters.  (required)
        :param int limit: The maximum number of objects to return. (Default: 25). For beta keys max limit is 50. 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 4999 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str lang: Specify default language for regional content; use a 2-letter ISO 639-1 language code.
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset', 'rating', 'lang', 'random_id', 'bundle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_search`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `giphy_get_gifs_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'bundle' in params:
            query_params.append(('bundle', params['bundle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_search_tags(self, api_key, q, **kwargs):  # noqa: E501
        """Autocomplete  # noqa: E501

        Provides users a list of valid terms that complete the given tag on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_search_tags(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Tag term. (required)
        :param int limit: The maximum number of objects to return. (Default: 5) 
        :param int offset: Specifies the starting position of the results. (Default: 0) 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_search_tags_with_http_info(api_key, q, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_search_tags_with_http_info(api_key, q, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_search_tags_with_http_info(self, api_key, q, **kwargs):  # noqa: E501
        """Autocomplete  # noqa: E501

        Provides users a list of valid terms that complete the given tag on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_search_tags_with_http_info(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: Tag term. (required)
        :param int limit: The maximum number of objects to return. (Default: 5) 
        :param int offset: Specifies the starting position of the results. (Default: 0) 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_search_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_search_tags`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `giphy_get_gifs_search_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/search/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_translate(self, api_key, s, **kwargs):  # noqa: E501
        """Translate to GIF  # noqa: E501

        Converts words and phrases to the perfect GIF using GIPHY's special sauce algorithm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_translate(api_key, s, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str s: Recommends a single GIF based on the supplied term.  It's possible to use `@` or `#` to help search user channel (`@username`) or GIFs related to hashtag word.  (required)
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_translate_with_http_info(api_key, s, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_translate_with_http_info(api_key, s, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_translate_with_http_info(self, api_key, s, **kwargs):  # noqa: E501
        """Translate to GIF  # noqa: E501

        Converts words and phrases to the perfect GIF using GIPHY's special sauce algorithm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_translate_with_http_info(api_key, s, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str s: Recommends a single GIF based on the supplied term.  It's possible to use `@` or `#` to help search user channel (`@username`) or GIFs related to hashtag word.  (required)
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 's', 'rating', 'random_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_translate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_translate`")  # noqa: E501
        # verify the required parameter 's' is set
        if ('s' not in params or
                params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `giphy_get_gifs_translate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/translate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_gifs_trending(self, api_key, **kwargs):  # noqa: E501
        """Trending GIFs  # noqa: E501

        Returns a list of the most relevant and engaging GIFs each and every day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_trending(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 499 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_gifs_trending_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_gifs_trending_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_gifs_trending_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Trending GIFs  # noqa: E501

        Returns a list of the most relevant and engaging GIFs each and every day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_gifs_trending_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 499 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'offset', 'rating', 'random_id', 'bundle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_gifs_trending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_gifs_trending`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'bundle' in params:
            query_params.append(('bundle', params['bundle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gifs/trending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_randomid(self, api_key, **kwargs):  # noqa: E501
        """Get Random ID  # noqa: E501

        Generates a unique ID you can assign to each new user in your app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_randomid(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_randomid_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_randomid_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_randomid_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Random ID  # noqa: E501

        Generates a unique ID you can assign to each new user in your app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_randomid_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_randomid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_randomid`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/randomid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_stickers_random(self, api_key, **kwargs):  # noqa: E501
        """Random Sticker  # noqa: E501

        Returns a single random sticker related to the word or phrase entered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_random(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str tag: As above.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: As above.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_stickers_random_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_stickers_random_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_stickers_random_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Random Sticker  # noqa: E501

        Returns a single random sticker related to the word or phrase entered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_random_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str tag: As above.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: As above.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'tag', 'rating', 'random_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_stickers_random" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_stickers_random`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stickers/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_stickers_search(self, api_key, q, **kwargs):  # noqa: E501
        """Search Stickers  # noqa: E501

        GIPHY Search gives you instant access to our library of millions of stickers by entering a word or phrase.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_search(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: As above. (required)
        :param int limit: As above.
        :param int offset: As above.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str lang: As above.
        :param str random_id: As above.
        :param str bundle: As above.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_stickers_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_stickers_search_with_http_info(api_key, q, **kwargs)  # noqa: E501
            return data

    def giphy_get_stickers_search_with_http_info(self, api_key, q, **kwargs):  # noqa: E501
        """Search Stickers  # noqa: E501

        GIPHY Search gives you instant access to our library of millions of stickers by entering a word or phrase.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_search_with_http_info(api_key, q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str q: As above. (required)
        :param int limit: As above.
        :param int offset: As above.
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str lang: As above.
        :param str random_id: As above.
        :param str bundle: As above.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'q', 'limit', 'offset', 'rating', 'lang', 'random_id', 'bundle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_stickers_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_stickers_search`")  # noqa: E501
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `giphy_get_stickers_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'bundle' in params:
            query_params.append(('bundle', params['bundle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stickers/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_stickers_translate(self, api_key, s, **kwargs):  # noqa: E501
        """Translate to Sticker  # noqa: E501

        Converts words and phrases to the perfect sticker using GIPHY's special sauce algorithm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_translate(api_key, s, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str s: As above. (required)
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: As above.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_stickers_translate_with_http_info(api_key, s, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_stickers_translate_with_http_info(api_key, s, **kwargs)  # noqa: E501
            return data

    def giphy_get_stickers_translate_with_http_info(self, api_key, s, **kwargs):  # noqa: E501
        """Translate to Sticker  # noqa: E501

        Converts words and phrases to the perfect sticker using GIPHY's special sauce algorithm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_translate_with_http_info(api_key, s, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str s: As above. (required)
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: As above.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 's', 'rating', 'random_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_stickers_translate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_stickers_translate`")  # noqa: E501
        # verify the required parameter 's' is set
        if ('s' not in params or
                params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `giphy_get_stickers_translate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stickers/translate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_stickers_trending(self, api_key, **kwargs):  # noqa: E501
        """Trending Stickers  # noqa: E501

        Returns a list of the most relevant and engaging stickers each and every day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_trending(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 499 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_stickers_trending_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_stickers_trending_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_stickers_trending_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Trending Stickers  # noqa: E501

        Returns a list of the most relevant and engaging stickers each and every day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_stickers_trending_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param int limit: The maximum number of objects to return. (Default: 25) 
        :param int offset: Specifies the starting position of the results.  Default: 0  Maximum: 499 
        :param str rating: Filters results by specified rating.  Acceptable values include `g`, `pg`, `pg-13`, `r`. If you do not specify a rating, you will receive results from all possible ratings. 
        :param str random_id: An ID/proxy for a specific user.
        :param str bundle: Returns only renditions that correspond to the named bundle.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'offset', 'rating', 'random_id', 'bundle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_stickers_trending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_stickers_trending`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'rating' in params:
            query_params.append(('rating', params['rating']))  # noqa: E501
        if 'random_id' in params:
            query_params.append(('random_id', params['random_id']))  # noqa: E501
        if 'bundle' in params:
            query_params.append(('bundle', params['bundle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stickers/trending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_tags_related_by_term(self, api_key, term, **kwargs):  # noqa: E501
        """Search Suggestions  # noqa: E501

        Provides users a list of tag terms related to the given tag on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_tags_related_by_term(api_key, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str term: Tag term. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_tags_related_by_term_with_http_info(api_key, term, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_tags_related_by_term_with_http_info(api_key, term, **kwargs)  # noqa: E501
            return data

    def giphy_get_tags_related_by_term_with_http_info(self, api_key, term, **kwargs):  # noqa: E501
        """Search Suggestions  # noqa: E501

        Provides users a list of tag terms related to the given tag on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_tags_related_by_term_with_http_info(api_key, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :param str term: Tag term. (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_tags_related_by_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_tags_related_by_term`")  # noqa: E501
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `giphy_get_tags_related_by_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tags/related/{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def giphy_get_trending_searches(self, api_key, **kwargs):  # noqa: E501
        """Trending Search Terms  # noqa: E501

        Provides users a list of the most popular trending search terms on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_trending_searches(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.giphy_get_trending_searches_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.giphy_get_trending_searches_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def giphy_get_trending_searches_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Trending Search Terms  # noqa: E501

        Provides users a list of the most popular trending search terms on the GIPHY network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.giphy_get_trending_searches_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: GIPHY API Key. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method giphy_get_trending_searches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `giphy_get_trending_searches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trending/searches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
