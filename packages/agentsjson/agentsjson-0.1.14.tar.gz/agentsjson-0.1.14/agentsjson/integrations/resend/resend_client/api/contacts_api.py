# coding: utf-8

"""
    Resend

    Resend is the email platform for developers.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class ContactsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resend_delete_audiences_contacts_by_audience_id_and_email(self, email, audience_id, **kwargs):  # noqa: E501
        """Remove an existing contact by email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_delete_audiences_contacts_by_audience_id_and_email(email, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str audience_id: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_delete_audiences_contacts_by_audience_id_and_email_with_http_info(email, audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_delete_audiences_contacts_by_audience_id_and_email_with_http_info(email, audience_id, **kwargs)  # noqa: E501
            return data

    def resend_delete_audiences_contacts_by_audience_id_and_email_with_http_info(self, email, audience_id, **kwargs):  # noqa: E501
        """Remove an existing contact by email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_delete_audiences_contacts_by_audience_id_and_email_with_http_info(email, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str audience_id: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'audience_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_delete_audiences_contacts_by_audience_id_and_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `resend_delete_audiences_contacts_by_audience_id_and_email`")  # noqa: E501
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_delete_audiences_contacts_by_audience_id_and_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts/{email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_delete_audiences_contacts_by_audience_id_and_id(self, id, audience_id, **kwargs):  # noqa: E501
        """Remove an existing contact by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_delete_audiences_contacts_by_audience_id_and_id(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_delete_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_delete_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
            return data

    def resend_delete_audiences_contacts_by_audience_id_and_id_with_http_info(self, id, audience_id, **kwargs):  # noqa: E501
        """Remove an existing contact by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_delete_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'audience_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_delete_audiences_contacts_by_audience_id_and_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resend_delete_audiences_contacts_by_audience_id_and_id`")  # noqa: E501
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_delete_audiences_contacts_by_audience_id_and_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_get_audiences_contacts_by_audience_id(self, audience_id, **kwargs):  # noqa: E501
        """Retrieve a list of contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_get_audiences_contacts_by_audience_id(audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audience_id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_get_audiences_contacts_by_audience_id_with_http_info(audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_get_audiences_contacts_by_audience_id_with_http_info(audience_id, **kwargs)  # noqa: E501
            return data

    def resend_get_audiences_contacts_by_audience_id_with_http_info(self, audience_id, **kwargs):  # noqa: E501
        """Retrieve a list of contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_get_audiences_contacts_by_audience_id_with_http_info(audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audience_id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_get_audiences_contacts_by_audience_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_get_audiences_contacts_by_audience_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_get_audiences_contacts_by_audience_id_and_id(self, id, audience_id, **kwargs):  # noqa: E501
        """Retrieve a single contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_get_audiences_contacts_by_audience_id_and_id(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_get_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_get_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
            return data

    def resend_get_audiences_contacts_by_audience_id_and_id_with_http_info(self, id, audience_id, **kwargs):  # noqa: E501
        """Retrieve a single contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_get_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'audience_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_get_audiences_contacts_by_audience_id_and_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resend_get_audiences_contacts_by_audience_id_and_id`")  # noqa: E501
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_get_audiences_contacts_by_audience_id_and_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_patch_audiences_contacts_by_audience_id_and_id(self, id, audience_id, **kwargs):  # noqa: E501
        """Update a single contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_patch_audiences_contacts_by_audience_id_and_id(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :param ContactsIdBody body:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_patch_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_patch_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, **kwargs)  # noqa: E501
            return data

    def resend_patch_audiences_contacts_by_audience_id_and_id_with_http_info(self, id, audience_id, **kwargs):  # noqa: E501
        """Update a single contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_patch_audiences_contacts_by_audience_id_and_id_with_http_info(id, audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str audience_id: (required)
        :param ContactsIdBody body:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'audience_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_patch_audiences_contacts_by_audience_id_and_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resend_patch_audiences_contacts_by_audience_id_and_id`")  # noqa: E501
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_patch_audiences_contacts_by_audience_id_and_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resend_post_audiences_contacts_by_audience_id(self, audience_id, **kwargs):  # noqa: E501
        """Create a new contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_post_audiences_contacts_by_audience_id(audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audience_id: (required)
        :param AudienceIdContactsBody body:
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resend_post_audiences_contacts_by_audience_id_with_http_info(audience_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resend_post_audiences_contacts_by_audience_id_with_http_info(audience_id, **kwargs)  # noqa: E501
            return data

    def resend_post_audiences_contacts_by_audience_id_with_http_info(self, audience_id, **kwargs):  # noqa: E501
        """Create a new contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resend_post_audiences_contacts_by_audience_id_with_http_info(audience_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audience_id: (required)
        :param AudienceIdContactsBody body:
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_post_audiences_contacts_by_audience_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_id' is set
        if ('audience_id' not in params or
                params['audience_id'] is None):
            raise ValueError("Missing the required parameter `audience_id` when calling `resend_post_audiences_contacts_by_audience_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_id' in params:
            path_params['audience_id'] = params['audience_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/audiences/{audience_id}/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
