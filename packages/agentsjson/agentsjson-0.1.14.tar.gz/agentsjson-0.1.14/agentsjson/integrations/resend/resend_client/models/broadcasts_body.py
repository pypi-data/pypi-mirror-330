# coding: utf-8

"""
    Resend

    Resend is the email platform for developers.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BroadcastsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'audience_id': 'str',
        '_from': 'str',
        'subject': 'str',
        'reply_to': 'list[str]',
        'preview_text': 'str',
        'html': 'str',
        'text': 'str'
    }

    attribute_map = {
        'name': 'name',
        'audience_id': 'audience_id',
        '_from': 'from',
        'subject': 'subject',
        'reply_to': 'reply_to',
        'preview_text': 'preview_text',
        'html': 'html',
        'text': 'text'
    }

    def __init__(self, name=None, audience_id=None, _from=None, subject=None, reply_to=None, preview_text=None, html=None, text=None):  # noqa: E501
        """BroadcastsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._audience_id = None
        self.__from = None
        self._subject = None
        self._reply_to = None
        self._preview_text = None
        self._html = None
        self._text = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.audience_id = audience_id
        self._from = _from
        self.subject = subject
        if reply_to is not None:
            self.reply_to = reply_to
        if preview_text is not None:
            self.preview_text = preview_text
        if html is not None:
            self.html = html
        if text is not None:
            self.text = text

    @property
    def name(self):
        """Gets the name of this BroadcastsBody.  # noqa: E501

        Name of the broadcast.  # noqa: E501

        :return: The name of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BroadcastsBody.

        Name of the broadcast.  # noqa: E501

        :param name: The name of this BroadcastsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def audience_id(self):
        """Gets the audience_id of this BroadcastsBody.  # noqa: E501

        Unique identifier of the audience this broadcast will be sent to.  # noqa: E501

        :return: The audience_id of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._audience_id

    @audience_id.setter
    def audience_id(self, audience_id):
        """Sets the audience_id of this BroadcastsBody.

        Unique identifier of the audience this broadcast will be sent to.  # noqa: E501

        :param audience_id: The audience_id of this BroadcastsBody.  # noqa: E501
        :type: str
        """
        if audience_id is None:
            raise ValueError("Invalid value for `audience_id`, must not be `None`")  # noqa: E501

        self._audience_id = audience_id

    @property
    def _from(self):
        """Gets the _from of this BroadcastsBody.  # noqa: E501

        The email address of the sender.  # noqa: E501

        :return: The _from of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BroadcastsBody.

        The email address of the sender.  # noqa: E501

        :param _from: The _from of this BroadcastsBody.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def subject(self):
        """Gets the subject of this BroadcastsBody.  # noqa: E501

        The subject line of the email.  # noqa: E501

        :return: The subject of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this BroadcastsBody.

        The subject line of the email.  # noqa: E501

        :param subject: The subject of this BroadcastsBody.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def reply_to(self):
        """Gets the reply_to of this BroadcastsBody.  # noqa: E501

        The email addresses to which replies should be sent.  # noqa: E501

        :return: The reply_to of this BroadcastsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this BroadcastsBody.

        The email addresses to which replies should be sent.  # noqa: E501

        :param reply_to: The reply_to of this BroadcastsBody.  # noqa: E501
        :type: list[str]
        """

        self._reply_to = reply_to

    @property
    def preview_text(self):
        """Gets the preview_text of this BroadcastsBody.  # noqa: E501

        The preview text of the email.  # noqa: E501

        :return: The preview_text of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """Sets the preview_text of this BroadcastsBody.

        The preview text of the email.  # noqa: E501

        :param preview_text: The preview_text of this BroadcastsBody.  # noqa: E501
        :type: str
        """

        self._preview_text = preview_text

    @property
    def html(self):
        """Gets the html of this BroadcastsBody.  # noqa: E501

        The HTML version of the message.  # noqa: E501

        :return: The html of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this BroadcastsBody.

        The HTML version of the message.  # noqa: E501

        :param html: The html of this BroadcastsBody.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def text(self):
        """Gets the text of this BroadcastsBody.  # noqa: E501

        The plain text version of the message.  # noqa: E501

        :return: The text of this BroadcastsBody.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BroadcastsBody.

        The plain text version of the message.  # noqa: E501

        :param text: The text of this BroadcastsBody.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BroadcastsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BroadcastsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
