# coding: utf-8

"""
    Giphy API

    The Giphy API allows you to search, upload, and manage GIFs and stickers. It provides endpoints to access trending content, search for specific GIFs, translate phrases into GIFs, and more.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'msg': 'str',
        'response_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'msg': 'msg',
        'response_id': 'response_id'
    }

    def __init__(self, status=None, msg=None, response_id=None):  # noqa: E501
        """MetaObject - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._msg = None
        self._response_id = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if msg is not None:
            self.msg = msg
        if response_id is not None:
            self.response_id = response_id

    @property
    def status(self):
        """Gets the status of this MetaObject.  # noqa: E501

        HTTP Response Code.  # noqa: E501

        :return: The status of this MetaObject.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MetaObject.

        HTTP Response Code.  # noqa: E501

        :param status: The status of this MetaObject.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def msg(self):
        """Gets the msg of this MetaObject.  # noqa: E501

        HTTP Response Message.  # noqa: E501

        :return: The msg of this MetaObject.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this MetaObject.

        HTTP Response Message.  # noqa: E501

        :param msg: The msg of this MetaObject.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def response_id(self):
        """Gets the response_id of this MetaObject.  # noqa: E501

        A unique ID paired with this response from the API.  # noqa: E501

        :return: The response_id of this MetaObject.  # noqa: E501
        :rtype: str
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this MetaObject.

        A unique ID paired with this response from the API.  # noqa: E501

        :param response_id: The response_id of this MetaObject.  # noqa: E501
        :type: str
        """

        self._response_id = response_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
