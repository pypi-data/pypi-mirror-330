[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentic-fleet"
version = "0.4.90"
description = "A powerful multi-agent system for adaptive AI reasoning and automation"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
keywords = ["ai", "agents", "automation", "multi-agent", "adaptive", "AI", "reasoning", "autogen-sample", "autogen", "magentic-one"]
authors = [
  { name = "Zachary BENSALEM", email = "contact@qredence.ai" },
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
    # Core Framework
    "fastapi>=0.109.0",
    "packaging>=23.2",
    "psutil>=5.9.8",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.2.1",
    "python-dotenv>=1.0.1",
    "typing-extensions>=4.8.0",
    "uvicorn>=0.24.0",
    # Networking & Async
    "aiofiles>=23.1.0",
    "aiohttp>=3.11.11,<4.0.0",
    "asyncio>=3.4.3",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "requests>=2.32.3",
    # AI/ML Infrastructure
    "autogen-agentchat>=0.4.7,<0.5.0",
    "autogen-core>=0.4.7,<0.5.0",
    "autogen-ext[langchain,mcp,docker]>=0.4.7,<0.5.0",
    "autogen-ext[magentic-one,web-surfer,file-surfer,video-surfer]>=0.4.7,<0.5.0",
    "autogen-ext[openai,azure]>=0.4.7,<0.5.0",
    "autogen-ext[diskcache]>=0.4.7,<0.5.0",
    "autogen-ext[grpc]<=0.4.7",
    "autogenstudio",
    # Model Providers
    "composio-core>=0.6.11.post1",
    "deepseek>=0.1.0", # For DeepSeek
    "magentic-one-cli",
    "ollama>=0.1.5", # For Ollama
    # Azure Services
    "azure-ai-inference>=1.0.0b6", # For Azure AI Foundry
    "azure-ai-ml>=1.12.1", # For Azure AI Foundry
    "azure-ai-projects>=1.0.0b4", # For Azure AI Foundry
    "azure-core>=1.32.0",
    "azure-cosmos>=4.9.0",
    "azure-identity>=1.19.0",
    "azure-keyvault-secrets>=4.9.0",
    "azure-search-documents==11.6.0b4",
    "azure-storage-blob>=12.24.0",
    # Data Processing
    "jsonlines>=4.0.0",
    "matplotlib>=3.10.0",
    "numpy>=1.26,<2.0",
    "pandas>=2.2.3",
    "pillow>=11.0.0",
    "plotly>=5.16.0",
    "plotly-express>=0.4.1",
    "pytz>=2024.2",
    "requests-html>=0.10.0",
    "seaborn>=0.13.0",
    "yfinance>=0.2.51",
    # Web & Utilities
    "beautifulsoup4>=4.12.0",
    "bing>=0.31",
    "chainlit>=2.2.1",
    "docker>=7.1.0",
    "markitdown>=0.0.1a3",
    "opentelemetry-instrumentation-fastapi>=0.44b0",
    "playwright>=1.20.0", # Updated version for compatibility with playwright
    "sqlalchemy[asyncio]>=2.0.28",
    "psycopg2-binary>=2.9.9",
    "supabase>=2.3.1",
    "tenacity>=9.0.0",
    # Developer Tools
    "aioconsole>=0.8.1",
    "axios>=0.4.0",
    "authlib>=1.4.0",
    "black>=24.10.0",
    "codecov>=2.1.13",
    "gunicorn>=23.0.0",
    "ipykernel>=6.29.5",
    "puremagic>=1.28",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.5.0",
    "redis>=5.2.1",
    "rich>=13.9.4",
    "scikit-learn>=1.6.1",
    "semantic-kernel>=1.19.0",
    "starlette>=0.41.3",
    "tiktoken>=0.8.0",
    "typer>=0.15.1",
    "types-setuptools>=75.8.0.20250110",
    "pyyaml>=6.0.2",
    "setuptools>=75.8.0",
    "modulegraph>=0.19.6",
    "macholib>=1.16.3",
    "py2app>=0.28.8",
    # Additional development dependencies
    "black>=24.10.0", # Code formatter
    "isort>=5.13.2", # Import sorter
    "ruff>=0.5.3",
    "websockets>=14.2",
    "dataclasses-json>=0.6.7",
    "python-socketio>=5.12.1",
    "asyncer>=0.0.7",
    "uptrace>=1.27.0",
    "syncer>=2.0.3",
    "nest-asyncio>=1.6.0",
    "click>=8.1.8",
    "pyjwt>=2.10.1",
    "html2text>=2024.2.26",
    "grpcio>=1.70.0",
    "grpcio-tools==1.64.0",
    "absl-py==2.1.0",
    "dspy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "ruff>=0.1.0",
    "chainlit>=2.2.1",
    "sse-starlette>=2.2.1",
]

[project.urls]
Homepage = "https://github.com/qredence/agenticfleet"
Documentation = "https://github.com/qredence/agenticfleet/tree/main/docs"
Repository = "https://github.com/qredence/agenticfleet.git"
Issues = "https://github.com/qredence/agenticfleet/issues"
Source = "https://github.com/qredence/agenticfleet"
Docker = "https://hub.docker.com/r/qredenceai/agenticfleet"

[project.scripts]
agenticfleet = "agentic_fleet.cli:main"
post_install = "agentic_fleet.scripts:install_playwright_deps"
agenticfleet-run = "agentic_fleet.cli:run"
agenticfleet-stop = "agentic_fleet.cli:stop"
agenticfleet-restart = "agentic_fleet.cli:restart"
agenticfleet-status = "agentic_fleet.cli:status"

[tool.hatch.build]
packages = ["src/agentic_fleet"]
exclude = [
    # Python
    "*.pyc",
    "__pycache__",
    "*.pyo",
    "*.pyd",
    "*.so",
    "*.dylib",
    "*.egg",
    "*.egg-info",
    # Build
    "build",
    "dist",
    "eggs",
    "sdist",
    "develop-eggs",
    # Directories
    "tests",
    "docs",
    "examples",
    ".git",
    ".github",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    # Config files
    ".gitignore",
    ".env*",
    "*.log",
    "tox.ini",
    ".coverage",
    "coverage.xml",
    # System
    ".DS_Store",
    "Thumbs.db",
]

[tool.hatch.version]
path = "src/agentic_fleet/__init__.py"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra
    -q
    --cov=src/agentic_fleet
    --cov-report=xml
    --cov-report=term-missing
    --cov-branch
    --cov-fail-under=80
    -n auto
    --durations=10
    """
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
branch = true
source = ["src/agentic_fleet"]
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "\\.\\.\\.",
]
fail_under = 80

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[project.optional-dependencies]
dev = [
    # Linting and Code Quality
    "ruff>=0.5.3",
    "black>=24.1.1",
    "isort>=5.13.2",

    
    # Testing
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "coverage>=7.4.4",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocstrings[python]>=0.24.0",
    
    # Debugging
    "ipdb>=0.13.13",
    "rich>=10.16.2"
]

test = [
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "coverage>=7.4.4"
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocstrings[python]>=0.24.0"
]

models = [
    "ollama>=0.1.5",
    "autogen-ext[semantic-kernel-anthropic]",
    "autogen-ext[semantic-kernel-google]",
    "autogen-ext[semantic-kernel-ollama]",
    "autogen-ext[semantic-kernel-aws]",
    "autogen-ext[semantic-kernel-mistralai]",
    "autogen-ext[semantic-kernel-hugging-face]"
]

[tool.setuptools.packages.find]
exclude = [
    "tests*",
    "docs*",
    ".github*"
]

[tool.setuptools]
# Prevent accidental editable installations

[tool.setuptools.dynamic]
version = {attr = "agentic_fleet.__version__"}

# Warning for editable installations
[tool.setuptools.package-data]
"agentic_fleet" = [
    "EDITABLE_INSTALL_WARNING.txt"
]
