[project]
name = "notify-bridge"
version = "0.3.0"
description = "A bridge for sending notifications to various platforms"
readme = "README.md"
requires-python = ">=3.8"
keywords = [
    "notification",
    "bridge",
    "feishu",
    "dingtalk",
    "wechat",
]
authors = [
    { name = "Long Hao", email = "hal.long@outlook.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "anyio>=4.0.0",
    "httpx>=0.26.0",
    "pydantic[email]>=2.5.3",
    "pillow>=10.0.0",
    "aiofiles>=23.2.1",
]

[project.license]
file = "LICENSE"

[project.urls]
Homepage = "https://github.com/loonghao/notify-bridge"
Documentation = "https://github.com/loonghao/notify-bridge#readme"
Repository = "https://github.com/loonghao/notify-bridge.git"
Issues = "https://github.com/loonghao/notify-bridge/issues"

[project.entry-points."notify_bridge.notifiers"]
feishu = "notify_bridge.notifiers.feishu:FeishuNotifier"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "python-dotenv>=1.0.0",
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.3.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
]

[tool.black]
line-length = 120
target-version = [
    "py38",
    "py39",
    "py310",
    "py311",
    "py312",
]
include = "\\.pyi?$"
exclude = "(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.nox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n)\n"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
lines_after_imports = 2
use_parentheses = true
lines_between_types = 1
ensure_newline_before_comments = true
line_length = 120
src_paths = [
    "notify_bridge",
    "tests",
]
filter_files = true
known_first_party = "notify_bridge"
import_heading_future = "Import future modules"
import_heading_stdlib = "Import built-in modules"
import_heading_thirdparty = "Import third-party modules"
import_heading_firstparty = "Import local modules"
force_sort_within_sections = true
force_single_line = true
default_section = "THIRDPARTY"
skip_glob = []

[tool.mypy]
python_version = "3.8"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
packages = [
    "notify_bridge",
]
ignore_missing_imports = true
namespace_packages = false
explicit_package_bases = false
disable_error_code = [
    "misc",
    "has-type",
]

[tool.ruff]
line-length = 120
target-version = "py310"
src = [
    "src",
    "tests",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "C",
    "B",
]
ignore = [
    "E501",
    "PLR0913",
    "RUF001",
    "RUF002",
    "RUF003",
    "B904",
    "W293",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
]
"noxfile.py" = [
    "E402",
    "I001",
]
"tests/*" = [
    "S101",
]

[tool.coverage.run]
source = [
    "notify_bridge",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
addopts = "-v --cov=notify_bridge --cov-report=term-missing"

[tool.ai-rules.scripts.new]
path = "G:\\PycharmProjects\\github\\ai-rules\\examples\\test_script.py"
global = false

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
