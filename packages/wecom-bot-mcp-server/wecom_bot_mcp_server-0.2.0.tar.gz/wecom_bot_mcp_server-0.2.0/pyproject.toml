[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "wecom-bot-mcp-server"
version = "0.2.0"
description = "WeCom Bot MCP Server - A Python server for WeCom (WeChat Work) bot following the Model Context Protocol (MCP)"
authors = ["longhao <hal.long@outlook.com>"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.10"
fastmcp = ">=0.4.1"
notify-bridge = ">=0.3.0"
uvicorn = "^0.34.0"
platformdirs = "^4.2.0"
pydantic = "^2.6.1"
ftfy = "^6.3.1"
httpx = "^0.28.1"
pillow = "^10.2.0"
svglib = "^1.5.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.2"
ruff = "^0.1.8"
mypy = "^1.7.1"
nox = "^2023.4.22"
commitizen = "^3.13.0"

[tool.poetry.scripts]
wecom-bot-mcp-server = "wecom_bot_mcp_server.server:main"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "wecom_bot_mcp_server/__version__.py",
]

[tool.pytest.ini_options]
addopts = ""
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

[tool.pytest-asyncio]
mode = "auto"

[tool.coverage.run]
source = ["wecom_bot_mcp_server"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
disable_error_code = ["type-arg", "misc", "no-any-return"]

[tool.ruff]
line-length = 120
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "D", # pydocstyle
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = ["D203", "D213"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"noxfile.py" = ["E402", "I001"]


[tool.nox]
sessions = ["lint", "test"]

[tool.nox.session.lint]
deps = ["ruff", "mypy"]
commands = [
    "ruff check .",
    "ruff format .",
]

[tool.nox.session.test]
deps = ["pytest", "pytest-cov", "pytest-asyncio"]
commands = ["pytest tests/ --cov=wecom_bot_mcp_server"]

[tool.isort]
# Enforce import section headers.
import_heading_future = "Import future modules"
import_heading_stdlib = "Import built-in modules"
import_heading_thirdparty = "Import third-party modules"
import_heading_firstparty = "Import local modules"

force_sort_within_sections = true
force_single_line = true